

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 13 22:27:02 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	dabs	1,0x920,80
   110                           	dabs	1,0x8A0,80
   111                           	dabs	1,0x820,80
   112                           	dabs	1,0x7A0,80
   113                           	dabs	1,0x742,46
   114                           	dabs	1,0x720,34
   115                           	dabs	1,0x6A0,80
   116                           	dabs	1,0x620,80
   117                           	dabs	1,0x5BA,54
   118                           	dabs	1,0x2482,0,_sinArray
   119                           	dabs	1,0x238A,0,_modArray
   120                           	dabs	1,0x7E,2
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  008F                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  0110                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  011D                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  018F                     	;# 
   181  0190                     	;# 
   182  0191                     	;# 
   183  0191                     	;# 
   184  0192                     	;# 
   185  0193                     	;# 
   186  0193                     	;# 
   187  0194                     	;# 
   188  0195                     	;# 
   189  0196                     	;# 
   190  0197                     	;# 
   191  0199                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  020D                     	;# 
   215  020F                     	;# 
   216  0210                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021C                     	;# 
   236  021D                     	;# 
   237  021E                     	;# 
   238  021F                     	;# 
   239  028C                     	;# 
   240  028D                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  029D                     	;# 
   250  029E                     	;# 
   251  029F                     	;# 
   252  030C                     	;# 
   253  030D                     	;# 
   254  0311                     	;# 
   255  0311                     	;# 
   256  0312                     	;# 
   257  0313                     	;# 
   258  0318                     	;# 
   259  0318                     	;# 
   260  0319                     	;# 
   261  031A                     	;# 
   262  031C                     	;# 
   263  031C                     	;# 
   264  031D                     	;# 
   265  031E                     	;# 
   266  038C                     	;# 
   267  038D                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  040C                     	;# 
   272  040D                     	;# 
   273  0411                     	;# 
   274  0411                     	;# 
   275  0412                     	;# 
   276  0413                     	;# 
   277  0414                     	;# 
   278  0415                     	;# 
   279  0416                     	;# 
   280  0417                     	;# 
   281  0418                     	;# 
   282  0418                     	;# 
   283  0419                     	;# 
   284  041A                     	;# 
   285  041B                     	;# 
   286  041C                     	;# 
   287  041D                     	;# 
   288  041E                     	;# 
   289  048D                     	;# 
   290  0491                     	;# 
   291  0491                     	;# 
   292  0492                     	;# 
   293  0492                     	;# 
   294  0493                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0494                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  0496                     	;# 
   303  0497                     	;# 
   304  0497                     	;# 
   305  0595                     	;# 
   306  0596                     	;# 
   307  0597                     	;# 
   308  059C                     	;# 
   309  059D                     	;# 
   310  059E                     	;# 
   311  0611                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0614                     	;# 
   317  0615                     	;# 
   318  0616                     	;# 
   319  0617                     	;# 
   320  0617                     	;# 
   321  0618                     	;# 
   322  0619                     	;# 
   323  061A                     	;# 
   324  061A                     	;# 
   325  061B                     	;# 
   326  061C                     	;# 
   327  061D                     	;# 
   328  061D                     	;# 
   329  061E                     	;# 
   330  061F                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  008C                     	;# 
   373  008D                     	;# 
   374  008E                     	;# 
   375  008F                     	;# 
   376  0090                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0093                     	;# 
   380  0094                     	;# 
   381  0095                     	;# 
   382  0096                     	;# 
   383  0097                     	;# 
   384  0099                     	;# 
   385  009A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  010C                     	;# 
   392  010D                     	;# 
   393  010E                     	;# 
   394  010F                     	;# 
   395  0110                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  011D                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  018F                     	;# 
   402  0190                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  0197                     	;# 
   412  0199                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  019A                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019C                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019D                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019F                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  020D                     	;# 
   436  020F                     	;# 
   437  0210                     	;# 
   438  0211                     	;# 
   439  0211                     	;# 
   440  0212                     	;# 
   441  0212                     	;# 
   442  0213                     	;# 
   443  0213                     	;# 
   444  0214                     	;# 
   445  0214                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0216                     	;# 
   450  0216                     	;# 
   451  0217                     	;# 
   452  0217                     	;# 
   453  0219                     	;# 
   454  021A                     	;# 
   455  021B                     	;# 
   456  021C                     	;# 
   457  021D                     	;# 
   458  021E                     	;# 
   459  021F                     	;# 
   460  028C                     	;# 
   461  028D                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0298                     	;# 
   467  0298                     	;# 
   468  0299                     	;# 
   469  029A                     	;# 
   470  029D                     	;# 
   471  029E                     	;# 
   472  029F                     	;# 
   473  030C                     	;# 
   474  030D                     	;# 
   475  0311                     	;# 
   476  0311                     	;# 
   477  0312                     	;# 
   478  0313                     	;# 
   479  0318                     	;# 
   480  0318                     	;# 
   481  0319                     	;# 
   482  031A                     	;# 
   483  031C                     	;# 
   484  031C                     	;# 
   485  031D                     	;# 
   486  031E                     	;# 
   487  038C                     	;# 
   488  038D                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  040C                     	;# 
   493  040D                     	;# 
   494  0411                     	;# 
   495  0411                     	;# 
   496  0412                     	;# 
   497  0413                     	;# 
   498  0414                     	;# 
   499  0415                     	;# 
   500  0416                     	;# 
   501  0417                     	;# 
   502  0418                     	;# 
   503  0418                     	;# 
   504  0419                     	;# 
   505  041A                     	;# 
   506  041B                     	;# 
   507  041C                     	;# 
   508  041D                     	;# 
   509  041E                     	;# 
   510  048D                     	;# 
   511  0491                     	;# 
   512  0491                     	;# 
   513  0492                     	;# 
   514  0492                     	;# 
   515  0493                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0494                     	;# 
   519  0494                     	;# 
   520  0495                     	;# 
   521  0495                     	;# 
   522  0496                     	;# 
   523  0496                     	;# 
   524  0497                     	;# 
   525  0497                     	;# 
   526  0595                     	;# 
   527  0596                     	;# 
   528  0597                     	;# 
   529  059C                     	;# 
   530  059D                     	;# 
   531  059E                     	;# 
   532  0611                     	;# 
   533  0611                     	;# 
   534  0612                     	;# 
   535  0613                     	;# 
   536  0614                     	;# 
   537  0614                     	;# 
   538  0615                     	;# 
   539  0616                     	;# 
   540  0617                     	;# 
   541  0617                     	;# 
   542  0618                     	;# 
   543  0619                     	;# 
   544  061A                     	;# 
   545  061A                     	;# 
   546  061B                     	;# 
   547  061C                     	;# 
   548  061D                     	;# 
   549  061D                     	;# 
   550  061E                     	;# 
   551  061F                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  008F                     	;# 
   597  0090                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  010F                     	;# 
   616  0110                     	;# 
   617  0116                     	;# 
   618  0117                     	;# 
   619  011D                     	;# 
   620  018C                     	;# 
   621  018D                     	;# 
   622  018F                     	;# 
   623  0190                     	;# 
   624  0191                     	;# 
   625  0191                     	;# 
   626  0192                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0197                     	;# 
   633  0199                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  020D                     	;# 
   657  020F                     	;# 
   658  0210                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0219                     	;# 
   675  021A                     	;# 
   676  021B                     	;# 
   677  021C                     	;# 
   678  021D                     	;# 
   679  021E                     	;# 
   680  021F                     	;# 
   681  028C                     	;# 
   682  028D                     	;# 
   683  0291                     	;# 
   684  0291                     	;# 
   685  0292                     	;# 
   686  0293                     	;# 
   687  0298                     	;# 
   688  0298                     	;# 
   689  0299                     	;# 
   690  029A                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  029F                     	;# 
   694  030C                     	;# 
   695  030D                     	;# 
   696  0311                     	;# 
   697  0311                     	;# 
   698  0312                     	;# 
   699  0313                     	;# 
   700  0318                     	;# 
   701  0318                     	;# 
   702  0319                     	;# 
   703  031A                     	;# 
   704  031C                     	;# 
   705  031C                     	;# 
   706  031D                     	;# 
   707  031E                     	;# 
   708  038C                     	;# 
   709  038D                     	;# 
   710  0394                     	;# 
   711  0395                     	;# 
   712  0396                     	;# 
   713  040C                     	;# 
   714  040D                     	;# 
   715  0411                     	;# 
   716  0411                     	;# 
   717  0412                     	;# 
   718  0413                     	;# 
   719  0414                     	;# 
   720  0415                     	;# 
   721  0416                     	;# 
   722  0417                     	;# 
   723  0418                     	;# 
   724  0418                     	;# 
   725  0419                     	;# 
   726  041A                     	;# 
   727  041B                     	;# 
   728  041C                     	;# 
   729  041D                     	;# 
   730  041E                     	;# 
   731  048D                     	;# 
   732  0491                     	;# 
   733  0491                     	;# 
   734  0492                     	;# 
   735  0492                     	;# 
   736  0493                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0494                     	;# 
   740  0494                     	;# 
   741  0495                     	;# 
   742  0495                     	;# 
   743  0496                     	;# 
   744  0496                     	;# 
   745  0497                     	;# 
   746  0497                     	;# 
   747  0595                     	;# 
   748  0596                     	;# 
   749  0597                     	;# 
   750  059C                     	;# 
   751  059D                     	;# 
   752  059E                     	;# 
   753  0611                     	;# 
   754  0611                     	;# 
   755  0612                     	;# 
   756  0613                     	;# 
   757  0614                     	;# 
   758  0614                     	;# 
   759  0615                     	;# 
   760  0616                     	;# 
   761  0617                     	;# 
   762  0617                     	;# 
   763  0618                     	;# 
   764  0619                     	;# 
   765  061A                     	;# 
   766  061A                     	;# 
   767  061B                     	;# 
   768  061C                     	;# 
   769  061D                     	;# 
   770  061D                     	;# 
   771  061E                     	;# 
   772  061F                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000D                     	;# 
   798  000E                     	;# 
   799  000F                     	;# 
   800  0010                     	;# 
   801  0011                     	;# 
   802  0012                     	;# 
   803  0013                     	;# 
   804  0014                     	;# 
   805  0015                     	;# 
   806  0016                     	;# 
   807  0016                     	;# 
   808  0017                     	;# 
   809  0018                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  008C                     	;# 
   815  008D                     	;# 
   816  008E                     	;# 
   817  008F                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0095                     	;# 
   824  0096                     	;# 
   825  0097                     	;# 
   826  0099                     	;# 
   827  009A                     	;# 
   828  009B                     	;# 
   829  009B                     	;# 
   830  009C                     	;# 
   831  009D                     	;# 
   832  009E                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0110                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  011D                     	;# 
   841  018C                     	;# 
   842  018D                     	;# 
   843  018F                     	;# 
   844  0190                     	;# 
   845  0191                     	;# 
   846  0191                     	;# 
   847  0192                     	;# 
   848  0193                     	;# 
   849  0193                     	;# 
   850  0194                     	;# 
   851  0195                     	;# 
   852  0196                     	;# 
   853  0197                     	;# 
   854  0199                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019E                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  020D                     	;# 
   878  020F                     	;# 
   879  0210                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  0219                     	;# 
   896  021A                     	;# 
   897  021B                     	;# 
   898  021C                     	;# 
   899  021D                     	;# 
   900  021E                     	;# 
   901  021F                     	;# 
   902  028C                     	;# 
   903  028D                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0298                     	;# 
   909  0298                     	;# 
   910  0299                     	;# 
   911  029A                     	;# 
   912  029D                     	;# 
   913  029E                     	;# 
   914  029F                     	;# 
   915  030C                     	;# 
   916  030D                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0318                     	;# 
   922  0318                     	;# 
   923  0319                     	;# 
   924  031A                     	;# 
   925  031C                     	;# 
   926  031C                     	;# 
   927  031D                     	;# 
   928  031E                     	;# 
   929  038C                     	;# 
   930  038D                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  040C                     	;# 
   935  040D                     	;# 
   936  0411                     	;# 
   937  0411                     	;# 
   938  0412                     	;# 
   939  0413                     	;# 
   940  0414                     	;# 
   941  0415                     	;# 
   942  0416                     	;# 
   943  0417                     	;# 
   944  0418                     	;# 
   945  0418                     	;# 
   946  0419                     	;# 
   947  041A                     	;# 
   948  041B                     	;# 
   949  041C                     	;# 
   950  041D                     	;# 
   951  041E                     	;# 
   952  048D                     	;# 
   953  0491                     	;# 
   954  0491                     	;# 
   955  0492                     	;# 
   956  0492                     	;# 
   957  0493                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0494                     	;# 
   961  0494                     	;# 
   962  0495                     	;# 
   963  0495                     	;# 
   964  0496                     	;# 
   965  0496                     	;# 
   966  0497                     	;# 
   967  0497                     	;# 
   968  0595                     	;# 
   969  0596                     	;# 
   970  0597                     	;# 
   971  059C                     	;# 
   972  059D                     	;# 
   973  059E                     	;# 
   974  0611                     	;# 
   975  0611                     	;# 
   976  0612                     	;# 
   977  0613                     	;# 
   978  0614                     	;# 
   979  0614                     	;# 
   980  0615                     	;# 
   981  0616                     	;# 
   982  0617                     	;# 
   983  0617                     	;# 
   984  0618                     	;# 
   985  0619                     	;# 
   986  061A                     	;# 
   987  061A                     	;# 
   988  061B                     	;# 
   989  061C                     	;# 
   990  061D                     	;# 
   991  061D                     	;# 
   992  061E                     	;# 
   993  061F                     	;# 
   994  0FE4                     	;# 
   995  0FE5                     	;# 
   996  0FE6                     	;# 
   997  0FE7                     	;# 
   998  0FE8                     	;# 
   999  0FE9                     	;# 
  1000  0FEA                     	;# 
  1001  0FEB                     	;# 
  1002  0FED                     	;# 
  1003  0FEE                     	;# 
  1004  0FEF                     	;# 
  1005  0000                     	;# 
  1006  0001                     	;# 
  1007  0002                     	;# 
  1008  0003                     	;# 
  1009  0004                     	;# 
  1010  0005                     	;# 
  1011  0006                     	;# 
  1012  0007                     	;# 
  1013  0008                     	;# 
  1014  0009                     	;# 
  1015  000A                     	;# 
  1016  000B                     	;# 
  1017  000C                     	;# 
  1018  000D                     	;# 
  1019  000E                     	;# 
  1020  000F                     	;# 
  1021  0010                     	;# 
  1022  0011                     	;# 
  1023  0012                     	;# 
  1024  0013                     	;# 
  1025  0014                     	;# 
  1026  0015                     	;# 
  1027  0016                     	;# 
  1028  0016                     	;# 
  1029  0017                     	;# 
  1030  0018                     	;# 
  1031  0019                     	;# 
  1032  001A                     	;# 
  1033  001B                     	;# 
  1034  001C                     	;# 
  1035  008C                     	;# 
  1036  008D                     	;# 
  1037  008E                     	;# 
  1038  008F                     	;# 
  1039  0090                     	;# 
  1040  0091                     	;# 
  1041  0092                     	;# 
  1042  0093                     	;# 
  1043  0094                     	;# 
  1044  0095                     	;# 
  1045  0096                     	;# 
  1046  0097                     	;# 
  1047  0099                     	;# 
  1048  009A                     	;# 
  1049  009B                     	;# 
  1050  009B                     	;# 
  1051  009C                     	;# 
  1052  009D                     	;# 
  1053  009E                     	;# 
  1054  010C                     	;# 
  1055  010D                     	;# 
  1056  010E                     	;# 
  1057  010F                     	;# 
  1058  0110                     	;# 
  1059  0116                     	;# 
  1060  0117                     	;# 
  1061  011D                     	;# 
  1062  018C                     	;# 
  1063  018D                     	;# 
  1064  018F                     	;# 
  1065  0190                     	;# 
  1066  0191                     	;# 
  1067  0191                     	;# 
  1068  0192                     	;# 
  1069  0193                     	;# 
  1070  0193                     	;# 
  1071  0194                     	;# 
  1072  0195                     	;# 
  1073  0196                     	;# 
  1074  0197                     	;# 
  1075  0199                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  019A                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019B                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019C                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019D                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  020F                     	;# 
  1100  0210                     	;# 
  1101  0211                     	;# 
  1102  0211                     	;# 
  1103  0212                     	;# 
  1104  0212                     	;# 
  1105  0213                     	;# 
  1106  0213                     	;# 
  1107  0214                     	;# 
  1108  0214                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0216                     	;# 
  1113  0216                     	;# 
  1114  0217                     	;# 
  1115  0217                     	;# 
  1116  0219                     	;# 
  1117  021A                     	;# 
  1118  021B                     	;# 
  1119  021C                     	;# 
  1120  021D                     	;# 
  1121  021E                     	;# 
  1122  021F                     	;# 
  1123  028C                     	;# 
  1124  028D                     	;# 
  1125  0291                     	;# 
  1126  0291                     	;# 
  1127  0292                     	;# 
  1128  0293                     	;# 
  1129  0298                     	;# 
  1130  0298                     	;# 
  1131  0299                     	;# 
  1132  029A                     	;# 
  1133  029D                     	;# 
  1134  029E                     	;# 
  1135  029F                     	;# 
  1136  030C                     	;# 
  1137  030D                     	;# 
  1138  0311                     	;# 
  1139  0311                     	;# 
  1140  0312                     	;# 
  1141  0313                     	;# 
  1142  0318                     	;# 
  1143  0318                     	;# 
  1144  0319                     	;# 
  1145  031A                     	;# 
  1146  031C                     	;# 
  1147  031C                     	;# 
  1148  031D                     	;# 
  1149  031E                     	;# 
  1150  038C                     	;# 
  1151  038D                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  040C                     	;# 
  1156  040D                     	;# 
  1157  0411                     	;# 
  1158  0411                     	;# 
  1159  0412                     	;# 
  1160  0413                     	;# 
  1161  0414                     	;# 
  1162  0415                     	;# 
  1163  0416                     	;# 
  1164  0417                     	;# 
  1165  0418                     	;# 
  1166  0418                     	;# 
  1167  0419                     	;# 
  1168  041A                     	;# 
  1169  041B                     	;# 
  1170  041C                     	;# 
  1171  041D                     	;# 
  1172  041E                     	;# 
  1173  048D                     	;# 
  1174  0491                     	;# 
  1175  0491                     	;# 
  1176  0492                     	;# 
  1177  0492                     	;# 
  1178  0493                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0494                     	;# 
  1182  0494                     	;# 
  1183  0495                     	;# 
  1184  0495                     	;# 
  1185  0496                     	;# 
  1186  0496                     	;# 
  1187  0497                     	;# 
  1188  0497                     	;# 
  1189  0595                     	;# 
  1190  0596                     	;# 
  1191  0597                     	;# 
  1192  059C                     	;# 
  1193  059D                     	;# 
  1194  059E                     	;# 
  1195  0611                     	;# 
  1196  0611                     	;# 
  1197  0612                     	;# 
  1198  0613                     	;# 
  1199  0614                     	;# 
  1200  0614                     	;# 
  1201  0615                     	;# 
  1202  0616                     	;# 
  1203  0617                     	;# 
  1204  0617                     	;# 
  1205  0618                     	;# 
  1206  0619                     	;# 
  1207  061A                     	;# 
  1208  061A                     	;# 
  1209  061B                     	;# 
  1210  061C                     	;# 
  1211  061D                     	;# 
  1212  061D                     	;# 
  1213  061E                     	;# 
  1214  061F                     	;# 
  1215  0FE4                     	;# 
  1216  0FE5                     	;# 
  1217  0FE6                     	;# 
  1218  0FE7                     	;# 
  1219  0FE8                     	;# 
  1220  0FE9                     	;# 
  1221  0FEA                     	;# 
  1222  0FEB                     	;# 
  1223  0FED                     	;# 
  1224  0FEE                     	;# 
  1225  0FEF                     	;# 
  1226  0000                     	;# 
  1227  0001                     	;# 
  1228  0002                     	;# 
  1229  0003                     	;# 
  1230  0004                     	;# 
  1231  0005                     	;# 
  1232  0006                     	;# 
  1233  0007                     	;# 
  1234  0008                     	;# 
  1235  0009                     	;# 
  1236  000A                     	;# 
  1237  000B                     	;# 
  1238  000C                     	;# 
  1239  000D                     	;# 
  1240  000E                     	;# 
  1241  000F                     	;# 
  1242  0010                     	;# 
  1243  0011                     	;# 
  1244  0012                     	;# 
  1245  0013                     	;# 
  1246  0014                     	;# 
  1247  0015                     	;# 
  1248  0016                     	;# 
  1249  0016                     	;# 
  1250  0017                     	;# 
  1251  0018                     	;# 
  1252  0019                     	;# 
  1253  001A                     	;# 
  1254  001B                     	;# 
  1255  001C                     	;# 
  1256  008C                     	;# 
  1257  008D                     	;# 
  1258  008E                     	;# 
  1259  008F                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0094                     	;# 
  1265  0095                     	;# 
  1266  0096                     	;# 
  1267  0097                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010D                     	;# 
  1277  010E                     	;# 
  1278  010F                     	;# 
  1279  0110                     	;# 
  1280  0116                     	;# 
  1281  0117                     	;# 
  1282  011D                     	;# 
  1283  018C                     	;# 
  1284  018D                     	;# 
  1285  018F                     	;# 
  1286  0190                     	;# 
  1287  0191                     	;# 
  1288  0191                     	;# 
  1289  0192                     	;# 
  1290  0193                     	;# 
  1291  0193                     	;# 
  1292  0194                     	;# 
  1293  0195                     	;# 
  1294  0196                     	;# 
  1295  0197                     	;# 
  1296  0199                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  019A                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019B                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019C                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019D                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019E                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019F                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  020D                     	;# 
  1320  020F                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0219                     	;# 
  1338  021A                     	;# 
  1339  021B                     	;# 
  1340  021C                     	;# 
  1341  021D                     	;# 
  1342  021E                     	;# 
  1343  021F                     	;# 
  1344  028C                     	;# 
  1345  028D                     	;# 
  1346  0291                     	;# 
  1347  0291                     	;# 
  1348  0292                     	;# 
  1349  0293                     	;# 
  1350  0298                     	;# 
  1351  0298                     	;# 
  1352  0299                     	;# 
  1353  029A                     	;# 
  1354  029D                     	;# 
  1355  029E                     	;# 
  1356  029F                     	;# 
  1357  030C                     	;# 
  1358  030D                     	;# 
  1359  0311                     	;# 
  1360  0311                     	;# 
  1361  0312                     	;# 
  1362  0313                     	;# 
  1363  0318                     	;# 
  1364  0318                     	;# 
  1365  0319                     	;# 
  1366  031A                     	;# 
  1367  031C                     	;# 
  1368  031C                     	;# 
  1369  031D                     	;# 
  1370  031E                     	;# 
  1371  038C                     	;# 
  1372  038D                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  040C                     	;# 
  1377  040D                     	;# 
  1378  0411                     	;# 
  1379  0411                     	;# 
  1380  0412                     	;# 
  1381  0413                     	;# 
  1382  0414                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  0418                     	;# 
  1387  0418                     	;# 
  1388  0419                     	;# 
  1389  041A                     	;# 
  1390  041B                     	;# 
  1391  041C                     	;# 
  1392  041D                     	;# 
  1393  041E                     	;# 
  1394  048D                     	;# 
  1395  0491                     	;# 
  1396  0491                     	;# 
  1397  0492                     	;# 
  1398  0492                     	;# 
  1399  0493                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0494                     	;# 
  1403  0494                     	;# 
  1404  0495                     	;# 
  1405  0495                     	;# 
  1406  0496                     	;# 
  1407  0496                     	;# 
  1408  0497                     	;# 
  1409  0497                     	;# 
  1410  0595                     	;# 
  1411  0596                     	;# 
  1412  0597                     	;# 
  1413  059C                     	;# 
  1414  059D                     	;# 
  1415  059E                     	;# 
  1416  0611                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0614                     	;# 
  1422  0615                     	;# 
  1423  0616                     	;# 
  1424  0617                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  061A                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061D                     	;# 
  1433  061D                     	;# 
  1434  061E                     	;# 
  1435  061F                     	;# 
  1436  0FE4                     	;# 
  1437  0FE5                     	;# 
  1438  0FE6                     	;# 
  1439  0FE7                     	;# 
  1440  0FE8                     	;# 
  1441  0FE9                     	;# 
  1442  0FEA                     	;# 
  1443  0FEB                     	;# 
  1444  0FED                     	;# 
  1445  0FEE                     	;# 
  1446  0FEF                     	;# 
  1447  0000                     	;# 
  1448  0001                     	;# 
  1449  0002                     	;# 
  1450  0003                     	;# 
  1451  0004                     	;# 
  1452  0005                     	;# 
  1453  0006                     	;# 
  1454  0007                     	;# 
  1455  0008                     	;# 
  1456  0009                     	;# 
  1457  000A                     	;# 
  1458  000B                     	;# 
  1459  000C                     	;# 
  1460  000D                     	;# 
  1461  000E                     	;# 
  1462  000F                     	;# 
  1463  0010                     	;# 
  1464  0011                     	;# 
  1465  0012                     	;# 
  1466  0013                     	;# 
  1467  0014                     	;# 
  1468  0015                     	;# 
  1469  0016                     	;# 
  1470  0016                     	;# 
  1471  0017                     	;# 
  1472  0018                     	;# 
  1473  0019                     	;# 
  1474  001A                     	;# 
  1475  001B                     	;# 
  1476  001C                     	;# 
  1477  008C                     	;# 
  1478  008D                     	;# 
  1479  008E                     	;# 
  1480  008F                     	;# 
  1481  0090                     	;# 
  1482  0091                     	;# 
  1483  0092                     	;# 
  1484  0093                     	;# 
  1485  0094                     	;# 
  1486  0095                     	;# 
  1487  0096                     	;# 
  1488  0097                     	;# 
  1489  0099                     	;# 
  1490  009A                     	;# 
  1491  009B                     	;# 
  1492  009B                     	;# 
  1493  009C                     	;# 
  1494  009D                     	;# 
  1495  009E                     	;# 
  1496  010C                     	;# 
  1497  010D                     	;# 
  1498  010E                     	;# 
  1499  010F                     	;# 
  1500  0110                     	;# 
  1501  0116                     	;# 
  1502  0117                     	;# 
  1503  011D                     	;# 
  1504  018C                     	;# 
  1505  018D                     	;# 
  1506  018F                     	;# 
  1507  0190                     	;# 
  1508  0191                     	;# 
  1509  0191                     	;# 
  1510  0192                     	;# 
  1511  0193                     	;# 
  1512  0193                     	;# 
  1513  0194                     	;# 
  1514  0195                     	;# 
  1515  0196                     	;# 
  1516  0197                     	;# 
  1517  0199                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  019A                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019B                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019C                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019D                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019E                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019F                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  020F                     	;# 
  1542  0210                     	;# 
  1543  0211                     	;# 
  1544  0211                     	;# 
  1545  0212                     	;# 
  1546  0212                     	;# 
  1547  0213                     	;# 
  1548  0213                     	;# 
  1549  0214                     	;# 
  1550  0214                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0216                     	;# 
  1555  0216                     	;# 
  1556  0217                     	;# 
  1557  0217                     	;# 
  1558  0219                     	;# 
  1559  021A                     	;# 
  1560  021B                     	;# 
  1561  021C                     	;# 
  1562  021D                     	;# 
  1563  021E                     	;# 
  1564  021F                     	;# 
  1565  028C                     	;# 
  1566  028D                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0298                     	;# 
  1572  0298                     	;# 
  1573  0299                     	;# 
  1574  029A                     	;# 
  1575  029D                     	;# 
  1576  029E                     	;# 
  1577  029F                     	;# 
  1578  030C                     	;# 
  1579  030D                     	;# 
  1580  0311                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0318                     	;# 
  1585  0318                     	;# 
  1586  0319                     	;# 
  1587  031A                     	;# 
  1588  031C                     	;# 
  1589  031C                     	;# 
  1590  031D                     	;# 
  1591  031E                     	;# 
  1592  038C                     	;# 
  1593  038D                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  040C                     	;# 
  1598  040D                     	;# 
  1599  0411                     	;# 
  1600  0411                     	;# 
  1601  0412                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0415                     	;# 
  1605  0416                     	;# 
  1606  0417                     	;# 
  1607  0418                     	;# 
  1608  0418                     	;# 
  1609  0419                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  048D                     	;# 
  1616  0491                     	;# 
  1617  0491                     	;# 
  1618  0492                     	;# 
  1619  0492                     	;# 
  1620  0493                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0494                     	;# 
  1624  0494                     	;# 
  1625  0495                     	;# 
  1626  0495                     	;# 
  1627  0496                     	;# 
  1628  0496                     	;# 
  1629  0497                     	;# 
  1630  0497                     	;# 
  1631  0595                     	;# 
  1632  0596                     	;# 
  1633  0597                     	;# 
  1634  059C                     	;# 
  1635  059D                     	;# 
  1636  059E                     	;# 
  1637  0611                     	;# 
  1638  0611                     	;# 
  1639  0612                     	;# 
  1640  0613                     	;# 
  1641  0614                     	;# 
  1642  0614                     	;# 
  1643  0615                     	;# 
  1644  0616                     	;# 
  1645  0617                     	;# 
  1646  0617                     	;# 
  1647  0618                     	;# 
  1648  0619                     	;# 
  1649  061A                     	;# 
  1650  061A                     	;# 
  1651  061B                     	;# 
  1652  061C                     	;# 
  1653  061D                     	;# 
  1654  061D                     	;# 
  1655  061E                     	;# 
  1656  061F                     	;# 
  1657  0FE4                     	;# 
  1658  0FE5                     	;# 
  1659  0FE6                     	;# 
  1660  0FE7                     	;# 
  1661  0FE8                     	;# 
  1662  0FE9                     	;# 
  1663  0FEA                     	;# 
  1664  0FEB                     	;# 
  1665  0FED                     	;# 
  1666  0FEE                     	;# 
  1667  0FEF                     	;# 
  1668  0000                     	;# 
  1669  0001                     	;# 
  1670  0002                     	;# 
  1671  0003                     	;# 
  1672  0004                     	;# 
  1673  0005                     	;# 
  1674  0006                     	;# 
  1675  0007                     	;# 
  1676  0008                     	;# 
  1677  0009                     	;# 
  1678  000A                     	;# 
  1679  000B                     	;# 
  1680  000C                     	;# 
  1681  000D                     	;# 
  1682  000E                     	;# 
  1683  000F                     	;# 
  1684  0010                     	;# 
  1685  0011                     	;# 
  1686  0012                     	;# 
  1687  0013                     	;# 
  1688  0014                     	;# 
  1689  0015                     	;# 
  1690  0016                     	;# 
  1691  0016                     	;# 
  1692  0017                     	;# 
  1693  0018                     	;# 
  1694  0019                     	;# 
  1695  001A                     	;# 
  1696  001B                     	;# 
  1697  001C                     	;# 
  1698  008C                     	;# 
  1699  008D                     	;# 
  1700  008E                     	;# 
  1701  008F                     	;# 
  1702  0090                     	;# 
  1703  0091                     	;# 
  1704  0092                     	;# 
  1705  0093                     	;# 
  1706  0094                     	;# 
  1707  0095                     	;# 
  1708  0096                     	;# 
  1709  0097                     	;# 
  1710  0099                     	;# 
  1711  009A                     	;# 
  1712  009B                     	;# 
  1713  009B                     	;# 
  1714  009C                     	;# 
  1715  009D                     	;# 
  1716  009E                     	;# 
  1717  010C                     	;# 
  1718  010D                     	;# 
  1719  010E                     	;# 
  1720  010F                     	;# 
  1721  0110                     	;# 
  1722  0116                     	;# 
  1723  0117                     	;# 
  1724  011D                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018F                     	;# 
  1728  0190                     	;# 
  1729  0191                     	;# 
  1730  0191                     	;# 
  1731  0192                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0197                     	;# 
  1738  0199                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  019A                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019C                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019D                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019E                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019F                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  020D                     	;# 
  1762  020F                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0219                     	;# 
  1780  021A                     	;# 
  1781  021B                     	;# 
  1782  021C                     	;# 
  1783  021D                     	;# 
  1784  021E                     	;# 
  1785  021F                     	;# 
  1786  028C                     	;# 
  1787  028D                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0298                     	;# 
  1793  0298                     	;# 
  1794  0299                     	;# 
  1795  029A                     	;# 
  1796  029D                     	;# 
  1797  029E                     	;# 
  1798  029F                     	;# 
  1799  030C                     	;# 
  1800  030D                     	;# 
  1801  0311                     	;# 
  1802  0311                     	;# 
  1803  0312                     	;# 
  1804  0313                     	;# 
  1805  0318                     	;# 
  1806  0318                     	;# 
  1807  0319                     	;# 
  1808  031A                     	;# 
  1809  031C                     	;# 
  1810  031C                     	;# 
  1811  031D                     	;# 
  1812  031E                     	;# 
  1813  038C                     	;# 
  1814  038D                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  040C                     	;# 
  1819  040D                     	;# 
  1820  0411                     	;# 
  1821  0411                     	;# 
  1822  0412                     	;# 
  1823  0413                     	;# 
  1824  0414                     	;# 
  1825  0415                     	;# 
  1826  0416                     	;# 
  1827  0417                     	;# 
  1828  0418                     	;# 
  1829  0418                     	;# 
  1830  0419                     	;# 
  1831  041A                     	;# 
  1832  041B                     	;# 
  1833  041C                     	;# 
  1834  041D                     	;# 
  1835  041E                     	;# 
  1836  048D                     	;# 
  1837  0491                     	;# 
  1838  0491                     	;# 
  1839  0492                     	;# 
  1840  0492                     	;# 
  1841  0493                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0494                     	;# 
  1845  0494                     	;# 
  1846  0495                     	;# 
  1847  0495                     	;# 
  1848  0496                     	;# 
  1849  0496                     	;# 
  1850  0497                     	;# 
  1851  0497                     	;# 
  1852  0595                     	;# 
  1853  0596                     	;# 
  1854  0597                     	;# 
  1855  059C                     	;# 
  1856  059D                     	;# 
  1857  059E                     	;# 
  1858  0611                     	;# 
  1859  0611                     	;# 
  1860  0612                     	;# 
  1861  0613                     	;# 
  1862  0614                     	;# 
  1863  0614                     	;# 
  1864  0615                     	;# 
  1865  0616                     	;# 
  1866  0617                     	;# 
  1867  0617                     	;# 
  1868  0618                     	;# 
  1869  0619                     	;# 
  1870  061A                     	;# 
  1871  061A                     	;# 
  1872  061B                     	;# 
  1873  061C                     	;# 
  1874  061D                     	;# 
  1875  061D                     	;# 
  1876  061E                     	;# 
  1877  061F                     	;# 
  1878  0FE4                     	;# 
  1879  0FE5                     	;# 
  1880  0FE6                     	;# 
  1881  0FE7                     	;# 
  1882  0FE8                     	;# 
  1883  0FE9                     	;# 
  1884  0FEA                     	;# 
  1885  0FEB                     	;# 
  1886  0FED                     	;# 
  1887  0FEE                     	;# 
  1888  0FEF                     	;# 
  1889  0000                     	;# 
  1890  0001                     	;# 
  1891  0002                     	;# 
  1892  0003                     	;# 
  1893  0004                     	;# 
  1894  0005                     	;# 
  1895  0006                     	;# 
  1896  0007                     	;# 
  1897  0008                     	;# 
  1898  0009                     	;# 
  1899  000A                     	;# 
  1900  000B                     	;# 
  1901  000C                     	;# 
  1902  000D                     	;# 
  1903  000E                     	;# 
  1904  000F                     	;# 
  1905  0010                     	;# 
  1906  0011                     	;# 
  1907  0012                     	;# 
  1908  0013                     	;# 
  1909  0014                     	;# 
  1910  0015                     	;# 
  1911  0016                     	;# 
  1912  0016                     	;# 
  1913  0017                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  001B                     	;# 
  1918  001C                     	;# 
  1919  008C                     	;# 
  1920  008D                     	;# 
  1921  008E                     	;# 
  1922  008F                     	;# 
  1923  0090                     	;# 
  1924  0091                     	;# 
  1925  0092                     	;# 
  1926  0093                     	;# 
  1927  0094                     	;# 
  1928  0095                     	;# 
  1929  0096                     	;# 
  1930  0097                     	;# 
  1931  0099                     	;# 
  1932  009A                     	;# 
  1933  009B                     	;# 
  1934  009B                     	;# 
  1935  009C                     	;# 
  1936  009D                     	;# 
  1937  009E                     	;# 
  1938  010C                     	;# 
  1939  010D                     	;# 
  1940  010E                     	;# 
  1941  010F                     	;# 
  1942  0110                     	;# 
  1943  0116                     	;# 
  1944  0117                     	;# 
  1945  011D                     	;# 
  1946  018C                     	;# 
  1947  018D                     	;# 
  1948  018F                     	;# 
  1949  0190                     	;# 
  1950  0191                     	;# 
  1951  0191                     	;# 
  1952  0192                     	;# 
  1953  0193                     	;# 
  1954  0193                     	;# 
  1955  0194                     	;# 
  1956  0195                     	;# 
  1957  0196                     	;# 
  1958  0197                     	;# 
  1959  0199                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  019A                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019B                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019C                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019D                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019E                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019F                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  020D                     	;# 
  1983  020F                     	;# 
  1984  0210                     	;# 
  1985  0211                     	;# 
  1986  0211                     	;# 
  1987  0212                     	;# 
  1988  0212                     	;# 
  1989  0213                     	;# 
  1990  0213                     	;# 
  1991  0214                     	;# 
  1992  0214                     	;# 
  1993  0215                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0216                     	;# 
  1997  0216                     	;# 
  1998  0217                     	;# 
  1999  0217                     	;# 
  2000  0219                     	;# 
  2001  021A                     	;# 
  2002  021B                     	;# 
  2003  021C                     	;# 
  2004  021D                     	;# 
  2005  021E                     	;# 
  2006  021F                     	;# 
  2007  028C                     	;# 
  2008  028D                     	;# 
  2009  0291                     	;# 
  2010  0291                     	;# 
  2011  0292                     	;# 
  2012  0293                     	;# 
  2013  0298                     	;# 
  2014  0298                     	;# 
  2015  0299                     	;# 
  2016  029A                     	;# 
  2017  029D                     	;# 
  2018  029E                     	;# 
  2019  029F                     	;# 
  2020  030C                     	;# 
  2021  030D                     	;# 
  2022  0311                     	;# 
  2023  0311                     	;# 
  2024  0312                     	;# 
  2025  0313                     	;# 
  2026  0318                     	;# 
  2027  0318                     	;# 
  2028  0319                     	;# 
  2029  031A                     	;# 
  2030  031C                     	;# 
  2031  031C                     	;# 
  2032  031D                     	;# 
  2033  031E                     	;# 
  2034  038C                     	;# 
  2035  038D                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  040C                     	;# 
  2040  040D                     	;# 
  2041  0411                     	;# 
  2042  0411                     	;# 
  2043  0412                     	;# 
  2044  0413                     	;# 
  2045  0414                     	;# 
  2046  0415                     	;# 
  2047  0416                     	;# 
  2048  0417                     	;# 
  2049  0418                     	;# 
  2050  0418                     	;# 
  2051  0419                     	;# 
  2052  041A                     	;# 
  2053  041B                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  048D                     	;# 
  2058  0491                     	;# 
  2059  0491                     	;# 
  2060  0492                     	;# 
  2061  0492                     	;# 
  2062  0493                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0494                     	;# 
  2066  0494                     	;# 
  2067  0495                     	;# 
  2068  0495                     	;# 
  2069  0496                     	;# 
  2070  0496                     	;# 
  2071  0497                     	;# 
  2072  0497                     	;# 
  2073  0595                     	;# 
  2074  0596                     	;# 
  2075  0597                     	;# 
  2076  059C                     	;# 
  2077  059D                     	;# 
  2078  059E                     	;# 
  2079  0611                     	;# 
  2080  0611                     	;# 
  2081  0612                     	;# 
  2082  0613                     	;# 
  2083  0614                     	;# 
  2084  0614                     	;# 
  2085  0615                     	;# 
  2086  0616                     	;# 
  2087  0617                     	;# 
  2088  0617                     	;# 
  2089  0618                     	;# 
  2090  0619                     	;# 
  2091  061A                     	;# 
  2092  061A                     	;# 
  2093  061B                     	;# 
  2094  061C                     	;# 
  2095  061D                     	;# 
  2096  061D                     	;# 
  2097  061E                     	;# 
  2098  061F                     	;# 
  2099  0FE4                     	;# 
  2100  0FE5                     	;# 
  2101  0FE6                     	;# 
  2102  0FE7                     	;# 
  2103  0FE8                     	;# 
  2104  0FE9                     	;# 
  2105  0FEA                     	;# 
  2106  0FEB                     	;# 
  2107  0FED                     	;# 
  2108  0FEE                     	;# 
  2109  0FEF                     	;# 
  2110  0000                     	;# 
  2111  0001                     	;# 
  2112  0002                     	;# 
  2113  0003                     	;# 
  2114  0004                     	;# 
  2115  0005                     	;# 
  2116  0006                     	;# 
  2117  0007                     	;# 
  2118  0008                     	;# 
  2119  0009                     	;# 
  2120  000A                     	;# 
  2121  000B                     	;# 
  2122  000C                     	;# 
  2123  000D                     	;# 
  2124  000E                     	;# 
  2125  000F                     	;# 
  2126  0010                     	;# 
  2127  0011                     	;# 
  2128  0012                     	;# 
  2129  0013                     	;# 
  2130  0014                     	;# 
  2131  0015                     	;# 
  2132  0016                     	;# 
  2133  0016                     	;# 
  2134  0017                     	;# 
  2135  0018                     	;# 
  2136  0019                     	;# 
  2137  001A                     	;# 
  2138  001B                     	;# 
  2139  001C                     	;# 
  2140  008C                     	;# 
  2141  008D                     	;# 
  2142  008E                     	;# 
  2143  008F                     	;# 
  2144  0090                     	;# 
  2145  0091                     	;# 
  2146  0092                     	;# 
  2147  0093                     	;# 
  2148  0094                     	;# 
  2149  0095                     	;# 
  2150  0096                     	;# 
  2151  0097                     	;# 
  2152  0099                     	;# 
  2153  009A                     	;# 
  2154  009B                     	;# 
  2155  009B                     	;# 
  2156  009C                     	;# 
  2157  009D                     	;# 
  2158  009E                     	;# 
  2159  010C                     	;# 
  2160  010D                     	;# 
  2161  010E                     	;# 
  2162  010F                     	;# 
  2163  0110                     	;# 
  2164  0116                     	;# 
  2165  0117                     	;# 
  2166  011D                     	;# 
  2167  018C                     	;# 
  2168  018D                     	;# 
  2169  018F                     	;# 
  2170  0190                     	;# 
  2171  0191                     	;# 
  2172  0191                     	;# 
  2173  0192                     	;# 
  2174  0193                     	;# 
  2175  0193                     	;# 
  2176  0194                     	;# 
  2177  0195                     	;# 
  2178  0196                     	;# 
  2179  0197                     	;# 
  2180  0199                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  019A                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019C                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019D                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019E                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019F                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  020D                     	;# 
  2204  020F                     	;# 
  2205  0210                     	;# 
  2206  0211                     	;# 
  2207  0211                     	;# 
  2208  0212                     	;# 
  2209  0212                     	;# 
  2210  0213                     	;# 
  2211  0213                     	;# 
  2212  0214                     	;# 
  2213  0214                     	;# 
  2214  0215                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0216                     	;# 
  2218  0216                     	;# 
  2219  0217                     	;# 
  2220  0217                     	;# 
  2221  0219                     	;# 
  2222  021A                     	;# 
  2223  021B                     	;# 
  2224  021C                     	;# 
  2225  021D                     	;# 
  2226  021E                     	;# 
  2227  021F                     	;# 
  2228  028C                     	;# 
  2229  028D                     	;# 
  2230  0291                     	;# 
  2231  0291                     	;# 
  2232  0292                     	;# 
  2233  0293                     	;# 
  2234  0298                     	;# 
  2235  0298                     	;# 
  2236  0299                     	;# 
  2237  029A                     	;# 
  2238  029D                     	;# 
  2239  029E                     	;# 
  2240  029F                     	;# 
  2241  030C                     	;# 
  2242  030D                     	;# 
  2243  0311                     	;# 
  2244  0311                     	;# 
  2245  0312                     	;# 
  2246  0313                     	;# 
  2247  0318                     	;# 
  2248  0318                     	;# 
  2249  0319                     	;# 
  2250  031A                     	;# 
  2251  031C                     	;# 
  2252  031C                     	;# 
  2253  031D                     	;# 
  2254  031E                     	;# 
  2255  038C                     	;# 
  2256  038D                     	;# 
  2257  0394                     	;# 
  2258  0395                     	;# 
  2259  0396                     	;# 
  2260  040C                     	;# 
  2261  040D                     	;# 
  2262  0411                     	;# 
  2263  0411                     	;# 
  2264  0412                     	;# 
  2265  0413                     	;# 
  2266  0414                     	;# 
  2267  0415                     	;# 
  2268  0416                     	;# 
  2269  0417                     	;# 
  2270  0418                     	;# 
  2271  0418                     	;# 
  2272  0419                     	;# 
  2273  041A                     	;# 
  2274  041B                     	;# 
  2275  041C                     	;# 
  2276  041D                     	;# 
  2277  041E                     	;# 
  2278  048D                     	;# 
  2279  0491                     	;# 
  2280  0491                     	;# 
  2281  0492                     	;# 
  2282  0492                     	;# 
  2283  0493                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0494                     	;# 
  2287  0494                     	;# 
  2288  0495                     	;# 
  2289  0495                     	;# 
  2290  0496                     	;# 
  2291  0496                     	;# 
  2292  0497                     	;# 
  2293  0497                     	;# 
  2294  0595                     	;# 
  2295  0596                     	;# 
  2296  0597                     	;# 
  2297  059C                     	;# 
  2298  059D                     	;# 
  2299  059E                     	;# 
  2300  0611                     	;# 
  2301  0611                     	;# 
  2302  0612                     	;# 
  2303  0613                     	;# 
  2304  0614                     	;# 
  2305  0614                     	;# 
  2306  0615                     	;# 
  2307  0616                     	;# 
  2308  0617                     	;# 
  2309  0617                     	;# 
  2310  0618                     	;# 
  2311  0619                     	;# 
  2312  061A                     	;# 
  2313  061A                     	;# 
  2314  061B                     	;# 
  2315  061C                     	;# 
  2316  061D                     	;# 
  2317  061D                     	;# 
  2318  061E                     	;# 
  2319  061F                     	;# 
  2320  0FE4                     	;# 
  2321  0FE5                     	;# 
  2322  0FE6                     	;# 
  2323  0FE7                     	;# 
  2324  0FE8                     	;# 
  2325  0FE9                     	;# 
  2326  0FEA                     	;# 
  2327  0FEB                     	;# 
  2328  0FED                     	;# 
  2329  0FEE                     	;# 
  2330  0FEF                     	;# 
  2331  0000                     	;# 
  2332  0001                     	;# 
  2333  0002                     	;# 
  2334  0003                     	;# 
  2335  0004                     	;# 
  2336  0005                     	;# 
  2337  0006                     	;# 
  2338  0007                     	;# 
  2339  0008                     	;# 
  2340  0009                     	;# 
  2341  000A                     	;# 
  2342  000B                     	;# 
  2343  000C                     	;# 
  2344  000D                     	;# 
  2345  000E                     	;# 
  2346  000F                     	;# 
  2347  0010                     	;# 
  2348  0011                     	;# 
  2349  0012                     	;# 
  2350  0013                     	;# 
  2351  0014                     	;# 
  2352  0015                     	;# 
  2353  0016                     	;# 
  2354  0016                     	;# 
  2355  0017                     	;# 
  2356  0018                     	;# 
  2357  0019                     	;# 
  2358  001A                     	;# 
  2359  001B                     	;# 
  2360  001C                     	;# 
  2361  008C                     	;# 
  2362  008D                     	;# 
  2363  008E                     	;# 
  2364  008F                     	;# 
  2365  0090                     	;# 
  2366  0091                     	;# 
  2367  0092                     	;# 
  2368  0093                     	;# 
  2369  0094                     	;# 
  2370  0095                     	;# 
  2371  0096                     	;# 
  2372  0097                     	;# 
  2373  0099                     	;# 
  2374  009A                     	;# 
  2375  009B                     	;# 
  2376  009B                     	;# 
  2377  009C                     	;# 
  2378  009D                     	;# 
  2379  009E                     	;# 
  2380  010C                     	;# 
  2381  010D                     	;# 
  2382  010E                     	;# 
  2383  010F                     	;# 
  2384  0110                     	;# 
  2385  0116                     	;# 
  2386  0117                     	;# 
  2387  011D                     	;# 
  2388  018C                     	;# 
  2389  018D                     	;# 
  2390  018F                     	;# 
  2391  0190                     	;# 
  2392  0191                     	;# 
  2393  0191                     	;# 
  2394  0192                     	;# 
  2395  0193                     	;# 
  2396  0193                     	;# 
  2397  0194                     	;# 
  2398  0195                     	;# 
  2399  0196                     	;# 
  2400  0197                     	;# 
  2401  0199                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  019A                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019B                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019C                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019D                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019E                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019F                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  020D                     	;# 
  2425  020F                     	;# 
  2426  0210                     	;# 
  2427  0211                     	;# 
  2428  0211                     	;# 
  2429  0212                     	;# 
  2430  0212                     	;# 
  2431  0213                     	;# 
  2432  0213                     	;# 
  2433  0214                     	;# 
  2434  0214                     	;# 
  2435  0215                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0216                     	;# 
  2439  0216                     	;# 
  2440  0217                     	;# 
  2441  0217                     	;# 
  2442  0219                     	;# 
  2443  021A                     	;# 
  2444  021B                     	;# 
  2445  021C                     	;# 
  2446  021D                     	;# 
  2447  021E                     	;# 
  2448  021F                     	;# 
  2449  028C                     	;# 
  2450  028D                     	;# 
  2451  0291                     	;# 
  2452  0291                     	;# 
  2453  0292                     	;# 
  2454  0293                     	;# 
  2455  0298                     	;# 
  2456  0298                     	;# 
  2457  0299                     	;# 
  2458  029A                     	;# 
  2459  029D                     	;# 
  2460  029E                     	;# 
  2461  029F                     	;# 
  2462  030C                     	;# 
  2463  030D                     	;# 
  2464  0311                     	;# 
  2465  0311                     	;# 
  2466  0312                     	;# 
  2467  0313                     	;# 
  2468  0318                     	;# 
  2469  0318                     	;# 
  2470  0319                     	;# 
  2471  031A                     	;# 
  2472  031C                     	;# 
  2473  031C                     	;# 
  2474  031D                     	;# 
  2475  031E                     	;# 
  2476  038C                     	;# 
  2477  038D                     	;# 
  2478  0394                     	;# 
  2479  0395                     	;# 
  2480  0396                     	;# 
  2481  040C                     	;# 
  2482  040D                     	;# 
  2483  0411                     	;# 
  2484  0411                     	;# 
  2485  0412                     	;# 
  2486  0413                     	;# 
  2487  0414                     	;# 
  2488  0415                     	;# 
  2489  0416                     	;# 
  2490  0417                     	;# 
  2491  0418                     	;# 
  2492  0418                     	;# 
  2493  0419                     	;# 
  2494  041A                     	;# 
  2495  041B                     	;# 
  2496  041C                     	;# 
  2497  041D                     	;# 
  2498  041E                     	;# 
  2499  048D                     	;# 
  2500  0491                     	;# 
  2501  0491                     	;# 
  2502  0492                     	;# 
  2503  0492                     	;# 
  2504  0493                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0494                     	;# 
  2508  0494                     	;# 
  2509  0495                     	;# 
  2510  0495                     	;# 
  2511  0496                     	;# 
  2512  0496                     	;# 
  2513  0497                     	;# 
  2514  0497                     	;# 
  2515  0595                     	;# 
  2516  0596                     	;# 
  2517  0597                     	;# 
  2518  059C                     	;# 
  2519  059D                     	;# 
  2520  059E                     	;# 
  2521  0611                     	;# 
  2522  0611                     	;# 
  2523  0612                     	;# 
  2524  0613                     	;# 
  2525  0614                     	;# 
  2526  0614                     	;# 
  2527  0615                     	;# 
  2528  0616                     	;# 
  2529  0617                     	;# 
  2530  0617                     	;# 
  2531  0618                     	;# 
  2532  0619                     	;# 
  2533  061A                     	;# 
  2534  061A                     	;# 
  2535  061B                     	;# 
  2536  061C                     	;# 
  2537  061D                     	;# 
  2538  061D                     	;# 
  2539  061E                     	;# 
  2540  061F                     	;# 
  2541  0FE4                     	;# 
  2542  0FE5                     	;# 
  2543  0FE6                     	;# 
  2544  0FE7                     	;# 
  2545  0FE8                     	;# 
  2546  0FE9                     	;# 
  2547  0FEA                     	;# 
  2548  0FEB                     	;# 
  2549  0FED                     	;# 
  2550  0FEE                     	;# 
  2551  0FEF                     	;# 
  2552  0000                     	;# 
  2553  0001                     	;# 
  2554  0002                     	;# 
  2555  0003                     	;# 
  2556  0004                     	;# 
  2557  0005                     	;# 
  2558  0006                     	;# 
  2559  0007                     	;# 
  2560  0008                     	;# 
  2561  0009                     	;# 
  2562  000A                     	;# 
  2563  000B                     	;# 
  2564  000C                     	;# 
  2565  000D                     	;# 
  2566  000E                     	;# 
  2567  000F                     	;# 
  2568  0010                     	;# 
  2569  0011                     	;# 
  2570  0012                     	;# 
  2571  0013                     	;# 
  2572  0014                     	;# 
  2573  0015                     	;# 
  2574  0016                     	;# 
  2575  0016                     	;# 
  2576  0017                     	;# 
  2577  0018                     	;# 
  2578  0019                     	;# 
  2579  001A                     	;# 
  2580  001B                     	;# 
  2581  001C                     	;# 
  2582  008C                     	;# 
  2583  008D                     	;# 
  2584  008E                     	;# 
  2585  008F                     	;# 
  2586  0090                     	;# 
  2587  0091                     	;# 
  2588  0092                     	;# 
  2589  0093                     	;# 
  2590  0094                     	;# 
  2591  0095                     	;# 
  2592  0096                     	;# 
  2593  0097                     	;# 
  2594  0099                     	;# 
  2595  009A                     	;# 
  2596  009B                     	;# 
  2597  009B                     	;# 
  2598  009C                     	;# 
  2599  009D                     	;# 
  2600  009E                     	;# 
  2601  010C                     	;# 
  2602  010D                     	;# 
  2603  010E                     	;# 
  2604  010F                     	;# 
  2605  0110                     	;# 
  2606  0116                     	;# 
  2607  0117                     	;# 
  2608  011D                     	;# 
  2609  018C                     	;# 
  2610  018D                     	;# 
  2611  018F                     	;# 
  2612  0190                     	;# 
  2613  0191                     	;# 
  2614  0191                     	;# 
  2615  0192                     	;# 
  2616  0193                     	;# 
  2617  0193                     	;# 
  2618  0194                     	;# 
  2619  0195                     	;# 
  2620  0196                     	;# 
  2621  0197                     	;# 
  2622  0199                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  019A                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019B                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019C                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019D                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019E                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019F                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  020D                     	;# 
  2646  020F                     	;# 
  2647  0210                     	;# 
  2648  0211                     	;# 
  2649  0211                     	;# 
  2650  0212                     	;# 
  2651  0212                     	;# 
  2652  0213                     	;# 
  2653  0213                     	;# 
  2654  0214                     	;# 
  2655  0214                     	;# 
  2656  0215                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0216                     	;# 
  2660  0216                     	;# 
  2661  0217                     	;# 
  2662  0217                     	;# 
  2663  0219                     	;# 
  2664  021A                     	;# 
  2665  021B                     	;# 
  2666  021C                     	;# 
  2667  021D                     	;# 
  2668  021E                     	;# 
  2669  021F                     	;# 
  2670  028C                     	;# 
  2671  028D                     	;# 
  2672  0291                     	;# 
  2673  0291                     	;# 
  2674  0292                     	;# 
  2675  0293                     	;# 
  2676  0298                     	;# 
  2677  0298                     	;# 
  2678  0299                     	;# 
  2679  029A                     	;# 
  2680  029D                     	;# 
  2681  029E                     	;# 
  2682  029F                     	;# 
  2683  030C                     	;# 
  2684  030D                     	;# 
  2685  0311                     	;# 
  2686  0311                     	;# 
  2687  0312                     	;# 
  2688  0313                     	;# 
  2689  0318                     	;# 
  2690  0318                     	;# 
  2691  0319                     	;# 
  2692  031A                     	;# 
  2693  031C                     	;# 
  2694  031C                     	;# 
  2695  031D                     	;# 
  2696  031E                     	;# 
  2697  038C                     	;# 
  2698  038D                     	;# 
  2699  0394                     	;# 
  2700  0395                     	;# 
  2701  0396                     	;# 
  2702  040C                     	;# 
  2703  040D                     	;# 
  2704  0411                     	;# 
  2705  0411                     	;# 
  2706  0412                     	;# 
  2707  0413                     	;# 
  2708  0414                     	;# 
  2709  0415                     	;# 
  2710  0416                     	;# 
  2711  0417                     	;# 
  2712  0418                     	;# 
  2713  0418                     	;# 
  2714  0419                     	;# 
  2715  041A                     	;# 
  2716  041B                     	;# 
  2717  041C                     	;# 
  2718  041D                     	;# 
  2719  041E                     	;# 
  2720  048D                     	;# 
  2721  0491                     	;# 
  2722  0491                     	;# 
  2723  0492                     	;# 
  2724  0492                     	;# 
  2725  0493                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0494                     	;# 
  2729  0494                     	;# 
  2730  0495                     	;# 
  2731  0495                     	;# 
  2732  0496                     	;# 
  2733  0496                     	;# 
  2734  0497                     	;# 
  2735  0497                     	;# 
  2736  0595                     	;# 
  2737  0596                     	;# 
  2738  0597                     	;# 
  2739  059C                     	;# 
  2740  059D                     	;# 
  2741  059E                     	;# 
  2742  0611                     	;# 
  2743  0611                     	;# 
  2744  0612                     	;# 
  2745  0613                     	;# 
  2746  0614                     	;# 
  2747  0614                     	;# 
  2748  0615                     	;# 
  2749  0616                     	;# 
  2750  0617                     	;# 
  2751  0617                     	;# 
  2752  0618                     	;# 
  2753  0619                     	;# 
  2754  061A                     	;# 
  2755  061A                     	;# 
  2756  061B                     	;# 
  2757  061C                     	;# 
  2758  061D                     	;# 
  2759  061D                     	;# 
  2760  061E                     	;# 
  2761  061F                     	;# 
  2762  0FE4                     	;# 
  2763  0FE5                     	;# 
  2764  0FE6                     	;# 
  2765  0FE7                     	;# 
  2766  0FE8                     	;# 
  2767  0FE9                     	;# 
  2768  0FEA                     	;# 
  2769  0FEB                     	;# 
  2770  0FED                     	;# 
  2771  0FEE                     	;# 
  2772  0FEF                     	;# 
  2773  0000                     	;# 
  2774  0001                     	;# 
  2775  0002                     	;# 
  2776  0003                     	;# 
  2777  0004                     	;# 
  2778  0005                     	;# 
  2779  0006                     	;# 
  2780  0007                     	;# 
  2781  0008                     	;# 
  2782  0009                     	;# 
  2783  000A                     	;# 
  2784  000B                     	;# 
  2785  000C                     	;# 
  2786  000D                     	;# 
  2787  000E                     	;# 
  2788  000F                     	;# 
  2789  0010                     	;# 
  2790  0011                     	;# 
  2791  0012                     	;# 
  2792  0013                     	;# 
  2793  0014                     	;# 
  2794  0015                     	;# 
  2795  0016                     	;# 
  2796  0016                     	;# 
  2797  0017                     	;# 
  2798  0018                     	;# 
  2799  0019                     	;# 
  2800  001A                     	;# 
  2801  001B                     	;# 
  2802  001C                     	;# 
  2803  008C                     	;# 
  2804  008D                     	;# 
  2805  008E                     	;# 
  2806  008F                     	;# 
  2807  0090                     	;# 
  2808  0091                     	;# 
  2809  0092                     	;# 
  2810  0093                     	;# 
  2811  0094                     	;# 
  2812  0095                     	;# 
  2813  0096                     	;# 
  2814  0097                     	;# 
  2815  0099                     	;# 
  2816  009A                     	;# 
  2817  009B                     	;# 
  2818  009B                     	;# 
  2819  009C                     	;# 
  2820  009D                     	;# 
  2821  009E                     	;# 
  2822  010C                     	;# 
  2823  010D                     	;# 
  2824  010E                     	;# 
  2825  010F                     	;# 
  2826  0110                     	;# 
  2827  0116                     	;# 
  2828  0117                     	;# 
  2829  011D                     	;# 
  2830  018C                     	;# 
  2831  018D                     	;# 
  2832  018F                     	;# 
  2833  0190                     	;# 
  2834  0191                     	;# 
  2835  0191                     	;# 
  2836  0192                     	;# 
  2837  0193                     	;# 
  2838  0193                     	;# 
  2839  0194                     	;# 
  2840  0195                     	;# 
  2841  0196                     	;# 
  2842  0197                     	;# 
  2843  0199                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  019A                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019B                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019C                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019D                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019E                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019F                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  020D                     	;# 
  2867  020F                     	;# 
  2868  0210                     	;# 
  2869  0211                     	;# 
  2870  0211                     	;# 
  2871  0212                     	;# 
  2872  0212                     	;# 
  2873  0213                     	;# 
  2874  0213                     	;# 
  2875  0214                     	;# 
  2876  0214                     	;# 
  2877  0215                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0216                     	;# 
  2881  0216                     	;# 
  2882  0217                     	;# 
  2883  0217                     	;# 
  2884  0219                     	;# 
  2885  021A                     	;# 
  2886  021B                     	;# 
  2887  021C                     	;# 
  2888  021D                     	;# 
  2889  021E                     	;# 
  2890  021F                     	;# 
  2891  028C                     	;# 
  2892  028D                     	;# 
  2893  0291                     	;# 
  2894  0291                     	;# 
  2895  0292                     	;# 
  2896  0293                     	;# 
  2897  0298                     	;# 
  2898  0298                     	;# 
  2899  0299                     	;# 
  2900  029A                     	;# 
  2901  029D                     	;# 
  2902  029E                     	;# 
  2903  029F                     	;# 
  2904  030C                     	;# 
  2905  030D                     	;# 
  2906  0311                     	;# 
  2907  0311                     	;# 
  2908  0312                     	;# 
  2909  0313                     	;# 
  2910  0318                     	;# 
  2911  0318                     	;# 
  2912  0319                     	;# 
  2913  031A                     	;# 
  2914  031C                     	;# 
  2915  031C                     	;# 
  2916  031D                     	;# 
  2917  031E                     	;# 
  2918  038C                     	;# 
  2919  038D                     	;# 
  2920  0394                     	;# 
  2921  0395                     	;# 
  2922  0396                     	;# 
  2923  040C                     	;# 
  2924  040D                     	;# 
  2925  0411                     	;# 
  2926  0411                     	;# 
  2927  0412                     	;# 
  2928  0413                     	;# 
  2929  0414                     	;# 
  2930  0415                     	;# 
  2931  0416                     	;# 
  2932  0417                     	;# 
  2933  0418                     	;# 
  2934  0418                     	;# 
  2935  0419                     	;# 
  2936  041A                     	;# 
  2937  041B                     	;# 
  2938  041C                     	;# 
  2939  041D                     	;# 
  2940  041E                     	;# 
  2941  048D                     	;# 
  2942  0491                     	;# 
  2943  0491                     	;# 
  2944  0492                     	;# 
  2945  0492                     	;# 
  2946  0493                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0494                     	;# 
  2950  0494                     	;# 
  2951  0495                     	;# 
  2952  0495                     	;# 
  2953  0496                     	;# 
  2954  0496                     	;# 
  2955  0497                     	;# 
  2956  0497                     	;# 
  2957  0595                     	;# 
  2958  0596                     	;# 
  2959  0597                     	;# 
  2960  059C                     	;# 
  2961  059D                     	;# 
  2962  059E                     	;# 
  2963  0611                     	;# 
  2964  0611                     	;# 
  2965  0612                     	;# 
  2966  0613                     	;# 
  2967  0614                     	;# 
  2968  0614                     	;# 
  2969  0615                     	;# 
  2970  0616                     	;# 
  2971  0617                     	;# 
  2972  0617                     	;# 
  2973  0618                     	;# 
  2974  0619                     	;# 
  2975  061A                     	;# 
  2976  061A                     	;# 
  2977  061B                     	;# 
  2978  061C                     	;# 
  2979  061D                     	;# 
  2980  061D                     	;# 
  2981  061E                     	;# 
  2982  061F                     	;# 
  2983  0FE4                     	;# 
  2984  0FE5                     	;# 
  2985  0FE6                     	;# 
  2986  0FE7                     	;# 
  2987  0FE8                     	;# 
  2988  0FE9                     	;# 
  2989  0FEA                     	;# 
  2990  0FEB                     	;# 
  2991  0FED                     	;# 
  2992  0FEE                     	;# 
  2993  0FEF                     	;# 
  2994  0000                     	;# 
  2995  0001                     	;# 
  2996  0002                     	;# 
  2997  0003                     	;# 
  2998  0004                     	;# 
  2999  0005                     	;# 
  3000  0006                     	;# 
  3001  0007                     	;# 
  3002  0008                     	;# 
  3003  0009                     	;# 
  3004  000A                     	;# 
  3005  000B                     	;# 
  3006  000C                     	;# 
  3007  000D                     	;# 
  3008  000E                     	;# 
  3009  000F                     	;# 
  3010  0010                     	;# 
  3011  0011                     	;# 
  3012  0012                     	;# 
  3013  0013                     	;# 
  3014  0014                     	;# 
  3015  0015                     	;# 
  3016  0016                     	;# 
  3017  0016                     	;# 
  3018  0017                     	;# 
  3019  0018                     	;# 
  3020  0019                     	;# 
  3021  001A                     	;# 
  3022  001B                     	;# 
  3023  001C                     	;# 
  3024  008C                     	;# 
  3025  008D                     	;# 
  3026  008E                     	;# 
  3027  008F                     	;# 
  3028  0090                     	;# 
  3029  0091                     	;# 
  3030  0092                     	;# 
  3031  0093                     	;# 
  3032  0094                     	;# 
  3033  0095                     	;# 
  3034  0096                     	;# 
  3035  0097                     	;# 
  3036  0099                     	;# 
  3037  009A                     	;# 
  3038  009B                     	;# 
  3039  009B                     	;# 
  3040  009C                     	;# 
  3041  009D                     	;# 
  3042  009E                     	;# 
  3043  010C                     	;# 
  3044  010D                     	;# 
  3045  010E                     	;# 
  3046  010F                     	;# 
  3047  0110                     	;# 
  3048  0116                     	;# 
  3049  0117                     	;# 
  3050  011D                     	;# 
  3051  018C                     	;# 
  3052  018D                     	;# 
  3053  018F                     	;# 
  3054  0190                     	;# 
  3055  0191                     	;# 
  3056  0191                     	;# 
  3057  0192                     	;# 
  3058  0193                     	;# 
  3059  0193                     	;# 
  3060  0194                     	;# 
  3061  0195                     	;# 
  3062  0196                     	;# 
  3063  0197                     	;# 
  3064  0199                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  019A                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019B                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019C                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019D                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019E                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019F                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  020D                     	;# 
  3088  020F                     	;# 
  3089  0210                     	;# 
  3090  0211                     	;# 
  3091  0211                     	;# 
  3092  0212                     	;# 
  3093  0212                     	;# 
  3094  0213                     	;# 
  3095  0213                     	;# 
  3096  0214                     	;# 
  3097  0214                     	;# 
  3098  0215                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0216                     	;# 
  3102  0216                     	;# 
  3103  0217                     	;# 
  3104  0217                     	;# 
  3105  0219                     	;# 
  3106  021A                     	;# 
  3107  021B                     	;# 
  3108  021C                     	;# 
  3109  021D                     	;# 
  3110  021E                     	;# 
  3111  021F                     	;# 
  3112  028C                     	;# 
  3113  028D                     	;# 
  3114  0291                     	;# 
  3115  0291                     	;# 
  3116  0292                     	;# 
  3117  0293                     	;# 
  3118  0298                     	;# 
  3119  0298                     	;# 
  3120  0299                     	;# 
  3121  029A                     	;# 
  3122  029D                     	;# 
  3123  029E                     	;# 
  3124  029F                     	;# 
  3125  030C                     	;# 
  3126  030D                     	;# 
  3127  0311                     	;# 
  3128  0311                     	;# 
  3129  0312                     	;# 
  3130  0313                     	;# 
  3131  0318                     	;# 
  3132  0318                     	;# 
  3133  0319                     	;# 
  3134  031A                     	;# 
  3135  031C                     	;# 
  3136  031C                     	;# 
  3137  031D                     	;# 
  3138  031E                     	;# 
  3139  038C                     	;# 
  3140  038D                     	;# 
  3141  0394                     	;# 
  3142  0395                     	;# 
  3143  0396                     	;# 
  3144  040C                     	;# 
  3145  040D                     	;# 
  3146  0411                     	;# 
  3147  0411                     	;# 
  3148  0412                     	;# 
  3149  0413                     	;# 
  3150  0414                     	;# 
  3151  0415                     	;# 
  3152  0416                     	;# 
  3153  0417                     	;# 
  3154  0418                     	;# 
  3155  0418                     	;# 
  3156  0419                     	;# 
  3157  041A                     	;# 
  3158  041B                     	;# 
  3159  041C                     	;# 
  3160  041D                     	;# 
  3161  041E                     	;# 
  3162  048D                     	;# 
  3163  0491                     	;# 
  3164  0491                     	;# 
  3165  0492                     	;# 
  3166  0492                     	;# 
  3167  0493                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0494                     	;# 
  3171  0494                     	;# 
  3172  0495                     	;# 
  3173  0495                     	;# 
  3174  0496                     	;# 
  3175  0496                     	;# 
  3176  0497                     	;# 
  3177  0497                     	;# 
  3178  0595                     	;# 
  3179  0596                     	;# 
  3180  0597                     	;# 
  3181  059C                     	;# 
  3182  059D                     	;# 
  3183  059E                     	;# 
  3184  0611                     	;# 
  3185  0611                     	;# 
  3186  0612                     	;# 
  3187  0613                     	;# 
  3188  0614                     	;# 
  3189  0614                     	;# 
  3190  0615                     	;# 
  3191  0616                     	;# 
  3192  0617                     	;# 
  3193  0617                     	;# 
  3194  0618                     	;# 
  3195  0619                     	;# 
  3196  061A                     	;# 
  3197  061A                     	;# 
  3198  061B                     	;# 
  3199  061C                     	;# 
  3200  061D                     	;# 
  3201  061D                     	;# 
  3202  061E                     	;# 
  3203  061F                     	;# 
  3204  0FE4                     	;# 
  3205  0FE5                     	;# 
  3206  0FE6                     	;# 
  3207  0FE7                     	;# 
  3208  0FE8                     	;# 
  3209  0FE9                     	;# 
  3210  0FEA                     	;# 
  3211  0FEB                     	;# 
  3212  0FED                     	;# 
  3213  0FEE                     	;# 
  3214  0FEF                     	;# 
  3215  0000                     	;# 
  3216  0001                     	;# 
  3217  0002                     	;# 
  3218  0003                     	;# 
  3219  0004                     	;# 
  3220  0005                     	;# 
  3221  0006                     	;# 
  3222  0007                     	;# 
  3223  0008                     	;# 
  3224  0009                     	;# 
  3225  000A                     	;# 
  3226  000B                     	;# 
  3227  000C                     	;# 
  3228  000D                     	;# 
  3229  000E                     	;# 
  3230  000F                     	;# 
  3231  0010                     	;# 
  3232  0011                     	;# 
  3233  0012                     	;# 
  3234  0013                     	;# 
  3235  0014                     	;# 
  3236  0015                     	;# 
  3237  0016                     	;# 
  3238  0016                     	;# 
  3239  0017                     	;# 
  3240  0018                     	;# 
  3241  0019                     	;# 
  3242  001A                     	;# 
  3243  001B                     	;# 
  3244  001C                     	;# 
  3245  008C                     	;# 
  3246  008D                     	;# 
  3247  008E                     	;# 
  3248  008F                     	;# 
  3249  0090                     	;# 
  3250  0091                     	;# 
  3251  0092                     	;# 
  3252  0093                     	;# 
  3253  0094                     	;# 
  3254  0095                     	;# 
  3255  0096                     	;# 
  3256  0097                     	;# 
  3257  0099                     	;# 
  3258  009A                     	;# 
  3259  009B                     	;# 
  3260  009B                     	;# 
  3261  009C                     	;# 
  3262  009D                     	;# 
  3263  009E                     	;# 
  3264  010C                     	;# 
  3265  010D                     	;# 
  3266  010E                     	;# 
  3267  010F                     	;# 
  3268  0110                     	;# 
  3269  0116                     	;# 
  3270  0117                     	;# 
  3271  011D                     	;# 
  3272  018C                     	;# 
  3273  018D                     	;# 
  3274  018F                     	;# 
  3275  0190                     	;# 
  3276  0191                     	;# 
  3277  0191                     	;# 
  3278  0192                     	;# 
  3279  0193                     	;# 
  3280  0193                     	;# 
  3281  0194                     	;# 
  3282  0195                     	;# 
  3283  0196                     	;# 
  3284  0197                     	;# 
  3285  0199                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  019A                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019B                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019C                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019D                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019E                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019F                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  020D                     	;# 
  3309  020F                     	;# 
  3310  0210                     	;# 
  3311  0211                     	;# 
  3312  0211                     	;# 
  3313  0212                     	;# 
  3314  0212                     	;# 
  3315  0213                     	;# 
  3316  0213                     	;# 
  3317  0214                     	;# 
  3318  0214                     	;# 
  3319  0215                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0216                     	;# 
  3323  0216                     	;# 
  3324  0217                     	;# 
  3325  0217                     	;# 
  3326  0219                     	;# 
  3327  021A                     	;# 
  3328  021B                     	;# 
  3329  021C                     	;# 
  3330  021D                     	;# 
  3331  021E                     	;# 
  3332  021F                     	;# 
  3333  028C                     	;# 
  3334  028D                     	;# 
  3335  0291                     	;# 
  3336  0291                     	;# 
  3337  0292                     	;# 
  3338  0293                     	;# 
  3339  0298                     	;# 
  3340  0298                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029D                     	;# 
  3344  029E                     	;# 
  3345  029F                     	;# 
  3346  030C                     	;# 
  3347  030D                     	;# 
  3348  0311                     	;# 
  3349  0311                     	;# 
  3350  0312                     	;# 
  3351  0313                     	;# 
  3352  0318                     	;# 
  3353  0318                     	;# 
  3354  0319                     	;# 
  3355  031A                     	;# 
  3356  031C                     	;# 
  3357  031C                     	;# 
  3358  031D                     	;# 
  3359  031E                     	;# 
  3360  038C                     	;# 
  3361  038D                     	;# 
  3362  0394                     	;# 
  3363  0395                     	;# 
  3364  0396                     	;# 
  3365  040C                     	;# 
  3366  040D                     	;# 
  3367  0411                     	;# 
  3368  0411                     	;# 
  3369  0412                     	;# 
  3370  0413                     	;# 
  3371  0414                     	;# 
  3372  0415                     	;# 
  3373  0416                     	;# 
  3374  0417                     	;# 
  3375  0418                     	;# 
  3376  0418                     	;# 
  3377  0419                     	;# 
  3378  041A                     	;# 
  3379  041B                     	;# 
  3380  041C                     	;# 
  3381  041D                     	;# 
  3382  041E                     	;# 
  3383  048D                     	;# 
  3384  0491                     	;# 
  3385  0491                     	;# 
  3386  0492                     	;# 
  3387  0492                     	;# 
  3388  0493                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0494                     	;# 
  3392  0494                     	;# 
  3393  0495                     	;# 
  3394  0495                     	;# 
  3395  0496                     	;# 
  3396  0496                     	;# 
  3397  0497                     	;# 
  3398  0497                     	;# 
  3399  0595                     	;# 
  3400  0596                     	;# 
  3401  0597                     	;# 
  3402  059C                     	;# 
  3403  059D                     	;# 
  3404  059E                     	;# 
  3405  0611                     	;# 
  3406  0611                     	;# 
  3407  0612                     	;# 
  3408  0613                     	;# 
  3409  0614                     	;# 
  3410  0614                     	;# 
  3411  0615                     	;# 
  3412  0616                     	;# 
  3413  0617                     	;# 
  3414  0617                     	;# 
  3415  0618                     	;# 
  3416  0619                     	;# 
  3417  061A                     	;# 
  3418  061A                     	;# 
  3419  061B                     	;# 
  3420  061C                     	;# 
  3421  061D                     	;# 
  3422  061D                     	;# 
  3423  061E                     	;# 
  3424  061F                     	;# 
  3425  0FE4                     	;# 
  3426  0FE5                     	;# 
  3427  0FE6                     	;# 
  3428  0FE7                     	;# 
  3429  0FE8                     	;# 
  3430  0FE9                     	;# 
  3431  0FEA                     	;# 
  3432  0FEB                     	;# 
  3433  0FED                     	;# 
  3434  0FEE                     	;# 
  3435  0FEF                     	;_modArray
  3436                           
  3437                           	psect	idataBANK0
  3438  2DD7                     __pidataBANK0:	
  3439                           
  3440                           ;initializer for _delay_time
  3441  2DD7  34D0               	retlw	208
  3442  2DD8  3407               	retlw	7
  3443  2DD9  3400               	retlw	0
  3444  2DDA  3400               	retlw	0
  3445                           
  3446                           ;initializer for _bottom_push_state
  3447  2DDB  3401               	retlw	1
  3448  2DDC  3400               	retlw	0
  3449                           
  3450                           ;initializer for _long_press_limit
  3451  2DDD  34E8               	retlw	232
  3452  2DDE  3403               	retlw	3
  3453                           
  3454                           ;initializer for _top_push_state
  3455  2DDF  3406               	retlw	6
  3456  2DE0  3400               	retlw	0
  3457                           
  3458                           ;initializer for _blink_rate
  3459  2DE1  3414               	retlw	20
  3460                           
  3461                           ;initializer for _expressionChannel
  3462  2DE2  3401               	retlw	1
  3463                           
  3464                           ;initializer for _longTap_state
  3465  2DE3  34FF               	retlw	255
  3466                           
  3467                           ;initializer for _mod_time_changed
  3468  2DE4  3401               	retlw	1
  3469                           
  3470                           ;initializer for _num_taps
  3471  2DE5  3404               	retlw	4
  3472                           
  3473                           ;initializer for _presetChannel
  3474  2DE6  3401               	retlw	1
  3475                           
  3476                           ;initializer for _switchBypass_state
  3477  2DE7  34FF               	retlw	255
  3478                           
  3479                           	psect	idataBANK3
  3480  2E95                     __pidataBANK3:	
  3481                           
  3482                           ;initializer for _baseline_mod_time
  3483  2E95  34D0               	retlw	208
  3484  2E96  3407               	retlw	7
  3485  2E97  3400               	retlw	0
  3486  2E98  3400               	retlw	0
  3487                           
  3488                           ;initializer for _blink_delay
  3489  2E99  3464               	retlw	100
  3490  2E9A  3400               	retlw	0
  3491                           
  3492                           ;initializer for _knob1_prev
  3493  2E9B  34D0               	retlw	208
  3494  2E9C  3407               	retlw	7
  3495                           
  3496                           ;initializer for _knob2_prev
  3497  2E9D  34D0               	retlw	208
  3498  2E9E  3407               	retlw	7
  3499                           
  3500                           ;initializer for _knob3_prev
  3501  2E9F  34D0               	retlw	208
  3502  2EA0  3407               	retlw	7
  3503                           
  3504                           ;initializer for _knob4_prev
  3505  2EA1  34D0               	retlw	208
  3506  2EA2  3407               	retlw	7
  3507                           
  3508                           ;initializer for _knob5_prev
  3509  2EA3  34D0               	retlw	208
  3510  2EA4  3407               	retlw	7
  3511                           
  3512                           ;initializer for _mod_delay_time
  3513  2EA5  34D0               	retlw	208
  3514  2EA6  3407               	retlw	7
  3515                           
  3516                           ;initializer for _symmetry
  3517  2EA7  34B4               	retlw	180
  3518  2EA8  3400               	retlw	0
  3519                           
  3520                           ;initializer for _tap_iteration
  3521  2EA9  3401               	retlw	1
  3522  2EAA  3400               	retlw	0
  3523                           
  3524                           ;initializer for _blink_state
  3525  2EAB  3401               	retlw	1
  3526                           
  3527                           ;initializer for _currentBypassState
  3528  2EAC  34FF               	retlw	255
  3529                           
  3530                           ;initializer for _expSwitchState
  3531  2EAD  34FF               	retlw	255
  3532                           
  3533                           ;initializer for _expressModeCnst
  3534  2EAE  3402               	retlw	2
  3535                           
  3536                           ;initializer for _presetModeCnst
  3537  2EAF  3401               	retlw	1
  3538                           
  3539                           ;initializer for _switchTap_state
  3540  2EB0  34FF               	retlw	255
  3541                           
  3542                           	psect	idataBANK4
  3543  0002                     __pidataBANK4:	
  3544                           
  3545                           ;initializer for _switchBypass_up
  3546  0002  3401               	retlw	1
  3547  0003  3400               	retlw	0
  3548                           
  3549                           	psect	stringtext
  3550  2800                     __pstringtext:	
  3551  2800                     exp@coeff:	
  3552  2800  3400               	retlw	0
  3553  2801  3480               	retlw	128
  3554  2802  343F               	retlw	63
  3555  2803  3472               	retlw	114
  3556  2804  3431               	retlw	49
  3557  2805  343F               	retlw	63
  3558  2806  34FE               	retlw	254
  3559  2807  3475               	retlw	117
  3560  2808  343E               	retlw	62
  3561  2809  3458               	retlw	88
  3562  280A  3463               	retlw	99
  3563  280B  343D               	retlw	61
  3564  280C  3495               	retlw	149
  3565  280D  341D               	retlw	29
  3566  280E  343C               	retlw	60
  3567  280F  34C5               	retlw	197
  3568  2810  34AE               	retlw	174
  3569  2811  343A               	retlw	58
  3570  2812  3479               	retlw	121
  3571  2813  3421               	retlw	33
  3572  2814  3439               	retlw	57
  3573  2815  3494               	retlw	148
  3574  2816  3480               	retlw	128
  3575  2817  3437               	retlw	55
  3576  2818  3493               	retlw	147
  3577  2819  34A7               	retlw	167
  3578  281A  3435               	retlw	53
  3579  281B  3456               	retlw	86
  3580  281C  3415               	retlw	21
  3581  281D  3434               	retlw	52
  3582  281E                     __end_ofexp@coeff:	
  3583  281E                     log@coeff:	
  3584  281E  3400               	retlw	0
  3585  281F  3400               	retlw	0
  3586  2820  3400               	retlw	0
  3587  2821  3400               	retlw	0
  3588  2822  3480               	retlw	128
  3589  2823  343F               	retlw	63
  3590  2824  34F0               	retlw	240
  3591  2825  34FF               	retlw	255
  3592  2826  34BE               	retlw	190
  3593  2827  34E2               	retlw	226
  3594  2828  34A9               	retlw	169
  3595  2829  343E               	retlw	62
  3596  282A  3483               	retlw	131
  3597  282B  3476               	retlw	118
  3598  282C  34BE               	retlw	190
  3599  282D  34AE               	retlw	174
  3600  282E  342B               	retlw	43
  3601  282F  343E               	retlw	62
  3602  2830  343C               	retlw	60
  3603  2831  34C3               	retlw	195
  3604  2832  34BD               	retlw	189
  3605  2833  34D2               	retlw	210
  3606  2834  3413               	retlw	19
  3607  2835  343D               	retlw	61
  3608  2836  3478               	retlw	120
  3609  2837  34D3               	retlw	211
  3610  2838  34BB               	retlw	187
  3611  2839                     __end_oflog@coeff:	
  3612  2839                     sin@coeff_a:	
  3613  2839  34F4               	retlw	244
  3614  283A  344A               	retlw	74
  3615  283B  3448               	retlw	72
  3616  283C  3495               	retlw	149
  3617  283D  3495               	retlw	149
  3618  283E  34C7               	retlw	199
  3619  283F  34C1               	retlw	193
  3620  2840  34DC               	retlw	220
  3621  2841  3445               	retlw	69
  3622  2842  34DC               	retlw	220
  3623  2843  346D               	retlw	109
  3624  2844  34C3               	retlw	195
  3625  2845  34B3               	retlw	179
  3626  2846  3433               	retlw	51
  3627  2847  3440               	retlw	64
  3628  2848                     __end_ofsin@coeff_a:	
  3629  2848                     sin@coeff_b:	
  3630  2848  3434               	retlw	52
  3631  2849  3401               	retlw	1
  3632  284A  3448               	retlw	72
  3633  284B  349D               	retlw	157
  3634  284C  34B0               	retlw	176
  3635  284D  3445               	retlw	69
  3636  284E  3400               	retlw	0
  3637  284F  34DA               	retlw	218
  3638  2850  3442               	retlw	66
  3639  2851  3400               	retlw	0
  3640  2852  3480               	retlw	128
  3641  2853  343F               	retlw	63
  3642  2854                     __end_ofsin@coeff_b:	
  3643  000B                     _INTCONbits	set	11
  3644  0011                     _PIR1bits	set	17
  3645  000C                     _PORTAbits	set	12
  3646  000E                     _PORTCbits	set	14
  3647  000F                     _PORTDbits	set	15
  3648  0010                     _PORTEbits	set	16
  3649  001B                     _PR2	set	27
  3650  001C                     _T2CONbits	set	28
  3651  005F                     _GIE	set	95
  3652  005E                     _PEIE	set	94
  3653  0069                     _RB1	set	105
  3654  009D                     _ADCON0bits	set	157
  3655  009E                     _ADCON1bits	set	158
  3656  009C                     _ADRESH	set	156
  3657  009B                     _ADRESL	set	155
  3658  0095                     _OPTION_REGbits	set	149
  3659  0099                     _OSCCONbits	set	153
  3660  008D                     _TRISBbits	set	141
  3661  008E                     _TRISCbits	set	142
  3662  008F                     _TRISDbits	set	143
  3663  0090                     _TRISEbits	set	144
  3664  048D                     _RCIE	set	1165
  3665  011D                     _APFCONbits	set	285
  3666  010D                     _LATBbits	set	269
  3667  010F                     _LATDbits	set	271
  3668  0190                     _ANSELEbits	set	400
  3669  0192                     _PMADRH	set	402
  3670  0191                     _PMADRL	set	401
  3671  0195                     _PMCON1bits	set	405
  3672  0196                     _PMCON2	set	406
  3673  0194                     _PMDATH	set	404
  3674  0193                     _PMDATL	set	403
  3675  0199                     _RCREG	set	409
  3676  019D                     _RCSTAbits	set	413
  3677  019B                     _SPBRG	set	411
  3678  019A                     _TXREG	set	410
  3679  019E                     _TXSTAbits	set	414
  3680  0291                     _CCPR1	set	657
  3681  0298                     _CCPR2	set	664
  3682  0293                     _CCP1CONbits	set	659
  3683  029A                     _CCP2CONbits	set	666
  3684  029D                     _CCPTMRS0	set	669
  3685  029E                     _CCPTMRS1	set	670
  3686  029F                     _CCPTMRS2	set	671
  3687  0311                     _CCPR3	set	785
  3688  0318                     _CCPR4	set	792
  3689  031C                     _CCPR5	set	796
  3690  0313                     _CCP3CONbits	set	787
  3691  031A                     _CCP4CONbits	set	794
  3692  031E                     _CCP5CONbits	set	798
  3693  030C                     _TRISFbits	set	780
  3694  030D                     _TRISGbits	set	781
  3695  038C                     _LATFbits	set	908
  3696  038D                     _LATGbits	set	909
  3697  040C                     _ANSELFbits	set	1036
  3698  061F                     _CCP10CONbits	set	1567
  3699  0613                     _CCP6CONbits	set	1555
  3700  0616                     _CCP7CONbits	set	1558
  3701  0619                     _CCP8CONbits	set	1561
  3702  061C                     _CCP9CONbits	set	1564
  3703                           
  3704                           ; #config settings
  3705  0000                     
  3706                           	psect	cinit
  3707  02C1                     start_initialization:	
  3708  02C1                     __initialization:		;BIGRAM
  3709                           
  3710                           ; Clear objects allocated to BIGRAM
  3711  02C1  308A               	movlw	low (0+9098)
  3712  02C2  0084               	movwf	4
  3713  02C3  3023               	movlw	high (0+9098)
  3714  02C4  0085               	movwf	5
  3715  02C5  3066               	movlw	102
  3716  02C6  00FE               	movwf	btemp
  3717  02C7  3002               	movlw	2
  3718  02C8  00FF               	movwf	btemp+1
  3719  02C9  31AD  25BC  3182   	fcall	clear_ram0
  3720                           
  3721                           ; Clear objects allocated to COMMON
  3722  02CC  01FD               	clrf	__pbssCOMMON& (0+127)
  3723                           
  3724                           ; Clear objects allocated to BANK0
  3725  02CD  3043               	movlw	low __pbssBANK0
  3726  02CE  0084               	movwf	4
  3727  02CF  3000               	movlw	high __pbssBANK0
  3728  02D0  0085               	movwf	5
  3729  02D1  3012               	movlw	18
  3730  02D2  00FE               	movwf	btemp
  3731  02D3  3000               	movlw	0
  3732  02D4  00FF               	movwf	btemp+1
  3733  02D5  31AD  25BC  3182   	fcall	clear_ram0
  3734                           
  3735                           ; Clear objects allocated to BANK2
  3736  02D8  0022               	movlb	2	; select bank2
  3737  02D9  01EA               	clrf	__pbssBANK2& (0+127)
  3738  02DA  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3739                           
  3740                           ; Clear objects allocated to BANK3
  3741  02DB  30A0               	movlw	low __pbssBANK3
  3742  02DC  0084               	movwf	4
  3743  02DD  3001               	movlw	high __pbssBANK3
  3744  02DE  0085               	movwf	5
  3745  02DF  302A               	movlw	42
  3746  02E0  00FE               	movwf	btemp
  3747  02E1  3000               	movlw	0
  3748  02E2  00FF               	movwf	btemp+1
  3749  02E3  31AD  25BC  3182   	fcall	clear_ram0
  3750                           
  3751                           ; Clear objects allocated to BANK4
  3752  02E6  3020               	movlw	low __pbssBANK4
  3753  02E7  0084               	movwf	4
  3754  02E8  3002               	movlw	high __pbssBANK4
  3755  02E9  0085               	movwf	5
  3756  02EA  3033               	movlw	51
  3757  02EB  00FE               	movwf	btemp
  3758  02EC  3000               	movlw	0
  3759  02ED  00FF               	movwf	btemp+1
  3760  02EE  31AD  25BC  3182   	fcall	clear_ram0
  3761                           
  3762                           ; Clear objects allocated to BANK5
  3763  02F1  30A0               	movlw	low __pbssBANK5
  3764  02F2  0084               	movwf	4
  3765  02F3  3002               	movlw	high __pbssBANK5
  3766  02F4  0085               	movwf	5
  3767  02F5  302C               	movlw	44
  3768  02F6  00FE               	movwf	btemp
  3769  02F7  3000               	movlw	0
  3770  02F8  00FF               	movwf	btemp+1
  3771  02F9  31AD  25BC  3182   	fcall	clear_ram0
  3772                           
  3773                           ; Clear objects allocated to BANK6
  3774  02FC  3020               	movlw	low __pbssBANK6
  3775  02FD  0084               	movwf	4
  3776  02FE  3003               	movlw	high __pbssBANK6
  3777  02FF  0085               	movwf	5
  3778  0300  3040               	movlw	64
  3779  0301  00FE               	movwf	btemp
  3780  0302  3000               	movlw	0
  3781  0303  00FF               	movwf	btemp+1
  3782  0304  31AD  25BC  3182   	fcall	clear_ram0
  3783                           
  3784                           ; Clear objects allocated to BANK7
  3785  0307  30A0               	movlw	low __pbssBANK7
  3786  0308  0084               	movwf	4
  3787  0309  3003               	movlw	high __pbssBANK7
  3788  030A  0085               	movwf	5
  3789  030B  3040               	movlw	64
  3790  030C  00FE               	movwf	btemp
  3791  030D  3000               	movlw	0
  3792  030E  00FF               	movwf	btemp+1
  3793  030F  31AD  25BC  3182   	fcall	clear_ram0
  3794                           
  3795                           ; Initialize objects allocated to BANK0
  3796  0312  30D7               	movlw	low __pidataBANK0
  3797  0313  0084               	movwf	4
  3798  0314  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3799  0315  0085               	movwf	5
  3800  0316  3055               	movlw	low __pdataBANK0
  3801  0317  0086               	movwf	6
  3802  0318  3000               	movlw	high __pdataBANK0
  3803  0319  0087               	movwf	7
  3804  031A  3000               	movlw	0
  3805  031B  00FF               	movwf	btemp+1
  3806  031C  3011               	movlw	17
  3807  031D  31AD  25B0  3182   	fcall	init_ram
  3808                           
  3809                           ; Initialize objects allocated to BANK3
  3810  0320  3095               	movlw	low __pidataBANK3
  3811  0321  0084               	movwf	4
  3812  0322  30AE               	movlw	(high __pidataBANK3)| (0+128)
  3813  0323  0085               	movwf	5
  3814  0324  30CA               	movlw	low __pdataBANK3
  3815  0325  0086               	movwf	6
  3816  0326  3001               	movlw	high __pdataBANK3
  3817  0327  0087               	movwf	7
  3818  0328  3000               	movlw	0
  3819  0329  00FF               	movwf	btemp+1
  3820  032A  301C               	movlw	28
  3821  032B  31AD  25B0  3182   	fcall	init_ram
  3822                           
  3823                           ; Initialize objects allocated to BANK4
  3824  032E  0024               	movlb	4	; select bank4
  3825  032F  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3826  0332  00E1               	movwf	__pdataBANK4& (0+127)
  3827  0333  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3828  0335  00E2               	movwf	(__pdataBANK4+1)& (0+127)
  3829  0336                     end_of_initialization:	
  3830                           ;End of C runtime variable initialization code
  3831                           
  3832  0336                     __end_of__initialization:	
  3833  0336  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3834  0337  0020               	movlb	0
  3835  0338  3183  2B3A         	ljmp	_main	;jump to C main() function
  3836                           
  3837                           	psect	bssCOMMON
  3838  007D                     __pbssCOMMON:	
  3839  007D                     _UQFront:	
  3840  007D                     	ds	1
  3841                           
  3842                           	psect	bssBANK0
  3843  0043                     __pbssBANK0:	
  3844  0043                     _tap_timer:	
  3845  0043                     	ds	4
  3846  0047                     _timer:	
  3847  0047                     	ds	4
  3848  004B                     _UQEnd:	
  3849  004B                     	ds	1
  3850  004C                     _doubleTap_state:	
  3851  004C                     	ds	1
  3852  004D                     _longBypass_start:	
  3853  004D                     	ds	1
  3854  004E                     _longBypass_state:	
  3855  004E                     	ds	1
  3856  004F                     _longTap_start:	
  3857  004F                     	ds	1
  3858  0050                     _mode2_state:	
  3859  0050                     	ds	1
  3860  0051                     _presetSaveMode:	
  3861  0051                     	ds	1
  3862  0052                     _preset_blink:	
  3863  0052                     	ds	1
  3864  0053                     _suspend_blink:	
  3865  0053                     	ds	1
  3866  0054                     _switchTap_pressed:	
  3867  0054                     	ds	1
  3868                           
  3869                           	psect	dataBANK0
  3870  0055                     __pdataBANK0:	
  3871  0055                     _delay_time:	
  3872  0055                     	ds	4
  3873  0059                     _bottom_push_state:	
  3874  0059                     	ds	2
  3875  005B                     _long_press_limit:	
  3876  005B                     	ds	2
  3877  005D                     _top_push_state:	
  3878  005D                     	ds	2
  3879  005F                     _blink_rate:	
  3880  005F                     	ds	1
  3881  0060                     _expressionChannel:	
  3882  0060                     	ds	1
  3883  0061                     _longTap_state:	
  3884  0061                     	ds	1
  3885  0062                     _mod_time_changed:	
  3886  0062                     	ds	1
  3887  0063                     _num_taps:	
  3888  0063                     	ds	1
  3889  0064                     _presetChannel:	
  3890  0064                     	ds	1
  3891  0065                     _switchBypass_state:	
  3892  0065                     	ds	1
  3893                           
  3894                           	psect	bssBANK2
  3895  016A                     __pbssBANK2:	
  3896  016A                     _bottomTactile_pressed:	
  3897  016A                     	ds	1
  3898  016B                     _topTactile_pressed:	
  3899  016B                     	ds	1
  3900                           
  3901                           	psect	bssBANK3
  3902  01A0                     __pbssBANK3:	
  3903  01A0                     _double_timer:	
  3904  01A0                     	ds	4
  3905  01A4                     _mod_timer:	
  3906  01A4                     	ds	4
  3907  01A8                     _sub_timer:	
  3908  01A8                     	ds	4
  3909  01AC                     _knob_1_pos:	
  3910  01AC                     	ds	2
  3911  01AE                     _knob_2_pos:	
  3912  01AE                     	ds	2
  3913  01B0                     _knob_3_pos:	
  3914  01B0                     	ds	2
  3915  01B2                     _knob_4_pos:	
  3916  01B2                     	ds	2
  3917  01B4                     _knob_5_pos:	
  3918  01B4                     	ds	2
  3919  01B6                     _longBypass_timer:	
  3920  01B6                     	ds	2
  3921  01B8                     _longTap_timer:	
  3922  01B8                     	ds	2
  3923  01BA                     _mod_counter:	
  3924  01BA                     	ds	2
  3925  01BC                     _mod_value:	
  3926  01BC                     	ds	2
  3927  01BE                     _switchBypass_pressed:	
  3928  01BE                     	ds	2
  3929  01C0                     _adjust_mod_delay:	
  3930  01C0                     	ds	1
  3931  01C1                     _bypass_turning_on:	
  3932  01C1                     	ds	1
  3933  01C2                     _iCnt:	
  3934  01C2                     	ds	1
  3935  01C3                     _longBypass_down:	
  3936  01C3                     	ds	1
  3937  01C4                     _longBypass_save:	
  3938  01C4                     	ds	1
  3939  01C5                     _mode1_state:	
  3940  01C5                     	ds	1
  3941  01C6                     _modulation_changed:	
  3942  01C6                     	ds	1
  3943  01C7                     _preset_programmning_on:	
  3944  01C7                     	ds	1
  3945  01C8                     _reset_sub_delay:	
  3946  01C8                     	ds	1
  3947  01C9                     _switchTap_down:	
  3948  01C9                     	ds	1
  3949                           
  3950                           	psect	dataBANK3
  3951  01CA                     __pdataBANK3:	
  3952  01CA                     _baseline_mod_time:	
  3953  01CA                     	ds	4
  3954  01CE                     _blink_delay:	
  3955  01CE                     	ds	2
  3956  01D0                     _knob1_prev:	
  3957  01D0                     	ds	2
  3958  01D2                     _knob2_prev:	
  3959  01D2                     	ds	2
  3960  01D4                     _knob3_prev:	
  3961  01D4                     	ds	2
  3962  01D6                     _knob4_prev:	
  3963  01D6                     	ds	2
  3964  01D8                     _knob5_prev:	
  3965  01D8                     	ds	2
  3966  01DA                     _mod_delay_time:	
  3967  01DA                     	ds	2
  3968  01DC                     _symmetry:	
  3969  01DC                     	ds	2
  3970  01DE                     _tap_iteration:	
  3971  01DE                     	ds	2
  3972  01E0                     _blink_state:	
  3973  01E0                     	ds	1
  3974  01E1                     _currentBypassState:	
  3975  01E1                     	ds	1
  3976  01E2                     _expSwitchState:	
  3977  01E2                     	ds	1
  3978  01E3                     _expressModeCnst:	
  3979  01E3                     	ds	1
  3980  01E4                     _presetModeCnst:	
  3981  01E4                     	ds	1
  3982  01E5                     _switchTap_state:	
  3983  01E5                     	ds	1
  3984                           
  3985                           	psect	bssBANK4
  3986  0220                     __pbssBANK4:	
  3987  0220                     _tap_history:	
  3988  0220                     	ds	20
  3989  0234                     USARTWriteInt@F3536:	
  3990  0234                     	ds	5
  3991  0239                     _ledState:	
  3992  0239                     	ds	4
  3993  023D                     _tap_total:	
  3994  023D                     	ds	4
  3995  0241                     _adjusted_pot_value:	
  3996  0241                     	ds	2
  3997  0243                     _debounce_bypass:	
  3998  0243                     	ds	2
  3999  0245                     _debounce_count:	
  4000  0245                     	ds	2
  4001  0247                     _debounce_mode1:	
  4002  0247                     	ds	2
  4003  0249                     _debounce_mode2:	
  4004  0249                     	ds	2
  4005  024B                     _delayfound:	
  4006  024B                     	ds	2
  4007  024D                     _errno:	
  4008  024D                     	ds	2
  4009  024F                     _switchBypass_toggle:	
  4010  024F                     	ds	2
  4011  0251                     _tmpVal:	
  4012  0251                     	ds	2
  4013                           
  4014                           	psect	dataBANK4
  4015  0261                     __pdataBANK4:	
  4016  0261                     _switchBypass_up:	
  4017  0261                     	ds	2
  4018                           
  4019                           	psect	bssBANK5
  4020  02A0                     __pbssBANK5:	
  4021  02A0                     _tap:	
  4022  02A0                     	ds	44
  4023                           
  4024                           	psect	bssBANK6
  4025  0320                     __pbssBANK6:	
  4026  0320                     _URBuff:	
  4027  0320                     	ds	64
  4028                           
  4029                           	psect	bssBANK7
  4030  03A0                     __pbssBANK7:	
  4031  03A0                     _myBuf:	
  4032  03A0                     	ds	64
  4033                           
  4034                           	psect	clrtext
  4035  2DBC                     clear_ram0:	
  4036                           ;	Called with FSR0 containing the base address, and
  4037                           ;	btemp/btemp+1 has the size to clear
  4038                           
  4039  2DBC  0064               	clrwdt	;clear the watchdog before getting into this loop
  4040  2DBD                     clrloop0:	
  4041  2DBD  0180               	clrf	0	;clear RAM location pointed to by FSR
  4042  2DBE  3101               	addfsr 0,1
  4043  2DBF  3001               	movlw	1
  4044  2DC0  02FE               	subwf	126,f
  4045  2DC1  3000               	movlw	0
  4046  2DC2  3BFF               	subwfb	127,f
  4047  2DC3  087F               	movf	127,w
  4048  2DC4  047E               	iorwf	126,w
  4049  2DC5  1903               	btfsc	3,2
  4050  2DC6  3400               	retlw	0	;all done for this memory range, return
  4051  2DC7  2DBD               	goto	clrloop0	;have we reached the end yet?
  4052                           
  4053                           	psect	inittext
  4054  2DB0                     init_ram:	
  4055  2DB0  00FE               	movwf	126
  4056  2DB1                     initloop:	
  4057  2DB1  0012               	moviw fsr0++
  4058  2DB2  001E               	movwi fsr1++
  4059  2DB3  3001               	movlw	1
  4060  2DB4  02FE               	subwf	126,f
  4061  2DB5  3000               	movlw	0
  4062  2DB6  3BFF               	subwfb	127,f
  4063  2DB7  087F               	movf	127,w
  4064  2DB8  047E               	iorwf	126,w
  4065  2DB9  1903               	btfsc	3,2
  4066  2DBA  3400               	retlw	0
  4067  2DBB  2DB1               	goto	initloop
  4068                           
  4069                           	psect	cstackBANK4
  4070  0253                     __pcstackBANK4:	
  4071  0253                     ??_main:	
  4072                           
  4073                           ; 1 bytes @ 0x0
  4074  0253                     	ds	5
  4075  0258                     _main$2832:	
  4076                           
  4077                           ; 3 bytes @ 0x5
  4078  0258                     	ds	3
  4079  025B                     _main$2833:	
  4080                           
  4081                           ; 3 bytes @ 0x8
  4082  025B                     	ds	3
  4083  025E                     _main$2834:	
  4084                           
  4085                           ; 3 bytes @ 0xB
  4086  025E                     	ds	3
  4087                           
  4088                           	psect	cstackBANK3
  4089  01E6                     __pcstackBANK3:	
  4090  01E6                     scaleA100kPot@pwm:	
  4091  01E6                     scaleA10kPot@pwm:	
  4092                           ; 3 bytes @ 0x0
  4093                           
  4094  01E6                     scaleiA10kPot@pwm:	
  4095                           ; 3 bytes @ 0x0
  4096                           
  4097                           
  4098                           ; 3 bytes @ 0x0
  4099  01E6                     	ds	3
  4100  01E9                     _scaleA100kPot$2837:	
  4101  01E9                     _scaleA10kPot$2841:	
  4102                           ; 3 bytes @ 0x3
  4103                           
  4104  01E9                     _scaleiA10kPot$2843:	
  4105                           ; 3 bytes @ 0x3
  4106                           
  4107                           
  4108                           ; 3 bytes @ 0x3
  4109  01E9                     	ds	3
  4110  01EC                     _scaleA100kPot$2838:	
  4111  01EC                     _scaleA10kPot$2842:	
  4112                           ; 3 bytes @ 0x6
  4113                           
  4114  01EC                     _scaleiA10kPot$2844:	
  4115                           ; 3 bytes @ 0x6
  4116                           
  4117                           
  4118                           ; 3 bytes @ 0x6
  4119  01EC                     	ds	3
  4120                           
  4121                           	psect	cstackBANK2
  4122  0120                     __pcstackBANK2:	
  4123  0120                     ?___fttol:	
  4124  0120                     ___fttol@f1:	
  4125                           ; 4 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  0120                     	ds	4
  4130  0124                     ??___fttol:	
  4131                           
  4132                           ; 1 bytes @ 0x4
  4133  0124                     	ds	4
  4134  0128                     ___fttol@sign1:	
  4135                           
  4136                           ; 1 bytes @ 0x8
  4137  0128                     	ds	1
  4138  0129                     ___fttol@lval:	
  4139                           
  4140                           ; 4 bytes @ 0x9
  4141  0129                     	ds	4
  4142  012D                     ___fttol@exp1:	
  4143                           
  4144                           ; 1 bytes @ 0xD
  4145  012D                     	ds	1
  4146  012E                     ?_modTri:	
  4147  012E                     ?_modSaw:	
  4148                           ; 2 bytes @ 0xE
  4149                           
  4150  012E                     ?___wmul:	
  4151                           ; 2 bytes @ 0xE
  4152                           
  4153  012E                     ?___altoft:	
  4154                           ; 2 bytes @ 0xE
  4155                           
  4156  012E                     ___wmul@multiplier:	
  4157                           ; 3 bytes @ 0xE
  4158                           
  4159  012E                     modTri@angle:	
  4160                           ; 2 bytes @ 0xE
  4161                           
  4162  012E                     modSaw@angle:	
  4163                           ; 3 bytes @ 0xE
  4164                           
  4165  012E                     ___altoft@c:	
  4166                           ; 3 bytes @ 0xE
  4167                           
  4168                           
  4169                           ; 4 bytes @ 0xE
  4170  012E                     	ds	2
  4171  0130                     ___wmul@multiplicand:	
  4172                           
  4173                           ; 2 bytes @ 0x10
  4174  0130                     	ds	1
  4175  0131                     modTri@inflection:	
  4176  0131                     modSaw@inflection:	
  4177                           ; 3 bytes @ 0x11
  4178                           
  4179                           
  4180                           ; 3 bytes @ 0x11
  4181  0131                     	ds	1
  4182  0132                     ??___altoft:	
  4183  0132                     ___wmul@product:	
  4184                           ; 1 bytes @ 0x12
  4185                           
  4186                           
  4187                           ; 2 bytes @ 0x12
  4188  0132                     	ds	2
  4189  0134                     ?_modSin:	
  4190  0134                     ?_eval_poly:	
  4191                           ; 2 bytes @ 0x14
  4192                           
  4193  0134                     ___altoft@exp:	
  4194                           ; 3 bytes @ 0x14
  4195                           
  4196  0134                     modSin@angle:	
  4197                           ; 1 bytes @ 0x14
  4198                           
  4199  0134                     eval_poly@x:	
  4200                           ; 3 bytes @ 0x14
  4201                           
  4202  0134                     _modTri$2846:	
  4203                           ; 3 bytes @ 0x14
  4204                           
  4205  0134                     _modSaw$2847:	
  4206                           ; 3 bytes @ 0x14
  4207                           
  4208                           
  4209                           ; 3 bytes @ 0x14
  4210  0134                     	ds	1
  4211  0135                     ___altoft@sign:	
  4212                           
  4213                           ; 1 bytes @ 0x15
  4214  0135                     	ds	1
  4215  0136                     ??_getModulationDelayTime:	
  4216  0136                     ?_trunc:	
  4217                           ; 1 bytes @ 0x16
  4218                           
  4219  0136                     ?_floor:	
  4220                           ; 3 bytes @ 0x16
  4221                           
  4222  0136                     trunc@x:	
  4223                           ; 3 bytes @ 0x16
  4224                           
  4225  0136                     floor@x:	
  4226                           ; 3 bytes @ 0x16
  4227                           
  4228                           
  4229                           ; 3 bytes @ 0x16
  4230  0136                     	ds	1
  4231  0137                     eval_poly@d:	
  4232  0137                     modSin@inflection:	
  4233                           ; 2 bytes @ 0x17
  4234                           
  4235  0137                     modTri@shift:	
  4236                           ; 3 bytes @ 0x17
  4237                           
  4238  0137                     _modSaw$2848:	
  4239                           ; 3 bytes @ 0x17
  4240                           
  4241                           
  4242                           ; 3 bytes @ 0x17
  4243  0137                     	ds	2
  4244  0139                     ??_trunc:	
  4245  0139                     ??_floor:	
  4246                           ; 1 bytes @ 0x19
  4247                           
  4248  0139                     eval_poly@n:	
  4249                           ; 1 bytes @ 0x19
  4250                           
  4251                           
  4252                           ; 2 bytes @ 0x19
  4253  0139                     	ds	1
  4254  013A                     ??_modSin:	
  4255  013A                     getModulationDelayTime@subDiv:	
  4256                           ; 1 bytes @ 0x1A
  4257                           
  4258  013A                     modTri@period:	
  4259                           ; 2 bytes @ 0x1A
  4260                           
  4261  013A                     trunc@i:	
  4262                           ; 3 bytes @ 0x1A
  4263                           
  4264  013A                     floor@i:	
  4265                           ; 3 bytes @ 0x1A
  4266                           
  4267  013A                     _modSaw$2849:	
  4268                           ; 3 bytes @ 0x1A
  4269                           
  4270                           
  4271                           ; 3 bytes @ 0x1A
  4272  013A                     	ds	1
  4273  013B                     eval_poly@res:	
  4274                           
  4275                           ; 3 bytes @ 0x1B
  4276  013B                     	ds	1
  4277  013C                     _modSin$2845:	
  4278                           
  4279                           ; 3 bytes @ 0x1C
  4280  013C                     	ds	1
  4281  013D                     modSaw@mod:	
  4282  013D                     trunc@expon:	
  4283                           ; 2 bytes @ 0x1D
  4284                           
  4285  013D                     floor@expon:	
  4286                           ; 2 bytes @ 0x1D
  4287                           
  4288  013D                     modTri@tmpVal:	
  4289                           ; 2 bytes @ 0x1D
  4290                           
  4291                           
  4292                           ; 3 bytes @ 0x1D
  4293  013D                     	ds	1
  4294  013E                     ?_log:	
  4295  013E                     ?_ldexp:	
  4296                           ; 3 bytes @ 0x1E
  4297                           
  4298  013E                     ldexp@value:	
  4299                           ; 3 bytes @ 0x1E
  4300                           
  4301  013E                     log@x:	
  4302                           ; 3 bytes @ 0x1E
  4303                           
  4304                           
  4305                           ; 3 bytes @ 0x1E
  4306  013E                     	ds	1
  4307  013F                     ?_set_subdivision:	
  4308  013F                     ?___ftsub:	
  4309                           ; 2 bytes @ 0x1F
  4310                           
  4311  013F                     set_subdivision@x:	
  4312                           ; 3 bytes @ 0x1F
  4313                           
  4314  013F                     modSin@shift:	
  4315                           ; 2 bytes @ 0x1F
  4316                           
  4317  013F                     modSaw@shift:	
  4318                           ; 3 bytes @ 0x1F
  4319                           
  4320  013F                     ___ftsub@f2:	
  4321                           ; 3 bytes @ 0x1F
  4322                           
  4323                           
  4324                           ; 3 bytes @ 0x1F
  4325  013F                     	ds	2
  4326  0141                     ??_log:	
  4327  0141                     set_subdivision@y:	
  4328                           ; 1 bytes @ 0x21
  4329                           
  4330  0141                     ldexp@newexp:	
  4331                           ; 2 bytes @ 0x21
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x21
  4335  0141                     	ds	1
  4336  0142                     log@exponent:	
  4337  0142                     modSin@period:	
  4338                           ; 2 bytes @ 0x22
  4339                           
  4340  0142                     modSaw@period:	
  4341                           ; 3 bytes @ 0x22
  4342                           
  4343  0142                     ___ftsub@f1:	
  4344                           ; 3 bytes @ 0x22
  4345                           
  4346                           
  4347                           ; 3 bytes @ 0x22
  4348  0142                     	ds	1
  4349  0143                     ??_set_subdivision:	
  4350  0143                     ??_ldexp:	
  4351                           ; 1 bytes @ 0x23
  4352                           
  4353                           
  4354                           ; 1 bytes @ 0x23
  4355  0143                     	ds	2
  4356  0145                     ?_modSawRev:	
  4357  0145                     ?_sin:	
  4358                           ; 2 bytes @ 0x25
  4359                           
  4360  0145                     modSin@tmpVal:	
  4361                           ; 3 bytes @ 0x25
  4362                           
  4363  0145                     modSawRev@angle:	
  4364                           ; 3 bytes @ 0x25
  4365                           
  4366  0145                     sin@f:	
  4367                           ; 3 bytes @ 0x25
  4368                           
  4369  0145                     _ldexp$2641:	
  4370                           ; 3 bytes @ 0x25
  4371                           
  4372                           
  4373                           ; 3 bytes @ 0x25
  4374  0145                     	ds	1
  4375  0146                     set_subdivision@scalar:	
  4376                           
  4377                           ; 3 bytes @ 0x26
  4378  0146                     	ds	2
  4379  0148                     ??_sin:	
  4380  0148                     ?_modSquare:	
  4381                           ; 1 bytes @ 0x28
  4382                           
  4383  0148                     ?_exp:	
  4384                           ; 2 bytes @ 0x28
  4385                           
  4386  0148                     modSawRev@inflection:	
  4387                           ; 3 bytes @ 0x28
  4388                           
  4389  0148                     modSquare@angle:	
  4390                           ; 3 bytes @ 0x28
  4391                           
  4392  0148                     exp@x:	
  4393                           ; 3 bytes @ 0x28
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x28
  4397  0148                     	ds	1
  4398  0149                     set_subdivision@tmpX:	
  4399  0149                     sin@y:	
  4400                           ; 2 bytes @ 0x29
  4401                           
  4402                           
  4403                           ; 3 bytes @ 0x29
  4404  0149                     	ds	2
  4405  014B                     ??_modSawRev:	
  4406  014B                     ??_exp:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409  014B                     modSquare@inflection:	
  4410                           ; 1 bytes @ 0x2B
  4411                           
  4412                           
  4413                           ; 3 bytes @ 0x2B
  4414  014B                     	ds	1
  4415  014C                     _sin$2852:	
  4416  014C                     _exp$2853:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     sin@x2:	
  4427  014F                     _exp$2609:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     sin@sgn:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	1
  4444  0153                     ??_calcSinArray:	
  4445                           
  4446                           ; 1 bytes @ 0x33
  4447  0153                     	ds	1
  4448  0154                     exp@sign:	
  4449  0154                     updateModulationArray@angleFactor:	
  4450                           ; 1 bytes @ 0x34
  4451                           
  4452                           
  4453                           ; 2 bytes @ 0x34
  4454  0154                     	ds	1
  4455  0155                     ?_pow:	
  4456  0155                     pow@x:	
  4457                           ; 3 bytes @ 0x35
  4458                           
  4459                           
  4460                           ; 3 bytes @ 0x35
  4461  0155                     	ds	1
  4462  0156                     updateModulationArray@subDiv:	
  4463                           
  4464                           ; 2 bytes @ 0x36
  4465  0156                     	ds	1
  4466  0157                     calcSinArray@tmpVal:	
  4467                           
  4468                           ; 3 bytes @ 0x37
  4469  0157                     	ds	1
  4470  0158                     updateModulationArray@thisAngle:	
  4471  0158                     pow@y:	
  4472                           ; 2 bytes @ 0x38
  4473                           
  4474                           
  4475                           ; 3 bytes @ 0x38
  4476  0158                     	ds	2
  4477  015A                     calcSinArray@iAngle:	
  4478  015A                     updateModulationArray@iAngle:	
  4479                           ; 1 bytes @ 0x3A
  4480                           
  4481                           
  4482                           ; 1 bytes @ 0x3A
  4483  015A                     	ds	1
  4484  015B                     ??_pow:	
  4485                           
  4486                           ; 1 bytes @ 0x3B
  4487  015B                     	ds	1
  4488  015C                     _pow$2850:	
  4489                           
  4490                           ; 3 bytes @ 0x3C
  4491  015C                     	ds	3
  4492  015F                     _pow$2851:	
  4493                           
  4494                           ; 3 bytes @ 0x3F
  4495  015F                     	ds	3
  4496  0162                     pow@sign:	
  4497                           
  4498                           ; 1 bytes @ 0x42
  4499  0162                     	ds	1
  4500  0163                     pow@yi:	
  4501                           
  4502                           ; 4 bytes @ 0x43
  4503  0163                     	ds	4
  4504  0167                     ?_scaleA10kPot:	
  4505  0167                     ?_scaleiA10kPot:	
  4506                           ; 2 bytes @ 0x47
  4507                           
  4508  0167                     ?_scaleA100kPot:	
  4509                           ; 2 bytes @ 0x47
  4510                           
  4511  0167                     scaleA100kPot@input:	
  4512                           ; 2 bytes @ 0x47
  4513                           
  4514  0167                     scaleA10kPot@input:	
  4515                           ; 3 bytes @ 0x47
  4516                           
  4517  0167                     scaleiA10kPot@input:	
  4518                           ; 3 bytes @ 0x47
  4519                           
  4520                           
  4521                           ; 3 bytes @ 0x47
  4522  0167                     	ds	3
  4523                           
  4524                           	psect	cstackBANK1
  4525  00A0                     __pcstackBANK1:	
  4526  00A0                     ?___ftge:	
  4527  00A0                     ?_set_leds_top:	
  4528                           ; 1 bit 
  4529                           
  4530  00A0                     ?_USARTInit:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  00A0                     ??_ConfigureOscillator:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  00A0                     ??_InitApp:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  00A0                     ??_InitializeTaps:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  00A0                     ??_init_adc:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  00A0                     ??_init_pwm:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  00A0                     ??_init_timer2:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  00A0                     ??_init_timer0:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  00A0                     ?_set_leds_bottom:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  00A0                     ?_setLongBypassState:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  00A0                     ?_setLongTapState:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  00A0                     ?_updateSwitchBypassState:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  00A0                     ?_getModulationSubdivision:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  00A0                     ?_adc_convert:	
  4570                           ; 2 bytes @ 0x0
  4571                           
  4572  00A0                     ?_FLASH_ReadWord:	
  4573                           ; 2 bytes @ 0x0
  4574                           
  4575  00A0                     ?_getSwitchBypassState:	
  4576                           ; 2 bytes @ 0x0
  4577                           
  4578  00A0                     ?___awdiv:	
  4579                           ; 2 bytes @ 0x0
  4580                           
  4581  00A0                     ?___ftpack:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  00A0                     ?_frexp:	
  4585                           ; 3 bytes @ 0x0
  4586                           
  4587  00A0                     ?___lmul:	
  4588                           ; 3 bytes @ 0x0
  4589                           
  4590  00A0                     ?___aldiv:	
  4591                           ; 4 bytes @ 0x0
  4592                           
  4593  00A0                     FLASH_ReadWord@flashAddr:	
  4594                           ; 4 bytes @ 0x0
  4595                           
  4596  00A0                     set_leds_top@x:	
  4597                           ; 2 bytes @ 0x0
  4598                           
  4599  00A0                     set_leds_bottom@x:	
  4600                           ; 2 bytes @ 0x0
  4601                           
  4602  00A0                     updateSwitchBypassState@state:	
  4603                           ; 2 bytes @ 0x0
  4604                           
  4605  00A0                     setLongBypassState@f_state:	
  4606                           ; 2 bytes @ 0x0
  4607                           
  4608  00A0                     setLongTapState@f_state:	
  4609                           ; 2 bytes @ 0x0
  4610                           
  4611  00A0                     USARTInit@baud_rate:	
  4612                           ; 2 bytes @ 0x0
  4613                           
  4614  00A0                     ___awdiv@divisor:	
  4615                           ; 2 bytes @ 0x0
  4616                           
  4617  00A0                     ___ftpack@arg:	
  4618                           ; 2 bytes @ 0x0
  4619                           
  4620  00A0                     ___ftge@ff1:	
  4621                           ; 3 bytes @ 0x0
  4622                           
  4623  00A0                     frexp@value:	
  4624                           ; 3 bytes @ 0x0
  4625                           
  4626  00A0                     ___lmul@multiplier:	
  4627                           ; 3 bytes @ 0x0
  4628                           
  4629  00A0                     ___aldiv@divisor:	
  4630                           ; 4 bytes @ 0x0
  4631                           
  4632                           
  4633                           ; 4 bytes @ 0x0
  4634  00A0                     	ds	1
  4635  00A1                     InitializeTaps@itap:	
  4636                           
  4637                           ; 2 bytes @ 0x1
  4638  00A1                     	ds	1
  4639  00A2                     ??_getModulationSubdivision:	
  4640  00A2                     ??_USARTInit:	
  4641                           ; 1 bytes @ 0x2
  4642                           
  4643  00A2                     ??_adc_convert:	
  4644                           ; 1 bytes @ 0x2
  4645                           
  4646  00A2                     ??_FLASH_ReadWord:	
  4647                           ; 1 bytes @ 0x2
  4648                           
  4649  00A2                     ??_set_leds_bottom:	
  4650                           ; 1 bytes @ 0x2
  4651                           
  4652  00A2                     ??_setLongBypassState:	
  4653                           ; 1 bytes @ 0x2
  4654                           
  4655  00A2                     ??_setLongTapState:	
  4656                           ; 1 bytes @ 0x2
  4657                           
  4658  00A2                     ??_updateSwitchBypassState:	
  4659                           ; 1 bytes @ 0x2
  4660                           
  4661  00A2                     ??_getSwitchBypassState:	
  4662                           ; 1 bytes @ 0x2
  4663                           
  4664  00A2                     FLASH_ReadWord@GIEBitValue:	
  4665                           ; 1 bytes @ 0x2
  4666                           
  4667  00A2                     set_leds_top@ledState:	
  4668                           ; 1 bytes @ 0x2
  4669                           
  4670  00A2                     ___awdiv@dividend:	
  4671                           ; 2 bytes @ 0x2
  4672                           
  4673                           
  4674                           ; 2 bytes @ 0x2
  4675  00A2                     	ds	1
  4676  00A3                     adc_convert@channel:	
  4677  00A3                     ___ftpack@exp:	
  4678                           ; 1 bytes @ 0x3
  4679                           
  4680  00A3                     frexp@eptr:	
  4681                           ; 1 bytes @ 0x3
  4682                           
  4683  00A3                     ___ftge@ff2:	
  4684                           ; 1 bytes @ 0x3
  4685                           
  4686                           
  4687                           ; 3 bytes @ 0x3
  4688  00A3                     	ds	1
  4689  00A4                     ??_set_leds_top:	
  4690  00A4                     ??_ReadSavedSettings:	
  4691                           ; 1 bytes @ 0x4
  4692                           
  4693  00A4                     ??_resetRingLEDs:	
  4694                           ; 1 bytes @ 0x4
  4695                           
  4696  00A4                     ??_setPresetDisplay:	
  4697                           ; 1 bytes @ 0x4
  4698                           
  4699  00A4                     ??_setExpressionDisplay:	
  4700                           ; 1 bytes @ 0x4
  4701                           
  4702  00A4                     ??_frexp:	
  4703                           ; 1 bytes @ 0x4
  4704                           
  4705  00A4                     ??___awdiv:	
  4706                           ; 1 bytes @ 0x4
  4707                           
  4708  00A4                     ___ftpack@sign:	
  4709                           ; 1 bytes @ 0x4
  4710                           
  4711  00A4                     ___lmul@multiplicand:	
  4712                           ; 1 bytes @ 0x4
  4713                           
  4714  00A4                     ___aldiv@dividend:	
  4715                           ; 4 bytes @ 0x4
  4716                           
  4717                           
  4718                           ; 4 bytes @ 0x4
  4719  00A4                     	ds	1
  4720  00A5                     ??___ftpack:	
  4721  00A5                     ___awdiv@counter:	
  4722                           ; 1 bytes @ 0x5
  4723                           
  4724                           
  4725                           ; 1 bytes @ 0x5
  4726  00A5                     	ds	1
  4727  00A6                     ??___ftge:	
  4728  00A6                     setPresetDisplay@ledChannel:	
  4729                           ; 1 bytes @ 0x6
  4730                           
  4731  00A6                     setExpressionDisplay@ledChannel:	
  4732                           ; 1 bytes @ 0x6
  4733                           
  4734  00A6                     ___awdiv@sign:	
  4735                           ; 1 bytes @ 0x6
  4736                           
  4737                           
  4738                           ; 1 bytes @ 0x6
  4739  00A6                     	ds	1
  4740  00A7                     ??_update_mode:	
  4741  00A7                     ??_update_selectMode:	
  4742                           ; 1 bytes @ 0x7
  4743                           
  4744  00A7                     ??_setPedalMode:	
  4745                           ; 1 bytes @ 0x7
  4746                           
  4747  00A7                     ___awdiv@quotient:	
  4748                           ; 1 bytes @ 0x7
  4749                           
  4750                           
  4751                           ; 2 bytes @ 0x7
  4752  00A7                     	ds	1
  4753  00A8                     ??___lmul:	
  4754  00A8                     ??___aldiv:	
  4755                           ; 1 bytes @ 0x8
  4756                           
  4757  00A8                     ?___awtoft:	
  4758                           ; 1 bytes @ 0x8
  4759                           
  4760  00A8                     ?___lltoft:	
  4761                           ; 3 bytes @ 0x8
  4762                           
  4763  00A8                     ___awtoft@c:	
  4764                           ; 3 bytes @ 0x8
  4765                           
  4766  00A8                     ___lmul@product:	
  4767                           ; 2 bytes @ 0x8
  4768                           
  4769  00A8                     ___lltoft@c:	
  4770                           ; 4 bytes @ 0x8
  4771                           
  4772                           
  4773                           ; 4 bytes @ 0x8
  4774  00A8                     	ds	1
  4775  00A9                     ___aldiv@counter:	
  4776                           
  4777                           ; 1 bytes @ 0x9
  4778  00A9                     	ds	1
  4779  00AA                     ___aldiv@sign:	
  4780                           
  4781                           ; 1 bytes @ 0xA
  4782  00AA                     	ds	1
  4783  00AB                     ??___awtoft:	
  4784  00AB                     ___aldiv@quotient:	
  4785                           ; 1 bytes @ 0xB
  4786                           
  4787                           
  4788                           ; 4 bytes @ 0xB
  4789  00AB                     	ds	1
  4790  00AC                     ?_wait_ms:	
  4791  00AC                     ??___lltoft:	
  4792                           ; 1 bytes @ 0xC
  4793                           
  4794  00AC                     wait_ms@timeSec:	
  4795                           ; 1 bytes @ 0xC
  4796                           
  4797                           
  4798                           ; 2 bytes @ 0xC
  4799  00AC                     	ds	1
  4800  00AD                     ___awtoft@sign:	
  4801  00AD                     ___lltoft@exp:	
  4802                           ; 1 bytes @ 0xD
  4803                           
  4804                           
  4805                           ; 1 bytes @ 0xD
  4806  00AD                     	ds	1
  4807  00AE                     ??_wait_ms:	
  4808  00AE                     ?___ftmul:	
  4809                           ; 1 bytes @ 0xE
  4810                           
  4811  00AE                     ___ftmul@f1:	
  4812                           ; 3 bytes @ 0xE
  4813                           
  4814  00AE                     wait_ms@timemsl:	
  4815                           ; 3 bytes @ 0xE
  4816                           
  4817                           
  4818                           ; 4 bytes @ 0xE
  4819  00AE                     	ds	3
  4820  00B1                     ___ftmul@f2:	
  4821                           
  4822                           ; 3 bytes @ 0x11
  4823  00B1                     	ds	1
  4824  00B2                     ??_read_bottom_tactile:	
  4825  00B2                     ??_read_top_tactile:	
  4826                           ; 1 bytes @ 0x12
  4827                           
  4828  00B2                     ??_solidring_tactiles:	
  4829                           ; 1 bytes @ 0x12
  4830                           
  4831  00B2                     ??_ring_tactiles:	
  4832                           ; 1 bytes @ 0x12
  4833                           
  4834  00B2                     ?_setSwitchBypassRelays:	
  4835                           ; 1 bytes @ 0x12
  4836                           
  4837  00B2                     setSwitchBypassRelays@f_state:	
  4838                           ; 1 bytes @ 0x12
  4839                           
  4840                           
  4841                           ; 2 bytes @ 0x12
  4842  00B2                     	ds	1
  4843  00B3                     ring_tactiles@iLed:	
  4844                           
  4845                           ; 2 bytes @ 0x13
  4846  00B3                     	ds	1
  4847  00B4                     ??_setSwitchBypassRelays:	
  4848  00B4                     ??___ftmul:	
  4849                           ; 1 bytes @ 0x14
  4850                           
  4851  00B4                     solidring_tactiles@ring_delay:	
  4852                           ; 1 bytes @ 0x14
  4853                           
  4854                           
  4855                           ; 1 bytes @ 0x14
  4856  00B4                     	ds	1
  4857  00B5                     ring_tactiles@iLed_1533:	
  4858                           
  4859                           ; 2 bytes @ 0x15
  4860  00B5                     	ds	1
  4861  00B6                     ?_setSwitchBypassState:	
  4862  00B6                     setSwitchBypassState@f_state:	
  4863                           ; 1 bytes @ 0x16
  4864                           
  4865                           
  4866                           ; 2 bytes @ 0x16
  4867  00B6                     	ds	1
  4868  00B7                     ??_showSave:	
  4869                           
  4870                           ; 1 bytes @ 0x17
  4871  00B7                     	ds	1
  4872  00B8                     ??_setSwitchBypassState:	
  4873  00B8                     ?_setDoublePressState:	
  4874                           ; 1 bytes @ 0x18
  4875                           
  4876  00B8                     ___ftmul@exp:	
  4877                           ; 1 bytes @ 0x18
  4878                           
  4879  00B8                     setDoublePressState@f_state:	
  4880                           ; 1 bytes @ 0x18
  4881                           
  4882                           
  4883                           ; 2 bytes @ 0x18
  4884  00B8                     	ds	1
  4885  00B9                     ___ftmul@f3_as_product:	
  4886                           
  4887                           ; 3 bytes @ 0x19
  4888  00B9                     	ds	1
  4889  00BA                     ??_initSwitchBypass:	
  4890  00BA                     ??_setDoublePressState:	
  4891                           ; 1 bytes @ 0x1A
  4892                           
  4893  00BA                     initSwitchBypass@initState:	
  4894                           ; 1 bytes @ 0x1A
  4895                           
  4896                           
  4897                           ; 2 bytes @ 0x1A
  4898  00BA                     	ds	2
  4899  00BC                     ??_updateSwitchBypass:	
  4900  00BC                     ??_updateSwitchTap:	
  4901                           ; 1 bytes @ 0x1C
  4902                           
  4903  00BC                     ___ftmul@cntr:	
  4904                           ; 1 bytes @ 0x1C
  4905                           
  4906                           
  4907                           ; 1 bytes @ 0x1C
  4908  00BC                     	ds	1
  4909  00BD                     ___ftmul@sign:	
  4910                           
  4911                           ; 1 bytes @ 0x1D
  4912  00BD                     	ds	1
  4913  00BE                     ?___ftneg:	
  4914  00BE                     ___ftneg@f1:	
  4915                           ; 3 bytes @ 0x1E
  4916                           
  4917                           
  4918                           ; 3 bytes @ 0x1E
  4919  00BE                     	ds	3
  4920  00C1                     ??___ftneg:	
  4921  00C1                     ?___ftadd:	
  4922                           ; 1 bytes @ 0x21
  4923                           
  4924  00C1                     ___ftadd@f1:	
  4925                           ; 3 bytes @ 0x21
  4926                           
  4927                           
  4928                           ; 3 bytes @ 0x21
  4929  00C1                     	ds	1
  4930  00C2                     updateSwitchTap@tapCntDivisor:	
  4931                           
  4932                           ; 2 bytes @ 0x22
  4933  00C2                     	ds	2
  4934  00C4                     updateSwitchTap@iCnt:	
  4935  00C4                     ___ftadd@f2:	
  4936                           ; 1 bytes @ 0x24
  4937                           
  4938                           
  4939                           ; 3 bytes @ 0x24
  4940  00C4                     	ds	3
  4941  00C7                     ??___ftadd:	
  4942                           
  4943                           ; 1 bytes @ 0x27
  4944  00C7                     	ds	4
  4945  00CB                     ___ftadd@sign:	
  4946                           
  4947                           ; 1 bytes @ 0x2B
  4948  00CB                     	ds	1
  4949  00CC                     ___ftadd@exp2:	
  4950                           
  4951                           ; 1 bytes @ 0x2C
  4952  00CC                     	ds	1
  4953  00CD                     ___ftadd@exp1:	
  4954                           
  4955                           ; 1 bytes @ 0x2D
  4956  00CD                     	ds	1
  4957  00CE                     ?___ftdiv:	
  4958  00CE                     ___ftdiv@f2:	
  4959                           ; 3 bytes @ 0x2E
  4960                           
  4961                           
  4962                           ; 3 bytes @ 0x2E
  4963  00CE                     	ds	3
  4964  00D1                     ___ftdiv@f1:	
  4965                           
  4966                           ; 3 bytes @ 0x31
  4967  00D1                     	ds	3
  4968  00D4                     ??___ftdiv:	
  4969                           
  4970                           ; 1 bytes @ 0x34
  4971  00D4                     	ds	4
  4972  00D8                     ___ftdiv@cntr:	
  4973                           
  4974                           ; 1 bytes @ 0x38
  4975  00D8                     	ds	1
  4976  00D9                     ___ftdiv@f3:	
  4977                           
  4978                           ; 3 bytes @ 0x39
  4979  00D9                     	ds	3
  4980  00DC                     ___ftdiv@exp:	
  4981                           
  4982                           ; 1 bytes @ 0x3C
  4983  00DC                     	ds	1
  4984  00DD                     ___ftdiv@sign:	
  4985                           
  4986                           ; 1 bytes @ 0x3D
  4987  00DD                     	ds	1
  4988  00DE                     ?_map:	
  4989  00DE                     map@x:	
  4990                           ; 3 bytes @ 0x3E
  4991                           
  4992                           
  4993                           ; 3 bytes @ 0x3E
  4994  00DE                     	ds	3
  4995  00E1                     map@in_min:	
  4996                           
  4997                           ; 3 bytes @ 0x41
  4998  00E1                     	ds	3
  4999  00E4                     map@in_max:	
  5000                           
  5001                           ; 3 bytes @ 0x44
  5002  00E4                     	ds	3
  5003  00E7                     map@out_min:	
  5004                           
  5005                           ; 3 bytes @ 0x47
  5006  00E7                     	ds	3
  5007  00EA                     map@out_max:	
  5008                           
  5009                           ; 3 bytes @ 0x4A
  5010  00EA                     	ds	3
  5011  00ED                     ??_map:	
  5012  00ED                     _map$2835:	
  5013                           ; 1 bytes @ 0x4D
  5014                           
  5015                           
  5016                           ; 3 bytes @ 0x4D
  5017  00ED                     	ds	3
  5018  00F0                     ??_scaleA10kPot:	
  5019  00F0                     ??_scaleiA10kPot:	
  5020                           ; 1 bytes @ 0x50
  5021                           
  5022  00F0                     ??_scaleA100kPot:	
  5023                           ; 1 bytes @ 0x50
  5024                           
  5025  00F0                     ??_modTri:	
  5026                           ; 1 bytes @ 0x50
  5027                           
  5028  00F0                     ??_modSquare:	
  5029                           ; 1 bytes @ 0x50
  5030                           
  5031  00F0                     ??_modSaw:	
  5032                           ; 1 bytes @ 0x50
  5033                           
  5034  00F0                     ??_eval_poly:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??___wmul:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040  00F0                     ??___ftsub:	
  5041                           ; 1 bytes @ 0x50
  5042                           
  5043                           
  5044                           	psect	cstackCOMMON
  5045  0070                     __pcstackCOMMON:	
  5046                           ; 1 bytes @ 0x50
  5047                           
  5048  0070                     ?_calcSinArray:	
  5049  0070                     ?_ConfigureOscillator:	
  5050                           ; 1 bytes @ 0x0
  5051                           
  5052  0070                     ?_InitApp:	
  5053                           ; 1 bytes @ 0x0
  5054                           
  5055  0070                     ?_InitializeTaps:	
  5056                           ; 1 bytes @ 0x0
  5057                           
  5058  0070                     ?_initSwitchBypass:	
  5059                           ; 1 bytes @ 0x0
  5060                           
  5061  0070                     ?_ReadSavedSettings:	
  5062                           ; 1 bytes @ 0x0
  5063                           
  5064  0070                     ?_updateModulationArray:	
  5065                           ; 1 bytes @ 0x0
  5066                           
  5067  0070                     ?_update_mode:	
  5068                           ; 1 bytes @ 0x0
  5069                           
  5070  0070                     ?_update_selectMode:	
  5071                           ; 1 bytes @ 0x0
  5072                           
  5073  0070                     ?_updateSwitchBypass:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_updateSwitchTap:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_read_bottom_tactile:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_read_top_tactile:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_getModulationDelayTime:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_init_adc:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_init_pwm:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_init_timer2:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_init_timer0:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_solidring_tactiles:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_ring_tactiles:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_resetRingLEDs:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_setPedalMode:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_setPresetDisplay:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_setExpressionDisplay:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_isr:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_main:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_showSave:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?i1_set_leds_top:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?i1_getModulationSubdivision:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?i1___awdiv:	
  5134                           ; 2 bytes @ 0x0
  5135                           
  5136  0070                     ?i1___lmul:	
  5137                           ; 2 bytes @ 0x0
  5138                           
  5139  0070                     i1set_leds_top@x:	
  5140                           ; 4 bytes @ 0x0
  5141                           
  5142  0070                     i1___awdiv@divisor:	
  5143                           ; 2 bytes @ 0x0
  5144                           
  5145  0070                     i1___lmul@multiplier:	
  5146                           ; 2 bytes @ 0x0
  5147                           
  5148                           
  5149                           ; 4 bytes @ 0x0
  5150  0070                     	ds	2
  5151  0072                     ??i1_getModulationSubdivision:	
  5152  0072                     i1set_leds_top@ledState:	
  5153                           ; 1 bytes @ 0x2
  5154                           
  5155  0072                     i1___awdiv@dividend:	
  5156                           ; 2 bytes @ 0x2
  5157                           
  5158                           
  5159                           ; 2 bytes @ 0x2
  5160  0072                     	ds	2
  5161  0074                     ??i1_set_leds_top:	
  5162  0074                     ??i1___awdiv:	
  5163                           ; 1 bytes @ 0x4
  5164                           
  5165  0074                     i1___lmul@multiplicand:	
  5166                           ; 1 bytes @ 0x4
  5167                           
  5168                           
  5169                           ; 4 bytes @ 0x4
  5170  0074                     	ds	1
  5171  0075                     i1___awdiv@counter:	
  5172                           
  5173                           ; 1 bytes @ 0x5
  5174  0075                     	ds	1
  5175  0076                     i1___awdiv@sign:	
  5176                           
  5177                           ; 1 bytes @ 0x6
  5178  0076                     	ds	1
  5179  0077                     i1___awdiv@quotient:	
  5180                           
  5181                           ; 2 bytes @ 0x7
  5182  0077                     	ds	1
  5183  0078                     ??i1___lmul:	
  5184  0078                     i1___lmul@product:	
  5185                           ; 1 bytes @ 0x8
  5186                           
  5187                           
  5188                           ; 4 bytes @ 0x8
  5189  0078                     	ds	4
  5190  007C                     ??i1___aldiv:	
  5191                           
  5192                           ; 1 bytes @ 0xC
  5193  007C                     	ds	1
  5194                           
  5195                           	psect	cstackBANK0
  5196  0020                     __pcstackBANK0:	
  5197  0020                     ?i1___aldiv:	
  5198  0020                     i1___aldiv@divisor:	
  5199                           ; 4 bytes @ 0x0
  5200                           
  5201                           
  5202                           ; 4 bytes @ 0x0
  5203  0020                     	ds	4
  5204  0024                     i1___aldiv@dividend:	
  5205                           
  5206                           ; 4 bytes @ 0x4
  5207  0024                     	ds	4
  5208  0028                     i1___aldiv@counter:	
  5209                           
  5210                           ; 1 bytes @ 0x8
  5211  0028                     	ds	1
  5212  0029                     i1___aldiv@sign:	
  5213                           
  5214                           ; 1 bytes @ 0x9
  5215  0029                     	ds	1
  5216  002A                     i1___aldiv@quotient:	
  5217                           
  5218                           ; 4 bytes @ 0xA
  5219  002A                     	ds	4
  5220  002E                     ?_modulation:	
  5221  002E                     modulation@x:	
  5222                           ; 4 bytes @ 0xE
  5223                           
  5224                           
  5225                           ; 4 bytes @ 0xE
  5226  002E                     	ds	4
  5227  0032                     modulation@y:	
  5228                           
  5229                           ; 4 bytes @ 0x12
  5230  0032                     	ds	4
  5231  0036                     ??_modulation:	
  5232                           
  5233                           ; 1 bytes @ 0x16
  5234  0036                     	ds	4
  5235  003A                     ??_isr:	
  5236                           
  5237                           ; 1 bytes @ 0x1A
  5238  003A                     	ds	6
  5239  0040                     isr@subDiv:	
  5240                           
  5241                           ; 1 bytes @ 0x20
  5242  0040                     	ds	1
  5243  0041                     isr@tmpModDelay:	
  5244                           
  5245                           ; 2 bytes @ 0x21
  5246  0041                     	ds	2
  5247                           
  5248                           	psect	maintext
  5249  033A                     __pmaintext:	
  5250 ;;
  5251 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5252 ;;
  5253 ;; *************** function _main *****************
  5254 ;; Defined at:
  5255 ;;		line 68 in file "main.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : B1F/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5272 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5273 ;;Total ram usage:       14 bytes
  5274 ;; Hardware stack levels required when called:    9
  5275 ;; This function calls:
  5276 ;;		_ConfigureOscillator
  5277 ;;		_InitApp
  5278 ;;		_InitializeTaps
  5279 ;;		_ReadSavedSettings
  5280 ;;		_USARTInit
  5281 ;;		___awtoft
  5282 ;;		___fttol
  5283 ;;		_adc_convert
  5284 ;;		_calcSinArray
  5285 ;;		_getModulationDelayTime
  5286 ;;		_initSwitchBypass
  5287 ;;		_map
  5288 ;;		_read_bottom_tactile
  5289 ;;		_read_top_tactile
  5290 ;;		_scaleA100kPot
  5291 ;;		_scaleA10kPot
  5292 ;;		_scaleiA10kPot
  5293 ;;		_set_subdivision
  5294 ;;		_updateModulationArray
  5295 ;;		_updateSwitchBypass
  5296 ;;		_updateSwitchTap
  5297 ;;		_update_mode
  5298 ;;		_update_selectMode
  5299 ;; This function is called by:
  5300 ;;		Startup code after reset
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _main
  5306  033A                     _main:	
  5307                           
  5308                           ;main.c: 70: calcSinArray();
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5312  033A  31A7  277F  3183   	fcall	_calcSinArray
  5313                           
  5314                           ;main.c: 82: USARTInit(31250);
  5315  033D  3012               	movlw	18
  5316  033E  0021               	movlb	1	; select bank1
  5317  033F  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5318  0340  307A               	movlw	122
  5319  0341  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5320  0342  3198  2004  3183   	fcall	_USARTInit
  5321                           
  5322                           ;main.c: 83: ConfigureOscillator();
  5323  0345  31AD  2589  3183   	fcall	_ConfigureOscillator
  5324                           
  5325                           ;main.c: 84: InitApp();
  5326  0348  31AF  27A0  3183   	fcall	_InitApp
  5327                           
  5328                           ;main.c: 86: PORTEbits.RE0 = 1;
  5329  034B  0020               	movlb	0	; select bank0
  5330  034C  1410               	bsf	16,0	;volatile
  5331                           
  5332                           ;main.c: 87: PORTEbits.RE1 = 1;
  5333  034D  1490               	bsf	16,1	;volatile
  5334                           
  5335                           ;main.c: 88: PORTDbits.RD6 = 1;
  5336  034E  170F               	bsf	15,6	;volatile
  5337                           
  5338                           ;main.c: 89: PORTDbits.RD5 = 1;
  5339  034F  168F               	bsf	15,5	;volatile
  5340                           
  5341                           ;main.c: 90: PORTCbits.RC0 = 1;
  5342  0350  140E               	bsf	14,0	;volatile
  5343                           
  5344                           ;main.c: 91: PORTDbits.RD7 = 1;
  5345  0351  178F               	bsf	15,7	;volatile
  5346                           
  5347                           ;main.c: 93: InitializeTaps();
  5348  0352  31AE  26F6  3183   	fcall	_InitializeTaps
  5349                           
  5350                           ;main.c: 94: initSwitchBypass();
  5351  0355  31AD  25C8  3183   	fcall	_initSwitchBypass
  5352                           
  5353                           ;main.c: 97: ReadSavedSettings();
  5354  0358  31A7  2709  3183   	fcall	_ReadSavedSettings
  5355  035B                     L1:	
  5356                           
  5357                           ;main.c: 98: updateModulationArray();
  5358  035B  318D  25DD  3183   	fcall	_updateModulationArray
  5359  035E                     l9226:	
  5360                           ;main.c: 99: while (1) {
  5361                           
  5362                           
  5363                           ;main.c: 102: update_mode();
  5364  035E  31A0  20BA  3183   	fcall	_update_mode
  5365                           
  5366                           ;main.c: 103: update_selectMode();
  5367  0361  31A5  25D9  3183   	fcall	_update_selectMode
  5368                           
  5369                           ;main.c: 106: updateSwitchBypass();
  5370  0364  3192  222C  3183   	fcall	_updateSwitchBypass
  5371                           
  5372                           ;main.c: 107: if (presetSaveMode != 1) {
  5373  0367  0020               	movlb	0	; select bank0
  5374  0368  0351               	decf	_presetSaveMode,w
  5375  0369  1903               	btfsc	3,2
  5376  036A  2B6E               	goto	l9236
  5377                           
  5378                           ;main.c: 108: updateSwitchTap();
  5379  036B  3189  21FE  3183   	fcall	_updateSwitchTap
  5380  036E                     l9236:	
  5381                           
  5382                           ;main.c: 109: }
  5383                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5384  036E  0020               	movlb	0	; select bank0
  5385  036F  0351               	decf	_presetSaveMode,w
  5386  0370  1903               	btfsc	3,2
  5387  0371  2B7D               	goto	l9242
  5388  0372  0850               	movf	_mode2_state,w
  5389  0373  0023               	movlb	3	; select bank3
  5390  0374  0664               	xorwf	_presetModeCnst^(0+384),w
  5391  0375  1903               	skipnz
  5392  0376  2B7D               	goto	l9242
  5393                           
  5394                           ;main.c: 112: read_bottom_tactile();
  5395  0377  31A3  23B0  3183   	fcall	_read_bottom_tactile
  5396                           
  5397                           ;main.c: 113: read_top_tactile();
  5398  037A  31A4  2445  3183   	fcall	_read_top_tactile
  5399  037D                     l9242:	
  5400                           
  5401                           ;main.c: 114: }
  5402                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5403  037D  3000               	movlw	0
  5404  037E  31AD  25E8  3183   	fcall	_adc_convert
  5405  0381  0021               	movlb	1	; select bank1
  5406  0382  0821               	movf	(?_adc_convert+1)^(0+128),w
  5407  0383  0023               	movlb	3	; select bank3
  5408  0384  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5409  0385  0021               	movlb	1	; select bank1
  5410  0386  0820               	movf	?_adc_convert^(0+128),w
  5411  0387  0023               	movlb	3	; select bank3
  5412  0388  00AC               	movwf	_knob_1_pos^(0+384)
  5413                           
  5414                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5415  0389  3001               	movlw	1
  5416  038A  31AD  25E8  3183   	fcall	_adc_convert
  5417  038D  0021               	movlb	1	; select bank1
  5418  038E  0821               	movf	(?_adc_convert+1)^(0+128),w
  5419  038F  0023               	movlb	3	; select bank3
  5420  0390  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5421  0391  0021               	movlb	1	; select bank1
  5422  0392  0820               	movf	?_adc_convert^(0+128),w
  5423  0393  0023               	movlb	3	; select bank3
  5424  0394  00AE               	movwf	_knob_2_pos^(0+384)
  5425                           
  5426                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5427  0395  3002               	movlw	2
  5428  0396  31AD  25E8  3183   	fcall	_adc_convert
  5429  0399  0021               	movlb	1	; select bank1
  5430  039A  0821               	movf	(?_adc_convert+1)^(0+128),w
  5431  039B  0023               	movlb	3	; select bank3
  5432  039C  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5433  039D  0021               	movlb	1	; select bank1
  5434  039E  0820               	movf	?_adc_convert^(0+128),w
  5435  039F  0023               	movlb	3	; select bank3
  5436  03A0  00B0               	movwf	_knob_3_pos^(0+384)
  5437                           
  5438                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5439  03A1  3003               	movlw	3
  5440  03A2  31AD  25E8  3183   	fcall	_adc_convert
  5441  03A5  0021               	movlb	1	; select bank1
  5442  03A6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5443  03A7  0023               	movlb	3	; select bank3
  5444  03A8  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5445  03A9  0021               	movlb	1	; select bank1
  5446  03AA  0820               	movf	?_adc_convert^(0+128),w
  5447  03AB  0023               	movlb	3	; select bank3
  5448  03AC  00B2               	movwf	_knob_4_pos^(0+384)
  5449                           
  5450                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5451  03AD  3004               	movlw	4
  5452  03AE  31AD  25E8  3183   	fcall	_adc_convert
  5453  03B1  0021               	movlb	1	; select bank1
  5454  03B2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5455  03B3  0023               	movlb	3	; select bank3
  5456  03B4  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5457  03B5  0021               	movlb	1	; select bank1
  5458  03B6  0820               	movf	?_adc_convert^(0+128),w
  5459  03B7  0023               	movlb	3	; select bank3
  5460  03B8  00B4               	movwf	_knob_5_pos^(0+384)
  5461                           
  5462                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5463  03B9  0950               	comf	_knob1_prev^(0+384),w	;volatile
  5464  03BA  0024               	movlb	4	; select bank4
  5465  03BB  00D3               	movwf	??_main^(0+512)
  5466  03BC  0023               	movlb	3	; select bank3
  5467  03BD  0951               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5468  03BE  0024               	movlb	4	; select bank4
  5469  03BF  00D4               	movwf	(??_main^(0+512)+1)
  5470  03C0  0AD3               	incf	??_main^(0+512),f
  5471  03C1  1903               	skipnz
  5472  03C2  0AD4               	incf	(??_main^(0+512)+1),f
  5473  03C3  0023               	movlb	3	; select bank3
  5474  03C4  082C               	movf	_knob_1_pos^(0+384),w
  5475  03C5  0024               	movlb	4	; select bank4
  5476  03C6  0753               	addwf	??_main^(0+512),w
  5477  03C7  00D5               	movwf	(??_main+2)^(0+512)
  5478  03C8  0023               	movlb	3	; select bank3
  5479  03C9  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5480  03CA  0024               	movlb	4	; select bank4
  5481  03CB  3D54               	addwfc	(??_main+1)^(0+512),w
  5482  03CC  00D6               	movwf	(??_main+3)^(0+512)
  5483  03CD  0856               	movf	(??_main+3)^(0+512),w
  5484  03CE  3A80               	xorlw	128
  5485  03CF  00D7               	movwf	(??_main+4)^(0+512)
  5486  03D0  3080               	movlw	128
  5487  03D1  0257               	subwf	(??_main+4)^(0+512),w
  5488  03D2  1D03               	skipz
  5489  03D3  2BD6               	goto	u10255
  5490  03D4  3004               	movlw	4
  5491  03D5  0255               	subwf	(??_main+2)^(0+512),w
  5492  03D6                     u10255:	
  5493  03D6  1803               	skipnc
  5494  03D7  2BF8               	goto	l9256
  5495  03D8  0023               	movlb	3	; select bank3
  5496  03D9  0950               	comf	_knob1_prev^(0+384),w	;volatile
  5497  03DA  0024               	movlb	4	; select bank4
  5498  03DB  00D3               	movwf	??_main^(0+512)
  5499  03DC  0023               	movlb	3	; select bank3
  5500  03DD  0951               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5501  03DE  0024               	movlb	4	; select bank4
  5502  03DF  00D4               	movwf	(??_main^(0+512)+1)
  5503  03E0  0AD3               	incf	??_main^(0+512),f
  5504  03E1  1903               	skipnz
  5505  03E2  0AD4               	incf	(??_main^(0+512)+1),f
  5506  03E3  0023               	movlb	3	; select bank3
  5507  03E4  082C               	movf	_knob_1_pos^(0+384),w
  5508  03E5  0024               	movlb	4	; select bank4
  5509  03E6  0753               	addwf	??_main^(0+512),w
  5510  03E7  00D5               	movwf	(??_main+2)^(0+512)
  5511  03E8  0023               	movlb	3	; select bank3
  5512  03E9  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5513  03EA  0024               	movlb	4	; select bank4
  5514  03EB  3D54               	addwfc	(??_main+1)^(0+512),w
  5515  03EC  00D6               	movwf	(??_main+3)^(0+512)
  5516  03ED  0856               	movf	(??_main+3)^(0+512),w
  5517  03EE  3A80               	xorlw	128
  5518  03EF  00D7               	movwf	(??_main+4)^(0+512)
  5519  03F0  307F               	movlw	127
  5520  03F1  0257               	subwf	(??_main+4)^(0+512),w
  5521  03F2  1D03               	skipz
  5522  03F3  2BF6               	goto	u10265
  5523  03F4  30FD               	movlw	253
  5524  03F5  0255               	subwf	(??_main+2)^(0+512),w
  5525  03F6                     u10265:	
  5526  03F6  1803               	skipnc
  5527  03F7  2C56               	goto	l9266
  5528  03F8                     l9256:	
  5529                           
  5530                           ;main.c: 126: knob1_prev = knob_1_pos;
  5531  03F8  0023               	movlb	3	; select bank3
  5532  03F9  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5533  03FA  00D1               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5534  03FB  082C               	movf	_knob_1_pos^(0+384),w
  5535  03FC  00D0               	movwf	_knob1_prev^(0+384)	;volatile
  5536                           
  5537                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5538  03FD  0851               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5539  03FE  0021               	movlb	1	; select bank1
  5540  03FF  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5541  0400  0023               	movlb	3	; select bank3
  5542  0401  0850               	movf	_knob1_prev^(0+384),w	;volatile
  5543  0402  0021               	movlb	1	; select bank1
  5544  0403  00A8               	movwf	___awtoft@c^(0+128)
  5545  0404  31A0  2000  3183   	fcall	___awtoft
  5546  0407  0021               	movlb	1	; select bank1
  5547  0408  0828               	movf	?___awtoft^(0+128),w
  5548  0409  0024               	movlb	4	; select bank4
  5549  040A  00D8               	movwf	_main$2832^(0+512)
  5550  040B  0021               	movlb	1	; select bank1
  5551  040C  0829               	movf	(?___awtoft+1)^(0+128),w
  5552  040D  0024               	movlb	4	; select bank4
  5553  040E  00D9               	movwf	(_main$2832+1)^(0+512)
  5554  040F  0021               	movlb	1	; select bank1
  5555  0410  082A               	movf	(?___awtoft+2)^(0+128),w
  5556  0411  0024               	movlb	4	; select bank4
  5557  0412  00DA               	movwf	(_main$2832+2)^(0+512)
  5558                           
  5559                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5560  0413  0858               	movf	_main$2832^(0+512),w
  5561  0414  0022               	movlb	2	; select bank2
  5562  0415  00E7               	movwf	scaleA10kPot@input^(0+256)
  5563  0416  0024               	movlb	4	; select bank4
  5564  0417  0859               	movf	(_main$2832+1)^(0+512),w
  5565  0418  0022               	movlb	2	; select bank2
  5566  0419  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5567  041A  0024               	movlb	4	; select bank4
  5568  041B  085A               	movf	(_main$2832+2)^(0+512),w
  5569  041C  0022               	movlb	2	; select bank2
  5570  041D  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5571  041E  319B  236E  3183   	fcall	_scaleA10kPot
  5572  0421  0022               	movlb	2	; select bank2
  5573  0422  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5574  0423  0026               	movlb	6	; select bank6
  5575  0424  0099               	movwf	25	;volatile
  5576  0425  0022               	movlb	2	; select bank2
  5577  0426  0867               	movf	?_scaleA10kPot^(0+256),w
  5578  0427  0026               	movlb	6	; select bank6
  5579  0428  0098               	movwf	24	;volatile
  5580                           
  5581                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5582  0429  0023               	movlb	3	; select bank3
  5583  042A  0851               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5584  042B  0021               	movlb	1	; select bank1
  5585  042C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5586  042D  0023               	movlb	3	; select bank3
  5587  042E  0850               	movf	_knob1_prev^(0+384),w	;volatile
  5588  042F  0021               	movlb	1	; select bank1
  5589  0430  00A8               	movwf	___awtoft@c^(0+128)
  5590  0431  31A0  2000  3183   	fcall	___awtoft
  5591  0434  0021               	movlb	1	; select bank1
  5592  0435  0828               	movf	?___awtoft^(0+128),w
  5593  0436  0024               	movlb	4	; select bank4
  5594  0437  00DB               	movwf	_main$2833^(0+512)
  5595  0438  0021               	movlb	1	; select bank1
  5596  0439  0829               	movf	(?___awtoft+1)^(0+128),w
  5597  043A  0024               	movlb	4	; select bank4
  5598  043B  00DC               	movwf	(_main$2833+1)^(0+512)
  5599  043C  0021               	movlb	1	; select bank1
  5600  043D  082A               	movf	(?___awtoft+2)^(0+128),w
  5601  043E  0024               	movlb	4	; select bank4
  5602  043F  00DD               	movwf	(_main$2833+2)^(0+512)
  5603                           
  5604                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5605  0440  085B               	movf	_main$2833^(0+512),w
  5606  0441  0022               	movlb	2	; select bank2
  5607  0442  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5608  0443  0024               	movlb	4	; select bank4
  5609  0444  085C               	movf	(_main$2833+1)^(0+512),w
  5610  0445  0022               	movlb	2	; select bank2
  5611  0446  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5612  0447  0024               	movlb	4	; select bank4
  5613  0448  085D               	movf	(_main$2833+2)^(0+512),w
  5614  0449  0022               	movlb	2	; select bank2
  5615  044A  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5616  044B  319D  25E6  3183   	fcall	_scaleiA10kPot
  5617  044E  0022               	movlb	2	; select bank2
  5618  044F  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5619  0450  0026               	movlb	6	; select bank6
  5620  0451  009D               	movwf	29	;volatile
  5621  0452  0022               	movlb	2	; select bank2
  5622  0453  0867               	movf	?_scaleiA10kPot^(0+256),w
  5623  0454  0026               	movlb	6	; select bank6
  5624  0455  009C               	movwf	28	;volatile
  5625  0456                     l9266:	
  5626                           
  5627                           ;main.c: 130: }
  5628                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5629  0456  0023               	movlb	3	; select bank3
  5630  0457  0952               	comf	_knob2_prev^(0+384),w	;volatile
  5631  0458  0024               	movlb	4	; select bank4
  5632  0459  00D3               	movwf	??_main^(0+512)
  5633  045A  0023               	movlb	3	; select bank3
  5634  045B  0953               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5635  045C  0024               	movlb	4	; select bank4
  5636  045D  00D4               	movwf	(??_main^(0+512)+1)
  5637  045E  0AD3               	incf	??_main^(0+512),f
  5638  045F  1903               	skipnz
  5639  0460  0AD4               	incf	(??_main^(0+512)+1),f
  5640  0461  0023               	movlb	3	; select bank3
  5641  0462  082E               	movf	_knob_2_pos^(0+384),w
  5642  0463  0024               	movlb	4	; select bank4
  5643  0464  0753               	addwf	??_main^(0+512),w
  5644  0465  00D5               	movwf	(??_main+2)^(0+512)
  5645  0466  0023               	movlb	3	; select bank3
  5646  0467  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5647  0468  0024               	movlb	4	; select bank4
  5648  0469  3D54               	addwfc	(??_main+1)^(0+512),w
  5649  046A  00D6               	movwf	(??_main+3)^(0+512)
  5650  046B  0856               	movf	(??_main+3)^(0+512),w
  5651  046C  3A80               	xorlw	128
  5652  046D  00D7               	movwf	(??_main+4)^(0+512)
  5653  046E  3080               	movlw	128
  5654  046F  0257               	subwf	(??_main+4)^(0+512),w
  5655  0470  1D03               	skipz
  5656  0471  2C74               	goto	u10275
  5657  0472  3004               	movlw	4
  5658  0473  0255               	subwf	(??_main+2)^(0+512),w
  5659  0474                     u10275:	
  5660  0474  1803               	skipnc
  5661  0475  2C96               	goto	l9270
  5662  0476  0023               	movlb	3	; select bank3
  5663  0477  0952               	comf	_knob2_prev^(0+384),w	;volatile
  5664  0478  0024               	movlb	4	; select bank4
  5665  0479  00D3               	movwf	??_main^(0+512)
  5666  047A  0023               	movlb	3	; select bank3
  5667  047B  0953               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5668  047C  0024               	movlb	4	; select bank4
  5669  047D  00D4               	movwf	(??_main^(0+512)+1)
  5670  047E  0AD3               	incf	??_main^(0+512),f
  5671  047F  1903               	skipnz
  5672  0480  0AD4               	incf	(??_main^(0+512)+1),f
  5673  0481  0023               	movlb	3	; select bank3
  5674  0482  082E               	movf	_knob_2_pos^(0+384),w
  5675  0483  0024               	movlb	4	; select bank4
  5676  0484  0753               	addwf	??_main^(0+512),w
  5677  0485  00D5               	movwf	(??_main+2)^(0+512)
  5678  0486  0023               	movlb	3	; select bank3
  5679  0487  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5680  0488  0024               	movlb	4	; select bank4
  5681  0489  3D54               	addwfc	(??_main+1)^(0+512),w
  5682  048A  00D6               	movwf	(??_main+3)^(0+512)
  5683  048B  0856               	movf	(??_main+3)^(0+512),w
  5684  048C  3A80               	xorlw	128
  5685  048D  00D7               	movwf	(??_main+4)^(0+512)
  5686  048E  307F               	movlw	127
  5687  048F  0257               	subwf	(??_main+4)^(0+512),w
  5688  0490  1D03               	skipz
  5689  0491  2C94               	goto	u10285
  5690  0492  30FD               	movlw	253
  5691  0493  0255               	subwf	(??_main+2)^(0+512),w
  5692  0494                     u10285:	
  5693  0494  1803               	skipnc
  5694  0495  2D0C               	goto	l9280
  5695  0496                     l9270:	
  5696                           
  5697                           ;main.c: 135: knob2_prev = knob_2_pos;
  5698  0496  0023               	movlb	3	; select bank3
  5699  0497  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5700  0498  00D3               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5701  0499  082E               	movf	_knob_2_pos^(0+384),w
  5702  049A  00D2               	movwf	_knob2_prev^(0+384)	;volatile
  5703                           
  5704                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5705  049B  0952               	comf	_knob2_prev^(0+384),w	;volatile
  5706  049C  0024               	movlb	4	; select bank4
  5707  049D  00D3               	movwf	??_main^(0+512)
  5708  049E  0023               	movlb	3	; select bank3
  5709  049F  0953               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5710  04A0  0024               	movlb	4	; select bank4
  5711  04A1  00D4               	movwf	(??_main^(0+512)+1)
  5712  04A2  0AD3               	incf	??_main^(0+512),f
  5713  04A3  1903               	skipnz
  5714  04A4  0AD4               	incf	(??_main^(0+512)+1),f
  5715  04A5  0853               	movf	??_main^(0+512),w
  5716  04A6  3EFF               	addlw	255
  5717  04A7  0021               	movlb	1	; select bank1
  5718  04A8  00A8               	movwf	___awtoft@c^(0+128)
  5719  04A9  3003               	movlw	3
  5720  04AA  0024               	movlb	4	; select bank4
  5721  04AB  3D54               	addwfc	(??_main+1)^(0+512),w
  5722  04AC  0021               	movlb	1	; select bank1
  5723  04AD  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5724  04AE  31A0  2000  3183   	fcall	___awtoft
  5725  04B1  0021               	movlb	1	; select bank1
  5726  04B2  0828               	movf	?___awtoft^(0+128),w
  5727  04B3  0024               	movlb	4	; select bank4
  5728  04B4  00DE               	movwf	_main$2834^(0+512)
  5729  04B5  0021               	movlb	1	; select bank1
  5730  04B6  0829               	movf	(?___awtoft+1)^(0+128),w
  5731  04B7  0024               	movlb	4	; select bank4
  5732  04B8  00DF               	movwf	(_main$2834+1)^(0+512)
  5733  04B9  0021               	movlb	1	; select bank1
  5734  04BA  082A               	movf	(?___awtoft+2)^(0+128),w
  5735  04BB  0024               	movlb	4	; select bank4
  5736  04BC  00E0               	movwf	(_main$2834+2)^(0+512)
  5737                           
  5738                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5739  04BD  085E               	movf	_main$2834^(0+512),w
  5740  04BE  0022               	movlb	2	; select bank2
  5741  04BF  00E7               	movwf	scaleA100kPot@input^(0+256)
  5742  04C0  0024               	movlb	4	; select bank4
  5743  04C1  085F               	movf	(_main$2834+1)^(0+512),w
  5744  04C2  0022               	movlb	2	; select bank2
  5745  04C3  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5746  04C4  0024               	movlb	4	; select bank4
  5747  04C5  0860               	movf	(_main$2834+2)^(0+512),w
  5748  04C6  0022               	movlb	2	; select bank2
  5749  04C7  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5750  04C8  3199  214B  3183   	fcall	_scaleA100kPot
  5751  04CB  0022               	movlb	2	; select bank2
  5752  04CC  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5753  04CD  0025               	movlb	5	; select bank5
  5754  04CE  0092               	movwf	18	;volatile
  5755  04CF  0022               	movlb	2	; select bank2
  5756  04D0  0867               	movf	?_scaleA100kPot^(0+256),w
  5757  04D1  0025               	movlb	5	; select bank5
  5758  04D2  0091               	movwf	17	;volatile
  5759                           
  5760                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5761  04D3  0023               	movlb	3	; select bank3
  5762  04D4  0952               	comf	_knob2_prev^(0+384),w	;volatile
  5763  04D5  0024               	movlb	4	; select bank4
  5764  04D6  00D3               	movwf	??_main^(0+512)
  5765  04D7  0023               	movlb	3	; select bank3
  5766  04D8  0953               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5767  04D9  0024               	movlb	4	; select bank4
  5768  04DA  00D4               	movwf	(??_main^(0+512)+1)
  5769  04DB  0AD3               	incf	??_main^(0+512),f
  5770  04DC  1903               	skipnz
  5771  04DD  0AD4               	incf	(??_main^(0+512)+1),f
  5772  04DE  0853               	movf	??_main^(0+512),w
  5773  04DF  3EFF               	addlw	255
  5774  04E0  0021               	movlb	1	; select bank1
  5775  04E1  00A8               	movwf	___awtoft@c^(0+128)
  5776  04E2  3003               	movlw	3
  5777  04E3  0024               	movlb	4	; select bank4
  5778  04E4  3D54               	addwfc	(??_main+1)^(0+512),w
  5779  04E5  0021               	movlb	1	; select bank1
  5780  04E6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5781  04E7  31A0  2000  3183   	fcall	___awtoft
  5782  04EA  0021               	movlb	1	; select bank1
  5783  04EB  0828               	movf	?___awtoft^(0+128),w
  5784  04EC  0024               	movlb	4	; select bank4
  5785  04ED  00DE               	movwf	_main$2834^(0+512)
  5786  04EE  0021               	movlb	1	; select bank1
  5787  04EF  0829               	movf	(?___awtoft+1)^(0+128),w
  5788  04F0  0024               	movlb	4	; select bank4
  5789  04F1  00DF               	movwf	(_main$2834+1)^(0+512)
  5790  04F2  0021               	movlb	1	; select bank1
  5791  04F3  082A               	movf	(?___awtoft+2)^(0+128),w
  5792  04F4  0024               	movlb	4	; select bank4
  5793  04F5  00E0               	movwf	(_main$2834+2)^(0+512)
  5794                           
  5795                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5796  04F6  085E               	movf	_main$2834^(0+512),w
  5797  04F7  0022               	movlb	2	; select bank2
  5798  04F8  00E7               	movwf	scaleA100kPot@input^(0+256)
  5799  04F9  0024               	movlb	4	; select bank4
  5800  04FA  085F               	movf	(_main$2834+1)^(0+512),w
  5801  04FB  0022               	movlb	2	; select bank2
  5802  04FC  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5803  04FD  0024               	movlb	4	; select bank4
  5804  04FE  0860               	movf	(_main$2834+2)^(0+512),w
  5805  04FF  0022               	movlb	2	; select bank2
  5806  0500  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5807  0501  3199  214B  3183   	fcall	_scaleA100kPot
  5808  0504  0022               	movlb	2	; select bank2
  5809  0505  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5810  0506  0025               	movlb	5	; select bank5
  5811  0507  0099               	movwf	25	;volatile
  5812  0508  0022               	movlb	2	; select bank2
  5813  0509  0867               	movf	?_scaleA100kPot^(0+256),w
  5814  050A  0025               	movlb	5	; select bank5
  5815  050B  0098               	movwf	24	;volatile
  5816  050C                     l9280:	
  5817                           
  5818                           ;main.c: 138: }
  5819                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5820  050C  0023               	movlb	3	; select bank3
  5821  050D  0954               	comf	_knob3_prev^(0+384),w	;volatile
  5822  050E  0024               	movlb	4	; select bank4
  5823  050F  00D3               	movwf	??_main^(0+512)
  5824  0510  0023               	movlb	3	; select bank3
  5825  0511  0955               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5826  0512  0024               	movlb	4	; select bank4
  5827  0513  00D4               	movwf	(??_main^(0+512)+1)
  5828  0514  0AD3               	incf	??_main^(0+512),f
  5829  0515  1903               	skipnz
  5830  0516  0AD4               	incf	(??_main^(0+512)+1),f
  5831  0517  0023               	movlb	3	; select bank3
  5832  0518  0830               	movf	_knob_3_pos^(0+384),w
  5833  0519  0024               	movlb	4	; select bank4
  5834  051A  0753               	addwf	??_main^(0+512),w
  5835  051B  00D5               	movwf	(??_main+2)^(0+512)
  5836  051C  0023               	movlb	3	; select bank3
  5837  051D  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5838  051E  0024               	movlb	4	; select bank4
  5839  051F  3D54               	addwfc	(??_main+1)^(0+512),w
  5840  0520  00D6               	movwf	(??_main+3)^(0+512)
  5841  0521  0856               	movf	(??_main+3)^(0+512),w
  5842  0522  3A80               	xorlw	128
  5843  0523  00D7               	movwf	(??_main+4)^(0+512)
  5844  0524  3080               	movlw	128
  5845  0525  0257               	subwf	(??_main+4)^(0+512),w
  5846  0526  1D03               	skipz
  5847  0527  2D2A               	goto	u10295
  5848  0528  3004               	movlw	4
  5849  0529  0255               	subwf	(??_main+2)^(0+512),w
  5850  052A                     u10295:	
  5851  052A  1803               	skipnc
  5852  052B  2D4C               	goto	l9284
  5853  052C  0023               	movlb	3	; select bank3
  5854  052D  0954               	comf	_knob3_prev^(0+384),w	;volatile
  5855  052E  0024               	movlb	4	; select bank4
  5856  052F  00D3               	movwf	??_main^(0+512)
  5857  0530  0023               	movlb	3	; select bank3
  5858  0531  0955               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5859  0532  0024               	movlb	4	; select bank4
  5860  0533  00D4               	movwf	(??_main^(0+512)+1)
  5861  0534  0AD3               	incf	??_main^(0+512),f
  5862  0535  1903               	skipnz
  5863  0536  0AD4               	incf	(??_main^(0+512)+1),f
  5864  0537  0023               	movlb	3	; select bank3
  5865  0538  0830               	movf	_knob_3_pos^(0+384),w
  5866  0539  0024               	movlb	4	; select bank4
  5867  053A  0753               	addwf	??_main^(0+512),w
  5868  053B  00D5               	movwf	(??_main+2)^(0+512)
  5869  053C  0023               	movlb	3	; select bank3
  5870  053D  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5871  053E  0024               	movlb	4	; select bank4
  5872  053F  3D54               	addwfc	(??_main+1)^(0+512),w
  5873  0540  00D6               	movwf	(??_main+3)^(0+512)
  5874  0541  0856               	movf	(??_main+3)^(0+512),w
  5875  0542  3A80               	xorlw	128
  5876  0543  00D7               	movwf	(??_main+4)^(0+512)
  5877  0544  307F               	movlw	127
  5878  0545  0257               	subwf	(??_main+4)^(0+512),w
  5879  0546  1D03               	skipz
  5880  0547  2D4A               	goto	u10305
  5881  0548  30FD               	movlw	253
  5882  0549  0255               	subwf	(??_main+2)^(0+512),w
  5883  054A                     u10305:	
  5884  054A  1803               	skipnc
  5885  054B  2DB8               	goto	l9296
  5886  054C                     l9284:	
  5887                           
  5888                           ;main.c: 149: knob3_prev = knob_3_pos;
  5889  054C  0023               	movlb	3	; select bank3
  5890  054D  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5891  054E  00D5               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5892  054F  0830               	movf	_knob_3_pos^(0+384),w
  5893  0550  00D4               	movwf	_knob3_prev^(0+384)	;volatile
  5894                           
  5895                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5896  0551  3080               	movlw	128
  5897  0552  0021               	movlb	1	; select bank1
  5898  0553  00EA               	movwf	map@out_max^(0+128)
  5899  0554  309D               	movlw	157
  5900  0555  00EB               	movwf	(map@out_max+1)^(0+128)
  5901  0556  3043               	movlw	67
  5902  0557  00EC               	movwf	(map@out_max+2)^(0+128)
  5903  0558  3000               	movlw	0
  5904  0559  00E7               	movwf	map@out_min^(0+128)
  5905  055A  3034               	movlw	52
  5906  055B  00E8               	movwf	(map@out_min+1)^(0+128)
  5907  055C  3042               	movlw	66
  5908  055D  00E9               	movwf	(map@out_min+2)^(0+128)
  5909  055E  30C0               	movlw	192
  5910  055F  00E4               	movwf	map@in_max^(0+128)
  5911  0560  307F               	movlw	127
  5912  0561  00E5               	movwf	(map@in_max+1)^(0+128)
  5913  0562  3044               	movlw	68
  5914  0563  00E6               	movwf	(map@in_max+2)^(0+128)
  5915  0564  3000               	movlw	0
  5916  0565  00E1               	movwf	map@in_min^(0+128)
  5917  0566  3000               	movlw	0
  5918  0567  00E2               	movwf	(map@in_min+1)^(0+128)
  5919  0568  3000               	movlw	0
  5920  0569  00E3               	movwf	(map@in_min+2)^(0+128)
  5921  056A  0023               	movlb	3	; select bank3
  5922  056B  0855               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5923  056C  0021               	movlb	1	; select bank1
  5924  056D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5925  056E  0023               	movlb	3	; select bank3
  5926  056F  0854               	movf	_knob3_prev^(0+384),w	;volatile
  5927  0570  0021               	movlb	1	; select bank1
  5928  0571  00A8               	movwf	___awtoft@c^(0+128)
  5929  0572  31A0  2000  3183   	fcall	___awtoft
  5930  0575  0021               	movlb	1	; select bank1
  5931  0576  0828               	movf	?___awtoft^(0+128),w
  5932  0577  00DE               	movwf	map@x^(0+128)
  5933  0578  0829               	movf	(?___awtoft+1)^(0+128),w
  5934  0579  00DF               	movwf	(map@x+1)^(0+128)
  5935  057A  082A               	movf	(?___awtoft+2)^(0+128),w
  5936  057B  00E0               	movwf	(map@x+2)^(0+128)
  5937  057C  319A  2257  3183   	fcall	_map
  5938  057F  0021               	movlb	1	; select bank1
  5939  0580  085E               	movf	?_map^(0+128),w
  5940  0581  0022               	movlb	2	; select bank2
  5941  0582  00A0               	movwf	___fttol@f1^(0+256)
  5942  0583  0021               	movlb	1	; select bank1
  5943  0584  085F               	movf	(?_map+1)^(0+128),w
  5944  0585  0022               	movlb	2	; select bank2
  5945  0586  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5946  0587  0021               	movlb	1	; select bank1
  5947  0588  0860               	movf	(?_map+2)^(0+128),w
  5948  0589  0022               	movlb	2	; select bank2
  5949  058A  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5950  058B  3199  21D0  3183   	fcall	___fttol
  5951  058E  0022               	movlb	2	; select bank2
  5952  058F  0821               	movf	(?___fttol^(0+256)+1),w
  5953  0590  0023               	movlb	3	; select bank3
  5954  0591  00DD               	movwf	(_symmetry+1)^(0+384)
  5955  0592  0022               	movlb	2	; select bank2
  5956  0593  0820               	movf	?___fttol^(0+256),w
  5957  0594  0023               	movlb	3	; select bank3
  5958  0595  00DC               	movwf	_symmetry^(0+384)
  5959                           
  5960                           ;main.c: 152: modulation_changed = 1;
  5961  0596  01C6               	clrf	_modulation_changed^(0+384)
  5962  0597  0AC6               	incf	_modulation_changed^(0+384),f
  5963                           
  5964                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5965  0598  085D               	movf	(_symmetry+1)^(0+384),w
  5966  0599  3A80               	xorlw	128
  5967  059A  0024               	movlb	4	; select bank4
  5968  059B  00D3               	movwf	??_main^(0+512)
  5969  059C  3080               	movlw	128
  5970  059D  0253               	subwf	??_main^(0+512),w
  5971  059E  1D03               	skipz
  5972  059F  2DA3               	goto	u10315
  5973  05A0  30AF               	movlw	175
  5974  05A1  0023               	movlb	3	; select bank3
  5975  05A2  025C               	subwf	_symmetry^(0+384),w
  5976  05A3                     u10315:	
  5977  05A3  1C03               	skipc
  5978  05A4  2DB6               	goto	l359
  5979  05A5  0023               	movlb	3	; select bank3
  5980  05A6  085D               	movf	(_symmetry+1)^(0+384),w
  5981  05A7  3A80               	xorlw	128
  5982  05A8  0024               	movlb	4	; select bank4
  5983  05A9  00D3               	movwf	??_main^(0+512)
  5984  05AA  3080               	movlw	128
  5985  05AB  0253               	subwf	??_main^(0+512),w
  5986  05AC  1D03               	skipz
  5987  05AD  2DB1               	goto	u10325
  5988  05AE  30B9               	movlw	185
  5989  05AF  0023               	movlb	3	; select bank3
  5990  05B0  025C               	subwf	_symmetry^(0+384),w
  5991  05B1                     u10325:	
  5992  05B1  1803               	skipnc
  5993  05B2  2DB6               	goto	l359
  5994                           
  5995                           ;main.c: 154: LATBbits.LATB1 = 1;
  5996  05B3  0022               	movlb	2	; select bank2
  5997  05B4  148D               	bsf	13,1	;volatile
  5998                           
  5999                           ;main.c: 155: } else {
  6000  05B5  2DB8               	goto	l9296
  6001  05B6                     l359:	
  6002                           
  6003                           ;main.c: 156: LATBbits.LATB1 = 0;
  6004  05B6  0022               	movlb	2	; select bank2
  6005  05B7  108D               	bcf	13,1	;volatile
  6006  05B8                     l9296:	
  6007                           
  6008                           ;main.c: 157: }
  6009                           ;main.c: 158: }
  6010                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6011  05B8  0023               	movlb	3	; select bank3
  6012  05B9  0956               	comf	_knob4_prev^(0+384),w	;volatile
  6013  05BA  0024               	movlb	4	; select bank4
  6014  05BB  00D3               	movwf	??_main^(0+512)
  6015  05BC  0023               	movlb	3	; select bank3
  6016  05BD  0957               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6017  05BE  0024               	movlb	4	; select bank4
  6018  05BF  00D4               	movwf	(??_main^(0+512)+1)
  6019  05C0  0AD3               	incf	??_main^(0+512),f
  6020  05C1  1903               	skipnz
  6021  05C2  0AD4               	incf	(??_main^(0+512)+1),f
  6022  05C3  0023               	movlb	3	; select bank3
  6023  05C4  0832               	movf	_knob_4_pos^(0+384),w
  6024  05C5  0024               	movlb	4	; select bank4
  6025  05C6  0753               	addwf	??_main^(0+512),w
  6026  05C7  00D5               	movwf	(??_main+2)^(0+512)
  6027  05C8  0023               	movlb	3	; select bank3
  6028  05C9  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6029  05CA  0024               	movlb	4	; select bank4
  6030  05CB  3D54               	addwfc	(??_main+1)^(0+512),w
  6031  05CC  00D6               	movwf	(??_main+3)^(0+512)
  6032  05CD  0856               	movf	(??_main+3)^(0+512),w
  6033  05CE  3A80               	xorlw	128
  6034  05CF  00D7               	movwf	(??_main+4)^(0+512)
  6035  05D0  3080               	movlw	128
  6036  05D1  0257               	subwf	(??_main+4)^(0+512),w
  6037  05D2  1D03               	skipz
  6038  05D3  2DD6               	goto	u10335
  6039  05D4  3004               	movlw	4
  6040  05D5  0255               	subwf	(??_main+2)^(0+512),w
  6041  05D6                     u10335:	
  6042  05D6  1803               	skipnc
  6043  05D7  2DF8               	goto	l9300
  6044  05D8  0023               	movlb	3	; select bank3
  6045  05D9  0956               	comf	_knob4_prev^(0+384),w	;volatile
  6046  05DA  0024               	movlb	4	; select bank4
  6047  05DB  00D3               	movwf	??_main^(0+512)
  6048  05DC  0023               	movlb	3	; select bank3
  6049  05DD  0957               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6050  05DE  0024               	movlb	4	; select bank4
  6051  05DF  00D4               	movwf	(??_main^(0+512)+1)
  6052  05E0  0AD3               	incf	??_main^(0+512),f
  6053  05E1  1903               	skipnz
  6054  05E2  0AD4               	incf	(??_main^(0+512)+1),f
  6055  05E3  0023               	movlb	3	; select bank3
  6056  05E4  0832               	movf	_knob_4_pos^(0+384),w
  6057  05E5  0024               	movlb	4	; select bank4
  6058  05E6  0753               	addwf	??_main^(0+512),w
  6059  05E7  00D5               	movwf	(??_main+2)^(0+512)
  6060  05E8  0023               	movlb	3	; select bank3
  6061  05E9  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6062  05EA  0024               	movlb	4	; select bank4
  6063  05EB  3D54               	addwfc	(??_main+1)^(0+512),w
  6064  05EC  00D6               	movwf	(??_main+3)^(0+512)
  6065  05ED  0856               	movf	(??_main+3)^(0+512),w
  6066  05EE  3A80               	xorlw	128
  6067  05EF  00D7               	movwf	(??_main+4)^(0+512)
  6068  05F0  307F               	movlw	127
  6069  05F1  0257               	subwf	(??_main+4)^(0+512),w
  6070  05F2  1D03               	skipz
  6071  05F3  2DF6               	goto	u10345
  6072  05F4  30FD               	movlw	253
  6073  05F5  0255               	subwf	(??_main+2)^(0+512),w
  6074  05F6                     u10345:	
  6075  05F6  1803               	skipnc
  6076  05F7  2E4A               	goto	l9306
  6077  05F8                     l9300:	
  6078                           
  6079                           ;main.c: 170: knob4_prev = knob_4_pos;
  6080  05F8  0023               	movlb	3	; select bank3
  6081  05F9  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6082  05FA  00D7               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6083  05FB  0832               	movf	_knob_4_pos^(0+384),w
  6084  05FC  00D6               	movwf	_knob4_prev^(0+384)	;volatile
  6085                           
  6086                           ;main.c: 171: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6087  05FD  3040               	movlw	64
  6088  05FE  0021               	movlb	1	; select bank1
  6089  05FF  00EA               	movwf	map@out_max^(0+128)
  6090  0600  3030               	movlw	48
  6091  0601  00EB               	movwf	(map@out_max+1)^(0+128)
  6092  0602  3045               	movlw	69
  6093  0603  00EC               	movwf	(map@out_max+2)^(0+128)
  6094  0604  3000               	movlw	0
  6095  0605  00E7               	movwf	map@out_min^(0+128)
  6096  0606  3034               	movlw	52
  6097  0607  00E8               	movwf	(map@out_min+1)^(0+128)
  6098  0608  3043               	movlw	67
  6099  0609  00E9               	movwf	(map@out_min+2)^(0+128)
  6100  060A  30C0               	movlw	192
  6101  060B  00E4               	movwf	map@in_max^(0+128)
  6102  060C  307F               	movlw	127
  6103  060D  00E5               	movwf	(map@in_max+1)^(0+128)
  6104  060E  3044               	movlw	68
  6105  060F  00E6               	movwf	(map@in_max+2)^(0+128)
  6106  0610  3000               	movlw	0
  6107  0611  00E1               	movwf	map@in_min^(0+128)
  6108  0612  3000               	movlw	0
  6109  0613  00E2               	movwf	(map@in_min+1)^(0+128)
  6110  0614  3000               	movlw	0
  6111  0615  00E3               	movwf	(map@in_min+2)^(0+128)
  6112  0616  0023               	movlb	3	; select bank3
  6113  0617  0857               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6114  0618  0021               	movlb	1	; select bank1
  6115  0619  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6116  061A  0023               	movlb	3	; select bank3
  6117  061B  0856               	movf	_knob4_prev^(0+384),w	;volatile
  6118  061C  0021               	movlb	1	; select bank1
  6119  061D  00A8               	movwf	___awtoft@c^(0+128)
  6120  061E  31A0  2000  3183   	fcall	___awtoft
  6121  0621  0021               	movlb	1	; select bank1
  6122  0622  0828               	movf	?___awtoft^(0+128),w
  6123  0623  00DE               	movwf	map@x^(0+128)
  6124  0624  0829               	movf	(?___awtoft+1)^(0+128),w
  6125  0625  00DF               	movwf	(map@x+1)^(0+128)
  6126  0626  082A               	movf	(?___awtoft+2)^(0+128),w
  6127  0627  00E0               	movwf	(map@x+2)^(0+128)
  6128  0628  319A  2257  3183   	fcall	_map
  6129  062B  0021               	movlb	1	; select bank1
  6130  062C  085E               	movf	?_map^(0+128),w
  6131  062D  0022               	movlb	2	; select bank2
  6132  062E  00A0               	movwf	___fttol@f1^(0+256)
  6133  062F  0021               	movlb	1	; select bank1
  6134  0630  085F               	movf	(?_map+1)^(0+128),w
  6135  0631  0022               	movlb	2	; select bank2
  6136  0632  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6137  0633  0021               	movlb	1	; select bank1
  6138  0634  0860               	movf	(?_map+2)^(0+128),w
  6139  0635  0022               	movlb	2	; select bank2
  6140  0636  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6141  0637  3199  21D0  3183   	fcall	___fttol
  6142  063A  0022               	movlb	2	; select bank2
  6143  063B  0820               	movf	?___fttol^(0+256),w
  6144  063C  0023               	movlb	3	; select bank3
  6145  063D  00CA               	movwf	_baseline_mod_time^(0+384)	;volatile
  6146  063E  0022               	movlb	2	; select bank2
  6147  063F  0821               	movf	(?___fttol^(0+256)+1),w
  6148  0640  0023               	movlb	3	; select bank3
  6149  0641  00CB               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6150  0642  0D89               	rlf	9,f
  6151  0643  3B89               	subwfb	9,f
  6152  0644  0989               	comf	9,f
  6153  0645  00CC               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6154  0646  00CD               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6155                           
  6156                           ;main.c: 172: mod_time_changed = 1;
  6157  0647  0020               	movlb	0	; select bank0
  6158  0648  01E2               	clrf	_mod_time_changed
  6159  0649  0AE2               	incf	_mod_time_changed,f
  6160  064A                     l9306:	
  6161                           
  6162                           ;main.c: 174: }
  6163                           ;main.c: 177: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6164  064A  0023               	movlb	3	; select bank3
  6165  064B  0958               	comf	_knob5_prev^(0+384),w	;volatile
  6166  064C  0024               	movlb	4	; select bank4
  6167  064D  00D3               	movwf	??_main^(0+512)
  6168  064E  0023               	movlb	3	; select bank3
  6169  064F  0959               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6170  0650  0024               	movlb	4	; select bank4
  6171  0651  00D4               	movwf	(??_main^(0+512)+1)
  6172  0652  0AD3               	incf	??_main^(0+512),f
  6173  0653  1903               	skipnz
  6174  0654  0AD4               	incf	(??_main^(0+512)+1),f
  6175  0655  0023               	movlb	3	; select bank3
  6176  0656  0834               	movf	_knob_5_pos^(0+384),w
  6177  0657  0024               	movlb	4	; select bank4
  6178  0658  0753               	addwf	??_main^(0+512),w
  6179  0659  00D5               	movwf	(??_main+2)^(0+512)
  6180  065A  0023               	movlb	3	; select bank3
  6181  065B  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6182  065C  0024               	movlb	4	; select bank4
  6183  065D  3D54               	addwfc	(??_main+1)^(0+512),w
  6184  065E  00D6               	movwf	(??_main+3)^(0+512)
  6185  065F  0856               	movf	(??_main+3)^(0+512),w
  6186  0660  3A80               	xorlw	128
  6187  0661  00D7               	movwf	(??_main+4)^(0+512)
  6188  0662  3080               	movlw	128
  6189  0663  0257               	subwf	(??_main+4)^(0+512),w
  6190  0664  1D03               	skipz
  6191  0665  2E68               	goto	u10355
  6192  0666  3004               	movlw	4
  6193  0667  0255               	subwf	(??_main+2)^(0+512),w
  6194  0668                     u10355:	
  6195  0668  1803               	skipnc
  6196  0669  2E8A               	goto	l9310
  6197  066A  0023               	movlb	3	; select bank3
  6198  066B  0958               	comf	_knob5_prev^(0+384),w	;volatile
  6199  066C  0024               	movlb	4	; select bank4
  6200  066D  00D3               	movwf	??_main^(0+512)
  6201  066E  0023               	movlb	3	; select bank3
  6202  066F  0959               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6203  0670  0024               	movlb	4	; select bank4
  6204  0671  00D4               	movwf	(??_main^(0+512)+1)
  6205  0672  0AD3               	incf	??_main^(0+512),f
  6206  0673  1903               	skipnz
  6207  0674  0AD4               	incf	(??_main^(0+512)+1),f
  6208  0675  0023               	movlb	3	; select bank3
  6209  0676  0834               	movf	_knob_5_pos^(0+384),w
  6210  0677  0024               	movlb	4	; select bank4
  6211  0678  0753               	addwf	??_main^(0+512),w
  6212  0679  00D5               	movwf	(??_main+2)^(0+512)
  6213  067A  0023               	movlb	3	; select bank3
  6214  067B  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6215  067C  0024               	movlb	4	; select bank4
  6216  067D  3D54               	addwfc	(??_main+1)^(0+512),w
  6217  067E  00D6               	movwf	(??_main+3)^(0+512)
  6218  067F  0856               	movf	(??_main+3)^(0+512),w
  6219  0680  3A80               	xorlw	128
  6220  0681  00D7               	movwf	(??_main+4)^(0+512)
  6221  0682  307F               	movlw	127
  6222  0683  0257               	subwf	(??_main+4)^(0+512),w
  6223  0684  1D03               	skipz
  6224  0685  2E88               	goto	u10365
  6225  0686  30FD               	movlw	253
  6226  0687  0255               	subwf	(??_main+2)^(0+512),w
  6227  0688                     u10365:	
  6228  0688  1803               	skipnc
  6229  0689  2ED4               	goto	l9314
  6230  068A                     l9310:	
  6231                           
  6232                           ;main.c: 178: knob5_prev = knob_5_pos;
  6233  068A  0023               	movlb	3	; select bank3
  6234  068B  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6235  068C  00D9               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6236  068D  0834               	movf	_knob_5_pos^(0+384),w
  6237  068E  00D8               	movwf	_knob5_prev^(0+384)	;volatile
  6238                           
  6239                           ;main.c: 179: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6240  068F  3000               	movlw	0
  6241  0690  0021               	movlb	1	; select bank1
  6242  0691  00EA               	movwf	map@out_max^(0+128)
  6243  0692  3000               	movlw	0
  6244  0693  00EB               	movwf	(map@out_max+1)^(0+128)
  6245  0694  3000               	movlw	0
  6246  0695  00EC               	movwf	(map@out_max+2)^(0+128)
  6247  0696  3060               	movlw	96
  6248  0697  00E7               	movwf	map@out_min^(0+128)
  6249  0698  309F               	movlw	159
  6250  0699  00E8               	movwf	(map@out_min+1)^(0+128)
  6251  069A  3044               	movlw	68
  6252  069B  00E9               	movwf	(map@out_min+2)^(0+128)
  6253  069C  30C0               	movlw	192
  6254  069D  00E4               	movwf	map@in_max^(0+128)
  6255  069E  307F               	movlw	127
  6256  069F  00E5               	movwf	(map@in_max+1)^(0+128)
  6257  06A0  3044               	movlw	68
  6258  06A1  00E6               	movwf	(map@in_max+2)^(0+128)
  6259  06A2  3000               	movlw	0
  6260  06A3  00E1               	movwf	map@in_min^(0+128)
  6261  06A4  3000               	movlw	0
  6262  06A5  00E2               	movwf	(map@in_min+1)^(0+128)
  6263  06A6  3000               	movlw	0
  6264  06A7  00E3               	movwf	(map@in_min+2)^(0+128)
  6265  06A8  0023               	movlb	3	; select bank3
  6266  06A9  0859               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6267  06AA  0021               	movlb	1	; select bank1
  6268  06AB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6269  06AC  0023               	movlb	3	; select bank3
  6270  06AD  0858               	movf	_knob5_prev^(0+384),w	;volatile
  6271  06AE  0021               	movlb	1	; select bank1
  6272  06AF  00A8               	movwf	___awtoft@c^(0+128)
  6273  06B0  31A0  2000  3183   	fcall	___awtoft
  6274  06B3  0021               	movlb	1	; select bank1
  6275  06B4  0828               	movf	?___awtoft^(0+128),w
  6276  06B5  00DE               	movwf	map@x^(0+128)
  6277  06B6  0829               	movf	(?___awtoft+1)^(0+128),w
  6278  06B7  00DF               	movwf	(map@x+1)^(0+128)
  6279  06B8  082A               	movf	(?___awtoft+2)^(0+128),w
  6280  06B9  00E0               	movwf	(map@x+2)^(0+128)
  6281  06BA  319A  2257  3183   	fcall	_map
  6282  06BD  0021               	movlb	1	; select bank1
  6283  06BE  085E               	movf	?_map^(0+128),w
  6284  06BF  0022               	movlb	2	; select bank2
  6285  06C0  00A0               	movwf	___fttol@f1^(0+256)
  6286  06C1  0021               	movlb	1	; select bank1
  6287  06C2  085F               	movf	(?_map+1)^(0+128),w
  6288  06C3  0022               	movlb	2	; select bank2
  6289  06C4  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6290  06C5  0021               	movlb	1	; select bank1
  6291  06C6  0860               	movf	(?_map+2)^(0+128),w
  6292  06C7  0022               	movlb	2	; select bank2
  6293  06C8  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6294  06C9  3199  21D0  3183   	fcall	___fttol
  6295  06CC  0022               	movlb	2	; select bank2
  6296  06CD  0821               	movf	(?___fttol^(0+256)+1),w
  6297  06CE  0024               	movlb	4	; select bank4
  6298  06CF  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6299  06D0  0022               	movlb	2	; select bank2
  6300  06D1  0820               	movf	?___fttol^(0+256),w
  6301  06D2  0024               	movlb	4	; select bank4
  6302  06D3  00C1               	movwf	_adjusted_pot_value^(0+512)
  6303  06D4                     l9314:	
  6304                           
  6305                           ;main.c: 180: }
  6306                           ;main.c: 184: if (mod_time_changed == 1) {
  6307  06D4  0020               	movlb	0	; select bank0
  6308  06D5  0362               	decf	_mod_time_changed,w
  6309  06D6  1D03               	btfss	3,2
  6310  06D7  2F0B               	goto	l9322
  6311                           
  6312                           ;main.c: 185: delay_time = baseline_mod_time;
  6313  06D8  0023               	movlb	3	; select bank3
  6314  06D9  084D               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6315  06DA  0020               	movlb	0	; select bank0
  6316  06DB  00D8               	movwf	_delay_time+3	;volatile
  6317  06DC  0023               	movlb	3	; select bank3
  6318  06DD  084C               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6319  06DE  0020               	movlb	0	; select bank0
  6320  06DF  00D7               	movwf	_delay_time+2	;volatile
  6321  06E0  0023               	movlb	3	; select bank3
  6322  06E1  084B               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6323  06E2  0020               	movlb	0	; select bank0
  6324  06E3  00D6               	movwf	_delay_time+1	;volatile
  6325  06E4  0023               	movlb	3	; select bank3
  6326  06E5  084A               	movf	_baseline_mod_time^(0+384),w	;volatile
  6327  06E6  0020               	movlb	0	; select bank0
  6328  06E7  00D5               	movwf	_delay_time	;volatile
  6329                           
  6330                           ;main.c: 186: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6331  06E8  0023               	movlb	3	; select bank3
  6332  06E9  084B               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6333  06EA  0022               	movlb	2	; select bank2
  6334  06EB  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6335  06EC  0023               	movlb	3	; select bank3
  6336  06ED  084A               	movf	_baseline_mod_time^(0+384),w	;volatile
  6337  06EE  0022               	movlb	2	; select bank2
  6338  06EF  00BF               	movwf	set_subdivision@x^(0+256)
  6339  06F0  0020               	movlb	0	; select bank0
  6340  06F1  085E               	movf	_top_push_state+1,w
  6341  06F2  0022               	movlb	2	; select bank2
  6342  06F3  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6343  06F4  0020               	movlb	0	; select bank0
  6344  06F5  085D               	movf	_top_push_state,w
  6345  06F6  0022               	movlb	2	; select bank2
  6346  06F7  00C1               	movwf	set_subdivision@y^(0+256)
  6347  06F8  319F  2745  3183   	fcall	_set_subdivision
  6348  06FB  0022               	movlb	2	; select bank2
  6349  06FC  083F               	movf	?_set_subdivision^(0+256),w
  6350  06FD  0020               	movlb	0	; select bank0
  6351  06FE  00D5               	movwf	_delay_time	;volatile
  6352  06FF  0022               	movlb	2	; select bank2
  6353  0700  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6354  0701  0020               	movlb	0	; select bank0
  6355  0702  00D6               	movwf	_delay_time+1	;volatile
  6356  0703  0D89               	rlf	9,f
  6357  0704  3B89               	subwfb	9,f
  6358  0705  0989               	comf	9,f
  6359  0706  00D7               	movwf	_delay_time+2	;volatile
  6360  0707  00D8               	movwf	_delay_time+3	;volatile
  6361                           
  6362                           ;main.c: 187: getModulationDelayTime();
  6363  0708  319A  22E2  3183   	fcall	_getModulationDelayTime
  6364  070B                     l9322:	
  6365                           
  6366                           ;main.c: 190: }
  6367                           ;main.c: 192: if (modulation_changed == 1 || mod_time_changed == 1) {
  6368  070B  0023               	movlb	3	; select bank3
  6369  070C  0346               	decf	_modulation_changed^(0+384),w
  6370  070D  1903               	btfsc	3,2
  6371  070E  2B5B               	goto	L1
  6372  070F  0020               	movlb	0	; select bank0
  6373  0710  0362               	decf	_mod_time_changed,w
  6374  0711  1D03               	btfss	3,2
  6375  0712  2B5E               	goto	l9226
  6376  0713  2B5B               	goto	L1
  6377  0714                     __end_of_main:	
  6378                           ;main.c: 193: updateModulationArray();
  6379                           
  6380                           
  6381                           	psect	text1
  6382  25D9                     __ptext1:	
  6383 ;; *************** function _update_selectMode *****************
  6384 ;; Defined at:
  6385 ;;		line 139 in file "tactiles.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6401 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6402 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    5
  6406 ;; This function calls:
  6407 ;;		_setExpressionDisplay
  6408 ;;		_setPresetDisplay
  6409 ;; This function is called by:
  6410 ;;		_main
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _update_selectMode
  6416  25D9                     _update_selectMode:	
  6417                           
  6418                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6422  25D9  0020               	movlb	0	; select bank0
  6423  25DA  0850               	movf	_mode2_state,w
  6424  25DB  1D03               	btfss	3,2
  6425  25DC  2DE0               	goto	l997
  6426  25DD  0351               	decf	_presetSaveMode,w
  6427  25DE  1D03               	btfss	3,2
  6428  25DF  0008               	return
  6429  25E0                     l997:	
  6430                           ;tactiles.c: 142: return;
  6431                           
  6432                           
  6433                           ;tactiles.c: 143: }
  6434                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6435  25E0  1B8F               	btfsc	15,7	;volatile
  6436  25E1  2E2E               	goto	l8822
  6437                           
  6438                           ;tactiles.c: 145: debounce_mode1++;
  6439  25E2  3001               	movlw	1
  6440  25E3  0024               	movlb	4	; select bank4
  6441  25E4  07C7               	addwf	_debounce_mode1^(0+512),f
  6442  25E5  3000               	movlw	0
  6443  25E6  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6444                           
  6445                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6446  25E7  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6447  25E8  3A80               	xorlw	128
  6448  25E9  0021               	movlb	1	; select bank1
  6449  25EA  00A7               	movwf	??_update_selectMode^(0+128)
  6450  25EB  3080               	movlw	128
  6451  25EC  0227               	subwf	??_update_selectMode^(0+128),w
  6452  25ED  1D03               	skipz
  6453  25EE  2DF2               	goto	u9465
  6454  25EF  301A               	movlw	26
  6455  25F0  0024               	movlb	4	; select bank4
  6456  25F1  0247               	subwf	_debounce_mode1^(0+512),w
  6457  25F2                     u9465:	
  6458  25F2  1C03               	skipc
  6459  25F3  0008               	return
  6460                           
  6461                           ;tactiles.c: 147: debounce_mode1 = 25;
  6462  25F4  3019               	movlw	25
  6463  25F5  0024               	movlb	4	; select bank4
  6464  25F6  00C7               	movwf	_debounce_mode1^(0+512)
  6465  25F7  3000               	movlw	0
  6466  25F8  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6467                           
  6468                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6469  25F9  0020               	movlb	0	; select bank0
  6470  25FA  0850               	movf	_mode2_state,w
  6471  25FB  0023               	movlb	3	; select bank3
  6472  25FC  0664               	xorwf	_presetModeCnst^(0+384),w
  6473  25FD  1903               	skipnz
  6474  25FE  2E03               	goto	l8804
  6475  25FF  0020               	movlb	0	; select bank0
  6476  2600  0351               	decf	_presetSaveMode,w
  6477  2601  1D03               	btfss	3,2
  6478  2602  2E14               	goto	l8812
  6479  2603                     l8804:	
  6480                           
  6481                           ;tactiles.c: 149: presetChannel++;
  6482  2603  3001               	movlw	1
  6483  2604  0021               	movlb	1	; select bank1
  6484  2605  00A7               	movwf	??_update_selectMode^(0+128)
  6485  2606  0827               	movf	??_update_selectMode^(0+128),w
  6486  2607  0020               	movlb	0	; select bank0
  6487  2608  07E4               	addwf	_presetChannel,f
  6488                           
  6489                           ;tactiles.c: 150: if (presetChannel > 10) {
  6490  2609  300B               	movlw	11
  6491  260A  0264               	subwf	_presetChannel,w
  6492  260B  1C03               	skipc
  6493  260C  2E0F               	goto	l8810
  6494                           
  6495                           ;tactiles.c: 151: presetChannel = 1;
  6496  260D  01E4               	clrf	_presetChannel
  6497  260E  0AE4               	incf	_presetChannel,f
  6498  260F                     l8810:	
  6499                           
  6500                           ;tactiles.c: 152: }
  6501                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6502  260F  0864               	movf	_presetChannel,w
  6503  2610  31A0  20F2  31A5   	fcall	_setPresetDisplay
  6504                           
  6505                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6506  2613  2E2A               	goto	l1008
  6507  2614                     l8812:	
  6508  2614  0020               	movlb	0	; select bank0
  6509  2615  0850               	movf	_mode2_state,w
  6510  2616  0023               	movlb	3	; select bank3
  6511  2617  0663               	xorwf	_expressModeCnst^(0+384),w
  6512  2618  1D03               	skipz
  6513  2619  2E2A               	goto	l1008
  6514                           
  6515                           ;tactiles.c: 155: expressionChannel++;
  6516  261A  3001               	movlw	1
  6517  261B  0021               	movlb	1	; select bank1
  6518  261C  00A7               	movwf	??_update_selectMode^(0+128)
  6519  261D  0827               	movf	??_update_selectMode^(0+128),w
  6520  261E  0020               	movlb	0	; select bank0
  6521  261F  07E0               	addwf	_expressionChannel,f
  6522                           
  6523                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6524  2620  3006               	movlw	6
  6525  2621  0260               	subwf	_expressionChannel,w
  6526  2622  1C03               	skipc
  6527  2623  2E26               	goto	l8820
  6528                           
  6529                           ;tactiles.c: 157: expressionChannel = 1;
  6530  2624  01E0               	clrf	_expressionChannel
  6531  2625  0AE0               	incf	_expressionChannel,f
  6532  2626                     l8820:	
  6533                           
  6534                           ;tactiles.c: 158: }
  6535                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6536  2626  0860               	movf	_expressionChannel,w
  6537  2627  31AE  260F  31A5   	fcall	_setExpressionDisplay
  6538  262A                     l1008:	
  6539                           ;tactiles.c: 160: }
  6540                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6541                           
  6542  262A  0020               	movlb	0	; select bank0
  6543  262B  1B8F               	btfsc	15,7	;volatile
  6544  262C  0008               	return
  6545  262D  2E2A               	goto	l1008
  6546  262E                     l8822:	
  6547                           ;tactiles.c: 168: }
  6548                           ;tactiles.c: 169: }
  6549                           ;tactiles.c: 170: } else {
  6550                           
  6551                           
  6552                           ;tactiles.c: 171: debounce_mode1 = 0;
  6553  262E  0024               	movlb	4	; select bank4
  6554  262F  01C7               	clrf	_debounce_mode1^(0+512)
  6555  2630  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6556  2631  0008               	return
  6557  2632                     __end_of_update_selectMode:	
  6558                           
  6559                           	psect	text2
  6560  20BA                     __ptext2:	
  6561 ;; *************** function _update_mode *****************
  6562 ;; Defined at:
  6563 ;;		line 87 in file "tactiles.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6579 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6580 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6581 ;;Total ram usage:        1 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    6
  6584 ;; This function calls:
  6585 ;;		_resetRingLEDs
  6586 ;;		_setPedalMode
  6587 ;; This function is called by:
  6588 ;;		_main
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _update_mode
  6594  20BA                     _update_mode:	
  6595                           
  6596                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6600  20BA  0020               	movlb	0	; select bank0
  6601  20BB  180E               	btfsc	14,0	;volatile
  6602  20BC  28EE               	goto	l8790
  6603                           
  6604                           ;tactiles.c: 95: debounce_mode2++;
  6605  20BD  3001               	movlw	1
  6606  20BE  0024               	movlb	4	; select bank4
  6607  20BF  07C9               	addwf	_debounce_mode2^(0+512),f
  6608  20C0  3000               	movlw	0
  6609  20C1  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6610                           
  6611                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6612  20C2  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6613  20C3  3A80               	xorlw	128
  6614  20C4  0021               	movlb	1	; select bank1
  6615  20C5  00A7               	movwf	??_update_mode^(0+128)
  6616  20C6  3080               	movlw	128
  6617  20C7  0227               	subwf	??_update_mode^(0+128),w
  6618  20C8  1D03               	skipz
  6619  20C9  28CD               	goto	u9395
  6620  20CA  301A               	movlw	26
  6621  20CB  0024               	movlb	4	; select bank4
  6622  20CC  0249               	subwf	_debounce_mode2^(0+512),w
  6623  20CD                     u9395:	
  6624  20CD  1C03               	skipc
  6625  20CE  0008               	return
  6626                           
  6627                           ;tactiles.c: 97: debounce_mode2 = 25;
  6628  20CF  3019               	movlw	25
  6629  20D0  0024               	movlb	4	; select bank4
  6630  20D1  00C9               	movwf	_debounce_mode2^(0+512)
  6631  20D2  3000               	movlw	0
  6632  20D3  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6633                           
  6634                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6635  20D4  0020               	movlb	0	; select bank0
  6636  20D5  0351               	decf	_presetSaveMode,w
  6637  20D6  1D03               	btfss	3,2
  6638  20D7  28DD               	goto	l8782
  6639                           
  6640                           ;tactiles.c: 100: presetSaveMode = 0;
  6641  20D8  01D1               	clrf	_presetSaveMode
  6642                           
  6643                           ;tactiles.c: 101: resetRingLEDs();
  6644  20D9  31AE  2627  31A0   	fcall	_resetRingLEDs
  6645                           
  6646                           ;tactiles.c: 102: } else {
  6647  20DC  28E7               	goto	l8788
  6648  20DD                     l8782:	
  6649                           
  6650                           ;tactiles.c: 103: mode2_state++;
  6651  20DD  3001               	movlw	1
  6652  20DE  0021               	movlb	1	; select bank1
  6653  20DF  00A7               	movwf	??_update_mode^(0+128)
  6654  20E0  0827               	movf	??_update_mode^(0+128),w
  6655  20E1  0020               	movlb	0	; select bank0
  6656  20E2  07D0               	addwf	_mode2_state,f
  6657                           
  6658                           ;tactiles.c: 104: if (mode2_state > 2) {
  6659  20E3  3003               	movlw	3
  6660  20E4  0250               	subwf	_mode2_state,w
  6661  20E5  1803               	btfsc	3,0
  6662                           
  6663                           ;tactiles.c: 105: mode2_state = 0;
  6664  20E6  01D0               	clrf	_mode2_state
  6665  20E7                     l8788:	
  6666                           
  6667                           ;tactiles.c: 106: }
  6668                           ;tactiles.c: 107: }
  6669                           ;tactiles.c: 109: setPedalMode();
  6670  20E7  31AE  26D2  31A0   	fcall	_setPedalMode
  6671  20EA                     l982:	
  6672                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6673                           
  6674  20EA  0020               	movlb	0	; select bank0
  6675  20EB  180E               	btfsc	14,0	;volatile
  6676  20EC  0008               	return
  6677  20ED  28EA               	goto	l982
  6678  20EE                     l8790:	
  6679                           ;tactiles.c: 111: }
  6680                           ;tactiles.c: 112: }
  6681                           ;tactiles.c: 113: } else {
  6682                           
  6683                           
  6684                           ;tactiles.c: 114: debounce_mode2 = 0;
  6685  20EE  0024               	movlb	4	; select bank4
  6686  20EF  01C9               	clrf	_debounce_mode2^(0+512)
  6687  20F0  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6688  20F1  0008               	return
  6689  20F2                     __end_of_update_mode:	
  6690                           
  6691                           	psect	text3
  6692  09FE                     __ptext3:	
  6693 ;; *************** function _updateSwitchTap *****************
  6694 ;; Defined at:
  6695 ;;		line 48 in file "SwitchTap.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6700 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6711 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6713 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6714 ;;Total ram usage:        9 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    8
  6717 ;; This function calls:
  6718 ;;		___aldiv
  6719 ;;		_setDoublePressState
  6720 ;;		_setLongTapState
  6721 ;; This function is called by:
  6722 ;;		_main
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _updateSwitchTap
  6728  09FE                     _updateSwitchTap:	
  6729                           
  6730                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6734  09FE  0021               	movlb	1	; select bank1
  6735  09FF  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6736                           
  6737                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6738  0A00  0020               	movlb	0	; select bank0
  6739  0A01  1810               	btfsc	16,0	;volatile
  6740  0A02  2A09               	goto	l8946
  6741                           
  6742                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6743  0A03  0854               	movf	_switchTap_pressed,w
  6744  0A04  1903               	btfsc	3,2
  6745  0A05  2A13               	goto	l1405
  6746                           
  6747                           ;SwitchTap.c: 59: switchTap_pressed--;
  6748  0A06  3001               	movlw	1
  6749  0A07  02D4               	subwf	_switchTap_pressed,f
  6750                           
  6751                           ;SwitchTap.c: 60: }
  6752                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6753  0A08  2A13               	goto	l1405
  6754  0A09                     l8946:	
  6755  0A09  3019               	movlw	25
  6756  0A0A  0254               	subwf	_switchTap_pressed,w
  6757  0A0B  1803               	skipnc
  6758  0A0C  2A13               	goto	l1405
  6759                           
  6760                           ;SwitchTap.c: 62: switchTap_pressed++;
  6761  0A0D  3001               	movlw	1
  6762  0A0E  0021               	movlb	1	; select bank1
  6763  0A0F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6764  0A10  083C               	movf	??_updateSwitchTap^(0+128),w
  6765  0A11  0020               	movlb	0	; select bank0
  6766  0A12  07D4               	addwf	_switchTap_pressed,f
  6767  0A13                     l1405:	
  6768                           
  6769                           ;SwitchTap.c: 63: }
  6770                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6771  0A13  0854               	movf	_switchTap_pressed,w
  6772  0A14  1D03               	btfss	3,2
  6773  0A15  2BC8               	goto	l9030
  6774                           
  6775                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6776  0A16  1BC6               	btfsc	_tap_timer+3,7	;volatile
  6777  0A17  2A9D               	goto	l8990
  6778  0A18  0846               	movf	_tap_timer+3,w	;volatile
  6779  0A19  1D03               	btfss	3,2
  6780  0A1A  2A24               	goto	l8952
  6781  0A1B  0845               	movf	_tap_timer+2,w	;volatile
  6782  0A1C  1D03               	btfss	3,2
  6783  0A1D  2A24               	goto	l8952
  6784  0A1E  301B               	movlw	27
  6785  0A1F  0243               	subwf	_tap_timer,w	;volatile
  6786  0A20  3006               	movlw	6
  6787  0A21  3B44               	subwfb	_tap_timer+1,w	;volatile
  6788  0A22  1C03               	btfss	3,0
  6789  0A23  2A9D               	goto	l8990
  6790  0A24                     l8952:	
  6791                           
  6792                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6793  0A24  0023               	movlb	3	; select bank3
  6794  0A25  0349               	decf	_switchTap_down^(0+384),w
  6795  0A26  1903               	btfsc	3,2
  6796  0A27  2A63               	goto	l8968
  6797                           
  6798                           ;SwitchTap.c: 78: switchTap_down = 1;
  6799  0A28  01C9               	clrf	_switchTap_down^(0+384)
  6800  0A29  0AC9               	incf	_switchTap_down^(0+384),f
  6801                           
  6802                           ;SwitchTap.c: 79: tap_timer = 0;
  6803  0A2A  3000               	movlw	0
  6804  0A2B  0020               	movlb	0	; select bank0
  6805  0A2C  00C6               	movwf	_tap_timer+3	;volatile
  6806  0A2D  3000               	movlw	0
  6807  0A2E  00C5               	movwf	_tap_timer+2	;volatile
  6808  0A2F  3000               	movlw	0
  6809  0A30  00C4               	movwf	_tap_timer+1	;volatile
  6810  0A31  3000               	movlw	0
  6811  0A32  00C3               	movwf	_tap_timer	;volatile
  6812                           
  6813                           ;SwitchTap.c: 80: tap_iteration = 1;
  6814  0A33  3001               	movlw	1
  6815  0A34  0023               	movlb	3	; select bank3
  6816  0A35  00DE               	movwf	_tap_iteration^(0+384)
  6817  0A36  3000               	movlw	0
  6818  0A37  00DF               	movwf	(_tap_iteration^(0+384)+1)
  6819                           
  6820                           ;SwitchTap.c: 81: tap_total = 0;
  6821  0A38  3000               	movlw	0
  6822  0A39  0024               	movlb	4	; select bank4
  6823  0A3A  00C0               	movwf	(_tap_total+3)^(0+512)
  6824  0A3B  3000               	movlw	0
  6825  0A3C  00BF               	movwf	(_tap_total+2)^(0+512)
  6826  0A3D  3000               	movlw	0
  6827  0A3E  00BE               	movwf	(_tap_total+1)^(0+512)
  6828  0A3F  3000               	movlw	0
  6829  0A40  00BD               	movwf	_tap_total^(0+512)
  6830                           
  6831                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6832  0A41  0020               	movlb	0	; select bank0
  6833  0A42  01E2               	clrf	_mod_time_changed
  6834                           
  6835                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6836  0A43  0021               	movlb	1	; select bank1
  6837  0A44  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6838  0A45  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6839  0A46                     l8966:	
  6840  0A46  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6841  0A47  0020               	movlb	0	; select bank0
  6842  0A48  0263               	subwf	_num_taps,w
  6843  0A49  1C03               	btfss	3,0
  6844  0A4A  2A63               	goto	l8968
  6845                           
  6846                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6847  0A4B  0021               	movlb	1	; select bank1
  6848  0A4C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6849  0A4D  00BC               	movwf	??_updateSwitchTap^(0+128)
  6850  0A4E  3001               	movlw	1
  6851  0A4F                     u9835:	
  6852  0A4F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6853  0A50  3EFF               	addlw	-1
  6854  0A51  1D03               	skipz
  6855  0A52  2A4F               	goto	u9835
  6856  0A53  353C               	lslf	??_updateSwitchTap^(0+128),w
  6857  0A54  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6858  0A55  0086               	movwf	6
  6859  0A56  3002               	movlw	2	; select bank4/5
  6860  0A57  0087               	movwf	7
  6861  0A58  3000               	movlw	0
  6862  0A59  3FC0               	movwi [0]fsr1
  6863  0A5A  3000               	movlw	0
  6864  0A5B  3FC1               	movwi [1]fsr1
  6865  0A5C  3FC2               	movwi [2]fsr1
  6866  0A5D  3FC3               	movwi [3]fsr1
  6867  0A5E  3001               	movlw	1
  6868  0A5F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6869  0A60  083C               	movf	??_updateSwitchTap^(0+128),w
  6870  0A61  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6871  0A62  2A46               	goto	l8966
  6872  0A63                     l8968:	
  6873                           
  6874                           ;SwitchTap.c: 86: }
  6875                           ;SwitchTap.c: 87: }
  6876                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6877  0A63  0020               	movlb	0	; select bank0
  6878  0A64  084F               	movf	_longTap_start,w
  6879  0A65  1D03               	btfss	3,2
  6880  0A66  2A6D               	goto	l8974
  6881                           
  6882                           ;SwitchTap.c: 91: longTap_start = 1;
  6883  0A67  01CF               	clrf	_longTap_start
  6884  0A68  0ACF               	incf	_longTap_start,f
  6885                           
  6886                           ;SwitchTap.c: 92: longTap_state = 0;
  6887  0A69  01E1               	clrf	_longTap_state	;volatile
  6888                           
  6889                           ;SwitchTap.c: 93: longTap_timer = 0;
  6890  0A6A  0023               	movlb	3	; select bank3
  6891  0A6B  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  6892  0A6C  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6893  0A6D                     l8974:	
  6894                           
  6895                           ;SwitchTap.c: 94: }
  6896                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6897  0A6D  0020               	movlb	0	; select bank0
  6898  0A6E  085C               	movf	_long_press_limit+1,w
  6899  0A6F  0023               	movlb	3	; select bank3
  6900  0A70  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6901  0A71  1D03               	skipz
  6902  0A72  2A77               	goto	u9865
  6903  0A73  0020               	movlb	0	; select bank0
  6904  0A74  085B               	movf	_long_press_limit,w
  6905  0A75  0023               	movlb	3	; select bank3
  6906  0A76  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  6907  0A77                     u9865:	
  6908  0A77  1C03               	skipc
  6909  0A78  0008               	return
  6910  0A79  0020               	movlb	0	; select bank0
  6911  0A7A  0861               	movf	_longTap_state,w	;volatile
  6912  0A7B  1D03               	btfss	3,2
  6913  0A7C  0008               	return
  6914  0A7D  084C               	movf	_doubleTap_state,w	;volatile
  6915  0A7E  1D03               	btfss	3,2
  6916  0A7F  0008               	return
  6917                           
  6918                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6919  0A80  085C               	movf	_long_press_limit+1,w
  6920  0A81  0023               	movlb	3	; select bank3
  6921  0A82  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6922  0A83  0020               	movlb	0	; select bank0
  6923  0A84  085B               	movf	_long_press_limit,w
  6924  0A85  0023               	movlb	3	; select bank3
  6925  0A86  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  6926                           
  6927                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6928  0A87  0022               	movlb	2	; select bank2
  6929  0A88  120D               	bcf	13,4	;volatile
  6930                           
  6931                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6932  0A89  0020               	movlb	0	; select bank0
  6933  0A8A  034D               	decf	_longBypass_start,w
  6934  0A8B  1903               	btfsc	3,2
  6935  0A8C  2A95               	goto	l8988
  6936                           
  6937                           ;SwitchTap.c: 104: setLongTapState(1);
  6938  0A8D  3001               	movlw	1
  6939  0A8E  0021               	movlb	1	; select bank1
  6940  0A8F  00A0               	movwf	setLongTapState@f_state^(0+128)
  6941  0A90  3000               	movlw	0
  6942  0A91  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6943  0A92  3187  27E5         	fcall	_setLongTapState
  6944                           
  6945                           ;SwitchTap.c: 105: } else {
  6946  0A94  0008               	return
  6947  0A95                     l8988:	
  6948                           
  6949                           ;SwitchTap.c: 106: setDoublePressState(1);
  6950  0A95  3001               	movlw	1
  6951  0A96  0021               	movlb	1	; select bank1
  6952  0A97  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6953  0A98  3000               	movlw	0
  6954  0A99  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6955  0A9A  31A1  21E0         	fcall	_setDoublePressState
  6956                           
  6957                           ;SwitchTap.c: 107: }
  6958                           ;SwitchTap.c: 108: }
  6959                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6960  0A9C  0008               	return
  6961  0A9D                     l8990:	
  6962  0A9D  0020               	movlb	0	; select bank0
  6963  0A9E  1BC6               	btfsc	_tap_timer+3,7	;volatile
  6964  0A9F  2AAC               	goto	l8992
  6965  0AA0  0846               	movf	_tap_timer+3,w	;volatile
  6966  0AA1  1D03               	btfss	3,2
  6967  0AA2  0008               	return
  6968  0AA3  0845               	movf	_tap_timer+2,w	;volatile
  6969  0AA4  1D03               	btfss	3,2
  6970  0AA5  0008               	return
  6971  0AA6  301B               	movlw	27
  6972  0AA7  0243               	subwf	_tap_timer,w	;volatile
  6973  0AA8  3006               	movlw	6
  6974  0AA9  3B44               	subwfb	_tap_timer+1,w	;volatile
  6975  0AAA  1803               	btfsc	3,0
  6976  0AAB  0008               	return
  6977  0AAC                     l8992:	
  6978  0AAC  0861               	movf	_longTap_state,w	;volatile
  6979  0AAD  1D03               	btfss	3,2
  6980  0AAE  0008               	return
  6981  0AAF  0023               	movlb	3	; select bank3
  6982  0AB0  0349               	decf	_switchTap_down^(0+384),w
  6983  0AB1  1903               	btfsc	3,2
  6984  0AB2  0008               	return
  6985                           
  6986                           ;SwitchTap.c: 112: switchTap_down = 1;
  6987  0AB3  01C9               	clrf	_switchTap_down^(0+384)
  6988  0AB4  0AC9               	incf	_switchTap_down^(0+384),f
  6989                           
  6990                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6991  0AB5  0020               	movlb	0	; select bank0
  6992  0AB6  1BC6               	btfsc	_tap_timer+3,7	;volatile
  6993  0AB7  2ACC               	goto	l1419
  6994  0AB8  0846               	movf	_tap_timer+3,w	;volatile
  6995  0AB9  1D03               	btfss	3,2
  6996  0ABA  2AC4               	goto	l9000
  6997  0ABB  0845               	movf	_tap_timer+2,w	;volatile
  6998  0ABC  1D03               	btfss	3,2
  6999  0ABD  2AC4               	goto	l9000
  7000  0ABE  3094               	movlw	148
  7001  0ABF  0243               	subwf	_tap_timer,w	;volatile
  7002  0AC0  3004               	movlw	4
  7003  0AC1  3B44               	subwfb	_tap_timer+1,w	;volatile
  7004  0AC2  1C03               	btfss	3,0
  7005  0AC3  2ACC               	goto	l1419
  7006  0AC4                     l9000:	
  7007                           
  7008                           ;SwitchTap.c: 114: tap_timer = 1172;
  7009  0AC4  3000               	movlw	0
  7010  0AC5  00C6               	movwf	_tap_timer+3	;volatile
  7011  0AC6  3000               	movlw	0
  7012  0AC7  00C5               	movwf	_tap_timer+2	;volatile
  7013  0AC8  3004               	movlw	4
  7014  0AC9  00C4               	movwf	_tap_timer+1	;volatile
  7015  0ACA  3094               	movlw	148
  7016  0ACB  00C3               	movwf	_tap_timer	;volatile
  7017  0ACC                     l1419:	
  7018                           
  7019                           ;SwitchTap.c: 115: }
  7020                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7021  0ACC  0863               	movf	_num_taps,w
  7022  0ACD  0021               	movlb	1	; select bank1
  7023  0ACE  00BC               	movwf	??_updateSwitchTap^(0+128)
  7024  0ACF  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7025  0AD0  083C               	movf	??_updateSwitchTap^(0+128),w
  7026  0AD1  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7027  0AD2  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7028  0AD3  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7029                           
  7030                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7031  0AD4  0023               	movlb	3	; select bank3
  7032  0AD5  085F               	movf	(_tap_iteration+1)^(0+384),w
  7033  0AD6  3A80               	xorlw	128
  7034  0AD7  3C80               	sublw	128
  7035  0AD8  1D03               	skipz
  7036  0AD9  2ADD               	goto	u9945
  7037  0ADA  085E               	movf	_tap_iteration^(0+384),w
  7038  0ADB  0020               	movlb	0	; select bank0
  7039  0ADC  0263               	subwf	_num_taps,w
  7040  0ADD                     u9945:	
  7041  0ADD  1C03               	skipc
  7042  0ADE  2B0F               	goto	l9008
  7043                           
  7044                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7045  0ADF  0020               	movlb	0	; select bank0
  7046  0AE0  0843               	movf	_tap_timer,w	;volatile
  7047  0AE1  0024               	movlb	4	; select bank4
  7048  0AE2  07BD               	addwf	_tap_total^(0+512),f
  7049  0AE3  0020               	movlb	0	; select bank0
  7050  0AE4  0844               	movf	_tap_timer+1,w	;volatile
  7051  0AE5  0024               	movlb	4	; select bank4
  7052  0AE6  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7053  0AE7  0020               	movlb	0	; select bank0
  7054  0AE8  0845               	movf	_tap_timer+2,w	;volatile
  7055  0AE9  0024               	movlb	4	; select bank4
  7056  0AEA  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7057  0AEB  0020               	movlb	0	; select bank0
  7058  0AEC  0846               	movf	_tap_timer+3,w	;volatile
  7059  0AED  0024               	movlb	4	; select bank4
  7060  0AEE  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7061                           
  7062                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7063  0AEF  0023               	movlb	3	; select bank3
  7064  0AF0  085E               	movf	_tap_iteration^(0+384),w
  7065  0AF1  0021               	movlb	1	; select bank1
  7066  0AF2  00BC               	movwf	??_updateSwitchTap^(0+128)
  7067  0AF3  3001               	movlw	1
  7068  0AF4                     u9955:	
  7069  0AF4  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7070  0AF5  3EFF               	addlw	-1
  7071  0AF6  1D03               	skipz
  7072  0AF7  2AF4               	goto	u9955
  7073  0AF8  353C               	lslf	??_updateSwitchTap^(0+128),w
  7074  0AF9  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7075  0AFA  0086               	movwf	6
  7076  0AFB  3002               	movlw	2	; select bank4/5
  7077  0AFC  0087               	movwf	7
  7078  0AFD  0020               	movlb	0	; select bank0
  7079  0AFE  0843               	movf	_tap_timer,w	;volatile
  7080  0AFF  3FC0               	movwi [0]fsr1
  7081  0B00  0844               	movf	_tap_timer+1,w	;volatile
  7082  0B01  3FC1               	movwi [1]fsr1
  7083  0B02  0845               	movf	_tap_timer+2,w	;volatile
  7084  0B03  3FC2               	movwi [2]fsr1
  7085  0B04  0846               	movf	_tap_timer+3,w	;volatile
  7086  0B05  3FC3               	movwi [3]fsr1
  7087                           
  7088                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7089  0B06  0023               	movlb	3	; select bank3
  7090  0B07  085F               	movf	(_tap_iteration+1)^(0+384),w
  7091  0B08  0021               	movlb	1	; select bank1
  7092  0B09  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7093  0B0A  0023               	movlb	3	; select bank3
  7094  0B0B  085E               	movf	_tap_iteration^(0+384),w
  7095  0B0C  0021               	movlb	1	; select bank1
  7096  0B0D  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7097                           
  7098                           ;SwitchTap.c: 122: } else {
  7099  0B0E  2B8B               	goto	l9022
  7100  0B0F                     l9008:	
  7101                           
  7102                           ;SwitchTap.c: 123: tap_total = 0;
  7103  0B0F  3000               	movlw	0
  7104  0B10  0024               	movlb	4	; select bank4
  7105  0B11  00C0               	movwf	(_tap_total+3)^(0+512)
  7106  0B12  3000               	movlw	0
  7107  0B13  00BF               	movwf	(_tap_total+2)^(0+512)
  7108  0B14  3000               	movlw	0
  7109  0B15  00BE               	movwf	(_tap_total+1)^(0+512)
  7110  0B16  3000               	movlw	0
  7111  0B17  00BD               	movwf	_tap_total^(0+512)
  7112                           
  7113                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7114  0B18  0021               	movlb	1	; select bank1
  7115  0B19  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7116  0B1A  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7117  0B1B                     l9016:	
  7118  0B1B  0020               	movlb	0	; select bank0
  7119  0B1C  0863               	movf	_num_taps,w
  7120  0B1D  0021               	movlb	1	; select bank1
  7121  0B1E  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7122  0B1F  1803               	btfsc	3,0
  7123  0B20  2B65               	goto	l9018
  7124                           
  7125                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7126  0B21  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7127  0B22  00BC               	movwf	??_updateSwitchTap^(0+128)
  7128  0B23  3001               	movlw	1
  7129  0B24                     u9965:	
  7130  0B24  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7131  0B25  3EFF               	addlw	-1
  7132  0B26  1D03               	skipz
  7133  0B27  2B24               	goto	u9965
  7134  0B28  353C               	lslf	??_updateSwitchTap^(0+128),w
  7135  0B29  3E04               	addlw	4
  7136  0B2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7137  0B2B  0086               	movwf	6
  7138  0B2C  3002               	movlw	2	; select bank4/5
  7139  0B2D  0087               	movwf	7
  7140  0B2E  3F40               	moviw [0]fsr1
  7141  0B2F  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7142  0B30  3F41               	moviw [1]fsr1
  7143  0B31  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7144  0B32  3F42               	moviw [2]fsr1
  7145  0B33  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7146  0B34  3F43               	moviw [3]fsr1
  7147  0B35  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7148  0B36  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7149  0B37  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7150  0B38  3001               	movlw	1
  7151  0B39                     u9975:	
  7152  0B39  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7153  0B3A  3EFF               	addlw	-1
  7154  0B3B  1D03               	skipz
  7155  0B3C  2B39               	goto	u9975
  7156  0B3D  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7157  0B3E  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7158  0B3F  0086               	movwf	6
  7159  0B40  3002               	movlw	2	; select bank4/5
  7160  0B41  0087               	movwf	7
  7161  0B42  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7162  0B43  3FC0               	movwi [0]fsr1
  7163  0B44  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7164  0B45  3FC1               	movwi [1]fsr1
  7165  0B46  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7166  0B47  3FC2               	movwi [2]fsr1
  7167  0B48  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7168  0B49  3FC3               	movwi [3]fsr1
  7169                           
  7170                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7171  0B4A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7172  0B4B  00BC               	movwf	??_updateSwitchTap^(0+128)
  7173  0B4C  3001               	movlw	1
  7174  0B4D                     u9985:	
  7175  0B4D  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7176  0B4E  3EFF               	addlw	-1
  7177  0B4F  1D03               	skipz
  7178  0B50  2B4D               	goto	u9985
  7179  0B51  353C               	lslf	??_updateSwitchTap^(0+128),w
  7180  0B52  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7181  0B53  0086               	movwf	6
  7182  0B54  3002               	movlw	2	; select bank4/5
  7183  0B55  0087               	movwf	7
  7184  0B56  3F40               	moviw [0]fsr1
  7185  0B57  0024               	movlb	4	; select bank4
  7186  0B58  07BD               	addwf	_tap_total^(0+512),f
  7187  0B59  3F41               	moviw [1]fsr1
  7188  0B5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7189  0B5B  3F42               	moviw [2]fsr1
  7190  0B5C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7191  0B5D  3F43               	moviw [3]fsr1
  7192  0B5E  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7193  0B5F  3001               	movlw	1
  7194  0B60  0021               	movlb	1	; select bank1
  7195  0B61  00BC               	movwf	??_updateSwitchTap^(0+128)
  7196  0B62  083C               	movf	??_updateSwitchTap^(0+128),w
  7197  0B63  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7198  0B64  2B1B               	goto	l9016
  7199  0B65                     l9018:	
  7200                           
  7201                           ;SwitchTap.c: 127: }
  7202                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7203  0B65  0020               	movlb	0	; select bank0
  7204  0B66  0863               	movf	_num_taps,w
  7205  0B67  0021               	movlb	1	; select bank1
  7206  0B68  00BC               	movwf	??_updateSwitchTap^(0+128)
  7207  0B69  3001               	movlw	1
  7208  0B6A                     u10005:	
  7209  0B6A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7210  0B6B  3EFF               	addlw	-1
  7211  0B6C  1D03               	skipz
  7212  0B6D  2B6A               	goto	u10005
  7213  0B6E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7214  0B6F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7215  0B70  0086               	movwf	6
  7216  0B71  3002               	movlw	2	; select bank4/5
  7217  0B72  0087               	movwf	7
  7218  0B73  0020               	movlb	0	; select bank0
  7219  0B74  0843               	movf	_tap_timer,w	;volatile
  7220  0B75  3FC0               	movwi [0]fsr1
  7221  0B76  0844               	movf	_tap_timer+1,w	;volatile
  7222  0B77  3FC1               	movwi [1]fsr1
  7223  0B78  0845               	movf	_tap_timer+2,w	;volatile
  7224  0B79  3FC2               	movwi [2]fsr1
  7225  0B7A  0846               	movf	_tap_timer+3,w	;volatile
  7226  0B7B  3FC3               	movwi [3]fsr1
  7227                           
  7228                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7229  0B7C  0843               	movf	_tap_timer,w	;volatile
  7230  0B7D  0024               	movlb	4	; select bank4
  7231  0B7E  07BD               	addwf	_tap_total^(0+512),f
  7232  0B7F  0020               	movlb	0	; select bank0
  7233  0B80  0844               	movf	_tap_timer+1,w	;volatile
  7234  0B81  0024               	movlb	4	; select bank4
  7235  0B82  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7236  0B83  0020               	movlb	0	; select bank0
  7237  0B84  0845               	movf	_tap_timer+2,w	;volatile
  7238  0B85  0024               	movlb	4	; select bank4
  7239  0B86  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7240  0B87  0020               	movlb	0	; select bank0
  7241  0B88  0846               	movf	_tap_timer+3,w	;volatile
  7242  0B89  0024               	movlb	4	; select bank4
  7243  0B8A  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7244  0B8B                     l9022:	
  7245                           
  7246                           ;SwitchTap.c: 130: }
  7247                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7248  0B8B  0021               	movlb	1	; select bank1
  7249  0B8C  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7250  0B8D  00A0               	movwf	___aldiv@divisor^(0+128)
  7251  0B8E  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7252  0B8F  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7253  0B90  0D89               	rlf	9,f
  7254  0B91  3B89               	subwfb	9,f
  7255  0B92  0989               	comf	9,f
  7256  0B93  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7257  0B94  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7258  0B95  0024               	movlb	4	; select bank4
  7259  0B96  0840               	movf	(_tap_total+3)^(0+512),w
  7260  0B97  0021               	movlb	1	; select bank1
  7261  0B98  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7262  0B99  0024               	movlb	4	; select bank4
  7263  0B9A  083F               	movf	(_tap_total+2)^(0+512),w
  7264  0B9B  0021               	movlb	1	; select bank1
  7265  0B9C  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7266  0B9D  0024               	movlb	4	; select bank4
  7267  0B9E  083E               	movf	(_tap_total+1)^(0+512),w
  7268  0B9F  0021               	movlb	1	; select bank1
  7269  0BA0  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7270  0BA1  0024               	movlb	4	; select bank4
  7271  0BA2  083D               	movf	_tap_total^(0+512),w
  7272  0BA3  0021               	movlb	1	; select bank1
  7273  0BA4  00A4               	movwf	___aldiv@dividend^(0+128)
  7274  0BA5  3198  20C9         	fcall	___aldiv
  7275  0BA7  0021               	movlb	1	; select bank1
  7276  0BA8  0823               	movf	(?___aldiv+3)^(0+128),w
  7277  0BA9  0023               	movlb	3	; select bank3
  7278  0BAA  00CD               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7279  0BAB  0021               	movlb	1	; select bank1
  7280  0BAC  0822               	movf	(?___aldiv+2)^(0+128),w
  7281  0BAD  0023               	movlb	3	; select bank3
  7282  0BAE  00CC               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7283  0BAF  0021               	movlb	1	; select bank1
  7284  0BB0  0821               	movf	(?___aldiv+1)^(0+128),w
  7285  0BB1  0023               	movlb	3	; select bank3
  7286  0BB2  00CB               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7287  0BB3  0021               	movlb	1	; select bank1
  7288  0BB4  0820               	movf	?___aldiv^(0+128),w
  7289  0BB5  0023               	movlb	3	; select bank3
  7290  0BB6  00CA               	movwf	_baseline_mod_time^(0+384)	;volatile
  7291                           
  7292                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7293  0BB7  0020               	movlb	0	; select bank0
  7294  0BB8  01E2               	clrf	_mod_time_changed
  7295  0BB9  0AE2               	incf	_mod_time_changed,f
  7296                           
  7297                           ;SwitchTap.c: 134: tap_timer = 0;
  7298  0BBA  3000               	movlw	0
  7299  0BBB  00C6               	movwf	_tap_timer+3	;volatile
  7300  0BBC  3000               	movlw	0
  7301  0BBD  00C5               	movwf	_tap_timer+2	;volatile
  7302  0BBE  3000               	movlw	0
  7303  0BBF  00C4               	movwf	_tap_timer+1	;volatile
  7304  0BC0  3000               	movlw	0
  7305  0BC1  00C3               	movwf	_tap_timer	;volatile
  7306                           
  7307                           ;SwitchTap.c: 136: tap_iteration++;
  7308  0BC2  3001               	movlw	1
  7309  0BC3  0023               	movlb	3	; select bank3
  7310  0BC4  07DE               	addwf	_tap_iteration^(0+384),f
  7311  0BC5  3000               	movlw	0
  7312  0BC6  3DDF               	addwfc	(_tap_iteration+1)^(0+384),f
  7313                           
  7314                           ;SwitchTap.c: 137: }
  7315                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7316  0BC7  0008               	return
  7317  0BC8                     l9030:	
  7318  0BC8  3019               	movlw	25
  7319  0BC9  0020               	movlb	0	; select bank0
  7320  0BCA  0254               	subwf	_switchTap_pressed,w
  7321  0BCB  1C03               	skipc
  7322  0BCC  0008               	return
  7323                           
  7324                           ;SwitchTap.c: 140: switchTap_down = 0;
  7325  0BCD  0023               	movlb	3	; select bank3
  7326  0BCE  01C9               	clrf	_switchTap_down^(0+384)
  7327                           
  7328                           ;SwitchTap.c: 141: switchTap_state = 0;
  7329  0BCF  01E5               	clrf	_switchTap_state^(0+384)
  7330                           
  7331                           ;SwitchTap.c: 147: setLongTapState(0);
  7332  0BD0  3000               	movlw	0
  7333  0BD1  0021               	movlb	1	; select bank1
  7334  0BD2  00A0               	movwf	setLongTapState@f_state^(0+128)
  7335  0BD3  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7336  0BD4  3187  27E5         	fcall	_setLongTapState
  7337                           
  7338                           ;SwitchTap.c: 149: longTap_timer = 0;
  7339  0BD6  0023               	movlb	3	; select bank3
  7340  0BD7  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7341  0BD8  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7342                           
  7343                           ;SwitchTap.c: 150: longTap_start = 0;
  7344  0BD9  0020               	movlb	0	; select bank0
  7345  0BDA  01CF               	clrf	_longTap_start
  7346                           
  7347                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7348  0BDB  3019               	movlw	25
  7349  0BDC  0021               	movlb	1	; select bank1
  7350  0BDD  00BC               	movwf	??_updateSwitchTap^(0+128)
  7351  0BDE  083C               	movf	??_updateSwitchTap^(0+128),w
  7352  0BDF  0020               	movlb	0	; select bank0
  7353  0BE0  00D4               	movwf	_switchTap_pressed
  7354  0BE1  0008               	return
  7355  0BE2                     __end_of_updateSwitchTap:	
  7356                           
  7357                           	psect	text4
  7358  07E5                     __ptext4:	
  7359 ;; *************** function _setLongTapState *****************
  7360 ;; Defined at:
  7361 ;;		line 167 in file "SwitchTap.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  f_state         2    0[BANK1 ] int 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7375 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7377 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7378 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7379 ;;Total ram usage:        4 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    3
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_updateSwitchTap
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _setLongTapState
  7391  07E5                     _setLongTapState:	
  7392                           
  7393                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _setLongTapState: [wreg+status,0]
  7397  07E5  0020               	movlb	0	; select bank0
  7398  07E6  0861               	movf	_longTap_state,w	;volatile
  7399  07E7  0021               	movlb	1	; select bank1
  7400  07E8  00A2               	movwf	??_setLongTapState^(0+128)
  7401  07E9  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7402  07EA  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7403  07EB  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7404  07EC  1D03               	skipz
  7405  07ED  2FF0               	goto	u8945
  7406  07EE  0820               	movf	setLongTapState@f_state^(0+128),w
  7407  07EF  0622               	xorwf	??_setLongTapState^(0+128),w
  7408  07F0                     u8945:	
  7409  07F0  1903               	btfsc	3,2
  7410  07F1  0008               	return
  7411                           
  7412                           ;SwitchTap.c: 169: longTap_state = f_state;
  7413  07F2  0820               	movf	setLongTapState@f_state^(0+128),w
  7414  07F3  00A2               	movwf	??_setLongTapState^(0+128)
  7415  07F4  0822               	movf	??_setLongTapState^(0+128),w
  7416  07F5  0020               	movlb	0	; select bank0
  7417  07F6  00E1               	movwf	_longTap_state	;volatile
  7418                           
  7419                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7420  07F7  0021               	movlb	1	; select bank1
  7421  07F8  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7422  07F9  0022               	movlb	2	; select bank2
  7423  07FA  1C03               	skipc
  7424  07FB  128D               	bcf	13,5	;volatile
  7425  07FC  1803               	skipnc
  7426  07FD  168D               	bsf	13,5	;volatile
  7427  07FE  0008               	return
  7428  07FF                     __end_of_setLongTapState:	
  7429                           
  7430                           	psect	text5
  7431  18C9                     __ptext5:	
  7432 ;; *************** function ___aldiv *****************
  7433 ;; Defined at:
  7434 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  divisor         4    0[BANK1 ] long 
  7437 ;;  dividend        4    4[BANK1 ] long 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  quotient        4   11[BANK1 ] long 
  7440 ;;  sign            1   10[BANK1 ] unsigned char 
  7441 ;;  counter         1    9[BANK1 ] unsigned char 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  4    0[BANK1 ] long 
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7451 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7452 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7453 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7454 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7455 ;;Total ram usage:       15 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    3
  7458 ;; This function calls:
  7459 ;;		Nothing
  7460 ;; This function is called by:
  7461 ;;		_updateSwitchTap
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function ___aldiv
  7467  18C9                     ___aldiv:	
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7471  18C9  0021               	movlb	1	; select bank1
  7472  18CA  01AA               	clrf	___aldiv@sign^(0+128)
  7473  18CB  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7474  18CC  28DA               	goto	l1996
  7475  18CD  09A0               	comf	___aldiv@divisor^(0+128),f
  7476  18CE  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7477  18CF  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7478  18D0  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7479  18D1  0AA0               	incf	___aldiv@divisor^(0+128),f
  7480  18D2  1903               	skipnz
  7481  18D3  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7482  18D4  1903               	skipnz
  7483  18D5  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7484  18D6  1903               	skipnz
  7485  18D7  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7486  18D8  01AA               	clrf	___aldiv@sign^(0+128)
  7487  18D9  0AAA               	incf	___aldiv@sign^(0+128),f
  7488  18DA                     l1996:	
  7489  18DA  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7490  18DB  28EB               	goto	l8552
  7491  18DC  09A4               	comf	___aldiv@dividend^(0+128),f
  7492  18DD  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7493  18DE  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7494  18DF  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7495  18E0  0AA4               	incf	___aldiv@dividend^(0+128),f
  7496  18E1  1903               	skipnz
  7497  18E2  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7498  18E3  1903               	skipnz
  7499  18E4  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7500  18E5  1903               	skipnz
  7501  18E6  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7502  18E7  3001               	movlw	1
  7503  18E8  00A8               	movwf	??___aldiv^(0+128)
  7504  18E9  0828               	movf	??___aldiv^(0+128),w
  7505  18EA  06AA               	xorwf	___aldiv@sign^(0+128),f
  7506  18EB                     l8552:	
  7507  18EB  3000               	movlw	0
  7508  18EC  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7509  18ED  3000               	movlw	0
  7510  18EE  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7511  18EF  3000               	movlw	0
  7512  18F0  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7513  18F1  3000               	movlw	0
  7514  18F2  00AB               	movwf	___aldiv@quotient^(0+128)
  7515  18F3  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7516  18F4  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7517  18F5  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7518  18F6  0420               	iorwf	___aldiv@divisor^(0+128),w
  7519  18F7  1903               	skipnz
  7520  18F8  2934               	goto	l8574
  7521  18F9  01A9               	clrf	___aldiv@counter^(0+128)
  7522  18FA  0AA9               	incf	___aldiv@counter^(0+128),f
  7523  18FB                     l8560:	
  7524  18FB  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7525  18FC  2909               	goto	l8562
  7526  18FD  3001               	movlw	1
  7527  18FE                     u9085:	
  7528  18FE  35A0               	lslf	___aldiv@divisor^(0+128),f
  7529  18FF  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7530  1900  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7531  1901  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7532  1902  0B89               	decfsz	9,f
  7533  1903  28FE               	goto	u9085
  7534  1904  3001               	movlw	1
  7535  1905  00A8               	movwf	??___aldiv^(0+128)
  7536  1906  0828               	movf	??___aldiv^(0+128),w
  7537  1907  07A9               	addwf	___aldiv@counter^(0+128),f
  7538  1908  28FB               	goto	l8560
  7539  1909                     l8562:	
  7540  1909  3001               	movlw	1
  7541  190A                     u9105:	
  7542  190A  35AB               	lslf	___aldiv@quotient^(0+128),f
  7543  190B  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7544  190C  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7545  190D  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7546  190E  0B89               	decfsz	9,f
  7547  190F  290A               	goto	u9105
  7548  1910  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7549  1911  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7550  1912  1D03               	skipz
  7551  1913  291E               	goto	u9115
  7552  1914  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7553  1915  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7554  1916  1D03               	skipz
  7555  1917  291E               	goto	u9115
  7556  1918  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7557  1919  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7558  191A  1D03               	skipz
  7559  191B  291E               	goto	u9115
  7560  191C  0820               	movf	___aldiv@divisor^(0+128),w
  7561  191D  0224               	subwf	___aldiv@dividend^(0+128),w
  7562  191E                     u9115:	
  7563  191E  1C03               	skipc
  7564  191F  2929               	goto	l8570
  7565  1920  0820               	movf	___aldiv@divisor^(0+128),w
  7566  1921  02A4               	subwf	___aldiv@dividend^(0+128),f
  7567  1922  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7568  1923  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7569  1924  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7570  1925  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7571  1926  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7572  1927  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7573  1928  142B               	bsf	___aldiv@quotient^(0+128),0
  7574  1929                     l8570:	
  7575  1929  3001               	movlw	1
  7576  192A                     u9125:	
  7577  192A  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7578  192B  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7579  192C  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7580  192D  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7581  192E  0B89               	decfsz	9,f
  7582  192F  292A               	goto	u9125
  7583  1930  3001               	movlw	1
  7584  1931  02A9               	subwf	___aldiv@counter^(0+128),f
  7585  1932  1D03               	btfss	3,2
  7586  1933  2909               	goto	l8562
  7587  1934                     l8574:	
  7588  1934  082A               	movf	___aldiv@sign^(0+128),w
  7589  1935  1903               	btfsc	3,2
  7590  1936  2942               	goto	l8578
  7591  1937  09AB               	comf	___aldiv@quotient^(0+128),f
  7592  1938  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7593  1939  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7594  193A  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7595  193B  0AAB               	incf	___aldiv@quotient^(0+128),f
  7596  193C  1903               	skipnz
  7597  193D  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7598  193E  1903               	skipnz
  7599  193F  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7600  1940  1903               	skipnz
  7601  1941  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7602  1942                     l8578:	
  7603  1942  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7604  1943  00A3               	movwf	(?___aldiv+3)^(0+128)
  7605  1944  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7606  1945  00A2               	movwf	(?___aldiv+2)^(0+128)
  7607  1946  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7608  1947  00A1               	movwf	(?___aldiv+1)^(0+128)
  7609  1948  082B               	movf	___aldiv@quotient^(0+128),w
  7610  1949  00A0               	movwf	?___aldiv^(0+128)
  7611  194A  0008               	return
  7612  194B                     __end_of___aldiv:	
  7613                           
  7614                           	psect	text6
  7615  122C                     __ptext6:	
  7616 ;; *************** function _updateSwitchBypass *****************
  7617 ;; Defined at:
  7618 ;;		line 34 in file "SwitchBypass.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7634 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7635 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7636 ;;Total ram usage:        2 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    8
  7639 ;; This function calls:
  7640 ;;		_setDoublePressState
  7641 ;;		_setLongBypassState
  7642 ;;		_setSwitchBypassRelays
  7643 ;;		_setSwitchBypassState
  7644 ;; This function is called by:
  7645 ;;		_main
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           
  7650                           ;psect for function _updateSwitchBypass
  7651  122C                     _updateSwitchBypass:	
  7652                           
  7653                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7657  122C  0020               	movlb	0	; select bank0
  7658  122D  1890               	btfsc	16,1	;volatile
  7659  122E  2A42               	goto	l8830
  7660                           
  7661                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7662  122F  0023               	movlb	3	; select bank3
  7663  1230  083F               	movf	(_switchBypass_pressed+1)^(0+384),w
  7664  1231  3A80               	xorlw	128
  7665  1232  0021               	movlb	1	; select bank1
  7666  1233  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7667  1234  3080               	movlw	128
  7668  1235  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7669  1236  1D03               	skipz
  7670  1237  2A3B               	goto	u9545
  7671  1238  3001               	movlw	1
  7672  1239  0023               	movlb	3	; select bank3
  7673  123A  023E               	subwf	_switchBypass_pressed^(0+384),w
  7674  123B                     u9545:	
  7675  123B  1C03               	skipc
  7676  123C  2A55               	goto	l8834
  7677                           
  7678                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7679  123D  30FF               	movlw	255
  7680  123E  0023               	movlb	3	; select bank3
  7681  123F  07BE               	addwf	_switchBypass_pressed^(0+384),f
  7682  1240  30FF               	movlw	255
  7683  1241  2A54               	goto	L2
  7684  1242                     l8830:	
  7685                           ;SwitchBypass.c: 44: }
  7686                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7687                           
  7688  1242  0023               	movlb	3	; select bank3
  7689  1243  083F               	movf	(_switchBypass_pressed+1)^(0+384),w
  7690  1244  3A80               	xorlw	128
  7691  1245  0021               	movlb	1	; select bank1
  7692  1246  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7693  1247  3080               	movlw	128
  7694  1248  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7695  1249  1D03               	skipz
  7696  124A  2A4E               	goto	u9555
  7697  124B  3019               	movlw	25
  7698  124C  0023               	movlb	3	; select bank3
  7699  124D  023E               	subwf	_switchBypass_pressed^(0+384),w
  7700  124E                     u9555:	
  7701  124E  1803               	skipnc
  7702  124F  2A55               	goto	l8834
  7703                           
  7704                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7705  1250  3001               	movlw	1
  7706  1251  0023               	movlb	3	; select bank3
  7707  1252  07BE               	addwf	_switchBypass_pressed^(0+384),f
  7708  1253  3000               	movlw	0
  7709  1254                     L2:	
  7710  1254  3DBF               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7711  1255                     l8834:	
  7712                           
  7713                           ;SwitchBypass.c: 47: }
  7714                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7715  1255  0023               	movlb	3	; select bank3
  7716  1256  083E               	movf	_switchBypass_pressed^(0+384),w
  7717  1257  043F               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7718  1258  1D03               	btfss	3,2
  7719  1259  2ADF               	goto	l8896
  7720                           
  7721                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7722  125A  0020               	movlb	0	; select bank0
  7723  125B  084D               	movf	_longBypass_start,w
  7724  125C  1D03               	btfss	3,2
  7725  125D  2A63               	goto	l8842
  7726                           
  7727                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7728  125E  01CD               	clrf	_longBypass_start
  7729  125F  0ACD               	incf	_longBypass_start,f
  7730                           
  7731                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7732  1260  0023               	movlb	3	; select bank3
  7733  1261  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7734  1262  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7735  1263                     l8842:	
  7736                           
  7737                           ;SwitchBypass.c: 59: }
  7738                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7739  1263  0020               	movlb	0	; select bank0
  7740  1264  085C               	movf	_long_press_limit+1,w
  7741  1265  0023               	movlb	3	; select bank3
  7742  1266  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7743  1267  1D03               	skipz
  7744  1268  2A6D               	goto	u9585
  7745  1269  0020               	movlb	0	; select bank0
  7746  126A  085B               	movf	_long_press_limit,w
  7747  126B  0023               	movlb	3	; select bank3
  7748  126C  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7749  126D                     u9585:	
  7750  126D  1C03               	skipc
  7751  126E  2AAB               	goto	l8868
  7752  126F  0843               	movf	_longBypass_down^(0+384),w
  7753  1270  1D03               	btfss	3,2
  7754  1271  2AAB               	goto	l8868
  7755  1272  0020               	movlb	0	; select bank0
  7756  1273  084C               	movf	_doubleTap_state,w	;volatile
  7757  1274  1D03               	btfss	3,2
  7758  1275  2AAB               	goto	l8868
  7759                           
  7760                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7761  1276  0022               	movlb	2	; select bank2
  7762  1277  110D               	bcf	13,2	;volatile
  7763                           
  7764                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7765  1278  0020               	movlb	0	; select bank0
  7766  1279  034F               	decf	_longTap_start,w
  7767  127A  1903               	btfsc	3,2
  7768  127B  2AA3               	goto	l8866
  7769                           
  7770                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7771  127C  0365               	decf	_switchBypass_state,w
  7772  127D  1D03               	btfss	3,2
  7773  127E  2AAB               	goto	l8868
  7774                           
  7775                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7776  127F  0023               	movlb	3	; select bank3
  7777  1280  01C3               	clrf	_longBypass_down^(0+384)
  7778  1281  0AC3               	incf	_longBypass_down^(0+384),f
  7779                           
  7780                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7781  1282  0020               	movlb	0	; select bank0
  7782  1283  084E               	movf	_longBypass_state,w	;volatile
  7783  1284  1D03               	btfss	3,2
  7784  1285  2A91               	goto	l8862
  7785                           
  7786                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7787  1286  0022               	movlb	2	; select bank2
  7788  1287  110D               	bcf	13,2	;volatile
  7789                           
  7790                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7791  1288  3001               	movlw	1
  7792  1289  0021               	movlb	1	; select bank1
  7793  128A  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7794  128B  3000               	movlw	0
  7795  128C  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7796  128D  31AE  26B1  3192   	fcall	_setLongBypassState
  7797                           
  7798                           ;SwitchBypass.c: 71: } else {
  7799  1290  2AAB               	goto	l8868
  7800  1291                     l8862:	
  7801                           
  7802                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7803  1291  3001               	movlw	1
  7804  1292  0021               	movlb	1	; select bank1
  7805  1293  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7806  1294  3000               	movlw	0
  7807  1295  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7808  1296  31AE  265D  3192   	fcall	_setSwitchBypassState
  7809                           
  7810                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7811  1299  3000               	movlw	0
  7812  129A  0021               	movlb	1	; select bank1
  7813  129B  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7814  129C  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7815  129D  31AE  26B1  3192   	fcall	_setLongBypassState
  7816                           
  7817                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7818  12A0  0022               	movlb	2	; select bank2
  7819  12A1  150D               	bsf	13,2	;volatile
  7820                           
  7821                           ;SwitchBypass.c: 75: }
  7822                           ;SwitchBypass.c: 76: }
  7823                           ;SwitchBypass.c: 77: } else {
  7824  12A2  2AAB               	goto	l8868
  7825  12A3                     l8866:	
  7826                           
  7827                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7828  12A3  3001               	movlw	1
  7829  12A4  0021               	movlb	1	; select bank1
  7830  12A5  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7831  12A6  3000               	movlw	0
  7832  12A7  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7833  12A8  31A1  21E0  3192   	fcall	_setDoublePressState
  7834  12AB                     l8868:	
  7835                           
  7836                           ;SwitchBypass.c: 79: }
  7837                           ;SwitchBypass.c: 80: }
  7838                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7839  12AB  0022               	movlb	2	; select bank2
  7840  12AC  120F               	bcf	15,4	;volatile
  7841                           
  7842                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7843  12AD  0020               	movlb	0	; select bank0
  7844  12AE  084C               	movf	_doubleTap_state,w	;volatile
  7845  12AF  1D03               	btfss	3,2
  7846  12B0  2ADB               	goto	l8894
  7847  12B1  0023               	movlb	3	; select bank3
  7848  12B2  0843               	movf	_longBypass_down^(0+384),w
  7849  12B3  1D03               	btfss	3,2
  7850  12B4  2ADB               	goto	l8894
  7851                           
  7852                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7853  12B5  0020               	movlb	0	; select bank0
  7854  12B6  0365               	decf	_switchBypass_state,w
  7855  12B7  1D03               	btfss	3,2
  7856  12B8  2AC7               	goto	l8882
  7857                           
  7858                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7859  12B9  0024               	movlb	4	; select bank4
  7860  12BA  0361               	decf	_switchBypass_up^(0+512),w
  7861  12BB  0462               	iorwf	(_switchBypass_up+1)^(0+512),w
  7862  12BC  1D03               	btfss	3,2
  7863  12BD  2ADB               	goto	l8894
  7864                           
  7865                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7866  12BE  0023               	movlb	3	; select bank3
  7867  12BF  01E1               	clrf	_currentBypassState^(0+384)
  7868  12C0  0AE1               	incf	_currentBypassState^(0+384),f
  7869                           
  7870                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7871  12C1  3001               	movlw	1
  7872  12C2  0024               	movlb	4	; select bank4
  7873  12C3  00CF               	movwf	_switchBypass_toggle^(0+512)
  7874  12C4  3000               	movlw	0
  7875  12C5  00D0               	movwf	(_switchBypass_toggle^(0+512)+1)
  7876                           
  7877                           ;SwitchBypass.c: 88: }
  7878                           ;SwitchBypass.c: 89: } else {
  7879  12C6  2ADB               	goto	l8894
  7880  12C7                     l8882:	
  7881                           
  7882                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7883  12C7  0023               	movlb	3	; select bank3
  7884  12C8  0341               	decf	_bypass_turning_on^(0+384),w
  7885  12C9  1903               	btfsc	3,2
  7886  12CA  2ADB               	goto	l8894
  7887                           
  7888                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7889  12CB  01E1               	clrf	_currentBypassState^(0+384)
  7890                           
  7891                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7892  12CC  01C1               	clrf	_bypass_turning_on^(0+384)
  7893  12CD  0AC1               	incf	_bypass_turning_on^(0+384),f
  7894                           
  7895                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7896  12CE  0024               	movlb	4	; select bank4
  7897  12CF  01CF               	clrf	_switchBypass_toggle^(0+512)
  7898  12D0  01D0               	clrf	(_switchBypass_toggle+1)^(0+512)
  7899                           
  7900                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7901  12D1  0020               	movlb	0	; select bank0
  7902  12D2  084E               	movf	_longBypass_state,w	;volatile
  7903  12D3  0021               	movlb	1	; select bank1
  7904  12D4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7905  12D5  083C               	movf	??_updateSwitchBypass^(0+128),w
  7906  12D6  0023               	movlb	3	; select bank3
  7907  12D7  00C4               	movwf	_longBypass_save^(0+384)
  7908                           
  7909                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7910  12D8  0020               	movlb	0	; select bank0
  7911  12D9  01CE               	clrf	_longBypass_state	;volatile
  7912                           
  7913                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7914  12DA  01CD               	clrf	_longBypass_start
  7915  12DB                     l8894:	
  7916                           
  7917                           ;SwitchBypass.c: 100: }
  7918                           ;SwitchBypass.c: 101: }
  7919                           ;SwitchBypass.c: 103: }
  7920                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7921  12DB  0024               	movlb	4	; select bank4
  7922  12DC  01E1               	clrf	_switchBypass_up^(0+512)
  7923  12DD  01E2               	clrf	(_switchBypass_up+1)^(0+512)
  7924                           
  7925                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7926  12DE  0008               	return
  7927  12DF                     l8896:	
  7928  12DF  0023               	movlb	3	; select bank3
  7929  12E0  083F               	movf	(_switchBypass_pressed+1)^(0+384),w
  7930  12E1  3A80               	xorlw	128
  7931  12E2  0021               	movlb	1	; select bank1
  7932  12E3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7933  12E4  3080               	movlw	128
  7934  12E5  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7935  12E6  1D03               	skipz
  7936  12E7  2AEB               	goto	u9695
  7937  12E8  3019               	movlw	25
  7938  12E9  0023               	movlb	3	; select bank3
  7939  12EA  023E               	subwf	_switchBypass_pressed^(0+384),w
  7940  12EB                     u9695:	
  7941  12EB  1C03               	skipc
  7942  12EC  0008               	return
  7943                           
  7944                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7945  12ED  0020               	movlb	0	; select bank0
  7946  12EE  034C               	decf	_doubleTap_state,w	;volatile
  7947  12EF  1D03               	btfss	3,2
  7948  12F0  2AFA               	goto	l8902
  7949                           
  7950                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7951  12F1  0023               	movlb	3	; select bank3
  7952  12F2  0861               	movf	_currentBypassState^(0+384),w
  7953  12F3  0021               	movlb	1	; select bank1
  7954  12F4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7955  12F5  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7956  12F6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7957  12F7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7958  12F8  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7959  12F9  2B2A               	goto	L3
  7960  12FA                     l8902:	
  7961                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7962                           
  7963  12FA  0023               	movlb	3	; select bank3
  7964  12FB  0341               	decf	_bypass_turning_on^(0+384),w
  7965  12FC  1D03               	btfss	3,2
  7966  12FD  2B1A               	goto	l8912
  7967                           
  7968                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7969  12FE  0344               	decf	_longBypass_save^(0+384),w
  7970  12FF  1D03               	btfss	3,2
  7971  1300  2B14               	goto	l8910
  7972                           
  7973                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7974  1301  0022               	movlb	2	; select bank2
  7975  1302  110D               	bcf	13,2	;volatile
  7976                           
  7977                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7978  1303  3001               	movlw	1
  7979  1304  0021               	movlb	1	; select bank1
  7980  1305  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7981  1306  3000               	movlw	0
  7982  1307  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7983  1308  31AE  26B1  3192   	fcall	_setLongBypassState
  7984                           
  7985                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  7986  130B  3001               	movlw	1
  7987  130C  0021               	movlb	1	; select bank1
  7988  130D  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  7989  130E  3000               	movlw	0
  7990  130F  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  7991  1310  31A0  2084  3192   	fcall	_setSwitchBypassRelays
  7992                           
  7993                           ;SwitchBypass.c: 114: } else {
  7994  1313  2B2E               	goto	l8920
  7995  1314                     l8910:	
  7996                           
  7997                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  7998  1314  3001               	movlw	1
  7999  1315  0021               	movlb	1	; select bank1
  8000  1316  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8001  1317  3000               	movlw	0
  8002  1318  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8003  1319  2B2B               	goto	L4
  8004  131A                     l8912:	
  8005                           ;SwitchBypass.c: 116: }
  8006                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8007                           
  8008  131A  0024               	movlb	4	; select bank4
  8009  131B  034F               	decf	_switchBypass_toggle^(0+512),w
  8010  131C  0450               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8011  131D  1D03               	btfss	3,2
  8012  131E  2B2E               	goto	l8920
  8013  131F  0023               	movlb	3	; select bank3
  8014  1320  0843               	movf	_longBypass_down^(0+384),w
  8015  1321  1D03               	btfss	3,2
  8016  1322  2B2E               	goto	l8920
  8017  1323  0020               	movlb	0	; select bank0
  8018  1324  084C               	movf	_doubleTap_state,w	;volatile
  8019  1325  1D03               	btfss	3,2
  8020  1326  2B2E               	goto	l8920
  8021                           
  8022                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8023  1327  3000               	movlw	0
  8024  1328  0021               	movlb	1	; select bank1
  8025  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8026  132A                     L3:	
  8027  132A  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8028  132B                     L4:	
  8029  132B  31AE  265D  3192   	fcall	_setSwitchBypassState
  8030  132E                     l8920:	
  8031                           
  8032                           ;SwitchBypass.c: 120: }
  8033                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8034  132E  0023               	movlb	3	; select bank3
  8035  132F  01C3               	clrf	_longBypass_down^(0+384)
  8036                           
  8037                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8038  1330  0020               	movlb	0	; select bank0
  8039  1331  084E               	movf	_longBypass_state,w	;volatile
  8040  1332  1D03               	btfss	3,2
  8041  1333  2B3A               	goto	l8926
  8042                           
  8043                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8044  1334  0C65               	rrf	_switchBypass_state,w
  8045  1335  0022               	movlb	2	; select bank2
  8046  1336  1C03               	skipc
  8047  1337  110D               	bcf	13,2	;volatile
  8048  1338  1803               	skipnc
  8049  1339  150D               	bsf	13,2	;volatile
  8050  133A                     l8926:	
  8051                           
  8052                           ;SwitchBypass.c: 125: }
  8053                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8054  133A  3000               	movlw	0
  8055  133B  0021               	movlb	1	; select bank1
  8056  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8057  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8058  133E  31A1  21E0         	fcall	_setDoublePressState
  8059                           
  8060                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8061  1340  0020               	movlb	0	; select bank0
  8062  1341  01CD               	clrf	_longBypass_start
  8063                           
  8064                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8065  1342  0023               	movlb	3	; select bank3
  8066  1343  01C1               	clrf	_bypass_turning_on^(0+384)
  8067                           
  8068                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8069  1344  0024               	movlb	4	; select bank4
  8070  1345  01CF               	clrf	_switchBypass_toggle^(0+512)
  8071  1346  01D0               	clrf	(_switchBypass_toggle+1)^(0+512)
  8072                           
  8073                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8074  1347  3001               	movlw	1
  8075  1348  00E1               	movwf	_switchBypass_up^(0+512)
  8076  1349  3000               	movlw	0
  8077  134A  00E2               	movwf	(_switchBypass_up^(0+512)+1)
  8078                           
  8079                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8080  134B  3019               	movlw	25
  8081  134C  0023               	movlb	3	; select bank3
  8082  134D  00BE               	movwf	_switchBypass_pressed^(0+384)
  8083  134E  3000               	movlw	0
  8084  134F  00BF               	movwf	(_switchBypass_pressed^(0+384)+1)
  8085  1350  0008               	return
  8086  1351                     __end_of_updateSwitchBypass:	
  8087                           
  8088                           	psect	text7
  8089  2EB1                     __ptext7:	
  8090 ;; *************** function _setLongBypassState *****************
  8091 ;; Defined at:
  8092 ;;		line 163 in file "SwitchBypass.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  f_state         2    0[BANK1 ] int 
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, status,0
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8106 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8108 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8109 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8110 ;;Total ram usage:        4 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    3
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		_updateSwitchBypass
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _setLongBypassState
  8122  2EB1                     _setLongBypassState:	
  8123                           
  8124                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8128  2EB1  0020               	movlb	0	; select bank0
  8129  2EB2  084E               	movf	_longBypass_state,w	;volatile
  8130  2EB3  0021               	movlb	1	; select bank1
  8131  2EB4  00A2               	movwf	??_setLongBypassState^(0+128)
  8132  2EB5  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8133  2EB6  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8134  2EB7  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8135  2EB8  1D03               	skipz
  8136  2EB9  2EBC               	goto	u8895
  8137  2EBA  0820               	movf	setLongBypassState@f_state^(0+128),w
  8138  2EBB  0622               	xorwf	??_setLongBypassState^(0+128),w
  8139  2EBC                     u8895:	
  8140  2EBC  1903               	btfsc	3,2
  8141  2EBD  0008               	return
  8142                           
  8143                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8144  2EBE  0820               	movf	setLongBypassState@f_state^(0+128),w
  8145  2EBF  00A2               	movwf	??_setLongBypassState^(0+128)
  8146  2EC0  0822               	movf	??_setLongBypassState^(0+128),w
  8147  2EC1  0020               	movlb	0	; select bank0
  8148  2EC2  00CE               	movwf	_longBypass_state	;volatile
  8149                           
  8150                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8151  2EC3  0021               	movlb	1	; select bank1
  8152  2EC4  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8153  2EC5  0022               	movlb	2	; select bank2
  8154  2EC6  1C03               	skipc
  8155  2EC7  118D               	bcf	13,3	;volatile
  8156  2EC8  1803               	skipnc
  8157  2EC9  158D               	bsf	13,3	;volatile
  8158                           
  8159                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8160  2ECA  0021               	movlb	1	; select bank1
  8161  2ECB  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8162  2ECC  0020               	movlb	0	; select bank0
  8163  2ECD  1C03               	skipc
  8164  2ECE  120E               	bcf	14,4	;volatile
  8165  2ECF  1803               	skipnc
  8166  2ED0  160E               	bsf	14,4	;volatile
  8167  2ED1  0008               	return
  8168  2ED2                     __end_of_setLongBypassState:	
  8169                           
  8170                           	psect	text8
  8171  21E0                     __ptext8:	
  8172 ;; *************** function _setDoublePressState *****************
  8173 ;; Defined at:
  8174 ;;		line 21 in file "preset_programming.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  f_state         2   24[BANK1 ] int 
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8188 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8190 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8191 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8192 ;;Total ram usage:        4 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    7
  8195 ;; This function calls:
  8196 ;;		_resetRingLEDs
  8197 ;;		_setPedalMode
  8198 ;;		_setPresetDisplay
  8199 ;;		_showSave
  8200 ;;		_wait_ms
  8201 ;; This function is called by:
  8202 ;;		_updateSwitchBypass
  8203 ;;		_updateSwitchTap
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           
  8208                           ;psect for function _setDoublePressState
  8209  21E0                     _setDoublePressState:	
  8210                           
  8211                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8212                           
  8213                           ;incstack = 0
  8214                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8215  21E0  0020               	movlb	0	; select bank0
  8216  21E1  084C               	movf	_doubleTap_state,w	;volatile
  8217  21E2  0021               	movlb	1	; select bank1
  8218  21E3  00BA               	movwf	??_setDoublePressState^(0+128)
  8219  21E4  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8220  21E5  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8221  21E6  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8222  21E7  1D03               	skipz
  8223  21E8  29EB               	goto	u8905
  8224  21E9  0838               	movf	setDoublePressState@f_state^(0+128),w
  8225  21EA  063A               	xorwf	??_setDoublePressState^(0+128),w
  8226  21EB                     u8905:	
  8227  21EB  1903               	btfsc	3,2
  8228  21EC  0008               	return
  8229                           
  8230                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8231  21ED  0838               	movf	setDoublePressState@f_state^(0+128),w
  8232  21EE  00BA               	movwf	??_setDoublePressState^(0+128)
  8233  21EF  083A               	movf	??_setDoublePressState^(0+128),w
  8234  21F0  0020               	movlb	0	; select bank0
  8235  21F1  00CC               	movwf	_doubleTap_state	;volatile
  8236                           
  8237                           ;preset_programming.c: 24: if (f_state == 1) {
  8238  21F2  0021               	movlb	1	; select bank1
  8239  21F3  0338               	decf	setDoublePressState@f_state^(0+128),w
  8240  21F4  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8241  21F5  1D03               	btfss	3,2
  8242  21F6  29FA               	goto	l8452
  8243                           
  8244                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8245  21F7  0022               	movlb	2	; select bank2
  8246  21F8  120D               	bcf	13,4	;volatile
  8247                           
  8248                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8249  21F9  128D               	bcf	13,5	;volatile
  8250  21FA                     l8452:	
  8251                           
  8252                           ;preset_programming.c: 30: }
  8253                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8254  21FA  0020               	movlb	0	; select bank0
  8255  21FB  034C               	decf	_doubleTap_state,w	;volatile
  8256  21FC  1D03               	btfss	3,2
  8257  21FD  2A16               	goto	l8468
  8258                           
  8259                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8260  21FE  0851               	movf	_presetSaveMode,w
  8261  21FF  1D03               	btfss	3,2
  8262  2200  2A0B               	goto	l8460
  8263                           
  8264                           ;preset_programming.c: 34: presetSaveMode = 1;
  8265  2201  01D1               	clrf	_presetSaveMode
  8266  2202  0AD1               	incf	_presetSaveMode,f
  8267                           
  8268                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8269  2203  0022               	movlb	2	; select bank2
  8270  2204  108D               	bcf	13,1	;volatile
  8271                           
  8272                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8273  2205  0020               	movlb	0	; select bank0
  8274  2206  0864               	movf	_presetChannel,w
  8275  2207  31A0  20F2  31A1   	fcall	_setPresetDisplay
  8276                           
  8277                           ;preset_programming.c: 37: } else {
  8278  220A  2A16               	goto	l8468
  8279  220B                     l8460:	
  8280                           
  8281                           ;preset_programming.c: 39: presetSaveMode = 0;
  8282  220B  0020               	movlb	0	; select bank0
  8283  220C  01D1               	clrf	_presetSaveMode
  8284                           
  8285                           ;preset_programming.c: 40: setPedalMode();
  8286  220D  31AE  26D2  31A1   	fcall	_setPedalMode
  8287                           
  8288                           ;preset_programming.c: 41: resetRingLEDs();
  8289  2210  31AE  2627  31A1   	fcall	_resetRingLEDs
  8290                           
  8291                           ;preset_programming.c: 42: showSave();
  8292  2213  31AD  25FB  31A1   	fcall	_showSave
  8293  2216                     l8468:	
  8294                           
  8295                           ;preset_programming.c: 44: }
  8296                           ;preset_programming.c: 45: }
  8297                           ;preset_programming.c: 47: wait_ms(20);
  8298  2216  3014               	movlw	20
  8299  2217  0021               	movlb	1	; select bank1
  8300  2218  00AC               	movwf	wait_ms@timeSec^(0+128)
  8301  2219  3000               	movlw	0
  8302  221A  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8303  221B  31A0  2052         	fcall	_wait_ms
  8304  221D  0008               	return
  8305  221E                     __end_of_setDoublePressState:	
  8306                           
  8307                           	psect	text9
  8308  2DFB                     __ptext9:	
  8309 ;; *************** function _showSave *****************
  8310 ;; Defined at:
  8311 ;;		line 112 in file "LEDs.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;		None
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;		None
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      void 
  8318 ;; Registers used:
  8319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8327 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8328 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8329 ;;Total ram usage:        1 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    6
  8332 ;; This function calls:
  8333 ;;		_ring_tactiles
  8334 ;;		_solidring_tactiles
  8335 ;; This function is called by:
  8336 ;;		_setDoublePressState
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           
  8341                           ;psect for function _showSave
  8342  2DFB                     _showSave:	
  8343                           
  8344                           ;LEDs.c: 113: suspend_blink = 1;
  8345                           
  8346                           ;incstack = 0
  8347                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8348  2DFB  3001               	movlw	1
  8349  2DFC  0021               	movlb	1	; select bank1
  8350  2DFD  00B7               	movwf	??_showSave^(0+128)
  8351  2DFE  0837               	movf	??_showSave^(0+128),w
  8352  2DFF  0020               	movlb	0	; select bank0
  8353  2E00  00D3               	movwf	_suspend_blink	;volatile
  8354                           
  8355                           ;LEDs.c: 114: ring_tactiles();
  8356  2E01  31A4  2492  31AD   	fcall	_ring_tactiles
  8357                           
  8358                           ;LEDs.c: 115: ring_tactiles();
  8359  2E04  31A4  2492  31AD   	fcall	_ring_tactiles
  8360                           
  8361                           ;LEDs.c: 116: solidring_tactiles();
  8362  2E07  31A2  225E  31AD   	fcall	_solidring_tactiles
  8363                           
  8364                           ;LEDs.c: 117: solidring_tactiles();
  8365  2E0A  31A2  225E         	fcall	_solidring_tactiles
  8366                           
  8367                           ;LEDs.c: 118: suspend_blink = 0;
  8368  2E0C  0020               	movlb	0	; select bank0
  8369  2E0D  01D3               	clrf	_suspend_blink	;volatile
  8370  2E0E  0008               	return
  8371  2E0F                     __end_of_showSave:	
  8372                           
  8373                           	psect	text10
  8374  225E                     __ptext10:	
  8375 ;; *************** function _solidring_tactiles *****************
  8376 ;; Defined at:
  8377 ;;		line 208 in file "LEDs.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8392 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8393 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8394 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8395 ;;Total ram usage:        3 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    5
  8398 ;; This function calls:
  8399 ;;		_set_leds_bottom
  8400 ;;		_set_leds_top
  8401 ;;		_wait_ms
  8402 ;; This function is called by:
  8403 ;;		_showSave
  8404 ;;		_showBootSequence
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _solidring_tactiles
  8410  225E                     _solidring_tactiles:	
  8411                           
  8412                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8416  225E  301E               	movlw	30
  8417  225F  0021               	movlb	1	; select bank1
  8418  2260  00B2               	movwf	??_solidring_tactiles^(0+128)
  8419  2261  0832               	movf	??_solidring_tactiles^(0+128),w
  8420  2262  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8421                           
  8422                           ;LEDs.c: 210: set_leds_top(100, 1);
  8423  2263  3064               	movlw	100
  8424  2264  00A0               	movwf	set_leds_top@x^(0+128)
  8425  2265  3000               	movlw	0
  8426  2266  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8427  2267  3001               	movlw	1
  8428  2268  00A2               	movwf	set_leds_top@ledState^(0+128)
  8429  2269  3000               	movlw	0
  8430  226A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8431  226B  31A5  2585  31A2   	fcall	_set_leds_top
  8432                           
  8433                           ;LEDs.c: 211: set_leds_bottom(100);
  8434  226E  3064               	movlw	100
  8435  226F  0021               	movlb	1	; select bank1
  8436  2270  00A0               	movwf	set_leds_bottom@x^(0+128)
  8437  2271  3000               	movlw	0
  8438  2272  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8439  2273  31A1  212C  31A2   	fcall	_set_leds_bottom
  8440                           
  8441                           ;LEDs.c: 212: wait_ms(ring_delay);
  8442  2276  0021               	movlb	1	; select bank1
  8443  2277  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8444  2278  00B2               	movwf	??_solidring_tactiles^(0+128)
  8445  2279  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8446  227A  0832               	movf	??_solidring_tactiles^(0+128),w
  8447  227B  00AC               	movwf	wait_ms@timeSec^(0+128)
  8448  227C  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8449  227D  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8450  227E  31A0  2052  31A2   	fcall	_wait_ms
  8451                           
  8452                           ;LEDs.c: 214: set_leds_top(0, 1);
  8453  2281  3000               	movlw	0
  8454  2282  0021               	movlb	1	; select bank1
  8455  2283  00A0               	movwf	set_leds_top@x^(0+128)
  8456  2284  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8457  2285  3001               	movlw	1
  8458  2286  00A2               	movwf	set_leds_top@ledState^(0+128)
  8459  2287  3000               	movlw	0
  8460  2288  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8461  2289  31A5  2585  31A2   	fcall	_set_leds_top
  8462                           
  8463                           ;LEDs.c: 215: set_leds_bottom(0);
  8464  228C  3000               	movlw	0
  8465  228D  0021               	movlb	1	; select bank1
  8466  228E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8467  228F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8468  2290  31A1  212C  31A2   	fcall	_set_leds_bottom
  8469                           
  8470                           ;LEDs.c: 216: wait_ms(ring_delay);
  8471  2293  0021               	movlb	1	; select bank1
  8472  2294  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8473  2295  00B2               	movwf	??_solidring_tactiles^(0+128)
  8474  2296  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8475  2297  0832               	movf	??_solidring_tactiles^(0+128),w
  8476  2298  00AC               	movwf	wait_ms@timeSec^(0+128)
  8477  2299  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8478  229A  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8479  229B  31A0  2052         	fcall	_wait_ms
  8480  229D  0008               	return
  8481  229E                     __end_of_solidring_tactiles:	
  8482                           
  8483                           	psect	text11
  8484  2492                     __ptext11:	
  8485 ;; *************** function _ring_tactiles *****************
  8486 ;; Defined at:
  8487 ;;		line 196 in file "LEDs.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;		None
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  iLed            2   21[BANK1 ] int 
  8492 ;;  iLed            2   19[BANK1 ] int 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      void 
  8495 ;; Registers used:
  8496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8503 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8505 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8506 ;;Total ram usage:        5 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    5
  8509 ;; This function calls:
  8510 ;;		_set_leds_bottom
  8511 ;;		_set_leds_top
  8512 ;;		_wait_ms
  8513 ;; This function is called by:
  8514 ;;		_showSave
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           
  8519                           ;psect for function _ring_tactiles
  8520  2492                     _ring_tactiles:	
  8521                           
  8522                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8523                           
  8524                           ;incstack = 0
  8525                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8526  2492  3001               	movlw	1
  8527  2493  0021               	movlb	1	; select bank1
  8528  2494  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8529  2495  3000               	movlw	0
  8530  2496  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8531  2497  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8532  2498  3A80               	xorlw	128
  8533  2499  00B2               	movwf	??_ring_tactiles^(0+128)
  8534  249A  3080               	movlw	128
  8535  249B  0232               	subwf	??_ring_tactiles^(0+128),w
  8536  249C  1D03               	skipz
  8537  249D  2CA0               	goto	u8385
  8538  249E  3007               	movlw	7
  8539  249F  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8540  24A0                     u8385:	
  8541  24A0  1803               	btfsc	3,0
  8542  24A1  2CC6               	goto	l7960
  8543  24A2                     l7952:	
  8544                           
  8545                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8546  24A2  0021               	movlb	1	; select bank1
  8547  24A3  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8548  24A4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8549  24A5  0833               	movf	ring_tactiles@iLed^(0+128),w
  8550  24A6  00A0               	movwf	set_leds_top@x^(0+128)
  8551  24A7  3001               	movlw	1
  8552  24A8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8553  24A9  3000               	movlw	0
  8554  24AA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8555  24AB  31A5  2585  31A4   	fcall	_set_leds_top
  8556                           
  8557                           ;LEDs.c: 199: wait_ms(5);
  8558  24AE  3005               	movlw	5
  8559  24AF  0021               	movlb	1	; select bank1
  8560  24B0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8561  24B1  3000               	movlw	0
  8562  24B2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8563  24B3  31A0  2052  31A4   	fcall	_wait_ms
  8564  24B6  3001               	movlw	1
  8565  24B7  0021               	movlb	1	; select bank1
  8566  24B8  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8567  24B9  3000               	movlw	0
  8568  24BA  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8569  24BB  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8570  24BC  3A80               	xorlw	128
  8571  24BD  00B2               	movwf	??_ring_tactiles^(0+128)
  8572  24BE  3080               	movlw	128
  8573  24BF  0232               	subwf	??_ring_tactiles^(0+128),w
  8574  24C0  1D03               	skipz
  8575  24C1  2CC4               	goto	u8395
  8576  24C2  3007               	movlw	7
  8577  24C3  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8578  24C4                     u8395:	
  8579  24C4  1C03               	skipc
  8580  24C5  2CA2               	goto	l7952
  8581  24C6                     l7960:	
  8582                           
  8583                           ;LEDs.c: 200: }
  8584                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8585  24C6  3005               	movlw	5
  8586  24C7  0021               	movlb	1	; select bank1
  8587  24C8  00B5               	movwf	ring_tactiles@iLed_1533^(0+128)
  8588  24C9  3000               	movlw	0
  8589  24CA  00B6               	movwf	(ring_tactiles@iLed_1533^(0+128)+1)
  8590  24CB                     L5:	
  8591  24CB  1BB6               	btfsc	(ring_tactiles@iLed_1533+1)^(0+128),7
  8592  24CC  0008               	return
  8593                           
  8594                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8595  24CD  0836               	movf	(ring_tactiles@iLed_1533+1)^(0+128),w
  8596  24CE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8597  24CF  0835               	movf	ring_tactiles@iLed_1533^(0+128),w
  8598  24D0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8599  24D1  31A1  212C  31A4   	fcall	_set_leds_bottom
  8600                           
  8601                           ;LEDs.c: 203: wait_ms(5);
  8602  24D4  3005               	movlw	5
  8603  24D5  0021               	movlb	1	; select bank1
  8604  24D6  00AC               	movwf	wait_ms@timeSec^(0+128)
  8605  24D7  3000               	movlw	0
  8606  24D8  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8607  24D9  31A0  2052  31A4   	fcall	_wait_ms
  8608  24DC  30FF               	movlw	255
  8609  24DD  0021               	movlb	1	; select bank1
  8610  24DE  07B5               	addwf	ring_tactiles@iLed_1533^(0+128),f
  8611  24DF  30FF               	movlw	255
  8612  24E0  3DB6               	addwfc	(ring_tactiles@iLed_1533+1)^(0+128),f
  8613  24E1  2CCB               	goto	L5
  8614  24E2                     __end_of_ring_tactiles:	
  8615                           
  8616                           	psect	text12
  8617  2ED2                     __ptext12:	
  8618 ;; *************** function _setPedalMode *****************
  8619 ;; Defined at:
  8620 ;;		line 119 in file "tactiles.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;		None
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;		None
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  1    wreg      void 
  8627 ;; Registers used:
  8628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8629 ;; Tracked objects:
  8630 ;;		On entry : 0/0
  8631 ;;		On exit  : 0/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8638 ;;Total ram usage:        0 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    5
  8641 ;; This function calls:
  8642 ;;		_resetRingLEDs
  8643 ;;		_setExpressionDisplay
  8644 ;;		_setPresetDisplay
  8645 ;; This function is called by:
  8646 ;;		_update_mode
  8647 ;;		_setDoublePressState
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           
  8652                           ;psect for function _setPedalMode
  8653  2ED2                     _setPedalMode:	
  8654                           
  8655                           ;tactiles.c: 120: switch (mode2_state) {
  8656                           
  8657                           ;incstack = 0
  8658                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8659  2ED2  2EE9               	goto	l8160
  8660  2ED3                     l990:	
  8661                           ;tactiles.c: 121: case 0:
  8662                           
  8663                           
  8664                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8665  2ED3  0022               	movlb	2	; select bank2
  8666  2ED4  108D               	bcf	13,1	;volatile
  8667                           
  8668                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8669  2ED5  100D               	bcf	13,0	;volatile
  8670                           
  8671                           ;tactiles.c: 124: resetRingLEDs();
  8672  2ED6  31AE  2627         	fcall	_resetRingLEDs
  8673                           
  8674                           ;tactiles.c: 125: break;
  8675  2ED8  0008               	return
  8676  2ED9                     l992:	
  8677                           ;tactiles.c: 126: case 1:
  8678                           
  8679                           
  8680                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8681  2ED9  0022               	movlb	2	; select bank2
  8682  2EDA  108D               	bcf	13,1	;volatile
  8683                           
  8684                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8685  2EDB  140D               	bsf	13,0	;volatile
  8686                           
  8687                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8688  2EDC  0020               	movlb	0	; select bank0
  8689  2EDD  0864               	movf	_presetChannel,w
  8690  2EDE  31A0  20F2         	fcall	_setPresetDisplay
  8691                           
  8692                           ;tactiles.c: 130: break;
  8693  2EE0  0008               	return
  8694  2EE1                     l993:	
  8695                           ;tactiles.c: 131: case 2:
  8696                           
  8697                           
  8698                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8699  2EE1  0022               	movlb	2	; select bank2
  8700  2EE2  148D               	bsf	13,1	;volatile
  8701                           
  8702                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8703  2EE3  100D               	bcf	13,0	;volatile
  8704                           
  8705                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8706  2EE4  0020               	movlb	0	; select bank0
  8707  2EE5  0860               	movf	_expressionChannel,w
  8708  2EE6  31AE  260F         	fcall	_setExpressionDisplay
  8709                           
  8710                           ;tactiles.c: 136: }
  8711                           
  8712                           ;tactiles.c: 135: break;
  8713  2EE8  0008               	return
  8714  2EE9                     l8160:	
  8715  2EE9  0020               	movlb	0	; select bank0
  8716  2EEA  0850               	movf	_mode2_state,w
  8717                           
  8718                           ; Switch size 1, requested type "space"
  8719                           ; Number of cases is 3, Range of values is 0 to 2
  8720                           ; switch strategies available:
  8721                           ; Name         Instructions Cycles
  8722                           ; simple_byte           10     6 (average)
  8723                           ; direct_byte           12     6 (fixed)
  8724                           ; jumptable            260     6 (fixed)
  8725                           ;	Chosen strategy is simple_byte
  8726  2EEB  3A00               	xorlw	0	; case 0
  8727  2EEC  1903               	skipnz
  8728  2EED  2ED3               	goto	l990
  8729  2EEE  3A01               	xorlw	1	; case 1
  8730  2EEF  1903               	skipnz
  8731  2EF0  2ED9               	goto	l992
  8732  2EF1  3A03               	xorlw	3	; case 2
  8733  2EF2  1903               	skipnz
  8734  2EF3  2EE1               	goto	l993
  8735  2EF4  2EF5               	goto	l994
  8736  2EF5                     l994:	
  8737  2EF5  0008               	return
  8738  2EF6                     __end_of_setPedalMode:	
  8739                           
  8740                           	psect	text13
  8741  20F2                     __ptext13:	
  8742 ;; *************** function _setPresetDisplay *****************
  8743 ;; Defined at:
  8744 ;;		line 51 in file "preset_programming.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  ledChannel      1    wreg     unsigned char 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8749 ;; Return value:  Size  Location     Type
  8750 ;;                  1    wreg      void 
  8751 ;; Registers used:
  8752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8759 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8760 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8761 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8762 ;;Total ram usage:        3 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:    4
  8765 ;; This function calls:
  8766 ;;		_set_leds_bottom
  8767 ;;		_set_leds_top
  8768 ;; This function is called by:
  8769 ;;		_setPedalMode
  8770 ;;		_update_selectMode
  8771 ;;		_setDoublePressState
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           
  8776                           ;psect for function _setPresetDisplay
  8777  20F2                     _setPresetDisplay:	
  8778                           
  8779                           ;incstack = 0
  8780                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8781                           ;setPresetDisplay@ledChannel stored from wreg
  8782  20F2  0021               	movlb	1	; select bank1
  8783  20F3  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8784                           
  8785                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8786  20F4  3006               	movlw	6
  8787  20F5  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8788  20F6  1803               	skipnc
  8789  20F7  290E               	goto	l7980
  8790                           
  8791                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8792  20F8  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8793  20F9  00A4               	movwf	??_setPresetDisplay^(0+128)
  8794  20FA  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8795  20FB  0824               	movf	??_setPresetDisplay^(0+128),w
  8796  20FC  00A0               	movwf	set_leds_top@x^(0+128)
  8797  20FD  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8798  20FE  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8799  20FF  3001               	movlw	1
  8800  2100  00A2               	movwf	set_leds_top@ledState^(0+128)
  8801  2101  3000               	movlw	0
  8802  2102  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8803  2103  31A5  2585  31A0   	fcall	_set_leds_top
  8804                           
  8805                           ;preset_programming.c: 54: set_leds_bottom(6);
  8806  2106  3006               	movlw	6
  8807  2107  0021               	movlb	1	; select bank1
  8808  2108  00A0               	movwf	set_leds_bottom@x^(0+128)
  8809  2109  3000               	movlw	0
  8810  210A  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8811  210B  31A1  212C         	fcall	_set_leds_bottom
  8812                           
  8813                           ;preset_programming.c: 55: } else {
  8814  210D  0008               	return
  8815  210E                     l7980:	
  8816                           
  8817                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8818  210E  3006               	movlw	6
  8819  210F  0021               	movlb	1	; select bank1
  8820  2110  00A0               	movwf	set_leds_top@x^(0+128)
  8821  2111  3000               	movlw	0
  8822  2112  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8823  2113  3001               	movlw	1
  8824  2114  00A2               	movwf	set_leds_top@ledState^(0+128)
  8825  2115  3000               	movlw	0
  8826  2116  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8827  2117  31A5  2585  31A0   	fcall	_set_leds_top
  8828                           
  8829                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8830  211A  0021               	movlb	1	; select bank1
  8831  211B  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8832  211C  00A4               	movwf	??_setPresetDisplay^(0+128)
  8833  211D  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8834  211E  09A4               	comf	??_setPresetDisplay^(0+128),f
  8835  211F  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8836  2120  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8837  2121  1903               	skipnz
  8838  2122  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8839  2123  0824               	movf	??_setPresetDisplay^(0+128),w
  8840  2124  3E0B               	addlw	11
  8841  2125  00A0               	movwf	set_leds_bottom@x^(0+128)
  8842  2126  3000               	movlw	0
  8843  2127  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8844  2128  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8845  2129  31A1  212C         	fcall	_set_leds_bottom
  8846  212B  0008               	return
  8847  212C                     __end_of_setPresetDisplay:	
  8848                           
  8849                           	psect	text14
  8850  2E0F                     __ptext14:	
  8851 ;; *************** function _setExpressionDisplay *****************
  8852 ;; Defined at:
  8853 ;;		line 66 in file "preset_programming.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;  ledChannel      1    wreg     unsigned char 
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  1    wreg      void 
  8860 ;; Registers used:
  8861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8868 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8869 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8870 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8871 ;;Total ram usage:        3 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    4
  8874 ;; This function calls:
  8875 ;;		_set_leds_bottom
  8876 ;;		_set_leds_top
  8877 ;; This function is called by:
  8878 ;;		_setPedalMode
  8879 ;;		_update_selectMode
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           
  8884                           ;psect for function _setExpressionDisplay
  8885  2E0F                     _setExpressionDisplay:	
  8886                           
  8887                           ;incstack = 0
  8888                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8889                           ;setExpressionDisplay@ledChannel stored from wreg
  8890  2E0F  0021               	movlb	1	; select bank1
  8891  2E10  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8892                           
  8893                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8894  2E11  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8895  2E12  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8896  2E13  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8897  2E14  0824               	movf	??_setExpressionDisplay^(0+128),w
  8898  2E15  00A0               	movwf	set_leds_top@x^(0+128)
  8899  2E16  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8900  2E17  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8901  2E18  3001               	movlw	1
  8902  2E19  00A2               	movwf	set_leds_top@ledState^(0+128)
  8903  2E1A  3000               	movlw	0
  8904  2E1B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8905  2E1C  31A5  2585  31AE   	fcall	_set_leds_top
  8906                           
  8907                           ;preset_programming.c: 68: set_leds_bottom(6);
  8908  2E1F  3006               	movlw	6
  8909  2E20  0021               	movlb	1	; select bank1
  8910  2E21  00A0               	movwf	set_leds_bottom@x^(0+128)
  8911  2E22  3000               	movlw	0
  8912  2E23  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8913  2E24  31A1  212C         	fcall	_set_leds_bottom
  8914  2E26  0008               	return
  8915  2E27                     __end_of_setExpressionDisplay:	
  8916                           
  8917                           	psect	text15
  8918  2E27                     __ptext15:	
  8919 ;; *************** function _resetRingLEDs *****************
  8920 ;; Defined at:
  8921 ;;		line 61 in file "preset_programming.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;		None
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;		None
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8939 ;;Total ram usage:        0 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    4
  8942 ;; This function calls:
  8943 ;;		_set_leds_bottom
  8944 ;;		_set_leds_top
  8945 ;; This function is called by:
  8946 ;;		_update_mode
  8947 ;;		_setPedalMode
  8948 ;;		_setDoublePressState
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _resetRingLEDs
  8954  2E27                     _resetRingLEDs:	
  8955                           
  8956                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8960  2E27  0020               	movlb	0	; select bank0
  8961  2E28  085E               	movf	_top_push_state+1,w
  8962  2E29  0021               	movlb	1	; select bank1
  8963  2E2A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8964  2E2B  0020               	movlb	0	; select bank0
  8965  2E2C  085D               	movf	_top_push_state,w
  8966  2E2D  0021               	movlb	1	; select bank1
  8967  2E2E  00A0               	movwf	set_leds_top@x^(0+128)
  8968  2E2F  3001               	movlw	1
  8969  2E30  00A2               	movwf	set_leds_top@ledState^(0+128)
  8970  2E31  3000               	movlw	0
  8971  2E32  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8972  2E33  31A5  2585  31AE   	fcall	_set_leds_top
  8973                           
  8974                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8975  2E36  0020               	movlb	0	; select bank0
  8976  2E37  085A               	movf	_bottom_push_state+1,w
  8977  2E38  0021               	movlb	1	; select bank1
  8978  2E39  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8979  2E3A  0020               	movlb	0	; select bank0
  8980  2E3B  0859               	movf	_bottom_push_state,w
  8981  2E3C  0021               	movlb	1	; select bank1
  8982  2E3D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8983  2E3E  31A1  212C         	fcall	_set_leds_bottom
  8984  2E40  0008               	return
  8985  2E41                     __end_of_resetRingLEDs:	
  8986                           
  8987                           	psect	text16
  8988  0DDD                     __ptext16:	
  8989 ;; *************** function _updateModulationArray *****************
  8990 ;; Defined at:
  8991 ;;		line 44 in file "modulation.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;		None
  8994 ;; Auto vars:     Size  Location     Type
  8995 ;;  thisAngle       2   56[BANK2 ] int 
  8996 ;;  iAngle          1   58[BANK2 ] unsigned char 
  8997 ;;  subDiv          2   54[BANK2 ] int 
  8998 ;;  angleFactor     2   52[BANK2 ] int 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  1    wreg      void 
  9001 ;; Registers used:
  9002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9009 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9010 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9011 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9012 ;;Total ram usage:       11 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    7
  9015 ;; This function calls:
  9016 ;;		___awdiv
  9017 ;;		___awtoft
  9018 ;;		___wmul
  9019 ;;		_getModulationSubdivision
  9020 ;;		_modSaw
  9021 ;;		_modSawRev
  9022 ;;		_modSin
  9023 ;;		_modSquare
  9024 ;;		_modTri
  9025 ;; This function is called by:
  9026 ;;		_main
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           
  9031                           ;psect for function _updateModulationArray
  9032  0DDD                     _updateModulationArray:	
  9033                           
  9034                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9035                           
  9036                           ;incstack = 0
  9037                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9038  0DDD  31AF  27D0  318D   	fcall	_getModulationSubdivision
  9039  0DE0  0021               	movlb	1	; select bank1
  9040  0DE1  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9041  0DE2  0022               	movlb	2	; select bank2
  9042  0DE3  00D7               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9043  0DE4  0021               	movlb	1	; select bank1
  9044  0DE5  0820               	movf	?_getModulationSubdivision^(0+128),w
  9045  0DE6  0022               	movlb	2	; select bank2
  9046  0DE7  00D6               	movwf	updateModulationArray@subDiv^(0+256)
  9047                           
  9048                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9049  0DE8  307A               	movlw	122
  9050  0DE9  0086               	movwf	6
  9051  0DEA  3024               	movlw	36
  9052  0DEB  0087               	movwf	7
  9053  0DEC  3F40               	moviw [0]fsr1
  9054  0DED  00D0               	movwf	??_updateModulationArray^(0+256)
  9055  0DEE  3F41               	moviw [1]fsr1
  9056  0DEF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9057  0DF0  0020               	movlb	0	; select bank0
  9058  0DF1  085A               	movf	_bottom_push_state+1,w
  9059  0DF2  0022               	movlb	2	; select bank2
  9060  0DF3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9061  0DF4  1D03               	skipz
  9062  0DF5  2DFA               	goto	u9345
  9063  0DF6  0020               	movlb	0	; select bank0
  9064  0DF7  0859               	movf	_bottom_push_state,w
  9065  0DF8  0022               	movlb	2	; select bank2
  9066  0DF9  0650               	xorwf	??_updateModulationArray^(0+256),w
  9067  0DFA                     u9345:	
  9068  0DFA  1D03               	skipz
  9069  0DFB  2E20               	goto	l8738
  9070  0DFC  307C               	movlw	124
  9071  0DFD  0086               	movwf	6
  9072  0DFE  3024               	movlw	36
  9073  0DFF  0087               	movwf	7
  9074  0E00  3F40               	moviw [0]fsr1
  9075  0E01  00D0               	movwf	??_updateModulationArray^(0+256)
  9076  0E02  3F41               	moviw [1]fsr1
  9077  0E03  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9078  0E04  0023               	movlb	3	; select bank3
  9079  0E05  085D               	movf	(_symmetry+1)^(0+384),w
  9080  0E06  0022               	movlb	2	; select bank2
  9081  0E07  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9082  0E08  1D03               	skipz
  9083  0E09  2E0E               	goto	u9355
  9084  0E0A  0023               	movlb	3	; select bank3
  9085  0E0B  085C               	movf	_symmetry^(0+384),w
  9086  0E0C  0022               	movlb	2	; select bank2
  9087  0E0D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9088  0E0E                     u9355:	
  9089  0E0E  1D03               	skipz
  9090  0E0F  2E20               	goto	l8738
  9091  0E10  307E               	movlw	126
  9092  0E11  0086               	movwf	6
  9093  0E12  3024               	movlw	36
  9094  0E13  0087               	movwf	7
  9095  0E14  3F40               	moviw [0]fsr1
  9096  0E15  00D0               	movwf	??_updateModulationArray^(0+256)
  9097  0E16  3F41               	moviw [1]fsr1
  9098  0E17  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9099  0E18  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9100  0E19  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9101  0E1A  1D03               	skipz
  9102  0E1B  2E1E               	goto	u9365
  9103  0E1C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9104  0E1D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9105  0E1E                     u9365:	
  9106  0E1E  1903               	btfsc	3,2
  9107  0E1F  0008               	return
  9108  0E20                     l8738:	
  9109                           ;modulation.c: 48: return;
  9110                           
  9111                           
  9112                           ;modulation.c: 49: }
  9113                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9114  0E20  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9115  0E21  0021               	movlb	1	; select bank1
  9116  0E22  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9117  0E23  0022               	movlb	2	; select bank2
  9118  0E24  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9119  0E25  0021               	movlb	1	; select bank1
  9120  0E26  00A0               	movwf	___awdiv@divisor^(0+128)
  9121  0E27  3068               	movlw	104
  9122  0E28  00A2               	movwf	___awdiv@dividend^(0+128)
  9123  0E29  3001               	movlw	1
  9124  0E2A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9125  0E2B  31A5  2533  318D   	fcall	___awdiv
  9126  0E2E  0021               	movlb	1	; select bank1
  9127  0E2F  0821               	movf	(?___awdiv+1)^(0+128),w
  9128  0E30  0022               	movlb	2	; select bank2
  9129  0E31  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9130  0E32  0021               	movlb	1	; select bank1
  9131  0E33  0820               	movf	?___awdiv^(0+128),w
  9132  0E34  0022               	movlb	2	; select bank2
  9133  0E35  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9134                           
  9135                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9136  0E36  01DA               	clrf	updateModulationArray@iAngle^(0+256)
  9137  0E37                     l8762:	
  9138  0E37  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9139  0E38  3A80               	xorlw	128
  9140  0E39  3C80               	sublw	128
  9141  0E3A  1D03               	skipz
  9142  0E3B  2E3E               	goto	u9375
  9143  0E3C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9144  0E3D  025A               	subwf	updateModulationArray@iAngle^(0+256),w
  9145  0E3E                     u9375:	
  9146  0E3E  1803               	btfsc	3,0
  9147  0E3F  2FE4               	goto	l8764
  9148                           
  9149                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9150  0E40  0022               	movlb	2	; select bank2
  9151  0E41  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9152  0E42  00D0               	movwf	??_updateModulationArray^(0+256)
  9153  0E43  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9154  0E44  0850               	movf	??_updateModulationArray^(0+256),w
  9155  0E45  00AE               	movwf	___wmul@multiplier^(0+256)
  9156  0E46  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9157  0E47  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9158  0E48  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9159  0E49  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9160  0E4A  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9161  0E4B  00B0               	movwf	___wmul@multiplicand^(0+256)
  9162  0E4C  31AE  2641  318D   	fcall	___wmul
  9163  0E4F  0022               	movlb	2	; select bank2
  9164  0E50  082F               	movf	(?___wmul+1)^(0+256),w
  9165  0E51  00D9               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9166  0E52  082E               	movf	?___wmul^(0+256),w
  9167  0E53  00D8               	movwf	updateModulationArray@thisAngle^(0+256)
  9168                           
  9169                           ;modulation.c: 54: switch (bottom_push_state) {
  9170  0E54  2FC7               	goto	l8758
  9171  0E55                     l8744:	
  9172                           ;modulation.c: 55: case 1:
  9173                           
  9174                           
  9175                           ;modulation.c: 56: modArray[iAngle] = modSin(thisAngle, symmetry);
  9176  0E55  0022               	movlb	2	; select bank2
  9177  0E56  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9178  0E57  0021               	movlb	1	; select bank1
  9179  0E58  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9180  0E59  0022               	movlb	2	; select bank2
  9181  0E5A  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9182  0E5B  0021               	movlb	1	; select bank1
  9183  0E5C  00A8               	movwf	___awtoft@c^(0+128)
  9184  0E5D  31A0  2000  318D   	fcall	___awtoft
  9185  0E60  0021               	movlb	1	; select bank1
  9186  0E61  0828               	movf	?___awtoft^(0+128),w
  9187  0E62  0022               	movlb	2	; select bank2
  9188  0E63  00B4               	movwf	modSin@angle^(0+256)
  9189  0E64  0021               	movlb	1	; select bank1
  9190  0E65  0829               	movf	(?___awtoft+1)^(0+128),w
  9191  0E66  0022               	movlb	2	; select bank2
  9192  0E67  00B5               	movwf	(modSin@angle+1)^(0+256)
  9193  0E68  0021               	movlb	1	; select bank1
  9194  0E69  082A               	movf	(?___awtoft+2)^(0+128),w
  9195  0E6A  0022               	movlb	2	; select bank2
  9196  0E6B  00B6               	movwf	(modSin@angle+2)^(0+256)
  9197  0E6C  0023               	movlb	3	; select bank3
  9198  0E6D  085D               	movf	(_symmetry+1)^(0+384),w
  9199  0E6E  0021               	movlb	1	; select bank1
  9200  0E6F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9201  0E70  0023               	movlb	3	; select bank3
  9202  0E71  085C               	movf	_symmetry^(0+384),w
  9203  0E72  0021               	movlb	1	; select bank1
  9204  0E73  00A8               	movwf	___awtoft@c^(0+128)
  9205  0E74  31A0  2000  318D   	fcall	___awtoft
  9206  0E77  0021               	movlb	1	; select bank1
  9207  0E78  0828               	movf	?___awtoft^(0+128),w
  9208  0E79  0022               	movlb	2	; select bank2
  9209  0E7A  00B7               	movwf	modSin@inflection^(0+256)
  9210  0E7B  0021               	movlb	1	; select bank1
  9211  0E7C  0829               	movf	(?___awtoft+1)^(0+128),w
  9212  0E7D  0022               	movlb	2	; select bank2
  9213  0E7E  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9214  0E7F  0021               	movlb	1	; select bank1
  9215  0E80  082A               	movf	(?___awtoft+2)^(0+128),w
  9216  0E81  0022               	movlb	2	; select bank2
  9217  0E82  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9218  0E83  3196  2654  318D   	fcall	_modSin
  9219  0E86  0022               	movlb	2	; select bank2
  9220  0E87  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9221  0E88  00D0               	movwf	??_updateModulationArray^(0+256)
  9222  0E89  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9223  0E8A  35D0               	lslf	??_updateModulationArray^(0+256),f
  9224  0E8B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9225  0E8C  308A               	movlw	138
  9226  0E8D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9227  0E8E  3023               	movlw	35
  9228  0E8F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9229  0E90  0850               	movf	??_updateModulationArray^(0+256),w
  9230  0E91  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9231  0E92  0086               	movwf	6
  9232  0E93  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9233  0E94  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9234  0E95  0087               	movwf	7
  9235  0E96  0834               	movf	?_modSin^(0+256),w
  9236  0E97  3FC0               	movwi [0]fsr1
  9237  0E98  0835               	movf	(?_modSin+1)^(0+256),w
  9238  0E99  3FC1               	movwi [1]fsr1
  9239                           
  9240                           ;modulation.c: 57: break;
  9241  0E9A  2FDE               	goto	l8760
  9242  0E9B                     l8746:	
  9243                           ;modulation.c: 58: case 2:
  9244                           
  9245                           
  9246                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9247  0E9B  0022               	movlb	2	; select bank2
  9248  0E9C  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9249  0E9D  0021               	movlb	1	; select bank1
  9250  0E9E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9251  0E9F  0022               	movlb	2	; select bank2
  9252  0EA0  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9253  0EA1  0021               	movlb	1	; select bank1
  9254  0EA2  00A8               	movwf	___awtoft@c^(0+128)
  9255  0EA3  31A0  2000  318D   	fcall	___awtoft
  9256  0EA6  0021               	movlb	1	; select bank1
  9257  0EA7  0828               	movf	?___awtoft^(0+128),w
  9258  0EA8  0022               	movlb	2	; select bank2
  9259  0EA9  00AE               	movwf	modTri@angle^(0+256)
  9260  0EAA  0021               	movlb	1	; select bank1
  9261  0EAB  0829               	movf	(?___awtoft+1)^(0+128),w
  9262  0EAC  0022               	movlb	2	; select bank2
  9263  0EAD  00AF               	movwf	(modTri@angle+1)^(0+256)
  9264  0EAE  0021               	movlb	1	; select bank1
  9265  0EAF  082A               	movf	(?___awtoft+2)^(0+128),w
  9266  0EB0  0022               	movlb	2	; select bank2
  9267  0EB1  00B0               	movwf	(modTri@angle+2)^(0+256)
  9268  0EB2  0023               	movlb	3	; select bank3
  9269  0EB3  085D               	movf	(_symmetry+1)^(0+384),w
  9270  0EB4  0021               	movlb	1	; select bank1
  9271  0EB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9272  0EB6  0023               	movlb	3	; select bank3
  9273  0EB7  085C               	movf	_symmetry^(0+384),w
  9274  0EB8  0021               	movlb	1	; select bank1
  9275  0EB9  00A8               	movwf	___awtoft@c^(0+128)
  9276  0EBA  31A0  2000  318D   	fcall	___awtoft
  9277  0EBD  0021               	movlb	1	; select bank1
  9278  0EBE  0828               	movf	?___awtoft^(0+128),w
  9279  0EBF  0022               	movlb	2	; select bank2
  9280  0EC0  00B1               	movwf	modTri@inflection^(0+256)
  9281  0EC1  0021               	movlb	1	; select bank1
  9282  0EC2  0829               	movf	(?___awtoft+1)^(0+128),w
  9283  0EC3  0022               	movlb	2	; select bank2
  9284  0EC4  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9285  0EC5  0021               	movlb	1	; select bank1
  9286  0EC6  082A               	movf	(?___awtoft+2)^(0+128),w
  9287  0EC7  0022               	movlb	2	; select bank2
  9288  0EC8  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9289  0EC9  318B  23E2  318D   	fcall	_modTri
  9290  0ECC  0022               	movlb	2	; select bank2
  9291  0ECD  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9292  0ECE  00D0               	movwf	??_updateModulationArray^(0+256)
  9293  0ECF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9294  0ED0  35D0               	lslf	??_updateModulationArray^(0+256),f
  9295  0ED1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9296  0ED2  308A               	movlw	138
  9297  0ED3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9298  0ED4  3023               	movlw	35
  9299  0ED5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9300  0ED6  0850               	movf	??_updateModulationArray^(0+256),w
  9301  0ED7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9302  0ED8  0086               	movwf	6
  9303  0ED9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9304  0EDA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9305  0EDB  0087               	movwf	7
  9306  0EDC  082E               	movf	?_modTri^(0+256),w
  9307  0EDD  3FC0               	movwi [0]fsr1
  9308  0EDE  082F               	movf	(?_modTri+1)^(0+256),w
  9309  0EDF  3FC1               	movwi [1]fsr1
  9310                           
  9311                           ;modulation.c: 60: break;
  9312  0EE0  2FDE               	goto	l8760
  9313  0EE1                     l8748:	
  9314                           ;modulation.c: 61: case 3:
  9315                           
  9316                           
  9317                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9318  0EE1  0022               	movlb	2	; select bank2
  9319  0EE2  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9320  0EE3  0021               	movlb	1	; select bank1
  9321  0EE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9322  0EE5  0022               	movlb	2	; select bank2
  9323  0EE6  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9324  0EE7  0021               	movlb	1	; select bank1
  9325  0EE8  00A8               	movwf	___awtoft@c^(0+128)
  9326  0EE9  31A0  2000  318D   	fcall	___awtoft
  9327  0EEC  0021               	movlb	1	; select bank1
  9328  0EED  0828               	movf	?___awtoft^(0+128),w
  9329  0EEE  0022               	movlb	2	; select bank2
  9330  0EEF  00C8               	movwf	modSquare@angle^(0+256)
  9331  0EF0  0021               	movlb	1	; select bank1
  9332  0EF1  0829               	movf	(?___awtoft+1)^(0+128),w
  9333  0EF2  0022               	movlb	2	; select bank2
  9334  0EF3  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9335  0EF4  0021               	movlb	1	; select bank1
  9336  0EF5  082A               	movf	(?___awtoft+2)^(0+128),w
  9337  0EF6  0022               	movlb	2	; select bank2
  9338  0EF7  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9339  0EF8  0023               	movlb	3	; select bank3
  9340  0EF9  085D               	movf	(_symmetry+1)^(0+384),w
  9341  0EFA  0021               	movlb	1	; select bank1
  9342  0EFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9343  0EFC  0023               	movlb	3	; select bank3
  9344  0EFD  085C               	movf	_symmetry^(0+384),w
  9345  0EFE  0021               	movlb	1	; select bank1
  9346  0EFF  00A8               	movwf	___awtoft@c^(0+128)
  9347  0F00  31A0  2000  318D   	fcall	___awtoft
  9348  0F03  0021               	movlb	1	; select bank1
  9349  0F04  0828               	movf	?___awtoft^(0+128),w
  9350  0F05  0022               	movlb	2	; select bank2
  9351  0F06  00CB               	movwf	modSquare@inflection^(0+256)
  9352  0F07  0021               	movlb	1	; select bank1
  9353  0F08  0829               	movf	(?___awtoft+1)^(0+128),w
  9354  0F09  0022               	movlb	2	; select bank2
  9355  0F0A  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9356  0F0B  0021               	movlb	1	; select bank1
  9357  0F0C  082A               	movf	(?___awtoft+2)^(0+128),w
  9358  0F0D  0022               	movlb	2	; select bank2
  9359  0F0E  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9360  0F0F  31A1  21A3  318D   	fcall	_modSquare
  9361  0F12  0022               	movlb	2	; select bank2
  9362  0F13  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9363  0F14  00D0               	movwf	??_updateModulationArray^(0+256)
  9364  0F15  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9365  0F16  35D0               	lslf	??_updateModulationArray^(0+256),f
  9366  0F17  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9367  0F18  308A               	movlw	138
  9368  0F19  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9369  0F1A  3023               	movlw	35
  9370  0F1B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9371  0F1C  0850               	movf	??_updateModulationArray^(0+256),w
  9372  0F1D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9373  0F1E  0086               	movwf	6
  9374  0F1F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9375  0F20  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9376  0F21  0087               	movwf	7
  9377  0F22  0848               	movf	?_modSquare^(0+256),w
  9378  0F23  3FC0               	movwi [0]fsr1
  9379  0F24  0849               	movf	(?_modSquare+1)^(0+256),w
  9380  0F25  3FC1               	movwi [1]fsr1
  9381                           
  9382                           ;modulation.c: 63: break;
  9383  0F26  2FDE               	goto	l8760
  9384  0F27                     l8750:	
  9385                           ;modulation.c: 64: case 4:
  9386                           
  9387                           
  9388                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9389  0F27  0022               	movlb	2	; select bank2
  9390  0F28  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9391  0F29  0021               	movlb	1	; select bank1
  9392  0F2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9393  0F2B  0022               	movlb	2	; select bank2
  9394  0F2C  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9395  0F2D  0021               	movlb	1	; select bank1
  9396  0F2E  00A8               	movwf	___awtoft@c^(0+128)
  9397  0F2F  31A0  2000  318D   	fcall	___awtoft
  9398  0F32  0021               	movlb	1	; select bank1
  9399  0F33  0828               	movf	?___awtoft^(0+128),w
  9400  0F34  0022               	movlb	2	; select bank2
  9401  0F35  00C5               	movwf	modSawRev@angle^(0+256)
  9402  0F36  0021               	movlb	1	; select bank1
  9403  0F37  0829               	movf	(?___awtoft+1)^(0+128),w
  9404  0F38  0022               	movlb	2	; select bank2
  9405  0F39  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9406  0F3A  0021               	movlb	1	; select bank1
  9407  0F3B  082A               	movf	(?___awtoft+2)^(0+128),w
  9408  0F3C  0022               	movlb	2	; select bank2
  9409  0F3D  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9410  0F3E  0023               	movlb	3	; select bank3
  9411  0F3F  085D               	movf	(_symmetry+1)^(0+384),w
  9412  0F40  0021               	movlb	1	; select bank1
  9413  0F41  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9414  0F42  0023               	movlb	3	; select bank3
  9415  0F43  085C               	movf	_symmetry^(0+384),w
  9416  0F44  0021               	movlb	1	; select bank1
  9417  0F45  00A8               	movwf	___awtoft@c^(0+128)
  9418  0F46  31A0  2000  318D   	fcall	___awtoft
  9419  0F49  0021               	movlb	1	; select bank1
  9420  0F4A  0828               	movf	?___awtoft^(0+128),w
  9421  0F4B  0022               	movlb	2	; select bank2
  9422  0F4C  00C8               	movwf	modSawRev@inflection^(0+256)
  9423  0F4D  0021               	movlb	1	; select bank1
  9424  0F4E  0829               	movf	(?___awtoft+1)^(0+128),w
  9425  0F4F  0022               	movlb	2	; select bank2
  9426  0F50  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9427  0F51  0021               	movlb	1	; select bank1
  9428  0F52  082A               	movf	(?___awtoft+2)^(0+128),w
  9429  0F53  0022               	movlb	2	; select bank2
  9430  0F54  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9431  0F55  31AE  2679  318D   	fcall	_modSawRev
  9432  0F58  0022               	movlb	2	; select bank2
  9433  0F59  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9434  0F5A  00D0               	movwf	??_updateModulationArray^(0+256)
  9435  0F5B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9436  0F5C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9437  0F5D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9438  0F5E  308A               	movlw	138
  9439  0F5F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9440  0F60  3023               	movlw	35
  9441  0F61  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9442  0F62  0850               	movf	??_updateModulationArray^(0+256),w
  9443  0F63  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9444  0F64  0086               	movwf	6
  9445  0F65  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9446  0F66  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9447  0F67  0087               	movwf	7
  9448  0F68  0845               	movf	?_modSawRev^(0+256),w
  9449  0F69  3FC0               	movwi [0]fsr1
  9450  0F6A  0846               	movf	(?_modSawRev+1)^(0+256),w
  9451  0F6B  3FC1               	movwi [1]fsr1
  9452                           
  9453                           ;modulation.c: 66: break;
  9454  0F6C  2FDE               	goto	l8760
  9455  0F6D                     l8752:	
  9456                           ;modulation.c: 67: case 5:
  9457                           
  9458                           
  9459                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9460  0F6D  0022               	movlb	2	; select bank2
  9461  0F6E  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9462  0F6F  0021               	movlb	1	; select bank1
  9463  0F70  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9464  0F71  0022               	movlb	2	; select bank2
  9465  0F72  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9466  0F73  0021               	movlb	1	; select bank1
  9467  0F74  00A8               	movwf	___awtoft@c^(0+128)
  9468  0F75  31A0  2000  318D   	fcall	___awtoft
  9469  0F78  0021               	movlb	1	; select bank1
  9470  0F79  0828               	movf	?___awtoft^(0+128),w
  9471  0F7A  0022               	movlb	2	; select bank2
  9472  0F7B  00AE               	movwf	modSaw@angle^(0+256)
  9473  0F7C  0021               	movlb	1	; select bank1
  9474  0F7D  0829               	movf	(?___awtoft+1)^(0+128),w
  9475  0F7E  0022               	movlb	2	; select bank2
  9476  0F7F  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9477  0F80  0021               	movlb	1	; select bank1
  9478  0F81  082A               	movf	(?___awtoft+2)^(0+128),w
  9479  0F82  0022               	movlb	2	; select bank2
  9480  0F83  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9481  0F84  0023               	movlb	3	; select bank3
  9482  0F85  085D               	movf	(_symmetry+1)^(0+384),w
  9483  0F86  0021               	movlb	1	; select bank1
  9484  0F87  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9485  0F88  0023               	movlb	3	; select bank3
  9486  0F89  085C               	movf	_symmetry^(0+384),w
  9487  0F8A  0021               	movlb	1	; select bank1
  9488  0F8B  00A8               	movwf	___awtoft@c^(0+128)
  9489  0F8C  31A0  2000  318D   	fcall	___awtoft
  9490  0F8F  0021               	movlb	1	; select bank1
  9491  0F90  0828               	movf	?___awtoft^(0+128),w
  9492  0F91  0022               	movlb	2	; select bank2
  9493  0F92  00B1               	movwf	modSaw@inflection^(0+256)
  9494  0F93  0021               	movlb	1	; select bank1
  9495  0F94  0829               	movf	(?___awtoft+1)^(0+128),w
  9496  0F95  0022               	movlb	2	; select bank2
  9497  0F96  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9498  0F97  0021               	movlb	1	; select bank1
  9499  0F98  082A               	movf	(?___awtoft+2)^(0+128),w
  9500  0F99  0022               	movlb	2	; select bank2
  9501  0F9A  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9502  0F9B  3194  24AA  318D   	fcall	_modSaw
  9503  0F9E  0022               	movlb	2	; select bank2
  9504  0F9F  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9505  0FA0  00D0               	movwf	??_updateModulationArray^(0+256)
  9506  0FA1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9507  0FA2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9508  0FA3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9509  0FA4  308A               	movlw	138
  9510  0FA5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9511  0FA6  3023               	movlw	35
  9512  0FA7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9513  0FA8  0850               	movf	??_updateModulationArray^(0+256),w
  9514  0FA9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9515  0FAA  0086               	movwf	6
  9516  0FAB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9517  0FAC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9518  0FAD  0087               	movwf	7
  9519  0FAE  082E               	movf	?_modSaw^(0+256),w
  9520  0FAF  3FC0               	movwi [0]fsr1
  9521  0FB0  082F               	movf	(?_modSaw+1)^(0+256),w
  9522  0FB1  3FC1               	movwi [1]fsr1
  9523                           
  9524                           ;modulation.c: 69: break;
  9525  0FB2  2FDE               	goto	l8760
  9526  0FB3                     l8754:	
  9527                           ;modulation.c: 70: default:
  9528                           
  9529                           
  9530                           ;modulation.c: 71: modArray[iAngle] = 0;
  9531  0FB3  0022               	movlb	2	; select bank2
  9532  0FB4  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9533  0FB5  00D0               	movwf	??_updateModulationArray^(0+256)
  9534  0FB6  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9535  0FB7  35D0               	lslf	??_updateModulationArray^(0+256),f
  9536  0FB8  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9537  0FB9  308A               	movlw	138
  9538  0FBA  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9539  0FBB  3023               	movlw	35
  9540  0FBC  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9541  0FBD  0850               	movf	??_updateModulationArray^(0+256),w
  9542  0FBE  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9543  0FBF  0086               	movwf	6
  9544  0FC0  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9545  0FC1  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9546  0FC2  0087               	movwf	7
  9547  0FC3  3000               	movlw	0
  9548  0FC4  3FC0               	movwi [0]fsr1
  9549  0FC5  3FC1               	movwi [1]fsr1
  9550                           
  9551                           ;modulation.c: 73: }
  9552                           
  9553                           ;modulation.c: 72: break;
  9554  0FC6  2FDE               	goto	l8760
  9555  0FC7                     l8758:	
  9556                           
  9557                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9558                           ; Switch size 1, requested type "space"
  9559                           ; Number of cases is 1, Range of values is 0 to 0
  9560                           ; switch strategies available:
  9561                           ; Name         Instructions Cycles
  9562                           ; simple_byte            4     3 (average)
  9563                           ; direct_byte            8     6 (fixed)
  9564                           ; jumptable            260     6 (fixed)
  9565                           ;	Chosen strategy is simple_byte
  9566  0FC7  0020               	movlb	0	; select bank0
  9567  0FC8  085A               	movf	_bottom_push_state+1,w
  9568  0FC9  3A00               	xorlw	0	; case 0
  9569  0FCA  1903               	skipnz
  9570  0FCB  2FCD               	goto	l9752
  9571  0FCC  2FB3               	goto	l8754
  9572  0FCD                     l9752:	
  9573                           
  9574                           ; Switch size 1, requested type "space"
  9575                           ; Number of cases is 5, Range of values is 1 to 5
  9576                           ; switch strategies available:
  9577                           ; Name         Instructions Cycles
  9578                           ; simple_byte           16     9 (average)
  9579                           ; direct_byte           19     9 (fixed)
  9580                           ; jumptable            263     9 (fixed)
  9581                           ;	Chosen strategy is simple_byte
  9582  0FCD  0859               	movf	_bottom_push_state,w
  9583  0FCE  3A01               	xorlw	1	; case 1
  9584  0FCF  1903               	skipnz
  9585  0FD0  2E55               	goto	l8744
  9586  0FD1  3A03               	xorlw	3	; case 2
  9587  0FD2  1903               	skipnz
  9588  0FD3  2E9B               	goto	l8746
  9589  0FD4  3A01               	xorlw	1	; case 3
  9590  0FD5  1903               	skipnz
  9591  0FD6  2EE1               	goto	l8748
  9592  0FD7  3A07               	xorlw	7	; case 4
  9593  0FD8  1903               	skipnz
  9594  0FD9  2F27               	goto	l8750
  9595  0FDA  3A01               	xorlw	1	; case 5
  9596  0FDB  1903               	skipnz
  9597  0FDC  2F6D               	goto	l8752
  9598  0FDD  2FB3               	goto	l8754
  9599  0FDE                     l8760:	
  9600  0FDE  3001               	movlw	1
  9601  0FDF  0022               	movlb	2	; select bank2
  9602  0FE0  00D0               	movwf	??_updateModulationArray^(0+256)
  9603  0FE1  0850               	movf	??_updateModulationArray^(0+256),w
  9604  0FE2  07DA               	addwf	updateModulationArray@iAngle^(0+256),f
  9605  0FE3  2E37               	goto	l8762
  9606  0FE4                     l8764:	
  9607                           
  9608                           ;modulation.c: 74: }
  9609                           ;modulation.c: 75: modArray[120] = bottom_push_state;
  9610  0FE4  307A               	movlw	122
  9611  0FE5  0086               	movwf	6
  9612  0FE6  3024               	movlw	36
  9613  0FE7  0087               	movwf	7
  9614  0FE8  0020               	movlb	0	; select bank0
  9615  0FE9  0859               	movf	_bottom_push_state,w
  9616  0FEA  3FC0               	movwi [0]fsr1
  9617  0FEB  085A               	movf	_bottom_push_state+1,w
  9618  0FEC  3FC1               	movwi [1]fsr1
  9619                           
  9620                           ;modulation.c: 76: modArray[121] = symmetry;
  9621  0FED  307C               	movlw	124
  9622  0FEE  0086               	movwf	6
  9623  0FEF  3024               	movlw	36
  9624  0FF0  0087               	movwf	7
  9625  0FF1  0023               	movlb	3	; select bank3
  9626  0FF2  085C               	movf	_symmetry^(0+384),w
  9627  0FF3  3FC0               	movwi [0]fsr1
  9628  0FF4  085D               	movf	(_symmetry+1)^(0+384),w
  9629  0FF5  3FC1               	movwi [1]fsr1
  9630                           
  9631                           ;modulation.c: 77: modArray[122] = subDiv;
  9632  0FF6  307E               	movlw	126
  9633  0FF7  0086               	movwf	6
  9634  0FF8  3024               	movlw	36
  9635  0FF9  0087               	movwf	7
  9636  0FFA  0022               	movlb	2	; select bank2
  9637  0FFB  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9638  0FFC  3FC0               	movwi [0]fsr1
  9639  0FFD  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9640  0FFE  3FC1               	movwi [1]fsr1
  9641  0FFF  0008               	return
  9642  1000                     __end_of_updateModulationArray:	
  9643                           
  9644                           	psect	text17
  9645  0BE2                     __ptext17:	
  9646 ;; *************** function _modTri *****************
  9647 ;; Defined at:
  9648 ;;		line 96 in file "modulation.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  angle           3   14[BANK2 ] void 
  9651 ;;  inflection      3   17[BANK2 ] void 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  tmpVal          3   29[BANK2 ] void 
  9654 ;;  period          3   26[BANK2 ] void 
  9655 ;;  shift           3   23[BANK2 ] void 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  2   14[BANK2 ] int 
  9658 ;; Registers used:
  9659 ;;		wreg, status,2, status,0, pclath, cstack
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9665 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9666 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9668 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9669 ;;Total ram usage:       18 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    5
  9672 ;; This function calls:
  9673 ;;		___ftadd
  9674 ;;		___ftdiv
  9675 ;;		___ftge
  9676 ;;		___ftmul
  9677 ;;		___ftneg
  9678 ;;		___fttol
  9679 ;; This function is called by:
  9680 ;;		_updateModulationArray
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _modTri
  9686  0BE2                     _modTri:	
  9687                           
  9688                           ;modulation.c: 97: double period = 1.0;
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9692  0BE2  3000               	movlw	0
  9693  0BE3  0022               	movlb	2	; select bank2
  9694  0BE4  00BA               	movwf	modTri@period^(0+256)
  9695  0BE5  3080               	movlw	128
  9696  0BE6  00BB               	movwf	(modTri@period+1)^(0+256)
  9697  0BE7  303F               	movlw	63
  9698  0BE8  00BC               	movwf	(modTri@period+2)^(0+256)
  9699                           
  9700                           ;modulation.c: 98: double shift = 0;
  9701  0BE9  3000               	movlw	0
  9702  0BEA  00B7               	movwf	modTri@shift^(0+256)
  9703  0BEB  3000               	movlw	0
  9704  0BEC  00B8               	movwf	(modTri@shift+1)^(0+256)
  9705  0BED  3000               	movlw	0
  9706  0BEE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9707                           
  9708                           ;modulation.c: 100: if(angle<=inflection) {
  9709  0BEF  0831               	movf	modTri@inflection^(0+256),w
  9710  0BF0  0021               	movlb	1	; select bank1
  9711  0BF1  00A0               	movwf	___ftge@ff1^(0+128)
  9712  0BF2  0022               	movlb	2	; select bank2
  9713  0BF3  0832               	movf	(modTri@inflection+1)^(0+256),w
  9714  0BF4  0021               	movlb	1	; select bank1
  9715  0BF5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9716  0BF6  0022               	movlb	2	; select bank2
  9717  0BF7  0833               	movf	(modTri@inflection+2)^(0+256),w
  9718  0BF8  0021               	movlb	1	; select bank1
  9719  0BF9  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9720  0BFA  0022               	movlb	2	; select bank2
  9721  0BFB  082E               	movf	modTri@angle^(0+256),w
  9722  0BFC  0021               	movlb	1	; select bank1
  9723  0BFD  00A3               	movwf	___ftge@ff2^(0+128)
  9724  0BFE  0022               	movlb	2	; select bank2
  9725  0BFF  082F               	movf	(modTri@angle+1)^(0+256),w
  9726  0C00  0021               	movlb	1	; select bank1
  9727  0C01  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9728  0C02  0022               	movlb	2	; select bank2
  9729  0C03  0830               	movf	(modTri@angle+2)^(0+256),w
  9730  0C04  0021               	movlb	1	; select bank1
  9731  0C05  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9732  0C06  31A1  2167  318B   	fcall	___ftge
  9733  0C09  1C03               	btfss	3,0
  9734  0C0A  2C17               	goto	l8518
  9735                           
  9736                           ;modulation.c: 101: period = 180.0/inflection;
  9737  0C0B  0022               	movlb	2	; select bank2
  9738  0C0C  0831               	movf	modTri@inflection^(0+256),w
  9739  0C0D  0021               	movlb	1	; select bank1
  9740  0C0E  00CE               	movwf	___ftdiv@f2^(0+128)
  9741  0C0F  0022               	movlb	2	; select bank2
  9742  0C10  0832               	movf	(modTri@inflection+1)^(0+256),w
  9743  0C11  0021               	movlb	1	; select bank1
  9744  0C12  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9745  0C13  0022               	movlb	2	; select bank2
  9746  0C14  0833               	movf	(modTri@inflection+2)^(0+256),w
  9747  0C15  0021               	movlb	1	; select bank1
  9748  0C16  2CD2               	goto	L6
  9749  0C17                     l8518:	
  9750                           ;modulation.c: 102: } else {
  9751                           
  9752                           
  9753                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9754  0C17  0022               	movlb	2	; select bank2
  9755  0C18  0831               	movf	modTri@inflection^(0+256),w
  9756  0C19  0021               	movlb	1	; select bank1
  9757  0C1A  00B1               	movwf	___ftmul@f2^(0+128)
  9758  0C1B  0022               	movlb	2	; select bank2
  9759  0C1C  0832               	movf	(modTri@inflection+1)^(0+256),w
  9760  0C1D  0021               	movlb	1	; select bank1
  9761  0C1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9762  0C1F  0022               	movlb	2	; select bank2
  9763  0C20  0833               	movf	(modTri@inflection+2)^(0+256),w
  9764  0C21  0021               	movlb	1	; select bank1
  9765  0C22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9766  0C23  3000               	movlw	0
  9767  0C24  00AE               	movwf	___ftmul@f1^(0+128)
  9768  0C25  3000               	movlw	0
  9769  0C26  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9770  0C27  3040               	movlw	64
  9771  0C28  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9772  0C29  319E  2691  318B   	fcall	___ftmul
  9773  0C2C  0021               	movlb	1	; select bank1
  9774  0C2D  082E               	movf	?___ftmul^(0+128),w
  9775  0C2E  00BE               	movwf	___ftneg@f1^(0+128)
  9776  0C2F  082F               	movf	(?___ftmul+1)^(0+128),w
  9777  0C30  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9778  0C31  0830               	movf	(?___ftmul+2)^(0+128),w
  9779  0C32  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9780  0C33  31AD  259D  318B   	fcall	___ftneg
  9781  0C36  0021               	movlb	1	; select bank1
  9782  0C37  083E               	movf	?___ftneg^(0+128),w
  9783  0C38  00C4               	movwf	___ftadd@f2^(0+128)
  9784  0C39  083F               	movf	(?___ftneg+1)^(0+128),w
  9785  0C3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9786  0C3B  0840               	movf	(?___ftneg+2)^(0+128),w
  9787  0C3C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9788  0C3D  3000               	movlw	0
  9789  0C3E  00C1               	movwf	___ftadd@f1^(0+128)
  9790  0C3F  30B4               	movlw	180
  9791  0C40  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9792  0C41  3043               	movlw	67
  9793  0C42  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9794  0C43  3190  2020  318B   	fcall	___ftadd
  9795  0C46  0021               	movlb	1	; select bank1
  9796  0C47  0841               	movf	?___ftadd^(0+128),w
  9797  0C48  0022               	movlb	2	; select bank2
  9798  0C49  00B4               	movwf	_modTri$2846^(0+256)
  9799  0C4A  0021               	movlb	1	; select bank1
  9800  0C4B  0842               	movf	(?___ftadd+1)^(0+128),w
  9801  0C4C  0022               	movlb	2	; select bank2
  9802  0C4D  00B5               	movwf	(_modTri$2846+1)^(0+256)
  9803  0C4E  0021               	movlb	1	; select bank1
  9804  0C4F  0843               	movf	(?___ftadd+2)^(0+128),w
  9805  0C50  0022               	movlb	2	; select bank2
  9806  0C51  00B6               	movwf	(_modTri$2846+2)^(0+256)
  9807                           
  9808                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9809  0C52  0834               	movf	_modTri$2846^(0+256),w
  9810  0C53  0021               	movlb	1	; select bank1
  9811  0C54  00BE               	movwf	___ftneg@f1^(0+128)
  9812  0C55  0022               	movlb	2	; select bank2
  9813  0C56  0835               	movf	(_modTri$2846+1)^(0+256),w
  9814  0C57  0021               	movlb	1	; select bank1
  9815  0C58  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9816  0C59  0022               	movlb	2	; select bank2
  9817  0C5A  0836               	movf	(_modTri$2846+2)^(0+256),w
  9818  0C5B  0021               	movlb	1	; select bank1
  9819  0C5C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9820  0C5D  31AD  259D  318B   	fcall	___ftneg
  9821  0C60  0021               	movlb	1	; select bank1
  9822  0C61  083E               	movf	?___ftneg^(0+128),w
  9823  0C62  00AE               	movwf	___ftmul@f1^(0+128)
  9824  0C63  083F               	movf	(?___ftneg+1)^(0+128),w
  9825  0C64  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9826  0C65  0840               	movf	(?___ftneg+2)^(0+128),w
  9827  0C66  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9828  0C67  3000               	movlw	0
  9829  0C68  00C1               	movwf	___ftadd@f1^(0+128)
  9830  0C69  30B4               	movlw	180
  9831  0C6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9832  0C6B  3043               	movlw	67
  9833  0C6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9834  0C6D  0022               	movlb	2	; select bank2
  9835  0C6E  0831               	movf	modTri@inflection^(0+256),w
  9836  0C6F  0021               	movlb	1	; select bank1
  9837  0C70  00BE               	movwf	___ftneg@f1^(0+128)
  9838  0C71  0022               	movlb	2	; select bank2
  9839  0C72  0832               	movf	(modTri@inflection+1)^(0+256),w
  9840  0C73  0021               	movlb	1	; select bank1
  9841  0C74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9842  0C75  0022               	movlb	2	; select bank2
  9843  0C76  0833               	movf	(modTri@inflection+2)^(0+256),w
  9844  0C77  0021               	movlb	1	; select bank1
  9845  0C78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9846  0C79  31AD  259D  318B   	fcall	___ftneg
  9847  0C7C  0021               	movlb	1	; select bank1
  9848  0C7D  083E               	movf	?___ftneg^(0+128),w
  9849  0C7E  00C4               	movwf	___ftadd@f2^(0+128)
  9850  0C7F  083F               	movf	(?___ftneg+1)^(0+128),w
  9851  0C80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9852  0C81  0840               	movf	(?___ftneg+2)^(0+128),w
  9853  0C82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9854  0C83  3190  2020  318B   	fcall	___ftadd
  9855  0C86  0021               	movlb	1	; select bank1
  9856  0C87  0841               	movf	?___ftadd^(0+128),w
  9857  0C88  00CE               	movwf	___ftdiv@f2^(0+128)
  9858  0C89  0842               	movf	(?___ftadd+1)^(0+128),w
  9859  0C8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9860  0C8B  0843               	movf	(?___ftadd+2)^(0+128),w
  9861  0C8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9862  0C8D  3000               	movlw	0
  9863  0C8E  00D1               	movwf	___ftdiv@f1^(0+128)
  9864  0C8F  3034               	movlw	52
  9865  0C90  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9866  0C91  3043               	movlw	67
  9867  0C92  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9868  0C93  319D  253D  318B   	fcall	___ftdiv
  9869  0C96  0021               	movlb	1	; select bank1
  9870  0C97  084E               	movf	?___ftdiv^(0+128),w
  9871  0C98  00B1               	movwf	___ftmul@f2^(0+128)
  9872  0C99  084F               	movf	(?___ftdiv+1)^(0+128),w
  9873  0C9A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9874  0C9B  0850               	movf	(?___ftdiv+2)^(0+128),w
  9875  0C9C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9876  0C9D  319E  2691  318B   	fcall	___ftmul
  9877  0CA0  0021               	movlb	1	; select bank1
  9878  0CA1  082E               	movf	?___ftmul^(0+128),w
  9879  0CA2  0022               	movlb	2	; select bank2
  9880  0CA3  00B7               	movwf	modTri@shift^(0+256)
  9881  0CA4  0021               	movlb	1	; select bank1
  9882  0CA5  082F               	movf	(?___ftmul+1)^(0+128),w
  9883  0CA6  0022               	movlb	2	; select bank2
  9884  0CA7  00B8               	movwf	(modTri@shift+1)^(0+256)
  9885  0CA8  0021               	movlb	1	; select bank1
  9886  0CA9  0830               	movf	(?___ftmul+2)^(0+128),w
  9887  0CAA  0022               	movlb	2	; select bank2
  9888  0CAB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9889                           
  9890                           ;modulation.c: 104: period = 180/(360-inflection);
  9891  0CAC  3000               	movlw	0
  9892  0CAD  0021               	movlb	1	; select bank1
  9893  0CAE  00C1               	movwf	___ftadd@f1^(0+128)
  9894  0CAF  30B4               	movlw	180
  9895  0CB0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9896  0CB1  3043               	movlw	67
  9897  0CB2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9898  0CB3  0022               	movlb	2	; select bank2
  9899  0CB4  0831               	movf	modTri@inflection^(0+256),w
  9900  0CB5  0021               	movlb	1	; select bank1
  9901  0CB6  00BE               	movwf	___ftneg@f1^(0+128)
  9902  0CB7  0022               	movlb	2	; select bank2
  9903  0CB8  0832               	movf	(modTri@inflection+1)^(0+256),w
  9904  0CB9  0021               	movlb	1	; select bank1
  9905  0CBA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9906  0CBB  0022               	movlb	2	; select bank2
  9907  0CBC  0833               	movf	(modTri@inflection+2)^(0+256),w
  9908  0CBD  0021               	movlb	1	; select bank1
  9909  0CBE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9910  0CBF  31AD  259D  318B   	fcall	___ftneg
  9911  0CC2  0021               	movlb	1	; select bank1
  9912  0CC3  083E               	movf	?___ftneg^(0+128),w
  9913  0CC4  00C4               	movwf	___ftadd@f2^(0+128)
  9914  0CC5  083F               	movf	(?___ftneg+1)^(0+128),w
  9915  0CC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9916  0CC7  0840               	movf	(?___ftneg+2)^(0+128),w
  9917  0CC8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9918  0CC9  3190  2020  318B   	fcall	___ftadd
  9919  0CCC  0021               	movlb	1	; select bank1
  9920  0CCD  0841               	movf	?___ftadd^(0+128),w
  9921  0CCE  00CE               	movwf	___ftdiv@f2^(0+128)
  9922  0CCF  0842               	movf	(?___ftadd+1)^(0+128),w
  9923  0CD0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9924  0CD1  0843               	movf	(?___ftadd+2)^(0+128),w
  9925  0CD2                     L6:	
  9926  0CD2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9927  0CD3  3000               	movlw	0
  9928  0CD4  00D1               	movwf	___ftdiv@f1^(0+128)
  9929  0CD5  3034               	movlw	52
  9930  0CD6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9931  0CD7  3043               	movlw	67
  9932  0CD8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9933  0CD9  319D  253D  318B   	fcall	___ftdiv
  9934  0CDC  0021               	movlb	1	; select bank1
  9935  0CDD  084E               	movf	?___ftdiv^(0+128),w
  9936  0CDE  0022               	movlb	2	; select bank2
  9937  0CDF  00BA               	movwf	modTri@period^(0+256)
  9938  0CE0  0021               	movlb	1	; select bank1
  9939  0CE1  084F               	movf	(?___ftdiv+1)^(0+128),w
  9940  0CE2  0022               	movlb	2	; select bank2
  9941  0CE3  00BB               	movwf	(modTri@period+1)^(0+256)
  9942  0CE4  0021               	movlb	1	; select bank1
  9943  0CE5  0850               	movf	(?___ftdiv+2)^(0+128),w
  9944  0CE6  0022               	movlb	2	; select bank2
  9945  0CE7  00BC               	movwf	(modTri@period+2)^(0+256)
  9946                           
  9947                           ;modulation.c: 106: }
  9948                           ;modulation.c: 107: double tmpVal = (period*angle-shift) ;
  9949  0CE8  0837               	movf	modTri@shift^(0+256),w
  9950  0CE9  0021               	movlb	1	; select bank1
  9951  0CEA  00BE               	movwf	___ftneg@f1^(0+128)
  9952  0CEB  0022               	movlb	2	; select bank2
  9953  0CEC  0838               	movf	(modTri@shift+1)^(0+256),w
  9954  0CED  0021               	movlb	1	; select bank1
  9955  0CEE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9956  0CEF  0022               	movlb	2	; select bank2
  9957  0CF0  0839               	movf	(modTri@shift+2)^(0+256),w
  9958  0CF1  0021               	movlb	1	; select bank1
  9959  0CF2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9960  0CF3  31AD  259D  318B   	fcall	___ftneg
  9961  0CF6  0021               	movlb	1	; select bank1
  9962  0CF7  083E               	movf	?___ftneg^(0+128),w
  9963  0CF8  00C1               	movwf	___ftadd@f1^(0+128)
  9964  0CF9  083F               	movf	(?___ftneg+1)^(0+128),w
  9965  0CFA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9966  0CFB  0840               	movf	(?___ftneg+2)^(0+128),w
  9967  0CFC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9968  0CFD  0022               	movlb	2	; select bank2
  9969  0CFE  082E               	movf	modTri@angle^(0+256),w
  9970  0CFF  0021               	movlb	1	; select bank1
  9971  0D00  00AE               	movwf	___ftmul@f1^(0+128)
  9972  0D01  0022               	movlb	2	; select bank2
  9973  0D02  082F               	movf	(modTri@angle+1)^(0+256),w
  9974  0D03  0021               	movlb	1	; select bank1
  9975  0D04  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9976  0D05  0022               	movlb	2	; select bank2
  9977  0D06  0830               	movf	(modTri@angle+2)^(0+256),w
  9978  0D07  0021               	movlb	1	; select bank1
  9979  0D08  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9980  0D09  0022               	movlb	2	; select bank2
  9981  0D0A  083A               	movf	modTri@period^(0+256),w
  9982  0D0B  0021               	movlb	1	; select bank1
  9983  0D0C  00B1               	movwf	___ftmul@f2^(0+128)
  9984  0D0D  0022               	movlb	2	; select bank2
  9985  0D0E  083B               	movf	(modTri@period+1)^(0+256),w
  9986  0D0F  0021               	movlb	1	; select bank1
  9987  0D10  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9988  0D11  0022               	movlb	2	; select bank2
  9989  0D12  083C               	movf	(modTri@period+2)^(0+256),w
  9990  0D13  0021               	movlb	1	; select bank1
  9991  0D14  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9992  0D15  319E  2691  318B   	fcall	___ftmul
  9993  0D18  0021               	movlb	1	; select bank1
  9994  0D19  082E               	movf	?___ftmul^(0+128),w
  9995  0D1A  00C4               	movwf	___ftadd@f2^(0+128)
  9996  0D1B  082F               	movf	(?___ftmul+1)^(0+128),w
  9997  0D1C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9998  0D1D  0830               	movf	(?___ftmul+2)^(0+128),w
  9999  0D1E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10000  0D1F  3190  2020  318B   	fcall	___ftadd
 10001  0D22  0021               	movlb	1	; select bank1
 10002  0D23  0841               	movf	?___ftadd^(0+128),w
 10003  0D24  0022               	movlb	2	; select bank2
 10004  0D25  00BD               	movwf	modTri@tmpVal^(0+256)
 10005  0D26  0021               	movlb	1	; select bank1
 10006  0D27  0842               	movf	(?___ftadd+1)^(0+128),w
 10007  0D28  0022               	movlb	2	; select bank2
 10008  0D29  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10009  0D2A  0021               	movlb	1	; select bank1
 10010  0D2B  0843               	movf	(?___ftadd+2)^(0+128),w
 10011  0D2C  0022               	movlb	2	; select bank2
 10012  0D2D  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10013                           
 10014                           ;modulation.c: 108: if (tmpVal > 270) {
 10015  0D2E  3000               	movlw	0
 10016  0D2F  0021               	movlb	1	; select bank1
 10017  0D30  00A0               	movwf	___ftge@ff1^(0+128)
 10018  0D31  3087               	movlw	135
 10019  0D32  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10020  0D33  3043               	movlw	67
 10021  0D34  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10022  0D35  0022               	movlb	2	; select bank2
 10023  0D36  083D               	movf	modTri@tmpVal^(0+256),w
 10024  0D37  0021               	movlb	1	; select bank1
 10025  0D38  00A3               	movwf	___ftge@ff2^(0+128)
 10026  0D39  0022               	movlb	2	; select bank2
 10027  0D3A  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10028  0D3B  0021               	movlb	1	; select bank1
 10029  0D3C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10030  0D3D  0022               	movlb	2	; select bank2
 10031  0D3E  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10032  0D3F  0021               	movlb	1	; select bank1
 10033  0D40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10034  0D41  31A1  2167  318B   	fcall	___ftge
 10035  0D44  1803               	btfsc	3,0
 10036  0D45  2D59               	goto	l8522
 10037                           
 10038                           ;modulation.c: 109: tmpVal = tmpVal - 360.0;
 10039  0D46  3000               	movlw	0
 10040  0D47  0021               	movlb	1	; select bank1
 10041  0D48  00C1               	movwf	___ftadd@f1^(0+128)
 10042  0D49  30B4               	movlw	180
 10043  0D4A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10044  0D4B  30C3               	movlw	195
 10045  0D4C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10046  0D4D  0022               	movlb	2	; select bank2
 10047  0D4E  083D               	movf	modTri@tmpVal^(0+256),w
 10048  0D4F  0021               	movlb	1	; select bank1
 10049  0D50  00C4               	movwf	___ftadd@f2^(0+128)
 10050  0D51  0022               	movlb	2	; select bank2
 10051  0D52  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10052  0D53  0021               	movlb	1	; select bank1
 10053  0D54  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10054  0D55  0022               	movlb	2	; select bank2
 10055  0D56  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10056  0D57  0021               	movlb	1	; select bank1
 10057  0D58  2D8D               	goto	L8
 10058  0D59                     l8522:	
 10059                           ;modulation.c: 110: } else if (tmpVal > 90) {
 10060                           
 10061  0D59  3000               	movlw	0
 10062  0D5A  0021               	movlb	1	; select bank1
 10063  0D5B  00A0               	movwf	___ftge@ff1^(0+128)
 10064  0D5C  30B4               	movlw	180
 10065  0D5D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10066  0D5E  3042               	movlw	66
 10067  0D5F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10068  0D60  0022               	movlb	2	; select bank2
 10069  0D61  083D               	movf	modTri@tmpVal^(0+256),w
 10070  0D62  0021               	movlb	1	; select bank1
 10071  0D63  00A3               	movwf	___ftge@ff2^(0+128)
 10072  0D64  0022               	movlb	2	; select bank2
 10073  0D65  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10074  0D66  0021               	movlb	1	; select bank1
 10075  0D67  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10076  0D68  0022               	movlb	2	; select bank2
 10077  0D69  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10078  0D6A  0021               	movlb	1	; select bank1
 10079  0D6B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10080  0D6C  31A1  2167  318B   	fcall	___ftge
 10081  0D6F  1803               	btfsc	3,0
 10082  0D70  2D9D               	goto	l1920
 10083                           
 10084                           ;modulation.c: 111: tmpVal = 180 - tmpVal;
 10085  0D71  3000               	movlw	0
 10086  0D72  0021               	movlb	1	; select bank1
 10087  0D73  00C1               	movwf	___ftadd@f1^(0+128)
 10088  0D74  3034               	movlw	52
 10089  0D75  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10090  0D76  3043               	movlw	67
 10091  0D77  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10092  0D78  0022               	movlb	2	; select bank2
 10093  0D79  083D               	movf	modTri@tmpVal^(0+256),w
 10094  0D7A  0021               	movlb	1	; select bank1
 10095  0D7B  00BE               	movwf	___ftneg@f1^(0+128)
 10096  0D7C  0022               	movlb	2	; select bank2
 10097  0D7D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10098  0D7E  0021               	movlb	1	; select bank1
 10099  0D7F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10100  0D80  0022               	movlb	2	; select bank2
 10101  0D81  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10102  0D82  0021               	movlb	1	; select bank1
 10103  0D83  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10104  0D84  31AD  259D  318B   	fcall	___ftneg
 10105  0D87  0021               	movlb	1	; select bank1
 10106  0D88  083E               	movf	?___ftneg^(0+128),w
 10107  0D89  00C4               	movwf	___ftadd@f2^(0+128)
 10108  0D8A  083F               	movf	(?___ftneg+1)^(0+128),w
 10109  0D8B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10110  0D8C  0840               	movf	(?___ftneg+2)^(0+128),w
 10111  0D8D                     L8:	
 10112  0D8D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10113  0D8E  3190  2020  318B   	fcall	___ftadd
 10114  0D91  0021               	movlb	1	; select bank1
 10115  0D92  0841               	movf	?___ftadd^(0+128),w
 10116  0D93  0022               	movlb	2	; select bank2
 10117  0D94  00BD               	movwf	modTri@tmpVal^(0+256)
 10118  0D95  0021               	movlb	1	; select bank1
 10119  0D96  0842               	movf	(?___ftadd+1)^(0+128),w
 10120  0D97  0022               	movlb	2	; select bank2
 10121  0D98  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10122  0D99  0021               	movlb	1	; select bank1
 10123  0D9A  0843               	movf	(?___ftadd+2)^(0+128),w
 10124  0D9B  0022               	movlb	2	; select bank2
 10125  0D9C  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10126  0D9D                     l1920:	
 10127                           
 10128                           ;modulation.c: 112: }
 10129                           ;modulation.c: 113: tmpVal = tmpVal * 10/9;
 10130  0D9D  3000               	movlw	0
 10131  0D9E  0021               	movlb	1	; select bank1
 10132  0D9F  00CE               	movwf	___ftdiv@f2^(0+128)
 10133  0DA0  3010               	movlw	16
 10134  0DA1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10135  0DA2  3041               	movlw	65
 10136  0DA3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10137  0DA4  3000               	movlw	0
 10138  0DA5  00AE               	movwf	___ftmul@f1^(0+128)
 10139  0DA6  3020               	movlw	32
 10140  0DA7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10141  0DA8  3041               	movlw	65
 10142  0DA9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10143  0DAA  0022               	movlb	2	; select bank2
 10144  0DAB  083D               	movf	modTri@tmpVal^(0+256),w
 10145  0DAC  0021               	movlb	1	; select bank1
 10146  0DAD  00B1               	movwf	___ftmul@f2^(0+128)
 10147  0DAE  0022               	movlb	2	; select bank2
 10148  0DAF  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10149  0DB0  0021               	movlb	1	; select bank1
 10150  0DB1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10151  0DB2  0022               	movlb	2	; select bank2
 10152  0DB3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10153  0DB4  0021               	movlb	1	; select bank1
 10154  0DB5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10155  0DB6  319E  2691  318B   	fcall	___ftmul
 10156  0DB9  0021               	movlb	1	; select bank1
 10157  0DBA  082E               	movf	?___ftmul^(0+128),w
 10158  0DBB  00D1               	movwf	___ftdiv@f1^(0+128)
 10159  0DBC  082F               	movf	(?___ftmul+1)^(0+128),w
 10160  0DBD  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10161  0DBE  0830               	movf	(?___ftmul+2)^(0+128),w
 10162  0DBF  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10163  0DC0  319D  253D  318B   	fcall	___ftdiv
 10164  0DC3  0021               	movlb	1	; select bank1
 10165  0DC4  084E               	movf	?___ftdiv^(0+128),w
 10166  0DC5  0022               	movlb	2	; select bank2
 10167  0DC6  00BD               	movwf	modTri@tmpVal^(0+256)
 10168  0DC7  0021               	movlb	1	; select bank1
 10169  0DC8  084F               	movf	(?___ftdiv+1)^(0+128),w
 10170  0DC9  0022               	movlb	2	; select bank2
 10171  0DCA  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10172  0DCB  0021               	movlb	1	; select bank1
 10173  0DCC  0850               	movf	(?___ftdiv+2)^(0+128),w
 10174  0DCD  0022               	movlb	2	; select bank2
 10175  0DCE  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10176                           
 10177                           ;modulation.c: 115: return (int)(tmpVal);
 10178  0DCF  083D               	movf	modTri@tmpVal^(0+256),w
 10179  0DD0  00A0               	movwf	___fttol@f1^(0+256)
 10180  0DD1  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10181  0DD2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10182  0DD3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10183  0DD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10184  0DD5  3199  21D0         	fcall	___fttol
 10185  0DD7  0022               	movlb	2	; select bank2
 10186  0DD8  0821               	movf	(?___fttol^(0+256)+1),w
 10187  0DD9  00AF               	movwf	(?_modTri+1)^(0+256)
 10188  0DDA  0820               	movf	?___fttol^(0+256),w
 10189  0DDB  00AE               	movwf	?_modTri^(0+256)
 10190  0DDC  0008               	return
 10191  0DDD                     __end_of_modTri:	
 10192                           
 10193                           	psect	text18
 10194  21A3                     __ptext18:	
 10195 ;; *************** function _modSquare *****************
 10196 ;; Defined at:
 10197 ;;		line 141 in file "modulation.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;  angle           3   40[BANK2 ] int 
 10200 ;;  inflection      3   43[BANK2 ] int 
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;  tmpVal          2   46[BANK2 ] int 
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  2   40[BANK2 ] int 
 10205 ;; Registers used:
 10206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10212 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10213 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10215 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10216 ;;Total ram usage:        8 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; Hardware stack levels required when called:    6
 10219 ;; This function calls:
 10220 ;;		___ftge
 10221 ;;		_modSin
 10222 ;; This function is called by:
 10223 ;;		_updateModulationArray
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           
 10228                           ;psect for function _modSquare
 10229  21A3                     _modSquare:	
 10230                           
 10231                           ;modulation.c: 142: int tmpVal = modSin(angle, inflection);
 10232                           
 10233                           ;incstack = 0
 10234                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10235  21A3  0022               	movlb	2	; select bank2
 10236  21A4  0848               	movf	modSquare@angle^(0+256),w
 10237  21A5  00B4               	movwf	modSin@angle^(0+256)
 10238  21A6  0849               	movf	(modSquare@angle+1)^(0+256),w
 10239  21A7  00B5               	movwf	(modSin@angle+1)^(0+256)
 10240  21A8  084A               	movf	(modSquare@angle+2)^(0+256),w
 10241  21A9  00B6               	movwf	(modSin@angle+2)^(0+256)
 10242  21AA  084B               	movf	modSquare@inflection^(0+256),w
 10243  21AB  00B7               	movwf	modSin@inflection^(0+256)
 10244  21AC  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10245  21AD  00B8               	movwf	(modSin@inflection+1)^(0+256)
 10246  21AE  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10247  21AF  00B9               	movwf	(modSin@inflection+2)^(0+256)
 10248  21B0  3196  2654  31A1   	fcall	_modSin
 10249  21B3  0022               	movlb	2	; select bank2
 10250  21B4  0835               	movf	(?_modSin+1)^(0+256),w
 10251  21B5  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10252  21B6  0834               	movf	?_modSin^(0+256),w
 10253  21B7  00CE               	movwf	modSquare@tmpVal^(0+256)
 10254                           
 10255                           ;modulation.c: 144: return (angle <= inflection) ? 100 : -100;
 10256  21B8  084B               	movf	modSquare@inflection^(0+256),w
 10257  21B9  0021               	movlb	1	; select bank1
 10258  21BA  00A0               	movwf	___ftge@ff1^(0+128)
 10259  21BB  0022               	movlb	2	; select bank2
 10260  21BC  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10261  21BD  0021               	movlb	1	; select bank1
 10262  21BE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10263  21BF  0022               	movlb	2	; select bank2
 10264  21C0  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10265  21C1  0021               	movlb	1	; select bank1
 10266  21C2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10267  21C3  0022               	movlb	2	; select bank2
 10268  21C4  0848               	movf	modSquare@angle^(0+256),w
 10269  21C5  0021               	movlb	1	; select bank1
 10270  21C6  00A3               	movwf	___ftge@ff2^(0+128)
 10271  21C7  0022               	movlb	2	; select bank2
 10272  21C8  0849               	movf	(modSquare@angle+1)^(0+256),w
 10273  21C9  0021               	movlb	1	; select bank1
 10274  21CA  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10275  21CB  0022               	movlb	2	; select bank2
 10276  21CC  084A               	movf	(modSquare@angle+2)^(0+256),w
 10277  21CD  0021               	movlb	1	; select bank1
 10278  21CE  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10279  21CF  31A1  2167  31A1   	fcall	___ftge
 10280  21D2  1803               	btfsc	3,0
 10281  21D3  29DA               	goto	l8534
 10282  21D4  309C               	movlw	156
 10283  21D5  0022               	movlb	2	; select bank2
 10284  21D6  00C8               	movwf	?_modSquare^(0+256)
 10285  21D7  30FF               	movlw	255
 10286  21D8  00C9               	movwf	(?_modSquare^(0+256)+1)
 10287  21D9  0008               	return
 10288  21DA                     l8534:	
 10289  21DA  3064               	movlw	100
 10290  21DB  0022               	movlb	2	; select bank2
 10291  21DC  00C8               	movwf	?_modSquare^(0+256)
 10292  21DD  3000               	movlw	0
 10293  21DE  00C9               	movwf	(?_modSquare^(0+256)+1)
 10294  21DF  0008               	return
 10295  21E0                     __end_of_modSquare:	
 10296                           
 10297                           	psect	text19
 10298  1654                     __ptext19:	
 10299 ;; *************** function _modSin *****************
 10300 ;; Defined at:
 10301 ;;		line 80 in file "modulation.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  angle           3   20[BANK2 ] int 
 10304 ;;  inflection      3   23[BANK2 ] int 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  tmpVal          3   37[BANK2 ] int 
 10307 ;;  period          3   34[BANK2 ] int 
 10308 ;;  shift           3   31[BANK2 ] int 
 10309 ;; Return value:  Size  Location     Type
 10310 ;;                  2   20[BANK2 ] int 
 10311 ;; Registers used:
 10312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10318 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10319 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10320 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10321 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10322 ;;Total ram usage:       20 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    5
 10325 ;; This function calls:
 10326 ;;		___ftadd
 10327 ;;		___ftdiv
 10328 ;;		___ftge
 10329 ;;		___ftmul
 10330 ;;		___ftneg
 10331 ;;		___fttol
 10332 ;;		___wmul
 10333 ;; This function is called by:
 10334 ;;		_updateModulationArray
 10335 ;;		_modSquare
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           
 10340                           ;psect for function _modSin
 10341  1654                     _modSin:	
 10342                           
 10343                           ;modulation.c: 81: double period = 1.0;
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10347  1654  3000               	movlw	0
 10348  1655  0022               	movlb	2	; select bank2
 10349  1656  00C2               	movwf	modSin@period^(0+256)
 10350  1657  3080               	movlw	128
 10351  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10352  1659  303F               	movlw	63
 10353  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10354                           
 10355                           ;modulation.c: 82: double shift = 0.0;
 10356  165B  3000               	movlw	0
 10357  165C  00BF               	movwf	modSin@shift^(0+256)
 10358  165D  3000               	movlw	0
 10359  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10360  165F  3000               	movlw	0
 10361  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10362                           
 10363                           ;modulation.c: 84: if(angle<=inflection) {
 10364  1661  0837               	movf	modSin@inflection^(0+256),w
 10365  1662  0021               	movlb	1	; select bank1
 10366  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10367  1664  0022               	movlb	2	; select bank2
 10368  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10369  1666  0021               	movlb	1	; select bank1
 10370  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10371  1668  0022               	movlb	2	; select bank2
 10372  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10373  166A  0021               	movlb	1	; select bank1
 10374  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10375  166C  0022               	movlb	2	; select bank2
 10376  166D  0834               	movf	modSin@angle^(0+256),w
 10377  166E  0021               	movlb	1	; select bank1
 10378  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10379  1670  0022               	movlb	2	; select bank2
 10380  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10381  1672  0021               	movlb	1	; select bank1
 10382  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10383  1674  0022               	movlb	2	; select bank2
 10384  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10385  1676  0021               	movlb	1	; select bank1
 10386  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10387  1678  31A1  2167  3196   	fcall	___ftge
 10388  167B  1C03               	btfss	3,0
 10389  167C  2E89               	goto	l8184
 10390                           
 10391                           ;modulation.c: 85: period = 180.0/inflection;
 10392  167D  0022               	movlb	2	; select bank2
 10393  167E  0837               	movf	modSin@inflection^(0+256),w
 10394  167F  0021               	movlb	1	; select bank1
 10395  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10396  1681  0022               	movlb	2	; select bank2
 10397  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10398  1683  0021               	movlb	1	; select bank1
 10399  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10400  1685  0022               	movlb	2	; select bank2
 10401  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10402  1687  0021               	movlb	1	; select bank1
 10403  1688  2F44               	goto	L9
 10404  1689                     l8184:	
 10405                           ;modulation.c: 86: } else {
 10406                           
 10407                           
 10408                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10409  1689  0022               	movlb	2	; select bank2
 10410  168A  0837               	movf	modSin@inflection^(0+256),w
 10411  168B  0021               	movlb	1	; select bank1
 10412  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10413  168D  0022               	movlb	2	; select bank2
 10414  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10415  168F  0021               	movlb	1	; select bank1
 10416  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10417  1691  0022               	movlb	2	; select bank2
 10418  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10419  1693  0021               	movlb	1	; select bank1
 10420  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10421  1695  3000               	movlw	0
 10422  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10423  1697  3000               	movlw	0
 10424  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10425  1699  3040               	movlw	64
 10426  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10427  169B  319E  2691  3196   	fcall	___ftmul
 10428  169E  0021               	movlb	1	; select bank1
 10429  169F  082E               	movf	?___ftmul^(0+128),w
 10430  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10431  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10432  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10433  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10434  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10435  16A5  31AD  259D  3196   	fcall	___ftneg
 10436  16A8  0021               	movlb	1	; select bank1
 10437  16A9  083E               	movf	?___ftneg^(0+128),w
 10438  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10439  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10440  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10441  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10442  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10443  16AF  3000               	movlw	0
 10444  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10445  16B1  30B4               	movlw	180
 10446  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10447  16B3  3043               	movlw	67
 10448  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10449  16B5  3190  2020  3196   	fcall	___ftadd
 10450  16B8  0021               	movlb	1	; select bank1
 10451  16B9  0841               	movf	?___ftadd^(0+128),w
 10452  16BA  0022               	movlb	2	; select bank2
 10453  16BB  00BC               	movwf	_modSin$2845^(0+256)
 10454  16BC  0021               	movlb	1	; select bank1
 10455  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10456  16BE  0022               	movlb	2	; select bank2
 10457  16BF  00BD               	movwf	(_modSin$2845+1)^(0+256)
 10458  16C0  0021               	movlb	1	; select bank1
 10459  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10460  16C2  0022               	movlb	2	; select bank2
 10461  16C3  00BE               	movwf	(_modSin$2845+2)^(0+256)
 10462                           
 10463                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10464  16C4  083C               	movf	_modSin$2845^(0+256),w
 10465  16C5  0021               	movlb	1	; select bank1
 10466  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10467  16C7  0022               	movlb	2	; select bank2
 10468  16C8  083D               	movf	(_modSin$2845+1)^(0+256),w
 10469  16C9  0021               	movlb	1	; select bank1
 10470  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10471  16CB  0022               	movlb	2	; select bank2
 10472  16CC  083E               	movf	(_modSin$2845+2)^(0+256),w
 10473  16CD  0021               	movlb	1	; select bank1
 10474  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10475  16CF  31AD  259D  3196   	fcall	___ftneg
 10476  16D2  0021               	movlb	1	; select bank1
 10477  16D3  083E               	movf	?___ftneg^(0+128),w
 10478  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10479  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10480  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10481  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10482  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10483  16D9  3000               	movlw	0
 10484  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10485  16DB  30B4               	movlw	180
 10486  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10487  16DD  3043               	movlw	67
 10488  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10489  16DF  0022               	movlb	2	; select bank2
 10490  16E0  0837               	movf	modSin@inflection^(0+256),w
 10491  16E1  0021               	movlb	1	; select bank1
 10492  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10493  16E3  0022               	movlb	2	; select bank2
 10494  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10495  16E5  0021               	movlb	1	; select bank1
 10496  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10497  16E7  0022               	movlb	2	; select bank2
 10498  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10499  16E9  0021               	movlb	1	; select bank1
 10500  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10501  16EB  31AD  259D  3196   	fcall	___ftneg
 10502  16EE  0021               	movlb	1	; select bank1
 10503  16EF  083E               	movf	?___ftneg^(0+128),w
 10504  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10505  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10506  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10507  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10508  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10509  16F5  3190  2020  3196   	fcall	___ftadd
 10510  16F8  0021               	movlb	1	; select bank1
 10511  16F9  0841               	movf	?___ftadd^(0+128),w
 10512  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10513  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10514  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10515  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10516  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10517  16FF  3000               	movlw	0
 10518  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10519  1701  3034               	movlw	52
 10520  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10521  1703  3043               	movlw	67
 10522  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10523  1705  319D  253D  3196   	fcall	___ftdiv
 10524  1708  0021               	movlb	1	; select bank1
 10525  1709  084E               	movf	?___ftdiv^(0+128),w
 10526  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10527  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10528  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10529  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10530  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10531  170F  319E  2691  3196   	fcall	___ftmul
 10532  1712  0021               	movlb	1	; select bank1
 10533  1713  082E               	movf	?___ftmul^(0+128),w
 10534  1714  0022               	movlb	2	; select bank2
 10535  1715  00BF               	movwf	modSin@shift^(0+256)
 10536  1716  0021               	movlb	1	; select bank1
 10537  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10538  1718  0022               	movlb	2	; select bank2
 10539  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10540  171A  0021               	movlb	1	; select bank1
 10541  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10542  171C  0022               	movlb	2	; select bank2
 10543  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10544                           
 10545                           ;modulation.c: 88: period = 180/(360-inflection);
 10546  171E  3000               	movlw	0
 10547  171F  0021               	movlb	1	; select bank1
 10548  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10549  1721  30B4               	movlw	180
 10550  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10551  1723  3043               	movlw	67
 10552  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10553  1725  0022               	movlb	2	; select bank2
 10554  1726  0837               	movf	modSin@inflection^(0+256),w
 10555  1727  0021               	movlb	1	; select bank1
 10556  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10557  1729  0022               	movlb	2	; select bank2
 10558  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10559  172B  0021               	movlb	1	; select bank1
 10560  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10561  172D  0022               	movlb	2	; select bank2
 10562  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10563  172F  0021               	movlb	1	; select bank1
 10564  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10565  1731  31AD  259D  3196   	fcall	___ftneg
 10566  1734  0021               	movlb	1	; select bank1
 10567  1735  083E               	movf	?___ftneg^(0+128),w
 10568  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10569  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10570  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10571  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10572  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10573  173B  3190  2020  3196   	fcall	___ftadd
 10574  173E  0021               	movlb	1	; select bank1
 10575  173F  0841               	movf	?___ftadd^(0+128),w
 10576  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10577  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10578  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10579  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10580  1744                     L9:	
 10581  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10582  1745  3000               	movlw	0
 10583  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10584  1747  3034               	movlw	52
 10585  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10586  1749  3043               	movlw	67
 10587  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10588  174B  319D  253D  3196   	fcall	___ftdiv
 10589  174E  0021               	movlb	1	; select bank1
 10590  174F  084E               	movf	?___ftdiv^(0+128),w
 10591  1750  0022               	movlb	2	; select bank2
 10592  1751  00C2               	movwf	modSin@period^(0+256)
 10593  1752  0021               	movlb	1	; select bank1
 10594  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10595  1754  0022               	movlb	2	; select bank2
 10596  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10597  1756  0021               	movlb	1	; select bank1
 10598  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10599  1758  0022               	movlb	2	; select bank2
 10600  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10601                           
 10602                           ;modulation.c: 90: }
 10603                           ;modulation.c: 91: double tmpVal = (period*angle-shift) /3;
 10604  175A  3000               	movlw	0
 10605  175B  0021               	movlb	1	; select bank1
 10606  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10607  175D  3040               	movlw	64
 10608  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10609  175F  3040               	movlw	64
 10610  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10611  1761  0022               	movlb	2	; select bank2
 10612  1762  083F               	movf	modSin@shift^(0+256),w
 10613  1763  0021               	movlb	1	; select bank1
 10614  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10615  1765  0022               	movlb	2	; select bank2
 10616  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10617  1767  0021               	movlb	1	; select bank1
 10618  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10619  1769  0022               	movlb	2	; select bank2
 10620  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10621  176B  0021               	movlb	1	; select bank1
 10622  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10623  176D  31AD  259D  3196   	fcall	___ftneg
 10624  1770  0021               	movlb	1	; select bank1
 10625  1771  083E               	movf	?___ftneg^(0+128),w
 10626  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10627  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10628  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10629  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10630  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10631  1777  0022               	movlb	2	; select bank2
 10632  1778  0834               	movf	modSin@angle^(0+256),w
 10633  1779  0021               	movlb	1	; select bank1
 10634  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10635  177B  0022               	movlb	2	; select bank2
 10636  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10637  177D  0021               	movlb	1	; select bank1
 10638  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10639  177F  0022               	movlb	2	; select bank2
 10640  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10641  1781  0021               	movlb	1	; select bank1
 10642  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10643  1783  0022               	movlb	2	; select bank2
 10644  1784  0842               	movf	modSin@period^(0+256),w
 10645  1785  0021               	movlb	1	; select bank1
 10646  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10647  1787  0022               	movlb	2	; select bank2
 10648  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10649  1789  0021               	movlb	1	; select bank1
 10650  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10651  178B  0022               	movlb	2	; select bank2
 10652  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10653  178D  0021               	movlb	1	; select bank1
 10654  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10655  178F  319E  2691  3196   	fcall	___ftmul
 10656  1792  0021               	movlb	1	; select bank1
 10657  1793  082E               	movf	?___ftmul^(0+128),w
 10658  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10659  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10660  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10661  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10662  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10663  1799  3190  2020  3196   	fcall	___ftadd
 10664  179C  0021               	movlb	1	; select bank1
 10665  179D  0841               	movf	?___ftadd^(0+128),w
 10666  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10667  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10668  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10669  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10670  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10671  17A3  319D  253D  3196   	fcall	___ftdiv
 10672  17A6  0021               	movlb	1	; select bank1
 10673  17A7  084E               	movf	?___ftdiv^(0+128),w
 10674  17A8  0022               	movlb	2	; select bank2
 10675  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10676  17AA  0021               	movlb	1	; select bank1
 10677  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10678  17AC  0022               	movlb	2	; select bank2
 10679  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10680  17AE  0021               	movlb	1	; select bank1
 10681  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10682  17B0  0022               	movlb	2	; select bank2
 10683  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10684                           
 10685                           ;modulation.c: 92: tmpVal = sinArray[(int)(tmpVal)];
 10686  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10687  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10688  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10689  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10690  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10691  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10692  17B8  3199  21D0  3196   	fcall	___fttol
 10693  17BB  0022               	movlb	2	; select bank2
 10694  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10695  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10696  17BE  0820               	movf	?___fttol^(0+256),w
 10697  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10698  17C0  3003               	movlw	3
 10699  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10700  17C2  3000               	movlw	0
 10701  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10702  17C4  31AE  2641  3196   	fcall	___wmul
 10703  17C7  3082               	movlw	130
 10704  17C8  0022               	movlb	2	; select bank2
 10705  17C9  00BA               	movwf	??_modSin^(0+256)
 10706  17CA  3024               	movlw	36
 10707  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10708  17CC  082E               	movf	?___wmul^(0+256),w
 10709  17CD  073A               	addwf	??_modSin^(0+256),w
 10710  17CE  0086               	movwf	6
 10711  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10712  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10713  17D1  0087               	movwf	7
 10714  17D2  3F40               	moviw [0]fsr1
 10715  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10716  17D4  3F41               	moviw [1]fsr1
 10717  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10718  17D6  3F42               	moviw [2]fsr1
 10719  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10720                           
 10721                           ;modulation.c: 93: return (int)(100.0 * tmpVal);
 10722  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10723  17D9  0021               	movlb	1	; select bank1
 10724  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10725  17DB  0022               	movlb	2	; select bank2
 10726  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10727  17DD  0021               	movlb	1	; select bank1
 10728  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10729  17DF  0022               	movlb	2	; select bank2
 10730  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10731  17E1  0021               	movlb	1	; select bank1
 10732  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10733  17E3  3000               	movlw	0
 10734  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10735  17E5  30C8               	movlw	200
 10736  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10737  17E7  3042               	movlw	66
 10738  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10739  17E9  319E  2691  3196   	fcall	___ftmul
 10740  17EC  0021               	movlb	1	; select bank1
 10741  17ED  082E               	movf	?___ftmul^(0+128),w
 10742  17EE  0022               	movlb	2	; select bank2
 10743  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10744  17F0  0021               	movlb	1	; select bank1
 10745  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10746  17F2  0022               	movlb	2	; select bank2
 10747  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10748  17F4  0021               	movlb	1	; select bank1
 10749  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10750  17F6  0022               	movlb	2	; select bank2
 10751  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10752  17F8  3199  21D0         	fcall	___fttol
 10753  17FA  0022               	movlb	2	; select bank2
 10754  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10755  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10756  17FD  0820               	movf	?___fttol^(0+256),w
 10757  17FE  00B4               	movwf	?_modSin^(0+256)
 10758  17FF  0008               	return
 10759  1800                     __end_of_modSin:	
 10760                           
 10761                           	psect	text20
 10762  2E79                     __ptext20:	
 10763 ;; *************** function _modSawRev *****************
 10764 ;; Defined at:
 10765 ;;		line 135 in file "modulation.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;  angle           3   37[BANK2 ] int 
 10768 ;;  inflection      3   40[BANK2 ] int 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;		None
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  2   37[BANK2 ] int 
 10773 ;; Registers used:
 10774 ;;		wreg, status,2, status,0, pclath, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10780 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10782 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10783 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10784 ;;Total ram usage:        8 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:    6
 10787 ;; This function calls:
 10788 ;;		_modSaw
 10789 ;; This function is called by:
 10790 ;;		_updateModulationArray
 10791 ;; This function uses a non-reentrant model
 10792 ;;
 10793                           
 10794                           
 10795                           ;psect for function _modSawRev
 10796  2E79                     _modSawRev:	
 10797                           
 10798                           ;modulation.c: 136: return -1 * modSaw(angle, inflection);
 10799                           
 10800                           ;incstack = 0
 10801                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10802  2E79  0022               	movlb	2	; select bank2
 10803  2E7A  0845               	movf	modSawRev@angle^(0+256),w
 10804  2E7B  00AE               	movwf	modSaw@angle^(0+256)
 10805  2E7C  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10806  2E7D  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10807  2E7E  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10808  2E7F  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10809  2E80  0848               	movf	modSawRev@inflection^(0+256),w
 10810  2E81  00B1               	movwf	modSaw@inflection^(0+256)
 10811  2E82  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10812  2E83  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10813  2E84  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10814  2E85  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10815  2E86  3194  24AA         	fcall	_modSaw
 10816  2E88  0022               	movlb	2	; select bank2
 10817  2E89  092E               	comf	?_modSaw^(0+256),w
 10818  2E8A  00CB               	movwf	??_modSawRev^(0+256)
 10819  2E8B  092F               	comf	(?_modSaw+1)^(0+256),w
 10820  2E8C  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10821  2E8D  0ACB               	incf	??_modSawRev^(0+256),f
 10822  2E8E  1903               	skipnz
 10823  2E8F  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10824  2E90  084B               	movf	??_modSawRev^(0+256),w
 10825  2E91  00C5               	movwf	?_modSawRev^(0+256)
 10826  2E92  084C               	movf	(??_modSawRev+1)^(0+256),w
 10827  2E93  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10828  2E94  0008               	return
 10829  2E95                     __end_of_modSawRev:	
 10830                           
 10831                           	psect	text21
 10832  14AA                     __ptext21:	
 10833 ;; *************** function _modSaw *****************
 10834 ;; Defined at:
 10835 ;;		line 119 in file "modulation.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;  angle           3   14[BANK2 ] int 
 10838 ;;  inflection      3   17[BANK2 ] int 
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;  period          3   34[BANK2 ] int 
 10841 ;;  shift           3   31[BANK2 ] int 
 10842 ;;  mod             2   29[BANK2 ] int 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  2   14[BANK2 ] int 
 10845 ;; Registers used:
 10846 ;;		wreg, status,2, status,0, pclath, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10852 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10853 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10855 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10856 ;;Total ram usage:       23 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    5
 10859 ;; This function calls:
 10860 ;;		___ftadd
 10861 ;;		___ftdiv
 10862 ;;		___ftge
 10863 ;;		___ftmul
 10864 ;;		___ftneg
 10865 ;;		___fttol
 10866 ;; This function is called by:
 10867 ;;		_updateModulationArray
 10868 ;;		_modSawRev
 10869 ;; This function uses a non-reentrant model
 10870 ;;
 10871                           
 10872                           
 10873                           ;psect for function _modSaw
 10874  14AA                     _modSaw:	
 10875                           
 10876                           ;modulation.c: 120: double period = 1.0;
 10877                           
 10878                           ;incstack = 0
 10879                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10880  14AA  3000               	movlw	0
 10881  14AB  0022               	movlb	2	; select bank2
 10882  14AC  00C2               	movwf	modSaw@period^(0+256)
 10883  14AD  3080               	movlw	128
 10884  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10885  14AF  303F               	movlw	63
 10886  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10887                           
 10888                           ;modulation.c: 121: double shift = 0;
 10889  14B1  3000               	movlw	0
 10890  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10891  14B3  3000               	movlw	0
 10892  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10893  14B5  3000               	movlw	0
 10894  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10895                           
 10896                           ;modulation.c: 123: if(angle<=inflection) {
 10897  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10898  14B8  0021               	movlb	1	; select bank1
 10899  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10900  14BA  0022               	movlb	2	; select bank2
 10901  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10902  14BC  0021               	movlb	1	; select bank1
 10903  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10904  14BE  0022               	movlb	2	; select bank2
 10905  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10906  14C0  0021               	movlb	1	; select bank1
 10907  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10908  14C2  0022               	movlb	2	; select bank2
 10909  14C3  082E               	movf	modSaw@angle^(0+256),w
 10910  14C4  0021               	movlb	1	; select bank1
 10911  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10912  14C6  0022               	movlb	2	; select bank2
 10913  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10914  14C8  0021               	movlb	1	; select bank1
 10915  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10916  14CA  0022               	movlb	2	; select bank2
 10917  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10918  14CC  0021               	movlb	1	; select bank1
 10919  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10920  14CE  31A1  2167  3194   	fcall	___ftge
 10921  14D1  1C03               	btfss	3,0
 10922  14D2  2CDF               	goto	l8198
 10923                           
 10924                           ;modulation.c: 124: period = 180.0/inflection;
 10925  14D3  0022               	movlb	2	; select bank2
 10926  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10927  14D5  0021               	movlb	1	; select bank1
 10928  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10929  14D7  0022               	movlb	2	; select bank2
 10930  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10931  14D9  0021               	movlb	1	; select bank1
 10932  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10933  14DB  0022               	movlb	2	; select bank2
 10934  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10935  14DD  0021               	movlb	1	; select bank1
 10936  14DE  2DBC               	goto	L10
 10937  14DF                     l8198:	
 10938                           ;modulation.c: 125: } else {
 10939                           
 10940                           
 10941                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10942  14DF  0022               	movlb	2	; select bank2
 10943  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10944  14E1  0021               	movlb	1	; select bank1
 10945  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10946  14E3  0022               	movlb	2	; select bank2
 10947  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10948  14E5  0021               	movlb	1	; select bank1
 10949  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10950  14E7  0022               	movlb	2	; select bank2
 10951  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10952  14E9  0021               	movlb	1	; select bank1
 10953  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10954  14EB  3000               	movlw	0
 10955  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10956  14ED  3000               	movlw	0
 10957  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10958  14EF  3040               	movlw	64
 10959  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10960  14F1  319E  2691  3194   	fcall	___ftmul
 10961  14F4  0021               	movlb	1	; select bank1
 10962  14F5  082E               	movf	?___ftmul^(0+128),w
 10963  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10964  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10965  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10966  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10967  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10968  14FB  31AD  259D  3194   	fcall	___ftneg
 10969  14FE  0021               	movlb	1	; select bank1
 10970  14FF  083E               	movf	?___ftneg^(0+128),w
 10971  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10972  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10973  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10974  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10975  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10976  1505  3000               	movlw	0
 10977  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10978  1507  30B4               	movlw	180
 10979  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10980  1509  3043               	movlw	67
 10981  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10982  150B  3190  2020  3194   	fcall	___ftadd
 10983  150E  0021               	movlb	1	; select bank1
 10984  150F  0841               	movf	?___ftadd^(0+128),w
 10985  1510  0022               	movlb	2	; select bank2
 10986  1511  00B4               	movwf	_modSaw$2847^(0+256)
 10987  1512  0021               	movlb	1	; select bank1
 10988  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10989  1514  0022               	movlb	2	; select bank2
 10990  1515  00B5               	movwf	(_modSaw$2847+1)^(0+256)
 10991  1516  0021               	movlb	1	; select bank1
 10992  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10993  1518  0022               	movlb	2	; select bank2
 10994  1519  00B6               	movwf	(_modSaw$2847+2)^(0+256)
 10995                           
 10996                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10997  151A  0834               	movf	_modSaw$2847^(0+256),w
 10998  151B  0021               	movlb	1	; select bank1
 10999  151C  00BE               	movwf	___ftneg@f1^(0+128)
 11000  151D  0022               	movlb	2	; select bank2
 11001  151E  0835               	movf	(_modSaw$2847+1)^(0+256),w
 11002  151F  0021               	movlb	1	; select bank1
 11003  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11004  1521  0022               	movlb	2	; select bank2
 11005  1522  0836               	movf	(_modSaw$2847+2)^(0+256),w
 11006  1523  0021               	movlb	1	; select bank1
 11007  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11008  1525  31AD  259D  3194   	fcall	___ftneg
 11009  1528  0021               	movlb	1	; select bank1
 11010  1529  083E               	movf	?___ftneg^(0+128),w
 11011  152A  00AE               	movwf	___ftmul@f1^(0+128)
 11012  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 11013  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11014  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 11015  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11016  152F  3000               	movlw	0
 11017  1530  00C1               	movwf	___ftadd@f1^(0+128)
 11018  1531  30B4               	movlw	180
 11019  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11020  1533  3043               	movlw	67
 11021  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11022  1535  0022               	movlb	2	; select bank2
 11023  1536  0831               	movf	modSaw@inflection^(0+256),w
 11024  1537  0021               	movlb	1	; select bank1
 11025  1538  00BE               	movwf	___ftneg@f1^(0+128)
 11026  1539  0022               	movlb	2	; select bank2
 11027  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11028  153B  0021               	movlb	1	; select bank1
 11029  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11030  153D  0022               	movlb	2	; select bank2
 11031  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11032  153F  0021               	movlb	1	; select bank1
 11033  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11034  1541  31AD  259D  3194   	fcall	___ftneg
 11035  1544  0021               	movlb	1	; select bank1
 11036  1545  083E               	movf	?___ftneg^(0+128),w
 11037  1546  00C4               	movwf	___ftadd@f2^(0+128)
 11038  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 11039  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11040  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 11041  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11042  154B  3190  2020  3194   	fcall	___ftadd
 11043  154E  0021               	movlb	1	; select bank1
 11044  154F  0841               	movf	?___ftadd^(0+128),w
 11045  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 11046  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 11047  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11048  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 11049  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11050  1555  3000               	movlw	0
 11051  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 11052  1557  3034               	movlw	52
 11053  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11054  1559  3043               	movlw	67
 11055  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11056  155B  319D  253D  3194   	fcall	___ftdiv
 11057  155E  0021               	movlb	1	; select bank1
 11058  155F  084E               	movf	?___ftdiv^(0+128),w
 11059  1560  00B1               	movwf	___ftmul@f2^(0+128)
 11060  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 11061  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11062  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 11063  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11064  1565  319E  2691  3194   	fcall	___ftmul
 11065  1568  0021               	movlb	1	; select bank1
 11066  1569  082E               	movf	?___ftmul^(0+128),w
 11067  156A  0022               	movlb	2	; select bank2
 11068  156B  00B7               	movwf	_modSaw$2848^(0+256)
 11069  156C  0021               	movlb	1	; select bank1
 11070  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 11071  156E  0022               	movlb	2	; select bank2
 11072  156F  00B8               	movwf	(_modSaw$2848+1)^(0+256)
 11073  1570  0021               	movlb	1	; select bank1
 11074  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 11075  1572  0022               	movlb	2	; select bank2
 11076  1573  00B9               	movwf	(_modSaw$2848+2)^(0+256)
 11077                           
 11078                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 11079  1574  3000               	movlw	0
 11080  1575  0021               	movlb	1	; select bank1
 11081  1576  00C1               	movwf	___ftadd@f1^(0+128)
 11082  1577  30B4               	movlw	180
 11083  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11084  1579  3043               	movlw	67
 11085  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11086  157B  0022               	movlb	2	; select bank2
 11087  157C  0837               	movf	_modSaw$2848^(0+256),w
 11088  157D  0021               	movlb	1	; select bank1
 11089  157E  00C4               	movwf	___ftadd@f2^(0+128)
 11090  157F  0022               	movlb	2	; select bank2
 11091  1580  0838               	movf	(_modSaw$2848+1)^(0+256),w
 11092  1581  0021               	movlb	1	; select bank1
 11093  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11094  1583  0022               	movlb	2	; select bank2
 11095  1584  0839               	movf	(_modSaw$2848+2)^(0+256),w
 11096  1585  0021               	movlb	1	; select bank1
 11097  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11098  1587  3190  2020  3194   	fcall	___ftadd
 11099  158A  0021               	movlb	1	; select bank1
 11100  158B  0841               	movf	?___ftadd^(0+128),w
 11101  158C  0022               	movlb	2	; select bank2
 11102  158D  00BF               	movwf	modSaw@shift^(0+256)
 11103  158E  0021               	movlb	1	; select bank1
 11104  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 11105  1590  0022               	movlb	2	; select bank2
 11106  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 11107  1592  0021               	movlb	1	; select bank1
 11108  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 11109  1594  0022               	movlb	2	; select bank2
 11110  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 11111                           
 11112                           ;modulation.c: 127: period = 180/(360-inflection);
 11113  1596  3000               	movlw	0
 11114  1597  0021               	movlb	1	; select bank1
 11115  1598  00C1               	movwf	___ftadd@f1^(0+128)
 11116  1599  30B4               	movlw	180
 11117  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11118  159B  3043               	movlw	67
 11119  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11120  159D  0022               	movlb	2	; select bank2
 11121  159E  0831               	movf	modSaw@inflection^(0+256),w
 11122  159F  0021               	movlb	1	; select bank1
 11123  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 11124  15A1  0022               	movlb	2	; select bank2
 11125  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11126  15A3  0021               	movlb	1	; select bank1
 11127  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11128  15A5  0022               	movlb	2	; select bank2
 11129  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11130  15A7  0021               	movlb	1	; select bank1
 11131  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11132  15A9  31AD  259D  3194   	fcall	___ftneg
 11133  15AC  0021               	movlb	1	; select bank1
 11134  15AD  083E               	movf	?___ftneg^(0+128),w
 11135  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 11136  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 11137  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11138  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 11139  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11140  15B3  3190  2020  3194   	fcall	___ftadd
 11141  15B6  0021               	movlb	1	; select bank1
 11142  15B7  0841               	movf	?___ftadd^(0+128),w
 11143  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 11144  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 11145  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11146  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 11147  15BC                     L10:	
 11148  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11149  15BD  3000               	movlw	0
 11150  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 11151  15BF  3034               	movlw	52
 11152  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11153  15C1  3043               	movlw	67
 11154  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11155  15C3  319D  253D  3194   	fcall	___ftdiv
 11156  15C6  0021               	movlb	1	; select bank1
 11157  15C7  084E               	movf	?___ftdiv^(0+128),w
 11158  15C8  0022               	movlb	2	; select bank2
 11159  15C9  00C2               	movwf	modSaw@period^(0+256)
 11160  15CA  0021               	movlb	1	; select bank1
 11161  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11162  15CC  0022               	movlb	2	; select bank2
 11163  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 11164  15CE  0021               	movlb	1	; select bank1
 11165  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11166  15D0  0022               	movlb	2	; select bank2
 11167  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 11168                           
 11169                           ;modulation.c: 128: }
 11170                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11171  15D2  0842               	movf	modSaw@period^(0+256),w
 11172  15D3  0021               	movlb	1	; select bank1
 11173  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 11174  15D5  0022               	movlb	2	; select bank2
 11175  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 11176  15D7  0021               	movlb	1	; select bank1
 11177  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11178  15D9  0022               	movlb	2	; select bank2
 11179  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 11180  15DB  0021               	movlb	1	; select bank1
 11181  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11182  15DD  0022               	movlb	2	; select bank2
 11183  15DE  082E               	movf	modSaw@angle^(0+256),w
 11184  15DF  0021               	movlb	1	; select bank1
 11185  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 11186  15E1  0022               	movlb	2	; select bank2
 11187  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11188  15E3  0021               	movlb	1	; select bank1
 11189  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11190  15E5  0022               	movlb	2	; select bank2
 11191  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11192  15E7  0021               	movlb	1	; select bank1
 11193  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11194  15E9  319E  2691  3194   	fcall	___ftmul
 11195  15EC  0021               	movlb	1	; select bank1
 11196  15ED  082E               	movf	?___ftmul^(0+128),w
 11197  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 11198  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 11199  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11200  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 11201  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11202  15F3  0022               	movlb	2	; select bank2
 11203  15F4  083F               	movf	modSaw@shift^(0+256),w
 11204  15F5  0021               	movlb	1	; select bank1
 11205  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 11206  15F7  0022               	movlb	2	; select bank2
 11207  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 11208  15F9  0021               	movlb	1	; select bank1
 11209  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11210  15FB  0022               	movlb	2	; select bank2
 11211  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 11212  15FD  0021               	movlb	1	; select bank1
 11213  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11214  15FF  31AD  259D  3194   	fcall	___ftneg
 11215  1602  0021               	movlb	1	; select bank1
 11216  1603  083E               	movf	?___ftneg^(0+128),w
 11217  1604  00C1               	movwf	___ftadd@f1^(0+128)
 11218  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 11219  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11220  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 11221  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11222  1609  3190  2020  3194   	fcall	___ftadd
 11223  160C  0021               	movlb	1	; select bank1
 11224  160D  0841               	movf	?___ftadd^(0+128),w
 11225  160E  0022               	movlb	2	; select bank2
 11226  160F  00BA               	movwf	_modSaw$2849^(0+256)
 11227  1610  0021               	movlb	1	; select bank1
 11228  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 11229  1612  0022               	movlb	2	; select bank2
 11230  1613  00BB               	movwf	(_modSaw$2849+1)^(0+256)
 11231  1614  0021               	movlb	1	; select bank1
 11232  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 11233  1616  0022               	movlb	2	; select bank2
 11234  1617  00BC               	movwf	(_modSaw$2849+2)^(0+256)
 11235                           
 11236                           ;modulation.c: 128: }
 11237                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11238  1618  083A               	movf	_modSaw$2849^(0+256),w
 11239  1619  0021               	movlb	1	; select bank1
 11240  161A  00B1               	movwf	___ftmul@f2^(0+128)
 11241  161B  0022               	movlb	2	; select bank2
 11242  161C  083B               	movf	(_modSaw$2849+1)^(0+256),w
 11243  161D  0021               	movlb	1	; select bank1
 11244  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11245  161F  0022               	movlb	2	; select bank2
 11246  1620  083C               	movf	(_modSaw$2849+2)^(0+256),w
 11247  1621  0021               	movlb	1	; select bank1
 11248  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11249  1623  3000               	movlw	0
 11250  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11251  1625  30A0               	movlw	160
 11252  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11253  1627  3040               	movlw	64
 11254  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11255  1629  319E  2691  3194   	fcall	___ftmul
 11256  162C  0021               	movlb	1	; select bank1
 11257  162D  082E               	movf	?___ftmul^(0+128),w
 11258  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11259  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11260  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11261  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11262  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11263  1633  3000               	movlw	0
 11264  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11265  1635  3010               	movlw	16
 11266  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11267  1637  3041               	movlw	65
 11268  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11269  1639  319D  253D  3194   	fcall	___ftdiv
 11270  163C  0021               	movlb	1	; select bank1
 11271  163D  084E               	movf	?___ftdiv^(0+128),w
 11272  163E  0022               	movlb	2	; select bank2
 11273  163F  00A0               	movwf	___fttol@f1^(0+256)
 11274  1640  0021               	movlb	1	; select bank1
 11275  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11276  1642  0022               	movlb	2	; select bank2
 11277  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11278  1644  0021               	movlb	1	; select bank1
 11279  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11280  1646  0022               	movlb	2	; select bank2
 11281  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11282  1648  3199  21D0         	fcall	___fttol
 11283  164A  0022               	movlb	2	; select bank2
 11284  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11285  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11286  164D  0820               	movf	?___fttol^(0+256),w
 11287  164E  00BD               	movwf	modSaw@mod^(0+256)
 11288                           
 11289                           ;modulation.c: 132: return mod;
 11290  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 11291  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11292  1651  083D               	movf	modSaw@mod^(0+256),w
 11293  1652  00AE               	movwf	?_modSaw^(0+256)
 11294  1653  0008               	return
 11295  1654                     __end_of_modSaw:	
 11296                           
 11297                           	psect	text22
 11298  2533                     __ptext22:	
 11299 ;; *************** function ___awdiv *****************
 11300 ;; Defined at:
 11301 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;  divisor         2    0[BANK1 ] int 
 11304 ;;  dividend        2    2[BANK1 ] int 
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;  quotient        2    7[BANK1 ] int 
 11307 ;;  sign            1    6[BANK1 ] unsigned char 
 11308 ;;  counter         1    5[BANK1 ] unsigned char 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  2    0[BANK1 ] int 
 11311 ;; Registers used:
 11312 ;;		wreg, status,2, status,0
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11318 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11319 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11320 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11321 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11322 ;;Total ram usage:        9 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    3
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_updateModulationArray
 11329 ;;		_USARTWriteInt
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           
 11334                           ;psect for function ___awdiv
 11335  2533                     ___awdiv:	
 11336                           
 11337                           ;incstack = 0
 11338                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11339  2533  0021               	movlb	1	; select bank1
 11340  2534  01A6               	clrf	___awdiv@sign^(0+128)
 11341  2535  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11342  2536  2D3E               	goto	l8590
 11343  2537  09A0               	comf	___awdiv@divisor^(0+128),f
 11344  2538  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11345  2539  0AA0               	incf	___awdiv@divisor^(0+128),f
 11346  253A  1903               	skipnz
 11347  253B  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11348  253C  01A6               	clrf	___awdiv@sign^(0+128)
 11349  253D  0AA6               	incf	___awdiv@sign^(0+128),f
 11350  253E                     l8590:	
 11351  253E  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11352  253F  2D49               	goto	l8596
 11353  2540  09A2               	comf	___awdiv@dividend^(0+128),f
 11354  2541  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11355  2542  0AA2               	incf	___awdiv@dividend^(0+128),f
 11356  2543  1903               	skipnz
 11357  2544  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11358  2545  3001               	movlw	1
 11359  2546  00A4               	movwf	??___awdiv^(0+128)
 11360  2547  0824               	movf	??___awdiv^(0+128),w
 11361  2548  06A6               	xorwf	___awdiv@sign^(0+128),f
 11362  2549                     l8596:	
 11363  2549  01A7               	clrf	___awdiv@quotient^(0+128)
 11364  254A  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11365  254B  0820               	movf	___awdiv@divisor^(0+128),w
 11366  254C  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11367  254D  1903               	btfsc	3,2
 11368  254E  2D78               	goto	l8618
 11369  254F  01A5               	clrf	___awdiv@counter^(0+128)
 11370  2550  0AA5               	incf	___awdiv@counter^(0+128),f
 11371  2551                     l8606:	
 11372  2551  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11373  2552  2D5D               	goto	l8608
 11374  2553  3001               	movlw	1
 11375  2554                     u9185:	
 11376  2554  35A0               	lslf	___awdiv@divisor^(0+128),f
 11377  2555  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11378  2556  0B89               	decfsz	9,f
 11379  2557  2D54               	goto	u9185
 11380  2558  3001               	movlw	1
 11381  2559  00A4               	movwf	??___awdiv^(0+128)
 11382  255A  0824               	movf	??___awdiv^(0+128),w
 11383  255B  07A5               	addwf	___awdiv@counter^(0+128),f
 11384  255C  2D51               	goto	l8606
 11385  255D                     l8608:	
 11386  255D  3001               	movlw	1
 11387  255E                     u9205:	
 11388  255E  35A7               	lslf	___awdiv@quotient^(0+128),f
 11389  255F  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11390  2560  0B89               	decfsz	9,f
 11391  2561  2D5E               	goto	u9205
 11392  2562  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11393  2563  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11394  2564  1D03               	skipz
 11395  2565  2D68               	goto	u9215
 11396  2566  0820               	movf	___awdiv@divisor^(0+128),w
 11397  2567  0222               	subwf	___awdiv@dividend^(0+128),w
 11398  2568                     u9215:	
 11399  2568  1C03               	skipc
 11400  2569  2D6F               	goto	l8614
 11401  256A  0820               	movf	___awdiv@divisor^(0+128),w
 11402  256B  02A2               	subwf	___awdiv@dividend^(0+128),f
 11403  256C  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11404  256D  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11405  256E  1427               	bsf	___awdiv@quotient^(0+128),0
 11406  256F                     l8614:	
 11407  256F  3001               	movlw	1
 11408  2570                     u9225:	
 11409  2570  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11410  2571  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11411  2572  0B89               	decfsz	9,f
 11412  2573  2D70               	goto	u9225
 11413  2574  3001               	movlw	1
 11414  2575  02A5               	subwf	___awdiv@counter^(0+128),f
 11415  2576  1D03               	btfss	3,2
 11416  2577  2D5D               	goto	l8608
 11417  2578                     l8618:	
 11418  2578  0826               	movf	___awdiv@sign^(0+128),w
 11419  2579  1903               	btfsc	3,2
 11420  257A  2D80               	goto	l8622
 11421  257B  09A7               	comf	___awdiv@quotient^(0+128),f
 11422  257C  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11423  257D  0AA7               	incf	___awdiv@quotient^(0+128),f
 11424  257E  1903               	skipnz
 11425  257F  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11426  2580                     l8622:	
 11427  2580  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11428  2581  00A1               	movwf	(?___awdiv+1)^(0+128)
 11429  2582  0827               	movf	___awdiv@quotient^(0+128),w
 11430  2583  00A0               	movwf	?___awdiv^(0+128)
 11431  2584  0008               	return
 11432  2585                     __end_of___awdiv:	
 11433                           
 11434                           	psect	text23
 11435  1F45                     __ptext23:	
 11436 ;; *************** function _set_subdivision *****************
 11437 ;; Defined at:
 11438 ;;		line 77 in file "user.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  x               2   31[BANK2 ] int 
 11441 ;;  y               2   33[BANK2 ] int 
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;  scalar          3   38[BANK2 ] float 
 11444 ;;  tmpX            2   41[BANK2 ] int 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  2   31[BANK2 ] int 
 11447 ;; Registers used:
 11448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11454 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11455 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11456 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11457 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11458 ;;Total ram usage:       12 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:    6
 11461 ;; This function calls:
 11462 ;;		___awtoft
 11463 ;;		___ftmul
 11464 ;;		___fttol
 11465 ;;		_trunc
 11466 ;; This function is called by:
 11467 ;;		_main
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _set_subdivision
 11473  1F45                     _set_subdivision:	
 11474                           
 11475                           ;user.c: 81: adjust_mod_delay = 0;
 11476                           
 11477                           ;incstack = 0
 11478                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11479  1F45  0023               	movlb	3	; select bank3
 11480  1F46  01C0               	clrf	_adjust_mod_delay^(0+384)
 11481                           
 11482                           ;user.c: 82: int tmpX = x;
 11483  1F47  0022               	movlb	2	; select bank2
 11484  1F48  0840               	movf	(set_subdivision@x+1)^(0+256),w
 11485  1F49  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11486  1F4A  083F               	movf	set_subdivision@x^(0+256),w
 11487  1F4B  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11488                           
 11489                           ;user.c: 83: float scalar = 1.0;
 11490  1F4C  3000               	movlw	0
 11491  1F4D  00C6               	movwf	set_subdivision@scalar^(0+256)
 11492  1F4E  3080               	movlw	128
 11493  1F4F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11494  1F50  303F               	movlw	63
 11495  1F51  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11496                           
 11497                           ;user.c: 85: switch (y) {
 11498  1F52  2F6E               	goto	l9174
 11499  1F53                     l9162:	
 11500                           ;user.c: 86: case 1:
 11501                           
 11502                           
 11503                           ;user.c: 87: scalar = 2.0;
 11504  1F53  3000               	movlw	0
 11505  1F54  00C6               	movwf	set_subdivision@scalar^(0+256)
 11506  1F55  3000               	movlw	0
 11507  1F56  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11508  1F57  3040               	movlw	64
 11509  1F58  2F6C               	goto	L14
 11510  1F59                     l9164:	
 11511                           ;user.c: 89: case 2:
 11512                           
 11513                           ;user.c: 88: break;
 11514                           
 11515                           
 11516                           ;user.c: 90: scalar = 0.6666;
 11517  1F59  30A6               	movlw	166
 11518  1F5A  00C6               	movwf	set_subdivision@scalar^(0+256)
 11519  1F5B  302A               	movlw	42
 11520  1F5C  2F60               	goto	L16
 11521  1F5D                     l9166:	
 11522                           ;user.c: 92: case 3:
 11523                           
 11524                           ;user.c: 91: break;
 11525                           
 11526                           
 11527                           ;user.c: 93: scalar = .5;
 11528  1F5D  3000               	movlw	0
 11529  1F5E  00C6               	movwf	set_subdivision@scalar^(0+256)
 11530  1F5F  3000               	movlw	0
 11531  1F60                     L16:	
 11532  1F60  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11533  1F61  303F               	movlw	63
 11534  1F62  2F6C               	goto	L14
 11535  1F63                     l9168:	
 11536                           ;user.c: 95: case 4:
 11537                           
 11538                           ;user.c: 94: break;
 11539                           
 11540                           
 11541                           ;user.c: 96: scalar = 0.3333;
 11542  1F63  30A6               	movlw	166
 11543  1F64  00C6               	movwf	set_subdivision@scalar^(0+256)
 11544  1F65  30AA               	movlw	170
 11545  1F66  2F6A               	goto	L15
 11546  1F67                     l9170:	
 11547                           ;user.c: 98: case 5:
 11548                           
 11549                           ;user.c: 97: break;
 11550                           
 11551                           
 11552                           ;user.c: 99: scalar = 0.25;
 11553  1F67  3000               	movlw	0
 11554  1F68  00C6               	movwf	set_subdivision@scalar^(0+256)
 11555  1F69  3080               	movlw	128
 11556  1F6A                     L15:	
 11557  1F6A  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11558  1F6B  303E               	movlw	62
 11559  1F6C                     L14:	
 11560  1F6C  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11561                           
 11562                           ;user.c: 104: }
 11563                           
 11564                           ;user.c: 103: break;
 11565                           
 11566                           ;user.c: 101: case 6:
 11567                           
 11568                           ;user.c: 100: break;
 11569  1F6D  2F87               	goto	l9176
 11570  1F6E                     l9174:	
 11571                           
 11572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11573                           ; Switch size 1, requested type "space"
 11574                           ; Number of cases is 1, Range of values is 0 to 0
 11575                           ; switch strategies available:
 11576                           ; Name         Instructions Cycles
 11577                           ; simple_byte            4     3 (average)
 11578                           ; direct_byte            8     6 (fixed)
 11579                           ; jumptable            260     6 (fixed)
 11580                           ;	Chosen strategy is simple_byte
 11581  1F6E  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11582  1F6F  3A00               	xorlw	0	; case 0
 11583  1F70  1903               	skipnz
 11584  1F71  2F73               	goto	l9754
 11585  1F72  2F87               	goto	l9176
 11586  1F73                     l9754:	
 11587                           
 11588                           ; Switch size 1, requested type "space"
 11589                           ; Number of cases is 6, Range of values is 1 to 6
 11590                           ; switch strategies available:
 11591                           ; Name         Instructions Cycles
 11592                           ; simple_byte           19    10 (average)
 11593                           ; direct_byte           21     9 (fixed)
 11594                           ; jumptable            263     9 (fixed)
 11595                           ;	Chosen strategy is simple_byte
 11596  1F73  0841               	movf	set_subdivision@y^(0+256),w
 11597  1F74  3A01               	xorlw	1	; case 1
 11598  1F75  1903               	skipnz
 11599  1F76  2F53               	goto	l9162
 11600  1F77  3A03               	xorlw	3	; case 2
 11601  1F78  1903               	skipnz
 11602  1F79  2F59               	goto	l9164
 11603  1F7A  3A01               	xorlw	1	; case 3
 11604  1F7B  1903               	skipnz
 11605  1F7C  2F5D               	goto	l9166
 11606  1F7D  3A07               	xorlw	7	; case 4
 11607  1F7E  1903               	skipnz
 11608  1F7F  2F63               	goto	l9168
 11609  1F80  3A01               	xorlw	1	; case 5
 11610  1F81  1903               	skipnz
 11611  1F82  2F67               	goto	l9170
 11612  1F83  3A03               	xorlw	3	; case 6
 11613  1F84  1903               	skipnz
 11614  1F85  2F87               	goto	l9176
 11615  1F86  2F87               	goto	l9176
 11616  1F87                     l9176:	
 11617                           
 11618                           ;user.c: 106: tmpX = tmpX * scalar;
 11619  1F87  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11620  1F88  0021               	movlb	1	; select bank1
 11621  1F89  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11622  1F8A  0022               	movlb	2	; select bank2
 11623  1F8B  0849               	movf	set_subdivision@tmpX^(0+256),w
 11624  1F8C  0021               	movlb	1	; select bank1
 11625  1F8D  00A8               	movwf	___awtoft@c^(0+128)
 11626  1F8E  31A0  2000  319F   	fcall	___awtoft
 11627  1F91  0021               	movlb	1	; select bank1
 11628  1F92  0828               	movf	?___awtoft^(0+128),w
 11629  1F93  00B1               	movwf	___ftmul@f2^(0+128)
 11630  1F94  0829               	movf	(?___awtoft+1)^(0+128),w
 11631  1F95  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11632  1F96  082A               	movf	(?___awtoft+2)^(0+128),w
 11633  1F97  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11634  1F98  0022               	movlb	2	; select bank2
 11635  1F99  0846               	movf	set_subdivision@scalar^(0+256),w
 11636  1F9A  0021               	movlb	1	; select bank1
 11637  1F9B  00AE               	movwf	___ftmul@f1^(0+128)
 11638  1F9C  0022               	movlb	2	; select bank2
 11639  1F9D  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11640  1F9E  0021               	movlb	1	; select bank1
 11641  1F9F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11642  1FA0  0022               	movlb	2	; select bank2
 11643  1FA1  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11644  1FA2  0021               	movlb	1	; select bank1
 11645  1FA3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11646  1FA4  319E  2691  319F   	fcall	___ftmul
 11647  1FA7  0021               	movlb	1	; select bank1
 11648  1FA8  082E               	movf	?___ftmul^(0+128),w
 11649  1FA9  0022               	movlb	2	; select bank2
 11650  1FAA  00A0               	movwf	___fttol@f1^(0+256)
 11651  1FAB  0021               	movlb	1	; select bank1
 11652  1FAC  082F               	movf	(?___ftmul+1)^(0+128),w
 11653  1FAD  0022               	movlb	2	; select bank2
 11654  1FAE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11655  1FAF  0021               	movlb	1	; select bank1
 11656  1FB0  0830               	movf	(?___ftmul+2)^(0+128),w
 11657  1FB1  0022               	movlb	2	; select bank2
 11658  1FB2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11659  1FB3  3199  21D0  319F   	fcall	___fttol
 11660  1FB6  0022               	movlb	2	; select bank2
 11661  1FB7  0821               	movf	(?___fttol^(0+256)+1),w
 11662  1FB8  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11663  1FB9  0820               	movf	?___fttol^(0+256),w
 11664  1FBA  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11665                           
 11666                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11667  1FBB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11668  1FBC  0021               	movlb	1	; select bank1
 11669  1FBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11670  1FBE  0022               	movlb	2	; select bank2
 11671  1FBF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11672  1FC0  0021               	movlb	1	; select bank1
 11673  1FC1  00A8               	movwf	___awtoft@c^(0+128)
 11674  1FC2  31A0  2000  319F   	fcall	___awtoft
 11675  1FC5  0021               	movlb	1	; select bank1
 11676  1FC6  0828               	movf	?___awtoft^(0+128),w
 11677  1FC7  0022               	movlb	2	; select bank2
 11678  1FC8  00B6               	movwf	trunc@x^(0+256)
 11679  1FC9  0021               	movlb	1	; select bank1
 11680  1FCA  0829               	movf	(?___awtoft+1)^(0+128),w
 11681  1FCB  0022               	movlb	2	; select bank2
 11682  1FCC  00B7               	movwf	(trunc@x+1)^(0+256)
 11683  1FCD  0021               	movlb	1	; select bank1
 11684  1FCE  082A               	movf	(?___awtoft+2)^(0+128),w
 11685  1FCF  0022               	movlb	2	; select bank2
 11686  1FD0  00B8               	movwf	(trunc@x+2)^(0+256)
 11687  1FD1  31A3  2368  319F   	fcall	_trunc
 11688  1FD4  0022               	movlb	2	; select bank2
 11689  1FD5  0836               	movf	?_trunc^(0+256),w
 11690  1FD6  00C3               	movwf	??_set_subdivision^(0+256)
 11691  1FD7  0837               	movf	(?_trunc+1)^(0+256),w
 11692  1FD8  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11693  1FD9  0838               	movf	(?_trunc+2)^(0+256),w
 11694  1FDA  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11695  1FDB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11696  1FDC  0021               	movlb	1	; select bank1
 11697  1FDD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11698  1FDE  0022               	movlb	2	; select bank2
 11699  1FDF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11700  1FE0  0021               	movlb	1	; select bank1
 11701  1FE1  00A8               	movwf	___awtoft@c^(0+128)
 11702  1FE2  31A0  2000  319F   	fcall	___awtoft
 11703  1FE5  0021               	movlb	1	; select bank1
 11704  1FE6  082A               	movf	(?___awtoft+2)^(0+128),w
 11705  1FE7  0022               	movlb	2	; select bank2
 11706  1FE8  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11707  1FE9  1D03               	skipz
 11708  1FEA  2FF5               	goto	u10205
 11709  1FEB  0021               	movlb	1	; select bank1
 11710  1FEC  0829               	movf	(?___awtoft+1)^(0+128),w
 11711  1FED  0022               	movlb	2	; select bank2
 11712  1FEE  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11713  1FEF  1D03               	skipz
 11714  1FF0  2FF5               	goto	u10205
 11715  1FF1  0021               	movlb	1	; select bank1
 11716  1FF2  0828               	movf	?___awtoft^(0+128),w
 11717  1FF3  0022               	movlb	2	; select bank2
 11718  1FF4  0643               	xorwf	??_set_subdivision^(0+256),w
 11719  1FF5                     u10205:	
 11720  1FF5  1903               	skipnz
 11721  1FF6  2FFA               	goto	l9182
 11722                           
 11723                           ;user.c: 109: adjust_mod_delay = 1;
 11724  1FF7  0023               	movlb	3	; select bank3
 11725  1FF8  01C0               	clrf	_adjust_mod_delay^(0+384)
 11726  1FF9  0AC0               	incf	_adjust_mod_delay^(0+384),f
 11727  1FFA                     l9182:	
 11728                           
 11729                           ;user.c: 110: }
 11730                           ;user.c: 112: return tmpX;
 11731  1FFA  0022               	movlb	2	; select bank2
 11732  1FFB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11733  1FFC  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11734  1FFD  0849               	movf	set_subdivision@tmpX^(0+256),w
 11735  1FFE  00BF               	movwf	?_set_subdivision^(0+256)
 11736  1FFF  0008               	return
 11737  2000                     __end_of_set_subdivision:	
 11738                           
 11739                           	psect	text24
 11740  2368                     __ptext24:	
 11741 ;; *************** function _trunc *****************
 11742 ;; Defined at:
 11743 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;  x               3   22[BANK2 ] int 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  i               3   26[BANK2 ] int 
 11748 ;;  expon           2   29[BANK2 ] int 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  3   22[BANK2 ] int 
 11751 ;; Registers used:
 11752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11758 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11759 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11760 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11761 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11762 ;;Total ram usage:        9 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    5
 11765 ;; This function calls:
 11766 ;;		___altoft
 11767 ;;		___fttol
 11768 ;;		_frexp
 11769 ;; This function is called by:
 11770 ;;		_set_subdivision
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           
 11775                           ;psect for function _trunc
 11776  2368                     _trunc:	
 11777                           
 11778                           ;incstack = 0
 11779                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11780  2368  0022               	movlb	2	; select bank2
 11781  2369  0836               	movf	trunc@x^(0+256),w
 11782  236A  0021               	movlb	1	; select bank1
 11783  236B  00A0               	movwf	frexp@value^(0+128)
 11784  236C  0022               	movlb	2	; select bank2
 11785  236D  0837               	movf	(trunc@x+1)^(0+256),w
 11786  236E  0021               	movlb	1	; select bank1
 11787  236F  00A1               	movwf	(frexp@value+1)^(0+128)
 11788  2370  0022               	movlb	2	; select bank2
 11789  2371  0838               	movf	(trunc@x+2)^(0+256),w
 11790  2372  0021               	movlb	1	; select bank1
 11791  2373  00A2               	movwf	(frexp@value+2)^(0+128)
 11792  2374  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11793  2375  0022               	movlb	2	; select bank2
 11794  2376  00B9               	movwf	??_trunc^(0+256)
 11795  2377  0839               	movf	??_trunc^(0+256),w
 11796  2378  0021               	movlb	1	; select bank1
 11797  2379  00A3               	movwf	frexp@eptr^(0+128)
 11798  237A  31A2  221E  31A3   	fcall	_frexp
 11799  237D  0022               	movlb	2	; select bank2
 11800  237E  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11801  237F  2B87               	goto	l8346
 11802  2380  3000               	movlw	0
 11803  2381  00B6               	movwf	?_trunc^(0+256)
 11804  2382  3000               	movlw	0
 11805  2383  00B7               	movwf	(?_trunc+1)^(0+256)
 11806  2384  3000               	movlw	0
 11807  2385  00B8               	movwf	(?_trunc+2)^(0+256)
 11808  2386  0008               	return
 11809  2387                     l8346:	
 11810  2387  3000               	movlw	0
 11811  2388  023E               	subwf	(trunc@expon+1)^(0+256),w
 11812  2389  3015               	movlw	21
 11813  238A  1903               	skipnz
 11814  238B  023D               	subwf	trunc@expon^(0+256),w
 11815  238C  1803               	btfsc	3,0
 11816  238D  0008               	return
 11817  238E  0836               	movf	trunc@x^(0+256),w
 11818  238F  00A0               	movwf	___fttol@f1^(0+256)
 11819  2390  0837               	movf	(trunc@x+1)^(0+256),w
 11820  2391  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11821  2392  0838               	movf	(trunc@x+2)^(0+256),w
 11822  2393  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11823  2394  3199  21D0  31A3   	fcall	___fttol
 11824  2397  0022               	movlb	2	; select bank2
 11825  2398  0823               	movf	(?___fttol+3)^(0+256),w
 11826  2399  00B1               	movwf	(___altoft@c+3)^(0+256)
 11827  239A  0822               	movf	(?___fttol+2)^(0+256),w
 11828  239B  00B0               	movwf	(___altoft@c+2)^(0+256)
 11829  239C  0821               	movf	(?___fttol+1)^(0+256),w
 11830  239D  00AF               	movwf	(___altoft@c+1)^(0+256)
 11831  239E  0820               	movf	?___fttol^(0+256),w
 11832  239F  00AE               	movwf	___altoft@c^(0+256)
 11833  23A0  31A3  23FA         	fcall	___altoft
 11834  23A2  0022               	movlb	2	; select bank2
 11835  23A3  082E               	movf	?___altoft^(0+256),w
 11836  23A4  00BA               	movwf	trunc@i^(0+256)
 11837  23A5  082F               	movf	(?___altoft+1)^(0+256),w
 11838  23A6  00BB               	movwf	(trunc@i+1)^(0+256)
 11839  23A7  0830               	movf	(?___altoft+2)^(0+256),w
 11840  23A8  00BC               	movwf	(trunc@i+2)^(0+256)
 11841  23A9  083A               	movf	trunc@i^(0+256),w
 11842  23AA  00B6               	movwf	?_trunc^(0+256)
 11843  23AB  083B               	movf	(trunc@i+1)^(0+256),w
 11844  23AC  00B7               	movwf	(?_trunc+1)^(0+256)
 11845  23AD  083C               	movf	(trunc@i+2)^(0+256),w
 11846  23AE  00B8               	movwf	(?_trunc+2)^(0+256)
 11847  23AF  0008               	return
 11848  23B0                     __end_of_trunc:	
 11849                           
 11850                           	psect	text25
 11851  1DE6                     __ptext25:	
 11852 ;; *************** function _scaleiA10kPot *****************
 11853 ;; Defined at:
 11854 ;;		line 211 in file "user.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  input           3   71[BANK2 ] int 
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  pwm             3    0[BANK3 ] float 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  2   71[BANK2 ] int 
 11861 ;; Registers used:
 11862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11868 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11869 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11871 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11872 ;;Total ram usage:       12 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    8
 11875 ;; This function calls:
 11876 ;;		___ftadd
 11877 ;;		___ftdiv
 11878 ;;		___ftmul
 11879 ;;		___ftneg
 11880 ;;		___fttol
 11881 ;;		_pow
 11882 ;; This function is called by:
 11883 ;;		_main
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _scaleiA10kPot
 11889  1DE6                     _scaleiA10kPot:	
 11890                           
 11891                           ;user.c: 214: if (input == 0.0) {return 0;}
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11895  1DE6  0022               	movlb	2	; select bank2
 11896  1DE7  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11897  1DE8  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11898  1DE9  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11899  1DEA  1D03               	skipz
 11900  1DEB  2DEF               	goto	l9122
 11901  1DEC  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11902  1DED  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11903  1DEE  0008               	return
 11904  1DEF                     l9122:	
 11905                           
 11906                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11907  1DEF  30C0               	movlw	192
 11908  1DF0  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11909  1DF1  307F               	movlw	127
 11910  1DF2  1903               	skipnz
 11911  1DF3  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11912  1DF4  3044               	movlw	68
 11913  1DF5  1903               	skipnz
 11914  1DF6  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11915  1DF7  1D03               	btfss	3,2
 11916  1DF8  2DFE               	goto	l9128
 11917  1DF9  30FF               	movlw	255
 11918  1DFA  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11919  1DFB  3000               	movlw	0
 11920  1DFC  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11921  1DFD  0008               	return
 11922  1DFE                     l9128:	
 11923                           
 11924                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11925  1DFE  3000               	movlw	0
 11926  1DFF  0021               	movlb	1	; select bank1
 11927  1E00  00C1               	movwf	___ftadd@f1^(0+128)
 11928  1E01  3080               	movlw	128
 11929  1E02  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11930  1E03  303F               	movlw	63
 11931  1E04  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11932  1E05  0022               	movlb	2	; select bank2
 11933  1E06  0867               	movf	scaleiA10kPot@input^(0+256),w
 11934  1E07  0021               	movlb	1	; select bank1
 11935  1E08  00D1               	movwf	___ftdiv@f1^(0+128)
 11936  1E09  0022               	movlb	2	; select bank2
 11937  1E0A  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11938  1E0B  0021               	movlb	1	; select bank1
 11939  1E0C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11940  1E0D  0022               	movlb	2	; select bank2
 11941  1E0E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11942  1E0F  0021               	movlb	1	; select bank1
 11943  1E10  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11944  1E11  30C0               	movlw	192
 11945  1E12  00CE               	movwf	___ftdiv@f2^(0+128)
 11946  1E13  307F               	movlw	127
 11947  1E14  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11948  1E15  3044               	movlw	68
 11949  1E16  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11950  1E17  319D  253D  319D   	fcall	___ftdiv
 11951  1E1A  0021               	movlb	1	; select bank1
 11952  1E1B  084E               	movf	?___ftdiv^(0+128),w
 11953  1E1C  00BE               	movwf	___ftneg@f1^(0+128)
 11954  1E1D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11955  1E1E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11956  1E1F  0850               	movf	(?___ftdiv+2)^(0+128),w
 11957  1E20  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11958  1E21  31AD  259D  319D   	fcall	___ftneg
 11959  1E24  0021               	movlb	1	; select bank1
 11960  1E25  083E               	movf	?___ftneg^(0+128),w
 11961  1E26  00C4               	movwf	___ftadd@f2^(0+128)
 11962  1E27  083F               	movf	(?___ftneg+1)^(0+128),w
 11963  1E28  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11964  1E29  0840               	movf	(?___ftneg+2)^(0+128),w
 11965  1E2A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11966  1E2B  3190  2020  319D   	fcall	___ftadd
 11967  1E2E  0021               	movlb	1	; select bank1
 11968  1E2F  0841               	movf	?___ftadd^(0+128),w
 11969  1E30  0023               	movlb	3	; select bank3
 11970  1E31  00E9               	movwf	_scaleiA10kPot$2843^(0+384)
 11971  1E32  0021               	movlb	1	; select bank1
 11972  1E33  0842               	movf	(?___ftadd+1)^(0+128),w
 11973  1E34  0023               	movlb	3	; select bank3
 11974  1E35  00EA               	movwf	(_scaleiA10kPot$2843+1)^(0+384)
 11975  1E36  0021               	movlb	1	; select bank1
 11976  1E37  0843               	movf	(?___ftadd+2)^(0+128),w
 11977  1E38  0023               	movlb	3	; select bank3
 11978  1E39  00EB               	movwf	(_scaleiA10kPot$2843+2)^(0+384)
 11979                           
 11980                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11981  1E3A  306A               	movlw	106
 11982  1E3B  0022               	movlb	2	; select bank2
 11983  1E3C  00D8               	movwf	pow@y^(0+256)
 11984  1E3D  309C               	movlw	156
 11985  1E3E  00D9               	movwf	(pow@y+1)^(0+256)
 11986  1E3F  30BF               	movlw	191
 11987  1E40  00DA               	movwf	(pow@y+2)^(0+256)
 11988  1E41  0023               	movlb	3	; select bank3
 11989  1E42  0869               	movf	_scaleiA10kPot$2843^(0+384),w
 11990  1E43  0022               	movlb	2	; select bank2
 11991  1E44  00D5               	movwf	pow@x^(0+256)
 11992  1E45  0023               	movlb	3	; select bank3
 11993  1E46  086A               	movf	(_scaleiA10kPot$2843+1)^(0+384),w
 11994  1E47  0022               	movlb	2	; select bank2
 11995  1E48  00D6               	movwf	(pow@x+1)^(0+256)
 11996  1E49  0023               	movlb	3	; select bank3
 11997  1E4A  086B               	movf	(_scaleiA10kPot$2843+2)^(0+384),w
 11998  1E4B  0022               	movlb	2	; select bank2
 11999  1E4C  00D7               	movwf	(pow@x+2)^(0+256)
 12000  1E4D  3191  2116  319D   	fcall	_pow
 12001  1E50  0022               	movlb	2	; select bank2
 12002  1E51  0855               	movf	?_pow^(0+256),w
 12003  1E52  0023               	movlb	3	; select bank3
 12004  1E53  00EC               	movwf	_scaleiA10kPot$2844^(0+384)
 12005  1E54  0022               	movlb	2	; select bank2
 12006  1E55  0856               	movf	(?_pow+1)^(0+256),w
 12007  1E56  0023               	movlb	3	; select bank3
 12008  1E57  00ED               	movwf	(_scaleiA10kPot$2844+1)^(0+384)
 12009  1E58  0022               	movlb	2	; select bank2
 12010  1E59  0857               	movf	(?_pow+2)^(0+256),w
 12011  1E5A  0023               	movlb	3	; select bank3
 12012  1E5B  00EE               	movwf	(_scaleiA10kPot$2844+2)^(0+384)
 12013                           
 12014                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12015  1E5C  30E3               	movlw	227
 12016  1E5D  0021               	movlb	1	; select bank1
 12017  1E5E  00AE               	movwf	___ftmul@f1^(0+128)
 12018  1E5F  300B               	movlw	11
 12019  1E60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12020  1E61  3041               	movlw	65
 12021  1E62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12022  1E63  0023               	movlb	3	; select bank3
 12023  1E64  086C               	movf	_scaleiA10kPot$2844^(0+384),w
 12024  1E65  0021               	movlb	1	; select bank1
 12025  1E66  00B1               	movwf	___ftmul@f2^(0+128)
 12026  1E67  0023               	movlb	3	; select bank3
 12027  1E68  086D               	movf	(_scaleiA10kPot$2844+1)^(0+384),w
 12028  1E69  0021               	movlb	1	; select bank1
 12029  1E6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12030  1E6B  0023               	movlb	3	; select bank3
 12031  1E6C  086E               	movf	(_scaleiA10kPot$2844+2)^(0+384),w
 12032  1E6D  0021               	movlb	1	; select bank1
 12033  1E6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12034  1E6F  319E  2691  319D   	fcall	___ftmul
 12035  1E72  0021               	movlb	1	; select bank1
 12036  1E73  082E               	movf	?___ftmul^(0+128),w
 12037  1E74  0023               	movlb	3	; select bank3
 12038  1E75  00E6               	movwf	scaleiA10kPot@pwm^(0+384)
 12039  1E76  0021               	movlb	1	; select bank1
 12040  1E77  082F               	movf	(?___ftmul+1)^(0+128),w
 12041  1E78  0023               	movlb	3	; select bank3
 12042  1E79  00E7               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12043  1E7A  0021               	movlb	1	; select bank1
 12044  1E7B  0830               	movf	(?___ftmul+2)^(0+128),w
 12045  1E7C  0023               	movlb	3	; select bank3
 12046  1E7D  00E8               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12047                           
 12048                           ;user.c: 219: return (int)(pwm);
 12049  1E7E  0866               	movf	scaleiA10kPot@pwm^(0+384),w
 12050  1E7F  0022               	movlb	2	; select bank2
 12051  1E80  00A0               	movwf	___fttol@f1^(0+256)
 12052  1E81  0023               	movlb	3	; select bank3
 12053  1E82  0867               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12054  1E83  0022               	movlb	2	; select bank2
 12055  1E84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12056  1E85  0023               	movlb	3	; select bank3
 12057  1E86  0868               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12058  1E87  0022               	movlb	2	; select bank2
 12059  1E88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12060  1E89  3199  21D0         	fcall	___fttol
 12061  1E8B  0022               	movlb	2	; select bank2
 12062  1E8C  0821               	movf	(?___fttol^(0+256)+1),w
 12063  1E8D  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12064  1E8E  0820               	movf	?___fttol^(0+256),w
 12065  1E8F  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12066  1E90  0008               	return
 12067  1E91                     __end_of_scaleiA10kPot:	
 12068                           
 12069                           	psect	text26
 12070  1B6E                     __ptext26:	
 12071 ;; *************** function _scaleA10kPot *****************
 12072 ;; Defined at:
 12073 ;;		line 202 in file "user.c"
 12074 ;; Parameters:    Size  Location     Type
 12075 ;;  input           3   71[BANK2 ] int 
 12076 ;; Auto vars:     Size  Location     Type
 12077 ;;  pwm             3    0[BANK3 ] float 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  2   71[BANK2 ] int 
 12080 ;; Registers used:
 12081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12087 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12088 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12090 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12091 ;;Total ram usage:       12 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:    8
 12094 ;; This function calls:
 12095 ;;		___ftdiv
 12096 ;;		___ftmul
 12097 ;;		___fttol
 12098 ;;		_pow
 12099 ;; This function is called by:
 12100 ;;		_main
 12101 ;; This function uses a non-reentrant model
 12102 ;;
 12103                           
 12104                           
 12105                           ;psect for function _scaleA10kPot
 12106  1B6E                     _scaleA10kPot:	
 12107                           
 12108                           ;user.c: 204: if (input == 0.0) {return 255;}
 12109                           
 12110                           ;incstack = 0
 12111                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12112  1B6E  0022               	movlb	2	; select bank2
 12113  1B6F  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12114  1B70  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12115  1B71  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12116  1B72  1D03               	skipz
 12117  1B73  2B79               	goto	l9100
 12118  1B74  30FF               	movlw	255
 12119  1B75  00E7               	movwf	?_scaleA10kPot^(0+256)
 12120  1B76  3000               	movlw	0
 12121  1B77  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12122  1B78  0008               	return
 12123  1B79                     l9100:	
 12124                           
 12125                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12126  1B79  30C0               	movlw	192
 12127  1B7A  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12128  1B7B  307F               	movlw	127
 12129  1B7C  1903               	skipnz
 12130  1B7D  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12131  1B7E  3044               	movlw	68
 12132  1B7F  1903               	skipnz
 12133  1B80  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12134  1B81  1D03               	btfss	3,2
 12135  1B82  2B86               	goto	l9106
 12136  1B83  01E7               	clrf	?_scaleA10kPot^(0+256)
 12137  1B84  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12138  1B85  0008               	return
 12139  1B86                     l9106:	
 12140                           
 12141                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12142  1B86  30C0               	movlw	192
 12143  1B87  0021               	movlb	1	; select bank1
 12144  1B88  00CE               	movwf	___ftdiv@f2^(0+128)
 12145  1B89  307F               	movlw	127
 12146  1B8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12147  1B8B  3044               	movlw	68
 12148  1B8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12149  1B8D  0022               	movlb	2	; select bank2
 12150  1B8E  0867               	movf	scaleA10kPot@input^(0+256),w
 12151  1B8F  0021               	movlb	1	; select bank1
 12152  1B90  00D1               	movwf	___ftdiv@f1^(0+128)
 12153  1B91  0022               	movlb	2	; select bank2
 12154  1B92  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12155  1B93  0021               	movlb	1	; select bank1
 12156  1B94  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12157  1B95  0022               	movlb	2	; select bank2
 12158  1B96  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12159  1B97  0021               	movlb	1	; select bank1
 12160  1B98  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12161  1B99  319D  253D  319B   	fcall	___ftdiv
 12162  1B9C  0021               	movlb	1	; select bank1
 12163  1B9D  084E               	movf	?___ftdiv^(0+128),w
 12164  1B9E  0023               	movlb	3	; select bank3
 12165  1B9F  00E9               	movwf	_scaleA10kPot$2841^(0+384)
 12166  1BA0  0021               	movlb	1	; select bank1
 12167  1BA1  084F               	movf	(?___ftdiv+1)^(0+128),w
 12168  1BA2  0023               	movlb	3	; select bank3
 12169  1BA3  00EA               	movwf	(_scaleA10kPot$2841+1)^(0+384)
 12170  1BA4  0021               	movlb	1	; select bank1
 12171  1BA5  0850               	movf	(?___ftdiv+2)^(0+128),w
 12172  1BA6  0023               	movlb	3	; select bank3
 12173  1BA7  00EB               	movwf	(_scaleA10kPot$2841+2)^(0+384)
 12174                           
 12175                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12176  1BA8  306A               	movlw	106
 12177  1BA9  0022               	movlb	2	; select bank2
 12178  1BAA  00D8               	movwf	pow@y^(0+256)
 12179  1BAB  309C               	movlw	156
 12180  1BAC  00D9               	movwf	(pow@y+1)^(0+256)
 12181  1BAD  30BF               	movlw	191
 12182  1BAE  00DA               	movwf	(pow@y+2)^(0+256)
 12183  1BAF  0023               	movlb	3	; select bank3
 12184  1BB0  0869               	movf	_scaleA10kPot$2841^(0+384),w
 12185  1BB1  0022               	movlb	2	; select bank2
 12186  1BB2  00D5               	movwf	pow@x^(0+256)
 12187  1BB3  0023               	movlb	3	; select bank3
 12188  1BB4  086A               	movf	(_scaleA10kPot$2841+1)^(0+384),w
 12189  1BB5  0022               	movlb	2	; select bank2
 12190  1BB6  00D6               	movwf	(pow@x+1)^(0+256)
 12191  1BB7  0023               	movlb	3	; select bank3
 12192  1BB8  086B               	movf	(_scaleA10kPot$2841+2)^(0+384),w
 12193  1BB9  0022               	movlb	2	; select bank2
 12194  1BBA  00D7               	movwf	(pow@x+2)^(0+256)
 12195  1BBB  3191  2116  319B   	fcall	_pow
 12196  1BBE  0022               	movlb	2	; select bank2
 12197  1BBF  0855               	movf	?_pow^(0+256),w
 12198  1BC0  0023               	movlb	3	; select bank3
 12199  1BC1  00EC               	movwf	_scaleA10kPot$2842^(0+384)
 12200  1BC2  0022               	movlb	2	; select bank2
 12201  1BC3  0856               	movf	(?_pow+1)^(0+256),w
 12202  1BC4  0023               	movlb	3	; select bank3
 12203  1BC5  00ED               	movwf	(_scaleA10kPot$2842+1)^(0+384)
 12204  1BC6  0022               	movlb	2	; select bank2
 12205  1BC7  0857               	movf	(?_pow+2)^(0+256),w
 12206  1BC8  0023               	movlb	3	; select bank3
 12207  1BC9  00EE               	movwf	(_scaleA10kPot$2842+2)^(0+384)
 12208                           
 12209                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12210  1BCA  30E3               	movlw	227
 12211  1BCB  0021               	movlb	1	; select bank1
 12212  1BCC  00AE               	movwf	___ftmul@f1^(0+128)
 12213  1BCD  300B               	movlw	11
 12214  1BCE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12215  1BCF  3041               	movlw	65
 12216  1BD0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12217  1BD1  0023               	movlb	3	; select bank3
 12218  1BD2  086C               	movf	_scaleA10kPot$2842^(0+384),w
 12219  1BD3  0021               	movlb	1	; select bank1
 12220  1BD4  00B1               	movwf	___ftmul@f2^(0+128)
 12221  1BD5  0023               	movlb	3	; select bank3
 12222  1BD6  086D               	movf	(_scaleA10kPot$2842+1)^(0+384),w
 12223  1BD7  0021               	movlb	1	; select bank1
 12224  1BD8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12225  1BD9  0023               	movlb	3	; select bank3
 12226  1BDA  086E               	movf	(_scaleA10kPot$2842+2)^(0+384),w
 12227  1BDB  0021               	movlb	1	; select bank1
 12228  1BDC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12229  1BDD  319E  2691  319B   	fcall	___ftmul
 12230  1BE0  0021               	movlb	1	; select bank1
 12231  1BE1  082E               	movf	?___ftmul^(0+128),w
 12232  1BE2  0023               	movlb	3	; select bank3
 12233  1BE3  00E6               	movwf	scaleA10kPot@pwm^(0+384)
 12234  1BE4  0021               	movlb	1	; select bank1
 12235  1BE5  082F               	movf	(?___ftmul+1)^(0+128),w
 12236  1BE6  0023               	movlb	3	; select bank3
 12237  1BE7  00E7               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12238  1BE8  0021               	movlb	1	; select bank1
 12239  1BE9  0830               	movf	(?___ftmul+2)^(0+128),w
 12240  1BEA  0023               	movlb	3	; select bank3
 12241  1BEB  00E8               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12242                           
 12243                           ;user.c: 207: return (int)(pwm);
 12244  1BEC  0866               	movf	scaleA10kPot@pwm^(0+384),w
 12245  1BED  0022               	movlb	2	; select bank2
 12246  1BEE  00A0               	movwf	___fttol@f1^(0+256)
 12247  1BEF  0023               	movlb	3	; select bank3
 12248  1BF0  0867               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12249  1BF1  0022               	movlb	2	; select bank2
 12250  1BF2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12251  1BF3  0023               	movlb	3	; select bank3
 12252  1BF4  0868               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12253  1BF5  0022               	movlb	2	; select bank2
 12254  1BF6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12255  1BF7  3199  21D0         	fcall	___fttol
 12256  1BF9  0022               	movlb	2	; select bank2
 12257  1BFA  0821               	movf	(?___fttol^(0+256)+1),w
 12258  1BFB  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12259  1BFC  0820               	movf	?___fttol^(0+256),w
 12260  1BFD  00E7               	movwf	?_scaleA10kPot^(0+256)
 12261  1BFE  0008               	return
 12262  1BFF                     __end_of_scaleA10kPot:	
 12263                           
 12264                           	psect	text27
 12265  194B                     __ptext27:	
 12266 ;; *************** function _scaleA100kPot *****************
 12267 ;; Defined at:
 12268 ;;		line 188 in file "user.c"
 12269 ;; Parameters:    Size  Location     Type
 12270 ;;  input           3   71[BANK2 ] int 
 12271 ;; Auto vars:     Size  Location     Type
 12272 ;;  pwm             3    0[BANK3 ] float 
 12273 ;; Return value:  Size  Location     Type
 12274 ;;                  2   71[BANK2 ] int 
 12275 ;; Registers used:
 12276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12277 ;; Tracked objects:
 12278 ;;		On entry : 0/0
 12279 ;;		On exit  : 0/0
 12280 ;;		Unchanged: 0/0
 12281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12282 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12283 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12285 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12286 ;;Total ram usage:       12 bytes
 12287 ;; Hardware stack levels used:    1
 12288 ;; Hardware stack levels required when called:    8
 12289 ;; This function calls:
 12290 ;;		___ftdiv
 12291 ;;		___ftmul
 12292 ;;		___fttol
 12293 ;;		_pow
 12294 ;; This function is called by:
 12295 ;;		_main
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           
 12300                           ;psect for function _scaleA100kPot
 12301  194B                     _scaleA100kPot:	
 12302                           
 12303                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12304                           
 12305                           ;incstack = 0
 12306                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12307  194B  0022               	movlb	2	; select bank2
 12308  194C  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12309  194D  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12310  194E  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12311  194F  1D03               	skipz
 12312  1950  2957               	goto	l9142
 12313  1951  3000               	movlw	0
 12314  1952  00E7               	movwf	scaleA100kPot@input^(0+256)
 12315  1953  3080               	movlw	128
 12316  1954  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12317  1955  303F               	movlw	63
 12318  1956  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12319  1957                     l9142:	
 12320                           
 12321                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12322  1957  30C0               	movlw	192
 12323  1958  0021               	movlb	1	; select bank1
 12324  1959  00CE               	movwf	___ftdiv@f2^(0+128)
 12325  195A  307F               	movlw	127
 12326  195B  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12327  195C  3044               	movlw	68
 12328  195D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12329  195E  0022               	movlb	2	; select bank2
 12330  195F  0867               	movf	scaleA100kPot@input^(0+256),w
 12331  1960  0021               	movlb	1	; select bank1
 12332  1961  00D1               	movwf	___ftdiv@f1^(0+128)
 12333  1962  0022               	movlb	2	; select bank2
 12334  1963  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12335  1964  0021               	movlb	1	; select bank1
 12336  1965  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12337  1966  0022               	movlb	2	; select bank2
 12338  1967  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12339  1968  0021               	movlb	1	; select bank1
 12340  1969  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12341  196A  319D  253D  3199   	fcall	___ftdiv
 12342  196D  0021               	movlb	1	; select bank1
 12343  196E  084E               	movf	?___ftdiv^(0+128),w
 12344  196F  0023               	movlb	3	; select bank3
 12345  1970  00E9               	movwf	_scaleA100kPot$2837^(0+384)
 12346  1971  0021               	movlb	1	; select bank1
 12347  1972  084F               	movf	(?___ftdiv+1)^(0+128),w
 12348  1973  0023               	movlb	3	; select bank3
 12349  1974  00EA               	movwf	(_scaleA100kPot$2837+1)^(0+384)
 12350  1975  0021               	movlb	1	; select bank1
 12351  1976  0850               	movf	(?___ftdiv+2)^(0+128),w
 12352  1977  0023               	movlb	3	; select bank3
 12353  1978  00EB               	movwf	(_scaleA100kPot$2837+2)^(0+384)
 12354                           
 12355                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12356  1979  3056               	movlw	86
 12357  197A  0022               	movlb	2	; select bank2
 12358  197B  00D8               	movwf	pow@y^(0+256)
 12359  197C  308E               	movlw	142
 12360  197D  00D9               	movwf	(pow@y+1)^(0+256)
 12361  197E  30BF               	movlw	191
 12362  197F  00DA               	movwf	(pow@y+2)^(0+256)
 12363  1980  0023               	movlb	3	; select bank3
 12364  1981  0869               	movf	_scaleA100kPot$2837^(0+384),w
 12365  1982  0022               	movlb	2	; select bank2
 12366  1983  00D5               	movwf	pow@x^(0+256)
 12367  1984  0023               	movlb	3	; select bank3
 12368  1985  086A               	movf	(_scaleA100kPot$2837+1)^(0+384),w
 12369  1986  0022               	movlb	2	; select bank2
 12370  1987  00D6               	movwf	(pow@x+1)^(0+256)
 12371  1988  0023               	movlb	3	; select bank3
 12372  1989  086B               	movf	(_scaleA100kPot$2837+2)^(0+384),w
 12373  198A  0022               	movlb	2	; select bank2
 12374  198B  00D7               	movwf	(pow@x+2)^(0+256)
 12375  198C  3191  2116  3199   	fcall	_pow
 12376  198F  0022               	movlb	2	; select bank2
 12377  1990  0855               	movf	?_pow^(0+256),w
 12378  1991  0023               	movlb	3	; select bank3
 12379  1992  00EC               	movwf	_scaleA100kPot$2838^(0+384)
 12380  1993  0022               	movlb	2	; select bank2
 12381  1994  0856               	movf	(?_pow+1)^(0+256),w
 12382  1995  0023               	movlb	3	; select bank3
 12383  1996  00ED               	movwf	(_scaleA100kPot$2838+1)^(0+384)
 12384  1997  0022               	movlb	2	; select bank2
 12385  1998  0857               	movf	(?_pow+2)^(0+256),w
 12386  1999  0023               	movlb	3	; select bank3
 12387  199A  00EE               	movwf	(_scaleA100kPot$2838+2)^(0+384)
 12388                           
 12389                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12390  199B  309F               	movlw	159
 12391  199C  0021               	movlb	1	; select bank1
 12392  199D  00AE               	movwf	___ftmul@f1^(0+128)
 12393  199E  3068               	movlw	104
 12394  199F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12395  19A0  3040               	movlw	64
 12396  19A1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12397  19A2  0023               	movlb	3	; select bank3
 12398  19A3  086C               	movf	_scaleA100kPot$2838^(0+384),w
 12399  19A4  0021               	movlb	1	; select bank1
 12400  19A5  00B1               	movwf	___ftmul@f2^(0+128)
 12401  19A6  0023               	movlb	3	; select bank3
 12402  19A7  086D               	movf	(_scaleA100kPot$2838+1)^(0+384),w
 12403  19A8  0021               	movlb	1	; select bank1
 12404  19A9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12405  19AA  0023               	movlb	3	; select bank3
 12406  19AB  086E               	movf	(_scaleA100kPot$2838+2)^(0+384),w
 12407  19AC  0021               	movlb	1	; select bank1
 12408  19AD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12409  19AE  319E  2691  3199   	fcall	___ftmul
 12410  19B1  0021               	movlb	1	; select bank1
 12411  19B2  082E               	movf	?___ftmul^(0+128),w
 12412  19B3  0023               	movlb	3	; select bank3
 12413  19B4  00E6               	movwf	scaleA100kPot@pwm^(0+384)
 12414  19B5  0021               	movlb	1	; select bank1
 12415  19B6  082F               	movf	(?___ftmul+1)^(0+128),w
 12416  19B7  0023               	movlb	3	; select bank3
 12417  19B8  00E7               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12418  19B9  0021               	movlb	1	; select bank1
 12419  19BA  0830               	movf	(?___ftmul+2)^(0+128),w
 12420  19BB  0023               	movlb	3	; select bank3
 12421  19BC  00E8               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12422                           
 12423                           ;user.c: 192: return (int)(pwm);
 12424  19BD  0866               	movf	scaleA100kPot@pwm^(0+384),w
 12425  19BE  0022               	movlb	2	; select bank2
 12426  19BF  00A0               	movwf	___fttol@f1^(0+256)
 12427  19C0  0023               	movlb	3	; select bank3
 12428  19C1  0867               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12429  19C2  0022               	movlb	2	; select bank2
 12430  19C3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12431  19C4  0023               	movlb	3	; select bank3
 12432  19C5  0868               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12433  19C6  0022               	movlb	2	; select bank2
 12434  19C7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12435  19C8  3199  21D0         	fcall	___fttol
 12436  19CA  0022               	movlb	2	; select bank2
 12437  19CB  0821               	movf	(?___fttol^(0+256)+1),w
 12438  19CC  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12439  19CD  0820               	movf	?___fttol^(0+256),w
 12440  19CE  00E7               	movwf	?_scaleA100kPot^(0+256)
 12441  19CF  0008               	return
 12442  19D0                     __end_of_scaleA100kPot:	
 12443                           
 12444                           	psect	text28
 12445  1116                     __ptext28:	
 12446 ;; *************** function _pow *****************
 12447 ;; Defined at:
 12448 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;  x               3   53[BANK2 ] int 
 12451 ;;  y               3   56[BANK2 ] int 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  yi              4   67[BANK2 ] unsigned long 
 12454 ;;  sign            1   66[BANK2 ] unsigned char 
 12455 ;; Return value:  Size  Location     Type
 12456 ;;                  3   53[BANK2 ] unsigned char 
 12457 ;; Registers used:
 12458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12459 ;; Tracked objects:
 12460 ;;		On entry : 0/0
 12461 ;;		On exit  : 0/0
 12462 ;;		Unchanged: 0/0
 12463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12464 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12465 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12466 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12467 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12468 ;;Total ram usage:       18 bytes
 12469 ;; Hardware stack levels used:    1
 12470 ;; Hardware stack levels required when called:    7
 12471 ;; This function calls:
 12472 ;;		___ftge
 12473 ;;		___ftmul
 12474 ;;		___ftneg
 12475 ;;		___fttol
 12476 ;;		___lltoft
 12477 ;;		_exp
 12478 ;;		_log
 12479 ;; This function is called by:
 12480 ;;		_scaleA100kPot
 12481 ;;		_scaleA10kPot
 12482 ;;		_scaleiA10kPot
 12483 ;;		_scaleiA100kPot
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           
 12488                           ;psect for function _pow
 12489  1116                     _pow:	
 12490                           
 12491                           ;incstack = 0
 12492                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12493  1116  0022               	movlb	2	; select bank2
 12494  1117  01E2               	clrf	pow@sign^(0+256)
 12495  1118  0857               	movf	(pow@x+2)^(0+256),w
 12496  1119  0456               	iorwf	(pow@x+1)^(0+256),w
 12497  111A  0455               	iorwf	pow@x^(0+256),w
 12498  111B  1D03               	skipz
 12499  111C  2942               	goto	l8366
 12500  111D  3000               	movlw	0
 12501  111E  0021               	movlb	1	; select bank1
 12502  111F  00A0               	movwf	___ftge@ff1^(0+128)
 12503  1120  3000               	movlw	0
 12504  1121  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12505  1122  3000               	movlw	0
 12506  1123  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12507  1124  0022               	movlb	2	; select bank2
 12508  1125  0858               	movf	pow@y^(0+256),w
 12509  1126  0021               	movlb	1	; select bank1
 12510  1127  00A3               	movwf	___ftge@ff2^(0+128)
 12511  1128  0022               	movlb	2	; select bank2
 12512  1129  0859               	movf	(pow@y+1)^(0+256),w
 12513  112A  0021               	movlb	1	; select bank1
 12514  112B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12515  112C  0022               	movlb	2	; select bank2
 12516  112D  085A               	movf	(pow@y+2)^(0+256),w
 12517  112E  0021               	movlb	1	; select bank1
 12518  112F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12519  1130  31A1  2167  3191   	fcall	___ftge
 12520  1133  1C03               	btfss	3,0
 12521  1134  293A               	goto	l2305
 12522  1135  3021               	movlw	33
 12523  1136  0024               	movlb	4	; select bank4
 12524  1137  00CD               	movwf	_errno^(0+512)
 12525  1138  3000               	movlw	0
 12526  1139  00CE               	movwf	(_errno^(0+512)+1)
 12527  113A                     l2305:	
 12528  113A  3000               	movlw	0
 12529  113B  0022               	movlb	2	; select bank2
 12530  113C  00D5               	movwf	?_pow^(0+256)
 12531  113D  3000               	movlw	0
 12532  113E  00D6               	movwf	(?_pow+1)^(0+256)
 12533  113F  3000               	movlw	0
 12534  1140  00D7               	movwf	(?_pow+2)^(0+256)
 12535  1141  0008               	return
 12536  1142                     l8366:	
 12537  1142  085A               	movf	(pow@y+2)^(0+256),w
 12538  1143  0459               	iorwf	(pow@y+1)^(0+256),w
 12539  1144  0458               	iorwf	pow@y^(0+256),w
 12540  1145  1D03               	skipz
 12541  1146  294E               	goto	l8372
 12542  1147  3000               	movlw	0
 12543  1148  00D5               	movwf	?_pow^(0+256)
 12544  1149  3080               	movlw	128
 12545  114A  00D6               	movwf	(?_pow+1)^(0+256)
 12546  114B  303F               	movlw	63
 12547  114C  00D7               	movwf	(?_pow+2)^(0+256)
 12548  114D  0008               	return
 12549  114E                     l8372:	
 12550  114E  0855               	movf	pow@x^(0+256),w
 12551  114F  0021               	movlb	1	; select bank1
 12552  1150  00A0               	movwf	___ftge@ff1^(0+128)
 12553  1151  0022               	movlb	2	; select bank2
 12554  1152  0856               	movf	(pow@x+1)^(0+256),w
 12555  1153  0021               	movlb	1	; select bank1
 12556  1154  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12557  1155  0022               	movlb	2	; select bank2
 12558  1156  0857               	movf	(pow@x+2)^(0+256),w
 12559  1157  0021               	movlb	1	; select bank1
 12560  1158  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12561  1159  3000               	movlw	0
 12562  115A  00A3               	movwf	___ftge@ff2^(0+128)
 12563  115B  3000               	movlw	0
 12564  115C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12565  115D  3000               	movlw	0
 12566  115E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12567  115F  31A1  2167  3191   	fcall	___ftge
 12568  1162  1803               	btfsc	3,0
 12569  1163  29C8               	goto	l8384
 12570  1164  0022               	movlb	2	; select bank2
 12571  1165  0858               	movf	pow@y^(0+256),w
 12572  1166  00A0               	movwf	___fttol@f1^(0+256)
 12573  1167  0859               	movf	(pow@y+1)^(0+256),w
 12574  1168  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12575  1169  085A               	movf	(pow@y+2)^(0+256),w
 12576  116A  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12577  116B  3199  21D0  3191   	fcall	___fttol
 12578  116E  0022               	movlb	2	; select bank2
 12579  116F  0823               	movf	(?___fttol+3)^(0+256),w
 12580  1170  00E6               	movwf	(pow@yi+3)^(0+256)
 12581  1171  0822               	movf	(?___fttol+2)^(0+256),w
 12582  1172  00E5               	movwf	(pow@yi+2)^(0+256)
 12583  1173  0821               	movf	(?___fttol+1)^(0+256),w
 12584  1174  00E4               	movwf	(pow@yi+1)^(0+256)
 12585  1175  0820               	movf	?___fttol^(0+256),w
 12586  1176  00E3               	movwf	pow@yi^(0+256)
 12587  1177  0866               	movf	(pow@yi+3)^(0+256),w
 12588  1178  0021               	movlb	1	; select bank1
 12589  1179  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12590  117A  0022               	movlb	2	; select bank2
 12591  117B  0865               	movf	(pow@yi+2)^(0+256),w
 12592  117C  0021               	movlb	1	; select bank1
 12593  117D  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12594  117E  0022               	movlb	2	; select bank2
 12595  117F  0864               	movf	(pow@yi+1)^(0+256),w
 12596  1180  0021               	movlb	1	; select bank1
 12597  1181  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12598  1182  0022               	movlb	2	; select bank2
 12599  1183  0863               	movf	pow@yi^(0+256),w
 12600  1184  0021               	movlb	1	; select bank1
 12601  1185  00A8               	movwf	___lltoft@c^(0+128)
 12602  1186  31AF  271C  3191   	fcall	___lltoft
 12603  1189  0022               	movlb	2	; select bank2
 12604  118A  085A               	movf	(pow@y+2)^(0+256),w
 12605  118B  0021               	movlb	1	; select bank1
 12606  118C  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12607  118D  1D03               	skipz
 12608  118E  2999               	goto	u8865
 12609  118F  0022               	movlb	2	; select bank2
 12610  1190  0859               	movf	(pow@y+1)^(0+256),w
 12611  1191  0021               	movlb	1	; select bank1
 12612  1192  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12613  1193  1D03               	skipz
 12614  1194  2999               	goto	u8865
 12615  1195  0022               	movlb	2	; select bank2
 12616  1196  0858               	movf	pow@y^(0+256),w
 12617  1197  0021               	movlb	1	; select bank1
 12618  1198  0628               	xorwf	?___lltoft^(0+128),w
 12619  1199                     u8865:	
 12620  1199  1903               	skipnz
 12621  119A  29A8               	goto	l8380
 12622  119B  3021               	movlw	33
 12623  119C  0024               	movlb	4	; select bank4
 12624  119D  00CD               	movwf	_errno^(0+512)
 12625  119E  3000               	movlw	0
 12626  119F  00CE               	movwf	(_errno^(0+512)+1)
 12627  11A0  3000               	movlw	0
 12628  11A1  0022               	movlb	2	; select bank2
 12629  11A2  00D5               	movwf	?_pow^(0+256)
 12630  11A3  3000               	movlw	0
 12631  11A4  00D6               	movwf	(?_pow+1)^(0+256)
 12632  11A5  3000               	movlw	0
 12633  11A6  00D7               	movwf	(?_pow+2)^(0+256)
 12634  11A7  0008               	return
 12635  11A8                     l8380:	
 12636  11A8  0022               	movlb	2	; select bank2
 12637  11A9  0863               	movf	pow@yi^(0+256),w
 12638  11AA  3901               	andlw	1
 12639  11AB  00DB               	movwf	??_pow^(0+256)
 12640  11AC  085B               	movf	??_pow^(0+256),w
 12641  11AD  00E2               	movwf	pow@sign^(0+256)
 12642  11AE  0855               	movf	pow@x^(0+256),w
 12643  11AF  0021               	movlb	1	; select bank1
 12644  11B0  00BE               	movwf	___ftneg@f1^(0+128)
 12645  11B1  0022               	movlb	2	; select bank2
 12646  11B2  0856               	movf	(pow@x+1)^(0+256),w
 12647  11B3  0021               	movlb	1	; select bank1
 12648  11B4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12649  11B5  0022               	movlb	2	; select bank2
 12650  11B6  0857               	movf	(pow@x+2)^(0+256),w
 12651  11B7  0021               	movlb	1	; select bank1
 12652  11B8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12653  11B9  31AD  259D  3191   	fcall	___ftneg
 12654  11BC  0021               	movlb	1	; select bank1
 12655  11BD  083E               	movf	?___ftneg^(0+128),w
 12656  11BE  0022               	movlb	2	; select bank2
 12657  11BF  00D5               	movwf	pow@x^(0+256)
 12658  11C0  0021               	movlb	1	; select bank1
 12659  11C1  083F               	movf	(?___ftneg+1)^(0+128),w
 12660  11C2  0022               	movlb	2	; select bank2
 12661  11C3  00D6               	movwf	(pow@x+1)^(0+256)
 12662  11C4  0021               	movlb	1	; select bank1
 12663  11C5  0840               	movf	(?___ftneg+2)^(0+128),w
 12664  11C6  0022               	movlb	2	; select bank2
 12665  11C7  00D7               	movwf	(pow@x+2)^(0+256)
 12666  11C8                     l8384:	
 12667  11C8  0022               	movlb	2	; select bank2
 12668  11C9  0855               	movf	pow@x^(0+256),w
 12669  11CA  00BE               	movwf	log@x^(0+256)
 12670  11CB  0856               	movf	(pow@x+1)^(0+256),w
 12671  11CC  00BF               	movwf	(log@x+1)^(0+256)
 12672  11CD  0857               	movf	(pow@x+2)^(0+256),w
 12673  11CE  00C0               	movwf	(log@x+2)^(0+256)
 12674  11CF  3187  2714  3191   	fcall	_log
 12675  11D2  0022               	movlb	2	; select bank2
 12676  11D3  083E               	movf	?_log^(0+256),w
 12677  11D4  00DC               	movwf	_pow$2850^(0+256)
 12678  11D5  083F               	movf	(?_log+1)^(0+256),w
 12679  11D6  00DD               	movwf	(_pow$2850+1)^(0+256)
 12680  11D7  0840               	movf	(?_log+2)^(0+256),w
 12681  11D8  00DE               	movwf	(_pow$2850+2)^(0+256)
 12682  11D9  0858               	movf	pow@y^(0+256),w
 12683  11DA  0021               	movlb	1	; select bank1
 12684  11DB  00AE               	movwf	___ftmul@f1^(0+128)
 12685  11DC  0022               	movlb	2	; select bank2
 12686  11DD  0859               	movf	(pow@y+1)^(0+256),w
 12687  11DE  0021               	movlb	1	; select bank1
 12688  11DF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12689  11E0  0022               	movlb	2	; select bank2
 12690  11E1  085A               	movf	(pow@y+2)^(0+256),w
 12691  11E2  0021               	movlb	1	; select bank1
 12692  11E3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12693  11E4  0022               	movlb	2	; select bank2
 12694  11E5  085C               	movf	_pow$2850^(0+256),w
 12695  11E6  0021               	movlb	1	; select bank1
 12696  11E7  00B1               	movwf	___ftmul@f2^(0+128)
 12697  11E8  0022               	movlb	2	; select bank2
 12698  11E9  085D               	movf	(_pow$2850+1)^(0+256),w
 12699  11EA  0021               	movlb	1	; select bank1
 12700  11EB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12701  11EC  0022               	movlb	2	; select bank2
 12702  11ED  085E               	movf	(_pow$2850+2)^(0+256),w
 12703  11EE  0021               	movlb	1	; select bank1
 12704  11EF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12705  11F0  319E  2691  3191   	fcall	___ftmul
 12706  11F3  0021               	movlb	1	; select bank1
 12707  11F4  082E               	movf	?___ftmul^(0+128),w
 12708  11F5  0022               	movlb	2	; select bank2
 12709  11F6  00DF               	movwf	_pow$2851^(0+256)
 12710  11F7  0021               	movlb	1	; select bank1
 12711  11F8  082F               	movf	(?___ftmul+1)^(0+128),w
 12712  11F9  0022               	movlb	2	; select bank2
 12713  11FA  00E0               	movwf	(_pow$2851+1)^(0+256)
 12714  11FB  0021               	movlb	1	; select bank1
 12715  11FC  0830               	movf	(?___ftmul+2)^(0+128),w
 12716  11FD  0022               	movlb	2	; select bank2
 12717  11FE  00E1               	movwf	(_pow$2851+2)^(0+256)
 12718  11FF  085F               	movf	_pow$2851^(0+256),w
 12719  1200  00C8               	movwf	exp@x^(0+256)
 12720  1201  0860               	movf	(_pow$2851+1)^(0+256),w
 12721  1202  00C9               	movwf	(exp@x+1)^(0+256)
 12722  1203  0861               	movf	(_pow$2851+2)^(0+256),w
 12723  1204  00CA               	movwf	(exp@x+2)^(0+256)
 12724  1205  3193  2351  3191   	fcall	_exp
 12725  1208  0022               	movlb	2	; select bank2
 12726  1209  0848               	movf	?_exp^(0+256),w
 12727  120A  00D5               	movwf	pow@x^(0+256)
 12728  120B  0849               	movf	(?_exp+1)^(0+256),w
 12729  120C  00D6               	movwf	(pow@x+1)^(0+256)
 12730  120D  084A               	movf	(?_exp+2)^(0+256),w
 12731  120E  00D7               	movwf	(pow@x+2)^(0+256)
 12732  120F  0862               	movf	pow@sign^(0+256),w
 12733  1210  1903               	btfsc	3,2
 12734  1211  0008               	return
 12735  1212  0855               	movf	pow@x^(0+256),w
 12736  1213  0021               	movlb	1	; select bank1
 12737  1214  00BE               	movwf	___ftneg@f1^(0+128)
 12738  1215  0022               	movlb	2	; select bank2
 12739  1216  0856               	movf	(pow@x+1)^(0+256),w
 12740  1217  0021               	movlb	1	; select bank1
 12741  1218  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12742  1219  0022               	movlb	2	; select bank2
 12743  121A  0857               	movf	(pow@x+2)^(0+256),w
 12744  121B  0021               	movlb	1	; select bank1
 12745  121C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12746  121D  31AD  259D         	fcall	___ftneg
 12747  121F  0021               	movlb	1	; select bank1
 12748  1220  083E               	movf	?___ftneg^(0+128),w
 12749  1221  0022               	movlb	2	; select bank2
 12750  1222  00D5               	movwf	?_pow^(0+256)
 12751  1223  0021               	movlb	1	; select bank1
 12752  1224  083F               	movf	(?___ftneg+1)^(0+128),w
 12753  1225  0022               	movlb	2	; select bank2
 12754  1226  00D6               	movwf	(?_pow+1)^(0+256)
 12755  1227  0021               	movlb	1	; select bank1
 12756  1228  0840               	movf	(?___ftneg+2)^(0+128),w
 12757  1229  0022               	movlb	2	; select bank2
 12758  122A  00D7               	movwf	(?_pow+2)^(0+256)
 12759  122B  0008               	return
 12760  122C                     __end_of_pow:	
 12761                           
 12762                           	psect	text29
 12763  0714                     __ptext29:	
 12764 ;; *************** function _log *****************
 12765 ;; Defined at:
 12766 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12767 ;; Parameters:    Size  Location     Type
 12768 ;;  x               3   30[BANK2 ] unsigned char 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;  exponent        2   34[BANK2 ] int 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  3   30[BANK2 ] int 
 12773 ;; Registers used:
 12774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12780 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12781 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12782 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12783 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12784 ;;Total ram usage:        6 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    6
 12787 ;; This function calls:
 12788 ;;		___awtoft
 12789 ;;		___ftadd
 12790 ;;		___ftge
 12791 ;;		___ftmul
 12792 ;;		_eval_poly
 12793 ;;		_frexp
 12794 ;; This function is called by:
 12795 ;;		_pow
 12796 ;; This function uses a non-reentrant model
 12797 ;;
 12798                           
 12799                           
 12800                           ;psect for function _log
 12801  0714                     _log:	
 12802                           
 12803                           ;incstack = 0
 12804                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12805  0714  0022               	movlb	2	; select bank2
 12806  0715  083E               	movf	log@x^(0+256),w
 12807  0716  0021               	movlb	1	; select bank1
 12808  0717  00A0               	movwf	___ftge@ff1^(0+128)
 12809  0718  0022               	movlb	2	; select bank2
 12810  0719  083F               	movf	(log@x+1)^(0+256),w
 12811  071A  0021               	movlb	1	; select bank1
 12812  071B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12813  071C  0022               	movlb	2	; select bank2
 12814  071D  0840               	movf	(log@x+2)^(0+256),w
 12815  071E  0021               	movlb	1	; select bank1
 12816  071F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12817  0720  3000               	movlw	0
 12818  0721  00A3               	movwf	___ftge@ff2^(0+128)
 12819  0722  3000               	movlw	0
 12820  0723  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12821  0724  3000               	movlw	0
 12822  0725  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12823  0726  31A1  2167  3187   	fcall	___ftge
 12824  0729  1803               	btfsc	3,0
 12825  072A  2F38               	goto	l8220
 12826  072B  3021               	movlw	33
 12827  072C  0024               	movlb	4	; select bank4
 12828  072D  00CD               	movwf	_errno^(0+512)
 12829  072E  3000               	movlw	0
 12830  072F  00CE               	movwf	(_errno^(0+512)+1)
 12831  0730  3000               	movlw	0
 12832  0731  0022               	movlb	2	; select bank2
 12833  0732  00BE               	movwf	?_log^(0+256)
 12834  0733  3000               	movlw	0
 12835  0734  00BF               	movwf	(?_log+1)^(0+256)
 12836  0735  3000               	movlw	0
 12837  0736  00C0               	movwf	(?_log+2)^(0+256)
 12838  0737  0008               	return
 12839  0738                     l8220:	
 12840  0738  0022               	movlb	2	; select bank2
 12841  0739  0840               	movf	(log@x+2)^(0+256),w
 12842  073A  043F               	iorwf	(log@x+1)^(0+256),w
 12843  073B  043E               	iorwf	log@x^(0+256),w
 12844  073C  1D03               	skipz
 12845  073D  2F4B               	goto	l8226
 12846  073E  3022               	movlw	34
 12847  073F  0024               	movlb	4	; select bank4
 12848  0740  00CD               	movwf	_errno^(0+512)
 12849  0741  3000               	movlw	0
 12850  0742  00CE               	movwf	(_errno^(0+512)+1)
 12851  0743  3000               	movlw	0
 12852  0744  0022               	movlb	2	; select bank2
 12853  0745  00BE               	movwf	?_log^(0+256)
 12854  0746  3000               	movlw	0
 12855  0747  00BF               	movwf	(?_log+1)^(0+256)
 12856  0748  3000               	movlw	0
 12857  0749  00C0               	movwf	(?_log+2)^(0+256)
 12858  074A  0008               	return
 12859  074B                     l8226:	
 12860  074B  3000               	movlw	0
 12861  074C  0021               	movlb	1	; select bank1
 12862  074D  00C1               	movwf	___ftadd@f1^(0+128)
 12863  074E  3080               	movlw	128
 12864  074F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12865  0750  30BF               	movlw	191
 12866  0751  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12867  0752  3000               	movlw	0
 12868  0753  00AE               	movwf	___ftmul@f1^(0+128)
 12869  0754  3000               	movlw	0
 12870  0755  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12871  0756  3040               	movlw	64
 12872  0757  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12873  0758  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12874  0759  0022               	movlb	2	; select bank2
 12875  075A  00C1               	movwf	??_log^(0+256)
 12876  075B  0841               	movf	??_log^(0+256),w
 12877  075C  0021               	movlb	1	; select bank1
 12878  075D  00A3               	movwf	frexp@eptr^(0+128)
 12879  075E  0022               	movlb	2	; select bank2
 12880  075F  083E               	movf	log@x^(0+256),w
 12881  0760  0021               	movlb	1	; select bank1
 12882  0761  00A0               	movwf	frexp@value^(0+128)
 12883  0762  0022               	movlb	2	; select bank2
 12884  0763  083F               	movf	(log@x+1)^(0+256),w
 12885  0764  0021               	movlb	1	; select bank1
 12886  0765  00A1               	movwf	(frexp@value+1)^(0+128)
 12887  0766  0022               	movlb	2	; select bank2
 12888  0767  0840               	movf	(log@x+2)^(0+256),w
 12889  0768  0021               	movlb	1	; select bank1
 12890  0769  00A2               	movwf	(frexp@value+2)^(0+128)
 12891  076A  31A2  221E  3187   	fcall	_frexp
 12892  076D  0021               	movlb	1	; select bank1
 12893  076E  0820               	movf	?_frexp^(0+128),w
 12894  076F  00B1               	movwf	___ftmul@f2^(0+128)
 12895  0770  0821               	movf	(?_frexp+1)^(0+128),w
 12896  0771  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12897  0772  0822               	movf	(?_frexp+2)^(0+128),w
 12898  0773  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12899  0774  319E  2691  3187   	fcall	___ftmul
 12900  0777  0021               	movlb	1	; select bank1
 12901  0778  082E               	movf	?___ftmul^(0+128),w
 12902  0779  00C4               	movwf	___ftadd@f2^(0+128)
 12903  077A  082F               	movf	(?___ftmul+1)^(0+128),w
 12904  077B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12905  077C  0830               	movf	(?___ftmul+2)^(0+128),w
 12906  077D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12907  077E  3190  2020  3187   	fcall	___ftadd
 12908  0781  0021               	movlb	1	; select bank1
 12909  0782  0841               	movf	?___ftadd^(0+128),w
 12910  0783  0022               	movlb	2	; select bank2
 12911  0784  00BE               	movwf	log@x^(0+256)
 12912  0785  0021               	movlb	1	; select bank1
 12913  0786  0842               	movf	(?___ftadd+1)^(0+128),w
 12914  0787  0022               	movlb	2	; select bank2
 12915  0788  00BF               	movwf	(log@x+1)^(0+256)
 12916  0789  0021               	movlb	1	; select bank1
 12917  078A  0843               	movf	(?___ftadd+2)^(0+128),w
 12918  078B  0022               	movlb	2	; select bank2
 12919  078C  00C0               	movwf	(log@x+2)^(0+256)
 12920  078D  30FF               	movlw	255
 12921  078E  07C2               	addwf	log@exponent^(0+256),f
 12922  078F  30FF               	movlw	255
 12923  0790  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12924  0791  083E               	movf	log@x^(0+256),w
 12925  0792  00B4               	movwf	eval_poly@x^(0+256)
 12926  0793  083F               	movf	(log@x+1)^(0+256),w
 12927  0794  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12928  0795  0840               	movf	(log@x+2)^(0+256),w
 12929  0796  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12930  0797  301E               	movlw	low (log@coeff| (0+32768))
 12931  0798  00B7               	movwf	eval_poly@d^(0+256)
 12932  0799  30A8               	movlw	high (log@coeff| (0+32768))
 12933  079A  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12934  079B  3008               	movlw	8
 12935  079C  00B9               	movwf	eval_poly@n^(0+256)
 12936  079D  3000               	movlw	0
 12937  079E  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12938  079F  31A6  2697  3187   	fcall	_eval_poly
 12939  07A2  0022               	movlb	2	; select bank2
 12940  07A3  0834               	movf	?_eval_poly^(0+256),w
 12941  07A4  00BE               	movwf	log@x^(0+256)
 12942  07A5  0835               	movf	(?_eval_poly+1)^(0+256),w
 12943  07A6  00BF               	movwf	(log@x+1)^(0+256)
 12944  07A7  0836               	movf	(?_eval_poly+2)^(0+256),w
 12945  07A8  00C0               	movwf	(log@x+2)^(0+256)
 12946  07A9  083E               	movf	log@x^(0+256),w
 12947  07AA  0021               	movlb	1	; select bank1
 12948  07AB  00C1               	movwf	___ftadd@f1^(0+128)
 12949  07AC  0022               	movlb	2	; select bank2
 12950  07AD  083F               	movf	(log@x+1)^(0+256),w
 12951  07AE  0021               	movlb	1	; select bank1
 12952  07AF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12953  07B0  0022               	movlb	2	; select bank2
 12954  07B1  0840               	movf	(log@x+2)^(0+256),w
 12955  07B2  0021               	movlb	1	; select bank1
 12956  07B3  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12957  07B4  3072               	movlw	114
 12958  07B5  00AE               	movwf	___ftmul@f1^(0+128)
 12959  07B6  3031               	movlw	49
 12960  07B7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12961  07B8  303F               	movlw	63
 12962  07B9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12963  07BA  0022               	movlb	2	; select bank2
 12964  07BB  0843               	movf	(log@exponent+1)^(0+256),w
 12965  07BC  0021               	movlb	1	; select bank1
 12966  07BD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12967  07BE  0022               	movlb	2	; select bank2
 12968  07BF  0842               	movf	log@exponent^(0+256),w
 12969  07C0  0021               	movlb	1	; select bank1
 12970  07C1  00A8               	movwf	___awtoft@c^(0+128)
 12971  07C2  31A0  2000  3187   	fcall	___awtoft
 12972  07C5  0021               	movlb	1	; select bank1
 12973  07C6  0828               	movf	?___awtoft^(0+128),w
 12974  07C7  00B1               	movwf	___ftmul@f2^(0+128)
 12975  07C8  0829               	movf	(?___awtoft+1)^(0+128),w
 12976  07C9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12977  07CA  082A               	movf	(?___awtoft+2)^(0+128),w
 12978  07CB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12979  07CC  319E  2691  3187   	fcall	___ftmul
 12980  07CF  0021               	movlb	1	; select bank1
 12981  07D0  082E               	movf	?___ftmul^(0+128),w
 12982  07D1  00C4               	movwf	___ftadd@f2^(0+128)
 12983  07D2  082F               	movf	(?___ftmul+1)^(0+128),w
 12984  07D3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12985  07D4  0830               	movf	(?___ftmul+2)^(0+128),w
 12986  07D5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12987  07D6  3190  2020         	fcall	___ftadd
 12988  07D8  0021               	movlb	1	; select bank1
 12989  07D9  0841               	movf	?___ftadd^(0+128),w
 12990  07DA  0022               	movlb	2	; select bank2
 12991  07DB  00BE               	movwf	?_log^(0+256)
 12992  07DC  0021               	movlb	1	; select bank1
 12993  07DD  0842               	movf	(?___ftadd+1)^(0+128),w
 12994  07DE  0022               	movlb	2	; select bank2
 12995  07DF  00BF               	movwf	(?_log+1)^(0+256)
 12996  07E0  0021               	movlb	1	; select bank1
 12997  07E1  0843               	movf	(?___ftadd+2)^(0+128),w
 12998  07E2  0022               	movlb	2	; select bank2
 12999  07E3  00C0               	movwf	(?_log+2)^(0+256)
 13000  07E4  0008               	return
 13001  07E5                     __end_of_log:	
 13002                           
 13003                           	psect	text30
 13004  1351                     __ptext30:	
 13005 ;; *************** function _exp *****************
 13006 ;; Defined at:
 13007 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  x               3   40[BANK2 ] int 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  exponent        2   50[BANK2 ] int 
 13012 ;;  sign            1   52[BANK2 ] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;                  3   40[BANK2 ] unsigned char 
 13015 ;; Registers used:
 13016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13022 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13023 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13024 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13025 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13026 ;;Total ram usage:       13 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    6
 13029 ;; This function calls:
 13030 ;;		___awtoft
 13031 ;;		___ftdiv
 13032 ;;		___ftge
 13033 ;;		___ftmul
 13034 ;;		___ftneg
 13035 ;;		___ftsub
 13036 ;;		___fttol
 13037 ;;		_eval_poly
 13038 ;;		_floor
 13039 ;;		_ldexp
 13040 ;; This function is called by:
 13041 ;;		_pow
 13042 ;; This function uses a non-reentrant model
 13043 ;;
 13044                           
 13045                           
 13046                           ;psect for function _exp
 13047  1351                     _exp:	
 13048                           
 13049                           ;incstack = 0
 13050                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13051  1351  0022               	movlb	2	; select bank2
 13052  1352  084A               	movf	(exp@x+2)^(0+256),w
 13053  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 13054  1354  0448               	iorwf	exp@x^(0+256),w
 13055  1355  1D03               	skipz
 13056  1356  2B5E               	goto	l8242
 13057  1357  3000               	movlw	0
 13058  1358  00C8               	movwf	?_exp^(0+256)
 13059  1359  3080               	movlw	128
 13060  135A  00C9               	movwf	(?_exp+1)^(0+256)
 13061  135B  303F               	movlw	63
 13062  135C  00CA               	movwf	(?_exp+2)^(0+256)
 13063  135D  0008               	return
 13064  135E                     l8242:	
 13065  135E  3072               	movlw	114
 13066  135F  0021               	movlb	1	; select bank1
 13067  1360  00A0               	movwf	___ftge@ff1^(0+128)
 13068  1361  3031               	movlw	49
 13069  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13070  1363  3044               	movlw	68
 13071  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13072  1365  0022               	movlb	2	; select bank2
 13073  1366  0848               	movf	exp@x^(0+256),w
 13074  1367  0021               	movlb	1	; select bank1
 13075  1368  00A3               	movwf	___ftge@ff2^(0+128)
 13076  1369  0022               	movlb	2	; select bank2
 13077  136A  0849               	movf	(exp@x+1)^(0+256),w
 13078  136B  0021               	movlb	1	; select bank1
 13079  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13080  136D  0022               	movlb	2	; select bank2
 13081  136E  084A               	movf	(exp@x+2)^(0+256),w
 13082  136F  0021               	movlb	1	; select bank1
 13083  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13084  1371  31A1  2167  3193   	fcall	___ftge
 13085  1374  1803               	btfsc	3,0
 13086  1375  2B83               	goto	l8252
 13087  1376  3022               	movlw	34
 13088  1377  0024               	movlb	4	; select bank4
 13089  1378  00CD               	movwf	_errno^(0+512)
 13090  1379  3000               	movlw	0
 13091  137A  00CE               	movwf	(_errno^(0+512)+1)
 13092  137B  30FF               	movlw	255
 13093  137C  0022               	movlb	2	; select bank2
 13094  137D  00C8               	movwf	?_exp^(0+256)
 13095  137E  307F               	movlw	127
 13096  137F  00C9               	movwf	(?_exp+1)^(0+256)
 13097  1380  307F               	movlw	127
 13098  1381  00CA               	movwf	(?_exp+2)^(0+256)
 13099  1382  0008               	return
 13100  1383                     l8252:	
 13101  1383  0022               	movlb	2	; select bank2
 13102  1384  0848               	movf	exp@x^(0+256),w
 13103  1385  0021               	movlb	1	; select bank1
 13104  1386  00A0               	movwf	___ftge@ff1^(0+128)
 13105  1387  0022               	movlb	2	; select bank2
 13106  1388  0849               	movf	(exp@x+1)^(0+256),w
 13107  1389  0021               	movlb	1	; select bank1
 13108  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13109  138B  0022               	movlb	2	; select bank2
 13110  138C  084A               	movf	(exp@x+2)^(0+256),w
 13111  138D  0021               	movlb	1	; select bank1
 13112  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13113  138F  3049               	movlw	73
 13114  1390  00A3               	movwf	___ftge@ff2^(0+128)
 13115  1391  303A               	movlw	58
 13116  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13117  1393  30C4               	movlw	196
 13118  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13119  1395  31A1  2167  3193   	fcall	___ftge
 13120  1398  1803               	btfsc	3,0
 13121  1399  2BA7               	goto	l8258
 13122  139A  3022               	movlw	34
 13123  139B  0024               	movlb	4	; select bank4
 13124  139C  00CD               	movwf	_errno^(0+512)
 13125  139D  3000               	movlw	0
 13126  139E  00CE               	movwf	(_errno^(0+512)+1)
 13127  139F  3000               	movlw	0
 13128  13A0  0022               	movlb	2	; select bank2
 13129  13A1  00C8               	movwf	?_exp^(0+256)
 13130  13A2  3000               	movlw	0
 13131  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 13132  13A4  3000               	movlw	0
 13133  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 13134  13A6  0008               	return
 13135  13A7                     l8258:	
 13136  13A7  0022               	movlb	2	; select bank2
 13137  13A8  0848               	movf	exp@x^(0+256),w
 13138  13A9  0021               	movlb	1	; select bank1
 13139  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 13140  13AB  0022               	movlb	2	; select bank2
 13141  13AC  0849               	movf	(exp@x+1)^(0+256),w
 13142  13AD  0021               	movlb	1	; select bank1
 13143  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13144  13AF  0022               	movlb	2	; select bank2
 13145  13B0  084A               	movf	(exp@x+2)^(0+256),w
 13146  13B1  0021               	movlb	1	; select bank1
 13147  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13148  13B3  3000               	movlw	0
 13149  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 13150  13B5  3000               	movlw	0
 13151  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13152  13B7  3000               	movlw	0
 13153  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13154  13B9  31A1  2167  3193   	fcall	___ftge
 13155  13BC  1803               	btfsc	3,0
 13156  13BD  2BC0               	goto	u8730
 13157  13BE  3001               	movlw	1
 13158  13BF  2BC1               	goto	u8740
 13159  13C0                     u8730:	
 13160  13C0  3000               	movlw	0
 13161  13C1                     u8740:	
 13162  13C1  0022               	movlb	2	; select bank2
 13163  13C2  00CB               	movwf	??_exp^(0+256)
 13164  13C3  084B               	movf	??_exp^(0+256),w
 13165  13C4  00D4               	movwf	exp@sign^(0+256)
 13166  13C5  0854               	movf	exp@sign^(0+256),w
 13167  13C6  1903               	btfsc	3,2
 13168  13C7  2BE2               	goto	l8264
 13169  13C8  0848               	movf	exp@x^(0+256),w
 13170  13C9  0021               	movlb	1	; select bank1
 13171  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 13172  13CB  0022               	movlb	2	; select bank2
 13173  13CC  0849               	movf	(exp@x+1)^(0+256),w
 13174  13CD  0021               	movlb	1	; select bank1
 13175  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13176  13CF  0022               	movlb	2	; select bank2
 13177  13D0  084A               	movf	(exp@x+2)^(0+256),w
 13178  13D1  0021               	movlb	1	; select bank1
 13179  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13180  13D3  31AD  259D  3193   	fcall	___ftneg
 13181  13D6  0021               	movlb	1	; select bank1
 13182  13D7  083E               	movf	?___ftneg^(0+128),w
 13183  13D8  0022               	movlb	2	; select bank2
 13184  13D9  00C8               	movwf	exp@x^(0+256)
 13185  13DA  0021               	movlb	1	; select bank1
 13186  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 13187  13DC  0022               	movlb	2	; select bank2
 13188  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 13189  13DE  0021               	movlb	1	; select bank1
 13190  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 13191  13E0  0022               	movlb	2	; select bank2
 13192  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 13193  13E2                     l8264:	
 13194  13E2  30AA               	movlw	170
 13195  13E3  0021               	movlb	1	; select bank1
 13196  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 13197  13E5  30B8               	movlw	184
 13198  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13199  13E7  303F               	movlw	63
 13200  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13201  13E9  0022               	movlb	2	; select bank2
 13202  13EA  0848               	movf	exp@x^(0+256),w
 13203  13EB  0021               	movlb	1	; select bank1
 13204  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 13205  13ED  0022               	movlb	2	; select bank2
 13206  13EE  0849               	movf	(exp@x+1)^(0+256),w
 13207  13EF  0021               	movlb	1	; select bank1
 13208  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13209  13F1  0022               	movlb	2	; select bank2
 13210  13F2  084A               	movf	(exp@x+2)^(0+256),w
 13211  13F3  0021               	movlb	1	; select bank1
 13212  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13213  13F5  319E  2691  3193   	fcall	___ftmul
 13214  13F8  0021               	movlb	1	; select bank1
 13215  13F9  082E               	movf	?___ftmul^(0+128),w
 13216  13FA  0022               	movlb	2	; select bank2
 13217  13FB  00C8               	movwf	exp@x^(0+256)
 13218  13FC  0021               	movlb	1	; select bank1
 13219  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 13220  13FE  0022               	movlb	2	; select bank2
 13221  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 13222  1400  0021               	movlb	1	; select bank1
 13223  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 13224  1402  0022               	movlb	2	; select bank2
 13225  1403  00CA               	movwf	(exp@x+2)^(0+256)
 13226  1404  0848               	movf	exp@x^(0+256),w
 13227  1405  00B6               	movwf	floor@x^(0+256)
 13228  1406  0849               	movf	(exp@x+1)^(0+256),w
 13229  1407  00B7               	movwf	(floor@x+1)^(0+256)
 13230  1408  084A               	movf	(exp@x+2)^(0+256),w
 13231  1409  00B8               	movwf	(floor@x+2)^(0+256)
 13232  140A  319C  2496  3193   	fcall	_floor
 13233  140D  0022               	movlb	2	; select bank2
 13234  140E  0836               	movf	?_floor^(0+256),w
 13235  140F  00CC               	movwf	_exp$2853^(0+256)
 13236  1410  0837               	movf	(?_floor+1)^(0+256),w
 13237  1411  00CD               	movwf	(_exp$2853+1)^(0+256)
 13238  1412  0838               	movf	(?_floor+2)^(0+256),w
 13239  1413  00CE               	movwf	(_exp$2853+2)^(0+256)
 13240  1414  084C               	movf	_exp$2853^(0+256),w
 13241  1415  00A0               	movwf	___fttol@f1^(0+256)
 13242  1416  084D               	movf	(_exp$2853+1)^(0+256),w
 13243  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13244  1418  084E               	movf	(_exp$2853+2)^(0+256),w
 13245  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13246  141A  3199  21D0  3193   	fcall	___fttol
 13247  141D  0022               	movlb	2	; select bank2
 13248  141E  0821               	movf	(?___fttol^(0+256)+1),w
 13249  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 13250  1420  0820               	movf	?___fttol^(0+256),w
 13251  1421  00D2               	movwf	exp@exponent^(0+256)
 13252  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 13253  1423  0021               	movlb	1	; select bank1
 13254  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13255  1425  0022               	movlb	2	; select bank2
 13256  1426  0852               	movf	exp@exponent^(0+256),w
 13257  1427  0021               	movlb	1	; select bank1
 13258  1428  00A8               	movwf	___awtoft@c^(0+128)
 13259  1429  31A0  2000  3193   	fcall	___awtoft
 13260  142C  0021               	movlb	1	; select bank1
 13261  142D  0828               	movf	?___awtoft^(0+128),w
 13262  142E  0022               	movlb	2	; select bank2
 13263  142F  00BF               	movwf	___ftsub@f2^(0+256)
 13264  1430  0021               	movlb	1	; select bank1
 13265  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 13266  1432  0022               	movlb	2	; select bank2
 13267  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 13268  1434  0021               	movlb	1	; select bank1
 13269  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 13270  1436  0022               	movlb	2	; select bank2
 13271  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 13272  1438  0848               	movf	exp@x^(0+256),w
 13273  1439  00C2               	movwf	___ftsub@f1^(0+256)
 13274  143A  0849               	movf	(exp@x+1)^(0+256),w
 13275  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 13276  143C  084A               	movf	(exp@x+2)^(0+256),w
 13277  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 13278  143E  31AF  2772  3193   	fcall	___ftsub
 13279  1441  0022               	movlb	2	; select bank2
 13280  1442  083F               	movf	?___ftsub^(0+256),w
 13281  1443  00C8               	movwf	exp@x^(0+256)
 13282  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 13283  1445  00C9               	movwf	(exp@x+1)^(0+256)
 13284  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 13285  1447  00CA               	movwf	(exp@x+2)^(0+256)
 13286  1448  0848               	movf	exp@x^(0+256),w
 13287  1449  00B4               	movwf	eval_poly@x^(0+256)
 13288  144A  0849               	movf	(exp@x+1)^(0+256),w
 13289  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13290  144C  084A               	movf	(exp@x+2)^(0+256),w
 13291  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13292  144E  3000               	movlw	low (exp@coeff| (0+32768))
 13293  144F  00B7               	movwf	eval_poly@d^(0+256)
 13294  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 13295  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13296  1452  3009               	movlw	9
 13297  1453  00B9               	movwf	eval_poly@n^(0+256)
 13298  1454  3000               	movlw	0
 13299  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13300  1456  31A6  2697  3193   	fcall	_eval_poly
 13301  1459  0022               	movlb	2	; select bank2
 13302  145A  0834               	movf	?_eval_poly^(0+256),w
 13303  145B  00BE               	movwf	ldexp@value^(0+256)
 13304  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 13305  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 13306  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 13307  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 13308  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 13309  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13310  1462  0852               	movf	exp@exponent^(0+256),w
 13311  1463  00C1               	movwf	ldexp@newexp^(0+256)
 13312  1464  319B  23FF  3193   	fcall	_ldexp
 13313  1467  0022               	movlb	2	; select bank2
 13314  1468  083E               	movf	?_ldexp^(0+256),w
 13315  1469  00C8               	movwf	exp@x^(0+256)
 13316  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 13317  146B  00C9               	movwf	(exp@x+1)^(0+256)
 13318  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 13319  146D  00CA               	movwf	(exp@x+2)^(0+256)
 13320  146E  0854               	movf	exp@sign^(0+256),w
 13321  146F  1903               	btfsc	3,2
 13322  1470  0008               	return
 13323  1471  30FF               	movlw	255
 13324  1472  00CF               	movwf	_exp$2609^(0+256)
 13325  1473  307F               	movlw	127
 13326  1474  00D0               	movwf	(_exp$2609+1)^(0+256)
 13327  1475  307F               	movlw	127
 13328  1476  00D1               	movwf	(_exp$2609+2)^(0+256)
 13329  1477  084A               	movf	(exp@x+2)^(0+256),w
 13330  1478  0651               	xorwf	(_exp$2609+2)^(0+256),w
 13331  1479  1D03               	skipz
 13332  147A  2C81               	goto	u8775
 13333  147B  0849               	movf	(exp@x+1)^(0+256),w
 13334  147C  0650               	xorwf	(_exp$2609+1)^(0+256),w
 13335  147D  1D03               	skipz
 13336  147E  2C81               	goto	u8775
 13337  147F  0848               	movf	exp@x^(0+256),w
 13338  1480  064F               	xorwf	_exp$2609^(0+256),w
 13339  1481                     u8775:	
 13340  1481  1D03               	skipz
 13341  1482  2C8A               	goto	l8286
 13342  1483  3000               	movlw	0
 13343  1484  00C8               	movwf	?_exp^(0+256)
 13344  1485  3000               	movlw	0
 13345  1486  00C9               	movwf	(?_exp+1)^(0+256)
 13346  1487  3000               	movlw	0
 13347  1488  00CA               	movwf	(?_exp+2)^(0+256)
 13348  1489  0008               	return
 13349  148A                     l8286:	
 13350  148A  0848               	movf	exp@x^(0+256),w
 13351  148B  0021               	movlb	1	; select bank1
 13352  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 13353  148D  0022               	movlb	2	; select bank2
 13354  148E  0849               	movf	(exp@x+1)^(0+256),w
 13355  148F  0021               	movlb	1	; select bank1
 13356  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13357  1491  0022               	movlb	2	; select bank2
 13358  1492  084A               	movf	(exp@x+2)^(0+256),w
 13359  1493  0021               	movlb	1	; select bank1
 13360  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13361  1495  3000               	movlw	0
 13362  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 13363  1497  3080               	movlw	128
 13364  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13365  1499  303F               	movlw	63
 13366  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13367  149B  319D  253D         	fcall	___ftdiv
 13368  149D  0021               	movlb	1	; select bank1
 13369  149E  084E               	movf	?___ftdiv^(0+128),w
 13370  149F  0022               	movlb	2	; select bank2
 13371  14A0  00C8               	movwf	?_exp^(0+256)
 13372  14A1  0021               	movlb	1	; select bank1
 13373  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 13374  14A3  0022               	movlb	2	; select bank2
 13375  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 13376  14A5  0021               	movlb	1	; select bank1
 13377  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 13378  14A7  0022               	movlb	2	; select bank2
 13379  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 13380  14A9  0008               	return
 13381  14AA                     __end_of_exp:	
 13382                           
 13383                           	psect	text31
 13384  1BFF                     __ptext31:	
 13385 ;; *************** function _ldexp *****************
 13386 ;; Defined at:
 13387 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13388 ;; Parameters:    Size  Location     Type
 13389 ;;  value           3   30[BANK2 ] unsigned char 
 13390 ;;  newexp          2   33[BANK2 ] int 
 13391 ;; Auto vars:     Size  Location     Type
 13392 ;;		None
 13393 ;; Return value:  Size  Location     Type
 13394 ;;                  3   30[BANK2 ] int 
 13395 ;; Registers used:
 13396 ;;		wreg, status,2, status,0, pclath, cstack
 13397 ;; Tracked objects:
 13398 ;;		On entry : 0/0
 13399 ;;		On exit  : 0/0
 13400 ;;		Unchanged: 0/0
 13401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13402 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13403 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13404 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13405 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13406 ;;Total ram usage:       10 bytes
 13407 ;; Hardware stack levels used:    1
 13408 ;; Hardware stack levels required when called:    4
 13409 ;; This function calls:
 13410 ;;		___ftge
 13411 ;;		___ftneg
 13412 ;; This function is called by:
 13413 ;;		_exp
 13414 ;; This function uses a non-reentrant model
 13415 ;;
 13416                           
 13417                           
 13418                           ;psect for function _ldexp
 13419  1BFF                     _ldexp:	
 13420                           
 13421                           ;incstack = 0
 13422                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13423  1BFF  0022               	movlb	2	; select bank2
 13424  1C00  0840               	movf	(ldexp@value+2)^(0+256),w
 13425  1C01  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13426  1C02  043E               	iorwf	ldexp@value^(0+256),w
 13427  1C03  1D03               	skipz
 13428  1C04  2C0C               	goto	l8090
 13429  1C05  3000               	movlw	0
 13430  1C06  00BE               	movwf	?_ldexp^(0+256)
 13431  1C07  3000               	movlw	0
 13432  1C08  00BF               	movwf	(?_ldexp+1)^(0+256)
 13433  1C09  3000               	movlw	0
 13434  1C0A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13435  1C0B  0008               	return
 13436  1C0C                     l8090:	
 13437  1C0C  0840               	movf	(ldexp@value^(0+256)+2),w
 13438  1C0D  397F               	andlw	127
 13439  1C0E  00C3               	movwf	??_ldexp^(0+256)
 13440  1C0F  01C4               	clrf	(??_ldexp^(0+256)+1)
 13441  1C10  35C3               	lslf	??_ldexp^(0+256),f
 13442  1C11  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13443  1C12  0843               	movf	??_ldexp^(0+256),w
 13444  1C13  07C1               	addwf	ldexp@newexp^(0+256),f
 13445  1C14  0844               	movf	(??_ldexp+1)^(0+256),w
 13446  1C15  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13447  1C16  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13448  1C17  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13449  1C18  3901               	andlw	1
 13450  1C19  00C3               	movwf	??_ldexp^(0+256)
 13451  1C1A  01C4               	clrf	(??_ldexp^(0+256)+1)
 13452  1C1B  0843               	movf	??_ldexp^(0+256),w
 13453  1C1C  07C1               	addwf	ldexp@newexp^(0+256),f
 13454  1C1D  0844               	movf	(??_ldexp+1)^(0+256),w
 13455  1C1E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13456  1C1F  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13457  1C20  2C2E               	goto	l8100
 13458  1C21  3022               	movlw	34
 13459  1C22  0024               	movlb	4	; select bank4
 13460  1C23  00CD               	movwf	_errno^(0+512)
 13461  1C24  3000               	movlw	0
 13462  1C25  00CE               	movwf	(_errno^(0+512)+1)
 13463  1C26  3000               	movlw	0
 13464  1C27  0022               	movlb	2	; select bank2
 13465  1C28  00BE               	movwf	?_ldexp^(0+256)
 13466  1C29  3000               	movlw	0
 13467  1C2A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13468  1C2B  3000               	movlw	0
 13469  1C2C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13470  1C2D  0008               	return
 13471  1C2E                     l8100:	
 13472  1C2E  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13473  1C2F  3A80               	xorlw	128
 13474  1C30  00C3               	movwf	??_ldexp^(0+256)
 13475  1C31  3081               	movlw	129
 13476  1C32  0243               	subwf	??_ldexp^(0+256),w
 13477  1C33  1D03               	skipz
 13478  1C34  2C37               	goto	u8605
 13479  1C35  3000               	movlw	0
 13480  1C36  0241               	subwf	ldexp@newexp^(0+256),w
 13481  1C37                     u8605:	
 13482  1C37  1C03               	skipc
 13483  1C38  2C7E               	goto	l8124
 13484  1C39  3022               	movlw	34
 13485  1C3A  0024               	movlb	4	; select bank4
 13486  1C3B  00CD               	movwf	_errno^(0+512)
 13487  1C3C  3000               	movlw	0
 13488  1C3D  00CE               	movwf	(_errno^(0+512)+1)
 13489  1C3E  0022               	movlb	2	; select bank2
 13490  1C3F  083E               	movf	ldexp@value^(0+256),w
 13491  1C40  0021               	movlb	1	; select bank1
 13492  1C41  00A0               	movwf	___ftge@ff1^(0+128)
 13493  1C42  0022               	movlb	2	; select bank2
 13494  1C43  083F               	movf	(ldexp@value+1)^(0+256),w
 13495  1C44  0021               	movlb	1	; select bank1
 13496  1C45  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13497  1C46  0022               	movlb	2	; select bank2
 13498  1C47  0840               	movf	(ldexp@value+2)^(0+256),w
 13499  1C48  0021               	movlb	1	; select bank1
 13500  1C49  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13501  1C4A  3000               	movlw	0
 13502  1C4B  00A3               	movwf	___ftge@ff2^(0+128)
 13503  1C4C  3000               	movlw	0
 13504  1C4D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13505  1C4E  3000               	movlw	0
 13506  1C4F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13507  1C50  31A1  2167  319B   	fcall	___ftge
 13508  1C53  1803               	btfsc	3,0
 13509  1C54  2C76               	goto	l8120
 13510  1C55  30FF               	movlw	255
 13511  1C56  0022               	movlb	2	; select bank2
 13512  1C57  00C5               	movwf	_ldexp$2641^(0+256)
 13513  1C58  307F               	movlw	127
 13514  1C59  00C6               	movwf	(_ldexp$2641+1)^(0+256)
 13515  1C5A  307F               	movlw	127
 13516  1C5B  00C7               	movwf	(_ldexp$2641+2)^(0+256)
 13517  1C5C  0845               	movf	_ldexp$2641^(0+256),w
 13518  1C5D  0021               	movlb	1	; select bank1
 13519  1C5E  00BE               	movwf	___ftneg@f1^(0+128)
 13520  1C5F  0022               	movlb	2	; select bank2
 13521  1C60  0846               	movf	(_ldexp$2641+1)^(0+256),w
 13522  1C61  0021               	movlb	1	; select bank1
 13523  1C62  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13524  1C63  0022               	movlb	2	; select bank2
 13525  1C64  0847               	movf	(_ldexp$2641+2)^(0+256),w
 13526  1C65  0021               	movlb	1	; select bank1
 13527  1C66  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13528  1C67  31AD  259D         	fcall	___ftneg
 13529  1C69  0021               	movlb	1	; select bank1
 13530  1C6A  083E               	movf	?___ftneg^(0+128),w
 13531  1C6B  0022               	movlb	2	; select bank2
 13532  1C6C  00BE               	movwf	?_ldexp^(0+256)
 13533  1C6D  0021               	movlb	1	; select bank1
 13534  1C6E  083F               	movf	(?___ftneg+1)^(0+128),w
 13535  1C6F  0022               	movlb	2	; select bank2
 13536  1C70  00BF               	movwf	(?_ldexp+1)^(0+256)
 13537  1C71  0021               	movlb	1	; select bank1
 13538  1C72  0840               	movf	(?___ftneg+2)^(0+128),w
 13539  1C73  0022               	movlb	2	; select bank2
 13540  1C74  00C0               	movwf	(?_ldexp+2)^(0+256)
 13541  1C75  0008               	return
 13542  1C76                     l8120:	
 13543  1C76  30FF               	movlw	255
 13544  1C77  0022               	movlb	2	; select bank2
 13545  1C78  00BE               	movwf	?_ldexp^(0+256)
 13546  1C79  307F               	movlw	127
 13547  1C7A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13548  1C7B  307F               	movlw	127
 13549  1C7C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13550  1C7D  0008               	return
 13551  1C7E                     l8124:	
 13552  1C7E  0022               	movlb	2	; select bank2
 13553  1C7F  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13554  1C80  00C4               	movwf	(??_ldexp^(0+256)+1)
 13555  1C81  0841               	movf	ldexp@newexp^(0+256),w
 13556  1C82  00C3               	movwf	??_ldexp^(0+256)
 13557  1C83  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13558  1C84  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13559  1C85  0CC3               	rrf	??_ldexp^(0+256),f
 13560  1C86  0840               	movf	(ldexp@value^(0+256)+2),w
 13561  1C87  0643               	xorwf	??_ldexp^(0+256),w
 13562  1C88  3980               	andlw	-128
 13563  1C89  0643               	xorwf	??_ldexp^(0+256),w
 13564  1C8A  00C0               	movwf	(ldexp@value^(0+256)+2)
 13565  1C8B  0841               	movf	ldexp@newexp^(0+256),w
 13566  1C8C  3901               	andlw	1
 13567  1C8D  00C3               	movwf	??_ldexp^(0+256)
 13568  1C8E  0CC3               	rrf	??_ldexp^(0+256),f
 13569  1C8F  0CC3               	rrf	??_ldexp^(0+256),f
 13570  1C90  083F               	movf	(ldexp@value^(0+256)+1),w
 13571  1C91  0643               	xorwf	??_ldexp^(0+256),w
 13572  1C92  397F               	andlw	-129
 13573  1C93  0643               	xorwf	??_ldexp^(0+256),w
 13574  1C94  00BF               	movwf	(ldexp@value^(0+256)+1)
 13575  1C95  0008               	return
 13576  1C96                     __end_of_ldexp:	
 13577                           
 13578                           	psect	text32
 13579  2F1C                     __ptext32:	
 13580 ;; *************** function ___lltoft *****************
 13581 ;; Defined at:
 13582 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;  c               4    8[BANK1 ] unsigned long 
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;  exp             1   13[BANK1 ] unsigned char 
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  3    8[BANK1 ] float 
 13589 ;; Registers used:
 13590 ;;		wreg, status,2, status,0, pclath, cstack
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13596 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13597 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13598 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13599 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13600 ;;Total ram usage:        6 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    4
 13603 ;; This function calls:
 13604 ;;		___ftpack
 13605 ;; This function is called by:
 13606 ;;		_pow
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           
 13611                           ;psect for function ___lltoft
 13612  2F1C                     ___lltoft:	
 13613                           
 13614                           ;incstack = 0
 13615                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13616  2F1C  308E               	movlw	142
 13617  2F1D  0021               	movlb	1	; select bank1
 13618  2F1E  00AC               	movwf	??___lltoft^(0+128)
 13619  2F1F  082C               	movf	??___lltoft^(0+128),w
 13620  2F20  00AD               	movwf	___lltoft@exp^(0+128)
 13621  2F21                     l8208:	
 13622  2F21  30FF               	movlw	255
 13623  2F22  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13624  2F23  1903               	btfsc	3,2
 13625  2F24  2F31               	goto	l8210
 13626  2F25  3001               	movlw	1
 13627  2F26                     u8665:	
 13628  2F26  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13629  2F27  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13630  2F28  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13631  2F29  0CA8               	rrf	___lltoft@c^(0+128),f
 13632  2F2A  0B89               	decfsz	9,f
 13633  2F2B  2F26               	goto	u8665
 13634  2F2C  3001               	movlw	1
 13635  2F2D  00AC               	movwf	??___lltoft^(0+128)
 13636  2F2E  082C               	movf	??___lltoft^(0+128),w
 13637  2F2F  07AD               	addwf	___lltoft@exp^(0+128),f
 13638  2F30  2F21               	goto	l8208
 13639  2F31                     l8210:	
 13640  2F31  0828               	movf	___lltoft@c^(0+128),w
 13641  2F32  00A0               	movwf	___ftpack@arg^(0+128)
 13642  2F33  0829               	movf	(___lltoft@c+1)^(0+128),w
 13643  2F34  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13644  2F35  082A               	movf	(___lltoft@c+2)^(0+128),w
 13645  2F36  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13646  2F37  082D               	movf	___lltoft@exp^(0+128),w
 13647  2F38  00AC               	movwf	??___lltoft^(0+128)
 13648  2F39  082C               	movf	??___lltoft^(0+128),w
 13649  2F3A  00A3               	movwf	___ftpack@exp^(0+128)
 13650  2F3B  01A4               	clrf	___ftpack@sign^(0+128)
 13651  2F3C  31A6  2632         	fcall	___ftpack
 13652  2F3E  0021               	movlb	1	; select bank1
 13653  2F3F  0820               	movf	?___ftpack^(0+128),w
 13654  2F40  00A8               	movwf	?___lltoft^(0+128)
 13655  2F41  0821               	movf	(?___ftpack+1)^(0+128),w
 13656  2F42  00A9               	movwf	(?___lltoft+1)^(0+128)
 13657  2F43  0822               	movf	(?___ftpack+2)^(0+128),w
 13658  2F44  00AA               	movwf	(?___lltoft+2)^(0+128)
 13659  2F45  0008               	return
 13660  2F46                     __end_of___lltoft:	
 13661                           
 13662                           	psect	text33
 13663  2445                     __ptext33:	
 13664 ;; *************** function _read_top_tactile *****************
 13665 ;; Defined at:
 13666 ;;		line 50 in file "tactiles.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;		None
 13669 ;; Auto vars:     Size  Location     Type
 13670 ;;		None
 13671 ;; Return value:  Size  Location     Type
 13672 ;;                  1    wreg      void 
 13673 ;; Registers used:
 13674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13675 ;; Tracked objects:
 13676 ;;		On entry : 0/0
 13677 ;;		On exit  : 0/0
 13678 ;;		Unchanged: 0/0
 13679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13682 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13683 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13684 ;;Total ram usage:        1 bytes
 13685 ;; Hardware stack levels used:    1
 13686 ;; Hardware stack levels required when called:    5
 13687 ;; This function calls:
 13688 ;;		_set_leds_top
 13689 ;;		_wait_ms
 13690 ;; This function is called by:
 13691 ;;		_main
 13692 ;; This function uses a non-reentrant model
 13693 ;;
 13694                           
 13695                           
 13696                           ;psect for function _read_top_tactile
 13697  2445                     _read_top_tactile:	
 13698                           
 13699                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13700                           
 13701                           ;incstack = 0
 13702                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13703  2445  0020               	movlb	0	; select bank0
 13704  2446  1A8F               	btfsc	15,5	;volatile
 13705  2447  2C4F               	goto	l9070
 13706                           
 13707                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13708  2448  0022               	movlb	2	; select bank2
 13709  2449  086B               	movf	_topTactile_pressed^(0+256),w
 13710  244A  1903               	btfsc	3,2
 13711  244B  2C5A               	goto	l967
 13712                           
 13713                           ;tactiles.c: 62: topTactile_pressed--;
 13714  244C  3001               	movlw	1
 13715  244D  02EB               	subwf	_topTactile_pressed^(0+256),f
 13716                           
 13717                           ;tactiles.c: 63: }
 13718                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13719  244E  2C5A               	goto	l967
 13720  244F                     l9070:	
 13721  244F  3019               	movlw	25
 13722  2450  0022               	movlb	2	; select bank2
 13723  2451  026B               	subwf	_topTactile_pressed^(0+256),w
 13724  2452  1803               	skipnc
 13725  2453  2C5A               	goto	l967
 13726                           
 13727                           ;tactiles.c: 65: topTactile_pressed++;
 13728  2454  3001               	movlw	1
 13729  2455  0021               	movlb	1	; select bank1
 13730  2456  00B2               	movwf	??_read_top_tactile^(0+128)
 13731  2457  0832               	movf	??_read_top_tactile^(0+128),w
 13732  2458  0022               	movlb	2	; select bank2
 13733  2459  07EB               	addwf	_topTactile_pressed^(0+256),f
 13734  245A                     l967:	
 13735                           
 13736                           ;tactiles.c: 66: }
 13737                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13738  245A  086B               	movf	_topTactile_pressed^(0+256),w
 13739  245B  1D03               	btfss	3,2
 13740  245C  0008               	return
 13741                           
 13742                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13743  245D  0020               	movlb	0	; select bank0
 13744  245E  085D               	movf	_top_push_state,w
 13745  245F  3E01               	addlw	1
 13746  2460  00DD               	movwf	_top_push_state
 13747  2461  3000               	movlw	0
 13748  2462  3D5E               	addwfc	_top_push_state+1,w
 13749  2463  00DE               	movwf	_top_push_state+1
 13750                           
 13751                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13752  2464  085E               	movf	_top_push_state+1,w
 13753  2465  3A80               	xorlw	128
 13754  2466  0021               	movlb	1	; select bank1
 13755  2467  00B2               	movwf	??_read_top_tactile^(0+128)
 13756  2468  3080               	movlw	128
 13757  2469  0232               	subwf	??_read_top_tactile^(0+128),w
 13758  246A  1D03               	skipz
 13759  246B  2C6F               	goto	u10125
 13760  246C  3007               	movlw	7
 13761  246D  0020               	movlb	0	; select bank0
 13762  246E  025D               	subwf	_top_push_state,w
 13763  246F                     u10125:	
 13764  246F  1C03               	skipc
 13765  2470  2C76               	goto	l9080
 13766                           
 13767                           ;tactiles.c: 75: top_push_state = 1;
 13768  2471  3001               	movlw	1
 13769  2472  0020               	movlb	0	; select bank0
 13770  2473  00DD               	movwf	_top_push_state
 13771  2474  3000               	movlw	0
 13772  2475  00DE               	movwf	_top_push_state+1
 13773  2476                     l9080:	
 13774                           
 13775                           ;tactiles.c: 76: }
 13776                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13777  2476  0020               	movlb	0	; select bank0
 13778  2477  085E               	movf	_top_push_state+1,w
 13779  2478  0021               	movlb	1	; select bank1
 13780  2479  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13781  247A  0020               	movlb	0	; select bank0
 13782  247B  085D               	movf	_top_push_state,w
 13783  247C  0021               	movlb	1	; select bank1
 13784  247D  00A0               	movwf	set_leds_top@x^(0+128)
 13785  247E  3001               	movlw	1
 13786  247F  00A2               	movwf	set_leds_top@ledState^(0+128)
 13787  2480  3000               	movlw	0
 13788  2481  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13789  2482  31A5  2585  31A4   	fcall	_set_leds_top
 13790                           
 13791                           ;tactiles.c: 78: mod_time_changed = 1;
 13792  2485  0020               	movlb	0	; select bank0
 13793  2486  01E2               	clrf	_mod_time_changed
 13794  2487  0AE2               	incf	_mod_time_changed,f
 13795  2488                     l971:	
 13796                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13797                           
 13798  2488  1E8F               	btfss	15,5	;volatile
 13799  2489  2C88               	goto	l971
 13800                           
 13801                           ;tactiles.c: 82: }
 13802                           ;tactiles.c: 83: wait_ms(20);
 13803  248A  3014               	movlw	20
 13804  248B  0021               	movlb	1	; select bank1
 13805  248C  00AC               	movwf	wait_ms@timeSec^(0+128)
 13806  248D  3000               	movlw	0
 13807  248E  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13808  248F  31A0  2052         	fcall	_wait_ms
 13809  2491  0008               	return
 13810  2492                     __end_of_read_top_tactile:	
 13811                           
 13812                           	psect	text34
 13813  23B0                     __ptext34:	
 13814 ;; *************** function _read_bottom_tactile *****************
 13815 ;; Defined at:
 13816 ;;		line 18 in file "tactiles.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;		None
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;		None
 13821 ;; Return value:  Size  Location     Type
 13822 ;;                  1    wreg      void 
 13823 ;; Registers used:
 13824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13825 ;; Tracked objects:
 13826 ;;		On entry : 0/0
 13827 ;;		On exit  : 0/0
 13828 ;;		Unchanged: 0/0
 13829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13832 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13833 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13834 ;;Total ram usage:        1 bytes
 13835 ;; Hardware stack levels used:    1
 13836 ;; Hardware stack levels required when called:    5
 13837 ;; This function calls:
 13838 ;;		_set_leds_bottom
 13839 ;;		_wait_ms
 13840 ;; This function is called by:
 13841 ;;		_main
 13842 ;; This function uses a non-reentrant model
 13843 ;;
 13844                           
 13845                           
 13846                           ;psect for function _read_bottom_tactile
 13847  23B0                     _read_bottom_tactile:	
 13848                           
 13849                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13850                           
 13851                           ;incstack = 0
 13852                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13853  23B0  0020               	movlb	0	; select bank0
 13854  23B1  1B0F               	btfsc	15,6	;volatile
 13855  23B2  2BBA               	goto	l9048
 13856                           
 13857                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13858  23B3  0022               	movlb	2	; select bank2
 13859  23B4  086A               	movf	_bottomTactile_pressed^(0+256),w
 13860  23B5  1903               	btfsc	3,2
 13861  23B6  2BC5               	goto	l955
 13862                           
 13863                           ;tactiles.c: 29: bottomTactile_pressed--;
 13864  23B7  3001               	movlw	1
 13865  23B8  02EA               	subwf	_bottomTactile_pressed^(0+256),f
 13866                           
 13867                           ;tactiles.c: 30: }
 13868                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13869  23B9  2BC5               	goto	l955
 13870  23BA                     l9048:	
 13871  23BA  3019               	movlw	25
 13872  23BB  0022               	movlb	2	; select bank2
 13873  23BC  026A               	subwf	_bottomTactile_pressed^(0+256),w
 13874  23BD  1803               	skipnc
 13875  23BE  2BC5               	goto	l955
 13876                           
 13877                           ;tactiles.c: 32: bottomTactile_pressed++;
 13878  23BF  3001               	movlw	1
 13879  23C0  0021               	movlb	1	; select bank1
 13880  23C1  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13881  23C2  0832               	movf	??_read_bottom_tactile^(0+128),w
 13882  23C3  0022               	movlb	2	; select bank2
 13883  23C4  07EA               	addwf	_bottomTactile_pressed^(0+256),f
 13884  23C5                     l955:	
 13885                           
 13886                           ;tactiles.c: 33: }
 13887                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13888  23C5  086A               	movf	_bottomTactile_pressed^(0+256),w
 13889  23C6  1D03               	btfss	3,2
 13890  23C7  0008               	return
 13891                           
 13892                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13893  23C8  0020               	movlb	0	; select bank0
 13894  23C9  0859               	movf	_bottom_push_state,w
 13895  23CA  3E01               	addlw	1
 13896  23CB  00D9               	movwf	_bottom_push_state
 13897  23CC  3000               	movlw	0
 13898  23CD  3D5A               	addwfc	_bottom_push_state+1,w
 13899  23CE  00DA               	movwf	_bottom_push_state+1
 13900                           
 13901                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13902  23CF  085A               	movf	_bottom_push_state+1,w
 13903  23D0  3A80               	xorlw	128
 13904  23D1  0021               	movlb	1	; select bank1
 13905  23D2  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13906  23D3  3080               	movlw	128
 13907  23D4  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13908  23D5  1D03               	skipz
 13909  23D6  2BDA               	goto	u10065
 13910  23D7  3006               	movlw	6
 13911  23D8  0020               	movlb	0	; select bank0
 13912  23D9  0259               	subwf	_bottom_push_state,w
 13913  23DA                     u10065:	
 13914  23DA  1C03               	skipc
 13915  23DB  2BE1               	goto	l9058
 13916                           
 13917                           ;tactiles.c: 39: bottom_push_state = 1;
 13918  23DC  3001               	movlw	1
 13919  23DD  0020               	movlb	0	; select bank0
 13920  23DE  00D9               	movwf	_bottom_push_state
 13921  23DF  3000               	movlw	0
 13922  23E0  00DA               	movwf	_bottom_push_state+1
 13923  23E1                     l9058:	
 13924                           
 13925                           ;tactiles.c: 40: }
 13926                           ;tactiles.c: 41: modulation_changed = 1;
 13927  23E1  0023               	movlb	3	; select bank3
 13928  23E2  01C6               	clrf	_modulation_changed^(0+384)
 13929  23E3  0AC6               	incf	_modulation_changed^(0+384),f
 13930                           
 13931                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13932  23E4  0020               	movlb	0	; select bank0
 13933  23E5  085A               	movf	_bottom_push_state+1,w
 13934  23E6  0021               	movlb	1	; select bank1
 13935  23E7  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13936  23E8  0020               	movlb	0	; select bank0
 13937  23E9  0859               	movf	_bottom_push_state,w
 13938  23EA  0021               	movlb	1	; select bank1
 13939  23EB  00A0               	movwf	set_leds_bottom@x^(0+128)
 13940  23EC  31A1  212C  31A3   	fcall	_set_leds_bottom
 13941  23EF                     l959:	
 13942                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13943                           
 13944  23EF  0020               	movlb	0	; select bank0
 13945  23F0  1F0F               	btfss	15,6	;volatile
 13946  23F1  2BEF               	goto	l959
 13947                           
 13948                           ;tactiles.c: 45: }
 13949                           ;tactiles.c: 46: wait_ms(20);
 13950  23F2  3014               	movlw	20
 13951  23F3  0021               	movlb	1	; select bank1
 13952  23F4  00AC               	movwf	wait_ms@timeSec^(0+128)
 13953  23F5  3000               	movlw	0
 13954  23F6  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13955  23F7  31A0  2052         	fcall	_wait_ms
 13956  23F9  0008               	return
 13957  23FA                     __end_of_read_bottom_tactile:	
 13958                           
 13959                           	psect	text35
 13960  1A57                     __ptext35:	
 13961 ;; *************** function _map *****************
 13962 ;; Defined at:
 13963 ;;		line 177 in file "user.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  x               3   62[BANK1 ] float 
 13966 ;;  in_min          3   65[BANK1 ] float 
 13967 ;;  in_max          3   68[BANK1 ] float 
 13968 ;;  out_min         3   71[BANK1 ] float 
 13969 ;;  out_max         3   74[BANK1 ] float 
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;		None
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  3   62[BANK1 ] float 
 13974 ;; Registers used:
 13975 ;;		wreg, status,2, status,0, pclath, cstack
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13981 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13982 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13984 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13985 ;;Total ram usage:       18 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; Hardware stack levels required when called:    5
 13988 ;; This function calls:
 13989 ;;		___ftadd
 13990 ;;		___ftdiv
 13991 ;;		___ftmul
 13992 ;;		___ftneg
 13993 ;; This function is called by:
 13994 ;;		_main
 13995 ;; This function uses a non-reentrant model
 13996 ;;
 13997                           
 13998                           
 13999                           ;psect for function _map
 14000  1A57                     _map:	
 14001                           
 14002                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14003                           
 14004                           ;incstack = 0
 14005                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14006  1A57  0021               	movlb	1	; select bank1
 14007  1A58  0864               	movf	map@in_max^(0+128),w
 14008  1A59  00C1               	movwf	___ftadd@f1^(0+128)
 14009  1A5A  0865               	movf	(map@in_max+1)^(0+128),w
 14010  1A5B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14011  1A5C  0866               	movf	(map@in_max+2)^(0+128),w
 14012  1A5D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14013  1A5E  0861               	movf	map@in_min^(0+128),w
 14014  1A5F  00BE               	movwf	___ftneg@f1^(0+128)
 14015  1A60  0862               	movf	(map@in_min+1)^(0+128),w
 14016  1A61  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14017  1A62  0863               	movf	(map@in_min+2)^(0+128),w
 14018  1A63  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14019  1A64  31AD  259D  319A   	fcall	___ftneg
 14020  1A67  0021               	movlb	1	; select bank1
 14021  1A68  083E               	movf	?___ftneg^(0+128),w
 14022  1A69  00C4               	movwf	___ftadd@f2^(0+128)
 14023  1A6A  083F               	movf	(?___ftneg+1)^(0+128),w
 14024  1A6B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14025  1A6C  0840               	movf	(?___ftneg+2)^(0+128),w
 14026  1A6D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14027  1A6E  3190  2020  319A   	fcall	___ftadd
 14028  1A71  0021               	movlb	1	; select bank1
 14029  1A72  0841               	movf	?___ftadd^(0+128),w
 14030  1A73  00CE               	movwf	___ftdiv@f2^(0+128)
 14031  1A74  0842               	movf	(?___ftadd+1)^(0+128),w
 14032  1A75  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14033  1A76  0843               	movf	(?___ftadd+2)^(0+128),w
 14034  1A77  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14035  1A78  086A               	movf	map@out_max^(0+128),w
 14036  1A79  00C1               	movwf	___ftadd@f1^(0+128)
 14037  1A7A  086B               	movf	(map@out_max+1)^(0+128),w
 14038  1A7B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14039  1A7C  086C               	movf	(map@out_max+2)^(0+128),w
 14040  1A7D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14041  1A7E  0867               	movf	map@out_min^(0+128),w
 14042  1A7F  00BE               	movwf	___ftneg@f1^(0+128)
 14043  1A80  0868               	movf	(map@out_min+1)^(0+128),w
 14044  1A81  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14045  1A82  0869               	movf	(map@out_min+2)^(0+128),w
 14046  1A83  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14047  1A84  31AD  259D  319A   	fcall	___ftneg
 14048  1A87  0021               	movlb	1	; select bank1
 14049  1A88  083E               	movf	?___ftneg^(0+128),w
 14050  1A89  00C4               	movwf	___ftadd@f2^(0+128)
 14051  1A8A  083F               	movf	(?___ftneg+1)^(0+128),w
 14052  1A8B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14053  1A8C  0840               	movf	(?___ftneg+2)^(0+128),w
 14054  1A8D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14055  1A8E  3190  2020  319A   	fcall	___ftadd
 14056  1A91  0021               	movlb	1	; select bank1
 14057  1A92  0841               	movf	?___ftadd^(0+128),w
 14058  1A93  00AE               	movwf	___ftmul@f1^(0+128)
 14059  1A94  0842               	movf	(?___ftadd+1)^(0+128),w
 14060  1A95  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14061  1A96  0843               	movf	(?___ftadd+2)^(0+128),w
 14062  1A97  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14063  1A98  085E               	movf	map@x^(0+128),w
 14064  1A99  00C1               	movwf	___ftadd@f1^(0+128)
 14065  1A9A  085F               	movf	(map@x+1)^(0+128),w
 14066  1A9B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14067  1A9C  0860               	movf	(map@x+2)^(0+128),w
 14068  1A9D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14069  1A9E  0861               	movf	map@in_min^(0+128),w
 14070  1A9F  00BE               	movwf	___ftneg@f1^(0+128)
 14071  1AA0  0862               	movf	(map@in_min+1)^(0+128),w
 14072  1AA1  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14073  1AA2  0863               	movf	(map@in_min+2)^(0+128),w
 14074  1AA3  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14075  1AA4  31AD  259D  319A   	fcall	___ftneg
 14076  1AA7  0021               	movlb	1	; select bank1
 14077  1AA8  083E               	movf	?___ftneg^(0+128),w
 14078  1AA9  00C4               	movwf	___ftadd@f2^(0+128)
 14079  1AAA  083F               	movf	(?___ftneg+1)^(0+128),w
 14080  1AAB  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14081  1AAC  0840               	movf	(?___ftneg+2)^(0+128),w
 14082  1AAD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14083  1AAE  3190  2020  319A   	fcall	___ftadd
 14084  1AB1  0021               	movlb	1	; select bank1
 14085  1AB2  0841               	movf	?___ftadd^(0+128),w
 14086  1AB3  00B1               	movwf	___ftmul@f2^(0+128)
 14087  1AB4  0842               	movf	(?___ftadd+1)^(0+128),w
 14088  1AB5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14089  1AB6  0843               	movf	(?___ftadd+2)^(0+128),w
 14090  1AB7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14091  1AB8  319E  2691  319A   	fcall	___ftmul
 14092  1ABB  0021               	movlb	1	; select bank1
 14093  1ABC  082E               	movf	?___ftmul^(0+128),w
 14094  1ABD  00D1               	movwf	___ftdiv@f1^(0+128)
 14095  1ABE  082F               	movf	(?___ftmul+1)^(0+128),w
 14096  1ABF  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14097  1AC0  0830               	movf	(?___ftmul+2)^(0+128),w
 14098  1AC1  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14099  1AC2  319D  253D  319A   	fcall	___ftdiv
 14100  1AC5  0021               	movlb	1	; select bank1
 14101  1AC6  084E               	movf	?___ftdiv^(0+128),w
 14102  1AC7  00ED               	movwf	_map$2835^(0+128)
 14103  1AC8  084F               	movf	(?___ftdiv+1)^(0+128),w
 14104  1AC9  00EE               	movwf	(_map$2835+1)^(0+128)
 14105  1ACA  0850               	movf	(?___ftdiv+2)^(0+128),w
 14106  1ACB  00EF               	movwf	(_map$2835+2)^(0+128)
 14107                           
 14108                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14109  1ACC  0867               	movf	map@out_min^(0+128),w
 14110  1ACD  00C1               	movwf	___ftadd@f1^(0+128)
 14111  1ACE  0868               	movf	(map@out_min+1)^(0+128),w
 14112  1ACF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14113  1AD0  0869               	movf	(map@out_min+2)^(0+128),w
 14114  1AD1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14115  1AD2  086D               	movf	_map$2835^(0+128),w
 14116  1AD3  00C4               	movwf	___ftadd@f2^(0+128)
 14117  1AD4  086E               	movf	(_map$2835+1)^(0+128),w
 14118  1AD5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14119  1AD6  086F               	movf	(_map$2835+2)^(0+128),w
 14120  1AD7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14121  1AD8  3190  2020         	fcall	___ftadd
 14122  1ADA  0021               	movlb	1	; select bank1
 14123  1ADB  0841               	movf	?___ftadd^(0+128),w
 14124  1ADC  00DE               	movwf	?_map^(0+128)
 14125  1ADD  0842               	movf	(?___ftadd+1)^(0+128),w
 14126  1ADE  00DF               	movwf	(?_map+1)^(0+128)
 14127  1ADF  0843               	movf	(?___ftadd+2)^(0+128),w
 14128  1AE0  00E0               	movwf	(?_map+2)^(0+128)
 14129  1AE1  0008               	return
 14130  1AE2                     __end_of_map:	
 14131                           
 14132                           	psect	text36
 14133  2DC8                     __ptext36:	
 14134 ;; *************** function _initSwitchBypass *****************
 14135 ;; Defined at:
 14136 ;;		line 29 in file "SwitchBypass.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;		None
 14139 ;; Auto vars:     Size  Location     Type
 14140 ;;  initState       2   26[BANK1 ] int 
 14141 ;; Return value:  Size  Location     Type
 14142 ;;                  1    wreg      void 
 14143 ;; Registers used:
 14144 ;;		wreg, status,2, status,0, pclath, cstack
 14145 ;; Tracked objects:
 14146 ;;		On entry : 0/0
 14147 ;;		On exit  : 0/0
 14148 ;;		Unchanged: 0/0
 14149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14151 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14153 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14154 ;;Total ram usage:        2 bytes
 14155 ;; Hardware stack levels used:    1
 14156 ;; Hardware stack levels required when called:    7
 14157 ;; This function calls:
 14158 ;;		_getSwitchBypassState
 14159 ;;		_setSwitchBypassState
 14160 ;; This function is called by:
 14161 ;;		_main
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           
 14166                           ;psect for function _initSwitchBypass
 14167  2DC8                     _initSwitchBypass:	
 14168                           
 14169                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14170                           
 14171                           ;incstack = 0
 14172                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14173  2DC8  3198  2000  31AD   	fcall	_getSwitchBypassState
 14174  2DCB  0021               	movlb	1	; select bank1
 14175  2DCC  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14176  2DCD  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14177  2DCE  0820               	movf	?_getSwitchBypassState^(0+128),w
 14178  2DCF  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14179                           
 14180                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14181  2DD0  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14182  2DD1  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14183  2DD2  083A               	movf	initSwitchBypass@initState^(0+128),w
 14184  2DD3  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14185  2DD4  31AE  265D         	fcall	_setSwitchBypassState
 14186  2DD6  0008               	return
 14187  2DD7                     __end_of_initSwitchBypass:	
 14188                           
 14189                           	psect	text37
 14190  2E5D                     __ptext37:	
 14191 ;; *************** function _setSwitchBypassState *****************
 14192 ;; Defined at:
 14193 ;;		line 140 in file "SwitchBypass.c"
 14194 ;; Parameters:    Size  Location     Type
 14195 ;;  f_state         2   22[BANK1 ] int 
 14196 ;; Auto vars:     Size  Location     Type
 14197 ;;		None
 14198 ;; Return value:  Size  Location     Type
 14199 ;;                  1    wreg      void 
 14200 ;; Registers used:
 14201 ;;		wreg, status,2, status,0, pclath, cstack
 14202 ;; Tracked objects:
 14203 ;;		On entry : 0/0
 14204 ;;		On exit  : 0/0
 14205 ;;		Unchanged: 0/0
 14206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14207 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14209 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14210 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14211 ;;Total ram usage:        4 bytes
 14212 ;; Hardware stack levels used:    1
 14213 ;; Hardware stack levels required when called:    6
 14214 ;; This function calls:
 14215 ;;		_setSwitchBypassRelays
 14216 ;; This function is called by:
 14217 ;;		_initSwitchBypass
 14218 ;;		_updateSwitchBypass
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           
 14223                           ;psect for function _setSwitchBypassState
 14224  2E5D                     _setSwitchBypassState:	
 14225                           
 14226                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14227                           
 14228                           ;incstack = 0
 14229                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14230  2E5D  0020               	movlb	0	; select bank0
 14231  2E5E  0865               	movf	_switchBypass_state,w
 14232  2E5F  0021               	movlb	1	; select bank1
 14233  2E60  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14234  2E61  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14235  2E62  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14236  2E63  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14237  2E64  1D03               	skipz
 14238  2E65  2E68               	goto	u8885
 14239  2E66  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14240  2E67  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14241  2E68                     u8885:	
 14242  2E68  1903               	btfsc	3,2
 14243  2E69  0008               	return
 14244                           
 14245                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14246  2E6A  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14247  2E6B  0022               	movlb	2	; select bank2
 14248  2E6C  1C03               	skipc
 14249  2E6D  110D               	bcf	13,2	;volatile
 14250  2E6E  1803               	skipnc
 14251  2E6F  150D               	bsf	13,2	;volatile
 14252                           
 14253                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14254  2E70  118D               	bcf	13,3	;volatile
 14255                           
 14256                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14257  2E71  0021               	movlb	1	; select bank1
 14258  2E72  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14259  2E73  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14260  2E74  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14261  2E75  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14262  2E76  31A0  2084         	fcall	_setSwitchBypassRelays
 14263  2E78  0008               	return
 14264  2E79                     __end_of_setSwitchBypassState:	
 14265                           
 14266                           	psect	text38
 14267  2084                     __ptext38:	
 14268 ;; *************** function _setSwitchBypassRelays *****************
 14269 ;; Defined at:
 14270 ;;		line 148 in file "SwitchBypass.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;  f_state         2   18[BANK1 ] int 
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;		None
 14275 ;; Return value:  Size  Location     Type
 14276 ;;                  1    wreg      void 
 14277 ;; Registers used:
 14278 ;;		wreg, status,2, status,0, pclath, cstack
 14279 ;; Tracked objects:
 14280 ;;		On entry : 0/0
 14281 ;;		On exit  : 0/0
 14282 ;;		Unchanged: 0/0
 14283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14284 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14286 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14287 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14288 ;;Total ram usage:        4 bytes
 14289 ;; Hardware stack levels used:    1
 14290 ;; Hardware stack levels required when called:    5
 14291 ;; This function calls:
 14292 ;;		_updateSwitchBypassState
 14293 ;;		_wait_ms
 14294 ;; This function is called by:
 14295 ;;		_updateSwitchBypass
 14296 ;;		_setSwitchBypassState
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           
 14301                           ;psect for function _setSwitchBypassRelays
 14302  2084                     _setSwitchBypassRelays:	
 14303                           
 14304                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14305                           
 14306                           ;incstack = 0
 14307                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14308  2084  0021               	movlb	1	; select bank1
 14309  2085  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14310  2086  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14311  2087  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14312  2088  0020               	movlb	0	; select bank0
 14313  2089  00E5               	movwf	_switchBypass_state
 14314                           
 14315                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14316  208A  0021               	movlb	1	; select bank1
 14317  208B  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14318  208C  0027               	movlb	7	; select bank7
 14319  208D  1C03               	skipc
 14320  208E  110D               	bcf	13,2	;volatile
 14321  208F  1803               	skipnc
 14322  2090  150D               	bsf	13,2	;volatile
 14323                           
 14324                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14325  2091  0021               	movlb	1	; select bank1
 14326  2092  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14327  2093  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14328  2094  1D03               	btfss	3,2
 14329  2095  2899               	goto	u8620
 14330  2096  0027               	movlb	7	; select bank7
 14331  2097  148D               	bsf	13,1	;volatile
 14332  2098  289B               	goto	l8168
 14333  2099                     u8620:	
 14334  2099  0027               	movlb	7	; select bank7
 14335  209A  108D               	bcf	13,1	;volatile
 14336  209B                     l8168:	
 14337                           
 14338                           ;SwitchBypass.c: 153: wait_ms(20);
 14339  209B  3014               	movlw	20
 14340  209C  0021               	movlb	1	; select bank1
 14341  209D  00AC               	movwf	wait_ms@timeSec^(0+128)
 14342  209E  3000               	movlw	0
 14343  209F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14344  20A0  31A0  2052  31A0   	fcall	_wait_ms
 14345                           
 14346                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14347  20A3  0027               	movlb	7	; select bank7
 14348  20A4  110D               	bcf	13,2	;volatile
 14349                           
 14350                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14351  20A5  108D               	bcf	13,1	;volatile
 14352                           
 14353                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14354  20A6  0020               	movlb	0	; select bank0
 14355  20A7  0865               	movf	_switchBypass_state,w
 14356  20A8  0021               	movlb	1	; select bank1
 14357  20A9  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14358  20AA  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14359  20AB  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14360  20AC  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14361  20AD  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14362  20AE  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14363  20AF  3187  27FF  31A0   	fcall	_updateSwitchBypassState
 14364                           
 14365                           ;SwitchBypass.c: 159: wait_ms(20);
 14366  20B2  3014               	movlw	20
 14367  20B3  0021               	movlb	1	; select bank1
 14368  20B4  00AC               	movwf	wait_ms@timeSec^(0+128)
 14369  20B5  3000               	movlw	0
 14370  20B6  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14371  20B7  31A0  2052         	fcall	_wait_ms
 14372  20B9  0008               	return
 14373  20BA                     __end_of_setSwitchBypassRelays:	
 14374                           
 14375                           	psect	text39
 14376  2052                     __ptext39:	
 14377 ;; *************** function _wait_ms *****************
 14378 ;; Defined at:
 14379 ;;		line 23 in file "system.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;  timemsl         4   14[BANK1 ] long 
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      void 
 14386 ;; Registers used:
 14387 ;;		wreg, status,2, status,0, pclath, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14393 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14394 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14396 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14397 ;;Total ram usage:        6 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    4
 14400 ;; This function calls:
 14401 ;;		___lmul
 14402 ;; This function is called by:
 14403 ;;		_ring_tactiles
 14404 ;;		_solidring_tactiles
 14405 ;;		_read_bottom_tactile
 14406 ;;		_read_top_tactile
 14407 ;;		_setSwitchBypassRelays
 14408 ;;		_setDoublePressState
 14409 ;;		_showError_Alternating
 14410 ;;		_show_error
 14411 ;;		_show_cancel
 14412 ;;		_star_tactiles
 14413 ;;		_initExpModeState
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           
 14418                           ;psect for function _wait_ms
 14419  2052                     _wait_ms:	
 14420                           
 14421                           ;system.c: 25: long timemsl = 0;
 14422                           
 14423                           ;incstack = 0
 14424                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14425  2052  3000               	movlw	0
 14426  2053  0021               	movlb	1	; select bank1
 14427  2054  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14428  2055  3000               	movlw	0
 14429  2056  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14430  2057  3000               	movlw	0
 14431  2058  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14432  2059  3000               	movlw	0
 14433  205A  00AE               	movwf	wait_ms@timemsl^(0+128)
 14434                           
 14435                           ;system.c: 26: timemsl = timeSec * 1000l;
 14436  205B  082C               	movf	wait_ms@timeSec^(0+128),w
 14437  205C  00A0               	movwf	___lmul@multiplier^(0+128)
 14438  205D  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14439  205E  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14440  205F  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14441  2060  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14442  2061  3000               	movlw	0
 14443  2062  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14444  2063  3000               	movlw	0
 14445  2064  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14446  2065  3003               	movlw	3
 14447  2066  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14448  2067  30E8               	movlw	232
 14449  2068  00A4               	movwf	___lmul@multiplicand^(0+128)
 14450  2069  31A0  2022  31A0   	fcall	___lmul
 14451  206C  0021               	movlb	1	; select bank1
 14452  206D  0823               	movf	(?___lmul+3)^(0+128),w
 14453  206E  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14454  206F  0822               	movf	(?___lmul+2)^(0+128),w
 14455  2070  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14456  2071  0821               	movf	(?___lmul+1)^(0+128),w
 14457  2072  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14458  2073  0820               	movf	?___lmul^(0+128),w
 14459  2074  00AE               	movwf	wait_ms@timemsl^(0+128)
 14460  2075                     l381:	
 14461                           ;system.c: 27: for( ; timemsl; timemsl--);
 14462                           
 14463  2075  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14464  2076  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14465  2077  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14466  2078  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14467  2079  1903               	btfsc	3,2
 14468  207A  0008               	return
 14469  207B  30FF               	movlw	255
 14470  207C  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14471  207D  30FF               	movlw	255
 14472  207E  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14473  207F  30FF               	movlw	255
 14474  2080  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14475  2081  30FF               	movlw	255
 14476  2082  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14477  2083  2875               	goto	l381
 14478  2084                     __end_of_wait_ms:	
 14479                           
 14480                           	psect	text40
 14481  2022                     __ptext40:	
 14482 ;; *************** function ___lmul *****************
 14483 ;; Defined at:
 14484 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14485 ;; Parameters:    Size  Location     Type
 14486 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14487 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14488 ;; Auto vars:     Size  Location     Type
 14489 ;;  product         4    8[BANK1 ] unsigned long 
 14490 ;; Return value:  Size  Location     Type
 14491 ;;                  4    0[BANK1 ] unsigned long 
 14492 ;; Registers used:
 14493 ;;		wreg, status,2, status,0
 14494 ;; Tracked objects:
 14495 ;;		On entry : 0/0
 14496 ;;		On exit  : 0/0
 14497 ;;		Unchanged: 0/0
 14498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14499 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14500 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14502 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14503 ;;Total ram usage:       12 bytes
 14504 ;; Hardware stack levels used:    1
 14505 ;; Hardware stack levels required when called:    3
 14506 ;; This function calls:
 14507 ;;		Nothing
 14508 ;; This function is called by:
 14509 ;;		_wait_ms
 14510 ;; This function uses a non-reentrant model
 14511 ;;
 14512                           
 14513                           
 14514                           ;psect for function ___lmul
 14515  2022                     ___lmul:	
 14516                           
 14517                           ;incstack = 0
 14518                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14519  2022  3000               	movlw	0
 14520  2023  0021               	movlb	1	; select bank1
 14521  2024  00AB               	movwf	(___lmul@product+3)^(0+128)
 14522  2025  3000               	movlw	0
 14523  2026  00AA               	movwf	(___lmul@product+2)^(0+128)
 14524  2027  3000               	movlw	0
 14525  2028  00A9               	movwf	(___lmul@product+1)^(0+128)
 14526  2029  3000               	movlw	0
 14527  202A  00A8               	movwf	___lmul@product^(0+128)
 14528  202B                     l7614:	
 14529  202B  1C20               	btfss	___lmul@multiplier^(0+128),0
 14530  202C  2835               	goto	l7618
 14531  202D  0824               	movf	___lmul@multiplicand^(0+128),w
 14532  202E  07A8               	addwf	___lmul@product^(0+128),f
 14533  202F  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14534  2030  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14535  2031  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14536  2032  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14537  2033  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14538  2034  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14539  2035                     l7618:	
 14540  2035  3001               	movlw	1
 14541  2036                     u7655:	
 14542  2036  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14543  2037  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14544  2038  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14545  2039  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14546  203A  0B89               	decfsz	9,f
 14547  203B  2836               	goto	u7655
 14548  203C  3001               	movlw	1
 14549  203D                     u7665:	
 14550  203D  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14551  203E  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14552  203F  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14553  2040  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14554  2041  0B89               	decfsz	9,f
 14555  2042  283D               	goto	u7665
 14556  2043  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14557  2044  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14558  2045  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14559  2046  0420               	iorwf	___lmul@multiplier^(0+128),w
 14560  2047  1D03               	skipz
 14561  2048  282B               	goto	l7614
 14562  2049  082B               	movf	(___lmul@product+3)^(0+128),w
 14563  204A  00A3               	movwf	(?___lmul+3)^(0+128)
 14564  204B  082A               	movf	(___lmul@product+2)^(0+128),w
 14565  204C  00A2               	movwf	(?___lmul+2)^(0+128)
 14566  204D  0829               	movf	(___lmul@product+1)^(0+128),w
 14567  204E  00A1               	movwf	(?___lmul+1)^(0+128)
 14568  204F  0828               	movf	___lmul@product^(0+128),w
 14569  2050  00A0               	movwf	?___lmul^(0+128)
 14570  2051  0008               	return
 14571  2052                     __end_of___lmul:	
 14572                           
 14573                           	psect	text41
 14574  07FF                     __ptext41:	
 14575 ;; *************** function _updateSwitchBypassState *****************
 14576 ;; Defined at:
 14577 ;;		line 96 in file "state_manager.c"
 14578 ;; Parameters:    Size  Location     Type
 14579 ;;  state           2    0[BANK1 ] int 
 14580 ;; Auto vars:     Size  Location     Type
 14581 ;;		None
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  1    wreg      void 
 14584 ;; Registers used:
 14585 ;;		None
 14586 ;; Tracked objects:
 14587 ;;		On entry : 0/0
 14588 ;;		On exit  : 0/0
 14589 ;;		Unchanged: 0/0
 14590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14591 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14594 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14595 ;;Total ram usage:        2 bytes
 14596 ;; Hardware stack levels used:    1
 14597 ;; Hardware stack levels required when called:    3
 14598 ;; This function calls:
 14599 ;;		Nothing
 14600 ;; This function is called by:
 14601 ;;		_setSwitchBypassRelays
 14602 ;; This function uses a non-reentrant model
 14603 ;;
 14604                           
 14605                           
 14606                           ;psect for function _updateSwitchBypassState
 14607  07FF                     _updateSwitchBypassState:	
 14608                           
 14609                           ;incstack = 0
 14610                           ; Regs used in _updateSwitchBypassState: []
 14611  07FF  0008               	return
 14612  0800                     __end_of_updateSwitchBypassState:	
 14613                           
 14614                           	psect	text42
 14615  1800                     __ptext42:	
 14616 ;; *************** function _getSwitchBypassState *****************
 14617 ;; Defined at:
 14618 ;;		line 103 in file "state_manager.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;		None
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;		None
 14623 ;; Return value:  Size  Location     Type
 14624 ;;                  2    0[BANK1 ] int 
 14625 ;; Registers used:
 14626 ;;		status,2
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14632 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14635 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14636 ;;Total ram usage:        2 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; Hardware stack levels required when called:    3
 14639 ;; This function calls:
 14640 ;;		Nothing
 14641 ;; This function is called by:
 14642 ;;		_initSwitchBypass
 14643 ;; This function uses a non-reentrant model
 14644 ;;
 14645                           
 14646                           
 14647                           ;psect for function _getSwitchBypassState
 14648  1800                     _getSwitchBypassState:	
 14649                           
 14650                           ;state_manager.c: 108: return 0;
 14651                           
 14652                           ;incstack = 0
 14653                           ; Regs used in _getSwitchBypassState: [status,2]
 14654  1800  0021               	movlb	1	; select bank1
 14655  1801  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14656  1802  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14657  1803  0008               	return
 14658  1804                     __end_of_getSwitchBypassState:	
 14659                           
 14660                           	psect	text43
 14661  1AE2                     __ptext43:	
 14662 ;; *************** function _getModulationDelayTime *****************
 14663 ;; Defined at:
 14664 ;;		line 35 in file "modulation.c"
 14665 ;; Parameters:    Size  Location     Type
 14666 ;;		None
 14667 ;; Auto vars:     Size  Location     Type
 14668 ;;  subDiv          2   26[BANK2 ] int 
 14669 ;; Return value:  Size  Location     Type
 14670 ;;                  1    wreg      void 
 14671 ;; Registers used:
 14672 ;;		wreg, status,2, status,0, pclath, cstack
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14679 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14680 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14681 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14682 ;;Total ram usage:        6 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; Hardware stack levels required when called:    5
 14685 ;; This function calls:
 14686 ;;		___altoft
 14687 ;;		___awtoft
 14688 ;;		___ftdiv
 14689 ;;		___fttol
 14690 ;;		___wmul
 14691 ;;		_getModulationSubdivision
 14692 ;; This function is called by:
 14693 ;;		_main
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           
 14698                           ;psect for function _getModulationDelayTime
 14699  1AE2                     _getModulationDelayTime:	
 14700                           
 14701                           ;modulation.c: 36: adjust_mod_delay = 0;
 14702                           
 14703                           ;incstack = 0
 14704                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14705  1AE2  0023               	movlb	3	; select bank3
 14706  1AE3  01C0               	clrf	_adjust_mod_delay^(0+384)
 14707                           
 14708                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14709  1AE4  31AF  27D0  319A   	fcall	_getModulationSubdivision
 14710  1AE7  0021               	movlb	1	; select bank1
 14711  1AE8  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14712  1AE9  0022               	movlb	2	; select bank2
 14713  1AEA  00BB               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14714  1AEB  0021               	movlb	1	; select bank1
 14715  1AEC  0820               	movf	?_getModulationSubdivision^(0+128),w
 14716  1AED  0022               	movlb	2	; select bank2
 14717  1AEE  00BA               	movwf	getModulationDelayTime@subDiv^(0+256)
 14718                           
 14719                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14720  1AEF  0020               	movlb	0	; select bank0
 14721  1AF0  0858               	movf	_delay_time+3,w	;volatile
 14722  1AF1  0022               	movlb	2	; select bank2
 14723  1AF2  00B1               	movwf	(___altoft@c+3)^(0+256)
 14724  1AF3  0020               	movlb	0	; select bank0
 14725  1AF4  0857               	movf	_delay_time+2,w	;volatile
 14726  1AF5  0022               	movlb	2	; select bank2
 14727  1AF6  00B0               	movwf	(___altoft@c+2)^(0+256)
 14728  1AF7  0020               	movlb	0	; select bank0
 14729  1AF8  0856               	movf	_delay_time+1,w	;volatile
 14730  1AF9  0022               	movlb	2	; select bank2
 14731  1AFA  00AF               	movwf	(___altoft@c+1)^(0+256)
 14732  1AFB  0020               	movlb	0	; select bank0
 14733  1AFC  0855               	movf	_delay_time,w	;volatile
 14734  1AFD  0022               	movlb	2	; select bank2
 14735  1AFE  00AE               	movwf	___altoft@c^(0+256)
 14736  1AFF  31A3  23FA  319A   	fcall	___altoft
 14737  1B02  0022               	movlb	2	; select bank2
 14738  1B03  082E               	movf	?___altoft^(0+256),w
 14739  1B04  0021               	movlb	1	; select bank1
 14740  1B05  00D1               	movwf	___ftdiv@f1^(0+128)
 14741  1B06  0022               	movlb	2	; select bank2
 14742  1B07  082F               	movf	(?___altoft+1)^(0+256),w
 14743  1B08  0021               	movlb	1	; select bank1
 14744  1B09  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14745  1B0A  0022               	movlb	2	; select bank2
 14746  1B0B  0830               	movf	(?___altoft+2)^(0+256),w
 14747  1B0C  0021               	movlb	1	; select bank1
 14748  1B0D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14749  1B0E  0022               	movlb	2	; select bank2
 14750  1B0F  083B               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14751  1B10  0021               	movlb	1	; select bank1
 14752  1B11  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14753  1B12  0022               	movlb	2	; select bank2
 14754  1B13  083A               	movf	getModulationDelayTime@subDiv^(0+256),w
 14755  1B14  0021               	movlb	1	; select bank1
 14756  1B15  00A8               	movwf	___awtoft@c^(0+128)
 14757  1B16  31A0  2000  319A   	fcall	___awtoft
 14758  1B19  0021               	movlb	1	; select bank1
 14759  1B1A  0828               	movf	?___awtoft^(0+128),w
 14760  1B1B  00CE               	movwf	___ftdiv@f2^(0+128)
 14761  1B1C  0829               	movf	(?___awtoft+1)^(0+128),w
 14762  1B1D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14763  1B1E  082A               	movf	(?___awtoft+2)^(0+128),w
 14764  1B1F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14765  1B20  319D  253D  319A   	fcall	___ftdiv
 14766  1B23  0021               	movlb	1	; select bank1
 14767  1B24  084E               	movf	?___ftdiv^(0+128),w
 14768  1B25  0022               	movlb	2	; select bank2
 14769  1B26  00A0               	movwf	___fttol@f1^(0+256)
 14770  1B27  0021               	movlb	1	; select bank1
 14771  1B28  084F               	movf	(?___ftdiv+1)^(0+128),w
 14772  1B29  0022               	movlb	2	; select bank2
 14773  1B2A  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14774  1B2B  0021               	movlb	1	; select bank1
 14775  1B2C  0850               	movf	(?___ftdiv+2)^(0+128),w
 14776  1B2D  0022               	movlb	2	; select bank2
 14777  1B2E  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14778  1B2F  3199  21D0  319A   	fcall	___fttol
 14779  1B32  0022               	movlb	2	; select bank2
 14780  1B33  0821               	movf	(?___fttol^(0+256)+1),w
 14781  1B34  0023               	movlb	3	; select bank3
 14782  1B35  00DB               	movwf	(_mod_delay_time+1)^(0+384)
 14783  1B36  0022               	movlb	2	; select bank2
 14784  1B37  0820               	movf	?___fttol^(0+256),w
 14785  1B38  0023               	movlb	3	; select bank3
 14786  1B39  00DA               	movwf	_mod_delay_time^(0+384)
 14787                           
 14788                           ;modulation.c: 39: if (mod_delay_time * subDiv != delay_time) {
 14789  1B3A  085B               	movf	(_mod_delay_time+1)^(0+384),w
 14790  1B3B  0022               	movlb	2	; select bank2
 14791  1B3C  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14792  1B3D  0023               	movlb	3	; select bank3
 14793  1B3E  085A               	movf	_mod_delay_time^(0+384),w
 14794  1B3F  0022               	movlb	2	; select bank2
 14795  1B40  00AE               	movwf	___wmul@multiplier^(0+256)
 14796  1B41  083B               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14797  1B42  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
 14798  1B43  083A               	movf	getModulationDelayTime@subDiv^(0+256),w
 14799  1B44  00B0               	movwf	___wmul@multiplicand^(0+256)
 14800  1B45  31AE  2641  319A   	fcall	___wmul
 14801  1B48  0022               	movlb	2	; select bank2
 14802  1B49  082E               	movf	?___wmul^(0+256),w
 14803  1B4A  00B6               	movwf	??_getModulationDelayTime^(0+256)
 14804  1B4B  082F               	movf	(?___wmul+1)^(0+256),w
 14805  1B4C  00B7               	movwf	(??_getModulationDelayTime^(0+256)+1)
 14806  1B4D  3000               	movlw	0
 14807  1B4E  1BB7               	btfsc	(??_getModulationDelayTime^(0+256)+1),7
 14808  1B4F  30FF               	movlw	255
 14809  1B50  00B8               	movwf	(??_getModulationDelayTime^(0+256)+2)
 14810  1B51  00B9               	movwf	(??_getModulationDelayTime^(0+256)+3)
 14811  1B52  0020               	movlb	0	; select bank0
 14812  1B53  0858               	movf	_delay_time+3,w	;volatile
 14813  1B54  0022               	movlb	2	; select bank2
 14814  1B55  0639               	xorwf	(??_getModulationDelayTime+3)^(0+256),w
 14815  1B56  1D03               	skipz
 14816  1B57  2B68               	goto	u10215
 14817  1B58  0020               	movlb	0	; select bank0
 14818  1B59  0857               	movf	_delay_time+2,w	;volatile
 14819  1B5A  0022               	movlb	2	; select bank2
 14820  1B5B  0638               	xorwf	(??_getModulationDelayTime+2)^(0+256),w
 14821  1B5C  1D03               	skipz
 14822  1B5D  2B68               	goto	u10215
 14823  1B5E  0020               	movlb	0	; select bank0
 14824  1B5F  0856               	movf	_delay_time+1,w	;volatile
 14825  1B60  0022               	movlb	2	; select bank2
 14826  1B61  0637               	xorwf	(??_getModulationDelayTime+1)^(0+256),w
 14827  1B62  1D03               	skipz
 14828  1B63  2B68               	goto	u10215
 14829  1B64  0020               	movlb	0	; select bank0
 14830  1B65  0855               	movf	_delay_time,w	;volatile
 14831  1B66  0022               	movlb	2	; select bank2
 14832  1B67  0636               	xorwf	??_getModulationDelayTime^(0+256),w
 14833  1B68                     u10215:	
 14834  1B68  1903               	skipnz
 14835  1B69  0008               	return
 14836                           
 14837                           ;modulation.c: 40: adjust_mod_delay = 1;
 14838  1B6A  0023               	movlb	3	; select bank3
 14839  1B6B  01C0               	clrf	_adjust_mod_delay^(0+384)
 14840  1B6C  0AC0               	incf	_adjust_mod_delay^(0+384),f
 14841  1B6D  0008               	return
 14842  1B6E                     __end_of_getModulationDelayTime:	
 14843                           
 14844                           	psect	text44
 14845  2FD0                     __ptext44:	
 14846 ;; *************** function _getModulationSubdivision *****************
 14847 ;; Defined at:
 14848 ;;		line 26 in file "modulation.c"
 14849 ;; Parameters:    Size  Location     Type
 14850 ;;		None
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;		None
 14853 ;; Return value:  Size  Location     Type
 14854 ;;                  2    0[BANK1 ] int 
 14855 ;; Registers used:
 14856 ;;		wreg, status,2, status,0
 14857 ;; Tracked objects:
 14858 ;;		On entry : 0/0
 14859 ;;		On exit  : 0/0
 14860 ;;		Unchanged: 0/0
 14861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14862 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14865 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14866 ;;Total ram usage:        2 bytes
 14867 ;; Hardware stack levels used:    1
 14868 ;; Hardware stack levels required when called:    3
 14869 ;; This function calls:
 14870 ;;		Nothing
 14871 ;; This function is called by:
 14872 ;;		_getModulationDelayTime
 14873 ;;		_updateModulationArray
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           
 14878                           ;psect for function _getModulationSubdivision
 14879  2FD0                     _getModulationSubdivision:	
 14880                           
 14881                           ;modulation.c: 27: if (delay_time >= 2400) {
 14882                           
 14883                           ;incstack = 0
 14884                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14885  2FD0  0020               	movlb	0	; select bank0
 14886  2FD1  1BD8               	btfsc	_delay_time+3,7	;volatile
 14887  2FD2  2FE5               	goto	l8298
 14888  2FD3  0858               	movf	_delay_time+3,w	;volatile
 14889  2FD4  1D03               	btfss	3,2
 14890  2FD5  2FDF               	goto	l8292
 14891  2FD6  0857               	movf	_delay_time+2,w	;volatile
 14892  2FD7  1D03               	btfss	3,2
 14893  2FD8  2FDF               	goto	l8292
 14894  2FD9  3060               	movlw	96
 14895  2FDA  0255               	subwf	_delay_time,w	;volatile
 14896  2FDB  3009               	movlw	9
 14897  2FDC  3B56               	subwfb	_delay_time+1,w	;volatile
 14898  2FDD  1C03               	btfss	3,0
 14899  2FDE  2FE5               	goto	l8298
 14900  2FDF                     l8292:	
 14901                           
 14902                           ;modulation.c: 28: return 120;
 14903  2FDF  3078               	movlw	120
 14904  2FE0  0021               	movlb	1	; select bank1
 14905  2FE1  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14906  2FE2  3000               	movlw	0
 14907  2FE3  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14908                           
 14909                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14910  2FE4  0008               	return
 14911  2FE5                     l8298:	
 14912  2FE5  0020               	movlb	0	; select bank0
 14913  2FE6  1BD8               	btfsc	_delay_time+3,7	;volatile
 14914  2FE7  2FFA               	goto	l8306
 14915  2FE8  0858               	movf	_delay_time+3,w	;volatile
 14916  2FE9  1D03               	btfss	3,2
 14917  2FEA  2FF4               	goto	l8300
 14918  2FEB  0857               	movf	_delay_time+2,w	;volatile
 14919  2FEC  1D03               	btfss	3,2
 14920  2FED  2FF4               	goto	l8300
 14921  2FEE  3058               	movlw	88
 14922  2FEF  0255               	subwf	_delay_time,w	;volatile
 14923  2FF0  3002               	movlw	2
 14924  2FF1  3B56               	subwfb	_delay_time+1,w	;volatile
 14925  2FF2  1C03               	btfss	3,0
 14926  2FF3  2FFA               	goto	l8306
 14927  2FF4                     l8300:	
 14928                           
 14929                           ;modulation.c: 30: return 60;
 14930  2FF4  303C               	movlw	60
 14931  2FF5  0021               	movlb	1	; select bank1
 14932  2FF6  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14933  2FF7  3000               	movlw	0
 14934  2FF8  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14935                           
 14936                           ;modulation.c: 31: } else {
 14937  2FF9  0008               	return
 14938  2FFA                     l8306:	
 14939                           
 14940                           ;modulation.c: 32: return 30;
 14941  2FFA  301E               	movlw	30
 14942  2FFB  0021               	movlb	1	; select bank1
 14943  2FFC  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14944  2FFD  3000               	movlw	0
 14945  2FFE  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14946  2FFF  0008               	return
 14947  3000                     __end_of_getModulationSubdivision:	
 14948                           
 14949                           	psect	text45
 14950  277F                     __ptext45:	
 14951 ;; *************** function _calcSinArray *****************
 14952 ;; Defined at:
 14953 ;;		line 18 in file "modulation.c"
 14954 ;; Parameters:    Size  Location     Type
 14955 ;;		None
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;  tmpVal          3   55[BANK2 ] int 
 14958 ;;  iAngle          1   58[BANK2 ] unsigned char 
 14959 ;; Return value:  Size  Location     Type
 14960 ;;                  1    wreg      void 
 14961 ;; Registers used:
 14962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14963 ;; Tracked objects:
 14964 ;;		On entry : 0/0
 14965 ;;		On exit  : 0/0
 14966 ;;		Unchanged: 0/0
 14967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14969 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14970 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14971 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14972 ;;Total ram usage:        8 bytes
 14973 ;; Hardware stack levels used:    1
 14974 ;; Hardware stack levels required when called:    7
 14975 ;; This function calls:
 14976 ;;		___awtoft
 14977 ;;		___ftdiv
 14978 ;;		___ftmul
 14979 ;;		___wmul
 14980 ;;		_sin
 14981 ;; This function is called by:
 14982 ;;		_main
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           
 14987                           ;psect for function _calcSinArray
 14988  277F                     _calcSinArray:	
 14989                           
 14990                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14991                           
 14992                           ;incstack = 0
 14993                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14994  277F  0022               	movlb	2	; select bank2
 14995  2780  01DA               	clrf	calcSinArray@iAngle^(0+256)
 14996  2781                     L18:	
 14997  2781  3078               	movlw	120
 14998  2782  025A               	subwf	calcSinArray@iAngle^(0+256),w
 14999  2783  1803               	btfsc	3,0
 15000  2784  0008               	return
 15001                           
 15002                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 15003  2785  3000               	movlw	0
 15004  2786  0021               	movlb	1	; select bank1
 15005  2787  00CE               	movwf	___ftdiv@f2^(0+128)
 15006  2788  3034               	movlw	52
 15007  2789  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15008  278A  3043               	movlw	67
 15009  278B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15010  278C  3010               	movlw	16
 15011  278D  00AE               	movwf	___ftmul@f1^(0+128)
 15012  278E  3049               	movlw	73
 15013  278F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15014  2790  3040               	movlw	64
 15015  2791  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15016  2792  0022               	movlb	2	; select bank2
 15017  2793  085A               	movf	calcSinArray@iAngle^(0+256),w
 15018  2794  00D3               	movwf	??_calcSinArray^(0+256)
 15019  2795  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 15020  2796  0853               	movf	??_calcSinArray^(0+256),w
 15021  2797  00AE               	movwf	___wmul@multiplier^(0+256)
 15022  2798  0854               	movf	(??_calcSinArray+1)^(0+256),w
 15023  2799  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15024  279A  3003               	movlw	3
 15025  279B  00B0               	movwf	___wmul@multiplicand^(0+256)
 15026  279C  3000               	movlw	0
 15027  279D  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15028  279E  31AE  2641  31A7   	fcall	___wmul
 15029  27A1  0022               	movlb	2	; select bank2
 15030  27A2  082F               	movf	(?___wmul+1)^(0+256),w
 15031  27A3  0021               	movlb	1	; select bank1
 15032  27A4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15033  27A5  0022               	movlb	2	; select bank2
 15034  27A6  082E               	movf	?___wmul^(0+256),w
 15035  27A7  0021               	movlb	1	; select bank1
 15036  27A8  00A8               	movwf	___awtoft@c^(0+128)
 15037  27A9  31A0  2000  31A7   	fcall	___awtoft
 15038  27AC  0021               	movlb	1	; select bank1
 15039  27AD  0828               	movf	?___awtoft^(0+128),w
 15040  27AE  00B1               	movwf	___ftmul@f2^(0+128)
 15041  27AF  0829               	movf	(?___awtoft+1)^(0+128),w
 15042  27B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15043  27B1  082A               	movf	(?___awtoft+2)^(0+128),w
 15044  27B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15045  27B3  319E  2691  31A7   	fcall	___ftmul
 15046  27B6  0021               	movlb	1	; select bank1
 15047  27B7  082E               	movf	?___ftmul^(0+128),w
 15048  27B8  00D1               	movwf	___ftdiv@f1^(0+128)
 15049  27B9  082F               	movf	(?___ftmul+1)^(0+128),w
 15050  27BA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15051  27BB  0830               	movf	(?___ftmul+2)^(0+128),w
 15052  27BC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15053  27BD  319D  253D  31A7   	fcall	___ftdiv
 15054  27C0  0021               	movlb	1	; select bank1
 15055  27C1  084E               	movf	?___ftdiv^(0+128),w
 15056  27C2  0022               	movlb	2	; select bank2
 15057  27C3  00D7               	movwf	calcSinArray@tmpVal^(0+256)
 15058  27C4  0021               	movlb	1	; select bank1
 15059  27C5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15060  27C6  0022               	movlb	2	; select bank2
 15061  27C7  00D8               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 15062  27C8  0021               	movlb	1	; select bank1
 15063  27C9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15064  27CA  0022               	movlb	2	; select bank2
 15065  27CB  00D9               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 15066                           
 15067                           ;modulation.c: 21: tmpVal = sin(tmpVal);
 15068  27CC  0857               	movf	calcSinArray@tmpVal^(0+256),w
 15069  27CD  00C5               	movwf	sin@f^(0+256)
 15070  27CE  0858               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 15071  27CF  00C6               	movwf	(sin@f+1)^(0+256)
 15072  27D0  0859               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 15073  27D1  00C7               	movwf	(sin@f+2)^(0+256)
 15074  27D2  3188  202F  31A7   	fcall	_sin
 15075  27D5  0022               	movlb	2	; select bank2
 15076  27D6  0845               	movf	?_sin^(0+256),w
 15077  27D7  00D7               	movwf	calcSinArray@tmpVal^(0+256)
 15078  27D8  0846               	movf	(?_sin+1)^(0+256),w
 15079  27D9  00D8               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 15080  27DA  0847               	movf	(?_sin+2)^(0+256),w
 15081  27DB  00D9               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 15082                           
 15083                           ;modulation.c: 22: sinArray[iAngle] = tmpVal;
 15084  27DC  085A               	movf	calcSinArray@iAngle^(0+256),w
 15085  27DD  00D3               	movwf	??_calcSinArray^(0+256)
 15086  27DE  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 15087  27DF  0853               	movf	??_calcSinArray^(0+256),w
 15088  27E0  00AE               	movwf	___wmul@multiplier^(0+256)
 15089  27E1  0854               	movf	(??_calcSinArray+1)^(0+256),w
 15090  27E2  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15091  27E3  3003               	movlw	3
 15092  27E4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15093  27E5  3000               	movlw	0
 15094  27E6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15095  27E7  31AE  2641  31A7   	fcall	___wmul
 15096  27EA  3082               	movlw	130
 15097  27EB  0022               	movlb	2	; select bank2
 15098  27EC  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 15099  27ED  3024               	movlw	36
 15100  27EE  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 15101  27EF  082E               	movf	?___wmul^(0+256),w
 15102  27F0  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 15103  27F1  0086               	movwf	6
 15104  27F2  082F               	movf	(?___wmul+1)^(0+256),w
 15105  27F3  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 15106  27F4  0087               	movwf	7
 15107  27F5  0857               	movf	calcSinArray@tmpVal^(0+256),w
 15108  27F6  3FC0               	movwi [0]fsr1
 15109  27F7  0858               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 15110  27F8  3FC1               	movwi [1]fsr1
 15111  27F9  0859               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 15112  27FA  3FC2               	movwi [2]fsr1
 15113  27FB  3001               	movlw	1
 15114  27FC  00D3               	movwf	??_calcSinArray^(0+256)
 15115  27FD  0853               	movf	??_calcSinArray^(0+256),w
 15116  27FE  07DA               	addwf	calcSinArray@iAngle^(0+256),f
 15117  27FF  2F81               	goto	L18
 15118  2800                     __end_of_calcSinArray:	
 15119                           
 15120                           	psect	text46
 15121  082F                     __ptext46:	
 15122 ;; *************** function _sin *****************
 15123 ;; Defined at:
 15124 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;  f               3   37[BANK2 ] void 
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;  x2              3   47[BANK2 ] void 
 15129 ;;  y               3   41[BANK2 ] void 
 15130 ;;  sgn             1   50[BANK2 ] unsigned char 
 15131 ;; Return value:  Size  Location     Type
 15132 ;;                  3   37[BANK2 ] unsigned char 
 15133 ;; Registers used:
 15134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15135 ;; Tracked objects:
 15136 ;;		On entry : 0/0
 15137 ;;		On exit  : 0/0
 15138 ;;		Unchanged: 0/0
 15139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15140 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15141 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15142 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15143 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15144 ;;Total ram usage:       14 bytes
 15145 ;; Hardware stack levels used:    1
 15146 ;; Hardware stack levels required when called:    6
 15147 ;; This function calls:
 15148 ;;		___ftadd
 15149 ;;		___ftdiv
 15150 ;;		___ftge
 15151 ;;		___ftmul
 15152 ;;		___ftneg
 15153 ;;		___ftsub
 15154 ;;		_eval_poly
 15155 ;;		_floor
 15156 ;; This function is called by:
 15157 ;;		_calcSinArray
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161                           
 15162                           ;psect for function _sin
 15163  082F                     _sin:	
 15164                           
 15165                           ;incstack = 0
 15166                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15167  082F  0022               	movlb	2	; select bank2
 15168  0830  01D2               	clrf	sin@sgn^(0+256)
 15169  0831  0845               	movf	sin@f^(0+256),w
 15170  0832  0021               	movlb	1	; select bank1
 15171  0833  00A0               	movwf	___ftge@ff1^(0+128)
 15172  0834  0022               	movlb	2	; select bank2
 15173  0835  0846               	movf	(sin@f+1)^(0+256),w
 15174  0836  0021               	movlb	1	; select bank1
 15175  0837  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15176  0838  0022               	movlb	2	; select bank2
 15177  0839  0847               	movf	(sin@f+2)^(0+256),w
 15178  083A  0021               	movlb	1	; select bank1
 15179  083B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15180  083C  3000               	movlw	0
 15181  083D  00A3               	movwf	___ftge@ff2^(0+128)
 15182  083E  3000               	movlw	0
 15183  083F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15184  0840  3000               	movlw	0
 15185  0841  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15186  0842  31A1  2167  3188   	fcall	___ftge
 15187  0845  1803               	btfsc	3,0
 15188  0846  2864               	goto	l8486
 15189  0847  0022               	movlb	2	; select bank2
 15190  0848  0845               	movf	sin@f^(0+256),w
 15191  0849  0021               	movlb	1	; select bank1
 15192  084A  00BE               	movwf	___ftneg@f1^(0+128)
 15193  084B  0022               	movlb	2	; select bank2
 15194  084C  0846               	movf	(sin@f+1)^(0+256),w
 15195  084D  0021               	movlb	1	; select bank1
 15196  084E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15197  084F  0022               	movlb	2	; select bank2
 15198  0850  0847               	movf	(sin@f+2)^(0+256),w
 15199  0851  0021               	movlb	1	; select bank1
 15200  0852  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15201  0853  31AD  259D  3188   	fcall	___ftneg
 15202  0856  0021               	movlb	1	; select bank1
 15203  0857  083E               	movf	?___ftneg^(0+128),w
 15204  0858  0022               	movlb	2	; select bank2
 15205  0859  00C5               	movwf	sin@f^(0+256)
 15206  085A  0021               	movlb	1	; select bank1
 15207  085B  083F               	movf	(?___ftneg+1)^(0+128),w
 15208  085C  0022               	movlb	2	; select bank2
 15209  085D  00C6               	movwf	(sin@f+1)^(0+256)
 15210  085E  0021               	movlb	1	; select bank1
 15211  085F  0840               	movf	(?___ftneg+2)^(0+128),w
 15212  0860  0022               	movlb	2	; select bank2
 15213  0861  00C7               	movwf	(sin@f+2)^(0+256)
 15214  0862  01D2               	clrf	sin@sgn^(0+256)
 15215  0863  0AD2               	incf	sin@sgn^(0+256),f
 15216  0864                     l8486:	
 15217  0864  30FA               	movlw	250
 15218  0865  0021               	movlb	1	; select bank1
 15219  0866  00AE               	movwf	___ftmul@f1^(0+128)
 15220  0867  3022               	movlw	34
 15221  0868  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15222  0869  303E               	movlw	62
 15223  086A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15224  086B  0022               	movlb	2	; select bank2
 15225  086C  0845               	movf	sin@f^(0+256),w
 15226  086D  0021               	movlb	1	; select bank1
 15227  086E  00B1               	movwf	___ftmul@f2^(0+128)
 15228  086F  0022               	movlb	2	; select bank2
 15229  0870  0846               	movf	(sin@f+1)^(0+256),w
 15230  0871  0021               	movlb	1	; select bank1
 15231  0872  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15232  0873  0022               	movlb	2	; select bank2
 15233  0874  0847               	movf	(sin@f+2)^(0+256),w
 15234  0875  0021               	movlb	1	; select bank1
 15235  0876  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15236  0877  319E  2691  3188   	fcall	___ftmul
 15237  087A  0021               	movlb	1	; select bank1
 15238  087B  082E               	movf	?___ftmul^(0+128),w
 15239  087C  0022               	movlb	2	; select bank2
 15240  087D  00C5               	movwf	sin@f^(0+256)
 15241  087E  0021               	movlb	1	; select bank1
 15242  087F  082F               	movf	(?___ftmul+1)^(0+128),w
 15243  0880  0022               	movlb	2	; select bank2
 15244  0881  00C6               	movwf	(sin@f+1)^(0+256)
 15245  0882  0021               	movlb	1	; select bank1
 15246  0883  0830               	movf	(?___ftmul+2)^(0+128),w
 15247  0884  0022               	movlb	2	; select bank2
 15248  0885  00C7               	movwf	(sin@f+2)^(0+256)
 15249  0886  0845               	movf	sin@f^(0+256),w
 15250  0887  00B6               	movwf	floor@x^(0+256)
 15251  0888  0846               	movf	(sin@f+1)^(0+256),w
 15252  0889  00B7               	movwf	(floor@x+1)^(0+256)
 15253  088A  0847               	movf	(sin@f+2)^(0+256),w
 15254  088B  00B8               	movwf	(floor@x+2)^(0+256)
 15255  088C  319C  2496  3188   	fcall	_floor
 15256  088F  0022               	movlb	2	; select bank2
 15257  0890  0836               	movf	?_floor^(0+256),w
 15258  0891  00BF               	movwf	___ftsub@f2^(0+256)
 15259  0892  0837               	movf	(?_floor+1)^(0+256),w
 15260  0893  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 15261  0894  0838               	movf	(?_floor+2)^(0+256),w
 15262  0895  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 15263  0896  0845               	movf	sin@f^(0+256),w
 15264  0897  00C2               	movwf	___ftsub@f1^(0+256)
 15265  0898  0846               	movf	(sin@f+1)^(0+256),w
 15266  0899  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 15267  089A  0847               	movf	(sin@f+2)^(0+256),w
 15268  089B  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 15269  089C  31AF  2772  3188   	fcall	___ftsub
 15270  089F  0022               	movlb	2	; select bank2
 15271  08A0  083F               	movf	?___ftsub^(0+256),w
 15272  08A1  00C5               	movwf	sin@f^(0+256)
 15273  08A2  0840               	movf	(?___ftsub+1)^(0+256),w
 15274  08A3  00C6               	movwf	(sin@f+1)^(0+256)
 15275  08A4  0841               	movf	(?___ftsub+2)^(0+256),w
 15276  08A5  00C7               	movwf	(sin@f+2)^(0+256)
 15277  08A6  3000               	movlw	0
 15278  08A7  0021               	movlb	1	; select bank1
 15279  08A8  00AE               	movwf	___ftmul@f1^(0+128)
 15280  08A9  3080               	movlw	128
 15281  08AA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15282  08AB  3040               	movlw	64
 15283  08AC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15284  08AD  0022               	movlb	2	; select bank2
 15285  08AE  0845               	movf	sin@f^(0+256),w
 15286  08AF  0021               	movlb	1	; select bank1
 15287  08B0  00B1               	movwf	___ftmul@f2^(0+128)
 15288  08B1  0022               	movlb	2	; select bank2
 15289  08B2  0846               	movf	(sin@f+1)^(0+256),w
 15290  08B3  0021               	movlb	1	; select bank1
 15291  08B4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15292  08B5  0022               	movlb	2	; select bank2
 15293  08B6  0847               	movf	(sin@f+2)^(0+256),w
 15294  08B7  0021               	movlb	1	; select bank1
 15295  08B8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15296  08B9  319E  2691  3188   	fcall	___ftmul
 15297  08BC  0021               	movlb	1	; select bank1
 15298  08BD  082E               	movf	?___ftmul^(0+128),w
 15299  08BE  0022               	movlb	2	; select bank2
 15300  08BF  00C5               	movwf	sin@f^(0+256)
 15301  08C0  0021               	movlb	1	; select bank1
 15302  08C1  082F               	movf	(?___ftmul+1)^(0+128),w
 15303  08C2  0022               	movlb	2	; select bank2
 15304  08C3  00C6               	movwf	(sin@f+1)^(0+256)
 15305  08C4  0021               	movlb	1	; select bank1
 15306  08C5  0830               	movf	(?___ftmul+2)^(0+128),w
 15307  08C6  0022               	movlb	2	; select bank2
 15308  08C7  00C7               	movwf	(sin@f+2)^(0+256)
 15309  08C8  3000               	movlw	0
 15310  08C9  0021               	movlb	1	; select bank1
 15311  08CA  00A0               	movwf	___ftge@ff1^(0+128)
 15312  08CB  3000               	movlw	0
 15313  08CC  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15314  08CD  3040               	movlw	64
 15315  08CE  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15316  08CF  0022               	movlb	2	; select bank2
 15317  08D0  0845               	movf	sin@f^(0+256),w
 15318  08D1  0021               	movlb	1	; select bank1
 15319  08D2  00A3               	movwf	___ftge@ff2^(0+128)
 15320  08D3  0022               	movlb	2	; select bank2
 15321  08D4  0846               	movf	(sin@f+1)^(0+256),w
 15322  08D5  0021               	movlb	1	; select bank1
 15323  08D6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15324  08D7  0022               	movlb	2	; select bank2
 15325  08D8  0847               	movf	(sin@f+2)^(0+256),w
 15326  08D9  0021               	movlb	1	; select bank1
 15327  08DA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15328  08DB  31A1  2167  3188   	fcall	___ftge
 15329  08DE  1803               	btfsc	3,0
 15330  08DF  2900               	goto	l8498
 15331  08E0  3000               	movlw	0
 15332  08E1  0022               	movlb	2	; select bank2
 15333  08E2  00BF               	movwf	___ftsub@f2^(0+256)
 15334  08E3  3000               	movlw	0
 15335  08E4  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 15336  08E5  3040               	movlw	64
 15337  08E6  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 15338  08E7  0845               	movf	sin@f^(0+256),w
 15339  08E8  00C2               	movwf	___ftsub@f1^(0+256)
 15340  08E9  0846               	movf	(sin@f+1)^(0+256),w
 15341  08EA  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 15342  08EB  0847               	movf	(sin@f+2)^(0+256),w
 15343  08EC  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 15344  08ED  31AF  2772  3188   	fcall	___ftsub
 15345  08F0  0022               	movlb	2	; select bank2
 15346  08F1  083F               	movf	?___ftsub^(0+256),w
 15347  08F2  00C5               	movwf	sin@f^(0+256)
 15348  08F3  0840               	movf	(?___ftsub+1)^(0+256),w
 15349  08F4  00C6               	movwf	(sin@f+1)^(0+256)
 15350  08F5  0841               	movf	(?___ftsub+2)^(0+256),w
 15351  08F6  00C7               	movwf	(sin@f+2)^(0+256)
 15352  08F7  0852               	movf	sin@sgn^(0+256),w
 15353  08F8  1D03               	btfss	3,2
 15354  08F9  28FC               	goto	u8970
 15355  08FA  3001               	movlw	1
 15356  08FB  28FD               	goto	u8980
 15357  08FC                     u8970:	
 15358  08FC  3000               	movlw	0
 15359  08FD                     u8980:	
 15360  08FD  00C8               	movwf	??_sin^(0+256)
 15361  08FE  0848               	movf	??_sin^(0+256),w
 15362  08FF  00D2               	movwf	sin@sgn^(0+256)
 15363  0900                     l8498:	
 15364  0900  3000               	movlw	0
 15365  0901  0021               	movlb	1	; select bank1
 15366  0902  00A0               	movwf	___ftge@ff1^(0+128)
 15367  0903  3080               	movlw	128
 15368  0904  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15369  0905  303F               	movlw	63
 15370  0906  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15371  0907  0022               	movlb	2	; select bank2
 15372  0908  0845               	movf	sin@f^(0+256),w
 15373  0909  0021               	movlb	1	; select bank1
 15374  090A  00A3               	movwf	___ftge@ff2^(0+128)
 15375  090B  0022               	movlb	2	; select bank2
 15376  090C  0846               	movf	(sin@f+1)^(0+256),w
 15377  090D  0021               	movlb	1	; select bank1
 15378  090E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15379  090F  0022               	movlb	2	; select bank2
 15380  0910  0847               	movf	(sin@f+2)^(0+256),w
 15381  0911  0021               	movlb	1	; select bank1
 15382  0912  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15383  0913  31A1  2167  3188   	fcall	___ftge
 15384  0916  1803               	btfsc	3,0
 15385  0917  2944               	goto	l2323
 15386  0918  3000               	movlw	0
 15387  0919  0021               	movlb	1	; select bank1
 15388  091A  00C1               	movwf	___ftadd@f1^(0+128)
 15389  091B  3000               	movlw	0
 15390  091C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15391  091D  3040               	movlw	64
 15392  091E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15393  091F  0022               	movlb	2	; select bank2
 15394  0920  0845               	movf	sin@f^(0+256),w
 15395  0921  0021               	movlb	1	; select bank1
 15396  0922  00BE               	movwf	___ftneg@f1^(0+128)
 15397  0923  0022               	movlb	2	; select bank2
 15398  0924  0846               	movf	(sin@f+1)^(0+256),w
 15399  0925  0021               	movlb	1	; select bank1
 15400  0926  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15401  0927  0022               	movlb	2	; select bank2
 15402  0928  0847               	movf	(sin@f+2)^(0+256),w
 15403  0929  0021               	movlb	1	; select bank1
 15404  092A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15405  092B  31AD  259D  3188   	fcall	___ftneg
 15406  092E  0021               	movlb	1	; select bank1
 15407  092F  083E               	movf	?___ftneg^(0+128),w
 15408  0930  00C4               	movwf	___ftadd@f2^(0+128)
 15409  0931  083F               	movf	(?___ftneg+1)^(0+128),w
 15410  0932  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15411  0933  0840               	movf	(?___ftneg+2)^(0+128),w
 15412  0934  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15413  0935  3190  2020  3188   	fcall	___ftadd
 15414  0938  0021               	movlb	1	; select bank1
 15415  0939  0841               	movf	?___ftadd^(0+128),w
 15416  093A  0022               	movlb	2	; select bank2
 15417  093B  00C5               	movwf	sin@f^(0+256)
 15418  093C  0021               	movlb	1	; select bank1
 15419  093D  0842               	movf	(?___ftadd+1)^(0+128),w
 15420  093E  0022               	movlb	2	; select bank2
 15421  093F  00C6               	movwf	(sin@f+1)^(0+256)
 15422  0940  0021               	movlb	1	; select bank1
 15423  0941  0843               	movf	(?___ftadd+2)^(0+128),w
 15424  0942  0022               	movlb	2	; select bank2
 15425  0943  00C7               	movwf	(sin@f+2)^(0+256)
 15426  0944                     l2323:	
 15427  0944  0022               	movlb	2	; select bank2
 15428  0945  0845               	movf	sin@f^(0+256),w
 15429  0946  0021               	movlb	1	; select bank1
 15430  0947  00AE               	movwf	___ftmul@f1^(0+128)
 15431  0948  0022               	movlb	2	; select bank2
 15432  0949  0846               	movf	(sin@f+1)^(0+256),w
 15433  094A  0021               	movlb	1	; select bank1
 15434  094B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15435  094C  0022               	movlb	2	; select bank2
 15436  094D  0847               	movf	(sin@f+2)^(0+256),w
 15437  094E  0021               	movlb	1	; select bank1
 15438  094F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15439  0950  0022               	movlb	2	; select bank2
 15440  0951  0845               	movf	sin@f^(0+256),w
 15441  0952  0021               	movlb	1	; select bank1
 15442  0953  00B1               	movwf	___ftmul@f2^(0+128)
 15443  0954  0022               	movlb	2	; select bank2
 15444  0955  0846               	movf	(sin@f+1)^(0+256),w
 15445  0956  0021               	movlb	1	; select bank1
 15446  0957  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15447  0958  0022               	movlb	2	; select bank2
 15448  0959  0847               	movf	(sin@f+2)^(0+256),w
 15449  095A  0021               	movlb	1	; select bank1
 15450  095B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15451  095C  319E  2691  3188   	fcall	___ftmul
 15452  095F  0021               	movlb	1	; select bank1
 15453  0960  082E               	movf	?___ftmul^(0+128),w
 15454  0961  0022               	movlb	2	; select bank2
 15455  0962  00CF               	movwf	sin@x2^(0+256)
 15456  0963  0021               	movlb	1	; select bank1
 15457  0964  082F               	movf	(?___ftmul+1)^(0+128),w
 15458  0965  0022               	movlb	2	; select bank2
 15459  0966  00D0               	movwf	(sin@x2+1)^(0+256)
 15460  0967  0021               	movlb	1	; select bank1
 15461  0968  0830               	movf	(?___ftmul+2)^(0+128),w
 15462  0969  0022               	movlb	2	; select bank2
 15463  096A  00D1               	movwf	(sin@x2+2)^(0+256)
 15464  096B  084F               	movf	sin@x2^(0+256),w
 15465  096C  00B4               	movwf	eval_poly@x^(0+256)
 15466  096D  0850               	movf	(sin@x2+1)^(0+256),w
 15467  096E  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15468  096F  0851               	movf	(sin@x2+2)^(0+256),w
 15469  0970  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15470  0971  3048               	movlw	low (sin@coeff_b| (0+32768))
 15471  0972  00B7               	movwf	eval_poly@d^(0+256)
 15472  0973  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15473  0974  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15474  0975  3003               	movlw	3
 15475  0976  00B9               	movwf	eval_poly@n^(0+256)
 15476  0977  3000               	movlw	0
 15477  0978  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15478  0979  31A6  2697  3188   	fcall	_eval_poly
 15479  097C  0022               	movlb	2	; select bank2
 15480  097D  0834               	movf	?_eval_poly^(0+256),w
 15481  097E  00C9               	movwf	sin@y^(0+256)
 15482  097F  0835               	movf	(?_eval_poly+1)^(0+256),w
 15483  0980  00CA               	movwf	(sin@y+1)^(0+256)
 15484  0981  0836               	movf	(?_eval_poly+2)^(0+256),w
 15485  0982  00CB               	movwf	(sin@y+2)^(0+256)
 15486  0983  3004               	movlw	4
 15487  0984  00B9               	movwf	eval_poly@n^(0+256)
 15488  0985  3000               	movlw	0
 15489  0986  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15490  0987  3039               	movlw	low (sin@coeff_a| (0+32768))
 15491  0988  00B7               	movwf	eval_poly@d^(0+256)
 15492  0989  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15493  098A  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15494  098B  084F               	movf	sin@x2^(0+256),w
 15495  098C  00B4               	movwf	eval_poly@x^(0+256)
 15496  098D  0850               	movf	(sin@x2+1)^(0+256),w
 15497  098E  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15498  098F  0851               	movf	(sin@x2+2)^(0+256),w
 15499  0990  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15500  0991  31A6  2697  3188   	fcall	_eval_poly
 15501  0994  0022               	movlb	2	; select bank2
 15502  0995  0834               	movf	?_eval_poly^(0+256),w
 15503  0996  0021               	movlb	1	; select bank1
 15504  0997  00D1               	movwf	___ftdiv@f1^(0+128)
 15505  0998  0022               	movlb	2	; select bank2
 15506  0999  0835               	movf	(?_eval_poly+1)^(0+256),w
 15507  099A  0021               	movlb	1	; select bank1
 15508  099B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15509  099C  0022               	movlb	2	; select bank2
 15510  099D  0836               	movf	(?_eval_poly+2)^(0+256),w
 15511  099E  0021               	movlb	1	; select bank1
 15512  099F  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15513  09A0  0022               	movlb	2	; select bank2
 15514  09A1  0849               	movf	sin@y^(0+256),w
 15515  09A2  0021               	movlb	1	; select bank1
 15516  09A3  00CE               	movwf	___ftdiv@f2^(0+128)
 15517  09A4  0022               	movlb	2	; select bank2
 15518  09A5  084A               	movf	(sin@y+1)^(0+256),w
 15519  09A6  0021               	movlb	1	; select bank1
 15520  09A7  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15521  09A8  0022               	movlb	2	; select bank2
 15522  09A9  084B               	movf	(sin@y+2)^(0+256),w
 15523  09AA  0021               	movlb	1	; select bank1
 15524  09AB  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15525  09AC  319D  253D  3188   	fcall	___ftdiv
 15526  09AF  0021               	movlb	1	; select bank1
 15527  09B0  084E               	movf	?___ftdiv^(0+128),w
 15528  09B1  0022               	movlb	2	; select bank2
 15529  09B2  00CC               	movwf	_sin$2852^(0+256)
 15530  09B3  0021               	movlb	1	; select bank1
 15531  09B4  084F               	movf	(?___ftdiv+1)^(0+128),w
 15532  09B5  0022               	movlb	2	; select bank2
 15533  09B6  00CD               	movwf	(_sin$2852+1)^(0+256)
 15534  09B7  0021               	movlb	1	; select bank1
 15535  09B8  0850               	movf	(?___ftdiv+2)^(0+128),w
 15536  09B9  0022               	movlb	2	; select bank2
 15537  09BA  00CE               	movwf	(_sin$2852+2)^(0+256)
 15538  09BB  084C               	movf	_sin$2852^(0+256),w
 15539  09BC  0021               	movlb	1	; select bank1
 15540  09BD  00AE               	movwf	___ftmul@f1^(0+128)
 15541  09BE  0022               	movlb	2	; select bank2
 15542  09BF  084D               	movf	(_sin$2852+1)^(0+256),w
 15543  09C0  0021               	movlb	1	; select bank1
 15544  09C1  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15545  09C2  0022               	movlb	2	; select bank2
 15546  09C3  084E               	movf	(_sin$2852+2)^(0+256),w
 15547  09C4  0021               	movlb	1	; select bank1
 15548  09C5  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15549  09C6  0022               	movlb	2	; select bank2
 15550  09C7  0845               	movf	sin@f^(0+256),w
 15551  09C8  0021               	movlb	1	; select bank1
 15552  09C9  00B1               	movwf	___ftmul@f2^(0+128)
 15553  09CA  0022               	movlb	2	; select bank2
 15554  09CB  0846               	movf	(sin@f+1)^(0+256),w
 15555  09CC  0021               	movlb	1	; select bank1
 15556  09CD  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15557  09CE  0022               	movlb	2	; select bank2
 15558  09CF  0847               	movf	(sin@f+2)^(0+256),w
 15559  09D0  0021               	movlb	1	; select bank1
 15560  09D1  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15561  09D2  319E  2691  3188   	fcall	___ftmul
 15562  09D5  0021               	movlb	1	; select bank1
 15563  09D6  082E               	movf	?___ftmul^(0+128),w
 15564  09D7  0022               	movlb	2	; select bank2
 15565  09D8  00C5               	movwf	sin@f^(0+256)
 15566  09D9  0021               	movlb	1	; select bank1
 15567  09DA  082F               	movf	(?___ftmul+1)^(0+128),w
 15568  09DB  0022               	movlb	2	; select bank2
 15569  09DC  00C6               	movwf	(sin@f+1)^(0+256)
 15570  09DD  0021               	movlb	1	; select bank1
 15571  09DE  0830               	movf	(?___ftmul+2)^(0+128),w
 15572  09DF  0022               	movlb	2	; select bank2
 15573  09E0  00C7               	movwf	(sin@f+2)^(0+256)
 15574  09E1  0852               	movf	sin@sgn^(0+256),w
 15575  09E2  1903               	btfsc	3,2
 15576  09E3  0008               	return
 15577  09E4  0845               	movf	sin@f^(0+256),w
 15578  09E5  0021               	movlb	1	; select bank1
 15579  09E6  00BE               	movwf	___ftneg@f1^(0+128)
 15580  09E7  0022               	movlb	2	; select bank2
 15581  09E8  0846               	movf	(sin@f+1)^(0+256),w
 15582  09E9  0021               	movlb	1	; select bank1
 15583  09EA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15584  09EB  0022               	movlb	2	; select bank2
 15585  09EC  0847               	movf	(sin@f+2)^(0+256),w
 15586  09ED  0021               	movlb	1	; select bank1
 15587  09EE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15588  09EF  31AD  259D         	fcall	___ftneg
 15589  09F1  0021               	movlb	1	; select bank1
 15590  09F2  083E               	movf	?___ftneg^(0+128),w
 15591  09F3  0022               	movlb	2	; select bank2
 15592  09F4  00C5               	movwf	?_sin^(0+256)
 15593  09F5  0021               	movlb	1	; select bank1
 15594  09F6  083F               	movf	(?___ftneg+1)^(0+128),w
 15595  09F7  0022               	movlb	2	; select bank2
 15596  09F8  00C6               	movwf	(?_sin+1)^(0+256)
 15597  09F9  0021               	movlb	1	; select bank1
 15598  09FA  0840               	movf	(?___ftneg+2)^(0+128),w
 15599  09FB  0022               	movlb	2	; select bank2
 15600  09FC  00C7               	movwf	(?_sin+2)^(0+256)
 15601  09FD  0008               	return
 15602  09FE                     __end_of_sin:	
 15603                           
 15604                           	psect	text47
 15605  1C96                     __ptext47:	
 15606 ;; *************** function _floor *****************
 15607 ;; Defined at:
 15608 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15609 ;; Parameters:    Size  Location     Type
 15610 ;;  x               3   22[BANK2 ] unsigned char 
 15611 ;; Auto vars:     Size  Location     Type
 15612 ;;  i               3   26[BANK2 ] unsigned char 
 15613 ;;  expon           2   29[BANK2 ] int 
 15614 ;; Return value:  Size  Location     Type
 15615 ;;                  3   22[BANK2 ] int 
 15616 ;; Registers used:
 15617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15618 ;; Tracked objects:
 15619 ;;		On entry : 0/0
 15620 ;;		On exit  : 0/0
 15621 ;;		Unchanged: 0/0
 15622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15623 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15624 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15625 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15626 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15627 ;;Total ram usage:        9 bytes
 15628 ;; Hardware stack levels used:    1
 15629 ;; Hardware stack levels required when called:    5
 15630 ;; This function calls:
 15631 ;;		___altoft
 15632 ;;		___ftadd
 15633 ;;		___ftge
 15634 ;;		___fttol
 15635 ;;		_frexp
 15636 ;; This function is called by:
 15637 ;;		_sin
 15638 ;;		_exp
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           
 15643                           ;psect for function _floor
 15644  1C96                     _floor:	
 15645                           
 15646                           ;incstack = 0
 15647                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15648  1C96  0022               	movlb	2	; select bank2
 15649  1C97  0836               	movf	floor@x^(0+256),w
 15650  1C98  0021               	movlb	1	; select bank1
 15651  1C99  00A0               	movwf	frexp@value^(0+128)
 15652  1C9A  0022               	movlb	2	; select bank2
 15653  1C9B  0837               	movf	(floor@x+1)^(0+256),w
 15654  1C9C  0021               	movlb	1	; select bank1
 15655  1C9D  00A1               	movwf	(frexp@value+1)^(0+128)
 15656  1C9E  0022               	movlb	2	; select bank2
 15657  1C9F  0838               	movf	(floor@x+2)^(0+256),w
 15658  1CA0  0021               	movlb	1	; select bank1
 15659  1CA1  00A2               	movwf	(frexp@value+2)^(0+128)
 15660  1CA2  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15661  1CA3  0022               	movlb	2	; select bank2
 15662  1CA4  00B9               	movwf	??_floor^(0+256)
 15663  1CA5  0839               	movf	??_floor^(0+256),w
 15664  1CA6  0021               	movlb	1	; select bank1
 15665  1CA7  00A3               	movwf	frexp@eptr^(0+128)
 15666  1CA8  31A2  221E  319C   	fcall	_frexp
 15667  1CAB  0022               	movlb	2	; select bank2
 15668  1CAC  1FBE               	btfss	(floor@expon+1)^(0+256),7
 15669  1CAD  2CD4               	goto	l8060
 15670  1CAE  0836               	movf	floor@x^(0+256),w
 15671  1CAF  0021               	movlb	1	; select bank1
 15672  1CB0  00A0               	movwf	___ftge@ff1^(0+128)
 15673  1CB1  0022               	movlb	2	; select bank2
 15674  1CB2  0837               	movf	(floor@x+1)^(0+256),w
 15675  1CB3  0021               	movlb	1	; select bank1
 15676  1CB4  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15677  1CB5  0022               	movlb	2	; select bank2
 15678  1CB6  0838               	movf	(floor@x+2)^(0+256),w
 15679  1CB7  0021               	movlb	1	; select bank1
 15680  1CB8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15681  1CB9  3000               	movlw	0
 15682  1CBA  00A3               	movwf	___ftge@ff2^(0+128)
 15683  1CBB  3000               	movlw	0
 15684  1CBC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15685  1CBD  3000               	movlw	0
 15686  1CBE  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15687  1CBF  31A1  2167  319C   	fcall	___ftge
 15688  1CC2  1803               	btfsc	3,0
 15689  1CC3  2CCC               	goto	l8056
 15690  1CC4  3000               	movlw	0
 15691  1CC5  0022               	movlb	2	; select bank2
 15692  1CC6  00B6               	movwf	?_floor^(0+256)
 15693  1CC7  3080               	movlw	128
 15694  1CC8  00B7               	movwf	(?_floor+1)^(0+256)
 15695  1CC9  30BF               	movlw	191
 15696  1CCA  00B8               	movwf	(?_floor+2)^(0+256)
 15697  1CCB  0008               	return
 15698  1CCC                     l8056:	
 15699  1CCC  3000               	movlw	0
 15700  1CCD  0022               	movlb	2	; select bank2
 15701  1CCE  00B6               	movwf	?_floor^(0+256)
 15702  1CCF  3000               	movlw	0
 15703  1CD0  00B7               	movwf	(?_floor+1)^(0+256)
 15704  1CD1  3000               	movlw	0
 15705  1CD2  00B8               	movwf	(?_floor+2)^(0+256)
 15706  1CD3  0008               	return
 15707  1CD4                     l8060:	
 15708  1CD4  3000               	movlw	0
 15709  1CD5  023E               	subwf	(floor@expon+1)^(0+256),w
 15710  1CD6  3015               	movlw	21
 15711  1CD7  1903               	skipnz
 15712  1CD8  023D               	subwf	floor@expon^(0+256),w
 15713  1CD9  1803               	btfsc	3,0
 15714  1CDA  0008               	return
 15715  1CDB  0836               	movf	floor@x^(0+256),w
 15716  1CDC  00A0               	movwf	___fttol@f1^(0+256)
 15717  1CDD  0837               	movf	(floor@x+1)^(0+256),w
 15718  1CDE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15719  1CDF  0838               	movf	(floor@x+2)^(0+256),w
 15720  1CE0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15721  1CE1  3199  21D0  319C   	fcall	___fttol
 15722  1CE4  0022               	movlb	2	; select bank2
 15723  1CE5  0823               	movf	(?___fttol+3)^(0+256),w
 15724  1CE6  00B1               	movwf	(___altoft@c+3)^(0+256)
 15725  1CE7  0822               	movf	(?___fttol+2)^(0+256),w
 15726  1CE8  00B0               	movwf	(___altoft@c+2)^(0+256)
 15727  1CE9  0821               	movf	(?___fttol+1)^(0+256),w
 15728  1CEA  00AF               	movwf	(___altoft@c+1)^(0+256)
 15729  1CEB  0820               	movf	?___fttol^(0+256),w
 15730  1CEC  00AE               	movwf	___altoft@c^(0+256)
 15731  1CED  31A3  23FA  319C   	fcall	___altoft
 15732  1CF0  0022               	movlb	2	; select bank2
 15733  1CF1  082E               	movf	?___altoft^(0+256),w
 15734  1CF2  00BA               	movwf	floor@i^(0+256)
 15735  1CF3  082F               	movf	(?___altoft+1)^(0+256),w
 15736  1CF4  00BB               	movwf	(floor@i+1)^(0+256)
 15737  1CF5  0830               	movf	(?___altoft+2)^(0+256),w
 15738  1CF6  00BC               	movwf	(floor@i+2)^(0+256)
 15739  1CF7  0836               	movf	floor@x^(0+256),w
 15740  1CF8  0021               	movlb	1	; select bank1
 15741  1CF9  00A0               	movwf	___ftge@ff1^(0+128)
 15742  1CFA  0022               	movlb	2	; select bank2
 15743  1CFB  0837               	movf	(floor@x+1)^(0+256),w
 15744  1CFC  0021               	movlb	1	; select bank1
 15745  1CFD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15746  1CFE  0022               	movlb	2	; select bank2
 15747  1CFF  0838               	movf	(floor@x+2)^(0+256),w
 15748  1D00  0021               	movlb	1	; select bank1
 15749  1D01  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15750  1D02  0022               	movlb	2	; select bank2
 15751  1D03  083A               	movf	floor@i^(0+256),w
 15752  1D04  0021               	movlb	1	; select bank1
 15753  1D05  00A3               	movwf	___ftge@ff2^(0+128)
 15754  1D06  0022               	movlb	2	; select bank2
 15755  1D07  083B               	movf	(floor@i+1)^(0+256),w
 15756  1D08  0021               	movlb	1	; select bank1
 15757  1D09  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15758  1D0A  0022               	movlb	2	; select bank2
 15759  1D0B  083C               	movf	(floor@i+2)^(0+256),w
 15760  1D0C  0021               	movlb	1	; select bank1
 15761  1D0D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15762  1D0E  31A1  2167  319C   	fcall	___ftge
 15763  1D11  1803               	btfsc	3,0
 15764  1D12  2D35               	goto	l8070
 15765  1D13  3000               	movlw	0
 15766  1D14  0021               	movlb	1	; select bank1
 15767  1D15  00C1               	movwf	___ftadd@f1^(0+128)
 15768  1D16  3080               	movlw	128
 15769  1D17  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15770  1D18  30BF               	movlw	191
 15771  1D19  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15772  1D1A  0022               	movlb	2	; select bank2
 15773  1D1B  083A               	movf	floor@i^(0+256),w
 15774  1D1C  0021               	movlb	1	; select bank1
 15775  1D1D  00C4               	movwf	___ftadd@f2^(0+128)
 15776  1D1E  0022               	movlb	2	; select bank2
 15777  1D1F  083B               	movf	(floor@i+1)^(0+256),w
 15778  1D20  0021               	movlb	1	; select bank1
 15779  1D21  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15780  1D22  0022               	movlb	2	; select bank2
 15781  1D23  083C               	movf	(floor@i+2)^(0+256),w
 15782  1D24  0021               	movlb	1	; select bank1
 15783  1D25  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15784  1D26  3190  2020         	fcall	___ftadd
 15785  1D28  0021               	movlb	1	; select bank1
 15786  1D29  0841               	movf	?___ftadd^(0+128),w
 15787  1D2A  0022               	movlb	2	; select bank2
 15788  1D2B  00B6               	movwf	?_floor^(0+256)
 15789  1D2C  0021               	movlb	1	; select bank1
 15790  1D2D  0842               	movf	(?___ftadd+1)^(0+128),w
 15791  1D2E  0022               	movlb	2	; select bank2
 15792  1D2F  00B7               	movwf	(?_floor+1)^(0+256)
 15793  1D30  0021               	movlb	1	; select bank1
 15794  1D31  0843               	movf	(?___ftadd+2)^(0+128),w
 15795  1D32  0022               	movlb	2	; select bank2
 15796  1D33  00B8               	movwf	(?_floor+2)^(0+256)
 15797  1D34  0008               	return
 15798  1D35                     l8070:	
 15799  1D35  0022               	movlb	2	; select bank2
 15800  1D36  083A               	movf	floor@i^(0+256),w
 15801  1D37  00B6               	movwf	?_floor^(0+256)
 15802  1D38  083B               	movf	(floor@i+1)^(0+256),w
 15803  1D39  00B7               	movwf	(?_floor+1)^(0+256)
 15804  1D3A  083C               	movf	(floor@i+2)^(0+256),w
 15805  1D3B  00B8               	movwf	(?_floor+2)^(0+256)
 15806  1D3C  0008               	return
 15807  1D3D                     __end_of_floor:	
 15808                           
 15809                           	psect	text48
 15810  221E                     __ptext48:	
 15811 ;; *************** function _frexp *****************
 15812 ;; Defined at:
 15813 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15814 ;; Parameters:    Size  Location     Type
 15815 ;;  value           3    0[BANK1 ] int 
 15816 ;;  eptr            1    3[BANK1 ] PTR int 
 15817 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;		None
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  3    0[BANK1 ] PTR int 
 15822 ;; Registers used:
 15823 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15824 ;; Tracked objects:
 15825 ;;		On entry : 0/0
 15826 ;;		On exit  : 0/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15829 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15831 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15832 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15833 ;;Total ram usage:        6 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:    3
 15836 ;; This function calls:
 15837 ;;		Nothing
 15838 ;; This function is called by:
 15839 ;;		_trunc
 15840 ;;		_floor
 15841 ;;		_log
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           
 15846                           ;psect for function _frexp
 15847  221E                     _frexp:	
 15848                           
 15849                           ;incstack = 0
 15850                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15851  221E  0021               	movlb	1	; select bank1
 15852  221F  0822               	movf	(frexp@value+2)^(0+128),w
 15853  2220  0421               	iorwf	(frexp@value+1)^(0+128),w
 15854  2221  0420               	iorwf	frexp@value^(0+128),w
 15855  2222  1D03               	skipz
 15856  2223  2A32               	goto	l7922
 15857  2224  0823               	movf	frexp@eptr^(0+128),w
 15858  2225  0086               	movwf	6
 15859  2226  3001               	movlw	1	; select bank2/3
 15860  2227  0087               	movwf	7
 15861  2228  3000               	movlw	0
 15862  2229  3FC0               	movwi [0]fsr1
 15863  222A  3FC1               	movwi [1]fsr1
 15864  222B  3000               	movlw	0
 15865  222C  00A0               	movwf	?_frexp^(0+128)
 15866  222D  3000               	movlw	0
 15867  222E  00A1               	movwf	(?_frexp+1)^(0+128)
 15868  222F  3000               	movlw	0
 15869  2230  00A2               	movwf	(?_frexp+2)^(0+128)
 15870  2231  0008               	return
 15871  2232                     l7922:	
 15872  2232  0822               	movf	(frexp@value^(0+128)+2),w
 15873  2233  397F               	andlw	127
 15874  2234  00A4               	movwf	??_frexp^(0+128)
 15875  2235  01A5               	clrf	(??_frexp^(0+128)+1)
 15876  2236  35A4               	lslf	??_frexp^(0+128),f
 15877  2237  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15878  2238  0823               	movf	frexp@eptr^(0+128),w
 15879  2239  0086               	movwf	6
 15880  223A  3001               	movlw	1	; select bank2/3
 15881  223B  0087               	movwf	7
 15882  223C  0824               	movf	??_frexp^(0+128),w
 15883  223D  3FC0               	movwi [0]fsr1
 15884  223E  0825               	movf	(??_frexp+1)^(0+128),w
 15885  223F  3FC1               	movwi [1]fsr1
 15886  2240  0D21               	rlf	(frexp@value^(0+128)+1),w
 15887  2241  0D21               	rlf	(frexp@value^(0+128)+1),w
 15888  2242  3901               	andlw	1
 15889  2243  00A4               	movwf	??_frexp^(0+128)
 15890  2244  01A5               	clrf	(??_frexp^(0+128)+1)
 15891  2245  0823               	movf	frexp@eptr^(0+128),w
 15892  2246  0086               	movwf	6
 15893  2247  3001               	movlw	1	; select bank2/3
 15894  2248  0087               	movwf	7
 15895  2249  0824               	movf	??_frexp^(0+128),w
 15896  224A  0481               	iorwf	1,f
 15897  224B  3141               	addfsr 1,1
 15898  224C  0825               	movf	(??_frexp+1)^(0+128),w
 15899  224D  0481               	iorwf	1,f
 15900  224E  0823               	movf	frexp@eptr^(0+128),w
 15901  224F  0086               	movwf	6
 15902  2250  3001               	movlw	1	; select bank2/3
 15903  2251  0087               	movwf	7
 15904  2252  3082               	movlw	130
 15905  2253  0781               	addwf	1,f
 15906  2254  3141               	addfsr 1,1
 15907  2255  30FF               	movlw	255
 15908  2256  3D81               	addwfc	1,f
 15909  2257  317F               	addfsr 1,-1
 15910  2258  0822               	movf	(frexp@value^(0+128)+2),w
 15911  2259  3980               	andlw	-128
 15912  225A  383F               	iorlw	63
 15913  225B  00A2               	movwf	(frexp@value^(0+128)+2)
 15914  225C  13A1               	bcf	(frexp@value^(0+128)+1),7
 15915  225D  0008               	return
 15916  225E                     __end_of_frexp:	
 15917                           
 15918                           	psect	text49
 15919  19D0                     __ptext49:	
 15920 ;; *************** function ___fttol *****************
 15921 ;; Defined at:
 15922 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15923 ;; Parameters:    Size  Location     Type
 15924 ;;  f1              3    0[BANK2 ] float 
 15925 ;; Auto vars:     Size  Location     Type
 15926 ;;  lval            4    9[BANK2 ] unsigned long 
 15927 ;;  exp1            1   13[BANK2 ] unsigned char 
 15928 ;;  sign1           1    8[BANK2 ] unsigned char 
 15929 ;; Return value:  Size  Location     Type
 15930 ;;                  4    0[BANK2 ] long 
 15931 ;; Registers used:
 15932 ;;		wreg, status,2, status,0
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15938 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15939 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15940 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15941 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15942 ;;Total ram usage:       14 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    3
 15945 ;; This function calls:
 15946 ;;		Nothing
 15947 ;; This function is called by:
 15948 ;;		_main
 15949 ;;		_set_subdivision
 15950 ;;		_scaleA100kPot
 15951 ;;		_scaleA10kPot
 15952 ;;		_scaleiA10kPot
 15953 ;;		_getModulationDelayTime
 15954 ;;		_modSin
 15955 ;;		_modTri
 15956 ;;		_modSaw
 15957 ;;		_pow
 15958 ;;		_trunc
 15959 ;;		_exp
 15960 ;;		_floor
 15961 ;;		_scaleiA100kPot
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           
 15966                           ;psect for function ___fttol
 15967  19D0                     ___fttol:	
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15971  19D0  0022               	movlb	2	; select bank2
 15972  19D1  0820               	movf	___fttol@f1^(0+256),w
 15973  19D2  00A4               	movwf	??___fttol^(0+256)
 15974  19D3  0821               	movf	(___fttol@f1+1)^(0+256),w
 15975  19D4  00A5               	movwf	(??___fttol^(0+256)+1)
 15976  19D5  0822               	movf	(___fttol@f1+2)^(0+256),w
 15977  19D6  00A6               	movwf	(??___fttol^(0+256)+2)
 15978  19D7  1003               	clrc
 15979  19D8  0D25               	rlf	(??___fttol^(0+256)+1),w
 15980  19D9  0D26               	rlf	(??___fttol^(0+256)+2),w
 15981  19DA  00A7               	movwf	(??___fttol+3)^(0+256)
 15982  19DB  0827               	movf	(??___fttol+3)^(0+256),w
 15983  19DC  00AD               	movwf	___fttol@exp1^(0+256)
 15984  19DD  082D               	movf	___fttol@exp1^(0+256),w
 15985  19DE  1D03               	btfss	3,2
 15986  19DF  29E9               	goto	l7878
 15987  19E0  3000               	movlw	0
 15988  19E1  00A3               	movwf	(?___fttol+3)^(0+256)
 15989  19E2  3000               	movlw	0
 15990  19E3  00A2               	movwf	(?___fttol+2)^(0+256)
 15991  19E4  3000               	movlw	0
 15992  19E5  00A1               	movwf	(?___fttol+1)^(0+256)
 15993  19E6  3000               	movlw	0
 15994  19E7  00A0               	movwf	?___fttol^(0+256)
 15995  19E8  0008               	return
 15996  19E9                     l7878:	
 15997  19E9  0820               	movf	___fttol@f1^(0+256),w
 15998  19EA  00A4               	movwf	??___fttol^(0+256)
 15999  19EB  0821               	movf	(___fttol@f1+1)^(0+256),w
 16000  19EC  00A5               	movwf	(??___fttol^(0+256)+1)
 16001  19ED  0822               	movf	(___fttol@f1+2)^(0+256),w
 16002  19EE  00A6               	movwf	(??___fttol^(0+256)+2)
 16003  19EF  3017               	movlw	23
 16004  19F0                     u8285:	
 16005  19F0  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16006  19F1  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16007  19F2  0CA4               	rrf	??___fttol^(0+256),f
 16008  19F3  0B89               	decfsz	9,f
 16009  19F4  29F0               	goto	u8285
 16010  19F5  0824               	movf	??___fttol^(0+256),w
 16011  19F6  00A7               	movwf	(??___fttol+3)^(0+256)
 16012  19F7  0827               	movf	(??___fttol+3)^(0+256),w
 16013  19F8  00A8               	movwf	___fttol@sign1^(0+256)
 16014  19F9  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16015  19FA  30FF               	movlw	255
 16016  19FB  05A0               	andwf	___fttol@f1^(0+256),f
 16017  19FC  30FF               	movlw	255
 16018  19FD  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16019  19FE  3000               	movlw	0
 16020  19FF  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16021  1A00  0820               	movf	___fttol@f1^(0+256),w
 16022  1A01  00A9               	movwf	___fttol@lval^(0+256)
 16023  1A02  0821               	movf	(___fttol@f1+1)^(0+256),w
 16024  1A03  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16025  1A04  0822               	movf	(___fttol@f1+2)^(0+256),w
 16026  1A05  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16027  1A06  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16028  1A07  308E               	movlw	142
 16029  1A08  02AD               	subwf	___fttol@exp1^(0+256),f
 16030  1A09  1FAD               	btfss	___fttol@exp1^(0+256),7
 16031  1A0A  2A27               	goto	l7898
 16032  1A0B  082D               	movf	___fttol@exp1^(0+256),w
 16033  1A0C  3A80               	xorlw	128
 16034  1A0D  3E8F               	addlw	143
 16035  1A0E  1803               	skipnc
 16036  1A0F  2A19               	goto	l7896
 16037  1A10  3000               	movlw	0
 16038  1A11  00A3               	movwf	(?___fttol+3)^(0+256)
 16039  1A12  3000               	movlw	0
 16040  1A13  00A2               	movwf	(?___fttol+2)^(0+256)
 16041  1A14  3000               	movlw	0
 16042  1A15  00A1               	movwf	(?___fttol+1)^(0+256)
 16043  1A16  3000               	movlw	0
 16044  1A17  00A0               	movwf	?___fttol^(0+256)
 16045  1A18  0008               	return
 16046  1A19                     l7896:	
 16047  1A19  3001               	movlw	1
 16048  1A1A                     u8315:	
 16049  1A1A  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16050  1A1B  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16051  1A1C  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16052  1A1D  0CA9               	rrf	___fttol@lval^(0+256),f
 16053  1A1E  0B89               	decfsz	9,f
 16054  1A1F  2A1A               	goto	u8315
 16055  1A20  3001               	movlw	1
 16056  1A21  00A4               	movwf	??___fttol^(0+256)
 16057  1A22  0824               	movf	??___fttol^(0+256),w
 16058  1A23  07AD               	addwf	___fttol@exp1^(0+256),f
 16059  1A24  1903               	btfsc	3,2
 16060  1A25  2A40               	goto	l7906
 16061  1A26  2A19               	goto	l7896
 16062  1A27                     l7898:	
 16063  1A27  3018               	movlw	24
 16064  1A28  022D               	subwf	___fttol@exp1^(0+256),w
 16065  1A29  1C03               	skipc
 16066  1A2A  2A3D               	goto	l2193
 16067  1A2B  3000               	movlw	0
 16068  1A2C  00A3               	movwf	(?___fttol+3)^(0+256)
 16069  1A2D  3000               	movlw	0
 16070  1A2E  00A2               	movwf	(?___fttol+2)^(0+256)
 16071  1A2F  3000               	movlw	0
 16072  1A30  00A1               	movwf	(?___fttol+1)^(0+256)
 16073  1A31  3000               	movlw	0
 16074  1A32  00A0               	movwf	?___fttol^(0+256)
 16075  1A33  0008               	return
 16076  1A34                     l7904:	
 16077  1A34  3001               	movlw	1
 16078  1A35                     u8345:	
 16079  1A35  35A9               	lslf	___fttol@lval^(0+256),f
 16080  1A36  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16081  1A37  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16082  1A38  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16083  1A39  0B89               	decfsz	9,f
 16084  1A3A  2A35               	goto	u8345
 16085  1A3B  3001               	movlw	1
 16086  1A3C  02AD               	subwf	___fttol@exp1^(0+256),f
 16087  1A3D                     l2193:	
 16088  1A3D  082D               	movf	___fttol@exp1^(0+256),w
 16089  1A3E  1D03               	btfss	3,2
 16090  1A3F  2A34               	goto	l7904
 16091  1A40                     l7906:	
 16092  1A40  0828               	movf	___fttol@sign1^(0+256),w
 16093  1A41  1903               	btfsc	3,2
 16094  1A42  2A4E               	goto	l7910
 16095  1A43  09A9               	comf	___fttol@lval^(0+256),f
 16096  1A44  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16097  1A45  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16098  1A46  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16099  1A47  0AA9               	incf	___fttol@lval^(0+256),f
 16100  1A48  1903               	skipnz
 16101  1A49  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16102  1A4A  1903               	skipnz
 16103  1A4B  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16104  1A4C  1903               	skipnz
 16105  1A4D  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16106  1A4E                     l7910:	
 16107  1A4E  082C               	movf	(___fttol@lval+3)^(0+256),w
 16108  1A4F  00A3               	movwf	(?___fttol+3)^(0+256)
 16109  1A50  082B               	movf	(___fttol@lval+2)^(0+256),w
 16110  1A51  00A2               	movwf	(?___fttol+2)^(0+256)
 16111  1A52  082A               	movf	(___fttol@lval+1)^(0+256),w
 16112  1A53  00A1               	movwf	(?___fttol+1)^(0+256)
 16113  1A54  0829               	movf	___fttol@lval^(0+256),w
 16114  1A55  00A0               	movwf	?___fttol^(0+256)
 16115  1A56  0008               	return
 16116  1A57                     __end_of___fttol:	
 16117                           
 16118                           	psect	text50
 16119  2167                     __ptext50:	
 16120 ;; *************** function ___ftge *****************
 16121 ;; Defined at:
 16122 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;  ff1             3    0[BANK1 ] float 
 16125 ;;  ff2             3    3[BANK1 ] float 
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;		None
 16128 ;; Return value:  Size  Location     Type
 16129 ;;		None               void
 16130 ;; Registers used:
 16131 ;;		wreg, status,2, status,0
 16132 ;; Tracked objects:
 16133 ;;		On entry : 0/0
 16134 ;;		On exit  : 0/0
 16135 ;;		Unchanged: 0/0
 16136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16137 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16139 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16140 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16141 ;;Total ram usage:        9 bytes
 16142 ;; Hardware stack levels used:    1
 16143 ;; Hardware stack levels required when called:    3
 16144 ;; This function calls:
 16145 ;;		Nothing
 16146 ;; This function is called by:
 16147 ;;		_modSin
 16148 ;;		_modTri
 16149 ;;		_modSaw
 16150 ;;		_modSquare
 16151 ;;		_pow
 16152 ;;		_sin
 16153 ;;		_exp
 16154 ;;		_floor
 16155 ;;		_ldexp
 16156 ;;		_log
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           
 16161                           ;psect for function ___ftge
 16162  2167                     ___ftge:	
 16163                           
 16164                           ;incstack = 0
 16165                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16166  2167  0021               	movlb	1	; select bank1
 16167  2168  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16168  2169  297E               	goto	l7798
 16169  216A  0920               	comf	___ftge@ff1^(0+128),w
 16170  216B  00A6               	movwf	??___ftge^(0+128)
 16171  216C  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16172  216D  00A7               	movwf	(??___ftge^(0+128)+1)
 16173  216E  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16174  216F  00A8               	movwf	(??___ftge^(0+128)+2)
 16175  2170  0AA6               	incf	??___ftge^(0+128),f
 16176  2171  1903               	skipnz
 16177  2172  0AA7               	incf	(??___ftge^(0+128)+1),f
 16178  2173  1903               	skipnz
 16179  2174  0AA8               	incf	(??___ftge^(0+128)+2),f
 16180  2175  3000               	movlw	0
 16181  2176  0726               	addwf	??___ftge^(0+128),w
 16182  2177  00A0               	movwf	___ftge@ff1^(0+128)
 16183  2178  3000               	movlw	0
 16184  2179  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16185  217A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16186  217B  3080               	movlw	128
 16187  217C  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16188  217D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16189  217E                     l7798:	
 16190  217E  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16191  217F  2994               	goto	l7802
 16192  2180  0923               	comf	___ftge@ff2^(0+128),w
 16193  2181  00A6               	movwf	??___ftge^(0+128)
 16194  2182  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16195  2183  00A7               	movwf	(??___ftge^(0+128)+1)
 16196  2184  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16197  2185  00A8               	movwf	(??___ftge^(0+128)+2)
 16198  2186  0AA6               	incf	??___ftge^(0+128),f
 16199  2187  1903               	skipnz
 16200  2188  0AA7               	incf	(??___ftge^(0+128)+1),f
 16201  2189  1903               	skipnz
 16202  218A  0AA8               	incf	(??___ftge^(0+128)+2),f
 16203  218B  3000               	movlw	0
 16204  218C  0726               	addwf	??___ftge^(0+128),w
 16205  218D  00A3               	movwf	___ftge@ff2^(0+128)
 16206  218E  3000               	movlw	0
 16207  218F  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16208  2190  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16209  2191  3080               	movlw	128
 16210  2192  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16211  2193  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16212  2194                     l7802:	
 16213  2194  3080               	movlw	128
 16214  2195  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16215  2196  3080               	movlw	128
 16216  2197  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16217  2198  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16218  2199  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16219  219A  1D03               	skipz
 16220  219B  0008               	return
 16221  219C  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16222  219D  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16223  219E  1D03               	skipz
 16224  219F  0008               	return
 16225  21A0  0823               	movf	___ftge@ff2^(0+128),w
 16226  21A1  0220               	subwf	___ftge@ff1^(0+128),w
 16227  21A2  0008               	return
 16228  21A3                     __end_of___ftge:	
 16229                           
 16230                           	psect	text51
 16231  23FA                     __ptext51:	
 16232 ;; *************** function ___altoft *****************
 16233 ;; Defined at:
 16234 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;  c               4   14[BANK2 ] long 
 16237 ;; Auto vars:     Size  Location     Type
 16238 ;;  sign            1   21[BANK2 ] unsigned char 
 16239 ;;  exp             1   20[BANK2 ] unsigned char 
 16240 ;; Return value:  Size  Location     Type
 16241 ;;                  3   14[BANK2 ] float 
 16242 ;; Registers used:
 16243 ;;		wreg, status,2, status,0, pclath, cstack
 16244 ;; Tracked objects:
 16245 ;;		On entry : 0/0
 16246 ;;		On exit  : 0/0
 16247 ;;		Unchanged: 0/0
 16248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16249 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16250 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16251 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16252 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16253 ;;Total ram usage:        8 bytes
 16254 ;; Hardware stack levels used:    1
 16255 ;; Hardware stack levels required when called:    4
 16256 ;; This function calls:
 16257 ;;		___ftpack
 16258 ;; This function is called by:
 16259 ;;		_getModulationDelayTime
 16260 ;;		_trunc
 16261 ;;		_floor
 16262 ;; This function uses a non-reentrant model
 16263 ;;
 16264                           
 16265                           
 16266                           ;psect for function ___altoft
 16267  23FA                     ___altoft:	
 16268                           
 16269                           ;incstack = 0
 16270                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16271  23FA  0022               	movlb	2	; select bank2
 16272  23FB  01B5               	clrf	___altoft@sign^(0+256)
 16273  23FC  308E               	movlw	142
 16274  23FD  00B2               	movwf	??___altoft^(0+256)
 16275  23FE  0832               	movf	??___altoft^(0+256),w
 16276  23FF  00B4               	movwf	___altoft@exp^(0+256)
 16277  2400  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 16278  2401  2C0F               	goto	l7718
 16279  2402  09AE               	comf	___altoft@c^(0+256),f
 16280  2403  09AF               	comf	(___altoft@c+1)^(0+256),f
 16281  2404  09B0               	comf	(___altoft@c+2)^(0+256),f
 16282  2405  09B1               	comf	(___altoft@c+3)^(0+256),f
 16283  2406  0AAE               	incf	___altoft@c^(0+256),f
 16284  2407  1903               	skipnz
 16285  2408  0AAF               	incf	(___altoft@c+1)^(0+256),f
 16286  2409  1903               	skipnz
 16287  240A  0AB0               	incf	(___altoft@c+2)^(0+256),f
 16288  240B  1903               	skipnz
 16289  240C  0AB1               	incf	(___altoft@c+3)^(0+256),f
 16290  240D  01B5               	clrf	___altoft@sign^(0+256)
 16291  240E  0AB5               	incf	___altoft@sign^(0+256),f
 16292  240F                     l7718:	
 16293  240F  30FF               	movlw	255
 16294  2410  0531               	andwf	(___altoft@c+3)^(0+256),w
 16295  2411  1903               	btfsc	3,2
 16296  2412  2C1F               	goto	l7720
 16297  2413  3001               	movlw	1
 16298  2414                     u7865:	
 16299  2414  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 16300  2415  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 16301  2416  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 16302  2417  0CAE               	rrf	___altoft@c^(0+256),f
 16303  2418  0B89               	decfsz	9,f
 16304  2419  2C14               	goto	u7865
 16305  241A  3001               	movlw	1
 16306  241B  00B2               	movwf	??___altoft^(0+256)
 16307  241C  0832               	movf	??___altoft^(0+256),w
 16308  241D  07B4               	addwf	___altoft@exp^(0+256),f
 16309  241E  2C0F               	goto	l7718
 16310  241F                     l7720:	
 16311  241F  082E               	movf	___altoft@c^(0+256),w
 16312  2420  0021               	movlb	1	; select bank1
 16313  2421  00A0               	movwf	___ftpack@arg^(0+128)
 16314  2422  0022               	movlb	2	; select bank2
 16315  2423  082F               	movf	(___altoft@c+1)^(0+256),w
 16316  2424  0021               	movlb	1	; select bank1
 16317  2425  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16318  2426  0022               	movlb	2	; select bank2
 16319  2427  0830               	movf	(___altoft@c+2)^(0+256),w
 16320  2428  0021               	movlb	1	; select bank1
 16321  2429  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16322  242A  0022               	movlb	2	; select bank2
 16323  242B  0834               	movf	___altoft@exp^(0+256),w
 16324  242C  00B2               	movwf	??___altoft^(0+256)
 16325  242D  0832               	movf	??___altoft^(0+256),w
 16326  242E  0021               	movlb	1	; select bank1
 16327  242F  00A3               	movwf	___ftpack@exp^(0+128)
 16328  2430  0022               	movlb	2	; select bank2
 16329  2431  0835               	movf	___altoft@sign^(0+256),w
 16330  2432  00B3               	movwf	(??___altoft+1)^(0+256)
 16331  2433  0833               	movf	(??___altoft+1)^(0+256),w
 16332  2434  0021               	movlb	1	; select bank1
 16333  2435  00A4               	movwf	___ftpack@sign^(0+128)
 16334  2436  31A6  2632         	fcall	___ftpack
 16335  2438  0021               	movlb	1	; select bank1
 16336  2439  0820               	movf	?___ftpack^(0+128),w
 16337  243A  0022               	movlb	2	; select bank2
 16338  243B  00AE               	movwf	?___altoft^(0+256)
 16339  243C  0021               	movlb	1	; select bank1
 16340  243D  0821               	movf	(?___ftpack+1)^(0+128),w
 16341  243E  0022               	movlb	2	; select bank2
 16342  243F  00AF               	movwf	(?___altoft+1)^(0+256)
 16343  2440  0021               	movlb	1	; select bank1
 16344  2441  0822               	movf	(?___ftpack+2)^(0+128),w
 16345  2442  0022               	movlb	2	; select bank2
 16346  2443  00B0               	movwf	(?___altoft+2)^(0+256)
 16347  2444  0008               	return
 16348  2445                     __end_of___altoft:	
 16349                           
 16350                           	psect	text52
 16351  2697                     __ptext52:	
 16352 ;; *************** function _eval_poly *****************
 16353 ;; Defined at:
 16354 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16355 ;; Parameters:    Size  Location     Type
 16356 ;;  x               3   20[BANK2 ] float 
 16357 ;;  d               2   23[BANK2 ] PTR const 
 16358 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16359 ;;  n               2   25[BANK2 ] int 
 16360 ;; Auto vars:     Size  Location     Type
 16361 ;;  res             3   27[BANK2 ] int 
 16362 ;; Return value:  Size  Location     Type
 16363 ;;                  3   20[BANK2 ] int 
 16364 ;; Registers used:
 16365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16366 ;; Tracked objects:
 16367 ;;		On entry : 0/0
 16368 ;;		On exit  : 0/0
 16369 ;;		Unchanged: 0/0
 16370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16371 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16372 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16374 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16375 ;;Total ram usage:       10 bytes
 16376 ;; Hardware stack levels used:    1
 16377 ;; Hardware stack levels required when called:    5
 16378 ;; This function calls:
 16379 ;;		___ftadd
 16380 ;;		___ftmul
 16381 ;;		___wmul
 16382 ;; This function is called by:
 16383 ;;		_sin
 16384 ;;		_exp
 16385 ;;		_log
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function _eval_poly
 16391  2697                     _eval_poly:	
 16392                           
 16393                           ;incstack = 0
 16394                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16395  2697  0022               	movlb	2	; select bank2
 16396  2698  083A               	movf	(eval_poly@n+1)^(0+256),w
 16397  2699  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16398  269A  0839               	movf	eval_poly@n^(0+256),w
 16399  269B  00AE               	movwf	___wmul@multiplier^(0+256)
 16400  269C  3003               	movlw	3
 16401  269D  00B0               	movwf	___wmul@multiplicand^(0+256)
 16402  269E  3000               	movlw	0
 16403  269F  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16404  26A0  31AE  2641  31A6   	fcall	___wmul
 16405  26A3  0022               	movlb	2	; select bank2
 16406  26A4  0837               	movf	eval_poly@d^(0+256),w
 16407  26A5  072E               	addwf	?___wmul^(0+256),w
 16408  26A6  0084               	movwf	4
 16409  26A7  0838               	movf	(eval_poly@d+1)^(0+256),w
 16410  26A8  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16411  26A9  0085               	movwf	5
 16412  26AA  3F00               	moviw [0]fsr0
 16413  26AB  00BB               	movwf	eval_poly@res^(0+256)
 16414  26AC  3F01               	moviw [1]fsr0
 16415  26AD  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16416  26AE  3F02               	moviw [2]fsr0
 16417  26AF                     L20:	
 16418  26AF  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16419  26B0  0839               	movf	eval_poly@n^(0+256),w
 16420  26B1  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16421  26B2  1903               	btfsc	3,2
 16422  26B3  2F02               	goto	l8080
 16423  26B4  30FF               	movlw	255
 16424  26B5  07B9               	addwf	eval_poly@n^(0+256),f
 16425  26B6  30FF               	movlw	255
 16426  26B7  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16427  26B8  083A               	movf	(eval_poly@n+1)^(0+256),w
 16428  26B9  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16429  26BA  0839               	movf	eval_poly@n^(0+256),w
 16430  26BB  00AE               	movwf	___wmul@multiplier^(0+256)
 16431  26BC  3003               	movlw	3
 16432  26BD  00B0               	movwf	___wmul@multiplicand^(0+256)
 16433  26BE  3000               	movlw	0
 16434  26BF  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16435  26C0  31AE  2641  31A6   	fcall	___wmul
 16436  26C3  0022               	movlb	2	; select bank2
 16437  26C4  0837               	movf	eval_poly@d^(0+256),w
 16438  26C5  072E               	addwf	?___wmul^(0+256),w
 16439  26C6  0084               	movwf	4
 16440  26C7  0838               	movf	(eval_poly@d+1)^(0+256),w
 16441  26C8  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16442  26C9  0085               	movwf	5
 16443  26CA  3F00               	moviw [0]fsr0
 16444  26CB  0021               	movlb	1	; select bank1
 16445  26CC  00C1               	movwf	___ftadd@f1^(0+128)
 16446  26CD  3F01               	moviw [1]fsr0
 16447  26CE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16448  26CF  3F02               	moviw [2]fsr0
 16449  26D0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16450  26D1  0022               	movlb	2	; select bank2
 16451  26D2  083B               	movf	eval_poly@res^(0+256),w
 16452  26D3  0021               	movlb	1	; select bank1
 16453  26D4  00AE               	movwf	___ftmul@f1^(0+128)
 16454  26D5  0022               	movlb	2	; select bank2
 16455  26D6  083C               	movf	(eval_poly@res+1)^(0+256),w
 16456  26D7  0021               	movlb	1	; select bank1
 16457  26D8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16458  26D9  0022               	movlb	2	; select bank2
 16459  26DA  083D               	movf	(eval_poly@res+2)^(0+256),w
 16460  26DB  0021               	movlb	1	; select bank1
 16461  26DC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16462  26DD  0022               	movlb	2	; select bank2
 16463  26DE  0834               	movf	eval_poly@x^(0+256),w
 16464  26DF  0021               	movlb	1	; select bank1
 16465  26E0  00B1               	movwf	___ftmul@f2^(0+128)
 16466  26E1  0022               	movlb	2	; select bank2
 16467  26E2  0835               	movf	(eval_poly@x+1)^(0+256),w
 16468  26E3  0021               	movlb	1	; select bank1
 16469  26E4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16470  26E5  0022               	movlb	2	; select bank2
 16471  26E6  0836               	movf	(eval_poly@x+2)^(0+256),w
 16472  26E7  0021               	movlb	1	; select bank1
 16473  26E8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16474  26E9  319E  2691  31A6   	fcall	___ftmul
 16475  26EC  0021               	movlb	1	; select bank1
 16476  26ED  082E               	movf	?___ftmul^(0+128),w
 16477  26EE  00C4               	movwf	___ftadd@f2^(0+128)
 16478  26EF  082F               	movf	(?___ftmul+1)^(0+128),w
 16479  26F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16480  26F1  0830               	movf	(?___ftmul+2)^(0+128),w
 16481  26F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16482  26F3  3190  2020  31A6   	fcall	___ftadd
 16483  26F6  0021               	movlb	1	; select bank1
 16484  26F7  0841               	movf	?___ftadd^(0+128),w
 16485  26F8  0022               	movlb	2	; select bank2
 16486  26F9  00BB               	movwf	eval_poly@res^(0+256)
 16487  26FA  0021               	movlb	1	; select bank1
 16488  26FB  0842               	movf	(?___ftadd+1)^(0+128),w
 16489  26FC  0022               	movlb	2	; select bank2
 16490  26FD  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16491  26FE  0021               	movlb	1	; select bank1
 16492  26FF  0843               	movf	(?___ftadd+2)^(0+128),w
 16493  2700  0022               	movlb	2	; select bank2
 16494  2701  2EAF               	goto	L20
 16495  2702                     l8080:	
 16496  2702  083B               	movf	eval_poly@res^(0+256),w
 16497  2703  00B4               	movwf	?_eval_poly^(0+256)
 16498  2704  083C               	movf	(eval_poly@res+1)^(0+256),w
 16499  2705  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16500  2706  083D               	movf	(eval_poly@res+2)^(0+256),w
 16501  2707  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16502  2708  0008               	return
 16503  2709                     __end_of_eval_poly:	
 16504                           
 16505                           	psect	text53
 16506  2E41                     __ptext53:	
 16507 ;; *************** function ___wmul *****************
 16508 ;; Defined at:
 16509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16510 ;; Parameters:    Size  Location     Type
 16511 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16512 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16513 ;; Auto vars:     Size  Location     Type
 16514 ;;  product         2   18[BANK2 ] unsigned int 
 16515 ;; Return value:  Size  Location     Type
 16516 ;;                  2   14[BANK2 ] unsigned int 
 16517 ;; Registers used:
 16518 ;;		wreg, status,2, status,0
 16519 ;; Tracked objects:
 16520 ;;		On entry : 0/0
 16521 ;;		On exit  : 0/0
 16522 ;;		Unchanged: 0/0
 16523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16524 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16525 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16527 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16528 ;;Total ram usage:        6 bytes
 16529 ;; Hardware stack levels used:    1
 16530 ;; Hardware stack levels required when called:    3
 16531 ;; This function calls:
 16532 ;;		Nothing
 16533 ;; This function is called by:
 16534 ;;		_calcSinArray
 16535 ;;		_getModulationDelayTime
 16536 ;;		_updateModulationArray
 16537 ;;		_modSin
 16538 ;;		_eval_poly
 16539 ;; This function uses a non-reentrant model
 16540 ;;
 16541                           
 16542                           
 16543                           ;psect for function ___wmul
 16544  2E41                     ___wmul:	
 16545                           
 16546                           ;incstack = 0
 16547                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16548  2E41  0022               	movlb	2	; select bank2
 16549  2E42  01B2               	clrf	___wmul@product^(0+256)
 16550  2E43  01B3               	clrf	(___wmul@product+1)^(0+256)
 16551  2E44                     l7696:	
 16552  2E44  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16553  2E45  2E4A               	goto	l1941
 16554  2E46  0830               	movf	___wmul@multiplicand^(0+256),w
 16555  2E47  07B2               	addwf	___wmul@product^(0+256),f
 16556  2E48  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16557  2E49  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16558  2E4A                     l1941:	
 16559  2E4A  3001               	movlw	1
 16560  2E4B                     u7825:	
 16561  2E4B  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16562  2E4C  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16563  2E4D  0B89               	decfsz	9,f
 16564  2E4E  2E4B               	goto	u7825
 16565  2E4F  3001               	movlw	1
 16566  2E50                     u7835:	
 16567  2E50  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16568  2E51  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16569  2E52  0B89               	decfsz	9,f
 16570  2E53  2E50               	goto	u7835
 16571  2E54  082E               	movf	___wmul@multiplier^(0+256),w
 16572  2E55  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16573  2E56  1D03               	btfss	3,2
 16574  2E57  2E44               	goto	l7696
 16575  2E58  0833               	movf	(___wmul@product+1)^(0+256),w
 16576  2E59  00AF               	movwf	(?___wmul+1)^(0+256)
 16577  2E5A  0832               	movf	___wmul@product^(0+256),w
 16578  2E5B  00AE               	movwf	?___wmul^(0+256)
 16579  2E5C  0008               	return
 16580  2E5D                     __end_of___wmul:	
 16581                           
 16582                           	psect	text54
 16583  1E91                     __ptext54:	
 16584 ;; *************** function ___ftmul *****************
 16585 ;; Defined at:
 16586 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;  f1              3   14[BANK1 ] float 
 16589 ;;  f2              3   17[BANK1 ] float 
 16590 ;; Auto vars:     Size  Location     Type
 16591 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16592 ;;  sign            1   29[BANK1 ] unsigned char 
 16593 ;;  cntr            1   28[BANK1 ] unsigned char 
 16594 ;;  exp             1   24[BANK1 ] unsigned char 
 16595 ;; Return value:  Size  Location     Type
 16596 ;;                  3   14[BANK1 ] float 
 16597 ;; Registers used:
 16598 ;;		wreg, status,2, status,0, pclath, cstack
 16599 ;; Tracked objects:
 16600 ;;		On entry : 0/0
 16601 ;;		On exit  : 0/0
 16602 ;;		Unchanged: 0/0
 16603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16604 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16605 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16606 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16607 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16608 ;;Total ram usage:       16 bytes
 16609 ;; Hardware stack levels used:    1
 16610 ;; Hardware stack levels required when called:    4
 16611 ;; This function calls:
 16612 ;;		___ftpack
 16613 ;; This function is called by:
 16614 ;;		_set_subdivision
 16615 ;;		_map
 16616 ;;		_scaleA100kPot
 16617 ;;		_scaleA10kPot
 16618 ;;		_scaleiA10kPot
 16619 ;;		_calcSinArray
 16620 ;;		_modSin
 16621 ;;		_modTri
 16622 ;;		_modSaw
 16623 ;;		_pow
 16624 ;;		_sin
 16625 ;;		_eval_poly
 16626 ;;		_exp
 16627 ;;		_log
 16628 ;;		_scalePotValue
 16629 ;;		_scaleiA100kPot
 16630 ;; This function uses a non-reentrant model
 16631 ;;
 16632                           
 16633                           
 16634                           ;psect for function ___ftmul
 16635  1E91                     ___ftmul:	
 16636                           
 16637                           ;incstack = 0
 16638                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16639  1E91  0021               	movlb	1	; select bank1
 16640  1E92  082E               	movf	___ftmul@f1^(0+128),w
 16641  1E93  00B4               	movwf	??___ftmul^(0+128)
 16642  1E94  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16643  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 16644  1E96  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16645  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 16646  1E98  1003               	clrc
 16647  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16648  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16649  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16650  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 16651  1E9D  00B8               	movwf	___ftmul@exp^(0+128)
 16652  1E9E  0838               	movf	___ftmul@exp^(0+128),w
 16653  1E9F  1D03               	btfss	3,2
 16654  1EA0  2EA8               	goto	l7820
 16655  1EA1  3000               	movlw	0
 16656  1EA2  00AE               	movwf	?___ftmul^(0+128)
 16657  1EA3  3000               	movlw	0
 16658  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 16659  1EA5  3000               	movlw	0
 16660  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 16661  1EA7  0008               	return
 16662  1EA8                     l7820:	
 16663  1EA8  0831               	movf	___ftmul@f2^(0+128),w
 16664  1EA9  00B4               	movwf	??___ftmul^(0+128)
 16665  1EAA  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16666  1EAB  00B5               	movwf	(??___ftmul^(0+128)+1)
 16667  1EAC  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16668  1EAD  00B6               	movwf	(??___ftmul^(0+128)+2)
 16669  1EAE  1003               	clrc
 16670  1EAF  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16671  1EB0  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16672  1EB1  00B7               	movwf	(??___ftmul+3)^(0+128)
 16673  1EB2  0837               	movf	(??___ftmul+3)^(0+128),w
 16674  1EB3  00BD               	movwf	___ftmul@sign^(0+128)
 16675  1EB4  083D               	movf	___ftmul@sign^(0+128),w
 16676  1EB5  1D03               	btfss	3,2
 16677  1EB6  2EBE               	goto	l7826
 16678  1EB7  3000               	movlw	0
 16679  1EB8  00AE               	movwf	?___ftmul^(0+128)
 16680  1EB9  3000               	movlw	0
 16681  1EBA  00AF               	movwf	(?___ftmul+1)^(0+128)
 16682  1EBB  3000               	movlw	0
 16683  1EBC  00B0               	movwf	(?___ftmul+2)^(0+128)
 16684  1EBD  0008               	return
 16685  1EBE                     l7826:	
 16686  1EBE  083D               	movf	___ftmul@sign^(0+128),w
 16687  1EBF  3E7B               	addlw	123
 16688  1EC0  00B4               	movwf	??___ftmul^(0+128)
 16689  1EC1  0834               	movf	??___ftmul^(0+128),w
 16690  1EC2  07B8               	addwf	___ftmul@exp^(0+128),f
 16691  1EC3  082E               	movf	___ftmul@f1^(0+128),w
 16692  1EC4  00B4               	movwf	??___ftmul^(0+128)
 16693  1EC5  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16694  1EC6  00B5               	movwf	(??___ftmul^(0+128)+1)
 16695  1EC7  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16696  1EC8  00B6               	movwf	(??___ftmul^(0+128)+2)
 16697  1EC9  3010               	movlw	16
 16698  1ECA                     u8165:	
 16699  1ECA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16700  1ECB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16701  1ECC  0CB4               	rrf	??___ftmul^(0+128),f
 16702  1ECD  0B89               	decfsz	9,f
 16703  1ECE  2ECA               	goto	u8165
 16704  1ECF  0834               	movf	??___ftmul^(0+128),w
 16705  1ED0  00B7               	movwf	(??___ftmul+3)^(0+128)
 16706  1ED1  0837               	movf	(??___ftmul+3)^(0+128),w
 16707  1ED2  00BD               	movwf	___ftmul@sign^(0+128)
 16708  1ED3  0831               	movf	___ftmul@f2^(0+128),w
 16709  1ED4  00B4               	movwf	??___ftmul^(0+128)
 16710  1ED5  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16711  1ED6  00B5               	movwf	(??___ftmul^(0+128)+1)
 16712  1ED7  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16713  1ED8  00B6               	movwf	(??___ftmul^(0+128)+2)
 16714  1ED9  3010               	movlw	16
 16715  1EDA                     u8175:	
 16716  1EDA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16717  1EDB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16718  1EDC  0CB4               	rrf	??___ftmul^(0+128),f
 16719  1EDD  0B89               	decfsz	9,f
 16720  1EDE  2EDA               	goto	u8175
 16721  1EDF  0834               	movf	??___ftmul^(0+128),w
 16722  1EE0  00B7               	movwf	(??___ftmul+3)^(0+128)
 16723  1EE1  0837               	movf	(??___ftmul+3)^(0+128),w
 16724  1EE2  06BD               	xorwf	___ftmul@sign^(0+128),f
 16725  1EE3  3080               	movlw	128
 16726  1EE4  00B4               	movwf	??___ftmul^(0+128)
 16727  1EE5  0834               	movf	??___ftmul^(0+128),w
 16728  1EE6  05BD               	andwf	___ftmul@sign^(0+128),f
 16729  1EE7  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16730  1EE8  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16731  1EE9  30FF               	movlw	255
 16732  1EEA  05B1               	andwf	___ftmul@f2^(0+128),f
 16733  1EEB  30FF               	movlw	255
 16734  1EEC  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16735  1EED  3000               	movlw	0
 16736  1EEE  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16737  1EEF  3000               	movlw	0
 16738  1EF0  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16739  1EF1  3000               	movlw	0
 16740  1EF2  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16741  1EF3  3000               	movlw	0
 16742  1EF4  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16743  1EF5  3007               	movlw	7
 16744  1EF6  00B4               	movwf	??___ftmul^(0+128)
 16745  1EF7  0834               	movf	??___ftmul^(0+128),w
 16746  1EF8  00BC               	movwf	___ftmul@cntr^(0+128)
 16747  1EF9                     l7838:	
 16748  1EF9  1C2E               	btfss	___ftmul@f1^(0+128),0
 16749  1EFA  2F01               	goto	l7842
 16750  1EFB  0831               	movf	___ftmul@f2^(0+128),w
 16751  1EFC  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16752  1EFD  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16753  1EFE  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16754  1EFF  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16755  1F00  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16756  1F01                     l7842:	
 16757  1F01  3001               	movlw	1
 16758  1F02                     u8195:	
 16759  1F02  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16760  1F03  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16761  1F04  0CAE               	rrf	___ftmul@f1^(0+128),f
 16762  1F05  0B89               	decfsz	9,f
 16763  1F06  2F02               	goto	u8195
 16764  1F07  3001               	movlw	1
 16765  1F08                     u8205:	
 16766  1F08  35B1               	lslf	___ftmul@f2^(0+128),f
 16767  1F09  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16768  1F0A  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16769  1F0B  0B89               	decfsz	9,f
 16770  1F0C  2F08               	goto	u8205
 16771  1F0D  3001               	movlw	1
 16772  1F0E  02BC               	subwf	___ftmul@cntr^(0+128),f
 16773  1F0F  1D03               	btfss	3,2
 16774  1F10  2EF9               	goto	l7838
 16775  1F11  3009               	movlw	9
 16776  1F12  00B4               	movwf	??___ftmul^(0+128)
 16777  1F13  0834               	movf	??___ftmul^(0+128),w
 16778  1F14  00BC               	movwf	___ftmul@cntr^(0+128)
 16779  1F15                     l7850:	
 16780  1F15  1C2E               	btfss	___ftmul@f1^(0+128),0
 16781  1F16  2F1D               	goto	l7854
 16782  1F17  0831               	movf	___ftmul@f2^(0+128),w
 16783  1F18  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16784  1F19  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16785  1F1A  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16786  1F1B  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16787  1F1C  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16788  1F1D                     l7854:	
 16789  1F1D  3001               	movlw	1
 16790  1F1E                     u8235:	
 16791  1F1E  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16792  1F1F  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16793  1F20  0CAE               	rrf	___ftmul@f1^(0+128),f
 16794  1F21  0B89               	decfsz	9,f
 16795  1F22  2F1E               	goto	u8235
 16796  1F23  3001               	movlw	1
 16797  1F24                     u8245:	
 16798  1F24  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16799  1F25  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16800  1F26  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16801  1F27  0B89               	decfsz	9,f
 16802  1F28  2F24               	goto	u8245
 16803  1F29  3001               	movlw	1
 16804  1F2A  02BC               	subwf	___ftmul@cntr^(0+128),f
 16805  1F2B  1D03               	btfss	3,2
 16806  1F2C  2F15               	goto	l7850
 16807  1F2D  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16808  1F2E  00A0               	movwf	___ftpack@arg^(0+128)
 16809  1F2F  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16810  1F30  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16811  1F31  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16812  1F32  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16813  1F33  0838               	movf	___ftmul@exp^(0+128),w
 16814  1F34  00B4               	movwf	??___ftmul^(0+128)
 16815  1F35  0834               	movf	??___ftmul^(0+128),w
 16816  1F36  00A3               	movwf	___ftpack@exp^(0+128)
 16817  1F37  083D               	movf	___ftmul@sign^(0+128),w
 16818  1F38  00B5               	movwf	(??___ftmul+1)^(0+128)
 16819  1F39  0835               	movf	(??___ftmul+1)^(0+128),w
 16820  1F3A  00A4               	movwf	___ftpack@sign^(0+128)
 16821  1F3B  31A6  2632         	fcall	___ftpack
 16822  1F3D  0021               	movlb	1	; select bank1
 16823  1F3E  0820               	movf	?___ftpack^(0+128),w
 16824  1F3F  00AE               	movwf	?___ftmul^(0+128)
 16825  1F40  0821               	movf	(?___ftpack+1)^(0+128),w
 16826  1F41  00AF               	movwf	(?___ftmul+1)^(0+128)
 16827  1F42  0822               	movf	(?___ftpack+2)^(0+128),w
 16828  1F43  00B0               	movwf	(?___ftmul+2)^(0+128)
 16829  1F44  0008               	return
 16830  1F45                     __end_of___ftmul:	
 16831                           
 16832                           	psect	text55
 16833  2F72                     __ptext55:	
 16834 ;; *************** function ___ftsub *****************
 16835 ;; Defined at:
 16836 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16837 ;; Parameters:    Size  Location     Type
 16838 ;;  f2              3   31[BANK2 ] float 
 16839 ;;  f1              3   34[BANK2 ] float 
 16840 ;; Auto vars:     Size  Location     Type
 16841 ;;		None
 16842 ;; Return value:  Size  Location     Type
 16843 ;;                  3   31[BANK2 ] float 
 16844 ;; Registers used:
 16845 ;;		wreg, status,2, status,0, pclath, cstack
 16846 ;; Tracked objects:
 16847 ;;		On entry : 0/0
 16848 ;;		On exit  : 0/0
 16849 ;;		Unchanged: 0/0
 16850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16851 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16854 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16855 ;;Total ram usage:        6 bytes
 16856 ;; Hardware stack levels used:    1
 16857 ;; Hardware stack levels required when called:    5
 16858 ;; This function calls:
 16859 ;;		___ftadd
 16860 ;; This function is called by:
 16861 ;;		_sin
 16862 ;;		_exp
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           
 16867                           ;psect for function ___ftsub
 16868  2F72                     ___ftsub:	
 16869                           
 16870                           ;incstack = 0
 16871                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16872  2F72  0022               	movlb	2	; select bank2
 16873  2F73  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16874  2F74  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16875  2F75  043F               	iorwf	___ftsub@f2^(0+256),w
 16876  2F76  1903               	skipnz
 16877  2F77  2F7A               	goto	l8042
 16878  2F78  3080               	movlw	128
 16879  2F79  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16880  2F7A                     l8042:	
 16881  2F7A  0842               	movf	___ftsub@f1^(0+256),w
 16882  2F7B  0021               	movlb	1	; select bank1
 16883  2F7C  00C1               	movwf	___ftadd@f1^(0+128)
 16884  2F7D  0022               	movlb	2	; select bank2
 16885  2F7E  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16886  2F7F  0021               	movlb	1	; select bank1
 16887  2F80  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16888  2F81  0022               	movlb	2	; select bank2
 16889  2F82  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16890  2F83  0021               	movlb	1	; select bank1
 16891  2F84  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16892  2F85  0022               	movlb	2	; select bank2
 16893  2F86  083F               	movf	___ftsub@f2^(0+256),w
 16894  2F87  0021               	movlb	1	; select bank1
 16895  2F88  00C4               	movwf	___ftadd@f2^(0+128)
 16896  2F89  0022               	movlb	2	; select bank2
 16897  2F8A  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16898  2F8B  0021               	movlb	1	; select bank1
 16899  2F8C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16900  2F8D  0022               	movlb	2	; select bank2
 16901  2F8E  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16902  2F8F  0021               	movlb	1	; select bank1
 16903  2F90  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16904  2F91  3190  2020         	fcall	___ftadd
 16905  2F93  0021               	movlb	1	; select bank1
 16906  2F94  0841               	movf	?___ftadd^(0+128),w
 16907  2F95  0022               	movlb	2	; select bank2
 16908  2F96  00BF               	movwf	?___ftsub^(0+256)
 16909  2F97  0021               	movlb	1	; select bank1
 16910  2F98  0842               	movf	(?___ftadd+1)^(0+128),w
 16911  2F99  0022               	movlb	2	; select bank2
 16912  2F9A  00C0               	movwf	(?___ftsub+1)^(0+256)
 16913  2F9B  0021               	movlb	1	; select bank1
 16914  2F9C  0843               	movf	(?___ftadd+2)^(0+128),w
 16915  2F9D  0022               	movlb	2	; select bank2
 16916  2F9E  00C1               	movwf	(?___ftsub+2)^(0+256)
 16917  2F9F  0008               	return
 16918  2FA0                     __end_of___ftsub:	
 16919                           
 16920                           	psect	text56
 16921  1020                     __ptext56:	
 16922 ;; *************** function ___ftadd *****************
 16923 ;; Defined at:
 16924 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16925 ;; Parameters:    Size  Location     Type
 16926 ;;  f1              3   33[BANK1 ] float 
 16927 ;;  f2              3   36[BANK1 ] float 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;  exp1            1   45[BANK1 ] unsigned char 
 16930 ;;  exp2            1   44[BANK1 ] unsigned char 
 16931 ;;  sign            1   43[BANK1 ] unsigned char 
 16932 ;; Return value:  Size  Location     Type
 16933 ;;                  3   33[BANK1 ] float 
 16934 ;; Registers used:
 16935 ;;		wreg, status,2, status,0, pclath, cstack
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16941 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16942 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16943 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16944 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16945 ;;Total ram usage:       13 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:    4
 16948 ;; This function calls:
 16949 ;;		___ftpack
 16950 ;; This function is called by:
 16951 ;;		_map
 16952 ;;		_scaleiA10kPot
 16953 ;;		_modSin
 16954 ;;		_modTri
 16955 ;;		_modSaw
 16956 ;;		___ftsub
 16957 ;;		_sin
 16958 ;;		_eval_poly
 16959 ;;		_floor
 16960 ;;		_log
 16961 ;;		_scalePotValue
 16962 ;; This function uses a non-reentrant model
 16963 ;;
 16964                           
 16965                           
 16966                           ;psect for function ___ftadd
 16967  1020                     ___ftadd:	
 16968                           
 16969                           ;incstack = 0
 16970                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16971  1020  0021               	movlb	1	; select bank1
 16972  1021  0841               	movf	___ftadd@f1^(0+128),w
 16973  1022  00C7               	movwf	??___ftadd^(0+128)
 16974  1023  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16975  1024  00C8               	movwf	(??___ftadd^(0+128)+1)
 16976  1025  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16977  1026  00C9               	movwf	(??___ftadd^(0+128)+2)
 16978  1027  1003               	clrc
 16979  1028  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16980  1029  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16981  102A  00CA               	movwf	(??___ftadd+3)^(0+128)
 16982  102B  084A               	movf	(??___ftadd+3)^(0+128),w
 16983  102C  00CD               	movwf	___ftadd@exp1^(0+128)
 16984  102D  0844               	movf	___ftadd@f2^(0+128),w
 16985  102E  00C7               	movwf	??___ftadd^(0+128)
 16986  102F  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16987  1030  00C8               	movwf	(??___ftadd^(0+128)+1)
 16988  1031  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16989  1032  00C9               	movwf	(??___ftadd^(0+128)+2)
 16990  1033  1003               	clrc
 16991  1034  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16992  1035  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16993  1036  00CA               	movwf	(??___ftadd+3)^(0+128)
 16994  1037  084A               	movf	(??___ftadd+3)^(0+128),w
 16995  1038  00CC               	movwf	___ftadd@exp2^(0+128)
 16996  1039  084D               	movf	___ftadd@exp1^(0+128),w
 16997  103A  1903               	btfsc	3,2
 16998  103B  2848               	goto	l7730
 16999  103C  084C               	movf	___ftadd@exp2^(0+128),w
 17000  103D  024D               	subwf	___ftadd@exp1^(0+128),w
 17001  103E  1803               	skipnc
 17002  103F  284F               	goto	l7734
 17003  1040  034D               	decf	___ftadd@exp1^(0+128),w
 17004  1041  3AFF               	xorlw	255
 17005  1042  074C               	addwf	___ftadd@exp2^(0+128),w
 17006  1043  00C7               	movwf	??___ftadd^(0+128)
 17007  1044  3019               	movlw	25
 17008  1045  0247               	subwf	??___ftadd^(0+128),w
 17009  1046  1C03               	skipc
 17010  1047  284F               	goto	l7734
 17011  1048                     l7730:	
 17012  1048  0844               	movf	___ftadd@f2^(0+128),w
 17013  1049  00C1               	movwf	?___ftadd^(0+128)
 17014  104A  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17015  104B  00C2               	movwf	(?___ftadd+1)^(0+128)
 17016  104C  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17017  104D  00C3               	movwf	(?___ftadd+2)^(0+128)
 17018  104E  0008               	return
 17019  104F                     l7734:	
 17020  104F  084C               	movf	___ftadd@exp2^(0+128),w
 17021  1050  1903               	btfsc	3,2
 17022  1051  0008               	return
 17023  1052  084D               	movf	___ftadd@exp1^(0+128),w
 17024  1053  024C               	subwf	___ftadd@exp2^(0+128),w
 17025  1054  1803               	skipnc
 17026  1055  285E               	goto	l7740
 17027  1056  034C               	decf	___ftadd@exp2^(0+128),w
 17028  1057  3AFF               	xorlw	255
 17029  1058  074D               	addwf	___ftadd@exp1^(0+128),w
 17030  1059  00C7               	movwf	??___ftadd^(0+128)
 17031  105A  3019               	movlw	25
 17032  105B  0247               	subwf	??___ftadd^(0+128),w
 17033  105C  1803               	btfsc	3,0
 17034  105D  0008               	return
 17035  105E                     l7740:	
 17036  105E  3006               	movlw	6
 17037  105F  00C7               	movwf	??___ftadd^(0+128)
 17038  1060  0847               	movf	??___ftadd^(0+128),w
 17039  1061  00CB               	movwf	___ftadd@sign^(0+128)
 17040  1062  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17041  1063  17CB               	bsf	___ftadd@sign^(0+128),7
 17042  1064  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17043  1065  174B               	bsf	___ftadd@sign^(0+128),6
 17044  1066  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17045  1067  30FF               	movlw	255
 17046  1068  05C1               	andwf	___ftadd@f1^(0+128),f
 17047  1069  30FF               	movlw	255
 17048  106A  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17049  106B  3000               	movlw	0
 17050  106C  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17051  106D  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17052  106E  30FF               	movlw	255
 17053  106F  05C4               	andwf	___ftadd@f2^(0+128),f
 17054  1070  30FF               	movlw	255
 17055  1071  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17056  1072  3000               	movlw	0
 17057  1073  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17058  1074  084C               	movf	___ftadd@exp2^(0+128),w
 17059  1075  024D               	subwf	___ftadd@exp1^(0+128),w
 17060  1076  1803               	skipnc
 17061  1077  289A               	goto	l7762
 17062  1078                     l7752:	
 17063  1078  3001               	movlw	1
 17064  1079                     u7975:	
 17065  1079  35C4               	lslf	___ftadd@f2^(0+128),f
 17066  107A  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17067  107B  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17068  107C  0B89               	decfsz	9,f
 17069  107D  2879               	goto	u7975
 17070  107E  3001               	movlw	1
 17071  107F  02CC               	subwf	___ftadd@exp2^(0+128),f
 17072  1080  084C               	movf	___ftadd@exp2^(0+128),w
 17073  1081  064D               	xorwf	___ftadd@exp1^(0+128),w
 17074  1082  1903               	skipnz
 17075  1083  2895               	goto	l7760
 17076  1084  3001               	movlw	1
 17077  1085  02CB               	subwf	___ftadd@sign^(0+128),f
 17078  1086  084B               	movf	___ftadd@sign^(0+128),w
 17079  1087  3907               	andlw	7
 17080  1088  1903               	btfsc	3,2
 17081  1089  2895               	goto	l7760
 17082  108A  2878               	goto	l7752
 17083  108B                     l7758:	
 17084  108B  3001               	movlw	1
 17085  108C                     u8005:	
 17086  108C  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17087  108D  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17088  108E  0CC1               	rrf	___ftadd@f1^(0+128),f
 17089  108F  0B89               	decfsz	9,f
 17090  1090  288C               	goto	u8005
 17091  1091  3001               	movlw	1
 17092  1092  00C7               	movwf	??___ftadd^(0+128)
 17093  1093  0847               	movf	??___ftadd^(0+128),w
 17094  1094  07CD               	addwf	___ftadd@exp1^(0+128),f
 17095  1095                     l7760:	
 17096  1095  084D               	movf	___ftadd@exp1^(0+128),w
 17097  1096  064C               	xorwf	___ftadd@exp2^(0+128),w
 17098  1097  1903               	btfsc	3,2
 17099  1098  28BF               	goto	l2133
 17100  1099  288B               	goto	l7758
 17101  109A                     l7762:	
 17102  109A  084D               	movf	___ftadd@exp1^(0+128),w
 17103  109B  024C               	subwf	___ftadd@exp2^(0+128),w
 17104  109C  1803               	skipnc
 17105  109D  28BF               	goto	l2133
 17106  109E                     l7764:	
 17107  109E  3001               	movlw	1
 17108  109F                     u8035:	
 17109  109F  35C1               	lslf	___ftadd@f1^(0+128),f
 17110  10A0  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17111  10A1  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17112  10A2  0B89               	decfsz	9,f
 17113  10A3  289F               	goto	u8035
 17114  10A4  3001               	movlw	1
 17115  10A5  02CD               	subwf	___ftadd@exp1^(0+128),f
 17116  10A6  084C               	movf	___ftadd@exp2^(0+128),w
 17117  10A7  064D               	xorwf	___ftadd@exp1^(0+128),w
 17118  10A8  1903               	skipnz
 17119  10A9  28BB               	goto	l7772
 17120  10AA  3001               	movlw	1
 17121  10AB  02CB               	subwf	___ftadd@sign^(0+128),f
 17122  10AC  084B               	movf	___ftadd@sign^(0+128),w
 17123  10AD  3907               	andlw	7
 17124  10AE  1903               	btfsc	3,2
 17125  10AF  28BB               	goto	l7772
 17126  10B0  289E               	goto	l7764
 17127  10B1                     l7770:	
 17128  10B1  3001               	movlw	1
 17129  10B2                     u8065:	
 17130  10B2  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17131  10B3  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17132  10B4  0CC4               	rrf	___ftadd@f2^(0+128),f
 17133  10B5  0B89               	decfsz	9,f
 17134  10B6  28B2               	goto	u8065
 17135  10B7  3001               	movlw	1
 17136  10B8  00C7               	movwf	??___ftadd^(0+128)
 17137  10B9  0847               	movf	??___ftadd^(0+128),w
 17138  10BA  07CC               	addwf	___ftadd@exp2^(0+128),f
 17139  10BB                     l7772:	
 17140  10BB  084D               	movf	___ftadd@exp1^(0+128),w
 17141  10BC  064C               	xorwf	___ftadd@exp2^(0+128),w
 17142  10BD  1D03               	skipz
 17143  10BE  28B1               	goto	l7770
 17144  10BF                     l2133:	
 17145  10BF  1FCB               	btfss	___ftadd@sign^(0+128),7
 17146  10C0  28D1               	goto	l7776
 17147  10C1  30FF               	movlw	255
 17148  10C2  06C1               	xorwf	___ftadd@f1^(0+128),f
 17149  10C3  30FF               	movlw	255
 17150  10C4  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17151  10C5  30FF               	movlw	255
 17152  10C6  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17153  10C7  3001               	movlw	1
 17154  10C8  07C1               	addwf	___ftadd@f1^(0+128),f
 17155  10C9  3000               	movlw	0
 17156  10CA  1803               	skipnc
 17157  10CB  3001               	movlw	1
 17158  10CC  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17159  10CD  3000               	movlw	0
 17160  10CE  1803               	skipnc
 17161  10CF  3001               	movlw	1
 17162  10D0  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17163  10D1                     l7776:	
 17164  10D1  1F4B               	btfss	___ftadd@sign^(0+128),6
 17165  10D2  28E3               	goto	l7780
 17166  10D3  30FF               	movlw	255
 17167  10D4  06C4               	xorwf	___ftadd@f2^(0+128),f
 17168  10D5  30FF               	movlw	255
 17169  10D6  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17170  10D7  30FF               	movlw	255
 17171  10D8  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17172  10D9  3001               	movlw	1
 17173  10DA  07C4               	addwf	___ftadd@f2^(0+128),f
 17174  10DB  3000               	movlw	0
 17175  10DC  1803               	skipnc
 17176  10DD  3001               	movlw	1
 17177  10DE  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17178  10DF  3000               	movlw	0
 17179  10E0  1803               	skipnc
 17180  10E1  3001               	movlw	1
 17181  10E2  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17182  10E3                     l7780:	
 17183  10E3  01CB               	clrf	___ftadd@sign^(0+128)
 17184  10E4  0841               	movf	___ftadd@f1^(0+128),w
 17185  10E5  07C4               	addwf	___ftadd@f2^(0+128),f
 17186  10E6  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17187  10E7  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17188  10E8  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17189  10E9  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17190  10EA  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17191  10EB  28FE               	goto	l7790
 17192  10EC  30FF               	movlw	255
 17193  10ED  06C4               	xorwf	___ftadd@f2^(0+128),f
 17194  10EE  30FF               	movlw	255
 17195  10EF  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17196  10F0  30FF               	movlw	255
 17197  10F1  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17198  10F2  3001               	movlw	1
 17199  10F3  07C4               	addwf	___ftadd@f2^(0+128),f
 17200  10F4  3000               	movlw	0
 17201  10F5  1803               	skipnc
 17202  10F6  3001               	movlw	1
 17203  10F7  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17204  10F8  3000               	movlw	0
 17205  10F9  1803               	skipnc
 17206  10FA  3001               	movlw	1
 17207  10FB  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17208  10FC  01CB               	clrf	___ftadd@sign^(0+128)
 17209  10FD  0ACB               	incf	___ftadd@sign^(0+128),f
 17210  10FE                     l7790:	
 17211  10FE  0844               	movf	___ftadd@f2^(0+128),w
 17212  10FF  00A0               	movwf	___ftpack@arg^(0+128)
 17213  1100  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17214  1101  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17215  1102  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17216  1103  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17217  1104  084D               	movf	___ftadd@exp1^(0+128),w
 17218  1105  00C7               	movwf	??___ftadd^(0+128)
 17219  1106  0847               	movf	??___ftadd^(0+128),w
 17220  1107  00A3               	movwf	___ftpack@exp^(0+128)
 17221  1108  084B               	movf	___ftadd@sign^(0+128),w
 17222  1109  00C8               	movwf	(??___ftadd+1)^(0+128)
 17223  110A  0848               	movf	(??___ftadd+1)^(0+128),w
 17224  110B  00A4               	movwf	___ftpack@sign^(0+128)
 17225  110C  31A6  2632         	fcall	___ftpack
 17226  110E  0021               	movlb	1	; select bank1
 17227  110F  0820               	movf	?___ftpack^(0+128),w
 17228  1110  00C1               	movwf	?___ftadd^(0+128)
 17229  1111  0821               	movf	(?___ftpack+1)^(0+128),w
 17230  1112  00C2               	movwf	(?___ftadd+1)^(0+128)
 17231  1113  0822               	movf	(?___ftpack+2)^(0+128),w
 17232  1114  00C3               	movwf	(?___ftadd+2)^(0+128)
 17233  1115  0008               	return
 17234  1116                     __end_of___ftadd:	
 17235                           
 17236                           	psect	text57
 17237  2D9D                     __ptext57:	
 17238 ;; *************** function ___ftneg *****************
 17239 ;; Defined at:
 17240 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17241 ;; Parameters:    Size  Location     Type
 17242 ;;  f1              3   30[BANK1 ] float 
 17243 ;; Auto vars:     Size  Location     Type
 17244 ;;		None
 17245 ;; Return value:  Size  Location     Type
 17246 ;;                  3   30[BANK1 ] float 
 17247 ;; Registers used:
 17248 ;;		wreg
 17249 ;; Tracked objects:
 17250 ;;		On entry : 0/0
 17251 ;;		On exit  : 0/0
 17252 ;;		Unchanged: 0/0
 17253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17254 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17257 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17258 ;;Total ram usage:        3 bytes
 17259 ;; Hardware stack levels used:    1
 17260 ;; Hardware stack levels required when called:    3
 17261 ;; This function calls:
 17262 ;;		Nothing
 17263 ;; This function is called by:
 17264 ;;		_map
 17265 ;;		_scaleiA10kPot
 17266 ;;		_modSin
 17267 ;;		_modTri
 17268 ;;		_modSaw
 17269 ;;		_pow
 17270 ;;		_sin
 17271 ;;		_exp
 17272 ;;		_ldexp
 17273 ;;		_scalePotValue
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           
 17278                           ;psect for function ___ftneg
 17279  2D9D                     ___ftneg:	
 17280                           
 17281                           ;incstack = 0
 17282                           ; Regs used in ___ftneg: [wreg]
 17283  2D9D  0021               	movlb	1	; select bank1
 17284  2D9E  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17285  2D9F  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17286  2DA0  043E               	iorwf	___ftneg@f1^(0+128),w
 17287  2DA1  1903               	skipnz
 17288  2DA2  0008               	return
 17289  2DA3  3080               	movlw	128
 17290  2DA4  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17291  2DA5  0008               	return
 17292  2DA6                     __end_of___ftneg:	
 17293                           
 17294                           	psect	text58
 17295  1D3D                     __ptext58:	
 17296 ;; *************** function ___ftdiv *****************
 17297 ;; Defined at:
 17298 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17299 ;; Parameters:    Size  Location     Type
 17300 ;;  f2              3   46[BANK1 ] float 
 17301 ;;  f1              3   49[BANK1 ] float 
 17302 ;; Auto vars:     Size  Location     Type
 17303 ;;  f3              3   57[BANK1 ] float 
 17304 ;;  sign            1   61[BANK1 ] unsigned char 
 17305 ;;  exp             1   60[BANK1 ] unsigned char 
 17306 ;;  cntr            1   56[BANK1 ] unsigned char 
 17307 ;; Return value:  Size  Location     Type
 17308 ;;                  3   46[BANK1 ] float 
 17309 ;; Registers used:
 17310 ;;		wreg, status,2, status,0, pclath, cstack
 17311 ;; Tracked objects:
 17312 ;;		On entry : 0/0
 17313 ;;		On exit  : 0/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17316 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17317 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17318 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17319 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17320 ;;Total ram usage:       16 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; Hardware stack levels required when called:    4
 17323 ;; This function calls:
 17324 ;;		___ftpack
 17325 ;; This function is called by:
 17326 ;;		_map
 17327 ;;		_scaleA100kPot
 17328 ;;		_scaleA10kPot
 17329 ;;		_scaleiA10kPot
 17330 ;;		_calcSinArray
 17331 ;;		_getModulationDelayTime
 17332 ;;		_modSin
 17333 ;;		_modTri
 17334 ;;		_modSaw
 17335 ;;		_sin
 17336 ;;		_exp
 17337 ;;		_scalePotValue
 17338 ;;		_scaleiA100kPot
 17339 ;; This function uses a non-reentrant model
 17340 ;;
 17341                           
 17342                           
 17343                           ;psect for function ___ftdiv
 17344  1D3D                     ___ftdiv:	
 17345                           
 17346                           ;incstack = 0
 17347                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17348  1D3D  0021               	movlb	1	; select bank1
 17349  1D3E  0851               	movf	___ftdiv@f1^(0+128),w
 17350  1D3F  00D4               	movwf	??___ftdiv^(0+128)
 17351  1D40  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17352  1D41  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17353  1D42  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17354  1D43  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17355  1D44  1003               	clrc
 17356  1D45  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17357  1D46  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17358  1D47  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17359  1D48  0857               	movf	(??___ftdiv+3)^(0+128),w
 17360  1D49  00DC               	movwf	___ftdiv@exp^(0+128)
 17361  1D4A  085C               	movf	___ftdiv@exp^(0+128),w
 17362  1D4B  1D03               	btfss	3,2
 17363  1D4C  2D54               	goto	l8002
 17364  1D4D  3000               	movlw	0
 17365  1D4E  00CE               	movwf	?___ftdiv^(0+128)
 17366  1D4F  3000               	movlw	0
 17367  1D50  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17368  1D51  3000               	movlw	0
 17369  1D52  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17370  1D53  0008               	return
 17371  1D54                     l8002:	
 17372  1D54  084E               	movf	___ftdiv@f2^(0+128),w
 17373  1D55  00D4               	movwf	??___ftdiv^(0+128)
 17374  1D56  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17375  1D57  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17376  1D58  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17377  1D59  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17378  1D5A  1003               	clrc
 17379  1D5B  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17380  1D5C  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17381  1D5D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17382  1D5E  0857               	movf	(??___ftdiv+3)^(0+128),w
 17383  1D5F  00DD               	movwf	___ftdiv@sign^(0+128)
 17384  1D60  085D               	movf	___ftdiv@sign^(0+128),w
 17385  1D61  1D03               	btfss	3,2
 17386  1D62  2D6A               	goto	l8008
 17387  1D63  3000               	movlw	0
 17388  1D64  00CE               	movwf	?___ftdiv^(0+128)
 17389  1D65  3000               	movlw	0
 17390  1D66  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17391  1D67  3000               	movlw	0
 17392  1D68  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17393  1D69  0008               	return
 17394  1D6A                     l8008:	
 17395  1D6A  3000               	movlw	0
 17396  1D6B  00D9               	movwf	___ftdiv@f3^(0+128)
 17397  1D6C  3000               	movlw	0
 17398  1D6D  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17399  1D6E  3000               	movlw	0
 17400  1D6F  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17401  1D70  3089               	movlw	137
 17402  1D71  075D               	addwf	___ftdiv@sign^(0+128),w
 17403  1D72  00D4               	movwf	??___ftdiv^(0+128)
 17404  1D73  0854               	movf	??___ftdiv^(0+128),w
 17405  1D74  02DC               	subwf	___ftdiv@exp^(0+128),f
 17406  1D75  0851               	movf	___ftdiv@f1^(0+128),w
 17407  1D76  00D4               	movwf	??___ftdiv^(0+128)
 17408  1D77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17409  1D78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17410  1D79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17411  1D7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17412  1D7B  3010               	movlw	16
 17413  1D7C                     u8465:	
 17414  1D7C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17415  1D7D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17416  1D7E  0CD4               	rrf	??___ftdiv^(0+128),f
 17417  1D7F  0B89               	decfsz	9,f
 17418  1D80  2D7C               	goto	u8465
 17419  1D81  0854               	movf	??___ftdiv^(0+128),w
 17420  1D82  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17421  1D83  0857               	movf	(??___ftdiv+3)^(0+128),w
 17422  1D84  00DD               	movwf	___ftdiv@sign^(0+128)
 17423  1D85  084E               	movf	___ftdiv@f2^(0+128),w
 17424  1D86  00D4               	movwf	??___ftdiv^(0+128)
 17425  1D87  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17426  1D88  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17427  1D89  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17428  1D8A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17429  1D8B  3010               	movlw	16
 17430  1D8C                     u8475:	
 17431  1D8C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17432  1D8D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17433  1D8E  0CD4               	rrf	??___ftdiv^(0+128),f
 17434  1D8F  0B89               	decfsz	9,f
 17435  1D90  2D8C               	goto	u8475
 17436  1D91  0854               	movf	??___ftdiv^(0+128),w
 17437  1D92  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17438  1D93  0857               	movf	(??___ftdiv+3)^(0+128),w
 17439  1D94  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17440  1D95  3080               	movlw	128
 17441  1D96  00D4               	movwf	??___ftdiv^(0+128)
 17442  1D97  0854               	movf	??___ftdiv^(0+128),w
 17443  1D98  05DD               	andwf	___ftdiv@sign^(0+128),f
 17444  1D99  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17445  1D9A  30FF               	movlw	255
 17446  1D9B  05D1               	andwf	___ftdiv@f1^(0+128),f
 17447  1D9C  30FF               	movlw	255
 17448  1D9D  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17449  1D9E  3000               	movlw	0
 17450  1D9F  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17451  1DA0  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17452  1DA1  30FF               	movlw	255
 17453  1DA2  05CE               	andwf	___ftdiv@f2^(0+128),f
 17454  1DA3  30FF               	movlw	255
 17455  1DA4  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17456  1DA5  3000               	movlw	0
 17457  1DA6  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17458  1DA7  3018               	movlw	24
 17459  1DA8  00D4               	movwf	??___ftdiv^(0+128)
 17460  1DA9  0854               	movf	??___ftdiv^(0+128),w
 17461  1DAA  00D8               	movwf	___ftdiv@cntr^(0+128)
 17462  1DAB                     l8022:	
 17463  1DAB  3001               	movlw	1
 17464  1DAC                     u8485:	
 17465  1DAC  35D9               	lslf	___ftdiv@f3^(0+128),f
 17466  1DAD  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17467  1DAE  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17468  1DAF  0B89               	decfsz	9,f
 17469  1DB0  2DAC               	goto	u8485
 17470  1DB1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17471  1DB2  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17472  1DB3  1D03               	skipz
 17473  1DB4  2DBB               	goto	u8495
 17474  1DB5  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17475  1DB6  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17476  1DB7  1D03               	skipz
 17477  1DB8  2DBB               	goto	u8495
 17478  1DB9  084E               	movf	___ftdiv@f2^(0+128),w
 17479  1DBA  0251               	subwf	___ftdiv@f1^(0+128),w
 17480  1DBB                     u8495:	
 17481  1DBB  1C03               	skipc
 17482  1DBC  2DC4               	goto	l8030
 17483  1DBD  084E               	movf	___ftdiv@f2^(0+128),w
 17484  1DBE  02D1               	subwf	___ftdiv@f1^(0+128),f
 17485  1DBF  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17486  1DC0  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17487  1DC1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17488  1DC2  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17489  1DC3  1459               	bsf	___ftdiv@f3^(0+128),0
 17490  1DC4                     l8030:	
 17491  1DC4  3001               	movlw	1
 17492  1DC5                     u8505:	
 17493  1DC5  35D1               	lslf	___ftdiv@f1^(0+128),f
 17494  1DC6  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17495  1DC7  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17496  1DC8  0B89               	decfsz	9,f
 17497  1DC9  2DC5               	goto	u8505
 17498  1DCA  3001               	movlw	1
 17499  1DCB  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17500  1DCC  1D03               	btfss	3,2
 17501  1DCD  2DAB               	goto	l8022
 17502  1DCE  0859               	movf	___ftdiv@f3^(0+128),w
 17503  1DCF  00A0               	movwf	___ftpack@arg^(0+128)
 17504  1DD0  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17505  1DD1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17506  1DD2  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17507  1DD3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17508  1DD4  085C               	movf	___ftdiv@exp^(0+128),w
 17509  1DD5  00D4               	movwf	??___ftdiv^(0+128)
 17510  1DD6  0854               	movf	??___ftdiv^(0+128),w
 17511  1DD7  00A3               	movwf	___ftpack@exp^(0+128)
 17512  1DD8  085D               	movf	___ftdiv@sign^(0+128),w
 17513  1DD9  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17514  1DDA  0855               	movf	(??___ftdiv+1)^(0+128),w
 17515  1DDB  00A4               	movwf	___ftpack@sign^(0+128)
 17516  1DDC  31A6  2632         	fcall	___ftpack
 17517  1DDE  0021               	movlb	1	; select bank1
 17518  1DDF  0820               	movf	?___ftpack^(0+128),w
 17519  1DE0  00CE               	movwf	?___ftdiv^(0+128)
 17520  1DE1  0821               	movf	(?___ftpack+1)^(0+128),w
 17521  1DE2  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17522  1DE3  0822               	movf	(?___ftpack+2)^(0+128),w
 17523  1DE4  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17524  1DE5  0008               	return
 17525  1DE6                     __end_of___ftdiv:	
 17526                           
 17527                           	psect	text59
 17528  2000                     __ptext59:	
 17529 ;; *************** function ___awtoft *****************
 17530 ;; Defined at:
 17531 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17532 ;; Parameters:    Size  Location     Type
 17533 ;;  c               2    8[BANK1 ] int 
 17534 ;; Auto vars:     Size  Location     Type
 17535 ;;  sign            1   13[BANK1 ] unsigned char 
 17536 ;; Return value:  Size  Location     Type
 17537 ;;                  3    8[BANK1 ] float 
 17538 ;; Registers used:
 17539 ;;		wreg, status,2, status,0, pclath, cstack
 17540 ;; Tracked objects:
 17541 ;;		On entry : 0/0
 17542 ;;		On exit  : 0/0
 17543 ;;		Unchanged: 0/0
 17544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17545 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17546 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17547 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17548 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17549 ;;Total ram usage:        6 bytes
 17550 ;; Hardware stack levels used:    1
 17551 ;; Hardware stack levels required when called:    4
 17552 ;; This function calls:
 17553 ;;		___ftpack
 17554 ;; This function is called by:
 17555 ;;		_main
 17556 ;;		_set_subdivision
 17557 ;;		_calcSinArray
 17558 ;;		_getModulationDelayTime
 17559 ;;		_updateModulationArray
 17560 ;;		_exp
 17561 ;;		_log
 17562 ;; This function uses a non-reentrant model
 17563 ;;
 17564                           
 17565                           
 17566                           ;psect for function ___awtoft
 17567  2000                     ___awtoft:	
 17568                           
 17569                           ;incstack = 0
 17570                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17571  2000  0021               	movlb	1	; select bank1
 17572  2001  01AD               	clrf	___awtoft@sign^(0+128)
 17573  2002  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17574  2003  280B               	goto	l7992
 17575  2004  09A8               	comf	___awtoft@c^(0+128),f
 17576  2005  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17577  2006  0AA8               	incf	___awtoft@c^(0+128),f
 17578  2007  1903               	skipnz
 17579  2008  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17580  2009  01AD               	clrf	___awtoft@sign^(0+128)
 17581  200A  0AAD               	incf	___awtoft@sign^(0+128),f
 17582  200B                     l7992:	
 17583  200B  0828               	movf	___awtoft@c^(0+128),w
 17584  200C  00A0               	movwf	___ftpack@arg^(0+128)
 17585  200D  0829               	movf	(___awtoft@c+1)^(0+128),w
 17586  200E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17587  200F  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17588  2010  308E               	movlw	142
 17589  2011  00AB               	movwf	??___awtoft^(0+128)
 17590  2012  082B               	movf	??___awtoft^(0+128),w
 17591  2013  00A3               	movwf	___ftpack@exp^(0+128)
 17592  2014  082D               	movf	___awtoft@sign^(0+128),w
 17593  2015  00AC               	movwf	(??___awtoft+1)^(0+128)
 17594  2016  082C               	movf	(??___awtoft+1)^(0+128),w
 17595  2017  00A4               	movwf	___ftpack@sign^(0+128)
 17596  2018  31A6  2632         	fcall	___ftpack
 17597  201A  0021               	movlb	1	; select bank1
 17598  201B  0820               	movf	?___ftpack^(0+128),w
 17599  201C  00A8               	movwf	?___awtoft^(0+128)
 17600  201D  0821               	movf	(?___ftpack+1)^(0+128),w
 17601  201E  00A9               	movwf	(?___awtoft+1)^(0+128)
 17602  201F  0822               	movf	(?___ftpack+2)^(0+128),w
 17603  2020  00AA               	movwf	(?___awtoft+2)^(0+128)
 17604  2021  0008               	return
 17605  2022                     __end_of___awtoft:	
 17606                           
 17607                           	psect	text60
 17608  2632                     __ptext60:	
 17609 ;; *************** function ___ftpack *****************
 17610 ;; Defined at:
 17611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;  arg             3    0[BANK1 ] unsigned um
 17614 ;;  exp             1    3[BANK1 ] unsigned char 
 17615 ;;  sign            1    4[BANK1 ] unsigned char 
 17616 ;; Auto vars:     Size  Location     Type
 17617 ;;		None
 17618 ;; Return value:  Size  Location     Type
 17619 ;;                  3    0[BANK1 ] float 
 17620 ;; Registers used:
 17621 ;;		wreg, status,2, status,0
 17622 ;; Tracked objects:
 17623 ;;		On entry : 0/0
 17624 ;;		On exit  : 0/0
 17625 ;;		Unchanged: 0/0
 17626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17627 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17629 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17630 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17631 ;;Total ram usage:        8 bytes
 17632 ;; Hardware stack levels used:    1
 17633 ;; Hardware stack levels required when called:    3
 17634 ;; This function calls:
 17635 ;;		Nothing
 17636 ;; This function is called by:
 17637 ;;		___altoft
 17638 ;;		___awtoft
 17639 ;;		___ftadd
 17640 ;;		___ftdiv
 17641 ;;		___ftmul
 17642 ;;		___lltoft
 17643 ;; This function uses a non-reentrant model
 17644 ;;
 17645                           
 17646                           
 17647                           ;psect for function ___ftpack
 17648  2632                     ___ftpack:	
 17649                           
 17650                           ;incstack = 0
 17651                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17652  2632  0021               	movlb	1	; select bank1
 17653  2633  0823               	movf	___ftpack@exp^(0+128),w
 17654  2634  1903               	btfsc	3,2
 17655  2635  2E3B               	goto	l7630
 17656  2636  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17657  2637  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17658  2638  0420               	iorwf	___ftpack@arg^(0+128),w
 17659  2639  1D03               	skipz
 17660  263A  2E4C               	goto	l7636
 17661  263B                     l7630:	
 17662  263B  3000               	movlw	0
 17663  263C  00A0               	movwf	?___ftpack^(0+128)
 17664  263D  3000               	movlw	0
 17665  263E  00A1               	movwf	(?___ftpack+1)^(0+128)
 17666  263F  3000               	movlw	0
 17667  2640  00A2               	movwf	(?___ftpack+2)^(0+128)
 17668  2641  0008               	return
 17669  2642                     l7634:	
 17670  2642  3001               	movlw	1
 17671  2643  00A5               	movwf	??___ftpack^(0+128)
 17672  2644  0825               	movf	??___ftpack^(0+128),w
 17673  2645  07A3               	addwf	___ftpack@exp^(0+128),f
 17674  2646  3001               	movlw	1
 17675  2647                     u7705:	
 17676  2647  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17677  2648  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17678  2649  0CA0               	rrf	___ftpack@arg^(0+128),f
 17679  264A  0B89               	decfsz	9,f
 17680  264B  2E47               	goto	u7705
 17681  264C                     l7636:	
 17682  264C  30FE               	movlw	254
 17683  264D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17684  264E  1903               	btfsc	3,2
 17685  264F  2E65               	goto	l2102
 17686  2650  2E42               	goto	l7634
 17687  2651                     l7638:	
 17688  2651  3001               	movlw	1
 17689  2652  00A5               	movwf	??___ftpack^(0+128)
 17690  2653  0825               	movf	??___ftpack^(0+128),w
 17691  2654  07A3               	addwf	___ftpack@exp^(0+128),f
 17692  2655  3001               	movlw	1
 17693  2656  07A0               	addwf	___ftpack@arg^(0+128),f
 17694  2657  3000               	movlw	0
 17695  2658  1803               	skipnc
 17696  2659  3001               	movlw	1
 17697  265A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17698  265B  3000               	movlw	0
 17699  265C  1803               	skipnc
 17700  265D  3001               	movlw	1
 17701  265E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17702  265F  3001               	movlw	1
 17703  2660                     u7725:	
 17704  2660  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17705  2661  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17706  2662  0CA0               	rrf	___ftpack@arg^(0+128),f
 17707  2663  0B89               	decfsz	9,f
 17708  2664  2E60               	goto	u7725
 17709  2665                     l2102:	
 17710  2665  30FF               	movlw	255
 17711  2666  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17712  2667  1903               	btfsc	3,2
 17713  2668  2E72               	goto	l7646
 17714  2669  2E51               	goto	l7638
 17715  266A                     l7644:	
 17716  266A  3001               	movlw	1
 17717  266B  02A3               	subwf	___ftpack@exp^(0+128),f
 17718  266C  3001               	movlw	1
 17719  266D                     u7745:	
 17720  266D  35A0               	lslf	___ftpack@arg^(0+128),f
 17721  266E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17722  266F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17723  2670  0B89               	decfsz	9,f
 17724  2671  2E6D               	goto	u7745
 17725  2672                     l7646:	
 17726  2672  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17727  2673  2E78               	goto	l2109
 17728  2674  3002               	movlw	2
 17729  2675  0223               	subwf	___ftpack@exp^(0+128),w
 17730  2676  1803               	skipnc
 17731  2677  2E6A               	goto	l7644
 17732  2678                     l2109:	
 17733  2678  1823               	btfsc	___ftpack@exp^(0+128),0
 17734  2679  2E80               	goto	l2110
 17735  267A  30FF               	movlw	255
 17736  267B  05A0               	andwf	___ftpack@arg^(0+128),f
 17737  267C  307F               	movlw	127
 17738  267D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17739  267E  30FF               	movlw	255
 17740  267F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17741  2680                     l2110:	
 17742  2680  1003               	clrc
 17743  2681  0CA3               	rrf	___ftpack@exp^(0+128),f
 17744  2682  0823               	movf	___ftpack@exp^(0+128),w
 17745  2683  00A5               	movwf	??___ftpack^(0+128)
 17746  2684  01A6               	clrf	(??___ftpack^(0+128)+1)
 17747  2685  01A7               	clrf	(??___ftpack^(0+128)+2)
 17748  2686  3010               	movlw	16
 17749  2687                     u7785:	
 17750  2687  35A5               	lslf	??___ftpack^(0+128),f
 17751  2688  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17752  2689  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17753  268A  0B89               	decfsz	9,f
 17754  268B  2E87               	goto	u7785
 17755  268C  0825               	movf	??___ftpack^(0+128),w
 17756  268D  04A0               	iorwf	___ftpack@arg^(0+128),f
 17757  268E  0826               	movf	(??___ftpack+1)^(0+128),w
 17758  268F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17759  2690  0827               	movf	(??___ftpack+2)^(0+128),w
 17760  2691  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17761  2692  0824               	movf	___ftpack@sign^(0+128),w
 17762  2693  1903               	btfsc	3,2
 17763  2694  0008               	return
 17764  2695  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17765  2696  0008               	return
 17766  2697                     __end_of___ftpack:	
 17767                           
 17768                           	psect	text61
 17769  2DE8                     __ptext61:	
 17770 ;; *************** function _adc_convert *****************
 17771 ;; Defined at:
 17772 ;;		line 122 in file "user.c"
 17773 ;; Parameters:    Size  Location     Type
 17774 ;;  channel         1    wreg     unsigned char 
 17775 ;; Auto vars:     Size  Location     Type
 17776 ;;  channel         1    3[BANK1 ] unsigned char 
 17777 ;; Return value:  Size  Location     Type
 17778 ;;                  2    0[BANK1 ] unsigned int 
 17779 ;; Registers used:
 17780 ;;		wreg, status,2, status,0
 17781 ;; Tracked objects:
 17782 ;;		On entry : 0/0
 17783 ;;		On exit  : 0/0
 17784 ;;		Unchanged: 0/0
 17785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17786 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17787 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17788 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17789 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17790 ;;Total ram usage:        4 bytes
 17791 ;; Hardware stack levels used:    1
 17792 ;; Hardware stack levels required when called:    3
 17793 ;; This function calls:
 17794 ;;		Nothing
 17795 ;; This function is called by:
 17796 ;;		_main
 17797 ;; This function uses a non-reentrant model
 17798 ;;
 17799                           
 17800                           
 17801                           ;psect for function _adc_convert
 17802  2DE8                     _adc_convert:	
 17803                           
 17804                           ;incstack = 0
 17805                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17806                           ;adc_convert@channel stored from wreg
 17807  2DE8  0021               	movlb	1	; select bank1
 17808  2DE9  00A3               	movwf	adc_convert@channel^(0+128)
 17809                           
 17810                           ;user.c: 123: ADCON0bits.CHS = channel;
 17811  2DEA  0823               	movf	adc_convert@channel^(0+128),w
 17812  2DEB  00A2               	movwf	??_adc_convert^(0+128)
 17813  2DEC  0DA2               	rlf	??_adc_convert^(0+128),f
 17814  2DED  0DA2               	rlf	??_adc_convert^(0+128),f
 17815  2DEE  081D               	movf	29,w	;volatile
 17816  2DEF  0622               	xorwf	??_adc_convert^(0+128),w
 17817  2DF0  3983               	andlw	-125
 17818  2DF1  0622               	xorwf	??_adc_convert^(0+128),w
 17819  2DF2  009D               	movwf	29	;volatile
 17820                           
 17821                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17822  2DF3  149D               	bsf	29,1	;volatile
 17823  2DF4                     l583:	
 17824                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17825                           
 17826  2DF4  189D               	btfsc	29,1	;volatile
 17827  2DF5  2DF4               	goto	l583
 17828                           
 17829                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17830  2DF6  081C               	movf	28,w	;volatile
 17831  2DF7  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17832  2DF8  081B               	movf	27,w	;volatile
 17833  2DF9  00A0               	movwf	?_adc_convert^(0+128)
 17834  2DFA  0008               	return
 17835  2DFB                     __end_of_adc_convert:	
 17836                           
 17837                           	psect	text62
 17838  1804                     __ptext62:	
 17839 ;; *************** function _USARTInit *****************
 17840 ;; Defined at:
 17841 ;;		line 31 in file "usart_pic16.c"
 17842 ;; Parameters:    Size  Location     Type
 17843 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17844 ;; Auto vars:     Size  Location     Type
 17845 ;;		None
 17846 ;; Return value:  Size  Location     Type
 17847 ;;                  1    wreg      void 
 17848 ;; Registers used:
 17849 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17855 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17857 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17858 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17859 ;;Total ram usage:        3 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:    3
 17862 ;; This function calls:
 17863 ;;		Nothing
 17864 ;; This function is called by:
 17865 ;;		_main
 17866 ;; This function uses a non-reentrant model
 17867 ;;
 17868                           
 17869                           
 17870                           ;psect for function _USARTInit
 17871  1804                     _USARTInit:	
 17872                           
 17873                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17874                           
 17875                           ;incstack = 0
 17876                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17877  1804  30FF               	movlw	255
 17878  1805  0020               	movlb	0	; select bank0
 17879  1806  00CB               	movwf	_UQEnd	;volatile
 17880  1807  0021               	movlb	1	; select bank1
 17881  1808  00A2               	movwf	??_USARTInit^(0+128)
 17882  1809  0822               	movf	??_USARTInit^(0+128),w
 17883  180A  00FD               	movwf	_UQFront	;volatile
 17884                           
 17885                           ;usart_pic16.c: 37: switch(baud_rate)
 17886  180B  2816               	goto	l8654
 17887  180C                     l8644:	
 17888                           ;usart_pic16.c: 38: {
 17889                           ;usart_pic16.c: 39: case 9600:
 17890                           
 17891                           
 17892                           ;usart_pic16.c: 40: SPBRG=103;
 17893  180C  3067               	movlw	103
 17894  180D  2813               	goto	L23
 17895  180E                     l8646:	
 17896                           ;usart_pic16.c: 42: case 19200:
 17897                           
 17898                           ;usart_pic16.c: 41: break;
 17899                           
 17900                           
 17901                           ;usart_pic16.c: 43: SPBRG=51;
 17902  180E  3033               	movlw	51
 17903  180F  2813               	goto	L23
 17904  1810                     l8648:	
 17905                           ;usart_pic16.c: 45: case 31250:
 17906                           
 17907                           ;usart_pic16.c: 44: break;
 17908                           
 17909                           
 17910                           ;usart_pic16.c: 46: SPBRG = 31;
 17911  1810  301F               	movlw	31
 17912  1811  2813               	goto	L23
 17913  1812                     l8650:	
 17914                           ;usart_pic16.c: 48: case 38400:
 17915                           
 17916                           ;usart_pic16.c: 47: break;
 17917                           
 17918                           
 17919                           ;usart_pic16.c: 49: SPBRG=25;
 17920  1812  3019               	movlw	25
 17921  1813                     L23:	
 17922  1813  0023               	movlb	3	; select bank3
 17923  1814  009B               	movwf	27	;volatile
 17924                           
 17925                           ;usart_pic16.c: 51: }
 17926                           
 17927                           ;usart_pic16.c: 50: break;
 17928  1815  2839               	goto	l1695
 17929  1816                     l8654:	
 17930                           
 17931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17932                           ; Switch size 1, requested type "space"
 17933                           ; Number of cases is 4, Range of values is 37 to 150
 17934                           ; switch strategies available:
 17935                           ; Name         Instructions Cycles
 17936                           ; simple_byte           13     7 (average)
 17937                           ; direct_byte          237     9 (fixed)
 17938                           ; jumptable            263     9 (fixed)
 17939                           ;	Chosen strategy is simple_byte
 17940  1816  0021               	movlb	1	; select bank1
 17941  1817  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17942  1818  3A25               	xorlw	37	; case 37
 17943  1819  1903               	skipnz
 17944  181A  2825               	goto	l9756
 17945  181B  3A6E               	xorlw	110	; case 75
 17946  181C  1903               	skipnz
 17947  181D  282A               	goto	l9758
 17948  181E  3A31               	xorlw	49	; case 122
 17949  181F  1903               	skipnz
 17950  1820  282F               	goto	l9760
 17951  1821  3AEC               	xorlw	236	; case 150
 17952  1822  1903               	skipnz
 17953  1823  2834               	goto	l9762
 17954  1824  2839               	goto	l1695
 17955  1825                     l9756:	
 17956                           
 17957                           ; Switch size 1, requested type "space"
 17958                           ; Number of cases is 1, Range of values is 128 to 128
 17959                           ; switch strategies available:
 17960                           ; Name         Instructions Cycles
 17961                           ; simple_byte            4     3 (average)
 17962                           ; direct_byte           11     9 (fixed)
 17963                           ; jumptable            263     9 (fixed)
 17964                           ;	Chosen strategy is simple_byte
 17965  1825  0820               	movf	USARTInit@baud_rate^(0+128),w
 17966  1826  3A80               	xorlw	128	; case 128
 17967  1827  1903               	skipnz
 17968  1828  280C               	goto	l8644
 17969  1829  2839               	goto	l1695
 17970  182A                     l9758:	
 17971                           
 17972                           ; Switch size 1, requested type "space"
 17973                           ; Number of cases is 1, Range of values is 0 to 0
 17974                           ; switch strategies available:
 17975                           ; Name         Instructions Cycles
 17976                           ; simple_byte            4     3 (average)
 17977                           ; direct_byte            8     6 (fixed)
 17978                           ; jumptable            260     6 (fixed)
 17979                           ;	Chosen strategy is simple_byte
 17980  182A  0820               	movf	USARTInit@baud_rate^(0+128),w
 17981  182B  3A00               	xorlw	0	; case 0
 17982  182C  1903               	skipnz
 17983  182D  280E               	goto	l8646
 17984  182E  2839               	goto	l1695
 17985  182F                     l9760:	
 17986                           
 17987                           ; Switch size 1, requested type "space"
 17988                           ; Number of cases is 1, Range of values is 18 to 18
 17989                           ; switch strategies available:
 17990                           ; Name         Instructions Cycles
 17991                           ; simple_byte            4     3 (average)
 17992                           ; direct_byte           11     9 (fixed)
 17993                           ; jumptable            263     9 (fixed)
 17994                           ;	Chosen strategy is simple_byte
 17995  182F  0820               	movf	USARTInit@baud_rate^(0+128),w
 17996  1830  3A12               	xorlw	18	; case 18
 17997  1831  1903               	skipnz
 17998  1832  2810               	goto	l8648
 17999  1833  2839               	goto	l1695
 18000  1834                     l9762:	
 18001                           
 18002                           ; Switch size 1, requested type "space"
 18003                           ; Number of cases is 1, Range of values is 0 to 0
 18004                           ; switch strategies available:
 18005                           ; Name         Instructions Cycles
 18006                           ; simple_byte            4     3 (average)
 18007                           ; direct_byte            8     6 (fixed)
 18008                           ; jumptable            260     6 (fixed)
 18009                           ;	Chosen strategy is simple_byte
 18010  1834  0820               	movf	USARTInit@baud_rate^(0+128),w
 18011  1835  3A00               	xorlw	0	; case 0
 18012  1836  1903               	skipnz
 18013  1837  2812               	goto	l8650
 18014  1838  2839               	goto	l1695
 18015  1839                     l1695:	
 18016                           
 18017                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18018  1839  0023               	movlb	3	; select bank3
 18019  183A  131E               	bcf	30,6	;volatile
 18020                           
 18021                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18022  183B  169E               	bsf	30,5	;volatile
 18023                           
 18024                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18025  183C  121E               	bcf	30,4	;volatile
 18026                           
 18027                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18028  183D  151E               	bsf	30,2	;volatile
 18029                           
 18030                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18031  183E  179D               	bsf	29,7	;volatile
 18032                           
 18033                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18034  183F  131D               	bcf	29,6	;volatile
 18035                           
 18036                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18037  1840  161D               	bsf	29,4	;volatile
 18038                           
 18039                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18040  1841  119D               	bcf	29,3	;volatile
 18041                           
 18042                           ;usart_pic16.c: 65: RCIE=1;
 18043  1842  0021               	movlb	1	; select bank1
 18044  1843  1691               	bsf	17,5	;volatile
 18045                           
 18046                           ;usart_pic16.c: 66: PEIE=1;
 18047  1844  170B               	bsf	11,6	;volatile
 18048                           
 18049                           ;usart_pic16.c: 68: (GIE = 1);
 18050  1845  178B               	bsf	11,7	;volatile
 18051  1846  0008               	return
 18052  1847                     __end_of_USARTInit:	
 18053                           
 18054                           	psect	text63
 18055  2709                     __ptext63:	
 18056 ;; *************** function _ReadSavedSettings *****************
 18057 ;; Defined at:
 18058 ;;		line 234 in file "user.c"
 18059 ;; Parameters:    Size  Location     Type
 18060 ;;		None
 18061 ;; Auto vars:     Size  Location     Type
 18062 ;;		None
 18063 ;; Return value:  Size  Location     Type
 18064 ;;                  1    wreg      void 
 18065 ;; Registers used:
 18066 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18067 ;; Tracked objects:
 18068 ;;		On entry : 0/0
 18069 ;;		On exit  : 0/0
 18070 ;;		Unchanged: 0/0
 18071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18074 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18075 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18076 ;;Total ram usage:        1 bytes
 18077 ;; Hardware stack levels used:    1
 18078 ;; Hardware stack levels required when called:    4
 18079 ;; This function calls:
 18080 ;;		_FLASH_ReadWord
 18081 ;;		_set_leds_bottom
 18082 ;;		_set_leds_top
 18083 ;; This function is called by:
 18084 ;;		_main
 18085 ;; This function uses a non-reentrant model
 18086 ;;
 18087                           
 18088                           
 18089                           ;psect for function _ReadSavedSettings
 18090  2709                     _ReadSavedSettings:	
 18091                           
 18092                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18093                           
 18094                           ;incstack = 0
 18095                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18096  2709  3081               	movlw	129
 18097  270A  0021               	movlb	1	; select bank1
 18098  270B  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18099  270C  301F               	movlw	31
 18100  270D  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18101  270E  3190  2000  31A7   	fcall	_FLASH_ReadWord
 18102  2711  0021               	movlb	1	; select bank1
 18103  2712  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18104  2713  0020               	movlb	0	; select bank0
 18105  2714  00DE               	movwf	_top_push_state+1
 18106  2715  0021               	movlb	1	; select bank1
 18107  2716  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18108  2717  0020               	movlb	0	; select bank0
 18109  2718  00DD               	movwf	_top_push_state
 18110                           
 18111                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18112  2719  3082               	movlw	130
 18113  271A  0021               	movlb	1	; select bank1
 18114  271B  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18115  271C  301F               	movlw	31
 18116  271D  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18117  271E  3190  2000  31A7   	fcall	_FLASH_ReadWord
 18118  2721  0021               	movlb	1	; select bank1
 18119  2722  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18120  2723  0020               	movlb	0	; select bank0
 18121  2724  00DA               	movwf	_bottom_push_state+1
 18122  2725  0021               	movlb	1	; select bank1
 18123  2726  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18124  2727  0020               	movlb	0	; select bank0
 18125  2728  00D9               	movwf	_bottom_push_state
 18126                           
 18127                           ;user.c: 239: if (top_push_state > 6) {
 18128  2729  085E               	movf	_top_push_state+1,w
 18129  272A  3A80               	xorlw	128
 18130  272B  0021               	movlb	1	; select bank1
 18131  272C  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18132  272D  3080               	movlw	128
 18133  272E  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18134  272F  1D03               	skipz
 18135  2730  2F34               	goto	u9305
 18136  2731  3007               	movlw	7
 18137  2732  0020               	movlb	0	; select bank0
 18138  2733  025D               	subwf	_top_push_state,w
 18139  2734                     u9305:	
 18140  2734  1C03               	skipc
 18141  2735  2F3B               	goto	l630
 18142                           
 18143                           ;user.c: 241: top_push_state = 6;
 18144  2736  3006               	movlw	6
 18145  2737  0020               	movlb	0	; select bank0
 18146  2738  00DD               	movwf	_top_push_state
 18147  2739  3000               	movlw	0
 18148  273A  00DE               	movwf	_top_push_state+1
 18149  273B                     l630:	
 18150                           
 18151                           ;user.c: 242: }
 18152                           ;user.c: 243: if (bottom_push_state > 5) {
 18153  273B  0020               	movlb	0	; select bank0
 18154  273C  085A               	movf	_bottom_push_state+1,w
 18155  273D  3A80               	xorlw	128
 18156  273E  0021               	movlb	1	; select bank1
 18157  273F  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18158  2740  3080               	movlw	128
 18159  2741  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18160  2742  1D03               	skipz
 18161  2743  2F47               	goto	u9315
 18162  2744  3006               	movlw	6
 18163  2745  0020               	movlb	0	; select bank0
 18164  2746  0259               	subwf	_bottom_push_state,w
 18165  2747                     u9315:	
 18166  2747  1C03               	skipc
 18167  2748  2F4E               	goto	l8708
 18168                           
 18169                           ;user.c: 245: bottom_push_state = 1;
 18170  2749  3001               	movlw	1
 18171  274A  0020               	movlb	0	; select bank0
 18172  274B  00D9               	movwf	_bottom_push_state
 18173  274C  3000               	movlw	0
 18174  274D  00DA               	movwf	_bottom_push_state+1
 18175  274E                     l8708:	
 18176                           
 18177                           ;user.c: 246: }
 18178                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18179  274E  0020               	movlb	0	; select bank0
 18180  274F  0865               	movf	_switchBypass_state,w
 18181  2750  1D03               	btfss	3,2
 18182  2751  2F55               	goto	u9320
 18183  2752  0027               	movlb	7	; select bank7
 18184  2753  148D               	bsf	13,1	;volatile
 18185  2754  2F57               	goto	l8710
 18186  2755                     u9320:	
 18187  2755  0027               	movlb	7	; select bank7
 18188  2756  108D               	bcf	13,1	;volatile
 18189  2757                     l8710:	
 18190                           
 18191                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18192  2757  0020               	movlb	0	; select bank0
 18193  2758  0C65               	rrf	_switchBypass_state,w
 18194  2759  0027               	movlb	7	; select bank7
 18195  275A  1C03               	skipc
 18196  275B  110D               	bcf	13,2	;volatile
 18197  275C  1803               	skipnc
 18198  275D  150D               	bsf	13,2	;volatile
 18199                           
 18200                           ;user.c: 251: LATBbits.LATB2 = 0;
 18201  275E  0022               	movlb	2	; select bank2
 18202  275F  110D               	bcf	13,2	;volatile
 18203                           
 18204                           ;user.c: 252: LATBbits.LATB3 = 0;
 18205  2760  118D               	bcf	13,3	;volatile
 18206                           
 18207                           ;user.c: 254: LATBbits.LATB4 = 0;
 18208  2761  120D               	bcf	13,4	;volatile
 18209                           
 18210                           ;user.c: 255: LATBbits.LATB5 = 0;
 18211  2762  128D               	bcf	13,5	;volatile
 18212                           
 18213                           ;user.c: 257: LATBbits.LATB1 = 0;
 18214  2763  108D               	bcf	13,1	;volatile
 18215                           
 18216                           ;user.c: 258: LATBbits.LATB0 = 0;
 18217  2764  100D               	bcf	13,0	;volatile
 18218                           
 18219                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18220  2765  0020               	movlb	0	; select bank0
 18221  2766  085E               	movf	_top_push_state+1,w
 18222  2767  0021               	movlb	1	; select bank1
 18223  2768  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18224  2769  0020               	movlb	0	; select bank0
 18225  276A  085D               	movf	_top_push_state,w
 18226  276B  0021               	movlb	1	; select bank1
 18227  276C  00A0               	movwf	set_leds_top@x^(0+128)
 18228  276D  3001               	movlw	1
 18229  276E  00A2               	movwf	set_leds_top@ledState^(0+128)
 18230  276F  3000               	movlw	0
 18231  2770  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18232  2771  31A5  2585  31A7   	fcall	_set_leds_top
 18233                           
 18234                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18235  2774  0020               	movlb	0	; select bank0
 18236  2775  085A               	movf	_bottom_push_state+1,w
 18237  2776  0021               	movlb	1	; select bank1
 18238  2777  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18239  2778  0020               	movlb	0	; select bank0
 18240  2779  0859               	movf	_bottom_push_state,w
 18241  277A  0021               	movlb	1	; select bank1
 18242  277B  00A0               	movwf	set_leds_bottom@x^(0+128)
 18243  277C  31A1  212C         	fcall	_set_leds_bottom
 18244  277E  0008               	return
 18245  277F                     __end_of_ReadSavedSettings:	
 18246                           
 18247                           	psect	text64
 18248  2585                     __ptext64:	
 18249 ;; *************** function _set_leds_top *****************
 18250 ;; Defined at:
 18251 ;;		line 16 in file "LEDs.c"
 18252 ;; Parameters:    Size  Location     Type
 18253 ;;  x               2    0[BANK1 ] int 
 18254 ;;  ledState        2    2[BANK1 ] int 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;		None
 18257 ;; Return value:  Size  Location     Type
 18258 ;;                  1    wreg      void 
 18259 ;; Registers used:
 18260 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18261 ;; Tracked objects:
 18262 ;;		On entry : 0/0
 18263 ;;		On exit  : 0/0
 18264 ;;		Unchanged: 0/0
 18265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18266 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18269 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18270 ;;Total ram usage:        4 bytes
 18271 ;; Hardware stack levels used:    1
 18272 ;; Hardware stack levels required when called:    3
 18273 ;; This function calls:
 18274 ;;		Nothing
 18275 ;; This function is called by:
 18276 ;;		_ReadSavedSettings
 18277 ;;		_ring_tactiles
 18278 ;;		_solidring_tactiles
 18279 ;;		_read_top_tactile
 18280 ;;		_setPresetDisplay
 18281 ;;		_resetRingLEDs
 18282 ;;		_setExpressionDisplay
 18283 ;;		_star_tactiles
 18284 ;; This function uses a non-reentrant model
 18285 ;;
 18286                           
 18287                           
 18288                           ;psect for function _set_leds_top
 18289  2585                     _set_leds_top:	
 18290                           
 18291                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18292                           
 18293                           ;incstack = 0
 18294                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18295  2585  0027               	movlb	7	; select bank7
 18296  2586  100C               	bcf	12,0	;volatile
 18297                           
 18298                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18299  2587  108C               	bcf	12,1	;volatile
 18300                           
 18301                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18302  2588  110C               	bcf	12,2	;volatile
 18303                           
 18304                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18305  2589  118C               	bcf	12,3	;volatile
 18306                           
 18307                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18308  258A  120C               	bcf	12,4	;volatile
 18309                           
 18310                           ;LEDs.c: 22: switch (x) {
 18311  258B  2DBB               	goto	l7672
 18312  258C                     l7660:	
 18313                           ;LEDs.c: 23: case 1:
 18314                           
 18315                           
 18316                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18317  258C  0021               	movlb	1	; select bank1
 18318  258D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18319  258E  0027               	movlb	7	; select bank7
 18320  258F  1C03               	skipc
 18321  2590  100C               	bcf	12,0	;volatile
 18322  2591  1803               	skipnc
 18323  2592  140C               	bsf	12,0	;volatile
 18324                           
 18325                           ;LEDs.c: 25: break;
 18326  2593  0008               	return
 18327  2594                     l7662:	
 18328                           ;LEDs.c: 26: case 2:
 18329                           
 18330                           
 18331                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18332  2594  0021               	movlb	1	; select bank1
 18333  2595  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18334  2596  0027               	movlb	7	; select bank7
 18335  2597  1C03               	skipc
 18336  2598  108C               	bcf	12,1	;volatile
 18337  2599  1803               	skipnc
 18338  259A  148C               	bsf	12,1	;volatile
 18339                           
 18340                           ;LEDs.c: 28: break;
 18341  259B  0008               	return
 18342  259C                     l7664:	
 18343                           ;LEDs.c: 29: case 3:
 18344                           
 18345                           
 18346                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18347  259C  0021               	movlb	1	; select bank1
 18348  259D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18349  259E  0027               	movlb	7	; select bank7
 18350  259F  1C03               	skipc
 18351  25A0  110C               	bcf	12,2	;volatile
 18352  25A1  1803               	skipnc
 18353  25A2  150C               	bsf	12,2	;volatile
 18354                           
 18355                           ;LEDs.c: 31: break;
 18356  25A3  0008               	return
 18357  25A4                     l7666:	
 18358                           ;LEDs.c: 32: case 4:
 18359                           
 18360                           
 18361                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18362  25A4  0021               	movlb	1	; select bank1
 18363  25A5  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18364  25A6  0027               	movlb	7	; select bank7
 18365  25A7  1C03               	skipc
 18366  25A8  118C               	bcf	12,3	;volatile
 18367  25A9  1803               	skipnc
 18368  25AA  158C               	bsf	12,3	;volatile
 18369                           
 18370                           ;LEDs.c: 34: break;
 18371  25AB  0008               	return
 18372  25AC                     l7668:	
 18373                           ;LEDs.c: 35: case 5:
 18374                           
 18375                           
 18376                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18377  25AC  0021               	movlb	1	; select bank1
 18378  25AD  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18379  25AE  0027               	movlb	7	; select bank7
 18380  25AF  1C03               	skipc
 18381  25B0  120C               	bcf	12,4	;volatile
 18382  25B1  1803               	skipnc
 18383  25B2  160C               	bsf	12,4	;volatile
 18384                           
 18385                           ;LEDs.c: 39: break;
 18386                           
 18387                           ;LEDs.c: 38: case 6:
 18388                           
 18389                           ;LEDs.c: 37: break;
 18390  25B3  0008               	return
 18391  25B4                     l787:	
 18392                           ;LEDs.c: 40: case 100:
 18393                           
 18394                           
 18395                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18396  25B4  0027               	movlb	7	; select bank7
 18397  25B5  140C               	bsf	12,0	;volatile
 18398                           
 18399                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18400  25B6  148C               	bsf	12,1	;volatile
 18401                           
 18402                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18403  25B7  150C               	bsf	12,2	;volatile
 18404                           
 18405                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18406  25B8  158C               	bsf	12,3	;volatile
 18407                           
 18408                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18409  25B9  160C               	bsf	12,4	;volatile
 18410                           
 18411                           ;LEDs.c: 47: }
 18412                           
 18413                           ;LEDs.c: 46: break;
 18414  25BA  0008               	return
 18415  25BB                     l7672:	
 18416                           
 18417                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18418                           ; Switch size 1, requested type "space"
 18419                           ; Number of cases is 1, Range of values is 0 to 0
 18420                           ; switch strategies available:
 18421                           ; Name         Instructions Cycles
 18422                           ; simple_byte            4     3 (average)
 18423                           ; direct_byte            8     6 (fixed)
 18424                           ; jumptable            260     6 (fixed)
 18425                           ;	Chosen strategy is simple_byte
 18426  25BB  0021               	movlb	1	; select bank1
 18427  25BC  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18428  25BD  3A00               	xorlw	0	; case 0
 18429  25BE  1903               	skipnz
 18430  25BF  2DC1               	goto	l9764
 18431  25C0  2DD8               	goto	l788
 18432  25C1                     l9764:	
 18433                           
 18434                           ; Switch size 1, requested type "space"
 18435                           ; Number of cases is 7, Range of values is 1 to 100
 18436                           ; switch strategies available:
 18437                           ; Name         Instructions Cycles
 18438                           ; simple_byte           22    12 (average)
 18439                           ; direct_byte          209     9 (fixed)
 18440                           ; jumptable            263     9 (fixed)
 18441                           ;	Chosen strategy is simple_byte
 18442  25C1  0820               	movf	set_leds_top@x^(0+128),w
 18443  25C2  3A01               	xorlw	1	; case 1
 18444  25C3  1903               	skipnz
 18445  25C4  2D8C               	goto	l7660
 18446  25C5  3A03               	xorlw	3	; case 2
 18447  25C6  1903               	skipnz
 18448  25C7  2D94               	goto	l7662
 18449  25C8  3A01               	xorlw	1	; case 3
 18450  25C9  1903               	skipnz
 18451  25CA  2D9C               	goto	l7664
 18452  25CB  3A07               	xorlw	7	; case 4
 18453  25CC  1903               	skipnz
 18454  25CD  2DA4               	goto	l7666
 18455  25CE  3A01               	xorlw	1	; case 5
 18456  25CF  1903               	skipnz
 18457  25D0  2DAC               	goto	l7668
 18458  25D1  3A03               	xorlw	3	; case 6
 18459  25D2  1903               	skipnz
 18460  25D3  2DD8               	goto	l788
 18461  25D4  3A62               	xorlw	98	; case 100
 18462  25D5  1903               	skipnz
 18463  25D6  2DB4               	goto	l787
 18464  25D7  2DD8               	goto	l788
 18465  25D8                     l788:	
 18466  25D8  0008               	return
 18467  25D9                     __end_of_set_leds_top:	
 18468                           
 18469                           	psect	text65
 18470  212C                     __ptext65:	
 18471 ;; *************** function _set_leds_bottom *****************
 18472 ;; Defined at:
 18473 ;;		line 51 in file "LEDs.c"
 18474 ;; Parameters:    Size  Location     Type
 18475 ;;  x               2    0[BANK1 ] int 
 18476 ;; Auto vars:     Size  Location     Type
 18477 ;;		None
 18478 ;; Return value:  Size  Location     Type
 18479 ;;                  1    wreg      void 
 18480 ;; Registers used:
 18481 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18482 ;; Tracked objects:
 18483 ;;		On entry : 0/0
 18484 ;;		On exit  : 0/0
 18485 ;;		Unchanged: 0/0
 18486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18487 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18490 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18491 ;;Total ram usage:        2 bytes
 18492 ;; Hardware stack levels used:    1
 18493 ;; Hardware stack levels required when called:    3
 18494 ;; This function calls:
 18495 ;;		Nothing
 18496 ;; This function is called by:
 18497 ;;		_ReadSavedSettings
 18498 ;;		_ring_tactiles
 18499 ;;		_solidring_tactiles
 18500 ;;		_read_bottom_tactile
 18501 ;;		_setPresetDisplay
 18502 ;;		_resetRingLEDs
 18503 ;;		_setExpressionDisplay
 18504 ;;		_star_tactiles
 18505 ;; This function uses a non-reentrant model
 18506 ;;
 18507                           
 18508                           
 18509                           ;psect for function _set_leds_bottom
 18510  212C                     _set_leds_bottom:	
 18511                           
 18512                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18513                           
 18514                           ;incstack = 0
 18515                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18516  212C  0022               	movlb	2	; select bank2
 18517  212D  100F               	bcf	15,0	;volatile
 18518                           
 18519                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18520  212E  108F               	bcf	15,1	;volatile
 18521                           
 18522                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18523  212F  110F               	bcf	15,2	;volatile
 18524                           
 18525                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18526  2130  118F               	bcf	15,3	;volatile
 18527                           
 18528                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18529  2131  120F               	bcf	15,4	;volatile
 18530                           
 18531                           ;LEDs.c: 57: switch (x) {
 18532  2132  2949               	goto	l7688
 18533  2133                     l792:	
 18534                           ;LEDs.c: 58: case 1:
 18535                           
 18536                           
 18537                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18538  2133  0022               	movlb	2	; select bank2
 18539  2134  140F               	bsf	15,0	;volatile
 18540                           
 18541                           ;LEDs.c: 60: break;
 18542  2135  0008               	return
 18543  2136                     l794:	
 18544                           ;LEDs.c: 61: case 2:
 18545                           
 18546                           
 18547                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18548  2136  0022               	movlb	2	; select bank2
 18549  2137  148F               	bsf	15,1	;volatile
 18550                           
 18551                           ;LEDs.c: 63: break;
 18552  2138  0008               	return
 18553  2139                     l795:	
 18554                           ;LEDs.c: 64: case 3:
 18555                           
 18556                           
 18557                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18558  2139  0022               	movlb	2	; select bank2
 18559  213A  150F               	bsf	15,2	;volatile
 18560                           
 18561                           ;LEDs.c: 66: break;
 18562  213B  0008               	return
 18563  213C                     l796:	
 18564                           ;LEDs.c: 67: case 4:
 18565                           
 18566                           
 18567                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18568  213C  0022               	movlb	2	; select bank2
 18569  213D  158F               	bsf	15,3	;volatile
 18570                           
 18571                           ;LEDs.c: 69: break;
 18572  213E  0008               	return
 18573  213F                     l797:	
 18574                           ;LEDs.c: 70: case 5:
 18575                           
 18576                           
 18577                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18578  213F  0022               	movlb	2	; select bank2
 18579  2140  160F               	bsf	15,4	;volatile
 18580                           
 18581                           ;LEDs.c: 74: break;
 18582                           
 18583                           ;LEDs.c: 73: case 6:
 18584                           
 18585                           ;LEDs.c: 72: break;
 18586  2141  0008               	return
 18587  2142                     l799:	
 18588                           ;LEDs.c: 75: case 100:
 18589                           
 18590                           
 18591                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18592  2142  0022               	movlb	2	; select bank2
 18593  2143  140F               	bsf	15,0	;volatile
 18594                           
 18595                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18596  2144  148F               	bsf	15,1	;volatile
 18597                           
 18598                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18599  2145  150F               	bsf	15,2	;volatile
 18600                           
 18601                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18602  2146  158F               	bsf	15,3	;volatile
 18603                           
 18604                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18605  2147  160F               	bsf	15,4	;volatile
 18606                           
 18607                           ;LEDs.c: 82: }
 18608                           
 18609                           ;LEDs.c: 81: break;
 18610  2148  0008               	return
 18611  2149                     l7688:	
 18612                           
 18613                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18614                           ; Switch size 1, requested type "space"
 18615                           ; Number of cases is 1, Range of values is 0 to 0
 18616                           ; switch strategies available:
 18617                           ; Name         Instructions Cycles
 18618                           ; simple_byte            4     3 (average)
 18619                           ; direct_byte            8     6 (fixed)
 18620                           ; jumptable            260     6 (fixed)
 18621                           ;	Chosen strategy is simple_byte
 18622  2149  0021               	movlb	1	; select bank1
 18623  214A  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18624  214B  3A00               	xorlw	0	; case 0
 18625  214C  1903               	skipnz
 18626  214D  294F               	goto	l9766
 18627  214E  2966               	goto	l800
 18628  214F                     l9766:	
 18629                           
 18630                           ; Switch size 1, requested type "space"
 18631                           ; Number of cases is 7, Range of values is 1 to 100
 18632                           ; switch strategies available:
 18633                           ; Name         Instructions Cycles
 18634                           ; simple_byte           22    12 (average)
 18635                           ; direct_byte          209     9 (fixed)
 18636                           ; jumptable            263     9 (fixed)
 18637                           ;	Chosen strategy is simple_byte
 18638  214F  0820               	movf	set_leds_bottom@x^(0+128),w
 18639  2150  3A01               	xorlw	1	; case 1
 18640  2151  1903               	skipnz
 18641  2152  2933               	goto	l792
 18642  2153  3A03               	xorlw	3	; case 2
 18643  2154  1903               	skipnz
 18644  2155  2936               	goto	l794
 18645  2156  3A01               	xorlw	1	; case 3
 18646  2157  1903               	skipnz
 18647  2158  2939               	goto	l795
 18648  2159  3A07               	xorlw	7	; case 4
 18649  215A  1903               	skipnz
 18650  215B  293C               	goto	l796
 18651  215C  3A01               	xorlw	1	; case 5
 18652  215D  1903               	skipnz
 18653  215E  293F               	goto	l797
 18654  215F  3A03               	xorlw	3	; case 6
 18655  2160  1903               	skipnz
 18656  2161  2966               	goto	l800
 18657  2162  3A62               	xorlw	98	; case 100
 18658  2163  1903               	skipnz
 18659  2164  2942               	goto	l799
 18660  2165  2966               	goto	l800
 18661  2166                     l800:	
 18662  2166  0008               	return
 18663  2167                     __end_of_set_leds_bottom:	
 18664                           
 18665                           	psect	text66
 18666  1000                     __ptext66:	
 18667 ;; *************** function _FLASH_ReadWord *****************
 18668 ;; Defined at:
 18669 ;;		line 58 in file "memory.c"
 18670 ;; Parameters:    Size  Location     Type
 18671 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18672 ;; Auto vars:     Size  Location     Type
 18673 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18674 ;; Return value:  Size  Location     Type
 18675 ;;                  2    0[BANK1 ] unsigned int 
 18676 ;; Registers used:
 18677 ;;		wreg, status,2, status,0
 18678 ;; Tracked objects:
 18679 ;;		On entry : 0/0
 18680 ;;		On exit  : 0/0
 18681 ;;		Unchanged: 0/0
 18682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18683 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18684 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18686 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18687 ;;Total ram usage:        3 bytes
 18688 ;; Hardware stack levels used:    1
 18689 ;; Hardware stack levels required when called:    3
 18690 ;; This function calls:
 18691 ;;		Nothing
 18692 ;; This function is called by:
 18693 ;;		_ReadSavedSettings
 18694 ;;		_FLASH_WriteWord
 18695 ;; This function uses a non-reentrant model
 18696 ;;
 18697                           
 18698                           
 18699                           ;psect for function _FLASH_ReadWord
 18700  1000                     _FLASH_ReadWord:	
 18701                           
 18702                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18703                           
 18704                           ;incstack = 0
 18705                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18706  1000  3000               	movlw	0
 18707  1001  1B8B               	btfsc	11,7	;volatile
 18708  1002  3001               	movlw	1
 18709  1003  0021               	movlb	1	; select bank1
 18710  1004  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18711                           
 18712                           ;memory.c: 61: INTCONbits.GIE = 0;
 18713  1005  138B               	bcf	11,7	;volatile
 18714                           
 18715                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18716  1006  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18717  1007  0023               	movlb	3	; select bank3
 18718  1008  0091               	movwf	17	;volatile
 18719                           
 18720                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18721  1009  0021               	movlb	1	; select bank1
 18722  100A  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18723  100B  0023               	movlb	3	; select bank3
 18724  100C  0092               	movwf	18	;volatile
 18725                           
 18726                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18727  100D  1315               	bcf	21,6	;volatile
 18728                           
 18729                           ;memory.c: 66: PMCON1bits.RD = 1;
 18730  100E  1415               	bsf	21,0	;volatile
 18731                           
 18732                           ;memory.c: 67: __nop();
 18733  100F  0000               	nop
 18734                           
 18735                           ;memory.c: 68: __nop();
 18736  1010  0000               	nop
 18737                           
 18738                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18739  1011  0021               	movlb	1	; select bank1
 18740  1012  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18741  1013  1C03               	skipc
 18742  1014  138B               	bcf	11,7	;volatile
 18743  1015  1803               	skipnc
 18744  1016  178B               	bsf	11,7	;volatile
 18745                           
 18746                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18747  1017  0023               	movlb	3	; select bank3
 18748  1018  0814               	movf	20,w	;volatile
 18749  1019  0021               	movlb	1	; select bank1
 18750  101A  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18751  101B  0023               	movlb	3	; select bank3
 18752  101C  0813               	movf	19,w	;volatile
 18753  101D  0021               	movlb	1	; select bank1
 18754  101E  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18755  101F  0008               	return
 18756  1020                     __end_of_FLASH_ReadWord:	
 18757                           
 18758                           	psect	text67
 18759  2EF6                     __ptext67:	
 18760 ;; *************** function _InitializeTaps *****************
 18761 ;; Defined at:
 18762 ;;		line 228 in file "user.c"
 18763 ;; Parameters:    Size  Location     Type
 18764 ;;		None
 18765 ;; Auto vars:     Size  Location     Type
 18766 ;;  itap            2    1[BANK1 ] int 
 18767 ;; Return value:  Size  Location     Type
 18768 ;;                  1    wreg      void 
 18769 ;; Registers used:
 18770 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18771 ;; Tracked objects:
 18772 ;;		On entry : 0/0
 18773 ;;		On exit  : 0/0
 18774 ;;		Unchanged: 0/0
 18775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18777 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18778 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18779 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18780 ;;Total ram usage:        3 bytes
 18781 ;; Hardware stack levels used:    1
 18782 ;; Hardware stack levels required when called:    3
 18783 ;; This function calls:
 18784 ;;		Nothing
 18785 ;; This function is called by:
 18786 ;;		_main
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           
 18791                           ;psect for function _InitializeTaps
 18792  2EF6                     _InitializeTaps:	
 18793                           
 18794                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18795                           
 18796                           ;incstack = 0
 18797                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18798  2EF6  0021               	movlb	1	; select bank1
 18799  2EF7  01A1               	clrf	InitializeTaps@itap^(0+128)
 18800  2EF8  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18801  2EF9                     L24:	
 18802  2EF9  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18803  2EFA  3A80               	xorlw	128
 18804  2EFB  00A0               	movwf	??_InitializeTaps^(0+128)
 18805  2EFC  3080               	movlw	128
 18806  2EFD  0220               	subwf	??_InitializeTaps^(0+128),w
 18807  2EFE  1D03               	skipz
 18808  2EFF  2F02               	goto	u9275
 18809  2F00  300C               	movlw	12
 18810  2F01  0221               	subwf	InitializeTaps@itap^(0+128),w
 18811  2F02                     u9275:	
 18812  2F02  1803               	btfsc	3,0
 18813  2F03  0008               	return
 18814                           
 18815                           ;user.c: 230: tap[itap] = 0;
 18816  2F04  0021               	movlb	1	; select bank1
 18817  2F05  0821               	movf	InitializeTaps@itap^(0+128),w
 18818  2F06  00A0               	movwf	??_InitializeTaps^(0+128)
 18819  2F07  3001               	movlw	1
 18820  2F08                     u9285:	
 18821  2F08  35A0               	lslf	??_InitializeTaps^(0+128),f
 18822  2F09  3EFF               	addlw	-1
 18823  2F0A  1D03               	skipz
 18824  2F0B  2F08               	goto	u9285
 18825  2F0C  3520               	lslf	??_InitializeTaps^(0+128),w
 18826  2F0D  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18827  2F0E  0086               	movwf	6
 18828  2F0F  3002               	movlw	2	; select bank5/6
 18829  2F10  0087               	movwf	7
 18830  2F11  3000               	movlw	0
 18831  2F12  3FC0               	movwi [0]fsr1
 18832  2F13  3000               	movlw	0
 18833  2F14  3FC1               	movwi [1]fsr1
 18834  2F15  3FC2               	movwi [2]fsr1
 18835  2F16  3FC3               	movwi [3]fsr1
 18836  2F17  3001               	movlw	1
 18837  2F18  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18838  2F19  3000               	movlw	0
 18839  2F1A  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18840  2F1B  2EF9               	goto	L24
 18841  2F1C                     __end_of_InitializeTaps:	
 18842                           
 18843                           	psect	text68
 18844  2FA0                     __ptext68:	
 18845 ;; *************** function _InitApp *****************
 18846 ;; Defined at:
 18847 ;;		line 23 in file "user.c"
 18848 ;; Parameters:    Size  Location     Type
 18849 ;;		None
 18850 ;; Auto vars:     Size  Location     Type
 18851 ;;		None
 18852 ;; Return value:  Size  Location     Type
 18853 ;;                  1    wreg      void 
 18854 ;; Registers used:
 18855 ;;		wreg, status,2, status,0, pclath, cstack
 18856 ;; Tracked objects:
 18857 ;;		On entry : 0/0
 18858 ;;		On exit  : 0/0
 18859 ;;		Unchanged: 0/0
 18860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18865 ;;Total ram usage:        0 bytes
 18866 ;; Hardware stack levels used:    1
 18867 ;; Hardware stack levels required when called:    5
 18868 ;; This function calls:
 18869 ;;		_init_adc
 18870 ;;		_init_pwm
 18871 ;; This function is called by:
 18872 ;;		_main
 18873 ;; This function uses a non-reentrant model
 18874 ;;
 18875                           
 18876                           
 18877                           ;psect for function _InitApp
 18878  2FA0                     _InitApp:	
 18879                           
 18880                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18881                           
 18882                           ;incstack = 0
 18883                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18884  2FA0  0021               	movlb	1	; select bank1
 18885  2FA1  100D               	bcf	13,0	;volatile
 18886                           
 18887                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18888  2FA2  108D               	bcf	13,1	;volatile
 18889                           
 18890                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18891  2FA3  110D               	bcf	13,2	;volatile
 18892                           
 18893                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18894  2FA4  118D               	bcf	13,3	;volatile
 18895                           
 18896                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18897  2FA5  120D               	bcf	13,4	;volatile
 18898                           
 18899                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18900  2FA6  128D               	bcf	13,5	;volatile
 18901                           
 18902                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18903  2FA7  140E               	bsf	14,0	;volatile
 18904                           
 18905                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18906  2FA8  120E               	bcf	14,4	;volatile
 18907                           
 18908                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18909  2FA9  128E               	bcf	14,5	;volatile
 18910                           
 18911                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18912  2FAA  100F               	bcf	15,0	;volatile
 18913                           
 18914                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18915  2FAB  108F               	bcf	15,1	;volatile
 18916                           
 18917                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18918  2FAC  110F               	bcf	15,2	;volatile
 18919                           
 18920                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18921  2FAD  118F               	bcf	15,3	;volatile
 18922                           
 18923                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18924  2FAE  120F               	bcf	15,4	;volatile
 18925                           
 18926                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18927  2FAF  168F               	bsf	15,5	;volatile
 18928                           
 18929                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18930  2FB0  170F               	bsf	15,6	;volatile
 18931                           
 18932                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18933  2FB1  178F               	bsf	15,7	;volatile
 18934                           
 18935                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18936  2FB2  1410               	bsf	16,0	;volatile
 18937                           
 18938                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18939  2FB3  1490               	bsf	16,1	;volatile
 18940                           
 18941                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18942  2FB4  0023               	movlb	3	; select bank3
 18943  2FB5  1010               	bcf	16,0	;volatile
 18944                           
 18945                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18946  2FB6  1090               	bcf	16,1	;volatile
 18947                           
 18948                           ;user.c: 53: PORTEbits.RE0 = 0;
 18949  2FB7  0020               	movlb	0	; select bank0
 18950  2FB8  1010               	bcf	16,0	;volatile
 18951                           
 18952                           ;user.c: 54: PORTEbits.RE1 = 0;
 18953  2FB9  1090               	bcf	16,1	;volatile
 18954                           
 18955                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18956  2FBA  0026               	movlb	6	; select bank6
 18957  2FBB  100C               	bcf	12,0	;volatile
 18958                           
 18959                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18960  2FBC  108C               	bcf	12,1	;volatile
 18961                           
 18962                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18963  2FBD  110C               	bcf	12,2	;volatile
 18964                           
 18965                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18966  2FBE  118C               	bcf	12,3	;volatile
 18967                           
 18968                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18969  2FBF  120C               	bcf	12,4	;volatile
 18970                           
 18971                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18972  2FC0  128C               	bcf	12,5	;volatile
 18973                           
 18974                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18975  2FC1  170C               	bsf	12,6	;volatile
 18976                           
 18977                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18978  2FC2  0028               	movlb	8	; select bank8
 18979  2FC3  130C               	bcf	12,6	;volatile
 18980                           
 18981                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18982  2FC4  0026               	movlb	6	; select bank6
 18983  2FC5  108D               	bcf	13,1	;volatile
 18984                           
 18985                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18986  2FC6  110D               	bcf	13,2	;volatile
 18987                           
 18988                           ;user.c: 68: init_adc();
 18989  2FC7  31AD  25A6  31AF   	fcall	_init_adc
 18990                           
 18991                           ;user.c: 69: init_pwm();
 18992  2FCA  31A2  22DF         	fcall	_init_pwm
 18993                           
 18994                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18995  2FCC  178B               	bsf	11,7	;volatile
 18996                           
 18997                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18998  2FCD  168B               	bsf	11,5	;volatile
 18999                           
 19000                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19001  2FCE  110B               	bcf	11,2	;volatile
 19002  2FCF  0008               	return
 19003  2FD0                     __end_of_InitApp:	
 19004                           
 19005                           	psect	text69
 19006  22DF                     __ptext69:	
 19007 ;; *************** function _init_pwm *****************
 19008 ;; Defined at:
 19009 ;;		line 129 in file "user.c"
 19010 ;; Parameters:    Size  Location     Type
 19011 ;;		None
 19012 ;; Auto vars:     Size  Location     Type
 19013 ;;		None
 19014 ;; Return value:  Size  Location     Type
 19015 ;;                  1    wreg      void 
 19016 ;; Registers used:
 19017 ;;		wreg, status,2, status,0, pclath, cstack
 19018 ;; Tracked objects:
 19019 ;;		On entry : 0/0
 19020 ;;		On exit  : 0/0
 19021 ;;		Unchanged: 0/0
 19022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19027 ;;Total ram usage:        0 bytes
 19028 ;; Hardware stack levels used:    1
 19029 ;; Hardware stack levels required when called:    4
 19030 ;; This function calls:
 19031 ;;		_init_timer0
 19032 ;;		_init_timer2
 19033 ;; This function is called by:
 19034 ;;		_InitApp
 19035 ;; This function uses a non-reentrant model
 19036 ;;
 19037                           
 19038                           
 19039                           ;psect for function _init_pwm
 19040  22DF                     _init_pwm:	
 19041                           
 19042                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19043                           
 19044                           ;incstack = 0
 19045                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19046  22DF  0022               	movlb	2	; select bank2
 19047  22E0  101D               	bcf	29,0	;volatile
 19048                           
 19049                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19050  22E1  0021               	movlb	1	; select bank1
 19051  22E2  110E               	bcf	14,2	;volatile
 19052                           
 19053                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19054  22E3  108E               	bcf	14,1	;volatile
 19055                           
 19056                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19057  22E4  0026               	movlb	6	; select bank6
 19058  22E5  100D               	bcf	13,0	;volatile
 19059                           
 19060                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19061  22E6  118D               	bcf	13,3	;volatile
 19062                           
 19063                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19064  22E7  120D               	bcf	13,4	;volatile
 19065                           
 19066                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19067  22E8  0021               	movlb	1	; select bank1
 19068  22E9  1310               	bcf	16,6	;volatile
 19069                           
 19070                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19071  22EA  1290               	bcf	16,5	;volatile
 19072                           
 19073                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19074  22EB  1210               	bcf	16,4	;volatile
 19075                           
 19076                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19077  22EC  1190               	bcf	16,3	;volatile
 19078                           
 19079                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19080  22ED  1110               	bcf	16,2	;volatile
 19081                           
 19082                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19083  22EE  300F               	movlw	15
 19084  22EF  0025               	movlb	5	; select bank5
 19085  22F0  0493               	iorwf	19,f	;volatile
 19086                           
 19087                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19088  22F1  300F               	movlw	15
 19089  22F2  049A               	iorwf	26,f	;volatile
 19090                           
 19091                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19092  22F3  300F               	movlw	15
 19093  22F4  0026               	movlb	6	; select bank6
 19094  22F5  0493               	iorwf	19,f	;volatile
 19095                           
 19096                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19097  22F6  300F               	movlw	15
 19098  22F7  049A               	iorwf	26,f	;volatile
 19099                           
 19100                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19101  22F8  300F               	movlw	15
 19102  22F9  049E               	iorwf	30,f	;volatile
 19103                           
 19104                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19105  22FA  300F               	movlw	15
 19106  22FB  002C               	movlb	12	; select bank12
 19107  22FC  0493               	iorwf	19,f	;volatile
 19108                           
 19109                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19110  22FD  300F               	movlw	15
 19111  22FE  0496               	iorwf	22,f	;volatile
 19112                           
 19113                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19114  22FF  300F               	movlw	15
 19115  2300  0499               	iorwf	25,f	;volatile
 19116                           
 19117                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19118  2301  300F               	movlw	15
 19119  2302  049C               	iorwf	28,f	;volatile
 19120                           
 19121                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19122  2303  300F               	movlw	15
 19123  2304  049F               	iorwf	31,f	;volatile
 19124                           
 19125                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19126  2305  0025               	movlb	5	; select bank5
 19127  2306  019D               	clrf	29	;volatile
 19128                           
 19129                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19130  2307  019E               	clrf	30	;volatile
 19131                           
 19132                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19133  2308  019F               	clrf	31	;volatile
 19134                           
 19135                           ;user.c: 154: CCPR1 = 50;
 19136  2309  3000               	movlw	0
 19137  230A  0092               	movwf	18	;volatile
 19138  230B  3032               	movlw	50
 19139  230C  0091               	movwf	17	;volatile
 19140                           
 19141                           ;user.c: 155: CCPR2 = 100;
 19142  230D  3000               	movlw	0
 19143  230E  0099               	movwf	25	;volatile
 19144  230F  3064               	movlw	100
 19145  2310  0098               	movwf	24	;volatile
 19146                           
 19147                           ;user.c: 156: CCPR3 = 150;
 19148  2311  3000               	movlw	0
 19149  2312  0026               	movlb	6	; select bank6
 19150  2313  0092               	movwf	18	;volatile
 19151  2314  3096               	movlw	150
 19152  2315  0091               	movwf	17	;volatile
 19153                           
 19154                           ;user.c: 157: CCPR4 = 200;
 19155  2316  3000               	movlw	0
 19156  2317  0099               	movwf	25	;volatile
 19157  2318  30C8               	movlw	200
 19158  2319  0098               	movwf	24	;volatile
 19159                           
 19160                           ;user.c: 158: init_timer2();
 19161  231A  31AD  2594  31A2   	fcall	_init_timer2
 19162                           
 19163                           ;user.c: 159: init_timer0();
 19164  231D  31AD  258D         	fcall	_init_timer0
 19165  231F  0008               	return
 19166  2320                     __end_of_init_pwm:	
 19167                           
 19168                           	psect	text70
 19169  2D94                     __ptext70:	
 19170 ;; *************** function _init_timer2 *****************
 19171 ;; Defined at:
 19172 ;;		line 162 in file "user.c"
 19173 ;; Parameters:    Size  Location     Type
 19174 ;;		None
 19175 ;; Auto vars:     Size  Location     Type
 19176 ;;		None
 19177 ;; Return value:  Size  Location     Type
 19178 ;;                  1    wreg      void 
 19179 ;; Registers used:
 19180 ;;		wreg, status,2, status,0
 19181 ;; Tracked objects:
 19182 ;;		On entry : 0/0
 19183 ;;		On exit  : 0/0
 19184 ;;		Unchanged: 0/0
 19185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19190 ;;Total ram usage:        0 bytes
 19191 ;; Hardware stack levels used:    1
 19192 ;; Hardware stack levels required when called:    3
 19193 ;; This function calls:
 19194 ;;		Nothing
 19195 ;; This function is called by:
 19196 ;;		_init_pwm
 19197 ;; This function uses a non-reentrant model
 19198 ;;
 19199                           
 19200                           
 19201                           ;psect for function _init_timer2
 19202  2D94                     _init_timer2:	
 19203                           
 19204                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19205                           
 19206                           ;incstack = 0
 19207                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19208  2D94  3087               	movlw	-121
 19209  2D95  0020               	movlb	0	; select bank0
 19210  2D96  059C               	andwf	28,f	;volatile
 19211                           
 19212                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19213  2D97  30FC               	movlw	-4
 19214  2D98  059C               	andwf	28,f	;volatile
 19215                           
 19216                           ;user.c: 165: PR2 = 0xFF;
 19217  2D99  30FF               	movlw	255
 19218  2D9A  009B               	movwf	27	;volatile
 19219                           
 19220                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19221  2D9B  151C               	bsf	28,2	;volatile
 19222  2D9C  0008               	return
 19223  2D9D                     __end_of_init_timer2:	
 19224                           
 19225                           	psect	text71
 19226  2D8D                     __ptext71:	
 19227 ;; *************** function _init_timer0 *****************
 19228 ;; Defined at:
 19229 ;;		line 169 in file "user.c"
 19230 ;; Parameters:    Size  Location     Type
 19231 ;;		None
 19232 ;; Auto vars:     Size  Location     Type
 19233 ;;		None
 19234 ;; Return value:  Size  Location     Type
 19235 ;;                  1    wreg      void 
 19236 ;; Registers used:
 19237 ;;		None
 19238 ;; Tracked objects:
 19239 ;;		On entry : 0/0
 19240 ;;		On exit  : 0/0
 19241 ;;		Unchanged: 0/0
 19242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19247 ;;Total ram usage:        0 bytes
 19248 ;; Hardware stack levels used:    1
 19249 ;; Hardware stack levels required when called:    3
 19250 ;; This function calls:
 19251 ;;		Nothing
 19252 ;; This function is called by:
 19253 ;;		_init_pwm
 19254 ;; This function uses a non-reentrant model
 19255 ;;
 19256                           
 19257                           
 19258                           ;psect for function _init_timer0
 19259  2D8D                     _init_timer0:	
 19260                           
 19261                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19262                           
 19263                           ;incstack = 0
 19264                           ; Regs used in _init_timer0: []
 19265  2D8D  0021               	movlb	1	; select bank1
 19266  2D8E  1295               	bcf	21,5	;volatile
 19267                           
 19268                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19269  2D8F  1195               	bcf	21,3	;volatile
 19270                           
 19271                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19272  2D90  1015               	bcf	21,0	;volatile
 19273                           
 19274                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19275  2D91  1495               	bsf	21,1	;volatile
 19276                           
 19277                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19278  2D92  1115               	bcf	21,2	;volatile
 19279  2D93  0008               	return
 19280  2D94                     __end_of_init_timer0:	
 19281                           
 19282                           	psect	text72
 19283  2DA6                     __ptext72:	
 19284 ;; *************** function _init_adc *****************
 19285 ;; Defined at:
 19286 ;;		line 115 in file "user.c"
 19287 ;; Parameters:    Size  Location     Type
 19288 ;;		None
 19289 ;; Auto vars:     Size  Location     Type
 19290 ;;		None
 19291 ;; Return value:  Size  Location     Type
 19292 ;;                  1    wreg      void 
 19293 ;; Registers used:
 19294 ;;		wreg, status,2, status,0
 19295 ;; Tracked objects:
 19296 ;;		On entry : 0/0
 19297 ;;		On exit  : 0/0
 19298 ;;		Unchanged: 0/0
 19299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19304 ;;Total ram usage:        0 bytes
 19305 ;; Hardware stack levels used:    1
 19306 ;; Hardware stack levels required when called:    3
 19307 ;; This function calls:
 19308 ;;		Nothing
 19309 ;; This function is called by:
 19310 ;;		_InitApp
 19311 ;; This function uses a non-reentrant model
 19312 ;;
 19313                           
 19314                           
 19315                           ;psect for function _init_adc
 19316  2DA6                     _init_adc:	
 19317                           
 19318                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19319                           
 19320                           ;incstack = 0
 19321                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19322  2DA6  0021               	movlb	1	; select bank1
 19323  2DA7  179E               	bsf	30,7	;volatile
 19324                           
 19325                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19326  2DA8  081E               	movf	30,w	;volatile
 19327  2DA9  398F               	andlw	-113
 19328  2DAA  3860               	iorlw	96
 19329  2DAB  009E               	movwf	30	;volatile
 19330                           
 19331                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19332  2DAC  30FC               	movlw	-4
 19333  2DAD  059E               	andwf	30,f	;volatile
 19334                           
 19335                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19336  2DAE  141D               	bsf	29,0	;volatile
 19337  2DAF  0008               	return
 19338  2DB0                     __end_of_init_adc:	
 19339                           
 19340                           	psect	text73
 19341  2D89                     __ptext73:	
 19342 ;; *************** function _ConfigureOscillator *****************
 19343 ;; Defined at:
 19344 ;;		line 18 in file "system.c"
 19345 ;; Parameters:    Size  Location     Type
 19346 ;;		None
 19347 ;; Auto vars:     Size  Location     Type
 19348 ;;		None
 19349 ;; Return value:  Size  Location     Type
 19350 ;;                  1    wreg      void 
 19351 ;; Registers used:
 19352 ;;		wreg, status,2, status,0
 19353 ;; Tracked objects:
 19354 ;;		On entry : 0/0
 19355 ;;		On exit  : 0/0
 19356 ;;		Unchanged: 0/0
 19357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19362 ;;Total ram usage:        0 bytes
 19363 ;; Hardware stack levels used:    1
 19364 ;; Hardware stack levels required when called:    3
 19365 ;; This function calls:
 19366 ;;		Nothing
 19367 ;; This function is called by:
 19368 ;;		_main
 19369 ;; This function uses a non-reentrant model
 19370 ;;
 19371                           
 19372                           
 19373                           ;psect for function _ConfigureOscillator
 19374  2D89                     _ConfigureOscillator:	
 19375                           
 19376                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19377                           
 19378                           ;incstack = 0
 19379                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19380  2D89  30FC               	movlw	-4
 19381  2D8A  0021               	movlb	1	; select bank1
 19382  2D8B  0599               	andwf	25,f	;volatile
 19383  2D8C  0008               	return
 19384  2D8D                     __end_of_ConfigureOscillator:	
 19385                           
 19386                           	psect	intentry
 19387  0004                     __pintentry:	
 19388 ;; *************** function _isr *****************
 19389 ;; Defined at:
 19390 ;;		line 28 in file "interrupts.c"
 19391 ;; Parameters:    Size  Location     Type
 19392 ;;		None
 19393 ;; Auto vars:     Size  Location     Type
 19394 ;;  subDiv          1   32[BANK0 ] unsigned char 
 19395 ;;  tmpModDelay     2   33[BANK0 ] int 
 19396 ;; Return value:  Size  Location     Type
 19397 ;;                  1    wreg      void 
 19398 ;; Registers used:
 19399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19400 ;; Tracked objects:
 19401 ;;		On entry : 0/0
 19402 ;;		On exit  : 0/0
 19403 ;;		Unchanged: 0/0
 19404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19406 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19407 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19408 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19409 ;;Total ram usage:        9 bytes
 19410 ;; Hardware stack levels used:    1
 19411 ;; Hardware stack levels required when called:    2
 19412 ;; This function calls:
 19413 ;;		_modulation
 19414 ;;		i1___awdiv
 19415 ;;		i1_getModulationSubdivision
 19416 ;;		i1_set_leds_top
 19417 ;; This function is called by:
 19418 ;;		Interrupt level 1
 19419 ;; This function uses a non-reentrant model
 19420 ;;
 19421                           
 19422  0004                     _isr:	
 19423                           
 19424                           ;incstack = 0
 19425                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19426  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19427  0005  3180               	pagesel	$
 19428  0006  0020               	movlb	0	; select bank0
 19429  0007  087F               	movf	127,w
 19430  0008  00BF               	movwf	??_isr+5
 19431                           
 19432                           ;interrupts.c: 29: int tmpModDelay = -1;
 19433  0009  30FF               	movlw	255
 19434  000A  00C1               	movwf	isr@tmpModDelay
 19435  000B  30FF               	movlw	255
 19436  000C  00C2               	movwf	isr@tmpModDelay+1
 19437                           
 19438                           ;interrupts.c: 32: extern volatile long timer;
 19439                           ;interrupts.c: 33: extern volatile long sub_timer;
 19440                           ;interrupts.c: 34: extern volatile long tap_timer;
 19441                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19442                           ;interrupts.c: 36: extern int mod_delay_time;
 19443                           ;interrupts.c: 38: extern volatile long baseline_mod_time;
 19444                           ;interrupts.c: 40: extern int top_push_state;
 19445                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19446                           ;interrupts.c: 42: extern volatile long mod_timer;
 19447                           ;interrupts.c: 43: extern volatile long delay_time;
 19448  000D  1D0B               	btfss	11,2	;volatile
 19449  000E  2ABA               	goto	i1l160
 19450                           
 19451                           ;interrupts.c: 47: tmpModDelay = mod_delay_time;
 19452  000F  0023               	movlb	3	; select bank3
 19453  0010  085B               	movf	(_mod_delay_time+1)^(0+384),w
 19454  0011  0020               	movlb	0	; select bank0
 19455  0012  00C2               	movwf	isr@tmpModDelay+1
 19456  0013  0023               	movlb	3	; select bank3
 19457  0014  085A               	movf	_mod_delay_time^(0+384),w
 19458  0015  0020               	movlb	0	; select bank0
 19459  0016  00C1               	movwf	isr@tmpModDelay
 19460                           
 19461                           ;interrupts.c: 48: timer = timer + 1;
 19462  0017  3001               	movlw	1
 19463  0018  00BA               	movwf	??_isr
 19464  0019  3000               	movlw	0
 19465  001A  00BB               	movwf	??_isr+1
 19466  001B  3000               	movlw	0
 19467  001C  00BC               	movwf	??_isr+2
 19468  001D  3000               	movlw	0
 19469  001E  00BD               	movwf	??_isr+3
 19470  001F  0847               	movf	_timer,w	;volatile
 19471  0020  07BA               	addwf	??_isr,f
 19472  0021  0848               	movf	_timer+1,w	;volatile
 19473  0022  3DBB               	addwfc	??_isr+1,f
 19474  0023  0849               	movf	_timer+2,w	;volatile
 19475  0024  3DBC               	addwfc	??_isr+2,f
 19476  0025  084A               	movf	_timer+3,w	;volatile
 19477  0026  3DBD               	addwfc	??_isr+3,f
 19478  0027  083D               	movf	??_isr+3,w
 19479  0028  00CA               	movwf	_timer+3	;volatile
 19480  0029  083C               	movf	??_isr+2,w
 19481  002A  00C9               	movwf	_timer+2	;volatile
 19482  002B  083B               	movf	??_isr+1,w
 19483  002C  00C8               	movwf	_timer+1	;volatile
 19484  002D  083A               	movf	??_isr,w
 19485  002E  00C7               	movwf	_timer	;volatile
 19486                           
 19487                           ;interrupts.c: 49: sub_timer = sub_timer + 1;
 19488  002F  3001               	movlw	1
 19489  0030  00BA               	movwf	??_isr
 19490  0031  3000               	movlw	0
 19491  0032  00BB               	movwf	??_isr+1
 19492  0033  3000               	movlw	0
 19493  0034  00BC               	movwf	??_isr+2
 19494  0035  3000               	movlw	0
 19495  0036  00BD               	movwf	??_isr+3
 19496  0037  0023               	movlb	3	; select bank3
 19497  0038  0828               	movf	_sub_timer^(0+384),w	;volatile
 19498  0039  0020               	movlb	0	; select bank0
 19499  003A  07BA               	addwf	??_isr,f
 19500  003B  0023               	movlb	3	; select bank3
 19501  003C  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19502  003D  0020               	movlb	0	; select bank0
 19503  003E  3DBB               	addwfc	??_isr+1,f
 19504  003F  0023               	movlb	3	; select bank3
 19505  0040  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19506  0041  0020               	movlb	0	; select bank0
 19507  0042  3DBC               	addwfc	??_isr+2,f
 19508  0043  0023               	movlb	3	; select bank3
 19509  0044  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19510  0045  0020               	movlb	0	; select bank0
 19511  0046  3DBD               	addwfc	??_isr+3,f
 19512  0047  083D               	movf	??_isr+3,w
 19513  0048  0023               	movlb	3	; select bank3
 19514  0049  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19515  004A  0020               	movlb	0	; select bank0
 19516  004B  083C               	movf	??_isr+2,w
 19517  004C  0023               	movlb	3	; select bank3
 19518  004D  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19519  004E  0020               	movlb	0	; select bank0
 19520  004F  083B               	movf	??_isr+1,w
 19521  0050  0023               	movlb	3	; select bank3
 19522  0051  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19523  0052  0020               	movlb	0	; select bank0
 19524  0053  083A               	movf	??_isr,w
 19525  0054  0023               	movlb	3	; select bank3
 19526  0055  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19527                           
 19528                           ;interrupts.c: 50: tap_timer = tap_timer + 1;
 19529  0056  3001               	movlw	1
 19530  0057  0020               	movlb	0	; select bank0
 19531  0058  00BA               	movwf	??_isr
 19532  0059  3000               	movlw	0
 19533  005A  00BB               	movwf	??_isr+1
 19534  005B  3000               	movlw	0
 19535  005C  00BC               	movwf	??_isr+2
 19536  005D  3000               	movlw	0
 19537  005E  00BD               	movwf	??_isr+3
 19538  005F  0843               	movf	_tap_timer,w	;volatile
 19539  0060  07BA               	addwf	??_isr,f
 19540  0061  0844               	movf	_tap_timer+1,w	;volatile
 19541  0062  3DBB               	addwfc	??_isr+1,f
 19542  0063  0845               	movf	_tap_timer+2,w	;volatile
 19543  0064  3DBC               	addwfc	??_isr+2,f
 19544  0065  0846               	movf	_tap_timer+3,w	;volatile
 19545  0066  3DBD               	addwfc	??_isr+3,f
 19546  0067  083D               	movf	??_isr+3,w
 19547  0068  00C6               	movwf	_tap_timer+3	;volatile
 19548  0069  083C               	movf	??_isr+2,w
 19549  006A  00C5               	movwf	_tap_timer+2	;volatile
 19550  006B  083B               	movf	??_isr+1,w
 19551  006C  00C4               	movwf	_tap_timer+1	;volatile
 19552  006D  083A               	movf	??_isr,w
 19553  006E  00C3               	movwf	_tap_timer	;volatile
 19554                           
 19555                           ;interrupts.c: 51: mod_timer = mod_timer + 1;
 19556  006F  3001               	movlw	1
 19557  0070  00BA               	movwf	??_isr
 19558  0071  3000               	movlw	0
 19559  0072  00BB               	movwf	??_isr+1
 19560  0073  3000               	movlw	0
 19561  0074  00BC               	movwf	??_isr+2
 19562  0075  3000               	movlw	0
 19563  0076  00BD               	movwf	??_isr+3
 19564  0077  0023               	movlb	3	; select bank3
 19565  0078  0824               	movf	_mod_timer^(0+384),w	;volatile
 19566  0079  0020               	movlb	0	; select bank0
 19567  007A  07BA               	addwf	??_isr,f
 19568  007B  0023               	movlb	3	; select bank3
 19569  007C  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19570  007D  0020               	movlb	0	; select bank0
 19571  007E  3DBB               	addwfc	??_isr+1,f
 19572  007F  0023               	movlb	3	; select bank3
 19573  0080  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19574  0081  0020               	movlb	0	; select bank0
 19575  0082  3DBC               	addwfc	??_isr+2,f
 19576  0083  0023               	movlb	3	; select bank3
 19577  0084  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19578  0085  0020               	movlb	0	; select bank0
 19579  0086  3DBD               	addwfc	??_isr+3,f
 19580  0087  083D               	movf	??_isr+3,w
 19581  0088  0023               	movlb	3	; select bank3
 19582  0089  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19583  008A  0020               	movlb	0	; select bank0
 19584  008B  083C               	movf	??_isr+2,w
 19585  008C  0023               	movlb	3	; select bank3
 19586  008D  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19587  008E  0020               	movlb	0	; select bank0
 19588  008F  083B               	movf	??_isr+1,w
 19589  0090  0023               	movlb	3	; select bank3
 19590  0091  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19591  0092  0020               	movlb	0	; select bank0
 19592  0093  083A               	movf	??_isr,w
 19593  0094  0023               	movlb	3	; select bank3
 19594  0095  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19595                           
 19596                           ;interrupts.c: 52: double_timer++;
 19597  0096  3001               	movlw	1
 19598  0097  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19599  0098  3000               	movlw	0
 19600  0099  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19601  009A  3000               	movlw	0
 19602  009B  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19603  009C  3000               	movlw	0
 19604  009D  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19605                           
 19606                           ;interrupts.c: 54: char subDiv = getModulationSubdivision();
 19607  009E  31AF  2746  3180   	fcall	i1_getModulationSubdivision
 19608  00A1  0870               	movf	?i1_getModulationSubdivision,w
 19609  00A2  0020               	movlb	0	; select bank0
 19610  00A3  00BA               	movwf	??_isr
 19611  00A4  083A               	movf	??_isr,w
 19612  00A5  00C0               	movwf	isr@subDiv
 19613                           
 19614                           ;interrupts.c: 59: if (longBypass_start == 1) {
 19615  00A6  034D               	decf	_longBypass_start,w
 19616  00A7  1D03               	btfss	3,2
 19617  00A8  28C0               	goto	i1l6856
 19618                           
 19619                           ;interrupts.c: 60: longBypass_timer++;
 19620  00A9  3001               	movlw	1
 19621  00AA  0023               	movlb	3	; select bank3
 19622  00AB  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19623  00AC  3000               	movlw	0
 19624  00AD  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19625                           
 19626                           ;interrupts.c: 61: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19627  00AE  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19628  00AF  0020               	movlb	0	; select bank0
 19629  00B0  025C               	subwf	_long_press_limit+1,w
 19630  00B1  1D03               	skipz
 19631  00B2  28B7               	goto	u674_25
 19632  00B3  0023               	movlb	3	; select bank3
 19633  00B4  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19634  00B5  0020               	movlb	0	; select bank0
 19635  00B6  025B               	subwf	_long_press_limit,w
 19636  00B7                     u674_25:	
 19637  00B7  1803               	skipnc
 19638  00B8  28C0               	goto	i1l6856
 19639  00B9  085C               	movf	_long_press_limit+1,w
 19640  00BA  0023               	movlb	3	; select bank3
 19641  00BB  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19642  00BC  0020               	movlb	0	; select bank0
 19643  00BD  085B               	movf	_long_press_limit,w
 19644  00BE  0023               	movlb	3	; select bank3
 19645  00BF  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19646  00C0                     i1l6856:	
 19647                           
 19648                           ;interrupts.c: 62: }
 19649                           ;interrupts.c: 63: if (longTap_start == 1) {
 19650  00C0  0020               	movlb	0	; select bank0
 19651  00C1  034F               	decf	_longTap_start,w
 19652  00C2  1D03               	btfss	3,2
 19653  00C3  28DB               	goto	i1l134
 19654                           
 19655                           ;interrupts.c: 64: longTap_timer++;
 19656  00C4  3001               	movlw	1
 19657  00C5  0023               	movlb	3	; select bank3
 19658  00C6  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19659  00C7  3000               	movlw	0
 19660  00C8  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19661                           
 19662                           ;interrupts.c: 65: if (longTap_timer > long_press_limit) {
 19663  00C9  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19664  00CA  0020               	movlb	0	; select bank0
 19665  00CB  025C               	subwf	_long_press_limit+1,w
 19666  00CC  1D03               	skipz
 19667  00CD  28D2               	goto	u676_25
 19668  00CE  0023               	movlb	3	; select bank3
 19669  00CF  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19670  00D0  0020               	movlb	0	; select bank0
 19671  00D1  025B               	subwf	_long_press_limit,w
 19672  00D2                     u676_25:	
 19673  00D2  1803               	skipnc
 19674  00D3  28DB               	goto	i1l134
 19675                           
 19676                           ;interrupts.c: 66: longTap_timer = long_press_limit;
 19677  00D4  085C               	movf	_long_press_limit+1,w
 19678  00D5  0023               	movlb	3	; select bank3
 19679  00D6  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19680  00D7  0020               	movlb	0	; select bank0
 19681  00D8  085B               	movf	_long_press_limit,w
 19682  00D9  0023               	movlb	3	; select bank3
 19683  00DA  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 19684  00DB                     i1l134:	
 19685                           
 19686                           ;interrupts.c: 67: }
 19687                           ;interrupts.c: 68: }
 19688                           ;interrupts.c: 72: if ((mod_counter == subDiv) && (mod_delay_time == tmpModDelay)) {
 19689  00DB  0020               	movlb	0	; select bank0
 19690  00DC  0840               	movf	isr@subDiv,w
 19691  00DD  00BA               	movwf	??_isr
 19692  00DE  01BB               	clrf	??_isr+1
 19693  00DF  0023               	movlb	3	; select bank3
 19694  00E0  083B               	movf	(_mod_counter+1)^(0+384),w
 19695  00E1  0020               	movlb	0	; select bank0
 19696  00E2  063B               	xorwf	??_isr+1,w
 19697  00E3  1D03               	skipz
 19698  00E4  28E9               	goto	u677_25
 19699  00E5  0023               	movlb	3	; select bank3
 19700  00E6  083A               	movf	_mod_counter^(0+384),w
 19701  00E7  0020               	movlb	0	; select bank0
 19702  00E8  063A               	xorwf	??_isr,w
 19703  00E9                     u677_25:	
 19704  00E9  1D03               	skipz
 19705  00EA  2904               	goto	i1l136
 19706  00EB  0842               	movf	isr@tmpModDelay+1,w
 19707  00EC  0023               	movlb	3	; select bank3
 19708  00ED  065B               	xorwf	(_mod_delay_time+1)^(0+384),w
 19709  00EE  1D03               	skipz
 19710  00EF  28F4               	goto	u678_25
 19711  00F0  0020               	movlb	0	; select bank0
 19712  00F1  0841               	movf	isr@tmpModDelay,w
 19713  00F2  0023               	movlb	3	; select bank3
 19714  00F3  065A               	xorwf	_mod_delay_time^(0+384),w
 19715  00F4                     u678_25:	
 19716  00F4  1D03               	skipz
 19717  00F5  2904               	goto	i1l136
 19718                           
 19719                           ;interrupts.c: 73: tmpModDelay = (delay_time - timer);
 19720  00F6  0020               	movlb	0	; select bank0
 19721  00F7  0947               	comf	_timer,w	;volatile
 19722  00F8  00BA               	movwf	??_isr
 19723  00F9  0948               	comf	_timer+1,w	;volatile
 19724  00FA  00BB               	movwf	??_isr+1
 19725  00FB  0ABA               	incf	??_isr,f
 19726  00FC  1903               	skipnz
 19727  00FD  0ABB               	incf	??_isr+1,f
 19728  00FE  0855               	movf	_delay_time,w	;volatile
 19729  00FF  073A               	addwf	??_isr,w
 19730  0100  00C1               	movwf	isr@tmpModDelay
 19731  0101  0856               	movf	_delay_time+1,w	;volatile
 19732  0102  3D3B               	addwfc	??_isr+1,w
 19733  0103  00C2               	movwf	isr@tmpModDelay+1
 19734  0104                     i1l136:	
 19735                           
 19736                           ;interrupts.c: 74: }
 19737                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19738  0104  0020               	movlb	0	; select bank0
 19739  0105  0861               	movf	_longTap_state,w	;volatile
 19740  0106  1D03               	btfss	3,2
 19741  0107  2961               	goto	i1l6888
 19742  0108  084C               	movf	_doubleTap_state,w	;volatile
 19743  0109  1D03               	btfss	3,2
 19744  010A  2961               	goto	i1l6888
 19745  010B  0851               	movf	_presetSaveMode,w
 19746  010C  1D03               	btfss	3,2
 19747  010D  2961               	goto	i1l6888
 19748                           
 19749                           ;interrupts.c: 80: if (timer >= baseline_mod_time) {
 19750  010E  084A               	movf	_timer+3,w	;volatile
 19751  010F  3A80               	xorlw	128
 19752  0110  00BA               	movwf	??_isr
 19753  0111  0023               	movlb	3	; select bank3
 19754  0112  084D               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19755  0113  3A80               	xorlw	128
 19756  0114  0020               	movlb	0	; select bank0
 19757  0115  023A               	subwf	??_isr,w
 19758  0116  1D03               	skipz
 19759  0117  2928               	goto	u682_23
 19760  0118  0023               	movlb	3	; select bank3
 19761  0119  084C               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19762  011A  0020               	movlb	0	; select bank0
 19763  011B  0249               	subwf	_timer+2,w	;volatile
 19764  011C  1D03               	skipz
 19765  011D  2928               	goto	u682_23
 19766  011E  0023               	movlb	3	; select bank3
 19767  011F  084B               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19768  0120  0020               	movlb	0	; select bank0
 19769  0121  0248               	subwf	_timer+1,w	;volatile
 19770  0122  1D03               	skipz
 19771  0123  2928               	goto	u682_23
 19772  0124  0023               	movlb	3	; select bank3
 19773  0125  084A               	movf	_baseline_mod_time^(0+384),w	;volatile
 19774  0126  0020               	movlb	0	; select bank0
 19775  0127  0247               	subwf	_timer,w	;volatile
 19776  0128                     u682_23:	
 19777  0128  1C03               	skipc
 19778  0129  294F               	goto	i1l6884
 19779                           
 19780                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 19781  012A  0022               	movlb	2	; select bank2
 19782  012B  160D               	bsf	13,4	;volatile
 19783                           
 19784                           ;interrupts.c: 85: timer = 0;
 19785  012C  3000               	movlw	0
 19786  012D  0020               	movlb	0	; select bank0
 19787  012E  00CA               	movwf	_timer+3	;volatile
 19788  012F  3000               	movlw	0
 19789  0130  00C9               	movwf	_timer+2	;volatile
 19790  0131  3000               	movlw	0
 19791  0132  00C8               	movwf	_timer+1	;volatile
 19792  0133  3000               	movlw	0
 19793  0134  00C7               	movwf	_timer	;volatile
 19794                           
 19795                           ;interrupts.c: 87: if (modulation_changed == 1 || mod_time_changed == 1) {
 19796  0135  0023               	movlb	3	; select bank3
 19797  0136  0346               	decf	_modulation_changed^(0+384),w
 19798  0137  1903               	btfsc	3,2
 19799  0138  293D               	goto	i1l6880
 19800  0139  0020               	movlb	0	; select bank0
 19801  013A  0362               	decf	_mod_time_changed,w
 19802  013B  1D03               	btfss	3,2
 19803  013C  294F               	goto	i1l6884
 19804  013D                     i1l6880:	
 19805                           
 19806                           ;interrupts.c: 96: reset_sub_delay = 0;
 19807  013D  0023               	movlb	3	; select bank3
 19808  013E  01C8               	clrf	_reset_sub_delay^(0+384)
 19809                           
 19810                           ;interrupts.c: 97: sub_timer = delay_time;
 19811  013F  0020               	movlb	0	; select bank0
 19812  0140  0858               	movf	_delay_time+3,w	;volatile
 19813  0141  0023               	movlb	3	; select bank3
 19814  0142  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19815  0143  0020               	movlb	0	; select bank0
 19816  0144  0857               	movf	_delay_time+2,w	;volatile
 19817  0145  0023               	movlb	3	; select bank3
 19818  0146  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19819  0147  0020               	movlb	0	; select bank0
 19820  0148  0856               	movf	_delay_time+1,w	;volatile
 19821  0149  0023               	movlb	3	; select bank3
 19822  014A  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19823  014B  0020               	movlb	0	; select bank0
 19824  014C  0855               	movf	_delay_time,w	;volatile
 19825  014D  0023               	movlb	3	; select bank3
 19826  014E  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19827  014F                     i1l6884:	
 19828                           
 19829                           ;interrupts.c: 98: }
 19830                           ;interrupts.c: 99: }
 19831                           ;interrupts.c: 101: if (timer >= 30) {
 19832  014F  0020               	movlb	0	; select bank0
 19833  0150  1BCA               	btfsc	_timer+3,7	;volatile
 19834  0151  2961               	goto	i1l6888
 19835  0152  084A               	movf	_timer+3,w	;volatile
 19836  0153  1D03               	btfss	3,2
 19837  0154  295F               	goto	i1l6886
 19838  0155  0849               	movf	_timer+2,w	;volatile
 19839  0156  1D03               	btfss	3,2
 19840  0157  295F               	goto	i1l6886
 19841  0158  0848               	movf	_timer+1,w	;volatile
 19842  0159  1D03               	btfss	3,2
 19843  015A  295F               	goto	i1l6886
 19844  015B  301E               	movlw	30
 19845  015C  0247               	subwf	_timer,w	;volatile
 19846  015D  1C03               	btfss	3,0
 19847  015E  2961               	goto	i1l6888
 19848  015F                     i1l6886:	
 19849                           
 19850                           ;interrupts.c: 103: LATBbits.LATB4 = 0;
 19851  015F  0022               	movlb	2	; select bank2
 19852  0160  120D               	bcf	13,4	;volatile
 19853  0161                     i1l6888:	
 19854                           
 19855                           ;interrupts.c: 105: }
 19856                           ;interrupts.c: 106: }
 19857                           ;interrupts.c: 109: if (presetSaveMode == 1) {
 19858  0161  0020               	movlb	0	; select bank0
 19859  0162  0351               	decf	_presetSaveMode,w
 19860  0163  1D03               	btfss	3,2
 19861  0164  2991               	goto	i1l6900
 19862                           
 19863                           ;interrupts.c: 110: if (double_timer >= 250) {
 19864  0165  0023               	movlb	3	; select bank3
 19865  0166  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19866  0167  2980               	goto	i1l6896
 19867  0168  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19868  0169  1D03               	btfss	3,2
 19869  016A  2975               	goto	i1l6892
 19870  016B  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19871  016C  1D03               	btfss	3,2
 19872  016D  2975               	goto	i1l6892
 19873  016E  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19874  016F  1D03               	btfss	3,2
 19875  0170  2975               	goto	i1l6892
 19876  0171  30FA               	movlw	250
 19877  0172  0220               	subwf	_double_timer^(0+384),w	;volatile
 19878  0173  1C03               	btfss	3,0
 19879  0174  2980               	goto	i1l6896
 19880  0175                     i1l6892:	
 19881                           
 19882                           ;interrupts.c: 111: LATBbits.LATB0 = 1;
 19883  0175  0022               	movlb	2	; select bank2
 19884  0176  140D               	bsf	13,0	;volatile
 19885                           
 19886                           ;interrupts.c: 112: double_timer = 0;
 19887  0177  3000               	movlw	0
 19888  0178  0023               	movlb	3	; select bank3
 19889  0179  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19890  017A  3000               	movlw	0
 19891  017B  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19892  017C  3000               	movlw	0
 19893  017D  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19894  017E  3000               	movlw	0
 19895  017F  00A0               	movwf	_double_timer^(0+384)	;volatile
 19896  0180                     i1l6896:	
 19897                           
 19898                           ;interrupts.c: 113: }
 19899                           ;interrupts.c: 114: if (double_timer >= 30) {
 19900  0180  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19901  0181  2991               	goto	i1l6900
 19902  0182  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19903  0183  1D03               	btfss	3,2
 19904  0184  298F               	goto	i1l6898
 19905  0185  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19906  0186  1D03               	btfss	3,2
 19907  0187  298F               	goto	i1l6898
 19908  0188  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19909  0189  1D03               	btfss	3,2
 19910  018A  298F               	goto	i1l6898
 19911  018B  301E               	movlw	30
 19912  018C  0220               	subwf	_double_timer^(0+384),w	;volatile
 19913  018D  1C03               	btfss	3,0
 19914  018E  2991               	goto	i1l6900
 19915  018F                     i1l6898:	
 19916                           
 19917                           ;interrupts.c: 115: LATBbits.LATB0 = 0;
 19918  018F  0022               	movlb	2	; select bank2
 19919  0190  100D               	bcf	13,0	;volatile
 19920  0191                     i1l6900:	
 19921                           
 19922                           ;interrupts.c: 116: }
 19923                           ;interrupts.c: 117: }
 19924                           ;interrupts.c: 119: if (presetSaveMode < 1 && mode2_state == 0) {
 19925  0191  0020               	movlb	0	; select bank0
 19926  0192  0851               	movf	_presetSaveMode,w
 19927  0193  1D03               	btfss	3,2
 19928  0194  29EF               	goto	i1l6920
 19929  0195  0850               	movf	_mode2_state,w
 19930  0196  1D03               	btfss	3,2
 19931  0197  29EF               	goto	i1l6920
 19932                           
 19933                           ;interrupts.c: 120: if (sub_timer >= delay_time ) {
 19934  0198  0023               	movlb	3	; select bank3
 19935  0199  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19936  019A  3A80               	xorlw	128
 19937  019B  0020               	movlb	0	; select bank0
 19938  019C  00BA               	movwf	??_isr
 19939  019D  0858               	movf	_delay_time+3,w	;volatile
 19940  019E  3A80               	xorlw	128
 19941  019F  023A               	subwf	??_isr,w
 19942  01A0  0023               	movlb	3	; select bank3
 19943  01A1  1D03               	skipz
 19944  01A2  29B3               	goto	u691_23
 19945  01A3  0020               	movlb	0	; select bank0
 19946  01A4  0857               	movf	_delay_time+2,w	;volatile
 19947  01A5  0023               	movlb	3	; select bank3
 19948  01A6  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 19949  01A7  1D03               	skipz
 19950  01A8  29B3               	goto	u691_23
 19951  01A9  0020               	movlb	0	; select bank0
 19952  01AA  0856               	movf	_delay_time+1,w	;volatile
 19953  01AB  0023               	movlb	3	; select bank3
 19954  01AC  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 19955  01AD  1D03               	skipz
 19956  01AE  29B3               	goto	u691_23
 19957  01AF  0020               	movlb	0	; select bank0
 19958  01B0  0855               	movf	_delay_time,w	;volatile
 19959  01B1  0023               	movlb	3	; select bank3
 19960  01B2  0228               	subwf	_sub_timer^(0+384),w	;volatile
 19961  01B3                     u691_23:	
 19962  01B3  1C03               	skipc
 19963  01B4  29D2               	goto	i1l6914
 19964                           
 19965                           ;interrupts.c: 121: if (suspend_blink == 0) {
 19966  01B5  0020               	movlb	0	; select bank0
 19967  01B6  0853               	movf	_suspend_blink,w	;volatile
 19968  01B7  1D03               	btfss	3,2
 19969  01B8  29C4               	goto	i1l6910
 19970                           
 19971                           ;interrupts.c: 122: set_leds_top(top_push_state, 1);
 19972  01B9  085E               	movf	_top_push_state+1,w
 19973  01BA  00F1               	movwf	i1set_leds_top@x+1
 19974  01BB  085D               	movf	_top_push_state,w
 19975  01BC  00F0               	movwf	i1set_leds_top@x
 19976  01BD  3001               	movlw	1
 19977  01BE  00F2               	movwf	i1set_leds_top@ledState
 19978  01BF  3000               	movlw	0
 19979  01C0  00F3               	movwf	i1set_leds_top@ledState+1
 19980  01C1  31A3  2320  3180   	fcall	i1_set_leds_top
 19981  01C4                     i1l6910:	
 19982                           
 19983                           ;interrupts.c: 123: }
 19984                           ;interrupts.c: 124: tmpModDelay = delay_time;
 19985  01C4  0020               	movlb	0	; select bank0
 19986  01C5  0856               	movf	_delay_time+1,w	;volatile
 19987  01C6  00C2               	movwf	isr@tmpModDelay+1
 19988  01C7  0855               	movf	_delay_time,w	;volatile
 19989  01C8  00C1               	movwf	isr@tmpModDelay
 19990                           
 19991                           ;interrupts.c: 125: sub_timer = 0;
 19992  01C9  3000               	movlw	0
 19993  01CA  0023               	movlb	3	; select bank3
 19994  01CB  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19995  01CC  3000               	movlw	0
 19996  01CD  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19997  01CE  3000               	movlw	0
 19998  01CF  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19999  01D0  3000               	movlw	0
 20000  01D1  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20001  01D2                     i1l6914:	
 20002                           
 20003                           ;interrupts.c: 126: }
 20004                           ;interrupts.c: 128: if (sub_timer >= 20) {
 20005  01D2  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20006  01D3  29EF               	goto	i1l6920
 20007  01D4  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20008  01D5  1D03               	btfss	3,2
 20009  01D6  29E1               	goto	i1l6916
 20010  01D7  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20011  01D8  1D03               	btfss	3,2
 20012  01D9  29E1               	goto	i1l6916
 20013  01DA  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20014  01DB  1D03               	btfss	3,2
 20015  01DC  29E1               	goto	i1l6916
 20016  01DD  3014               	movlw	20
 20017  01DE  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20018  01DF  1C03               	btfss	3,0
 20019  01E0  29EF               	goto	i1l6920
 20020  01E1                     i1l6916:	
 20021                           
 20022                           ;interrupts.c: 129: if (suspend_blink == 0) {
 20023  01E1  0020               	movlb	0	; select bank0
 20024  01E2  0853               	movf	_suspend_blink,w	;volatile
 20025  01E3  1D03               	btfss	3,2
 20026  01E4  29EF               	goto	i1l6920
 20027                           
 20028                           ;interrupts.c: 130: set_leds_top(top_push_state, 0);
 20029  01E5  085E               	movf	_top_push_state+1,w
 20030  01E6  00F1               	movwf	i1set_leds_top@x+1
 20031  01E7  085D               	movf	_top_push_state,w
 20032  01E8  00F0               	movwf	i1set_leds_top@x
 20033  01E9  3000               	movlw	0
 20034  01EA  00F2               	movwf	i1set_leds_top@ledState
 20035  01EB  00F3               	movwf	i1set_leds_top@ledState+1
 20036  01EC  31A3  2320  3180   	fcall	i1_set_leds_top
 20037  01EF                     i1l6920:	
 20038                           
 20039                           ;interrupts.c: 131: }
 20040                           ;interrupts.c: 132: }
 20041                           ;interrupts.c: 133: }
 20042                           ;interrupts.c: 149: if (mod_timer >= tmpModDelay) {
 20043  01EF  0020               	movlb	0	; select bank0
 20044  01F0  0841               	movf	isr@tmpModDelay,w
 20045  01F1  00BA               	movwf	??_isr
 20046  01F2  0842               	movf	isr@tmpModDelay+1,w
 20047  01F3  00BB               	movwf	??_isr+1
 20048  01F4  3000               	movlw	0
 20049  01F5  1BBB               	btfsc	??_isr+1,7
 20050  01F6  30FF               	movlw	255
 20051  01F7  00BC               	movwf	??_isr+2
 20052  01F8  00BD               	movwf	??_isr+3
 20053  01F9  0023               	movlb	3	; select bank3
 20054  01FA  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20055  01FB  3A80               	xorlw	128
 20056  01FC  0020               	movlb	0	; select bank0
 20057  01FD  00BE               	movwf	??_isr+4
 20058  01FE  083D               	movf	??_isr+3,w
 20059  01FF  3A80               	xorlw	128
 20060  0200  023E               	subwf	??_isr+4,w
 20061  0201  0023               	movlb	3	; select bank3
 20062  0202  1D03               	skipz
 20063  0203  2A14               	goto	u695_23
 20064  0204  0020               	movlb	0	; select bank0
 20065  0205  083C               	movf	??_isr+2,w
 20066  0206  0023               	movlb	3	; select bank3
 20067  0207  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20068  0208  1D03               	skipz
 20069  0209  2A14               	goto	u695_23
 20070  020A  0020               	movlb	0	; select bank0
 20071  020B  083B               	movf	??_isr+1,w
 20072  020C  0023               	movlb	3	; select bank3
 20073  020D  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20074  020E  1D03               	skipz
 20075  020F  2A14               	goto	u695_23
 20076  0210  0020               	movlb	0	; select bank0
 20077  0211  083A               	movf	??_isr,w
 20078  0212  0023               	movlb	3	; select bank3
 20079  0213  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20080  0214                     u695_23:	
 20081  0214  1C03               	skipc
 20082  0215  2A85               	goto	i1l6936
 20083                           
 20084                           ;interrupts.c: 150: mod_timer = 0;
 20085  0216  3000               	movlw	0
 20086  0217  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20087  0218  3000               	movlw	0
 20088  0219  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20089  021A  3000               	movlw	0
 20090  021B  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20091  021C  3000               	movlw	0
 20092  021D  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20093                           
 20094                           ;interrupts.c: 154: if (mod_counter >= subDiv) {
 20095  021E  083B               	movf	(_mod_counter+1)^(0+384),w
 20096  021F  3A80               	xorlw	128
 20097  0220  0020               	movlb	0	; select bank0
 20098  0221  00BA               	movwf	??_isr
 20099  0222  3080               	movlw	128
 20100  0223  023A               	subwf	??_isr,w
 20101  0224  1D03               	skipz
 20102  0225  2A29               	goto	u696_25
 20103  0226  0840               	movf	isr@subDiv,w
 20104  0227  0023               	movlb	3	; select bank3
 20105  0228  023A               	subwf	_mod_counter^(0+384),w
 20106  0229                     u696_25:	
 20107  0229  1C03               	skipc
 20108  022A  2A31               	goto	i1l152
 20109                           
 20110                           ;interrupts.c: 155: mod_counter = 0;
 20111  022B  0023               	movlb	3	; select bank3
 20112  022C  01BA               	clrf	_mod_counter^(0+384)
 20113  022D  01BB               	clrf	(_mod_counter+1)^(0+384)
 20114                           
 20115                           ;interrupts.c: 156: LATBbits.LATB0 = 1;
 20116  022E  0022               	movlb	2	; select bank2
 20117  022F  140D               	bsf	13,0	;volatile
 20118                           
 20119                           ;interrupts.c: 157: } else {
 20120  0230  2A33               	goto	i1l6928
 20121  0231                     i1l152:	
 20122                           
 20123                           ;interrupts.c: 158: LATBbits.LATB0 = 0;
 20124  0231  0022               	movlb	2	; select bank2
 20125  0232  100D               	bcf	13,0	;volatile
 20126  0233                     i1l6928:	
 20127                           
 20128                           ;interrupts.c: 159: }
 20129                           ;interrupts.c: 161: mod_value = modArray[mod_counter];
 20130  0233  0023               	movlb	3	; select bank3
 20131  0234  083B               	movf	(_mod_counter+1)^(0+384),w
 20132  0235  0020               	movlb	0	; select bank0
 20133  0236  00BB               	movwf	??_isr+1
 20134  0237  0023               	movlb	3	; select bank3
 20135  0238  083A               	movf	_mod_counter^(0+384),w
 20136  0239  0020               	movlb	0	; select bank0
 20137  023A  00BA               	movwf	??_isr
 20138  023B  35BA               	lslf	??_isr,f
 20139  023C  0DBB               	rlf	??_isr+1,f
 20140  023D  308A               	movlw	138
 20141  023E  00BC               	movwf	??_isr+2
 20142  023F  3023               	movlw	35
 20143  0240  00BD               	movwf	??_isr+3
 20144  0241  083A               	movf	??_isr,w
 20145  0242  073C               	addwf	??_isr+2,w
 20146  0243  0086               	movwf	6
 20147  0244  083B               	movf	??_isr+1,w
 20148  0245  3D3D               	addwfc	??_isr+3,w
 20149  0246  0087               	movwf	7
 20150  0247  3F40               	moviw [0]fsr1
 20151  0248  0023               	movlb	3	; select bank3
 20152  0249  00BC               	movwf	_mod_value^(0+384)
 20153  024A  3F41               	moviw [1]fsr1
 20154  024B  00BD               	movwf	(_mod_value+1)^(0+384)
 20155                           
 20156                           ;interrupts.c: 168: mod_value = modulation(mod_value, adjusted_pot_value);
 20157  024C  083C               	movf	_mod_value^(0+384),w
 20158  024D  0020               	movlb	0	; select bank0
 20159  024E  00AE               	movwf	modulation@x
 20160  024F  0023               	movlb	3	; select bank3
 20161  0250  083D               	movf	(_mod_value+1)^(0+384),w
 20162  0251  0020               	movlb	0	; select bank0
 20163  0252  00AF               	movwf	modulation@x+1
 20164  0253  0D89               	rlf	9,f
 20165  0254  3B89               	subwfb	9,f
 20166  0255  0989               	comf	9,f
 20167  0256  00B0               	movwf	modulation@x+2
 20168  0257  00B1               	movwf	modulation@x+3
 20169  0258  0024               	movlb	4	; select bank4
 20170  0259  0841               	movf	_adjusted_pot_value^(0+512),w
 20171  025A  0020               	movlb	0	; select bank0
 20172  025B  00B2               	movwf	modulation@y
 20173  025C  0024               	movlb	4	; select bank4
 20174  025D  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20175  025E  0020               	movlb	0	; select bank0
 20176  025F  00B3               	movwf	modulation@y+1
 20177  0260  0D89               	rlf	9,f
 20178  0261  3B89               	subwfb	9,f
 20179  0262  0989               	comf	9,f
 20180  0263  00B4               	movwf	modulation@y+2
 20181  0264  00B5               	movwf	modulation@y+3
 20182  0265  31A2  229E  3180   	fcall	_modulation
 20183  0268  0020               	movlb	0	; select bank0
 20184  0269  082F               	movf	?_modulation+1,w
 20185  026A  0023               	movlb	3	; select bank3
 20186  026B  00BD               	movwf	(_mod_value+1)^(0+384)
 20187  026C  0020               	movlb	0	; select bank0
 20188  026D  082E               	movf	?_modulation,w
 20189  026E  0023               	movlb	3	; select bank3
 20190  026F  00BC               	movwf	_mod_value^(0+384)
 20191                           
 20192                           ;interrupts.c: 169: CCPR3 = mod_value / 2;
 20193  0270  3002               	movlw	2
 20194  0271  00F0               	movwf	i1___awdiv@divisor
 20195  0272  3000               	movlw	0
 20196  0273  00F1               	movwf	i1___awdiv@divisor+1
 20197  0274  083D               	movf	(_mod_value+1)^(0+384),w
 20198  0275  00F3               	movwf	i1___awdiv@dividend+1
 20199  0276  083C               	movf	_mod_value^(0+384),w
 20200  0277  00F2               	movwf	i1___awdiv@dividend
 20201  0278  31A4  24E2  3180   	fcall	i1___awdiv
 20202  027B  0871               	movf	?i1___awdiv+1,w
 20203  027C  0026               	movlb	6	; select bank6
 20204  027D  0092               	movwf	18	;volatile
 20205  027E  0870               	movf	?i1___awdiv,w
 20206  027F  0091               	movwf	17	;volatile
 20207                           
 20208                           ;interrupts.c: 170: mod_counter++;
 20209  0280  3001               	movlw	1
 20210  0281  0023               	movlb	3	; select bank3
 20211  0282  07BA               	addwf	_mod_counter^(0+384),f
 20212  0283  3000               	movlw	0
 20213  0284  3DBB               	addwfc	(_mod_counter+1)^(0+384),f
 20214  0285                     i1l6936:	
 20215                           
 20216                           ;interrupts.c: 172: }
 20217                           ;interrupts.c: 174: if (preset_programmning_on == 1) {
 20218  0285  0347               	decf	_preset_programmning_on^(0+384),w
 20219  0286  1D03               	btfss	3,2
 20220  0287  2AB2               	goto	i1l6948
 20221                           
 20222                           ;interrupts.c: 175: preset_blink++;
 20223  0288  3001               	movlw	1
 20224  0289  0020               	movlb	0	; select bank0
 20225  028A  00BA               	movwf	??_isr
 20226  028B  083A               	movf	??_isr,w
 20227  028C  07D2               	addwf	_preset_blink,f
 20228                           
 20229                           ;interrupts.c: 177: if (preset_blink >= blink_delay) {
 20230  028D  0023               	movlb	3	; select bank3
 20231  028E  084F               	movf	(_blink_delay+1)^(0+384),w
 20232  028F  3A80               	xorlw	128
 20233  0290  3C80               	sublw	128
 20234  0291  1D03               	skipz
 20235  0292  2A96               	goto	u698_25
 20236  0293  084E               	movf	_blink_delay^(0+384),w
 20237  0294  0020               	movlb	0	; select bank0
 20238  0295  0252               	subwf	_preset_blink,w
 20239  0296                     u698_25:	
 20240  0296  1C03               	skipc
 20241  0297  2AB7               	goto	i1l6952
 20242                           
 20243                           ;interrupts.c: 178: LATBbits.LATB1 = 1;
 20244  0298  0022               	movlb	2	; select bank2
 20245  0299  148D               	bsf	13,1	;volatile
 20246                           
 20247                           ;interrupts.c: 179: if (preset_blink > blink_delay*2) {
 20248  029A  0023               	movlb	3	; select bank3
 20249  029B  084F               	movf	(_blink_delay+1)^(0+384),w
 20250  029C  0020               	movlb	0	; select bank0
 20251  029D  00BB               	movwf	??_isr+1
 20252  029E  0023               	movlb	3	; select bank3
 20253  029F  084E               	movf	_blink_delay^(0+384),w
 20254  02A0  0020               	movlb	0	; select bank0
 20255  02A1  00BA               	movwf	??_isr
 20256  02A2  35BA               	lslf	??_isr,f
 20257  02A3  0DBB               	rlf	??_isr+1,f
 20258  02A4  083B               	movf	??_isr+1,w
 20259  02A5  3A80               	xorlw	128
 20260  02A6  00BC               	movwf	??_isr+2
 20261  02A7  3080               	movlw	128
 20262  02A8  023C               	subwf	??_isr+2,w
 20263  02A9  1D03               	skipz
 20264  02AA  2AAD               	goto	u699_25
 20265  02AB  0852               	movf	_preset_blink,w
 20266  02AC  023A               	subwf	??_isr,w
 20267  02AD                     u699_25:	
 20268  02AD  1803               	skipnc
 20269  02AE  2AB9               	goto	i1l6954
 20270                           
 20271                           ;interrupts.c: 180: preset_blink = 0;
 20272  02AF  0020               	movlb	0	; select bank0
 20273  02B0  01D2               	clrf	_preset_blink
 20274                           
 20275                           ;interrupts.c: 181: }
 20276                           ;interrupts.c: 183: } else {
 20277  02B1  2AB9               	goto	i1l6954
 20278  02B2                     i1l6948:	
 20279                           ;interrupts.c: 185: }
 20280                           ;interrupts.c: 187: } else {
 20281                           
 20282                           ;interrupts.c: 184: LATBbits.LATB1 = 0;
 20283                           
 20284                           
 20285                           ;interrupts.c: 188: if (preset_blink > 0) {
 20286  02B2  0020               	movlb	0	; select bank0
 20287  02B3  0852               	movf	_preset_blink,w
 20288  02B4  1903               	btfsc	3,2
 20289  02B5  2AB9               	goto	i1l6954
 20290                           
 20291                           ;interrupts.c: 189: preset_blink = 0;
 20292  02B6  01D2               	clrf	_preset_blink
 20293  02B7                     i1l6952:	
 20294                           
 20295                           ;interrupts.c: 190: LATBbits.LATB1 = 0;
 20296  02B7  0022               	movlb	2	; select bank2
 20297  02B8  108D               	bcf	13,1	;volatile
 20298  02B9                     i1l6954:	
 20299                           
 20300                           ;interrupts.c: 191: }
 20301                           ;interrupts.c: 192: }
 20302                           ;interrupts.c: 196: INTCONbits.TMR0IF = 0;
 20303  02B9  110B               	bcf	11,2	;volatile
 20304  02BA                     i1l160:	
 20305  02BA  0020               	movlb	0	; select bank0
 20306  02BB  083F               	movf	??_isr+5,w
 20307  02BC  00FF               	movwf	127
 20308  02BD  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20309  02BE  0009               	retfie
 20310  02BF                     __end_of_isr:	
 20311                           
 20312                           	psect	text75
 20313  2320                     __ptext75:	
 20314 ;; *************** function i1_set_leds_top *****************
 20315 ;; Defined at:
 20316 ;;		line 16 in file "LEDs.c"
 20317 ;; Parameters:    Size  Location     Type
 20318 ;;  x               2    0[COMMON] int 
 20319 ;;  ledState        2    2[COMMON] int 
 20320 ;; Auto vars:     Size  Location     Type
 20321 ;;		None
 20322 ;; Return value:  Size  Location     Type
 20323 ;;                  1    wreg      void 
 20324 ;; Registers used:
 20325 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20326 ;; Tracked objects:
 20327 ;;		On entry : 0/0
 20328 ;;		On exit  : 0/0
 20329 ;;		Unchanged: 0/0
 20330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20334 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20335 ;;Total ram usage:        4 bytes
 20336 ;; Hardware stack levels used:    1
 20337 ;; This function calls:
 20338 ;;		Nothing
 20339 ;; This function is called by:
 20340 ;;		_isr
 20341 ;; This function uses a non-reentrant model
 20342 ;;
 20343                           
 20344                           
 20345                           ;psect for function i1_set_leds_top
 20346  2320                     i1_set_leds_top:	
 20347                           
 20348                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20349                           
 20350                           ;incstack = 0
 20351                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20352  2320  0027               	movlb	7	; select bank7
 20353  2321  100C               	bcf	12,0	;volatile
 20354                           
 20355                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20356  2322  108C               	bcf	12,1	;volatile
 20357                           
 20358                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20359  2323  110C               	bcf	12,2	;volatile
 20360                           
 20361                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20362  2324  118C               	bcf	12,3	;volatile
 20363                           
 20364                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20365  2325  120C               	bcf	12,4	;volatile
 20366                           
 20367                           ;LEDs.c: 22: switch (x) {
 20368  2326  2B4B               	goto	i1l6772
 20369  2327                     i1l6760:	
 20370                           ;LEDs.c: 23: case 1:
 20371                           
 20372                           
 20373                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20374  2327  0C72               	rrf	i1set_leds_top@ledState,w
 20375  2328  1C03               	skipc
 20376  2329  100C               	bcf	12,0	;volatile
 20377  232A  1803               	skipnc
 20378  232B  140C               	bsf	12,0	;volatile
 20379                           
 20380                           ;LEDs.c: 25: break;
 20381  232C  0008               	return
 20382  232D                     i1l6762:	
 20383                           ;LEDs.c: 26: case 2:
 20384                           
 20385                           
 20386                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20387  232D  0C72               	rrf	i1set_leds_top@ledState,w
 20388  232E  1C03               	skipc
 20389  232F  108C               	bcf	12,1	;volatile
 20390  2330  1803               	skipnc
 20391  2331  148C               	bsf	12,1	;volatile
 20392                           
 20393                           ;LEDs.c: 28: break;
 20394  2332  0008               	return
 20395  2333                     i1l6764:	
 20396                           ;LEDs.c: 29: case 3:
 20397                           
 20398                           
 20399                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20400  2333  0C72               	rrf	i1set_leds_top@ledState,w
 20401  2334  1C03               	skipc
 20402  2335  110C               	bcf	12,2	;volatile
 20403  2336  1803               	skipnc
 20404  2337  150C               	bsf	12,2	;volatile
 20405                           
 20406                           ;LEDs.c: 31: break;
 20407  2338  0008               	return
 20408  2339                     i1l6766:	
 20409                           ;LEDs.c: 32: case 4:
 20410                           
 20411                           
 20412                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20413  2339  0C72               	rrf	i1set_leds_top@ledState,w
 20414  233A  1C03               	skipc
 20415  233B  118C               	bcf	12,3	;volatile
 20416  233C  1803               	skipnc
 20417  233D  158C               	bsf	12,3	;volatile
 20418                           
 20419                           ;LEDs.c: 34: break;
 20420  233E  0008               	return
 20421  233F                     i1l6768:	
 20422                           ;LEDs.c: 35: case 5:
 20423                           
 20424                           
 20425                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20426  233F  0C72               	rrf	i1set_leds_top@ledState,w
 20427  2340  1C03               	skipc
 20428  2341  120C               	bcf	12,4	;volatile
 20429  2342  1803               	skipnc
 20430  2343  160C               	bsf	12,4	;volatile
 20431                           
 20432                           ;LEDs.c: 39: break;
 20433                           
 20434                           ;LEDs.c: 38: case 6:
 20435                           
 20436                           ;LEDs.c: 37: break;
 20437  2344  0008               	return
 20438  2345                     i1l787:	
 20439                           ;LEDs.c: 40: case 100:
 20440                           
 20441                           
 20442                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20443  2345  140C               	bsf	12,0	;volatile
 20444                           
 20445                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20446  2346  148C               	bsf	12,1	;volatile
 20447                           
 20448                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20449  2347  150C               	bsf	12,2	;volatile
 20450                           
 20451                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20452  2348  158C               	bsf	12,3	;volatile
 20453                           
 20454                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20455  2349  160C               	bsf	12,4	;volatile
 20456                           
 20457                           ;LEDs.c: 47: }
 20458                           
 20459                           ;LEDs.c: 46: break;
 20460  234A  0008               	return
 20461  234B                     i1l6772:	
 20462                           
 20463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20464                           ; Switch size 1, requested type "space"
 20465                           ; Number of cases is 1, Range of values is 0 to 0
 20466                           ; switch strategies available:
 20467                           ; Name         Instructions Cycles
 20468                           ; simple_byte            4     3 (average)
 20469                           ; direct_byte            8     6 (fixed)
 20470                           ; jumptable            260     6 (fixed)
 20471                           ;	Chosen strategy is simple_byte
 20472  234B  0871               	movf	i1set_leds_top@x+1,w
 20473  234C  3A00               	xorlw	0	; case 0
 20474  234D  1903               	skipnz
 20475  234E  2B50               	goto	i1l9768
 20476  234F  2B67               	goto	i1l788
 20477  2350                     i1l9768:	
 20478                           
 20479                           ; Switch size 1, requested type "space"
 20480                           ; Number of cases is 7, Range of values is 1 to 100
 20481                           ; switch strategies available:
 20482                           ; Name         Instructions Cycles
 20483                           ; simple_byte           22    12 (average)
 20484                           ; direct_byte          209     9 (fixed)
 20485                           ; jumptable            263     9 (fixed)
 20486                           ;	Chosen strategy is simple_byte
 20487  2350  0870               	movf	i1set_leds_top@x,w
 20488  2351  3A01               	xorlw	1	; case 1
 20489  2352  1903               	skipnz
 20490  2353  2B27               	goto	i1l6760
 20491  2354  3A03               	xorlw	3	; case 2
 20492  2355  1903               	skipnz
 20493  2356  2B2D               	goto	i1l6762
 20494  2357  3A01               	xorlw	1	; case 3
 20495  2358  1903               	skipnz
 20496  2359  2B33               	goto	i1l6764
 20497  235A  3A07               	xorlw	7	; case 4
 20498  235B  1903               	skipnz
 20499  235C  2B39               	goto	i1l6766
 20500  235D  3A01               	xorlw	1	; case 5
 20501  235E  1903               	skipnz
 20502  235F  2B3F               	goto	i1l6768
 20503  2360  3A03               	xorlw	3	; case 6
 20504  2361  1903               	skipnz
 20505  2362  2B67               	goto	i1l788
 20506  2363  3A62               	xorlw	98	; case 100
 20507  2364  1903               	skipnz
 20508  2365  2B45               	goto	i1l787
 20509  2366  2B67               	goto	i1l788
 20510  2367                     i1l788:	
 20511  2367  0008               	return
 20512  2368                     __end_ofi1_set_leds_top:	
 20513                           
 20514                           	psect	text76
 20515  2F46                     __ptext76:	
 20516 ;; *************** function i1_getModulationSubdivision *****************
 20517 ;; Defined at:
 20518 ;;		line 26 in file "modulation.c"
 20519 ;; Parameters:    Size  Location     Type
 20520 ;;		None
 20521 ;; Auto vars:     Size  Location     Type
 20522 ;;		None
 20523 ;; Return value:  Size  Location     Type
 20524 ;;                  2    0[COMMON] int 
 20525 ;; Registers used:
 20526 ;;		wreg, status,2, status,0
 20527 ;; Tracked objects:
 20528 ;;		On entry : 0/0
 20529 ;;		On exit  : 0/0
 20530 ;;		Unchanged: 0/0
 20531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20536 ;;Total ram usage:        2 bytes
 20537 ;; Hardware stack levels used:    1
 20538 ;; This function calls:
 20539 ;;		Nothing
 20540 ;; This function is called by:
 20541 ;;		_isr
 20542 ;; This function uses a non-reentrant model
 20543 ;;
 20544                           
 20545                           
 20546                           ;psect for function i1_getModulationSubdivision
 20547  2F46                     i1_getModulationSubdivision:	
 20548                           
 20549                           ;modulation.c: 27: if (delay_time >= 2400) {
 20550                           
 20551                           ;incstack = 0
 20552                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20553  2F46  0020               	movlb	0	; select bank0
 20554  2F47  1BD8               	btfsc	_delay_time+3,7	;volatile
 20555  2F48  2F5A               	goto	i1l6786
 20556  2F49  0858               	movf	_delay_time+3,w	;volatile
 20557  2F4A  1D03               	btfss	3,2
 20558  2F4B  2F55               	goto	i1l6780
 20559  2F4C  0857               	movf	_delay_time+2,w	;volatile
 20560  2F4D  1D03               	btfss	3,2
 20561  2F4E  2F55               	goto	i1l6780
 20562  2F4F  3060               	movlw	96
 20563  2F50  0255               	subwf	_delay_time,w	;volatile
 20564  2F51  3009               	movlw	9
 20565  2F52  3B56               	subwfb	_delay_time+1,w	;volatile
 20566  2F53  1C03               	btfss	3,0
 20567  2F54  2F5A               	goto	i1l6786
 20568  2F55                     i1l6780:	
 20569                           
 20570                           ;modulation.c: 28: return 120;
 20571  2F55  3078               	movlw	120
 20572  2F56  00F0               	movwf	?i1_getModulationSubdivision
 20573  2F57  3000               	movlw	0
 20574  2F58  00F1               	movwf	?i1_getModulationSubdivision+1
 20575                           
 20576                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20577  2F59  0008               	return
 20578  2F5A                     i1l6786:	
 20579  2F5A  1BD8               	btfsc	_delay_time+3,7	;volatile
 20580  2F5B  2F6D               	goto	i1l6794
 20581  2F5C  0858               	movf	_delay_time+3,w	;volatile
 20582  2F5D  1D03               	btfss	3,2
 20583  2F5E  2F68               	goto	i1l6788
 20584  2F5F  0857               	movf	_delay_time+2,w	;volatile
 20585  2F60  1D03               	btfss	3,2
 20586  2F61  2F68               	goto	i1l6788
 20587  2F62  3058               	movlw	88
 20588  2F63  0255               	subwf	_delay_time,w	;volatile
 20589  2F64  3002               	movlw	2
 20590  2F65  3B56               	subwfb	_delay_time+1,w	;volatile
 20591  2F66  1C03               	btfss	3,0
 20592  2F67  2F6D               	goto	i1l6794
 20593  2F68                     i1l6788:	
 20594                           
 20595                           ;modulation.c: 30: return 60;
 20596  2F68  303C               	movlw	60
 20597  2F69  00F0               	movwf	?i1_getModulationSubdivision
 20598  2F6A  3000               	movlw	0
 20599  2F6B  00F1               	movwf	?i1_getModulationSubdivision+1
 20600                           
 20601                           ;modulation.c: 31: } else {
 20602  2F6C  0008               	return
 20603  2F6D                     i1l6794:	
 20604                           
 20605                           ;modulation.c: 32: return 30;
 20606  2F6D  301E               	movlw	30
 20607  2F6E  00F0               	movwf	?i1_getModulationSubdivision
 20608  2F6F  3000               	movlw	0
 20609  2F70  00F1               	movwf	?i1_getModulationSubdivision+1
 20610  2F71  0008               	return
 20611  2F72                     __end_ofi1_getModulationSubdivision:	
 20612                           
 20613                           	psect	text77
 20614  24E2                     __ptext77:	
 20615 ;; *************** function i1___awdiv *****************
 20616 ;; Defined at:
 20617 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20618 ;; Parameters:    Size  Location     Type
 20619 ;;  divisor         2    0[COMMON] int 
 20620 ;;  dividend        2    2[COMMON] int 
 20621 ;; Auto vars:     Size  Location     Type
 20622 ;;  __awdiv         2    7[COMMON] int 
 20623 ;;  __awdiv         1    6[COMMON] unsigned char 
 20624 ;;  __awdiv         1    5[COMMON] unsigned char 
 20625 ;; Return value:  Size  Location     Type
 20626 ;;                  2    0[COMMON] int 
 20627 ;; Registers used:
 20628 ;;		wreg, status,2, status,0
 20629 ;; Tracked objects:
 20630 ;;		On entry : 0/0
 20631 ;;		On exit  : 0/0
 20632 ;;		Unchanged: 0/0
 20633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20634 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20635 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20636 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20637 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20638 ;;Total ram usage:        9 bytes
 20639 ;; Hardware stack levels used:    1
 20640 ;; This function calls:
 20641 ;;		Nothing
 20642 ;; This function is called by:
 20643 ;;		_isr
 20644 ;; This function uses a non-reentrant model
 20645 ;;
 20646                           
 20647                           
 20648                           ;psect for function i1___awdiv
 20649  24E2                     i1___awdiv:	
 20650                           
 20651                           ;incstack = 0
 20652                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20653  24E2  01F6               	clrf	i1___awdiv@sign
 20654  24E3  1FF1               	btfss	i1___awdiv@divisor+1,7
 20655  24E4  2CEC               	goto	i1l6806
 20656  24E5  09F0               	comf	i1___awdiv@divisor,f
 20657  24E6  09F1               	comf	i1___awdiv@divisor+1,f
 20658  24E7  0AF0               	incf	i1___awdiv@divisor,f
 20659  24E8  1903               	skipnz
 20660  24E9  0AF1               	incf	i1___awdiv@divisor+1,f
 20661  24EA  01F6               	clrf	i1___awdiv@sign
 20662  24EB  0AF6               	incf	i1___awdiv@sign,f
 20663  24EC                     i1l6806:	
 20664  24EC  1FF3               	btfss	i1___awdiv@dividend+1,7
 20665  24ED  2CF7               	goto	i1l6812
 20666  24EE  09F2               	comf	i1___awdiv@dividend,f
 20667  24EF  09F3               	comf	i1___awdiv@dividend+1,f
 20668  24F0  0AF2               	incf	i1___awdiv@dividend,f
 20669  24F1  1903               	skipnz
 20670  24F2  0AF3               	incf	i1___awdiv@dividend+1,f
 20671  24F3  3001               	movlw	1
 20672  24F4  00F4               	movwf	??i1___awdiv
 20673  24F5  0874               	movf	??i1___awdiv,w
 20674  24F6  06F6               	xorwf	i1___awdiv@sign,f
 20675  24F7                     i1l6812:	
 20676  24F7  01F7               	clrf	i1___awdiv@quotient
 20677  24F8  01F8               	clrf	i1___awdiv@quotient+1
 20678  24F9  0870               	movf	i1___awdiv@divisor,w
 20679  24FA  0471               	iorwf	i1___awdiv@divisor+1,w
 20680  24FB  1903               	btfsc	3,2
 20681  24FC  2D26               	goto	i1l6834
 20682  24FD  01F5               	clrf	i1___awdiv@counter
 20683  24FE  0AF5               	incf	i1___awdiv@counter,f
 20684  24FF                     i1l6822:	
 20685  24FF  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20686  2500  2D0B               	goto	i1l6824
 20687  2501  3001               	movlw	1
 20688  2502                     u665_25:	
 20689  2502  35F0               	lslf	i1___awdiv@divisor,f
 20690  2503  0DF1               	rlf	i1___awdiv@divisor+1,f
 20691  2504  0B89               	decfsz	9,f
 20692  2505  2D02               	goto	u665_25
 20693  2506  3001               	movlw	1
 20694  2507  00F4               	movwf	??i1___awdiv
 20695  2508  0874               	movf	??i1___awdiv,w
 20696  2509  07F5               	addwf	i1___awdiv@counter,f
 20697  250A  2CFF               	goto	i1l6822
 20698  250B                     i1l6824:	
 20699  250B  3001               	movlw	1
 20700  250C                     u667_25:	
 20701  250C  35F7               	lslf	i1___awdiv@quotient,f
 20702  250D  0DF8               	rlf	i1___awdiv@quotient+1,f
 20703  250E  0B89               	decfsz	9,f
 20704  250F  2D0C               	goto	u667_25
 20705  2510  0871               	movf	i1___awdiv@divisor+1,w
 20706  2511  0273               	subwf	i1___awdiv@dividend+1,w
 20707  2512  1D03               	skipz
 20708  2513  2D16               	goto	u668_25
 20709  2514  0870               	movf	i1___awdiv@divisor,w
 20710  2515  0272               	subwf	i1___awdiv@dividend,w
 20711  2516                     u668_25:	
 20712  2516  1C03               	skipc
 20713  2517  2D1D               	goto	i1l6830
 20714  2518  0870               	movf	i1___awdiv@divisor,w
 20715  2519  02F2               	subwf	i1___awdiv@dividend,f
 20716  251A  0871               	movf	i1___awdiv@divisor+1,w
 20717  251B  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20718  251C  1477               	bsf	i1___awdiv@quotient,0
 20719  251D                     i1l6830:	
 20720  251D  3001               	movlw	1
 20721  251E                     u669_25:	
 20722  251E  36F1               	lsrf	i1___awdiv@divisor+1,f
 20723  251F  0CF0               	rrf	i1___awdiv@divisor,f
 20724  2520  0B89               	decfsz	9,f
 20725  2521  2D1E               	goto	u669_25
 20726  2522  3001               	movlw	1
 20727  2523  02F5               	subwf	i1___awdiv@counter,f
 20728  2524  1D03               	btfss	3,2
 20729  2525  2D0B               	goto	i1l6824
 20730  2526                     i1l6834:	
 20731  2526  0876               	movf	i1___awdiv@sign,w
 20732  2527  1903               	btfsc	3,2
 20733  2528  2D2E               	goto	i1l6838
 20734  2529  09F7               	comf	i1___awdiv@quotient,f
 20735  252A  09F8               	comf	i1___awdiv@quotient+1,f
 20736  252B  0AF7               	incf	i1___awdiv@quotient,f
 20737  252C  1903               	skipnz
 20738  252D  0AF8               	incf	i1___awdiv@quotient+1,f
 20739  252E                     i1l6838:	
 20740  252E  0878               	movf	i1___awdiv@quotient+1,w
 20741  252F  00F1               	movwf	?i1___awdiv+1
 20742  2530  0877               	movf	i1___awdiv@quotient,w
 20743  2531  00F0               	movwf	?i1___awdiv
 20744  2532  0008               	return
 20745  2533                     __end_ofi1___awdiv:	
 20746                           
 20747                           	psect	text78
 20748  229E                     __ptext78:	
 20749 ;; *************** function _modulation *****************
 20750 ;; Defined at:
 20751 ;;		line 222 in file "user.c"
 20752 ;; Parameters:    Size  Location     Type
 20753 ;;  x               4   14[BANK0 ] long 
 20754 ;;  y               4   18[BANK0 ] long 
 20755 ;; Auto vars:     Size  Location     Type
 20756 ;;		None
 20757 ;; Return value:  Size  Location     Type
 20758 ;;                  4   14[BANK0 ] long 
 20759 ;; Registers used:
 20760 ;;		wreg, status,2, status,0, pclath, cstack
 20761 ;; Tracked objects:
 20762 ;;		On entry : 0/0
 20763 ;;		On exit  : 0/0
 20764 ;;		Unchanged: 0/0
 20765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20766 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20768 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20769 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20770 ;;Total ram usage:       12 bytes
 20771 ;; Hardware stack levels used:    1
 20772 ;; Hardware stack levels required when called:    1
 20773 ;; This function calls:
 20774 ;;		i1___aldiv
 20775 ;;		i1___lmul
 20776 ;; This function is called by:
 20777 ;;		_isr
 20778 ;; This function uses a non-reentrant model
 20779 ;;
 20780                           
 20781                           
 20782                           ;psect for function _modulation
 20783  229E                     _modulation:	
 20784                           
 20785                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20786                           
 20787                           ;incstack = 0
 20788                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20789  229E  3000               	movlw	0
 20790  229F  0020               	movlb	0	; select bank0
 20791  22A0  00A3               	movwf	i1___aldiv@divisor+3
 20792  22A1  3000               	movlw	0
 20793  22A2  00A2               	movwf	i1___aldiv@divisor+2
 20794  22A3  3003               	movlw	3
 20795  22A4  00A1               	movwf	i1___aldiv@divisor+1
 20796  22A5  30E8               	movlw	232
 20797  22A6  00A0               	movwf	i1___aldiv@divisor
 20798  22A7  300C               	movlw	12
 20799  22A8  00B6               	movwf	??_modulation
 20800  22A9  30F2               	movlw	242
 20801  22AA  00B7               	movwf	??_modulation+1
 20802  22AB  3001               	movlw	1
 20803  22AC  00B8               	movwf	??_modulation+2
 20804  22AD  3000               	movlw	0
 20805  22AE  00B9               	movwf	??_modulation+3
 20806  22AF  0835               	movf	modulation@y+3,w
 20807  22B0  00F3               	movwf	i1___lmul@multiplier+3
 20808  22B1  0834               	movf	modulation@y+2,w
 20809  22B2  00F2               	movwf	i1___lmul@multiplier+2
 20810  22B3  0833               	movf	modulation@y+1,w
 20811  22B4  00F1               	movwf	i1___lmul@multiplier+1
 20812  22B5  0832               	movf	modulation@y,w
 20813  22B6  00F0               	movwf	i1___lmul@multiplier
 20814  22B7  0831               	movf	modulation@x+3,w
 20815  22B8  00F7               	movwf	i1___lmul@multiplicand+3
 20816  22B9  0830               	movf	modulation@x+2,w
 20817  22BA  00F6               	movwf	i1___lmul@multiplicand+2
 20818  22BB  082F               	movf	modulation@x+1,w
 20819  22BC  00F5               	movwf	i1___lmul@multiplicand+1
 20820  22BD  082E               	movf	modulation@x,w
 20821  22BE  00F4               	movwf	i1___lmul@multiplicand
 20822  22BF  3188  2000  31A2   	fcall	i1___lmul
 20823  22C2  0870               	movf	?i1___lmul,w
 20824  22C3  0020               	movlb	0	; select bank0
 20825  22C4  07B6               	addwf	??_modulation,f
 20826  22C5  0871               	movf	?i1___lmul+1,w
 20827  22C6  3DB7               	addwfc	??_modulation+1,f
 20828  22C7  0872               	movf	?i1___lmul+2,w
 20829  22C8  3DB8               	addwfc	??_modulation+2,f
 20830  22C9  0873               	movf	?i1___lmul+3,w
 20831  22CA  3DB9               	addwfc	??_modulation+3,f
 20832  22CB  0839               	movf	??_modulation+3,w
 20833  22CC  00A7               	movwf	i1___aldiv@dividend+3
 20834  22CD  0838               	movf	??_modulation+2,w
 20835  22CE  00A6               	movwf	i1___aldiv@dividend+2
 20836  22CF  0837               	movf	??_modulation+1,w
 20837  22D0  00A5               	movwf	i1___aldiv@dividend+1
 20838  22D1  0836               	movf	??_modulation,w
 20839  22D2  00A4               	movwf	i1___aldiv@dividend
 20840  22D3  3198  2047         	fcall	i1___aldiv
 20841  22D5  0020               	movlb	0	; select bank0
 20842  22D6  0823               	movf	?i1___aldiv+3,w
 20843  22D7  00B1               	movwf	?_modulation+3
 20844  22D8  0822               	movf	?i1___aldiv+2,w
 20845  22D9  00B0               	movwf	?_modulation+2
 20846  22DA  0821               	movf	?i1___aldiv+1,w
 20847  22DB  00AF               	movwf	?_modulation+1
 20848  22DC  0820               	movf	?i1___aldiv,w
 20849  22DD  00AE               	movwf	?_modulation
 20850  22DE  0008               	return
 20851  22DF                     __end_of_modulation:	
 20852                           
 20853                           	psect	text79
 20854  0800                     __ptext79:	
 20855 ;; *************** function i1___lmul *****************
 20856 ;; Defined at:
 20857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20858 ;; Parameters:    Size  Location     Type
 20859 ;;  multiplier      4    0[COMMON] unsigned long 
 20860 ;;  multiplicand    4    4[COMMON] unsigned long 
 20861 ;; Auto vars:     Size  Location     Type
 20862 ;;  __lmul          4    8[COMMON] unsigned long 
 20863 ;; Return value:  Size  Location     Type
 20864 ;;                  4    0[COMMON] unsigned long 
 20865 ;; Registers used:
 20866 ;;		wreg, status,2, status,0
 20867 ;; Tracked objects:
 20868 ;;		On entry : 0/0
 20869 ;;		On exit  : 0/0
 20870 ;;		Unchanged: 0/0
 20871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20872 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20873 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20875 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20876 ;;Total ram usage:       12 bytes
 20877 ;; Hardware stack levels used:    1
 20878 ;; This function calls:
 20879 ;;		Nothing
 20880 ;; This function is called by:
 20881 ;;		_modulation
 20882 ;; This function uses a non-reentrant model
 20883 ;;
 20884                           
 20885                           
 20886                           ;psect for function i1___lmul
 20887  0800                     i1___lmul:	
 20888                           
 20889                           ;incstack = 0
 20890                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20891  0800  3000               	movlw	0
 20892  0801  00FB               	movwf	i1___lmul@product+3
 20893  0802  3000               	movlw	0
 20894  0803  00FA               	movwf	i1___lmul@product+2
 20895  0804  3000               	movlw	0
 20896  0805  00F9               	movwf	i1___lmul@product+1
 20897  0806  3000               	movlw	0
 20898  0807  00F8               	movwf	i1___lmul@product
 20899  0808                     i1l6070:	
 20900  0808  1C70               	btfss	i1___lmul@multiplier,0
 20901  0809  2812               	goto	i1l6074
 20902  080A  0874               	movf	i1___lmul@multiplicand,w
 20903  080B  07F8               	addwf	i1___lmul@product,f
 20904  080C  0875               	movf	i1___lmul@multiplicand+1,w
 20905  080D  3DF9               	addwfc	i1___lmul@product+1,f
 20906  080E  0876               	movf	i1___lmul@multiplicand+2,w
 20907  080F  3DFA               	addwfc	i1___lmul@product+2,f
 20908  0810  0877               	movf	i1___lmul@multiplicand+3,w
 20909  0811  3DFB               	addwfc	i1___lmul@product+3,f
 20910  0812                     i1l6074:	
 20911  0812  3001               	movlw	1
 20912  0813                     u542_25:	
 20913  0813  35F4               	lslf	i1___lmul@multiplicand,f
 20914  0814  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20915  0815  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20916  0816  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20917  0817  0B89               	decfsz	9,f
 20918  0818  2813               	goto	u542_25
 20919  0819  3001               	movlw	1
 20920  081A                     u543_25:	
 20921  081A  36F3               	lsrf	i1___lmul@multiplier+3,f
 20922  081B  0CF2               	rrf	i1___lmul@multiplier+2,f
 20923  081C  0CF1               	rrf	i1___lmul@multiplier+1,f
 20924  081D  0CF0               	rrf	i1___lmul@multiplier,f
 20925  081E  0B89               	decfsz	9,f
 20926  081F  281A               	goto	u543_25
 20927  0820  0873               	movf	i1___lmul@multiplier+3,w
 20928  0821  0472               	iorwf	i1___lmul@multiplier+2,w
 20929  0822  0471               	iorwf	i1___lmul@multiplier+1,w
 20930  0823  0470               	iorwf	i1___lmul@multiplier,w
 20931  0824  1D03               	skipz
 20932  0825  2808               	goto	i1l6070
 20933  0826  087B               	movf	i1___lmul@product+3,w
 20934  0827  00F3               	movwf	?i1___lmul+3
 20935  0828  087A               	movf	i1___lmul@product+2,w
 20936  0829  00F2               	movwf	?i1___lmul+2
 20937  082A  0879               	movf	i1___lmul@product+1,w
 20938  082B  00F1               	movwf	?i1___lmul+1
 20939  082C  0878               	movf	i1___lmul@product,w
 20940  082D  00F0               	movwf	?i1___lmul
 20941  082E  0008               	return
 20942  082F                     __end_ofi1___lmul:	
 20943                           
 20944                           	psect	text80
 20945  1847                     __ptext80:	
 20946 ;; *************** function i1___aldiv *****************
 20947 ;; Defined at:
 20948 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20949 ;; Parameters:    Size  Location     Type
 20950 ;;  divisor         4    0[BANK0 ] long 
 20951 ;;  dividend        4    4[BANK0 ] long 
 20952 ;; Auto vars:     Size  Location     Type
 20953 ;;  __aldiv         4   10[BANK0 ] long 
 20954 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20955 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20956 ;; Return value:  Size  Location     Type
 20957 ;;                  4    0[BANK0 ] long 
 20958 ;; Registers used:
 20959 ;;		wreg, status,2, status,0
 20960 ;; Tracked objects:
 20961 ;;		On entry : 0/0
 20962 ;;		On exit  : 0/0
 20963 ;;		Unchanged: 0/0
 20964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20965 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20966 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20968 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20969 ;;Total ram usage:       15 bytes
 20970 ;; Hardware stack levels used:    1
 20971 ;; This function calls:
 20972 ;;		Nothing
 20973 ;; This function is called by:
 20974 ;;		_modulation
 20975 ;; This function uses a non-reentrant model
 20976 ;;
 20977                           
 20978                           
 20979                           ;psect for function i1___aldiv
 20980  1847                     i1___aldiv:	
 20981                           
 20982                           ;incstack = 0
 20983                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20984  1847  0020               	movlb	0	; select bank0
 20985  1848  01A9               	clrf	i1___aldiv@sign
 20986  1849  1FA3               	btfss	i1___aldiv@divisor+3,7
 20987  184A  2858               	goto	i1l1996
 20988  184B  09A0               	comf	i1___aldiv@divisor,f
 20989  184C  09A1               	comf	i1___aldiv@divisor+1,f
 20990  184D  09A2               	comf	i1___aldiv@divisor+2,f
 20991  184E  09A3               	comf	i1___aldiv@divisor+3,f
 20992  184F  0AA0               	incf	i1___aldiv@divisor,f
 20993  1850  1903               	skipnz
 20994  1851  0AA1               	incf	i1___aldiv@divisor+1,f
 20995  1852  1903               	skipnz
 20996  1853  0AA2               	incf	i1___aldiv@divisor+2,f
 20997  1854  1903               	skipnz
 20998  1855  0AA3               	incf	i1___aldiv@divisor+3,f
 20999  1856  01A9               	clrf	i1___aldiv@sign
 21000  1857  0AA9               	incf	i1___aldiv@sign,f
 21001  1858                     i1l1996:	
 21002  1858  1FA7               	btfss	i1___aldiv@dividend+3,7
 21003  1859  2869               	goto	i1l6092
 21004  185A  09A4               	comf	i1___aldiv@dividend,f
 21005  185B  09A5               	comf	i1___aldiv@dividend+1,f
 21006  185C  09A6               	comf	i1___aldiv@dividend+2,f
 21007  185D  09A7               	comf	i1___aldiv@dividend+3,f
 21008  185E  0AA4               	incf	i1___aldiv@dividend,f
 21009  185F  1903               	skipnz
 21010  1860  0AA5               	incf	i1___aldiv@dividend+1,f
 21011  1861  1903               	skipnz
 21012  1862  0AA6               	incf	i1___aldiv@dividend+2,f
 21013  1863  1903               	skipnz
 21014  1864  0AA7               	incf	i1___aldiv@dividend+3,f
 21015  1865  3001               	movlw	1
 21016  1866  00FC               	movwf	??i1___aldiv
 21017  1867  087C               	movf	??i1___aldiv,w
 21018  1868  06A9               	xorwf	i1___aldiv@sign,f
 21019  1869                     i1l6092:	
 21020  1869  3000               	movlw	0
 21021  186A  00AD               	movwf	i1___aldiv@quotient+3
 21022  186B  3000               	movlw	0
 21023  186C  00AC               	movwf	i1___aldiv@quotient+2
 21024  186D  3000               	movlw	0
 21025  186E  00AB               	movwf	i1___aldiv@quotient+1
 21026  186F  3000               	movlw	0
 21027  1870  00AA               	movwf	i1___aldiv@quotient
 21028  1871  0823               	movf	i1___aldiv@divisor+3,w
 21029  1872  0422               	iorwf	i1___aldiv@divisor+2,w
 21030  1873  0421               	iorwf	i1___aldiv@divisor+1,w
 21031  1874  0420               	iorwf	i1___aldiv@divisor,w
 21032  1875  1903               	skipnz
 21033  1876  28B2               	goto	i1l6114
 21034  1877  01A8               	clrf	i1___aldiv@counter
 21035  1878  0AA8               	incf	i1___aldiv@counter,f
 21036  1879                     i1l6100:	
 21037  1879  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21038  187A  2887               	goto	i1l6102
 21039  187B  3001               	movlw	1
 21040  187C                     u548_25:	
 21041  187C  35A0               	lslf	i1___aldiv@divisor,f
 21042  187D  0DA1               	rlf	i1___aldiv@divisor+1,f
 21043  187E  0DA2               	rlf	i1___aldiv@divisor+2,f
 21044  187F  0DA3               	rlf	i1___aldiv@divisor+3,f
 21045  1880  0B89               	decfsz	9,f
 21046  1881  287C               	goto	u548_25
 21047  1882  3001               	movlw	1
 21048  1883  00FC               	movwf	??i1___aldiv
 21049  1884  087C               	movf	??i1___aldiv,w
 21050  1885  07A8               	addwf	i1___aldiv@counter,f
 21051  1886  2879               	goto	i1l6100
 21052  1887                     i1l6102:	
 21053  1887  3001               	movlw	1
 21054  1888                     u550_25:	
 21055  1888  35AA               	lslf	i1___aldiv@quotient,f
 21056  1889  0DAB               	rlf	i1___aldiv@quotient+1,f
 21057  188A  0DAC               	rlf	i1___aldiv@quotient+2,f
 21058  188B  0DAD               	rlf	i1___aldiv@quotient+3,f
 21059  188C  0B89               	decfsz	9,f
 21060  188D  2888               	goto	u550_25
 21061  188E  0823               	movf	i1___aldiv@divisor+3,w
 21062  188F  0227               	subwf	i1___aldiv@dividend+3,w
 21063  1890  1D03               	skipz
 21064  1891  289C               	goto	u551_25
 21065  1892  0822               	movf	i1___aldiv@divisor+2,w
 21066  1893  0226               	subwf	i1___aldiv@dividend+2,w
 21067  1894  1D03               	skipz
 21068  1895  289C               	goto	u551_25
 21069  1896  0821               	movf	i1___aldiv@divisor+1,w
 21070  1897  0225               	subwf	i1___aldiv@dividend+1,w
 21071  1898  1D03               	skipz
 21072  1899  289C               	goto	u551_25
 21073  189A  0820               	movf	i1___aldiv@divisor,w
 21074  189B  0224               	subwf	i1___aldiv@dividend,w
 21075  189C                     u551_25:	
 21076  189C  1C03               	skipc
 21077  189D  28A7               	goto	i1l6110
 21078  189E  0820               	movf	i1___aldiv@divisor,w
 21079  189F  02A4               	subwf	i1___aldiv@dividend,f
 21080  18A0  0821               	movf	i1___aldiv@divisor+1,w
 21081  18A1  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21082  18A2  0822               	movf	i1___aldiv@divisor+2,w
 21083  18A3  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21084  18A4  0823               	movf	i1___aldiv@divisor+3,w
 21085  18A5  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21086  18A6  142A               	bsf	i1___aldiv@quotient,0
 21087  18A7                     i1l6110:	
 21088  18A7  3001               	movlw	1
 21089  18A8                     u552_25:	
 21090  18A8  36A3               	lsrf	i1___aldiv@divisor+3,f
 21091  18A9  0CA2               	rrf	i1___aldiv@divisor+2,f
 21092  18AA  0CA1               	rrf	i1___aldiv@divisor+1,f
 21093  18AB  0CA0               	rrf	i1___aldiv@divisor,f
 21094  18AC  0B89               	decfsz	9,f
 21095  18AD  28A8               	goto	u552_25
 21096  18AE  3001               	movlw	1
 21097  18AF  02A8               	subwf	i1___aldiv@counter,f
 21098  18B0  1D03               	btfss	3,2
 21099  18B1  2887               	goto	i1l6102
 21100  18B2                     i1l6114:	
 21101  18B2  0829               	movf	i1___aldiv@sign,w
 21102  18B3  1903               	btfsc	3,2
 21103  18B4  28C0               	goto	i1l6118
 21104  18B5  09AA               	comf	i1___aldiv@quotient,f
 21105  18B6  09AB               	comf	i1___aldiv@quotient+1,f
 21106  18B7  09AC               	comf	i1___aldiv@quotient+2,f
 21107  18B8  09AD               	comf	i1___aldiv@quotient+3,f
 21108  18B9  0AAA               	incf	i1___aldiv@quotient,f
 21109  18BA  1903               	skipnz
 21110  18BB  0AAB               	incf	i1___aldiv@quotient+1,f
 21111  18BC  1903               	skipnz
 21112  18BD  0AAC               	incf	i1___aldiv@quotient+2,f
 21113  18BE  1903               	skipnz
 21114  18BF  0AAD               	incf	i1___aldiv@quotient+3,f
 21115  18C0                     i1l6118:	
 21116  18C0  082D               	movf	i1___aldiv@quotient+3,w
 21117  18C1  00A3               	movwf	?i1___aldiv+3
 21118  18C2  082C               	movf	i1___aldiv@quotient+2,w
 21119  18C3  00A2               	movwf	?i1___aldiv+2
 21120  18C4  082B               	movf	i1___aldiv@quotient+1,w
 21121  18C5  00A1               	movwf	?i1___aldiv+1
 21122  18C6  082A               	movf	i1___aldiv@quotient,w
 21123  18C7  00A0               	movwf	?i1___aldiv
 21124  18C8  0008               	return
 21125  18C9                     __end_ofi1___aldiv:	
 21126  007E                     btemp	set	126	;btemp
 21127  007E                     int$flags	set	126
 21128  007E                     wtemp	set	126
 21129  007E                     wtemp0	set	126
 21130  0080                     wtemp1	set	128
 21131  0082                     wtemp2	set	130
 21132  0084                     wtemp3	set	132
 21133  0086                     wtemp4	set	134
 21134  0088                     wtemp5	set	136
 21135  007F                     wtemp6	set	127
 21136  007E                     ttemp	set	126
 21137  007E                     ttemp0	set	126
 21138  0081                     ttemp1	set	129
 21139  0084                     ttemp2	set	132
 21140  0087                     ttemp3	set	135
 21141  007F                     ttemp4	set	127
 21142  007E                     ltemp	set	126
 21143  007E                     ltemp0	set	126
 21144  0082                     ltemp1	set	130
 21145  0086                     ltemp2	set	134
 21146  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        47
    BSS         286
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     35      70
    BANK1            80     80      80
    BANK2            80     74      76
    BANK3            80      9      79
    BANK4            80     14      67
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___altoft
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  882631
                                              0 BANK4     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               11    11      0  161828
                                             48 BANK2     11    11      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29716
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34205
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30954
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29990
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29774
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   20096
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5804
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163221
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  152879
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  152928
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  136883
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42641
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75823
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25792
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               6     6      0   16935
                                             22 BANK2      6     6      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         8     8      0   92084
                                             51 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   72063
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1680
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    3019
                                             14 BANK2      8     4      4
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18165
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1214
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4565
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  9     9      0    1349
                                             26 BANK0      9     9      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _getModulationDelayTime
     ___altoft
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      E      43      13       83.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     22E      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     22E      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 13 22:27:02 2017

                        _update_mode 20BA                         ___altoft@exp 0134  
                        __CFG_CP$OFF 0000                        ___altoft@sign 0135  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E6  
                       ___awdiv@sign 00A6                   _topTactile_pressed 016B  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 09FE  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l381 2075  
                                l630 273B                                  l359 05B6  
                                l800 2166                 __size_of_adc_convert 0013  
                                l583 2DF4                                  l792 2133  
                                l794 2136                                  l795 2139  
                                l787 25B4                                  l955 23C5  
                                l971 2488                                  l796 213C  
                                l788 25D8                                  l797 213F  
                                l990 2ED3                                  l982 20EA  
                                l799 2142                                  l959 23EF  
                                l967 245A                                  l992 2ED9  
                                l993 2EE1                                  l994 2EF5  
                                _GIE 005F                                  l997 25E0  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _map 1A57  
                                _exp 1351                                  _log 0714  
                                _isr 0004                                  _tap 02A0  
                                _sin 082F                                  _pow 1116  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0149              __end_of_set_leds_bottom 2167  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1008 262A                                 l2110 2680  
                               l2102 2665                                 l2109 2678  
                               l2133 10BF                                 l1405 0A13  
                               l2305 113A                                 l2323 0944  
                               l1419 0ACC                                 l2193 1A3D  
                               l1920 0D9D                                 l1941 2E4A  
                               l1695 1839                                 ?_map 00DE  
                               l8002 1D54                                 l8100 1C2E  
                               l1996 18DA                                 l8030 1DC4  
                               l8022 1DAB                                 l8008 1D6A  
                               l8120 1C76                                 l9000 0AC4  
                               l8042 2F7A                                 l8210 2F31  
                               l8060 1CD4                                 l8300 2FF4  
                               l8124 1C7E                                 l8220 0738  
                               l9100 1B79                                 ?_exp 0148  
                               ?_log 013E                                 l8070 1D35  
                               l9022 0B8B                                 l9030 0BC8  
                               l8080 2702                                 l8056 1CCC  
                               l8208 2F21                                 l8160 2EE9  
                               l9016 0B1B                                 l9008 0B0F  
                               l8306 2FFA                                 l8090 1C0C  
                               l8242 135E                                 l8226 074B  
                               l9106 1B86                                 l9122 1DEF  
                               l9018 0B65                                 l8252 1383  
                               l9300 05F8                                 ?_isr 0070  
                               l7630 263B                                 l7614 202B  
                               l9070 244F                                 l9142 1957  
                               l9310 068A                                 l7720 241F  
                               l8168 209B                                 l9048 23BA  
                               l9080 2476                                 l8264 13E2  
                               l9128 1DFE                                 l8184 1689  
                               l7634 2642                                 l7730 1048  
                               l7802 2194                                 l7618 2035  
                               l9058 23E1                                 l8258 13A7  
                               l8346 2387                                 l9170 1F67  
                               l9162 1F53                                 l8522 0D59  
                               l9322 070B                                 l9314 06D4  
                               l9306 064A                                 l9242 037D  
                               l9226 035E                                 l7660 258C  
                               l7644 266A                                 l7636 264C  
                               l7740 105E                                 l7820 1EA8  
                               l8292 2FDF                                 l8380 11A8  
                               l8372 114E                                 l9164 1F59  
                               l8460 220B                                 l8452 21FA  
                               l9236 036E                                 l7662 2594  
                               l8710 2757                                 l7646 2672  
                               l7638 2651                                 l7734 104F  
                               l7718 240F                                 l7910 1A4E  
                               l8286 148A                                 l8366 1142  
                               l9182 1FFA                                 l9166 1F5D  
                               l9174 1F6E                                 l8622 2580  
                               l8614 256F                                 l8606 2551  
                               l8198 14DF                                 l8534 21DA  
                               l8518 0C17                                 l9270 0496  
                               l7664 259C                                 l7672 25BB  
                               l7760 1095                                 l7752 1078  
                               l7904 1A34                                 l8384 11C8  
                               l9168 1F63                                 l9176 1F87  
                               l8608 255D                                 l8560 18FB  
                               l8552 18EB                                 l9280 050C  
                               l9256 03F8                                 l7666 25A4  
                               l8650 1812                                 l7770 10B1  
                               l7762 109A                                 l7850 1F15  
                               l7842 1F01                                 l7826 1EBE  
                               l7906 1A40                                 l7922 2232  
                               l8298 2FE5                                 l8618 2578  
                               l8570 1929                                 l8562 1909  
                               l8810 260F                                 l9266 0456  
                               l7668 25AC                                 l8708 274E  
                               l8644 180C                                 l7780 10E3  
                               l7772 10BB                                 l7764 109E  
                               l8468 2216                                 l8820 2626  
                               l8812 2614                                 l8804 2603  
                               l9284 054C                                 ?_sin 0145  
                               l8646 180E                                 l8654 1816  
                               l7790 10FE                                 l7758 108B  
                               l7854 1F1D                                 l7838 1EF9  
                               l8486 0864                                 l8590 253E  
                               l8750 0F27                                 l8910 1314  
                               l8902 12FA                                 l8830 1242  
                               l8574 1934                                 l8822 262E  
                               l7688 2149                                 l8648 1810  
                               l7776 10D1                                 l7696 2E44  
                               l8752 0F6D                                 l8760 0FDE  
                               l8744 0E55                                 l7960 24C6  
                               l7952 24A2                                 l8912 131A  
                               l8920 132E                                 l9296 05B8  
                               l8498 0900                                 l8754 0FB3  
                               l8746 0E9B                                 l8762 0E37  
                               l8738 0E20                                 l8842 1263  
                               l8834 1255                                 l8578 1942  
                               l8596 2549                                 l8764 0FE4  
                               l8748 0EE1                                 l7980 210E  
                               ?_pow 0155                                 l7798 217E  
                               l7878 19E9                                 l8758 0FC7  
                               l8926 133A                                 l8862 1291  
                               l8782 20DD                                 l8790 20EE  
                               l9760 182F                                 l7992 200B  
                               l7896 1A19                                 l9752 0FCD  
                               l8952 0A24                                 l9762 1834  
                               l7898 1A27                                 l9754 1F73  
                               l8882 12C7                                 l8866 12A3  
                               l8946 0A09                                 l9764 25C1  
                               l9756 1825                                 l8868 12AB  
                               l8788 20E7                                 l9766 214F  
                               l9758 182A                                 l8894 12DB  
                               l8974 0A6D                                 l8966 0A46  
                               l8990 0A9D                                 l8896 12DF  
                               l8992 0AAC                                 l8968 0A63  
                               l8988 0A95                                 _PEIE 005E  
                               _RCIE 048D                                 u8005 108C  
                               u8035 109F                                 u8205 1F08  
                               u8065 10B2                                 u9105 190A  
                               u8235 1F1E                                 u8315 1A1A  
                               u9115 191E                                 u8245 1F24  
                               u8165 1ECA                                 u9205 255E  
                               u9125 192A                                 u8175 1EDA  
                               u9215 2568                                 u9320 2755  
                               u9305 2734                                 u7705 2647  
                               u8505 1DC5                                 u8345 1A35  
                               u9225 2570                                 u9315 2747  
                               u8195 1F02                                 u8620 2099  
                               u7725 2660                                 u8285 19F0  
                               u8605 1C37                                 u9085 18FE  
                               u7655 2036                                 u7745 266D  
                               u8465 1D7C                                 u7825 2E4B  
                               u7665 203D                                 u9185 2554  
                               u9345 0DFA                                 u8385 24A0  
                               u8730 13C0                                 u9275 2F02  
                               u8475 1D8C                                 u7835 2E50  
                               u9355 0E0E                                 u8395 24C4  
                               u8740 13C1                                 u9285 2F08  
                               u8485 1DAC                                 u9365 0E1E  
                               u8495 1DBB                                 u9375 0E3E  
                               u7785 2687                                 u7865 2414  
                               u8665 2F26                                 u8905 21EB  
                               u9545 123B                                 u9465 25F2  
                               u9555 124E                                 u9395 20CD  
                               u7975 1079                                 u8775 1481  
                               u8865 1199                                 u9585 126D  
                               u8945 07F0                                 u8970 08FC  
                               u9835 0A4F                                 u8980 08FD  
                               u8885 2E68                                 u8895 2EBC  
                               u9695 12EB                                 u9945 0ADD  
                               u9865 0A77                                 u9955 0AF4  
                               u9965 0B24                                 u9975 0B39  
                               u9985 0B4D                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2841 01E9                    _scaleA10kPot$2842 01EC  
                               _iCnt 01C2                                 _main 033A  
                       ___ftpack@arg 00A0                         ___ftpack@exp 00A3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               map@x 00DE                                 btemp 007E  
                               exp@x 0148                                 log@x 013E  
                      __CFG_BOREN$ON 0000                                 sin@f 0145  
                               sin@y 0149                                 ltemp 007E  
                               pow@x 0155                                 pow@y 0158  
                               start 02BF                                 ttemp 007E  
                               wtemp 007E         __end_of_getSwitchBypassState 1804  
                    _expressModeCnst 01E3         updateSwitchTap@tapCntDivisor 00C2  
       __end_of_setSwitchBypassState 2E79                      ?i1_set_leds_top 0070  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 00BC  
                       ___ftmul@sign 00BD                      __end_of_InitApp 2FD0  
                       ___fttol@exp1 012D                                ??_map 00ED  
                              ??_exp 014B                                ??_log 0141  
                       ___fttol@lval 0129                                ??_isr 003A  
                              ??_sin 0148                                ??_pow 015B  
                    _switchBypass_up 0261            __size_of_initSwitchBypass 000F  
                    __end_of___aldiv 194B                                ?_main 0070  
                     i1___awdiv@sign 0076         getModulationDelayTime@subDiv 013A  
                    __end_of___awdiv 2585                      __end_of___ftadd 1116  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 1DE6                      __end_of___ftneg 2DA6  
                              u10005 0B6A                                u10125 246F  
                              u10205 1FF5                                u10215 1B68  
                              u10065 23DA                                u10305 054A  
                              u10315 05A3                      __end_of___ftmul 1F45  
                              u10325 05B1                                u10335 05D6  
                              u10255 03D6                                u10345 05F6  
                              u10265 03F6                                u10355 0668  
                              u10275 0474                      ___awdiv@divisor 00A0  
                              u10365 0688                                u10285 0494  
                              u10295 052A                      __end_of___ftsub 2FA0  
                    __end_of___fttol 1A57                                i1l134 00DB  
                              i1l152 0231                                i1l136 0104  
                              i1l160 02BA                                i1l787 2345  
                              i1l788 2367                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 004B  
                _ConfigureOscillator 2D89          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 20F2                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                __size_of_calcSinArray 0081  
                    _switchTap_state 01E5                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 1C96  
                              _ldexp 1BFF                                _frexp 221E  
                              _myBuf 03A0                                _errno 024D  
           _getModulationSubdivision 2FD0                        ___ftpack@sign 00A4  
                              _timer 0047                                _trunc 2368  
                   __end_ofi1___lmul 082F                                sin@x2 014F  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 2084                                pow@yi 0163  
                    scaleA10kPot@pwm 01E6                   __size_of_USARTInit 0043  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 23FA                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0146       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 20BA                          exp@exponent 0152  
               ?_ConfigureOscillator 0070                   _updateSwitchBypass 122C  
                        ldexp@newexp 0141              __end_of_updateSwitchTap 0BE2  
                    __initialization 02C1                          log@exponent 0142  
        updateModulationArray@iAngle 015A              _updateSwitchBypassState 07FF  
                       __end_of_main 0714              __size_of_InitializeTaps 0026  
                i1___lmul@multiplier 0070               __size_of_scaleA100kPot 0085  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1533 00B5                      _set_subdivision 1F45  
                       _calcSinArray 277F          updateModulationArray@subDiv 0156  
                             ??_main 0253                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2F72           i1_getModulationSubdivision 2F46  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 229E  
                   ?_set_leds_bottom 00A0                               ?_floor 0136  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 2445                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2022                     __end_of___ftpack 2697  
               ??_updateSwitchBypass 00BC                               ?_trunc 0136  
                   __end_of___lltoft 2F46                               i1l6100 1879  
                             i1l6110 18A7                               i1l6102 1887  
                             i1l6114 18B2                               i1l6118 18C0  
                             i1l6070 0808                               i1l6074 0812  
                             i1l6092 1869                               i1l1996 1858  
                             i1l6812 24F7                               i1l6900 0191  
                             i1l6830 251D                               i1l6822 24FF  
                             i1l6806 24EC                               i1l6910 01C4  
                             i1l6824 250B                               i1l6760 2327  
                             i1l6920 01EF                               i1l6834 2526  
                             i1l6762 232D                               i1l6914 01D2  
                             i1l6780 2F55                               i1l6764 2333  
                             i1l6772 234B                               i1l6916 01E1  
                             i1l6838 252E                               i1l6766 2339  
                             i1l6768 233F                               i1l6952 02B7  
                             i1l6928 0233                               i1l6936 0285  
                             i1l6880 013D                               i1l6856 00C0  
                             i1l6794 2F6D                               i1l6786 2F5A  
                             i1l6954 02B9                               i1l6788 2F68  
                             i1l6948 02B2                               i1l6892 0175  
                             i1l6884 014F                               i1l6886 015F  
                             i1l6896 0180                               i1l6888 0161  
                             i1l6898 018F                               i1l9768 2350  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196                               u550_25 1888  
                             u542_25 0813                               u551_25 189C  
                             u543_25 081A                               u552_25 18A8  
                             u548_25 187C                               u665_25 2502  
                             u682_23 0128                               u674_25 00B7  
                             u691_23 01B3                               u667_25 250C  
                             u668_25 2516                               u676_25 00D2  
                             u669_25 251E                               u677_25 00E9  
                             u678_25 00F4                               u695_23 0214  
                             u696_25 0229                               u698_25 0296  
                             u699_25 02AD                       _debounce_count 0245  
                        modSaw@angle 012E                       _debounce_mode1 0247  
                     _debounce_mode2 0249                          modSaw@shift 013F  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 2492  
                        modSin@angle 0134              ?_getModulationDelayTime 0070  
                     __CFG_PWRTE$OFF 0000                          modSin@shift 013F  
                             ___ftge 2167                               ___lmul 2022  
                          ??___aldiv 00A8                               ___wmul 2E41  
                  _update_selectMode 25D9                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                   __end_of_init_adc 2DB0                               _modSaw 14AA  
                             _modSin 1654                               _modTri 0BE2  
                   __end_of_init_pwm 2320                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2E41                               _tmpVal 0251  
                  __end_of_USARTInit 1847                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 18C9                               floor@i 013A  
                             floor@x 0136                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 2533              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 0152                     __end_of_showSave 2E0F  
                ??_update_selectMode 00A7                 _getSwitchBypassState 1800  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2E5D  
                             trunc@i 013A                               trunc@x 0136  
                      _scaleA100kPot 194B         __end_of_setExpressionDisplay 2E27  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   modSin@inflection 0137                     __end_ofexp@coeff 281E  
                   __end_oflog@coeff 2839              __end_of__initialization 0336  
                         ___altoft@c 012E       __end_of_getModulationDelayTime 1B6E  
                         ___ftadd@f1 00C1                           ___ftadd@f2 00C4  
                         ___ftge@ff1 00A0                           ___ftge@ff2 00A3  
                  _bypass_turning_on 01C1                         eval_poly@res 013B  
                         ___ftdiv@f1 00D1                           ___ftdiv@f2 00CE  
                         ___ftdiv@f3 00D9                       _top_push_state 005D  
          ??_updateSwitchBypassState 00A2                           ___ftneg@f1 00BE  
                _switchBypass_toggle 024F                           ___awtoft@c 00A8  
              __end_of_ring_tactiles 24E2            __end_of_update_selectMode 2632  
            __end_of_set_subdivision 2000                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 0142  
                         ___ftsub@f2 013F                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                         ?_update_mode 0070  
                     __pcstackCOMMON 0070                         __pidataBANK0 2DD7  
                       __pidataBANK3 2E95                         __pidataBANK4 0002  
                         ___lltoft@c 00A8                        __end_of_floor 1D3D  
                      __end_of_ldexp 1C96                        __end_of_frexp 225E  
                      __end_of_trunc 23B0                     _initSwitchBypass 2DC8  
                          ?i1___lmul 0070                _updateModulationArray 0DDD  
                    _doubleTap_state 004C                       _OPTION_REGbits 0095  
              ?_getSwitchBypassState 00A0                ?_setSwitchBypassState 00B6  
                     ?_scaleA100kPot 0167                              ??_floor 0139  
                            ??_ldexp 0143                              ??_frexp 00A4  
               __size_of_init_timer0 0007                 __size_of_init_timer2 0009  
                  i1___aldiv@divisor 0020                    i1___aldiv@counter 0028  
                            ??_trunc 0139                        ?_setPedalMode 0070  
                         __pbssBANK0 0043                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 212C                           _delay_time 0055  
                   _long_press_limit 005B         __size_of_setDoublePressState 003E  
                         _delayfound 024B                           __pmaintext 033A  
                     _InitializeTaps 2EF6                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0158                           __pintentry 0004  
                      _scaleiA10kPot 1DE6                           _blink_rate 005F  
                      ??_adc_convert 00A2                            ?___altoft 012E  
                            ?_modSaw 012E                              ?_modSin 0134  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 07E5                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 1000  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 0800  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2641 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 0053         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 0142                              _UQFront 007D  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01C0                              _InitApp 2FA0  
               __end_of_scaleA10kPot 1BFF                         modSin@period 0142  
             __end_of_InitializeTaps 2F1C                         modSin@tmpVal 0145  
                      ?_set_leds_top 00A0                           _knob1_prev 01D0  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01D2                           _knob3_prev 01D4  
                         _knob4_prev 01D6                           _knob5_prev 01D8  
                   ?_set_subdivision 013F                            ?_showSave 0070  
                            ___aldiv 18C9                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 2533  
                    __size_of___lmul 0030                              ___ftadd 1020  
                            ___ftdiv 1D3D                              ___ftneg 2D9D  
                         _knob_1_pos 01AC                           _knob_2_pos 01AE  
                    __size_of___wmul 001C                              ___ftmul 1E91  
                         _knob_3_pos 01B0                              ___ftsub 2F72  
                            ___fttol 19D0                           _knob_4_pos 01B2  
                         _knob_5_pos 01B4                    _switchTap_pressed 0054  
                         ??___altoft 0132                 _setExpressionDisplay 2E0F  
             ?_updateModulationArray 0070               __end_of_FLASH_ReadWord 1020  
                    __size_of_modSaw 01AA                      __size_of_modSin 01AC  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01FB                    __end_of_eval_poly 2709  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 25D9                              __ptext2 20BA  
                            __ptext3 09FE                              __ptext4 07E5  
                            __ptext5 18C9                              __ptext6 122C  
                            __ptext7 2EB1                              __ptext8 21E0  
                            __ptext9 2DFB           __end_of_setLongBypassState 2ED2  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2E95                            _T2CONbits 001C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 02BB  
             ??_setSwitchBypassState 00B8                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 2DFB  
                       modTri@period 013A                    __end_of_modSquare 21E0  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                              _wait_ms 2052  
                            clrloop0 2DBD                 end_of_initialization 0336  
                            exp@sign 0154                           _modulation 229E  
                            init_ram 2DB0                           ??_init_adc 00A0  
                            initloop 2DB1                           ??_init_pwm 00A0  
       updateSwitchBypassState@state 00A0                   _solidring_tactiles 225E  
                      _longTap_timer 01B8                        _longTap_state 0061  
                      _longTap_start 004F                       ??_set_leds_top 00A4  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 07FF                _setSwitchBypassRelays 2084  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 0062                     _longBypass_timer 01B6  
                   ___aldiv@quotient 00AB                     _longBypass_state 004E  
                   _longBypass_start 004D         __size_of_read_bottom_tactile 004A  
                ?_solidring_tactiles 0070                         __pstringtext 2800  
          FLASH_ReadWord@GIEBitValue 00A2                ?_setExpressionDisplay 0070  
               __size_of_update_mode 0038                      ?_FLASH_ReadWord 00A0  
                  _expressionChannel 0060                            _PORTAbits 000C  
                          _PORTCbits 000E                            _PORTDbits 000F  
                          _PORTEbits 0010                            _USARTInit 1804  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                            _TRISGbits 030D  
                          i1___aldiv 1847                            i1___awdiv 24E2  
               ??_solidring_tactiles 00B2          __end_of_ConfigureOscillator 2D8D  
                         map@out_max 00EA                           map@out_min 00E7  
        __size_of_updateSwitchBypass 0125             __end_of_initSwitchBypass 2DD7  
                        _CCP1CONbits 0293                          ___ftdiv@exp 00DC  
           __size_of_set_leds_bottom 003B                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 01BE  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                          _CCP9CONbits 061C  
               set_leds_top@ledState 00A2                       __end_of___ftge 21A3  
               __end_of_setPedalMode 2EF6                       __end_of___lmul 2052  
                     __end_of___wmul 2E5D                         _double_timer 01A0  
                        _adc_convert 2DE8     __end_of_getModulationSubdivision 3000  
                     _switchTap_down 01C9                       __end_of_modSaw 1654  
                     __end_of_modSin 1800                       __end_of_modTri 0DDD  
                     modSawRev@angle 0145                           floor@expon 013D  
              i1___lmul@multiplicand 0074                    __size_ofi1___lmul 002F  
                start_initialization 02C1                           ?_USARTInit 00A0  
                         eval_poly@d 0137                           eval_poly@n 0139  
                         eval_poly@x 0134                _bottomTactile_pressed 016A  
                _setDoublePressState 21E0                           ldexp@value 013E  
                         ?i1___aldiv 0020                          __end_of_map 1AE2  
                        __end_of_exp 14AA                          __end_of_log 07E5  
                        __end_of_isr 02BF                           ?i1___awdiv 0070  
                        __end_of_sin 09FE                          __end_of_pow 122C  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0241  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0055                          __pdataBANK3 01CA  
                        __pdataBANK4 0261                             ??_modSaw 00F0  
                           ??_modSin 013A                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0                        _tap_iteration 01DE  
           __size_of_updateSwitchTap 01E4                    __size_of___altoft 004B  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                        __pbssBIGRAM 238A                         _scaleA10kPot 1B6E  
                  __size_of___lltoft 002A                        ??_init_timer0 00A0  
                      ??_init_timer2 00A0                          __pbssCOMMON 007D  
               __end_of_set_leds_top 25D9                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 0065  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E6  
                      __pcstackBANK4 0253               __size_of_ring_tactiles 0050  
                     isr@tmpModDelay 0041                       _expSwitchState 01E2  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E6  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2832 0258                            _main$2833 025B  
                          _main$2834 025E              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01E1                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 013F                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C6  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2837 01E9  
                 _scaleA100kPot$2838 01EC                        ?_calcSinArray 0070  
                  i1___awdiv@counter 0075                          _blink_delay 01CE  
                __size_of_modulation 0041                        _resetRingLEDs 2E27  
                        _blink_state 01E0                            _eval_poly 2697  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2E79  
           ??_getModulationDelayTime 0136                  _read_bottom_tactile 23B0  
                     __size_of_floor 00A7                       __size_of_ldexp 0097  
                     __size_of_frexp 0040                            _modSquare 21A3  
                     _presetModeCnst 01E4                       __size_of_trunc 0048  
                 _setLongBypassState 2EB1                  __end_of_init_timer0 2D94  
                __end_of_init_timer2 2D9D                            _mod_value 01BC  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 0051                       ___wmul@product 0132  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01DA                            clear_ram0 2DBC  
                          _tap_timer 0043                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0024  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 2492                      _longBypass_down 01C3  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C4  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
                     ??_calcSinArray 0153            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 01A8  
                         _ADCON0bits 009D                             i1___lmul 0800  
                         _ADCON1bits 009E             __size_of_set_subdivision 00BB  
                  ___wmul@multiplier 012E                     set_subdivision@x 013F  
                   set_subdivision@y 0141            __size_of_read_top_tactile 004D  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0145                __end_of_scaleA100kPot 19D0  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2ED2                    _ReadSavedSettings 2709  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2847 0134                          _modSaw$2848 0137  
                        _modSaw$2849 013A                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                        _modSin$2845 013C                   ??_initSwitchBypass 00BA  
                   __size_of_InitApp 0030                       ?_ring_tactiles 0070  
                          modSaw@mod 013D                          _mode1_state 01C5  
                      ??_update_mode 00A7                          _mode2_state 0050  
                          isr@subDiv 0040                ??_read_bottom_tactile 00B2  
                        _modTri$2846 0134                  updateSwitchTap@iCnt 00C4  
                ??_ReadSavedSettings 00A4                           _APFCONbits 011D  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 23FA                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           ___awtoft 2000                __size_of_set_leds_top 0054  
                           ___ftpack 2632                    _baseline_mod_time 01CA  
                           _map$2835 00ED                             ___lltoft 2F1C  
             _preset_programmning_on 01C7                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2609 014F  
                           _exp$2853 014C                          _init_timer0 2D8D  
                        _init_timer2 2D94           __end_of_updateSwitchBypass 1351  
                           __ptext10 225E                             __ptext11 2492  
                           __ptext20 2E79                             __ptext12 2ED2  
                           __ptext21 14AA                             __ptext13 20F2  
                           __ptext30 1351                             __ptext22 2533  
                           __ptext14 2E0F                             __ptext31 1BFF  
                           __ptext23 1F45                             __ptext15 2E27  
                           __ptext40 2022                             __ptext32 2F1C  
                           __ptext24 2368                             __ptext16 0DDD  
                           __ptext41 07FF                             __ptext33 2445  
                           __ptext25 1DE6                             __ptext17 0BE2  
                           __ptext50 2167                             __ptext42 1800  
                           __ptext34 23B0                             __ptext26 1B6E  
                           __ptext18 21A3                             __ptext51 23FA  
                           __ptext43 1AE2                             __ptext35 1A57  
                           __ptext27 194B                             __ptext19 1654  
                           __ptext60 2632                             __ptext52 2697  
                           __ptext44 2FD0                             __ptext36 2DC8  
                           __ptext28 1116                             __ptext61 2DE8  
                           __ptext53 2E41                             __ptext45 277F  
                           __ptext37 2E5D                             __ptext29 0714  
                           __ptext70 2D94                             __ptext62 1804  
                           __ptext54 1E91                             __ptext46 082F  
                           __ptext38 2084                             __ptext71 2D8D  
                           __ptext63 2709                             __ptext55 2F72  
                           __ptext47 1C96                             __ptext39 2052  
                           __ptext80 1847                             __ptext72 2DA6  
                           __ptext64 2585                             __ptext56 1020  
                           __ptext48 221E                             __ptext73 2D89  
                           __ptext65 212C                             __ptext57 2D9D  
                           __ptext49 19D0                             __ptext66 1000  
                           __ptext58 1D3D                             __ptext75 2320  
                           __ptext67 2EF6                             __ptext59 2000  
                           __ptext76 2F46                             __ptext68 2FA0  
                           __ptext77 24E2                             __ptext69 22DF  
                           __ptext78 229E                             __ptext79 0800  
                           _sin$2852 014C            __end_of_ReadSavedSettings 277F  
                   __size_of_wait_ms 0032          __size_of_solidring_tactiles 0040  
    __size_of_getModulationDelayTime 008C                             _ledState 0239  
                           _pow$2850 015C                             _pow$2851 015F  
                      _presetChannel 0064                         ??_modulation 0036  
                        _mod_counter 01BA                             _modArray 238A  
            ??_setSwitchBypassRelays 00B4                           trunc@expon 013D  
                           _init_adc 2DA6                        __size_of_main 03DA  
                           _init_pwm 22DF     updateModulationArray@angleFactor 0154  
                           _sinArray 2482         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 2585                             _showSave 2DFB  
                           _num_taps 0063                __end_of_scaleiA10kPot 1E91  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                __end_of_update_mode 20F2                             exp@coeff 2800  
                           _symmetry 01DC                  modSawRev@inflection 0148  
                           log@coeff 281E                   __end_of_modulation 22DF  
                 calcSinArray@iAngle 015A                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                        _tap_history 0220                          ??_modSawRev 014B  
                  ??_set_subdivision 0143                          ??_modSquare 00F0  
                 calcSinArray@tmpVal 0157                             intlevel1 0000  
               __end_of_calcSinArray 2800                      _set_leds_bottom 212C  
                         _PMCON1bits 0195                      ??_ring_tactiles 00B2  
                  __CFG_CLKOUTEN$OFF 0000                      _reset_sub_delay 01C8  
                         _OSCCONbits 0099                         _preset_blink 0052  
             _getModulationDelayTime 1AE2                       i1_set_leds_top 2320  
     __size_of_updateModulationArray 0223     __size_of_updateSwitchBypassState 0001  
      __end_of_updateModulationArray 1000        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2843 01E9                   _scaleiA10kPot$2844 01EC  
           __size_of_setLongTapState 001A                     _read_top_tactile 2445  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0076          __end_of_setDoublePressState 221E  
                       _CCP10CONbits 061F                    _bottom_push_state 0059  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 2368  
