

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jan 07 11:22:38 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK7,global,class=CODE,delta=2
     9                           	psect	idataBANK8,global,class=CODE,delta=2
    10                           	psect	idataBANK9,global,class=CODE,delta=2
    11                           	psect	idataBANK10,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	stringtext,global,class=STRCODE,delta=2
    14                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    26                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    27                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    28                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    29                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    30                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    34                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    35                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    36                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    38                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    39                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    40                           	psect	text1,local,class=CODE,merge=1,delta=2
    41                           	psect	text2,local,class=CODE,merge=1,delta=2
    42                           	psect	text3,local,class=CODE,merge=1,delta=2
    43                           	psect	text4,local,class=CODE,merge=1,delta=2
    44                           	psect	text5,local,class=CODE,merge=1,delta=2
    45                           	psect	text6,local,class=CODE,merge=1,delta=2
    46                           	psect	text7,local,class=CODE,merge=1,delta=2
    47                           	psect	text8,local,class=CODE,merge=1,delta=2
    48                           	psect	text9,local,class=CODE,merge=1,delta=2
    49                           	psect	text10,local,class=CODE,merge=1,delta=2
    50                           	psect	text11,local,class=CODE,merge=1,delta=2
    51                           	psect	text12,local,class=CODE,merge=1,delta=2
    52                           	psect	text13,local,class=CODE,merge=1,delta=2
    53                           	psect	text14,local,class=CODE,merge=1,delta=2
    54                           	psect	text15,local,class=CODE,merge=1,delta=2
    55                           	psect	text16,local,class=CODE,merge=1,delta=2
    56                           	psect	text17,local,class=CODE,merge=1,delta=2
    57                           	psect	text18,local,class=CODE,merge=1,delta=2
    58                           	psect	text19,local,class=CODE,merge=1,delta=2
    59                           	psect	text20,local,class=CODE,merge=1,delta=2
    60                           	psect	text21,local,class=CODE,merge=1,delta=2
    61                           	psect	text22,local,class=CODE,merge=1,delta=2
    62                           	psect	text23,local,class=CODE,merge=1,delta=2
    63                           	psect	text24,local,class=CODE,merge=1,delta=2
    64                           	psect	text25,local,class=CODE,merge=1,delta=2
    65                           	psect	text26,local,class=CODE,merge=1,delta=2
    66                           	psect	text27,local,class=CODE,merge=1,delta=2
    67                           	psect	text28,local,class=CODE,merge=1,delta=2
    68                           	psect	text29,local,class=CODE,merge=1,delta=2
    69                           	psect	text30,local,class=CODE,merge=1,delta=2
    70                           	psect	text31,local,class=CODE,merge=1,delta=2
    71                           	psect	text32,local,class=CODE,merge=1,delta=2
    72                           	psect	text33,local,class=CODE,merge=1,delta=2
    73                           	psect	text34,local,class=CODE,merge=1,delta=2
    74                           	psect	text35,local,class=CODE,merge=1,delta=2
    75                           	psect	text36,local,class=CODE,merge=1,delta=2
    76                           	psect	text37,local,class=CODE,merge=1,delta=2
    77                           	psect	text38,local,class=CODE,merge=1,delta=2
    78                           	psect	text39,local,class=CODE,merge=1,delta=2
    79                           	psect	text40,local,class=CODE,merge=1,delta=2
    80                           	psect	text41,local,class=CODE,merge=1,delta=2
    81                           	psect	text42,local,class=CODE,merge=1,delta=2
    82                           	psect	text43,local,class=CODE,merge=1,delta=2
    83                           	psect	text44,local,class=CODE,merge=1,delta=2
    84                           	psect	text45,local,class=CODE,merge=1,delta=2
    85                           	psect	text46,local,class=CODE,merge=1,delta=2
    86                           	psect	text47,local,class=CODE,merge=1,delta=2
    87                           	psect	text48,local,class=CODE,merge=1,delta=2
    88                           	psect	text49,local,class=CODE,merge=1,delta=2
    89                           	psect	text50,local,class=CODE,merge=1,delta=2
    90                           	psect	text51,local,class=CODE,merge=1,delta=2
    91                           	psect	text52,local,class=CODE,merge=1,delta=2
    92                           	psect	text53,local,class=CODE,merge=1,delta=2
    93                           	psect	text54,local,class=CODE,merge=1,delta=2
    94                           	psect	text55,local,class=CODE,merge=1,delta=2
    95                           	psect	text56,local,class=CODE,merge=1,delta=2
    96                           	psect	text57,local,class=CODE,merge=1,delta=2
    97                           	psect	text58,local,class=CODE,merge=1,delta=2
    98                           	psect	text59,local,class=CODE,merge=1,delta=2
    99                           	psect	text60,local,class=CODE,merge=1,delta=2
   100                           	psect	text61,local,class=CODE,merge=1,delta=2
   101                           	psect	text62,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text64,local,class=CODE,merge=1,delta=2
   104                           	psect	text65,local,class=CODE,merge=1,delta=2
   105                           	psect	text66,local,class=CODE,merge=1,delta=2
   106                           	psect	text67,local,class=CODE,merge=1,delta=2
   107                           	psect	text68,local,class=CODE,merge=1,delta=2
   108                           	dabs	1,0x920,80
   109                           	dabs	1,0x8A0,80
   110                           	dabs	1,0x820,80
   111                           	dabs	1,0x7A0,80
   112                           	dabs	1,0x720,80
   113                           	dabs	1,0x6A0,80
   114                           	dabs	1,0x648,40
   115                           	dabs	1,0x23E8,0,_delayArray
   116                           	dabs	1,0x7E,2
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  008F                     	;# 
   151  0090                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0095                     	;# 
   157  0096                     	;# 
   158  0097                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  0110                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  011D                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  018F                     	;# 
   177  0190                     	;# 
   178  0191                     	;# 
   179  0191                     	;# 
   180  0192                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0197                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  0199                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019A                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  020F                     	;# 
   212  0210                     	;# 
   213  0211                     	;# 
   214  0211                     	;# 
   215  0212                     	;# 
   216  0212                     	;# 
   217  0213                     	;# 
   218  0213                     	;# 
   219  0214                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0216                     	;# 
   225  0216                     	;# 
   226  0217                     	;# 
   227  0217                     	;# 
   228  0219                     	;# 
   229  021A                     	;# 
   230  021B                     	;# 
   231  021C                     	;# 
   232  021D                     	;# 
   233  021E                     	;# 
   234  021F                     	;# 
   235  028C                     	;# 
   236  028D                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029D                     	;# 
   246  029E                     	;# 
   247  029F                     	;# 
   248  030C                     	;# 
   249  030D                     	;# 
   250  0311                     	;# 
   251  0311                     	;# 
   252  0312                     	;# 
   253  0313                     	;# 
   254  0318                     	;# 
   255  0318                     	;# 
   256  0319                     	;# 
   257  031A                     	;# 
   258  031C                     	;# 
   259  031C                     	;# 
   260  031D                     	;# 
   261  031E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  040C                     	;# 
   268  040D                     	;# 
   269  0411                     	;# 
   270  0411                     	;# 
   271  0412                     	;# 
   272  0413                     	;# 
   273  0414                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  0418                     	;# 
   278  0418                     	;# 
   279  0419                     	;# 
   280  041A                     	;# 
   281  041B                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  048D                     	;# 
   286  0491                     	;# 
   287  0491                     	;# 
   288  0492                     	;# 
   289  0492                     	;# 
   290  0493                     	;# 
   291  0493                     	;# 
   292  0493                     	;# 
   293  0494                     	;# 
   294  0494                     	;# 
   295  0495                     	;# 
   296  0495                     	;# 
   297  0496                     	;# 
   298  0496                     	;# 
   299  0497                     	;# 
   300  0497                     	;# 
   301  0595                     	;# 
   302  0596                     	;# 
   303  0597                     	;# 
   304  059C                     	;# 
   305  059D                     	;# 
   306  059E                     	;# 
   307  0611                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  0614                     	;# 
   313  0615                     	;# 
   314  0616                     	;# 
   315  0617                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061A                     	;# 
   321  061B                     	;# 
   322  061C                     	;# 
   323  061D                     	;# 
   324  061D                     	;# 
   325  061E                     	;# 
   326  061F                     	;# 
   327  0FE4                     	;# 
   328  0FE5                     	;# 
   329  0FE6                     	;# 
   330  0FE7                     	;# 
   331  0FE8                     	;# 
   332  0FE9                     	;# 
   333  0FEA                     	;# 
   334  0FEB                     	;# 
   335  0FED                     	;# 
   336  0FEE                     	;# 
   337  0FEF                     	;# 
   338  0000                     	;# 
   339  0001                     	;# 
   340  0002                     	;# 
   341  0003                     	;# 
   342  0004                     	;# 
   343  0005                     	;# 
   344  0006                     	;# 
   345  0007                     	;# 
   346  0008                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000F                     	;# 
   354  0010                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0014                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  008F                     	;# 
   372  0090                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0095                     	;# 
   378  0096                     	;# 
   379  0097                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009B                     	;# 
   384  009C                     	;# 
   385  009D                     	;# 
   386  009E                     	;# 
   387  010C                     	;# 
   388  010D                     	;# 
   389  010E                     	;# 
   390  010F                     	;# 
   391  0110                     	;# 
   392  0116                     	;# 
   393  0117                     	;# 
   394  011D                     	;# 
   395  018C                     	;# 
   396  018D                     	;# 
   397  018F                     	;# 
   398  0190                     	;# 
   399  0191                     	;# 
   400  0191                     	;# 
   401  0192                     	;# 
   402  0193                     	;# 
   403  0193                     	;# 
   404  0194                     	;# 
   405  0195                     	;# 
   406  0196                     	;# 
   407  0197                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  0199                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019A                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019C                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019D                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  019F                     	;# 
   431  020D                     	;# 
   432  020F                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0219                     	;# 
   450  021A                     	;# 
   451  021B                     	;# 
   452  021C                     	;# 
   453  021D                     	;# 
   454  021E                     	;# 
   455  021F                     	;# 
   456  028C                     	;# 
   457  028D                     	;# 
   458  0291                     	;# 
   459  0291                     	;# 
   460  0292                     	;# 
   461  0293                     	;# 
   462  0298                     	;# 
   463  0298                     	;# 
   464  0299                     	;# 
   465  029A                     	;# 
   466  029D                     	;# 
   467  029E                     	;# 
   468  029F                     	;# 
   469  030C                     	;# 
   470  030D                     	;# 
   471  0311                     	;# 
   472  0311                     	;# 
   473  0312                     	;# 
   474  0313                     	;# 
   475  0318                     	;# 
   476  0318                     	;# 
   477  0319                     	;# 
   478  031A                     	;# 
   479  031C                     	;# 
   480  031C                     	;# 
   481  031D                     	;# 
   482  031E                     	;# 
   483  038C                     	;# 
   484  038D                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  040C                     	;# 
   489  040D                     	;# 
   490  0411                     	;# 
   491  0411                     	;# 
   492  0412                     	;# 
   493  0413                     	;# 
   494  0414                     	;# 
   495  0415                     	;# 
   496  0416                     	;# 
   497  0417                     	;# 
   498  0418                     	;# 
   499  0418                     	;# 
   500  0419                     	;# 
   501  041A                     	;# 
   502  041B                     	;# 
   503  041C                     	;# 
   504  041D                     	;# 
   505  041E                     	;# 
   506  048D                     	;# 
   507  0491                     	;# 
   508  0491                     	;# 
   509  0492                     	;# 
   510  0492                     	;# 
   511  0493                     	;# 
   512  0493                     	;# 
   513  0493                     	;# 
   514  0494                     	;# 
   515  0494                     	;# 
   516  0495                     	;# 
   517  0495                     	;# 
   518  0496                     	;# 
   519  0496                     	;# 
   520  0497                     	;# 
   521  0497                     	;# 
   522  0595                     	;# 
   523  0596                     	;# 
   524  0597                     	;# 
   525  059C                     	;# 
   526  059D                     	;# 
   527  059E                     	;# 
   528  0611                     	;# 
   529  0611                     	;# 
   530  0612                     	;# 
   531  0613                     	;# 
   532  0614                     	;# 
   533  0614                     	;# 
   534  0615                     	;# 
   535  0616                     	;# 
   536  0617                     	;# 
   537  0617                     	;# 
   538  0618                     	;# 
   539  0619                     	;# 
   540  061A                     	;# 
   541  061A                     	;# 
   542  061B                     	;# 
   543  061C                     	;# 
   544  061D                     	;# 
   545  061D                     	;# 
   546  061E                     	;# 
   547  061F                     	;# 
   548  0FE4                     	;# 
   549  0FE5                     	;# 
   550  0FE6                     	;# 
   551  0FE7                     	;# 
   552  0FE8                     	;# 
   553  0FE9                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEF                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0008                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  000F                     	;# 
   575  0010                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0013                     	;# 
   579  0014                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  008F                     	;# 
   593  0090                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0093                     	;# 
   597  0094                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0097                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  010C                     	;# 
   609  010D                     	;# 
   610  010E                     	;# 
   611  010F                     	;# 
   612  0110                     	;# 
   613  0116                     	;# 
   614  0117                     	;# 
   615  011D                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018F                     	;# 
   619  0190                     	;# 
   620  0191                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0197                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  020F                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  028C                     	;# 
   678  028D                     	;# 
   679  0291                     	;# 
   680  0291                     	;# 
   681  0292                     	;# 
   682  0293                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029D                     	;# 
   688  029E                     	;# 
   689  029F                     	;# 
   690  030C                     	;# 
   691  030D                     	;# 
   692  0311                     	;# 
   693  0311                     	;# 
   694  0312                     	;# 
   695  0313                     	;# 
   696  0318                     	;# 
   697  0318                     	;# 
   698  0319                     	;# 
   699  031A                     	;# 
   700  031C                     	;# 
   701  031C                     	;# 
   702  031D                     	;# 
   703  031E                     	;# 
   704  038C                     	;# 
   705  038D                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  040C                     	;# 
   710  040D                     	;# 
   711  0411                     	;# 
   712  0411                     	;# 
   713  0412                     	;# 
   714  0413                     	;# 
   715  0414                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  0418                     	;# 
   720  0418                     	;# 
   721  0419                     	;# 
   722  041A                     	;# 
   723  041B                     	;# 
   724  041C                     	;# 
   725  041D                     	;# 
   726  041E                     	;# 
   727  048D                     	;# 
   728  0491                     	;# 
   729  0491                     	;# 
   730  0492                     	;# 
   731  0492                     	;# 
   732  0493                     	;# 
   733  0493                     	;# 
   734  0493                     	;# 
   735  0494                     	;# 
   736  0494                     	;# 
   737  0495                     	;# 
   738  0495                     	;# 
   739  0496                     	;# 
   740  0496                     	;# 
   741  0497                     	;# 
   742  0497                     	;# 
   743  0595                     	;# 
   744  0596                     	;# 
   745  0597                     	;# 
   746  059C                     	;# 
   747  059D                     	;# 
   748  059E                     	;# 
   749  0611                     	;# 
   750  0611                     	;# 
   751  0612                     	;# 
   752  0613                     	;# 
   753  0614                     	;# 
   754  0614                     	;# 
   755  0615                     	;# 
   756  0616                     	;# 
   757  0617                     	;# 
   758  0617                     	;# 
   759  0618                     	;# 
   760  0619                     	;# 
   761  061A                     	;# 
   762  061A                     	;# 
   763  061B                     	;# 
   764  061C                     	;# 
   765  061D                     	;# 
   766  061D                     	;# 
   767  061E                     	;# 
   768  061F                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000F                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0096                     	;# 
   821  0097                     	;# 
   822  0099                     	;# 
   823  009A                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010E                     	;# 
   832  010F                     	;# 
   833  0110                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  011D                     	;# 
   837  018C                     	;# 
   838  018D                     	;# 
   839  018F                     	;# 
   840  0190                     	;# 
   841  0191                     	;# 
   842  0191                     	;# 
   843  0192                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0197                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019A                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019C                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019D                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  020D                     	;# 
   874  020F                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0219                     	;# 
   892  021A                     	;# 
   893  021B                     	;# 
   894  021C                     	;# 
   895  021D                     	;# 
   896  021E                     	;# 
   897  021F                     	;# 
   898  028C                     	;# 
   899  028D                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0298                     	;# 
   905  0298                     	;# 
   906  0299                     	;# 
   907  029A                     	;# 
   908  029D                     	;# 
   909  029E                     	;# 
   910  029F                     	;# 
   911  030C                     	;# 
   912  030D                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  031C                     	;# 
   922  031C                     	;# 
   923  031D                     	;# 
   924  031E                     	;# 
   925  038C                     	;# 
   926  038D                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  040C                     	;# 
   931  040D                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  048D                     	;# 
   949  0491                     	;# 
   950  0491                     	;# 
   951  0492                     	;# 
   952  0492                     	;# 
   953  0493                     	;# 
   954  0493                     	;# 
   955  0493                     	;# 
   956  0494                     	;# 
   957  0494                     	;# 
   958  0495                     	;# 
   959  0495                     	;# 
   960  0496                     	;# 
   961  0496                     	;# 
   962  0497                     	;# 
   963  0497                     	;# 
   964  0595                     	;# 
   965  0596                     	;# 
   966  0597                     	;# 
   967  059C                     	;# 
   968  059D                     	;# 
   969  059E                     	;# 
   970  0611                     	;# 
   971  0611                     	;# 
   972  0612                     	;# 
   973  0613                     	;# 
   974  0614                     	;# 
   975  0614                     	;# 
   976  0615                     	;# 
   977  0616                     	;# 
   978  0617                     	;# 
   979  0617                     	;# 
   980  0618                     	;# 
   981  0619                     	;# 
   982  061A                     	;# 
   983  061A                     	;# 
   984  061B                     	;# 
   985  061C                     	;# 
   986  061D                     	;# 
   987  061D                     	;# 
   988  061E                     	;# 
   989  061F                     	;# 
   990  0FE4                     	;# 
   991  0FE5                     	;# 
   992  0FE6                     	;# 
   993  0FE7                     	;# 
   994  0FE8                     	;# 
   995  0FE9                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEF                     	;# 
  1001  0000                     	;# 
  1002  0001                     	;# 
  1003  0002                     	;# 
  1004  0003                     	;# 
  1005  0004                     	;# 
  1006  0005                     	;# 
  1007  0006                     	;# 
  1008  0007                     	;# 
  1009  0008                     	;# 
  1010  0009                     	;# 
  1011  000A                     	;# 
  1012  000B                     	;# 
  1013  000C                     	;# 
  1014  000D                     	;# 
  1015  000E                     	;# 
  1016  000F                     	;# 
  1017  0010                     	;# 
  1018  0011                     	;# 
  1019  0012                     	;# 
  1020  0013                     	;# 
  1021  0014                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  008C                     	;# 
  1032  008D                     	;# 
  1033  008E                     	;# 
  1034  008F                     	;# 
  1035  0090                     	;# 
  1036  0091                     	;# 
  1037  0092                     	;# 
  1038  0093                     	;# 
  1039  0094                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0099                     	;# 
  1044  009A                     	;# 
  1045  009B                     	;# 
  1046  009B                     	;# 
  1047  009C                     	;# 
  1048  009D                     	;# 
  1049  009E                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0110                     	;# 
  1055  0116                     	;# 
  1056  0117                     	;# 
  1057  011D                     	;# 
  1058  018C                     	;# 
  1059  018D                     	;# 
  1060  018F                     	;# 
  1061  0190                     	;# 
  1062  0191                     	;# 
  1063  0191                     	;# 
  1064  0192                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0197                     	;# 
  1071  0199                     	;# 
  1072  0199                     	;# 
  1073  0199                     	;# 
  1074  019A                     	;# 
  1075  019A                     	;# 
  1076  019A                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019C                     	;# 
  1085  019D                     	;# 
  1086  019D                     	;# 
  1087  019D                     	;# 
  1088  019E                     	;# 
  1089  019E                     	;# 
  1090  019E                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  019F                     	;# 
  1094  020D                     	;# 
  1095  020F                     	;# 
  1096  0210                     	;# 
  1097  0211                     	;# 
  1098  0211                     	;# 
  1099  0212                     	;# 
  1100  0212                     	;# 
  1101  0213                     	;# 
  1102  0213                     	;# 
  1103  0214                     	;# 
  1104  0214                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0216                     	;# 
  1109  0216                     	;# 
  1110  0217                     	;# 
  1111  0217                     	;# 
  1112  0219                     	;# 
  1113  021A                     	;# 
  1114  021B                     	;# 
  1115  021C                     	;# 
  1116  021D                     	;# 
  1117  021E                     	;# 
  1118  021F                     	;# 
  1119  028C                     	;# 
  1120  028D                     	;# 
  1121  0291                     	;# 
  1122  0291                     	;# 
  1123  0292                     	;# 
  1124  0293                     	;# 
  1125  0298                     	;# 
  1126  0298                     	;# 
  1127  0299                     	;# 
  1128  029A                     	;# 
  1129  029D                     	;# 
  1130  029E                     	;# 
  1131  029F                     	;# 
  1132  030C                     	;# 
  1133  030D                     	;# 
  1134  0311                     	;# 
  1135  0311                     	;# 
  1136  0312                     	;# 
  1137  0313                     	;# 
  1138  0318                     	;# 
  1139  0318                     	;# 
  1140  0319                     	;# 
  1141  031A                     	;# 
  1142  031C                     	;# 
  1143  031C                     	;# 
  1144  031D                     	;# 
  1145  031E                     	;# 
  1146  038C                     	;# 
  1147  038D                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  040C                     	;# 
  1152  040D                     	;# 
  1153  0411                     	;# 
  1154  0411                     	;# 
  1155  0412                     	;# 
  1156  0413                     	;# 
  1157  0414                     	;# 
  1158  0415                     	;# 
  1159  0416                     	;# 
  1160  0417                     	;# 
  1161  0418                     	;# 
  1162  0418                     	;# 
  1163  0419                     	;# 
  1164  041A                     	;# 
  1165  041B                     	;# 
  1166  041C                     	;# 
  1167  041D                     	;# 
  1168  041E                     	;# 
  1169  048D                     	;# 
  1170  0491                     	;# 
  1171  0491                     	;# 
  1172  0492                     	;# 
  1173  0492                     	;# 
  1174  0493                     	;# 
  1175  0493                     	;# 
  1176  0493                     	;# 
  1177  0494                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0495                     	;# 
  1181  0496                     	;# 
  1182  0496                     	;# 
  1183  0497                     	;# 
  1184  0497                     	;# 
  1185  0595                     	;# 
  1186  0596                     	;# 
  1187  0597                     	;# 
  1188  059C                     	;# 
  1189  059D                     	;# 
  1190  059E                     	;# 
  1191  0611                     	;# 
  1192  0611                     	;# 
  1193  0612                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0614                     	;# 
  1197  0615                     	;# 
  1198  0616                     	;# 
  1199  0617                     	;# 
  1200  0617                     	;# 
  1201  0618                     	;# 
  1202  0619                     	;# 
  1203  061A                     	;# 
  1204  061A                     	;# 
  1205  061B                     	;# 
  1206  061C                     	;# 
  1207  061D                     	;# 
  1208  061D                     	;# 
  1209  061E                     	;# 
  1210  061F                     	;# 
  1211  0FE4                     	;# 
  1212  0FE5                     	;# 
  1213  0FE6                     	;# 
  1214  0FE7                     	;# 
  1215  0FE8                     	;# 
  1216  0FE9                     	;# 
  1217  0FEA                     	;# 
  1218  0FEB                     	;# 
  1219  0FED                     	;# 
  1220  0FEE                     	;# 
  1221  0FEF                     	;# 
  1222  0000                     	;# 
  1223  0001                     	;# 
  1224  0002                     	;# 
  1225  0003                     	;# 
  1226  0004                     	;# 
  1227  0005                     	;# 
  1228  0006                     	;# 
  1229  0007                     	;# 
  1230  0008                     	;# 
  1231  0009                     	;# 
  1232  000A                     	;# 
  1233  000B                     	;# 
  1234  000C                     	;# 
  1235  000D                     	;# 
  1236  000E                     	;# 
  1237  000F                     	;# 
  1238  0010                     	;# 
  1239  0011                     	;# 
  1240  0012                     	;# 
  1241  0013                     	;# 
  1242  0014                     	;# 
  1243  0015                     	;# 
  1244  0016                     	;# 
  1245  0016                     	;# 
  1246  0017                     	;# 
  1247  0018                     	;# 
  1248  0019                     	;# 
  1249  001A                     	;# 
  1250  001B                     	;# 
  1251  001C                     	;# 
  1252  008C                     	;# 
  1253  008D                     	;# 
  1254  008E                     	;# 
  1255  008F                     	;# 
  1256  0090                     	;# 
  1257  0091                     	;# 
  1258  0092                     	;# 
  1259  0093                     	;# 
  1260  0094                     	;# 
  1261  0095                     	;# 
  1262  0096                     	;# 
  1263  0097                     	;# 
  1264  0099                     	;# 
  1265  009A                     	;# 
  1266  009B                     	;# 
  1267  009B                     	;# 
  1268  009C                     	;# 
  1269  009D                     	;# 
  1270  009E                     	;# 
  1271  010C                     	;# 
  1272  010D                     	;# 
  1273  010E                     	;# 
  1274  010F                     	;# 
  1275  0110                     	;# 
  1276  0116                     	;# 
  1277  0117                     	;# 
  1278  011D                     	;# 
  1279  018C                     	;# 
  1280  018D                     	;# 
  1281  018F                     	;# 
  1282  0190                     	;# 
  1283  0191                     	;# 
  1284  0191                     	;# 
  1285  0192                     	;# 
  1286  0193                     	;# 
  1287  0193                     	;# 
  1288  0194                     	;# 
  1289  0195                     	;# 
  1290  0196                     	;# 
  1291  0197                     	;# 
  1292  0199                     	;# 
  1293  0199                     	;# 
  1294  0199                     	;# 
  1295  019A                     	;# 
  1296  019A                     	;# 
  1297  019A                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019B                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019C                     	;# 
  1306  019D                     	;# 
  1307  019D                     	;# 
  1308  019D                     	;# 
  1309  019E                     	;# 
  1310  019E                     	;# 
  1311  019E                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  019F                     	;# 
  1315  020D                     	;# 
  1316  020F                     	;# 
  1317  0210                     	;# 
  1318  0211                     	;# 
  1319  0211                     	;# 
  1320  0212                     	;# 
  1321  0212                     	;# 
  1322  0213                     	;# 
  1323  0213                     	;# 
  1324  0214                     	;# 
  1325  0214                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0219                     	;# 
  1334  021A                     	;# 
  1335  021B                     	;# 
  1336  021C                     	;# 
  1337  021D                     	;# 
  1338  021E                     	;# 
  1339  021F                     	;# 
  1340  028C                     	;# 
  1341  028D                     	;# 
  1342  0291                     	;# 
  1343  0291                     	;# 
  1344  0292                     	;# 
  1345  0293                     	;# 
  1346  0298                     	;# 
  1347  0298                     	;# 
  1348  0299                     	;# 
  1349  029A                     	;# 
  1350  029D                     	;# 
  1351  029E                     	;# 
  1352  029F                     	;# 
  1353  030C                     	;# 
  1354  030D                     	;# 
  1355  0311                     	;# 
  1356  0311                     	;# 
  1357  0312                     	;# 
  1358  0313                     	;# 
  1359  0318                     	;# 
  1360  0318                     	;# 
  1361  0319                     	;# 
  1362  031A                     	;# 
  1363  031C                     	;# 
  1364  031C                     	;# 
  1365  031D                     	;# 
  1366  031E                     	;# 
  1367  038C                     	;# 
  1368  038D                     	;# 
  1369  0394                     	;# 
  1370  0395                     	;# 
  1371  0396                     	;# 
  1372  040C                     	;# 
  1373  040D                     	;# 
  1374  0411                     	;# 
  1375  0411                     	;# 
  1376  0412                     	;# 
  1377  0413                     	;# 
  1378  0414                     	;# 
  1379  0415                     	;# 
  1380  0416                     	;# 
  1381  0417                     	;# 
  1382  0418                     	;# 
  1383  0418                     	;# 
  1384  0419                     	;# 
  1385  041A                     	;# 
  1386  041B                     	;# 
  1387  041C                     	;# 
  1388  041D                     	;# 
  1389  041E                     	;# 
  1390  048D                     	;# 
  1391  0491                     	;# 
  1392  0491                     	;# 
  1393  0492                     	;# 
  1394  0492                     	;# 
  1395  0493                     	;# 
  1396  0493                     	;# 
  1397  0493                     	;# 
  1398  0494                     	;# 
  1399  0494                     	;# 
  1400  0495                     	;# 
  1401  0495                     	;# 
  1402  0496                     	;# 
  1403  0496                     	;# 
  1404  0497                     	;# 
  1405  0497                     	;# 
  1406  0595                     	;# 
  1407  0596                     	;# 
  1408  0597                     	;# 
  1409  059C                     	;# 
  1410  059D                     	;# 
  1411  059E                     	;# 
  1412  0611                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0614                     	;# 
  1418  0615                     	;# 
  1419  0616                     	;# 
  1420  0617                     	;# 
  1421  0617                     	;# 
  1422  0618                     	;# 
  1423  0619                     	;# 
  1424  061A                     	;# 
  1425  061A                     	;# 
  1426  061B                     	;# 
  1427  061C                     	;# 
  1428  061D                     	;# 
  1429  061D                     	;# 
  1430  061E                     	;# 
  1431  061F                     	;# 
  1432  0FE4                     	;# 
  1433  0FE5                     	;# 
  1434  0FE6                     	;# 
  1435  0FE7                     	;# 
  1436  0FE8                     	;# 
  1437  0FE9                     	;# 
  1438  0FEA                     	;# 
  1439  0FEB                     	;# 
  1440  0FED                     	;# 
  1441  0FEE                     	;# 
  1442  0FEF                     	;# 
  1443  0000                     	;# 
  1444  0001                     	;# 
  1445  0002                     	;# 
  1446  0003                     	;# 
  1447  0004                     	;# 
  1448  0005                     	;# 
  1449  0006                     	;# 
  1450  0007                     	;# 
  1451  0008                     	;# 
  1452  0009                     	;# 
  1453  000A                     	;# 
  1454  000B                     	;# 
  1455  000C                     	;# 
  1456  000D                     	;# 
  1457  000E                     	;# 
  1458  000F                     	;# 
  1459  0010                     	;# 
  1460  0011                     	;# 
  1461  0012                     	;# 
  1462  0013                     	;# 
  1463  0014                     	;# 
  1464  0015                     	;# 
  1465  0016                     	;# 
  1466  0016                     	;# 
  1467  0017                     	;# 
  1468  0018                     	;# 
  1469  0019                     	;# 
  1470  001A                     	;# 
  1471  001B                     	;# 
  1472  001C                     	;# 
  1473  008C                     	;# 
  1474  008D                     	;# 
  1475  008E                     	;# 
  1476  008F                     	;# 
  1477  0090                     	;# 
  1478  0091                     	;# 
  1479  0092                     	;# 
  1480  0093                     	;# 
  1481  0094                     	;# 
  1482  0095                     	;# 
  1483  0096                     	;# 
  1484  0097                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  010F                     	;# 
  1496  0110                     	;# 
  1497  0116                     	;# 
  1498  0117                     	;# 
  1499  011D                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018F                     	;# 
  1503  0190                     	;# 
  1504  0191                     	;# 
  1505  0191                     	;# 
  1506  0192                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0197                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  020D                     	;# 
  1537  020F                     	;# 
  1538  0210                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0216                     	;# 
  1551  0216                     	;# 
  1552  0217                     	;# 
  1553  0217                     	;# 
  1554  0219                     	;# 
  1555  021A                     	;# 
  1556  021B                     	;# 
  1557  021C                     	;# 
  1558  021D                     	;# 
  1559  021E                     	;# 
  1560  021F                     	;# 
  1561  028C                     	;# 
  1562  028D                     	;# 
  1563  0291                     	;# 
  1564  0291                     	;# 
  1565  0292                     	;# 
  1566  0293                     	;# 
  1567  0298                     	;# 
  1568  0298                     	;# 
  1569  0299                     	;# 
  1570  029A                     	;# 
  1571  029D                     	;# 
  1572  029E                     	;# 
  1573  029F                     	;# 
  1574  030C                     	;# 
  1575  030D                     	;# 
  1576  0311                     	;# 
  1577  0311                     	;# 
  1578  0312                     	;# 
  1579  0313                     	;# 
  1580  0318                     	;# 
  1581  0318                     	;# 
  1582  0319                     	;# 
  1583  031A                     	;# 
  1584  031C                     	;# 
  1585  031C                     	;# 
  1586  031D                     	;# 
  1587  031E                     	;# 
  1588  038C                     	;# 
  1589  038D                     	;# 
  1590  0394                     	;# 
  1591  0395                     	;# 
  1592  0396                     	;# 
  1593  040C                     	;# 
  1594  040D                     	;# 
  1595  0411                     	;# 
  1596  0411                     	;# 
  1597  0412                     	;# 
  1598  0413                     	;# 
  1599  0414                     	;# 
  1600  0415                     	;# 
  1601  0416                     	;# 
  1602  0417                     	;# 
  1603  0418                     	;# 
  1604  0418                     	;# 
  1605  0419                     	;# 
  1606  041A                     	;# 
  1607  041B                     	;# 
  1608  041C                     	;# 
  1609  041D                     	;# 
  1610  041E                     	;# 
  1611  048D                     	;# 
  1612  0491                     	;# 
  1613  0491                     	;# 
  1614  0492                     	;# 
  1615  0492                     	;# 
  1616  0493                     	;# 
  1617  0493                     	;# 
  1618  0493                     	;# 
  1619  0494                     	;# 
  1620  0494                     	;# 
  1621  0495                     	;# 
  1622  0495                     	;# 
  1623  0496                     	;# 
  1624  0496                     	;# 
  1625  0497                     	;# 
  1626  0497                     	;# 
  1627  0595                     	;# 
  1628  0596                     	;# 
  1629  0597                     	;# 
  1630  059C                     	;# 
  1631  059D                     	;# 
  1632  059E                     	;# 
  1633  0611                     	;# 
  1634  0611                     	;# 
  1635  0612                     	;# 
  1636  0613                     	;# 
  1637  0614                     	;# 
  1638  0614                     	;# 
  1639  0615                     	;# 
  1640  0616                     	;# 
  1641  0617                     	;# 
  1642  0617                     	;# 
  1643  0618                     	;# 
  1644  0619                     	;# 
  1645  061A                     	;# 
  1646  061A                     	;# 
  1647  061B                     	;# 
  1648  061C                     	;# 
  1649  061D                     	;# 
  1650  061D                     	;# 
  1651  061E                     	;# 
  1652  061F                     	;# 
  1653  0FE4                     	;# 
  1654  0FE5                     	;# 
  1655  0FE6                     	;# 
  1656  0FE7                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEB                     	;# 
  1661  0FED                     	;# 
  1662  0FEE                     	;# 
  1663  0FEF                     	;# 
  1664  0000                     	;# 
  1665  0001                     	;# 
  1666  0002                     	;# 
  1667  0003                     	;# 
  1668  0004                     	;# 
  1669  0005                     	;# 
  1670  0006                     	;# 
  1671  0007                     	;# 
  1672  0008                     	;# 
  1673  0009                     	;# 
  1674  000A                     	;# 
  1675  000B                     	;# 
  1676  000C                     	;# 
  1677  000D                     	;# 
  1678  000E                     	;# 
  1679  000F                     	;# 
  1680  0010                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0014                     	;# 
  1685  0015                     	;# 
  1686  0016                     	;# 
  1687  0016                     	;# 
  1688  0017                     	;# 
  1689  0018                     	;# 
  1690  0019                     	;# 
  1691  001A                     	;# 
  1692  001B                     	;# 
  1693  001C                     	;# 
  1694  008C                     	;# 
  1695  008D                     	;# 
  1696  008E                     	;# 
  1697  008F                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0092                     	;# 
  1701  0093                     	;# 
  1702  0094                     	;# 
  1703  0095                     	;# 
  1704  0096                     	;# 
  1705  0097                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009B                     	;# 
  1710  009C                     	;# 
  1711  009D                     	;# 
  1712  009E                     	;# 
  1713  010C                     	;# 
  1714  010D                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  011D                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018F                     	;# 
  1724  0190                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0197                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  0199                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019D                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  020D                     	;# 
  1758  020F                     	;# 
  1759  0210                     	;# 
  1760  0211                     	;# 
  1761  0211                     	;# 
  1762  0212                     	;# 
  1763  0212                     	;# 
  1764  0213                     	;# 
  1765  0213                     	;# 
  1766  0214                     	;# 
  1767  0214                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0216                     	;# 
  1772  0216                     	;# 
  1773  0217                     	;# 
  1774  0217                     	;# 
  1775  0219                     	;# 
  1776  021A                     	;# 
  1777  021B                     	;# 
  1778  021C                     	;# 
  1779  021D                     	;# 
  1780  021E                     	;# 
  1781  021F                     	;# 
  1782  028C                     	;# 
  1783  028D                     	;# 
  1784  0291                     	;# 
  1785  0291                     	;# 
  1786  0292                     	;# 
  1787  0293                     	;# 
  1788  0298                     	;# 
  1789  0298                     	;# 
  1790  0299                     	;# 
  1791  029A                     	;# 
  1792  029D                     	;# 
  1793  029E                     	;# 
  1794  029F                     	;# 
  1795  030C                     	;# 
  1796  030D                     	;# 
  1797  0311                     	;# 
  1798  0311                     	;# 
  1799  0312                     	;# 
  1800  0313                     	;# 
  1801  0318                     	;# 
  1802  0318                     	;# 
  1803  0319                     	;# 
  1804  031A                     	;# 
  1805  031C                     	;# 
  1806  031C                     	;# 
  1807  031D                     	;# 
  1808  031E                     	;# 
  1809  038C                     	;# 
  1810  038D                     	;# 
  1811  0394                     	;# 
  1812  0395                     	;# 
  1813  0396                     	;# 
  1814  040C                     	;# 
  1815  040D                     	;# 
  1816  0411                     	;# 
  1817  0411                     	;# 
  1818  0412                     	;# 
  1819  0413                     	;# 
  1820  0414                     	;# 
  1821  0415                     	;# 
  1822  0416                     	;# 
  1823  0417                     	;# 
  1824  0418                     	;# 
  1825  0418                     	;# 
  1826  0419                     	;# 
  1827  041A                     	;# 
  1828  041B                     	;# 
  1829  041C                     	;# 
  1830  041D                     	;# 
  1831  041E                     	;# 
  1832  048D                     	;# 
  1833  0491                     	;# 
  1834  0491                     	;# 
  1835  0492                     	;# 
  1836  0492                     	;# 
  1837  0493                     	;# 
  1838  0493                     	;# 
  1839  0493                     	;# 
  1840  0494                     	;# 
  1841  0494                     	;# 
  1842  0495                     	;# 
  1843  0495                     	;# 
  1844  0496                     	;# 
  1845  0496                     	;# 
  1846  0497                     	;# 
  1847  0497                     	;# 
  1848  0595                     	;# 
  1849  0596                     	;# 
  1850  0597                     	;# 
  1851  059C                     	;# 
  1852  059D                     	;# 
  1853  059E                     	;# 
  1854  0611                     	;# 
  1855  0611                     	;# 
  1856  0612                     	;# 
  1857  0613                     	;# 
  1858  0614                     	;# 
  1859  0614                     	;# 
  1860  0615                     	;# 
  1861  0616                     	;# 
  1862  0617                     	;# 
  1863  0617                     	;# 
  1864  0618                     	;# 
  1865  0619                     	;# 
  1866  061A                     	;# 
  1867  061A                     	;# 
  1868  061B                     	;# 
  1869  061C                     	;# 
  1870  061D                     	;# 
  1871  061D                     	;# 
  1872  061E                     	;# 
  1873  061F                     	;# 
  1874  0FE4                     	;# 
  1875  0FE5                     	;# 
  1876  0FE6                     	;# 
  1877  0FE7                     	;# 
  1878  0FE8                     	;# 
  1879  0FE9                     	;# 
  1880  0FEA                     	;# 
  1881  0FEB                     	;# 
  1882  0FED                     	;# 
  1883  0FEE                     	;# 
  1884  0FEF                     	;# 
  1885  0000                     	;# 
  1886  0001                     	;# 
  1887  0002                     	;# 
  1888  0003                     	;# 
  1889  0004                     	;# 
  1890  0005                     	;# 
  1891  0006                     	;# 
  1892  0007                     	;# 
  1893  0008                     	;# 
  1894  0009                     	;# 
  1895  000A                     	;# 
  1896  000B                     	;# 
  1897  000C                     	;# 
  1898  000D                     	;# 
  1899  000E                     	;# 
  1900  000F                     	;# 
  1901  0010                     	;# 
  1902  0011                     	;# 
  1903  0012                     	;# 
  1904  0013                     	;# 
  1905  0014                     	;# 
  1906  0015                     	;# 
  1907  0016                     	;# 
  1908  0016                     	;# 
  1909  0017                     	;# 
  1910  0018                     	;# 
  1911  0019                     	;# 
  1912  001A                     	;# 
  1913  001B                     	;# 
  1914  001C                     	;# 
  1915  008C                     	;# 
  1916  008D                     	;# 
  1917  008E                     	;# 
  1918  008F                     	;# 
  1919  0090                     	;# 
  1920  0091                     	;# 
  1921  0092                     	;# 
  1922  0093                     	;# 
  1923  0094                     	;# 
  1924  0095                     	;# 
  1925  0096                     	;# 
  1926  0097                     	;# 
  1927  0099                     	;# 
  1928  009A                     	;# 
  1929  009B                     	;# 
  1930  009B                     	;# 
  1931  009C                     	;# 
  1932  009D                     	;# 
  1933  009E                     	;# 
  1934  010C                     	;# 
  1935  010D                     	;# 
  1936  010E                     	;# 
  1937  010F                     	;# 
  1938  0110                     	;# 
  1939  0116                     	;# 
  1940  0117                     	;# 
  1941  011D                     	;# 
  1942  018C                     	;# 
  1943  018D                     	;# 
  1944  018F                     	;# 
  1945  0190                     	;# 
  1946  0191                     	;# 
  1947  0191                     	;# 
  1948  0192                     	;# 
  1949  0193                     	;# 
  1950  0193                     	;# 
  1951  0194                     	;# 
  1952  0195                     	;# 
  1953  0196                     	;# 
  1954  0197                     	;# 
  1955  0199                     	;# 
  1956  0199                     	;# 
  1957  0199                     	;# 
  1958  019A                     	;# 
  1959  019A                     	;# 
  1960  019A                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019B                     	;# 
  1964  019B                     	;# 
  1965  019B                     	;# 
  1966  019C                     	;# 
  1967  019C                     	;# 
  1968  019C                     	;# 
  1969  019D                     	;# 
  1970  019D                     	;# 
  1971  019D                     	;# 
  1972  019E                     	;# 
  1973  019E                     	;# 
  1974  019E                     	;# 
  1975  019F                     	;# 
  1976  019F                     	;# 
  1977  019F                     	;# 
  1978  020D                     	;# 
  1979  020F                     	;# 
  1980  0210                     	;# 
  1981  0211                     	;# 
  1982  0211                     	;# 
  1983  0212                     	;# 
  1984  0212                     	;# 
  1985  0213                     	;# 
  1986  0213                     	;# 
  1987  0214                     	;# 
  1988  0214                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0215                     	;# 
  1992  0216                     	;# 
  1993  0216                     	;# 
  1994  0217                     	;# 
  1995  0217                     	;# 
  1996  0219                     	;# 
  1997  021A                     	;# 
  1998  021B                     	;# 
  1999  021C                     	;# 
  2000  021D                     	;# 
  2001  021E                     	;# 
  2002  021F                     	;# 
  2003  028C                     	;# 
  2004  028D                     	;# 
  2005  0291                     	;# 
  2006  0291                     	;# 
  2007  0292                     	;# 
  2008  0293                     	;# 
  2009  0298                     	;# 
  2010  0298                     	;# 
  2011  0299                     	;# 
  2012  029A                     	;# 
  2013  029D                     	;# 
  2014  029E                     	;# 
  2015  029F                     	;# 
  2016  030C                     	;# 
  2017  030D                     	;# 
  2018  0311                     	;# 
  2019  0311                     	;# 
  2020  0312                     	;# 
  2021  0313                     	;# 
  2022  0318                     	;# 
  2023  0318                     	;# 
  2024  0319                     	;# 
  2025  031A                     	;# 
  2026  031C                     	;# 
  2027  031C                     	;# 
  2028  031D                     	;# 
  2029  031E                     	;# 
  2030  038C                     	;# 
  2031  038D                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  040C                     	;# 
  2036  040D                     	;# 
  2037  0411                     	;# 
  2038  0411                     	;# 
  2039  0412                     	;# 
  2040  0413                     	;# 
  2041  0414                     	;# 
  2042  0415                     	;# 
  2043  0416                     	;# 
  2044  0417                     	;# 
  2045  0418                     	;# 
  2046  0418                     	;# 
  2047  0419                     	;# 
  2048  041A                     	;# 
  2049  041B                     	;# 
  2050  041C                     	;# 
  2051  041D                     	;# 
  2052  041E                     	;# 
  2053  048D                     	;# 
  2054  0491                     	;# 
  2055  0491                     	;# 
  2056  0492                     	;# 
  2057  0492                     	;# 
  2058  0493                     	;# 
  2059  0493                     	;# 
  2060  0493                     	;# 
  2061  0494                     	;# 
  2062  0494                     	;# 
  2063  0495                     	;# 
  2064  0495                     	;# 
  2065  0496                     	;# 
  2066  0496                     	;# 
  2067  0497                     	;# 
  2068  0497                     	;# 
  2069  0595                     	;# 
  2070  0596                     	;# 
  2071  0597                     	;# 
  2072  059C                     	;# 
  2073  059D                     	;# 
  2074  059E                     	;# 
  2075  0611                     	;# 
  2076  0611                     	;# 
  2077  0612                     	;# 
  2078  0613                     	;# 
  2079  0614                     	;# 
  2080  0614                     	;# 
  2081  0615                     	;# 
  2082  0616                     	;# 
  2083  0617                     	;# 
  2084  0617                     	;# 
  2085  0618                     	;# 
  2086  0619                     	;# 
  2087  061A                     	;# 
  2088  061A                     	;# 
  2089  061B                     	;# 
  2090  061C                     	;# 
  2091  061D                     	;# 
  2092  061D                     	;# 
  2093  061E                     	;# 
  2094  061F                     	;# 
  2095  0FE4                     	;# 
  2096  0FE5                     	;# 
  2097  0FE6                     	;# 
  2098  0FE7                     	;# 
  2099  0FE8                     	;# 
  2100  0FE9                     	;# 
  2101  0FEA                     	;# 
  2102  0FEB                     	;# 
  2103  0FED                     	;# 
  2104  0FEE                     	;# 
  2105  0FEF                     	;# 
  2106  0000                     	;# 
  2107  0001                     	;# 
  2108  0002                     	;# 
  2109  0003                     	;# 
  2110  0004                     	;# 
  2111  0005                     	;# 
  2112  0006                     	;# 
  2113  0007                     	;# 
  2114  0008                     	;# 
  2115  0009                     	;# 
  2116  000A                     	;# 
  2117  000B                     	;# 
  2118  000C                     	;# 
  2119  000D                     	;# 
  2120  000E                     	;# 
  2121  000F                     	;# 
  2122  0010                     	;# 
  2123  0011                     	;# 
  2124  0012                     	;# 
  2125  0013                     	;# 
  2126  0014                     	;# 
  2127  0015                     	;# 
  2128  0016                     	;# 
  2129  0016                     	;# 
  2130  0017                     	;# 
  2131  0018                     	;# 
  2132  0019                     	;# 
  2133  001A                     	;# 
  2134  001B                     	;# 
  2135  001C                     	;# 
  2136  008C                     	;# 
  2137  008D                     	;# 
  2138  008E                     	;# 
  2139  008F                     	;# 
  2140  0090                     	;# 
  2141  0091                     	;# 
  2142  0092                     	;# 
  2143  0093                     	;# 
  2144  0094                     	;# 
  2145  0095                     	;# 
  2146  0096                     	;# 
  2147  0097                     	;# 
  2148  0099                     	;# 
  2149  009A                     	;# 
  2150  009B                     	;# 
  2151  009B                     	;# 
  2152  009C                     	;# 
  2153  009D                     	;# 
  2154  009E                     	;# 
  2155  010C                     	;# 
  2156  010D                     	;# 
  2157  010E                     	;# 
  2158  010F                     	;# 
  2159  0110                     	;# 
  2160  0116                     	;# 
  2161  0117                     	;# 
  2162  011D                     	;# 
  2163  018C                     	;# 
  2164  018D                     	;# 
  2165  018F                     	;# 
  2166  0190                     	;# 
  2167  0191                     	;# 
  2168  0191                     	;# 
  2169  0192                     	;# 
  2170  0193                     	;# 
  2171  0193                     	;# 
  2172  0194                     	;# 
  2173  0195                     	;# 
  2174  0196                     	;# 
  2175  0197                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  0199                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019A                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019B                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019C                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019D                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019E                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  019F                     	;# 
  2199  020D                     	;# 
  2200  020F                     	;# 
  2201  0210                     	;# 
  2202  0211                     	;# 
  2203  0211                     	;# 
  2204  0212                     	;# 
  2205  0212                     	;# 
  2206  0213                     	;# 
  2207  0213                     	;# 
  2208  0214                     	;# 
  2209  0214                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0215                     	;# 
  2213  0216                     	;# 
  2214  0216                     	;# 
  2215  0217                     	;# 
  2216  0217                     	;# 
  2217  0219                     	;# 
  2218  021A                     	;# 
  2219  021B                     	;# 
  2220  021C                     	;# 
  2221  021D                     	;# 
  2222  021E                     	;# 
  2223  021F                     	;# 
  2224  028C                     	;# 
  2225  028D                     	;# 
  2226  0291                     	;# 
  2227  0291                     	;# 
  2228  0292                     	;# 
  2229  0293                     	;# 
  2230  0298                     	;# 
  2231  0298                     	;# 
  2232  0299                     	;# 
  2233  029A                     	;# 
  2234  029D                     	;# 
  2235  029E                     	;# 
  2236  029F                     	;# 
  2237  030C                     	;# 
  2238  030D                     	;# 
  2239  0311                     	;# 
  2240  0311                     	;# 
  2241  0312                     	;# 
  2242  0313                     	;# 
  2243  0318                     	;# 
  2244  0318                     	;# 
  2245  0319                     	;# 
  2246  031A                     	;# 
  2247  031C                     	;# 
  2248  031C                     	;# 
  2249  031D                     	;# 
  2250  031E                     	;# 
  2251  038C                     	;# 
  2252  038D                     	;# 
  2253  0394                     	;# 
  2254  0395                     	;# 
  2255  0396                     	;# 
  2256  040C                     	;# 
  2257  040D                     	;# 
  2258  0411                     	;# 
  2259  0411                     	;# 
  2260  0412                     	;# 
  2261  0413                     	;# 
  2262  0414                     	;# 
  2263  0415                     	;# 
  2264  0416                     	;# 
  2265  0417                     	;# 
  2266  0418                     	;# 
  2267  0418                     	;# 
  2268  0419                     	;# 
  2269  041A                     	;# 
  2270  041B                     	;# 
  2271  041C                     	;# 
  2272  041D                     	;# 
  2273  041E                     	;# 
  2274  048D                     	;# 
  2275  0491                     	;# 
  2276  0491                     	;# 
  2277  0492                     	;# 
  2278  0492                     	;# 
  2279  0493                     	;# 
  2280  0493                     	;# 
  2281  0493                     	;# 
  2282  0494                     	;# 
  2283  0494                     	;# 
  2284  0495                     	;# 
  2285  0495                     	;# 
  2286  0496                     	;# 
  2287  0496                     	;# 
  2288  0497                     	;# 
  2289  0497                     	;# 
  2290  0595                     	;# 
  2291  0596                     	;# 
  2292  0597                     	;# 
  2293  059C                     	;# 
  2294  059D                     	;# 
  2295  059E                     	;# 
  2296  0611                     	;# 
  2297  0611                     	;# 
  2298  0612                     	;# 
  2299  0613                     	;# 
  2300  0614                     	;# 
  2301  0614                     	;# 
  2302  0615                     	;# 
  2303  0616                     	;# 
  2304  0617                     	;# 
  2305  0617                     	;# 
  2306  0618                     	;# 
  2307  0619                     	;# 
  2308  061A                     	;# 
  2309  061A                     	;# 
  2310  061B                     	;# 
  2311  061C                     	;# 
  2312  061D                     	;# 
  2313  061D                     	;# 
  2314  061E                     	;# 
  2315  061F                     	;# 
  2316  0FE4                     	;# 
  2317  0FE5                     	;# 
  2318  0FE6                     	;# 
  2319  0FE7                     	;# 
  2320  0FE8                     	;# 
  2321  0FE9                     	;# 
  2322  0FEA                     	;# 
  2323  0FEB                     	;# 
  2324  0FED                     	;# 
  2325  0FEE                     	;# 
  2326  0FEF                     	;# 
  2327  0000                     	;# 
  2328  0001                     	;# 
  2329  0002                     	;# 
  2330  0003                     	;# 
  2331  0004                     	;# 
  2332  0005                     	;# 
  2333  0006                     	;# 
  2334  0007                     	;# 
  2335  0008                     	;# 
  2336  0009                     	;# 
  2337  000A                     	;# 
  2338  000B                     	;# 
  2339  000C                     	;# 
  2340  000D                     	;# 
  2341  000E                     	;# 
  2342  000F                     	;# 
  2343  0010                     	;# 
  2344  0011                     	;# 
  2345  0012                     	;# 
  2346  0013                     	;# 
  2347  0014                     	;# 
  2348  0015                     	;# 
  2349  0016                     	;# 
  2350  0016                     	;# 
  2351  0017                     	;# 
  2352  0018                     	;# 
  2353  0019                     	;# 
  2354  001A                     	;# 
  2355  001B                     	;# 
  2356  001C                     	;# 
  2357  008C                     	;# 
  2358  008D                     	;# 
  2359  008E                     	;# 
  2360  008F                     	;# 
  2361  0090                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0094                     	;# 
  2366  0095                     	;# 
  2367  0096                     	;# 
  2368  0097                     	;# 
  2369  0099                     	;# 
  2370  009A                     	;# 
  2371  009B                     	;# 
  2372  009B                     	;# 
  2373  009C                     	;# 
  2374  009D                     	;# 
  2375  009E                     	;# 
  2376  010C                     	;# 
  2377  010D                     	;# 
  2378  010E                     	;# 
  2379  010F                     	;# 
  2380  0110                     	;# 
  2381  0116                     	;# 
  2382  0117                     	;# 
  2383  011D                     	;# 
  2384  018C                     	;# 
  2385  018D                     	;# 
  2386  018F                     	;# 
  2387  0190                     	;# 
  2388  0191                     	;# 
  2389  0191                     	;# 
  2390  0192                     	;# 
  2391  0193                     	;# 
  2392  0193                     	;# 
  2393  0194                     	;# 
  2394  0195                     	;# 
  2395  0196                     	;# 
  2396  0197                     	;# 
  2397  0199                     	;# 
  2398  0199                     	;# 
  2399  0199                     	;# 
  2400  019A                     	;# 
  2401  019A                     	;# 
  2402  019A                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019B                     	;# 
  2408  019C                     	;# 
  2409  019C                     	;# 
  2410  019C                     	;# 
  2411  019D                     	;# 
  2412  019D                     	;# 
  2413  019D                     	;# 
  2414  019E                     	;# 
  2415  019E                     	;# 
  2416  019E                     	;# 
  2417  019F                     	;# 
  2418  019F                     	;# 
  2419  019F                     	;# 
  2420  020D                     	;# 
  2421  020F                     	;# 
  2422  0210                     	;# 
  2423  0211                     	;# 
  2424  0211                     	;# 
  2425  0212                     	;# 
  2426  0212                     	;# 
  2427  0213                     	;# 
  2428  0213                     	;# 
  2429  0214                     	;# 
  2430  0214                     	;# 
  2431  0215                     	;# 
  2432  0215                     	;# 
  2433  0215                     	;# 
  2434  0216                     	;# 
  2435  0216                     	;# 
  2436  0217                     	;# 
  2437  0217                     	;# 
  2438  0219                     	;# 
  2439  021A                     	;# 
  2440  021B                     	;# 
  2441  021C                     	;# 
  2442  021D                     	;# 
  2443  021E                     	;# 
  2444  021F                     	;# 
  2445  028C                     	;# 
  2446  028D                     	;# 
  2447  0291                     	;# 
  2448  0291                     	;# 
  2449  0292                     	;# 
  2450  0293                     	;# 
  2451  0298                     	;# 
  2452  0298                     	;# 
  2453  0299                     	;# 
  2454  029A                     	;# 
  2455  029D                     	;# 
  2456  029E                     	;# 
  2457  029F                     	;# 
  2458  030C                     	;# 
  2459  030D                     	;# 
  2460  0311                     	;# 
  2461  0311                     	;# 
  2462  0312                     	;# 
  2463  0313                     	;# 
  2464  0318                     	;# 
  2465  0318                     	;# 
  2466  0319                     	;# 
  2467  031A                     	;# 
  2468  031C                     	;# 
  2469  031C                     	;# 
  2470  031D                     	;# 
  2471  031E                     	;# 
  2472  038C                     	;# 
  2473  038D                     	;# 
  2474  0394                     	;# 
  2475  0395                     	;# 
  2476  0396                     	;# 
  2477  040C                     	;# 
  2478  040D                     	;# 
  2479  0411                     	;# 
  2480  0411                     	;# 
  2481  0412                     	;# 
  2482  0413                     	;# 
  2483  0414                     	;# 
  2484  0415                     	;# 
  2485  0416                     	;# 
  2486  0417                     	;# 
  2487  0418                     	;# 
  2488  0418                     	;# 
  2489  0419                     	;# 
  2490  041A                     	;# 
  2491  041B                     	;# 
  2492  041C                     	;# 
  2493  041D                     	;# 
  2494  041E                     	;# 
  2495  048D                     	;# 
  2496  0491                     	;# 
  2497  0491                     	;# 
  2498  0492                     	;# 
  2499  0492                     	;# 
  2500  0493                     	;# 
  2501  0493                     	;# 
  2502  0493                     	;# 
  2503  0494                     	;# 
  2504  0494                     	;# 
  2505  0495                     	;# 
  2506  0495                     	;# 
  2507  0496                     	;# 
  2508  0496                     	;# 
  2509  0497                     	;# 
  2510  0497                     	;# 
  2511  0595                     	;# 
  2512  0596                     	;# 
  2513  0597                     	;# 
  2514  059C                     	;# 
  2515  059D                     	;# 
  2516  059E                     	;# 
  2517  0611                     	;# 
  2518  0611                     	;# 
  2519  0612                     	;# 
  2520  0613                     	;# 
  2521  0614                     	;# 
  2522  0614                     	;# 
  2523  0615                     	;# 
  2524  0616                     	;# 
  2525  0617                     	;# 
  2526  0617                     	;# 
  2527  0618                     	;# 
  2528  0619                     	;# 
  2529  061A                     	;# 
  2530  061A                     	;# 
  2531  061B                     	;# 
  2532  061C                     	;# 
  2533  061D                     	;# 
  2534  061D                     	;# 
  2535  061E                     	;# 
  2536  061F                     	;# 
  2537  0FE4                     	;# 
  2538  0FE5                     	;# 
  2539  0FE6                     	;# 
  2540  0FE7                     	;# 
  2541  0FE8                     	;# 
  2542  0FE9                     	;# 
  2543  0FEA                     	;# 
  2544  0FEB                     	;# 
  2545  0FED                     	;# 
  2546  0FEE                     	;# 
  2547  0FEF                     	;# 
  2548  0000                     	;# 
  2549  0001                     	;# 
  2550  0002                     	;# 
  2551  0003                     	;# 
  2552  0004                     	;# 
  2553  0005                     	;# 
  2554  0006                     	;# 
  2555  0007                     	;# 
  2556  0008                     	;# 
  2557  0009                     	;# 
  2558  000A                     	;# 
  2559  000B                     	;# 
  2560  000C                     	;# 
  2561  000D                     	;# 
  2562  000E                     	;# 
  2563  000F                     	;# 
  2564  0010                     	;# 
  2565  0011                     	;# 
  2566  0012                     	;# 
  2567  0013                     	;# 
  2568  0014                     	;# 
  2569  0015                     	;# 
  2570  0016                     	;# 
  2571  0016                     	;# 
  2572  0017                     	;# 
  2573  0018                     	;# 
  2574  0019                     	;# 
  2575  001A                     	;# 
  2576  001B                     	;# 
  2577  001C                     	;# 
  2578  008C                     	;# 
  2579  008D                     	;# 
  2580  008E                     	;# 
  2581  008F                     	;# 
  2582  0090                     	;# 
  2583  0091                     	;# 
  2584  0092                     	;# 
  2585  0093                     	;# 
  2586  0094                     	;# 
  2587  0095                     	;# 
  2588  0096                     	;# 
  2589  0097                     	;# 
  2590  0099                     	;# 
  2591  009A                     	;# 
  2592  009B                     	;# 
  2593  009B                     	;# 
  2594  009C                     	;# 
  2595  009D                     	;# 
  2596  009E                     	;# 
  2597  010C                     	;# 
  2598  010D                     	;# 
  2599  010E                     	;# 
  2600  010F                     	;# 
  2601  0110                     	;# 
  2602  0116                     	;# 
  2603  0117                     	;# 
  2604  011D                     	;# 
  2605  018C                     	;# 
  2606  018D                     	;# 
  2607  018F                     	;# 
  2608  0190                     	;# 
  2609  0191                     	;# 
  2610  0191                     	;# 
  2611  0192                     	;# 
  2612  0193                     	;# 
  2613  0193                     	;# 
  2614  0194                     	;# 
  2615  0195                     	;# 
  2616  0196                     	;# 
  2617  0197                     	;# 
  2618  0199                     	;# 
  2619  0199                     	;# 
  2620  0199                     	;# 
  2621  019A                     	;# 
  2622  019A                     	;# 
  2623  019A                     	;# 
  2624  019B                     	;# 
  2625  019B                     	;# 
  2626  019B                     	;# 
  2627  019B                     	;# 
  2628  019B                     	;# 
  2629  019C                     	;# 
  2630  019C                     	;# 
  2631  019C                     	;# 
  2632  019D                     	;# 
  2633  019D                     	;# 
  2634  019D                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019E                     	;# 
  2638  019F                     	;# 
  2639  019F                     	;# 
  2640  019F                     	;# 
  2641  020D                     	;# 
  2642  020F                     	;# 
  2643  0210                     	;# 
  2644  0211                     	;# 
  2645  0211                     	;# 
  2646  0212                     	;# 
  2647  0212                     	;# 
  2648  0213                     	;# 
  2649  0213                     	;# 
  2650  0214                     	;# 
  2651  0214                     	;# 
  2652  0215                     	;# 
  2653  0215                     	;# 
  2654  0215                     	;# 
  2655  0216                     	;# 
  2656  0216                     	;# 
  2657  0217                     	;# 
  2658  0217                     	;# 
  2659  0219                     	;# 
  2660  021A                     	;# 
  2661  021B                     	;# 
  2662  021C                     	;# 
  2663  021D                     	;# 
  2664  021E                     	;# 
  2665  021F                     	;# 
  2666  028C                     	;# 
  2667  028D                     	;# 
  2668  0291                     	;# 
  2669  0291                     	;# 
  2670  0292                     	;# 
  2671  0293                     	;# 
  2672  0298                     	;# 
  2673  0298                     	;# 
  2674  0299                     	;# 
  2675  029A                     	;# 
  2676  029D                     	;# 
  2677  029E                     	;# 
  2678  029F                     	;# 
  2679  030C                     	;# 
  2680  030D                     	;# 
  2681  0311                     	;# 
  2682  0311                     	;# 
  2683  0312                     	;# 
  2684  0313                     	;# 
  2685  0318                     	;# 
  2686  0318                     	;# 
  2687  0319                     	;# 
  2688  031A                     	;# 
  2689  031C                     	;# 
  2690  031C                     	;# 
  2691  031D                     	;# 
  2692  031E                     	;# 
  2693  038C                     	;# 
  2694  038D                     	;# 
  2695  0394                     	;# 
  2696  0395                     	;# 
  2697  0396                     	;# 
  2698  040C                     	;# 
  2699  040D                     	;# 
  2700  0411                     	;# 
  2701  0411                     	;# 
  2702  0412                     	;# 
  2703  0413                     	;# 
  2704  0414                     	;# 
  2705  0415                     	;# 
  2706  0416                     	;# 
  2707  0417                     	;# 
  2708  0418                     	;# 
  2709  0418                     	;# 
  2710  0419                     	;# 
  2711  041A                     	;# 
  2712  041B                     	;# 
  2713  041C                     	;# 
  2714  041D                     	;# 
  2715  041E                     	;# 
  2716  048D                     	;# 
  2717  0491                     	;# 
  2718  0491                     	;# 
  2719  0492                     	;# 
  2720  0492                     	;# 
  2721  0493                     	;# 
  2722  0493                     	;# 
  2723  0493                     	;# 
  2724  0494                     	;# 
  2725  0494                     	;# 
  2726  0495                     	;# 
  2727  0495                     	;# 
  2728  0496                     	;# 
  2729  0496                     	;# 
  2730  0497                     	;# 
  2731  0497                     	;# 
  2732  0595                     	;# 
  2733  0596                     	;# 
  2734  0597                     	;# 
  2735  059C                     	;# 
  2736  059D                     	;# 
  2737  059E                     	;# 
  2738  0611                     	;# 
  2739  0611                     	;# 
  2740  0612                     	;# 
  2741  0613                     	;# 
  2742  0614                     	;# 
  2743  0614                     	;# 
  2744  0615                     	;# 
  2745  0616                     	;# 
  2746  0617                     	;# 
  2747  0617                     	;# 
  2748  0618                     	;# 
  2749  0619                     	;# 
  2750  061A                     	;# 
  2751  061A                     	;# 
  2752  061B                     	;# 
  2753  061C                     	;# 
  2754  061D                     	;# 
  2755  061D                     	;# 
  2756  061E                     	;# 
  2757  061F                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769  0000                     	;# 
  2770  0001                     	;# 
  2771  0002                     	;# 
  2772  0003                     	;# 
  2773  0004                     	;# 
  2774  0005                     	;# 
  2775  0006                     	;# 
  2776  0007                     	;# 
  2777  0008                     	;# 
  2778  0009                     	;# 
  2779  000A                     	;# 
  2780  000B                     	;# 
  2781  000C                     	;# 
  2782  000D                     	;# 
  2783  000E                     	;# 
  2784  000F                     	;# 
  2785  0010                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0014                     	;# 
  2790  0015                     	;# 
  2791  0016                     	;# 
  2792  0016                     	;# 
  2793  0017                     	;# 
  2794  0018                     	;# 
  2795  0019                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001C                     	;# 
  2799  008C                     	;# 
  2800  008D                     	;# 
  2801  008E                     	;# 
  2802  008F                     	;# 
  2803  0090                     	;# 
  2804  0091                     	;# 
  2805  0092                     	;# 
  2806  0093                     	;# 
  2807  0094                     	;# 
  2808  0095                     	;# 
  2809  0096                     	;# 
  2810  0097                     	;# 
  2811  0099                     	;# 
  2812  009A                     	;# 
  2813  009B                     	;# 
  2814  009B                     	;# 
  2815  009C                     	;# 
  2816  009D                     	;# 
  2817  009E                     	;# 
  2818  010C                     	;# 
  2819  010D                     	;# 
  2820  010E                     	;# 
  2821  010F                     	;# 
  2822  0110                     	;# 
  2823  0116                     	;# 
  2824  0117                     	;# 
  2825  011D                     	;# 
  2826  018C                     	;# 
  2827  018D                     	;# 
  2828  018F                     	;# 
  2829  0190                     	;# 
  2830  0191                     	;# 
  2831  0191                     	;# 
  2832  0192                     	;# 
  2833  0193                     	;# 
  2834  0193                     	;# 
  2835  0194                     	;# 
  2836  0195                     	;# 
  2837  0196                     	;# 
  2838  0197                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  0199                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019A                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019B                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019C                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019D                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019E                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  019F                     	;# 
  2862  020D                     	;# 
  2863  020F                     	;# 
  2864  0210                     	;# 
  2865  0211                     	;# 
  2866  0211                     	;# 
  2867  0212                     	;# 
  2868  0212                     	;# 
  2869  0213                     	;# 
  2870  0213                     	;# 
  2871  0214                     	;# 
  2872  0214                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0215                     	;# 
  2876  0216                     	;# 
  2877  0216                     	;# 
  2878  0217                     	;# 
  2879  0217                     	;# 
  2880  0219                     	;# 
  2881  021A                     	;# 
  2882  021B                     	;# 
  2883  021C                     	;# 
  2884  021D                     	;# 
  2885  021E                     	;# 
  2886  021F                     	;# 
  2887  028C                     	;# 
  2888  028D                     	;# 
  2889  0291                     	;# 
  2890  0291                     	;# 
  2891  0292                     	;# 
  2892  0293                     	;# 
  2893  0298                     	;# 
  2894  0298                     	;# 
  2895  0299                     	;# 
  2896  029A                     	;# 
  2897  029D                     	;# 
  2898  029E                     	;# 
  2899  029F                     	;# 
  2900  030C                     	;# 
  2901  030D                     	;# 
  2902  0311                     	;# 
  2903  0311                     	;# 
  2904  0312                     	;# 
  2905  0313                     	;# 
  2906  0318                     	;# 
  2907  0318                     	;# 
  2908  0319                     	;# 
  2909  031A                     	;# 
  2910  031C                     	;# 
  2911  031C                     	;# 
  2912  031D                     	;# 
  2913  031E                     	;# 
  2914  038C                     	;# 
  2915  038D                     	;# 
  2916  0394                     	;# 
  2917  0395                     	;# 
  2918  0396                     	;# 
  2919  040C                     	;# 
  2920  040D                     	;# 
  2921  0411                     	;# 
  2922  0411                     	;# 
  2923  0412                     	;# 
  2924  0413                     	;# 
  2925  0414                     	;# 
  2926  0415                     	;# 
  2927  0416                     	;# 
  2928  0417                     	;# 
  2929  0418                     	;# 
  2930  0418                     	;# 
  2931  0419                     	;# 
  2932  041A                     	;# 
  2933  041B                     	;# 
  2934  041C                     	;# 
  2935  041D                     	;# 
  2936  041E                     	;# 
  2937  048D                     	;# 
  2938  0491                     	;# 
  2939  0491                     	;# 
  2940  0492                     	;# 
  2941  0492                     	;# 
  2942  0493                     	;# 
  2943  0493                     	;# 
  2944  0493                     	;# 
  2945  0494                     	;# 
  2946  0494                     	;# 
  2947  0495                     	;# 
  2948  0495                     	;# 
  2949  0496                     	;# 
  2950  0496                     	;# 
  2951  0497                     	;# 
  2952  0497                     	;# 
  2953  0595                     	;# 
  2954  0596                     	;# 
  2955  0597                     	;# 
  2956  059C                     	;# 
  2957  059D                     	;# 
  2958  059E                     	;# 
  2959  0611                     	;# 
  2960  0611                     	;# 
  2961  0612                     	;# 
  2962  0613                     	;# 
  2963  0614                     	;# 
  2964  0614                     	;# 
  2965  0615                     	;# 
  2966  0616                     	;# 
  2967  0617                     	;# 
  2968  0617                     	;# 
  2969  0618                     	;# 
  2970  0619                     	;# 
  2971  061A                     	;# 
  2972  061A                     	;# 
  2973  061B                     	;# 
  2974  061C                     	;# 
  2975  061D                     	;# 
  2976  061D                     	;# 
  2977  061E                     	;# 
  2978  061F                     	;# 
  2979  0FE4                     	;# 
  2980  0FE5                     	;# 
  2981  0FE6                     	;# 
  2982  0FE7                     	;# 
  2983  0FE8                     	;# 
  2984  0FE9                     	;# 
  2985  0FEA                     	;# 
  2986  0FEB                     	;# 
  2987  0FED                     	;# 
  2988  0FEE                     	;# 
  2989  0FEF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000D                     	;# 
  3004  000E                     	;# 
  3005  000F                     	;# 
  3006  0010                     	;# 
  3007  0011                     	;# 
  3008  0012                     	;# 
  3009  0013                     	;# 
  3010  0014                     	;# 
  3011  0015                     	;# 
  3012  0016                     	;# 
  3013  0016                     	;# 
  3014  0017                     	;# 
  3015  0018                     	;# 
  3016  0019                     	;# 
  3017  001A                     	;# 
  3018  001B                     	;# 
  3019  001C                     	;# 
  3020  008C                     	;# 
  3021  008D                     	;# 
  3022  008E                     	;# 
  3023  008F                     	;# 
  3024  0090                     	;# 
  3025  0091                     	;# 
  3026  0092                     	;# 
  3027  0093                     	;# 
  3028  0094                     	;# 
  3029  0095                     	;# 
  3030  0096                     	;# 
  3031  0097                     	;# 
  3032  0099                     	;# 
  3033  009A                     	;# 
  3034  009B                     	;# 
  3035  009B                     	;# 
  3036  009C                     	;# 
  3037  009D                     	;# 
  3038  009E                     	;# 
  3039  010C                     	;# 
  3040  010D                     	;# 
  3041  010E                     	;# 
  3042  010F                     	;# 
  3043  0110                     	;# 
  3044  0116                     	;# 
  3045  0117                     	;# 
  3046  011D                     	;# 
  3047  018C                     	;# 
  3048  018D                     	;# 
  3049  018F                     	;# 
  3050  0190                     	;# 
  3051  0191                     	;# 
  3052  0191                     	;# 
  3053  0192                     	;# 
  3054  0193                     	;# 
  3055  0193                     	;# 
  3056  0194                     	;# 
  3057  0195                     	;# 
  3058  0196                     	;# 
  3059  0197                     	;# 
  3060  0199                     	;# 
  3061  0199                     	;# 
  3062  0199                     	;# 
  3063  019A                     	;# 
  3064  019A                     	;# 
  3065  019A                     	;# 
  3066  019B                     	;# 
  3067  019B                     	;# 
  3068  019B                     	;# 
  3069  019B                     	;# 
  3070  019B                     	;# 
  3071  019C                     	;# 
  3072  019C                     	;# 
  3073  019C                     	;# 
  3074  019D                     	;# 
  3075  019D                     	;# 
  3076  019D                     	;# 
  3077  019E                     	;# 
  3078  019E                     	;# 
  3079  019E                     	;# 
  3080  019F                     	;# 
  3081  019F                     	;# 
  3082  019F                     	;# 
  3083  020D                     	;# 
  3084  020F                     	;# 
  3085  0210                     	;# 
  3086  0211                     	;# 
  3087  0211                     	;# 
  3088  0212                     	;# 
  3089  0212                     	;# 
  3090  0213                     	;# 
  3091  0213                     	;# 
  3092  0214                     	;# 
  3093  0214                     	;# 
  3094  0215                     	;# 
  3095  0215                     	;# 
  3096  0215                     	;# 
  3097  0216                     	;# 
  3098  0216                     	;# 
  3099  0217                     	;# 
  3100  0217                     	;# 
  3101  0219                     	;# 
  3102  021A                     	;# 
  3103  021B                     	;# 
  3104  021C                     	;# 
  3105  021D                     	;# 
  3106  021E                     	;# 
  3107  021F                     	;# 
  3108  028C                     	;# 
  3109  028D                     	;# 
  3110  0291                     	;# 
  3111  0291                     	;# 
  3112  0292                     	;# 
  3113  0293                     	;# 
  3114  0298                     	;# 
  3115  0298                     	;# 
  3116  0299                     	;# 
  3117  029A                     	;# 
  3118  029D                     	;# 
  3119  029E                     	;# 
  3120  029F                     	;# 
  3121  030C                     	;# 
  3122  030D                     	;# 
  3123  0311                     	;# 
  3124  0311                     	;# 
  3125  0312                     	;# 
  3126  0313                     	;# 
  3127  0318                     	;# 
  3128  0318                     	;# 
  3129  0319                     	;# 
  3130  031A                     	;# 
  3131  031C                     	;# 
  3132  031C                     	;# 
  3133  031D                     	;# 
  3134  031E                     	;# 
  3135  038C                     	;# 
  3136  038D                     	;# 
  3137  0394                     	;# 
  3138  0395                     	;# 
  3139  0396                     	;# 
  3140  040C                     	;# 
  3141  040D                     	;# 
  3142  0411                     	;# 
  3143  0411                     	;# 
  3144  0412                     	;# 
  3145  0413                     	;# 
  3146  0414                     	;# 
  3147  0415                     	;# 
  3148  0416                     	;# 
  3149  0417                     	;# 
  3150  0418                     	;# 
  3151  0418                     	;# 
  3152  0419                     	;# 
  3153  041A                     	;# 
  3154  041B                     	;# 
  3155  041C                     	;# 
  3156  041D                     	;# 
  3157  041E                     	;# 
  3158  048D                     	;# 
  3159  0491                     	;# 
  3160  0491                     	;# 
  3161  0492                     	;# 
  3162  0492                     	;# 
  3163  0493                     	;# 
  3164  0493                     	;# 
  3165  0493                     	;# 
  3166  0494                     	;# 
  3167  0494                     	;# 
  3168  0495                     	;# 
  3169  0495                     	;# 
  3170  0496                     	;# 
  3171  0496                     	;# 
  3172  0497                     	;# 
  3173  0497                     	;# 
  3174  0595                     	;# 
  3175  0596                     	;# 
  3176  0597                     	;# 
  3177  059C                     	;# 
  3178  059D                     	;# 
  3179  059E                     	;# 
  3180  0611                     	;# 
  3181  0611                     	;# 
  3182  0612                     	;# 
  3183  0613                     	;# 
  3184  0614                     	;# 
  3185  0614                     	;# 
  3186  0615                     	;# 
  3187  0616                     	;# 
  3188  0617                     	;# 
  3189  0617                     	;# 
  3190  0618                     	;# 
  3191  0619                     	;# 
  3192  061A                     	;# 
  3193  061A                     	;# 
  3194  061B                     	;# 
  3195  061C                     	;# 
  3196  061D                     	;# 
  3197  061D                     	;# 
  3198  061E                     	;# 
  3199  061F                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;_delayArray
  3211                           
  3212                           	psect	idataBANK0
  3213  25BD                     __pidataBANK0:	
  3214                           
  3215                           ;initializer for _baseline_delay_time
  3216  25BD  34D0               	retlw	208
  3217  25BE  3407               	retlw	7
  3218  25BF  3400               	retlw	0
  3219  25C0  3400               	retlw	0
  3220                           
  3221                           ;initializer for _delay_time
  3222  25C1  34D0               	retlw	208
  3223  25C2  3407               	retlw	7
  3224  25C3  3400               	retlw	0
  3225  25C4  3400               	retlw	0
  3226                           
  3227                           ;initializer for _bottom_push_state
  3228  25C5  3406               	retlw	6
  3229  25C6  3400               	retlw	0
  3230                           
  3231                           ;initializer for _knob2_prev
  3232  25C7  34D0               	retlw	208
  3233  25C8  3407               	retlw	7
  3234                           
  3235                           ;initializer for _long_press_limit
  3236  25C9  34E8               	retlw	232
  3237  25CA  3403               	retlw	3
  3238                           
  3239                           ;initializer for _top_push_state
  3240  25CB  3406               	retlw	6
  3241  25CC  3400               	retlw	0
  3242                           
  3243                           ;initializer for _blink_rate
  3244  25CD  3414               	retlw	20
  3245                           
  3246                           ;initializer for _feedback_state
  3247  25CE  34FF               	retlw	255
  3248                           
  3249                           ;initializer for _longTap_state
  3250  25CF  34FF               	retlw	255
  3251                           
  3252                           ;initializer for _num_taps
  3253  25D0  3404               	retlw	4
  3254                           
  3255                           ;initializer for _switchBypass_state
  3256  25D1  34FF               	retlw	255
  3257                           
  3258                           	psect	idataBANK2
  3259  0002                     __pidataBANK2:	
  3260                           
  3261                           ;initializer for _knob1_prev
  3262  0002  34D0               	retlw	208
  3263  0003  3407               	retlw	7
  3264                           
  3265                           	psect	idataBANK3
  3266  25D2                     __pidataBANK3:	
  3267                           
  3268                           ;initializer for _blink_delay
  3269  25D2  3464               	retlw	100
  3270  25D3  3400               	retlw	0
  3271                           
  3272                           ;initializer for _delay_time_changed
  3273  25D4  3401               	retlw	1
  3274  25D5  3400               	retlw	0
  3275                           
  3276                           ;initializer for _knob3_prev
  3277  25D6  34D0               	retlw	208
  3278  25D7  3407               	retlw	7
  3279                           
  3280                           ;initializer for _knob4_prev
  3281  25D8  34D0               	retlw	208
  3282  25D9  3407               	retlw	7
  3283                           
  3284                           ;initializer for _knob5_prev
  3285  25DA  34D0               	retlw	208
  3286  25DB  3407               	retlw	7
  3287                           
  3288                           ;initializer for _mod_delay_time
  3289  25DC  34D0               	retlw	208
  3290  25DD  3407               	retlw	7
  3291                           
  3292                           ;initializer for _tap_iteration
  3293  25DE  3401               	retlw	1
  3294  25DF  3400               	retlw	0
  3295                           
  3296                           ;initializer for _blink_state
  3297  25E0  3401               	retlw	1
  3298                           
  3299                           ;initializer for _currentBypassState
  3300  25E1  34FF               	retlw	255
  3301                           
  3302                           ;initializer for _expSwitchState
  3303  25E2  34FF               	retlw	255
  3304                           
  3305                           ;initializer for _expressModeCnst
  3306  25E3  3402               	retlw	2
  3307                           
  3308                           ;initializer for _expressionChannel
  3309  25E4  3401               	retlw	1
  3310                           
  3311                           ;initializer for _presetChannel
  3312  25E5  3401               	retlw	1
  3313                           
  3314                           ;initializer for _presetModeCnst
  3315  25E6  3401               	retlw	1
  3316                           
  3317                           ;initializer for _switchTap_state
  3318  25E7  34FF               	retlw	255
  3319                           
  3320                           ;initializer for _symmetry
  3321  25E8  34B4               	retlw	180
  3322                           
  3323                           	psect	idataBANK4
  3324  0800                     __pidataBANK4:	
  3325                           
  3326                           ;initializer for _switchBypass_up
  3327  0800  3401               	retlw	1
  3328  0801  3400               	retlw	0
  3329                           
  3330                           	psect	idataBANK7
  3331  19AB                     __pidataBANK7:	
  3332                           
  3333                           ;initializer for _modSin
  3334  19AB  3400               	retlw	0
  3335  19AC  340A               	retlw	10
  3336  19AD  3414               	retlw	20
  3337  19AE  341E               	retlw	30
  3338  19AF  3428               	retlw	40
  3339  19B0  3432               	retlw	50
  3340  19B1  343A               	retlw	58
  3341  19B2  3442               	retlw	66
  3342  19B3  344A               	retlw	74
  3343  19B4  3450               	retlw	80
  3344  19B5  3456               	retlw	86
  3345  19B6  345B               	retlw	91
  3346  19B7  345F               	retlw	95
  3347  19B8  3461               	retlw	97
  3348  19B9  3463               	retlw	99
  3349  19BA  3464               	retlw	100
  3350  19BB  3463               	retlw	99
  3351  19BC  3461               	retlw	97
  3352  19BD  345F               	retlw	95
  3353  19BE  345B               	retlw	91
  3354  19BF  3456               	retlw	86
  3355  19C0  3450               	retlw	80
  3356  19C1  344A               	retlw	74
  3357  19C2  3442               	retlw	66
  3358  19C3  343A               	retlw	58
  3359  19C4  3432               	retlw	50
  3360  19C5  3428               	retlw	40
  3361  19C6  341E               	retlw	30
  3362  19C7  3414               	retlw	20
  3363  19C8  340A               	retlw	10
  3364  19C9  3400               	retlw	0
  3365  19CA  34F6               	retlw	-10
  3366  19CB  34EC               	retlw	-20
  3367  19CC  34E2               	retlw	-30
  3368  19CD  34D8               	retlw	-40
  3369  19CE  34CE               	retlw	-50
  3370  19CF  34C6               	retlw	-58
  3371  19D0  34BE               	retlw	-66
  3372  19D1  34B6               	retlw	-74
  3373  19D2  34B0               	retlw	-80
  3374  19D3  34AA               	retlw	-86
  3375  19D4  34A5               	retlw	-91
  3376  19D5  34A1               	retlw	-95
  3377  19D6  349F               	retlw	-97
  3378  19D7  349D               	retlw	-99
  3379  19D8  349C               	retlw	-100
  3380  19D9  349D               	retlw	-99
  3381  19DA  349F               	retlw	-97
  3382  19DB  34A1               	retlw	-95
  3383  19DC  34A5               	retlw	-91
  3384  19DD  34AA               	retlw	-86
  3385  19DE  34B0               	retlw	-80
  3386  19DF  34B6               	retlw	-74
  3387  19E0  34BE               	retlw	-66
  3388  19E1  34C6               	retlw	-58
  3389  19E2  34CE               	retlw	-50
  3390  19E3  34D8               	retlw	-40
  3391  19E4  34E2               	retlw	-30
  3392  19E5  34EC               	retlw	-20
  3393  19E6  34F6               	retlw	-10
  3394  19E7  3400               	retlw	0
  3395                           
  3396                           	psect	idataBANK8
  3397  196E                     __pidataBANK8:	
  3398                           
  3399                           ;initializer for _modTri
  3400  196E  3400               	retlw	0
  3401  196F  3407               	retlw	7
  3402  1970  340D               	retlw	13
  3403  1971  3414               	retlw	20
  3404  1972  341B               	retlw	27
  3405  1973  3421               	retlw	33
  3406  1974  3428               	retlw	40
  3407  1975  342F               	retlw	47
  3408  1976  3435               	retlw	53
  3409  1977  343C               	retlw	60
  3410  1978  3443               	retlw	67
  3411  1979  3449               	retlw	73
  3412  197A  3450               	retlw	80
  3413  197B  3457               	retlw	87
  3414  197C  345D               	retlw	93
  3415  197D  3464               	retlw	100
  3416  197E  345D               	retlw	93
  3417  197F  3457               	retlw	87
  3418  1980  3450               	retlw	80
  3419  1981  3449               	retlw	73
  3420  1982  3443               	retlw	67
  3421  1983  343C               	retlw	60
  3422  1984  3435               	retlw	53
  3423  1985  342F               	retlw	47
  3424  1986  3428               	retlw	40
  3425  1987  3421               	retlw	33
  3426  1988  341B               	retlw	27
  3427  1989  3414               	retlw	20
  3428  198A  340D               	retlw	13
  3429  198B  3407               	retlw	7
  3430  198C  3400               	retlw	0
  3431  198D  34F9               	retlw	-7
  3432  198E  34F3               	retlw	-13
  3433  198F  34EC               	retlw	-20
  3434  1990  34E5               	retlw	-27
  3435  1991  34DF               	retlw	-33
  3436  1992  34D8               	retlw	-40
  3437  1993  34D1               	retlw	-47
  3438  1994  34CB               	retlw	-53
  3439  1995  34C4               	retlw	-60
  3440  1996  34BD               	retlw	-67
  3441  1997  34B7               	retlw	-73
  3442  1998  34B0               	retlw	-80
  3443  1999  34A9               	retlw	-87
  3444  199A  34A3               	retlw	-93
  3445  199B  349C               	retlw	-100
  3446  199C  34A3               	retlw	-93
  3447  199D  34A9               	retlw	-87
  3448  199E  34B0               	retlw	-80
  3449  199F  34B7               	retlw	-73
  3450  19A0  34BD               	retlw	-67
  3451  19A1  34C4               	retlw	-60
  3452  19A2  34CB               	retlw	-53
  3453  19A3  34D1               	retlw	-47
  3454  19A4  34D8               	retlw	-40
  3455  19A5  34DF               	retlw	-33
  3456  19A6  34E5               	retlw	-27
  3457  19A7  34EC               	retlw	-20
  3458  19A8  34F3               	retlw	-13
  3459  19A9  34F9               	retlw	-7
  3460  19AA  3400               	retlw	0
  3461                           
  3462                           	psect	idataBANK9
  3463  1931                     __pidataBANK9:	
  3464                           
  3465                           ;initializer for _modRevSaw
  3466  1931  3400               	retlw	0
  3467  1932  34FD               	retlw	-3
  3468  1933  34F9               	retlw	-7
  3469  1934  34F6               	retlw	-10
  3470  1935  34F3               	retlw	-13
  3471  1936  34EF               	retlw	-17
  3472  1937  34EC               	retlw	-20
  3473  1938  34E9               	retlw	-23
  3474  1939  34E5               	retlw	-27
  3475  193A  34E2               	retlw	-30
  3476  193B  34DF               	retlw	-33
  3477  193C  34DB               	retlw	-37
  3478  193D  34D8               	retlw	-40
  3479  193E  34D5               	retlw	-43
  3480  193F  34D1               	retlw	-47
  3481  1940  34CE               	retlw	-50
  3482  1941  34CB               	retlw	-53
  3483  1942  34C7               	retlw	-57
  3484  1943  34C4               	retlw	-60
  3485  1944  34C1               	retlw	-63
  3486  1945  34BD               	retlw	-67
  3487  1946  34BA               	retlw	-70
  3488  1947  34B7               	retlw	-73
  3489  1948  34B3               	retlw	-77
  3490  1949  34B0               	retlw	-80
  3491  194A  34AD               	retlw	-83
  3492  194B  34A9               	retlw	-87
  3493  194C  34A6               	retlw	-90
  3494  194D  34A3               	retlw	-93
  3495  194E  349F               	retlw	-97
  3496  194F  349C               	retlw	-100
  3497  1950  3461               	retlw	97
  3498  1951  345D               	retlw	93
  3499  1952  345A               	retlw	90
  3500  1953  3457               	retlw	87
  3501  1954  3453               	retlw	83
  3502  1955  3450               	retlw	80
  3503  1956  344D               	retlw	77
  3504  1957  3449               	retlw	73
  3505  1958  3446               	retlw	70
  3506  1959  3443               	retlw	67
  3507  195A  343F               	retlw	63
  3508  195B  343C               	retlw	60
  3509  195C  3439               	retlw	57
  3510  195D  3435               	retlw	53
  3511  195E  3432               	retlw	50
  3512  195F  342F               	retlw	47
  3513  1960  342B               	retlw	43
  3514  1961  3428               	retlw	40
  3515  1962  3425               	retlw	37
  3516  1963  3421               	retlw	33
  3517  1964  341E               	retlw	30
  3518  1965  341B               	retlw	27
  3519  1966  3417               	retlw	23
  3520  1967  3414               	retlw	20
  3521  1968  3411               	retlw	17
  3522  1969  340D               	retlw	13
  3523  196A  340A               	retlw	10
  3524  196B  3407               	retlw	7
  3525  196C  3403               	retlw	3
  3526  196D  3400               	retlw	0
  3527                           
  3528                           	psect	idataBANK10
  3529  18F4                     __pidataBANK10:	
  3530                           
  3531                           ;initializer for _modSaw
  3532  18F4  3400               	retlw	0
  3533  18F5  3403               	retlw	3
  3534  18F6  3407               	retlw	7
  3535  18F7  340A               	retlw	10
  3536  18F8  340D               	retlw	13
  3537  18F9  3411               	retlw	17
  3538  18FA  3414               	retlw	20
  3539  18FB  3417               	retlw	23
  3540  18FC  341B               	retlw	27
  3541  18FD  341E               	retlw	30
  3542  18FE  3421               	retlw	33
  3543  18FF  3425               	retlw	37
  3544  1900  3428               	retlw	40
  3545  1901  342B               	retlw	43
  3546  1902  342F               	retlw	47
  3547  1903  3432               	retlw	50
  3548  1904  3435               	retlw	53
  3549  1905  3439               	retlw	57
  3550  1906  343C               	retlw	60
  3551  1907  343F               	retlw	63
  3552  1908  3443               	retlw	67
  3553  1909  3446               	retlw	70
  3554  190A  3449               	retlw	73
  3555  190B  344D               	retlw	77
  3556  190C  3450               	retlw	80
  3557  190D  3453               	retlw	83
  3558  190E  3457               	retlw	87
  3559  190F  345A               	retlw	90
  3560  1910  345D               	retlw	93
  3561  1911  3461               	retlw	97
  3562  1912  3464               	retlw	100
  3563  1913  349F               	retlw	-97
  3564  1914  34A3               	retlw	-93
  3565  1915  34A6               	retlw	-90
  3566  1916  34A9               	retlw	-87
  3567  1917  34AD               	retlw	-83
  3568  1918  34B0               	retlw	-80
  3569  1919  34B3               	retlw	-77
  3570  191A  34B7               	retlw	-73
  3571  191B  34BA               	retlw	-70
  3572  191C  34BD               	retlw	-67
  3573  191D  34C1               	retlw	-63
  3574  191E  34C4               	retlw	-60
  3575  191F  34C7               	retlw	-57
  3576  1920  34CB               	retlw	-53
  3577  1921  34CE               	retlw	-50
  3578  1922  34D1               	retlw	-47
  3579  1923  34D5               	retlw	-43
  3580  1924  34D8               	retlw	-40
  3581  1925  34DB               	retlw	-37
  3582  1926  34DF               	retlw	-33
  3583  1927  34E2               	retlw	-30
  3584  1928  34E5               	retlw	-27
  3585  1929  34E9               	retlw	-23
  3586  192A  34EC               	retlw	-20
  3587  192B  34EF               	retlw	-17
  3588  192C  34F3               	retlw	-13
  3589  192D  34F6               	retlw	-10
  3590  192E  34F9               	retlw	-7
  3591  192F  34FD               	retlw	-3
  3592  1930  3400               	retlw	0
  3593                           
  3594                           	psect	idataBIGRAM
  3595  0DF8                     __pidataBIGRAM:	
  3596                           
  3597                           ;initializer for _delayArray
  3598  0DF8  3422               	retlw	34
  3599  0DF9  3408               	retlw	8
  3600  0DFA  34FC               	retlw	252
  3601  0DFB  3407               	retlw	7
  3602  0DFC  34D8               	retlw	216
  3603  0DFD  3407               	retlw	7
  3604  0DFE  34B5               	retlw	181
  3605  0DFF  3407               	retlw	7
  3606  0E00  3493               	retlw	147
  3607  0E01  3407               	retlw	7
  3608  0E02  3472               	retlw	114
  3609  0E03  3407               	retlw	7
  3610  0E04  3452               	retlw	82
  3611  0E05  3407               	retlw	7
  3612  0E06  3434               	retlw	52
  3613  0E07  3407               	retlw	7
  3614  0E08  3416               	retlw	22
  3615  0E09  3407               	retlw	7
  3616  0E0A  34F9               	retlw	249
  3617  0E0B  3406               	retlw	6
  3618  0E0C  34DD               	retlw	221
  3619  0E0D  3406               	retlw	6
  3620  0E0E  34C2               	retlw	194
  3621  0E0F  3406               	retlw	6
  3622  0E10  34A8               	retlw	168
  3623  0E11  3406               	retlw	6
  3624  0E12  348F               	retlw	143
  3625  0E13  3406               	retlw	6
  3626  0E14  3476               	retlw	118
  3627  0E15  3406               	retlw	6
  3628  0E16  345E               	retlw	94
  3629  0E17  3406               	retlw	6
  3630  0E18  3447               	retlw	71
  3631  0E19  3406               	retlw	6
  3632  0E1A  3430               	retlw	48
  3633  0E1B  3406               	retlw	6
  3634  0E1C  341A               	retlw	26
  3635  0E1D  3406               	retlw	6
  3636  0E1E  3405               	retlw	5
  3637  0E1F  3406               	retlw	6
  3638  0E20  34F0               	retlw	240
  3639  0E21  3405               	retlw	5
  3640  0E22  34DC               	retlw	220
  3641  0E23  3405               	retlw	5
  3642  0E24  34C8               	retlw	200
  3643  0E25  3405               	retlw	5
  3644  0E26  34B5               	retlw	181
  3645  0E27  3405               	retlw	5
  3646  0E28  34A3               	retlw	163
  3647  0E29  3405               	retlw	5
  3648  0E2A  3490               	retlw	144
  3649  0E2B  3405               	retlw	5
  3650  0E2C  347F               	retlw	127
  3651  0E2D  3405               	retlw	5
  3652  0E2E  346D               	retlw	109
  3653  0E2F  3405               	retlw	5
  3654  0E30  345C               	retlw	92
  3655  0E31  3405               	retlw	5
  3656  0E32  344C               	retlw	76
  3657  0E33  3405               	retlw	5
  3658  0E34  343C               	retlw	60
  3659  0E35  3405               	retlw	5
  3660  0E36  342C               	retlw	44
  3661  0E37  3405               	retlw	5
  3662  0E38  341D               	retlw	29
  3663  0E39  3405               	retlw	5
  3664  0E3A  340E               	retlw	14
  3665  0E3B  3405               	retlw	5
  3666  0E3C  34FF               	retlw	255
  3667  0E3D  3404               	retlw	4
  3668  0E3E  34F1               	retlw	241
  3669  0E3F  3404               	retlw	4
  3670  0E40  34E2               	retlw	226
  3671  0E41  3404               	retlw	4
  3672  0E42  34D5               	retlw	213
  3673  0E43  3404               	retlw	4
  3674  0E44  34C7               	retlw	199
  3675  0E45  3404               	retlw	4
  3676  0E46  34BA               	retlw	186
  3677  0E47  3404               	retlw	4
  3678  0E48  34AD               	retlw	173
  3679  0E49  3404               	retlw	4
  3680  0E4A  34A1               	retlw	161
  3681  0E4B  3404               	retlw	4
  3682  0E4C  3494               	retlw	148
  3683  0E4D  3404               	retlw	4
  3684  0E4E  3488               	retlw	136
  3685  0E4F  3404               	retlw	4
  3686  0E50  347D               	retlw	125
  3687  0E51  3404               	retlw	4
  3688  0E52  3471               	retlw	113
  3689  0E53  3404               	retlw	4
  3690  0E54  3466               	retlw	102
  3691  0E55  3404               	retlw	4
  3692  0E56  345A               	retlw	90
  3693  0E57  3404               	retlw	4
  3694  0E58  3450               	retlw	80
  3695  0E59  3404               	retlw	4
  3696  0E5A  3445               	retlw	69
  3697  0E5B  3404               	retlw	4
  3698  0E5C  343A               	retlw	58
  3699  0E5D  3404               	retlw	4
  3700  0E5E  3430               	retlw	48
  3701  0E5F  3404               	retlw	4
  3702  0E60  3426               	retlw	38
  3703  0E61  3404               	retlw	4
  3704  0E62  341C               	retlw	28
  3705  0E63  3404               	retlw	4
  3706  0E64  3412               	retlw	18
  3707  0E65  3404               	retlw	4
  3708  0E66  3409               	retlw	9
  3709  0E67  3404               	retlw	4
  3710  0E68  34FF               	retlw	255
  3711  0E69  3403               	retlw	3
  3712  0E6A  34F6               	retlw	246
  3713  0E6B  3403               	retlw	3
  3714  0E6C  34ED               	retlw	237
  3715  0E6D  3403               	retlw	3
  3716  0E6E  34E4               	retlw	228
  3717  0E6F  3403               	retlw	3
  3718  0E70  34DC               	retlw	220
  3719  0E71  3403               	retlw	3
  3720  0E72  34D3               	retlw	211
  3721  0E73  3403               	retlw	3
  3722  0E74  34CB               	retlw	203
  3723  0E75  3403               	retlw	3
  3724  0E76  34C2               	retlw	194
  3725  0E77  3403               	retlw	3
  3726  0E78  34BA               	retlw	186
  3727  0E79  3403               	retlw	3
  3728  0E7A  34B2               	retlw	178
  3729  0E7B  3403               	retlw	3
  3730  0E7C  34AA               	retlw	170
  3731  0E7D  3403               	retlw	3
  3732  0E7E  34A2               	retlw	162
  3733  0E7F  3403               	retlw	3
  3734  0E80  349B               	retlw	155
  3735  0E81  3403               	retlw	3
  3736  0E82  3493               	retlw	147
  3737  0E83  3403               	retlw	3
  3738  0E84  348C               	retlw	140
  3739  0E85  3403               	retlw	3
  3740  0E86  3485               	retlw	133
  3741  0E87  3403               	retlw	3
  3742  0E88  347E               	retlw	126
  3743  0E89  3403               	retlw	3
  3744  0E8A  3477               	retlw	119
  3745  0E8B  3403               	retlw	3
  3746  0E8C  3470               	retlw	112
  3747  0E8D  3403               	retlw	3
  3748  0E8E  3469               	retlw	105
  3749  0E8F  3403               	retlw	3
  3750  0E90  3462               	retlw	98
  3751  0E91  3403               	retlw	3
  3752  0E92  345C               	retlw	92
  3753  0E93  3403               	retlw	3
  3754  0E94  3455               	retlw	85
  3755  0E95  3403               	retlw	3
  3756  0E96  344F               	retlw	79
  3757  0E97  3403               	retlw	3
  3758  0E98  3448               	retlw	72
  3759  0E99  3403               	retlw	3
  3760  0E9A  3442               	retlw	66
  3761  0E9B  3403               	retlw	3
  3762  0E9C  343C               	retlw	60
  3763  0E9D  3403               	retlw	3
  3764  0E9E  3436               	retlw	54
  3765  0E9F  3403               	retlw	3
  3766  0EA0  3430               	retlw	48
  3767  0EA1  3403               	retlw	3
  3768  0EA2  342A               	retlw	42
  3769  0EA3  3403               	retlw	3
  3770  0EA4  3424               	retlw	36
  3771  0EA5  3403               	retlw	3
  3772  0EA6  341F               	retlw	31
  3773  0EA7  3403               	retlw	3
  3774  0EA8  3419               	retlw	25
  3775  0EA9  3403               	retlw	3
  3776  0EAA  3413               	retlw	19
  3777  0EAB  3403               	retlw	3
  3778  0EAC  340E               	retlw	14
  3779  0EAD  3403               	retlw	3
  3780  0EAE  3409               	retlw	9
  3781  0EAF  3403               	retlw	3
  3782  0EB0  3403               	retlw	3
  3783  0EB1  3403               	retlw	3
  3784  0EB2  34FE               	retlw	254
  3785  0EB3  3402               	retlw	2
  3786  0EB4  34F9               	retlw	249
  3787  0EB5  3402               	retlw	2
  3788  0EB6  34F4               	retlw	244
  3789  0EB7  3402               	retlw	2
  3790  0EB8  34EF               	retlw	239
  3791  0EB9  3402               	retlw	2
  3792  0EBA  34EA               	retlw	234
  3793  0EBB  3402               	retlw	2
  3794  0EBC  34E5               	retlw	229
  3795  0EBD  3402               	retlw	2
  3796  0EBE  34E0               	retlw	224
  3797  0EBF  3402               	retlw	2
  3798  0EC0  34DB               	retlw	219
  3799  0EC1  3402               	retlw	2
  3800  0EC2  34D7               	retlw	215
  3801  0EC3  3402               	retlw	2
  3802  0EC4  34D2               	retlw	210
  3803  0EC5  3402               	retlw	2
  3804  0EC6  34CD               	retlw	205
  3805  0EC7  3402               	retlw	2
  3806  0EC8  34C9               	retlw	201
  3807  0EC9  3402               	retlw	2
  3808  0ECA  34C4               	retlw	196
  3809  0ECB  3402               	retlw	2
  3810  0ECC  34C0               	retlw	192
  3811  0ECD  3402               	retlw	2
  3812  0ECE  34BC               	retlw	188
  3813  0ECF  3402               	retlw	2
  3814  0ED0  34B7               	retlw	183
  3815  0ED1  3402               	retlw	2
  3816  0ED2  34B3               	retlw	179
  3817  0ED3  3402               	retlw	2
  3818  0ED4  34AF               	retlw	175
  3819  0ED5  3402               	retlw	2
  3820  0ED6  34AB               	retlw	171
  3821  0ED7  3402               	retlw	2
  3822  0ED8  34A6               	retlw	166
  3823  0ED9  3402               	retlw	2
  3824  0EDA  34A2               	retlw	162
  3825  0EDB  3402               	retlw	2
  3826  0EDC  349E               	retlw	158
  3827  0EDD  3402               	retlw	2
  3828  0EDE  349A               	retlw	154
  3829  0EDF  3402               	retlw	2
  3830  0EE0  3497               	retlw	151
  3831  0EE1  3402               	retlw	2
  3832  0EE2  3493               	retlw	147
  3833  0EE3  3402               	retlw	2
  3834  0EE4  348F               	retlw	143
  3835  0EE5  3402               	retlw	2
  3836  0EE6  348B               	retlw	139
  3837  0EE7  3402               	retlw	2
  3838  0EE8  3487               	retlw	135
  3839  0EE9  3402               	retlw	2
  3840  0EEA  3484               	retlw	132
  3841  0EEB  3402               	retlw	2
  3842  0EEC  3480               	retlw	128
  3843  0EED  3402               	retlw	2
  3844  0EEE  347C               	retlw	124
  3845  0EEF  3402               	retlw	2
  3846  0EF0  3479               	retlw	121
  3847  0EF1  3402               	retlw	2
  3848  0EF2  3475               	retlw	117
  3849  0EF3  3402               	retlw	2
  3850  0EF4  3472               	retlw	114
  3851  0EF5  3402               	retlw	2
  3852  0EF6  346E               	retlw	110
  3853  0EF7  3402               	retlw	2
  3854  0EF8  346B               	retlw	107
  3855  0EF9  3402               	retlw	2
  3856  0EFA  3467               	retlw	103
  3857  0EFB  3402               	retlw	2
  3858  0EFC  3464               	retlw	100
  3859  0EFD  3402               	retlw	2
  3860  0EFE  3461               	retlw	97
  3861  0EFF  3402               	retlw	2
  3862  0F00  345E               	retlw	94
  3863  0F01  3402               	retlw	2
  3864  0F02  345A               	retlw	90
  3865  0F03  3402               	retlw	2
  3866  0F04  3457               	retlw	87
  3867  0F05  3402               	retlw	2
  3868  0F06  3454               	retlw	84
  3869  0F07  3402               	retlw	2
  3870  0F08  3451               	retlw	81
  3871  0F09  3402               	retlw	2
  3872  0F0A  344E               	retlw	78
  3873  0F0B  3402               	retlw	2
  3874  0F0C  344B               	retlw	75
  3875  0F0D  3402               	retlw	2
  3876  0F0E  3448               	retlw	72
  3877  0F0F  3402               	retlw	2
  3878  0F10  3445               	retlw	69
  3879  0F11  3402               	retlw	2
  3880  0F12  3442               	retlw	66
  3881  0F13  3402               	retlw	2
  3882  0F14  343F               	retlw	63
  3883  0F15  3402               	retlw	2
  3884  0F16  343C               	retlw	60
  3885  0F17  3402               	retlw	2
  3886  0F18  3439               	retlw	57
  3887  0F19  3402               	retlw	2
  3888  0F1A  3436               	retlw	54
  3889  0F1B  3402               	retlw	2
  3890  0F1C  3433               	retlw	51
  3891  0F1D  3402               	retlw	2
  3892  0F1E  3430               	retlw	48
  3893  0F1F  3402               	retlw	2
  3894  0F20  342E               	retlw	46
  3895  0F21  3402               	retlw	2
  3896  0F22  342B               	retlw	43
  3897  0F23  3402               	retlw	2
  3898  0F24  3428               	retlw	40
  3899  0F25  3402               	retlw	2
  3900  0F26  3425               	retlw	37
  3901  0F27  3402               	retlw	2
  3902  0F28  3423               	retlw	35
  3903  0F29  3402               	retlw	2
  3904  0F2A  3420               	retlw	32
  3905  0F2B  3402               	retlw	2
  3906  0F2C  341E               	retlw	30
  3907  0F2D  3402               	retlw	2
  3908  0F2E  341B               	retlw	27
  3909  0F2F  3402               	retlw	2
  3910  0F30  3418               	retlw	24
  3911  0F31  3402               	retlw	2
  3912  0F32  3416               	retlw	22
  3913  0F33  3402               	retlw	2
  3914  0F34  3413               	retlw	19
  3915  0F35  3402               	retlw	2
  3916  0F36  3411               	retlw	17
  3917  0F37  3402               	retlw	2
  3918  0F38  340E               	retlw	14
  3919  0F39  3402               	retlw	2
  3920  0F3A  340C               	retlw	12
  3921  0F3B  3402               	retlw	2
  3922  0F3C  340A               	retlw	10
  3923  0F3D  3402               	retlw	2
  3924  0F3E  3407               	retlw	7
  3925  0F3F  3402               	retlw	2
  3926  0F40  3405               	retlw	5
  3927  0F41  3402               	retlw	2
  3928  0F42  3402               	retlw	2
  3929  0F43  3402               	retlw	2
  3930  0F44  3400               	retlw	0
  3931  0F45  3402               	retlw	2
  3932  0F46  34FE               	retlw	254
  3933  0F47  3401               	retlw	1
  3934  0F48  34FB               	retlw	251
  3935  0F49  3401               	retlw	1
  3936  0F4A  34F9               	retlw	249
  3937  0F4B  3401               	retlw	1
  3938  0F4C  34F7               	retlw	247
  3939  0F4D  3401               	retlw	1
  3940  0F4E  34F5               	retlw	245
  3941  0F4F  3401               	retlw	1
  3942  0F50  34F2               	retlw	242
  3943  0F51  3401               	retlw	1
  3944  0F52  34F0               	retlw	240
  3945  0F53  3401               	retlw	1
  3946  0F54  34EE               	retlw	238
  3947  0F55  3401               	retlw	1
  3948  0F56  34EC               	retlw	236
  3949  0F57  3401               	retlw	1
  3950  0F58  34EA               	retlw	234
  3951  0F59  3401               	retlw	1
  3952  0F5A  34E8               	retlw	232
  3953  0F5B  3401               	retlw	1
  3954  0F5C  34E6               	retlw	230
  3955  0F5D  3401               	retlw	1
  3956  0F5E  34E3               	retlw	227
  3957  0F5F  3401               	retlw	1
  3958  0F60  34E1               	retlw	225
  3959  0F61  3401               	retlw	1
  3960  0F62  34DF               	retlw	223
  3961  0F63  3401               	retlw	1
  3962  0F64  34DD               	retlw	221
  3963  0F65  3401               	retlw	1
  3964  0F66  34DB               	retlw	219
  3965  0F67  3401               	retlw	1
  3966  0F68  34D9               	retlw	217
  3967  0F69  3401               	retlw	1
  3968  0F6A  34D7               	retlw	215
  3969  0F6B  3401               	retlw	1
  3970  0F6C  34D5               	retlw	213
  3971  0F6D  3401               	retlw	1
  3972  0F6E  34D3               	retlw	211
  3973  0F6F  3401               	retlw	1
  3974  0F70  34D2               	retlw	210
  3975  0F71  3401               	retlw	1
  3976  0F72  34D0               	retlw	208
  3977  0F73  3401               	retlw	1
  3978  0F74  34CE               	retlw	206
  3979  0F75  3401               	retlw	1
  3980  0F76  34CC               	retlw	204
  3981  0F77  3401               	retlw	1
  3982  0F78  34CA               	retlw	202
  3983  0F79  3401               	retlw	1
  3984  0F7A  34C8               	retlw	200
  3985  0F7B  3401               	retlw	1
  3986  0F7C  34C6               	retlw	198
  3987  0F7D  3401               	retlw	1
  3988  0F7E  34C4               	retlw	196
  3989  0F7F  3401               	retlw	1
  3990  0F80  34C3               	retlw	195
  3991  0F81  3401               	retlw	1
  3992  0F82  34C1               	retlw	193
  3993  0F83  3401               	retlw	1
  3994  0F84  34BF               	retlw	191
  3995  0F85  3401               	retlw	1
  3996  0F86  34BD               	retlw	189
  3997  0F87  3401               	retlw	1
  3998  0F88  34BC               	retlw	188
  3999  0F89  3401               	retlw	1
  4000  0F8A  34BA               	retlw	186
  4001  0F8B  3401               	retlw	1
  4002  0F8C  34B8               	retlw	184
  4003  0F8D  3401               	retlw	1
  4004  0F8E  34B6               	retlw	182
  4005  0F8F  3401               	retlw	1
  4006  0F90  34B5               	retlw	181
  4007  0F91  3401               	retlw	1
  4008  0F92  34B3               	retlw	179
  4009  0F93  3401               	retlw	1
  4010  0F94  34B1               	retlw	177
  4011  0F95  3401               	retlw	1
  4012  0F96  34B0               	retlw	176
  4013  0F97  3401               	retlw	1
  4014  0F98  34AE               	retlw	174
  4015  0F99  3401               	retlw	1
  4016  0F9A  34AC               	retlw	172
  4017  0F9B  3401               	retlw	1
  4018  0F9C  34AB               	retlw	171
  4019  0F9D  3401               	retlw	1
  4020  0F9E  34A9               	retlw	169
  4021  0F9F  3401               	retlw	1
  4022  0FA0  34A8               	retlw	168
  4023  0FA1  3401               	retlw	1
  4024  0FA2  34A6               	retlw	166
  4025  0FA3  3401               	retlw	1
  4026  0FA4  34A4               	retlw	164
  4027  0FA5  3401               	retlw	1
  4028  0FA6  34A3               	retlw	163
  4029  0FA7  3401               	retlw	1
  4030  0FA8  34A1               	retlw	161
  4031  0FA9  3401               	retlw	1
  4032  0FAA  34A0               	retlw	160
  4033  0FAB  3401               	retlw	1
  4034  0FAC  349E               	retlw	158
  4035  0FAD  3401               	retlw	1
  4036  0FAE  349D               	retlw	157
  4037  0FAF  3401               	retlw	1
  4038  0FB0  349B               	retlw	155
  4039  0FB1  3401               	retlw	1
  4040  0FB2  349A               	retlw	154
  4041  0FB3  3401               	retlw	1
  4042  0FB4  3498               	retlw	152
  4043  0FB5  3401               	retlw	1
  4044  0FB6  3497               	retlw	151
  4045  0FB7  3401               	retlw	1
  4046  0FB8  3495               	retlw	149
  4047  0FB9  3401               	retlw	1
  4048  0FBA  3494               	retlw	148
  4049  0FBB  3401               	retlw	1
  4050  0FBC  3492               	retlw	146
  4051  0FBD  3401               	retlw	1
  4052  0FBE  3491               	retlw	145
  4053  0FBF  3401               	retlw	1
  4054  0FC0  3490               	retlw	144
  4055  0FC1  3401               	retlw	1
  4056  0FC2  348E               	retlw	142
  4057  0FC3  3401               	retlw	1
  4058  0FC4  348D               	retlw	141
  4059  0FC5  3401               	retlw	1
  4060  0FC6  348B               	retlw	139
  4061  0FC7  3401               	retlw	1
  4062  0FC8  348A               	retlw	138
  4063  0FC9  3401               	retlw	1
  4064  0FCA  3489               	retlw	137
  4065  0FCB  3401               	retlw	1
  4066  0FCC  3487               	retlw	135
  4067  0FCD  3401               	retlw	1
  4068  0FCE  3486               	retlw	134
  4069  0FCF  3401               	retlw	1
  4070  0FD0  3485               	retlw	133
  4071  0FD1  3401               	retlw	1
  4072  0FD2  3483               	retlw	131
  4073  0FD3  3401               	retlw	1
  4074  0FD4  3482               	retlw	130
  4075  0FD5  3401               	retlw	1
  4076  0FD6  3481               	retlw	129
  4077  0FD7  3401               	retlw	1
  4078  0FD8  347F               	retlw	127
  4079  0FD9  3401               	retlw	1
  4080  0FDA  347E               	retlw	126
  4081  0FDB  3401               	retlw	1
  4082  0FDC  347D               	retlw	125
  4083  0FDD  3401               	retlw	1
  4084  0FDE  347B               	retlw	123
  4085  0FDF  3401               	retlw	1
  4086  0FE0  347A               	retlw	122
  4087  0FE1  3401               	retlw	1
  4088  0FE2  3479               	retlw	121
  4089  0FE3  3401               	retlw	1
  4090  0FE4  3478               	retlw	120
  4091  0FE5  3401               	retlw	1
  4092  0FE6  3476               	retlw	118
  4093  0FE7  3401               	retlw	1
  4094  0FE8  3475               	retlw	117
  4095  0FE9  3401               	retlw	1
  4096  0FEA  3474               	retlw	116
  4097  0FEB  3401               	retlw	1
  4098  0FEC  3473               	retlw	115
  4099  0FED  3401               	retlw	1
  4100  0FEE  3471               	retlw	113
  4101  0FEF  3401               	retlw	1
  4102  0FF0  3470               	retlw	112
  4103  0FF1  3401               	retlw	1
  4104  0FF2  346F               	retlw	111
  4105  0FF3  3401               	retlw	1
  4106  0FF4  346E               	retlw	110
  4107  0FF5  3401               	retlw	1
  4108  0FF6  3400               	retlw	0
  4109  0FF7  3400               	retlw	0
  4110  0FF8  3400               	retlw	0
  4111  0FF9  3400               	retlw	0
  4112  0FFA  3400               	retlw	0
  4113  0FFB  3400               	retlw	0
  4114  0FFC  3400               	retlw	0
  4115  0FFD  3400               	retlw	0
  4116  0FFE  3400               	retlw	0
  4117  0FFF  3400               	retlw	0
  4118                           
  4119                           	psect	stringtext
  4120  2000                     __pstringtext:	
  4121  2000                     exp@coeff:	
  4122  2000  3400               	retlw	0
  4123  2001  3480               	retlw	128
  4124  2002  343F               	retlw	63
  4125  2003  3472               	retlw	114
  4126  2004  3431               	retlw	49
  4127  2005  343F               	retlw	63
  4128  2006  34FE               	retlw	254
  4129  2007  3475               	retlw	117
  4130  2008  343E               	retlw	62
  4131  2009  3458               	retlw	88
  4132  200A  3463               	retlw	99
  4133  200B  343D               	retlw	61
  4134  200C  3495               	retlw	149
  4135  200D  341D               	retlw	29
  4136  200E  343C               	retlw	60
  4137  200F  34C5               	retlw	197
  4138  2010  34AE               	retlw	174
  4139  2011  343A               	retlw	58
  4140  2012  3479               	retlw	121
  4141  2013  3421               	retlw	33
  4142  2014  3439               	retlw	57
  4143  2015  3494               	retlw	148
  4144  2016  3480               	retlw	128
  4145  2017  3437               	retlw	55
  4146  2018  3493               	retlw	147
  4147  2019  34A7               	retlw	167
  4148  201A  3435               	retlw	53
  4149  201B  3456               	retlw	86
  4150  201C  3415               	retlw	21
  4151  201D  3434               	retlw	52
  4152  201E                     __end_ofexp@coeff:	
  4153  201E                     log@coeff:	
  4154  201E  3400               	retlw	0
  4155  201F  3400               	retlw	0
  4156  2020  3400               	retlw	0
  4157  2021  3400               	retlw	0
  4158  2022  3480               	retlw	128
  4159  2023  343F               	retlw	63
  4160  2024  34F0               	retlw	240
  4161  2025  34FF               	retlw	255
  4162  2026  34BE               	retlw	190
  4163  2027  34E2               	retlw	226
  4164  2028  34A9               	retlw	169
  4165  2029  343E               	retlw	62
  4166  202A  3483               	retlw	131
  4167  202B  3476               	retlw	118
  4168  202C  34BE               	retlw	190
  4169  202D  34AE               	retlw	174
  4170  202E  342B               	retlw	43
  4171  202F  343E               	retlw	62
  4172  2030  343C               	retlw	60
  4173  2031  34C3               	retlw	195
  4174  2032  34BD               	retlw	189
  4175  2033  34D2               	retlw	210
  4176  2034  3413               	retlw	19
  4177  2035  343D               	retlw	61
  4178  2036  3478               	retlw	120
  4179  2037  34D3               	retlw	211
  4180  2038  34BB               	retlw	187
  4181  2039                     __end_oflog@coeff:	
  4182                           
  4183                           	psect	nvCOMMON
  4184  007D                     __pnvCOMMON:	
  4185  007D                     _UQFront:	
  4186  007D                     	ds	1
  4187                           
  4188                           	psect	nvBANK0
  4189  0069                     __pnvBANK0:	
  4190  0069                     _UQEnd:	
  4191  0069                     	ds	1
  4192  000B                     _INTCONbits	set	11
  4193  0011                     _PIR1bits	set	17
  4194  000C                     _PORTAbits	set	12
  4195  000E                     _PORTCbits	set	14
  4196  000F                     _PORTDbits	set	15
  4197  0010                     _PORTEbits	set	16
  4198  001B                     _PR2	set	27
  4199  001C                     _T2CONbits	set	28
  4200  005F                     _GIE	set	95
  4201  005E                     _PEIE	set	94
  4202  0069                     _RB1	set	105
  4203  009D                     _ADCON0bits	set	157
  4204  009E                     _ADCON1bits	set	158
  4205  009C                     _ADRESH	set	156
  4206  009B                     _ADRESL	set	155
  4207  0095                     _OPTION_REGbits	set	149
  4208  0099                     _OSCCONbits	set	153
  4209  008D                     _TRISBbits	set	141
  4210  008E                     _TRISCbits	set	142
  4211  008F                     _TRISDbits	set	143
  4212  0090                     _TRISEbits	set	144
  4213  048D                     _RCIE	set	1165
  4214  011D                     _APFCONbits	set	285
  4215  010D                     _LATBbits	set	269
  4216  010F                     _LATDbits	set	271
  4217  0190                     _ANSELEbits	set	400
  4218  0192                     _PMADRH	set	402
  4219  0191                     _PMADRL	set	401
  4220  0195                     _PMCON1bits	set	405
  4221  0196                     _PMCON2	set	406
  4222  0194                     _PMDATH	set	404
  4223  0193                     _PMDATL	set	403
  4224  0199                     _RCREG	set	409
  4225  019D                     _RCSTAbits	set	413
  4226  019B                     _SPBRG	set	411
  4227  019A                     _TXREG	set	410
  4228  019E                     _TXSTAbits	set	414
  4229  0291                     _CCPR1	set	657
  4230  0298                     _CCPR2	set	664
  4231  0293                     _CCP1CONbits	set	659
  4232  029A                     _CCP2CONbits	set	666
  4233  029D                     _CCPTMRS0	set	669
  4234  029E                     _CCPTMRS1	set	670
  4235  029F                     _CCPTMRS2	set	671
  4236  0311                     _CCPR3	set	785
  4237  0318                     _CCPR4	set	792
  4238  031C                     _CCPR5	set	796
  4239  0313                     _CCP3CONbits	set	787
  4240  031A                     _CCP4CONbits	set	794
  4241  031E                     _CCP5CONbits	set	798
  4242  030C                     _TRISFbits	set	780
  4243  030D                     _TRISGbits	set	781
  4244  038C                     _LATFbits	set	908
  4245  038D                     _LATGbits	set	909
  4246  040C                     _ANSELFbits	set	1036
  4247  061A                     _CCPR9	set	1562
  4248  061F                     _CCP10CONbits	set	1567
  4249  0613                     _CCP6CONbits	set	1555
  4250  0616                     _CCP7CONbits	set	1558
  4251  0619                     _CCP8CONbits	set	1561
  4252  061C                     _CCP9CONbits	set	1564
  4253                           
  4254                           ; #config settings
  4255  0000                     
  4256                           	psect	cinit
  4257  0321                     start_initialization:	
  4258  0321                     __initialization:		;BIGRAM
  4259                           
  4260                           ; Clear objects allocated to BANK0
  4261  0321  305A               	movlw	low __pbssBANK0
  4262  0322  0084               	movwf	4
  4263  0323  3000               	movlw	high __pbssBANK0
  4264  0324  0085               	movwf	5
  4265  0325  300F               	movlw	15
  4266  0326  00FE               	movwf	btemp
  4267  0327  3000               	movlw	0
  4268  0328  00FF               	movwf	btemp+1
  4269  0329  31A5  257B  3183   	fcall	clear_ram0
  4270                           
  4271                           ; Clear objects allocated to BANK3
  4272  032C  30A0               	movlw	low __pbssBANK3
  4273  032D  0084               	movwf	4
  4274  032E  3001               	movlw	high __pbssBANK3
  4275  032F  0085               	movwf	5
  4276  0330  302A               	movlw	42
  4277  0331  00FE               	movwf	btemp
  4278  0332  3000               	movlw	0
  4279  0333  00FF               	movwf	btemp+1
  4280  0334  31A5  257B  3183   	fcall	clear_ram0
  4281                           
  4282                           ; Clear objects allocated to BANK4
  4283  0337  3020               	movlw	low __pbssBANK4
  4284  0338  0084               	movwf	4
  4285  0339  3002               	movlw	high __pbssBANK4
  4286  033A  0085               	movwf	5
  4287  033B  3039               	movlw	57
  4288  033C  00FE               	movwf	btemp
  4289  033D  3000               	movlw	0
  4290  033E  00FF               	movwf	btemp+1
  4291  033F  31A5  257B  3183   	fcall	clear_ram0
  4292                           
  4293                           ; Clear objects allocated to BANK5
  4294  0342  30A0               	movlw	low __pbssBANK5
  4295  0343  0084               	movwf	4
  4296  0344  3002               	movlw	high __pbssBANK5
  4297  0345  0085               	movwf	5
  4298  0346  302C               	movlw	44
  4299  0347  00FE               	movwf	btemp
  4300  0348  3000               	movlw	0
  4301  0349  00FF               	movwf	btemp+1
  4302  034A  31A5  257B  3183   	fcall	clear_ram0
  4303                           
  4304                           ; Clear objects allocated to BANK6
  4305  034D  3020               	movlw	low __pbssBANK6
  4306  034E  0084               	movwf	4
  4307  034F  3003               	movlw	high __pbssBANK6
  4308  0350  0085               	movwf	5
  4309  0351  3040               	movlw	64
  4310  0352  00FE               	movwf	btemp
  4311  0353  3000               	movlw	0
  4312  0354  00FF               	movwf	btemp+1
  4313  0355  31A5  257B  3183   	fcall	clear_ram0
  4314                           
  4315                           ; Clear objects allocated to BANK11
  4316  0358  30A0               	movlw	low __pbssBANK11
  4317  0359  0084               	movwf	4
  4318  035A  3005               	movlw	high __pbssBANK11
  4319  035B  0085               	movwf	5
  4320  035C  3040               	movlw	64
  4321  035D  00FE               	movwf	btemp
  4322  035E  3000               	movlw	0
  4323  035F  00FF               	movwf	btemp+1
  4324  0360  31A5  257B  3183   	fcall	clear_ram0
  4325                           
  4326                           ; Initialize objects allocated to BIGRAM
  4327  0363  30F8               	movlw	low __pidataBIGRAM
  4328  0364  0084               	movwf	4
  4329  0365  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  4330  0366  0085               	movwf	5
  4331  0367  30E8               	movlw	low (0+9192)
  4332  0368  0086               	movwf	6
  4333  0369  3023               	movlw	high (0+9192)
  4334  036A  0087               	movwf	7
  4335  036B  3002               	movlw	2
  4336  036C  00FF               	movwf	btemp+1
  4337  036D  3008               	movlw	8
  4338  036E  31A5  256F  3183   	fcall	init_ram
  4339                           
  4340                           ; Initialize objects allocated to BANK0
  4341  0371  30BD               	movlw	low __pidataBANK0
  4342  0372  0084               	movwf	4
  4343  0373  30A5               	movlw	(high __pidataBANK0)| (0+128)
  4344  0374  0085               	movwf	5
  4345  0375  3045               	movlw	low __pdataBANK0
  4346  0376  0086               	movwf	6
  4347  0377  3000               	movlw	high __pdataBANK0
  4348  0378  0087               	movwf	7
  4349  0379  3000               	movlw	0
  4350  037A  00FF               	movwf	btemp+1
  4351  037B  3015               	movlw	21
  4352  037C  31A5  256F  3183   	fcall	init_ram
  4353                           
  4354                           ; Initialize objects allocated to BANK2
  4355  037F  0022               	movlb	2	; select bank2
  4356  0380  3180  2002  3183   	fcall	__pidataBANK2	;fetch initializer
  4357  0383  00E6               	movwf	__pdataBANK2& (0+127)
  4358  0384  3180  2003  3183   	fcall	__pidataBANK2+1	;fetch initializer
  4359  0387  00E7               	movwf	(__pdataBANK2+1)& (0+127)
  4360                           
  4361                           ; Initialize objects allocated to BANK3
  4362  0388  30D2               	movlw	low __pidataBANK3
  4363  0389  0084               	movwf	4
  4364  038A  30A5               	movlw	(high __pidataBANK3)| (0+128)
  4365  038B  0085               	movwf	5
  4366  038C  30CA               	movlw	low __pdataBANK3
  4367  038D  0086               	movwf	6
  4368  038E  3001               	movlw	high __pdataBANK3
  4369  038F  0087               	movwf	7
  4370  0390  3000               	movlw	0
  4371  0391  00FF               	movwf	btemp+1
  4372  0392  3017               	movlw	23
  4373  0393  31A5  256F  3183   	fcall	init_ram
  4374                           
  4375                           ; Initialize objects allocated to BANK4
  4376  0396  0024               	movlb	4	; select bank4
  4377  0397  3188  2000  3183   	fcall	__pidataBANK4	;fetch initializer
  4378  039A  00E5               	movwf	__pdataBANK4& (0+127)
  4379  039B  3188  2001  3183   	fcall	__pidataBANK4+1	;fetch initializer
  4380  039E  00E6               	movwf	(__pdataBANK4+1)& (0+127)
  4381                           
  4382                           ; Initialize objects allocated to BANK7
  4383  039F  30AB               	movlw	low __pidataBANK7
  4384  03A0  0084               	movwf	4
  4385  03A1  3099               	movlw	(high __pidataBANK7)| (0+128)
  4386  03A2  0085               	movwf	5
  4387  03A3  30A0               	movlw	low __pdataBANK7
  4388  03A4  0086               	movwf	6
  4389  03A5  3003               	movlw	high __pdataBANK7
  4390  03A6  0087               	movwf	7
  4391  03A7  3000               	movlw	0
  4392  03A8  00FF               	movwf	btemp+1
  4393  03A9  303D               	movlw	61
  4394  03AA  31A5  256F  3183   	fcall	init_ram
  4395                           
  4396                           ; Initialize objects allocated to BANK8
  4397  03AD  306E               	movlw	low __pidataBANK8
  4398  03AE  0084               	movwf	4
  4399  03AF  3099               	movlw	(high __pidataBANK8)| (0+128)
  4400  03B0  0085               	movwf	5
  4401  03B1  3020               	movlw	low __pdataBANK8
  4402  03B2  0086               	movwf	6
  4403  03B3  3004               	movlw	high __pdataBANK8
  4404  03B4  0087               	movwf	7
  4405  03B5  3000               	movlw	0
  4406  03B6  00FF               	movwf	btemp+1
  4407  03B7  303D               	movlw	61
  4408  03B8  31A5  256F  3183   	fcall	init_ram
  4409                           
  4410                           ; Initialize objects allocated to BANK9
  4411  03BB  3031               	movlw	low __pidataBANK9
  4412  03BC  0084               	movwf	4
  4413  03BD  3099               	movlw	(high __pidataBANK9)| (0+128)
  4414  03BE  0085               	movwf	5
  4415  03BF  30A0               	movlw	low __pdataBANK9
  4416  03C0  0086               	movwf	6
  4417  03C1  3004               	movlw	high __pdataBANK9
  4418  03C2  0087               	movwf	7
  4419  03C3  3000               	movlw	0
  4420  03C4  00FF               	movwf	btemp+1
  4421  03C5  303D               	movlw	61
  4422  03C6  31A5  256F  3183   	fcall	init_ram
  4423                           
  4424                           ; Initialize objects allocated to BANK10
  4425  03C9  30F4               	movlw	low __pidataBANK10
  4426  03CA  0084               	movwf	4
  4427  03CB  3098               	movlw	(high __pidataBANK10)| (0+128)
  4428  03CC  0085               	movwf	5
  4429  03CD  3020               	movlw	low __pdataBANK10
  4430  03CE  0086               	movwf	6
  4431  03CF  3005               	movlw	high __pdataBANK10
  4432  03D0  0087               	movwf	7
  4433  03D1  3000               	movlw	0
  4434  03D2  00FF               	movwf	btemp+1
  4435  03D3  303D               	movlw	61
  4436  03D4  31A5  256F         	fcall	init_ram
  4437  03D6                     end_of_initialization:	
  4438                           ;End of C runtime variable initialization code
  4439                           
  4440  03D6                     __end_of__initialization:	
  4441  03D6  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4442  03D7  0020               	movlb	0
  4443  03D8  3183  2BDA         	ljmp	_main	;jump to C main() function
  4444                           
  4445                           	psect	bssBANK0
  4446  005A                     __pbssBANK0:	
  4447  005A                     _sub_timer:	
  4448  005A                     	ds	4
  4449  005E                     _tap_timer:	
  4450  005E                     	ds	4
  4451  0062                     _timer:	
  4452  0062                     	ds	4
  4453  0066                     _doubleTap_state:	
  4454  0066                     	ds	1
  4455  0067                     _mode2_state:	
  4456  0067                     	ds	1
  4457  0068                     _presetSaveMode:	
  4458  0068                     	ds	1
  4459                           
  4460                           	psect	dataBANK0
  4461  0045                     __pdataBANK0:	
  4462  0045                     _baseline_delay_time:	
  4463  0045                     	ds	4
  4464  0049                     _delay_time:	
  4465  0049                     	ds	4
  4466  004D                     _bottom_push_state:	
  4467  004D                     	ds	2
  4468  004F                     _knob2_prev:	
  4469  004F                     	ds	2
  4470  0051                     _long_press_limit:	
  4471  0051                     	ds	2
  4472  0053                     _top_push_state:	
  4473  0053                     	ds	2
  4474  0055                     _blink_rate:	
  4475  0055                     	ds	1
  4476  0056                     _feedback_state:	
  4477  0056                     	ds	1
  4478  0057                     _longTap_state:	
  4479  0057                     	ds	1
  4480  0058                     _num_taps:	
  4481  0058                     	ds	1
  4482  0059                     _switchBypass_state:	
  4483  0059                     	ds	1
  4484                           
  4485                           	psect	dataBANK2
  4486  0166                     __pdataBANK2:	
  4487  0166                     _knob1_prev:	
  4488  0166                     	ds	2
  4489                           
  4490                           	psect	bssBANK3
  4491  01A0                     __pbssBANK3:	
  4492  01A0                     _double_timer:	
  4493  01A0                     	ds	4
  4494  01A4                     _mod_timer:	
  4495  01A4                     	ds	4
  4496  01A8                     _delay_counter:	
  4497  01A8                     	ds	2
  4498  01AA                     _feedback_timer:	
  4499  01AA                     	ds	2
  4500  01AC                     _knob_1_pos:	
  4501  01AC                     	ds	2
  4502  01AE                     _knob_2_pos:	
  4503  01AE                     	ds	2
  4504  01B0                     _knob_3_pos:	
  4505  01B0                     	ds	2
  4506  01B2                     _knob_4_pos:	
  4507  01B2                     	ds	2
  4508  01B4                     _knob_5_pos:	
  4509  01B4                     	ds	2
  4510  01B6                     _longTap_timer:	
  4511  01B6                     	ds	2
  4512  01B8                     _mod_counter:	
  4513  01B8                     	ds	2
  4514  01BA                     _mod_value:	
  4515  01BA                     	ds	2
  4516  01BC                     _switchBypass_pressed:	
  4517  01BC                     	ds	2
  4518  01BE                     _bottomTactile_pressed:	
  4519  01BE                     	ds	1
  4520  01BF                     _bypass_turning_on:	
  4521  01BF                     	ds	1
  4522  01C0                     _feedback_start:	
  4523  01C0                     	ds	1
  4524  01C1                     _iCnt:	
  4525  01C1                     	ds	1
  4526  01C2                     _longTap_start:	
  4527  01C2                     	ds	1
  4528  01C3                     _mode1_state:	
  4529  01C3                     	ds	1
  4530  01C4                     _preset_blink:	
  4531  01C4                     	ds	1
  4532  01C5                     _preset_programmning_on:	
  4533  01C5                     	ds	1
  4534  01C6                     _suspend_blink:	
  4535  01C6                     	ds	1
  4536  01C7                     _switchTap_down:	
  4537  01C7                     	ds	1
  4538  01C8                     _switchTap_pressed:	
  4539  01C8                     	ds	1
  4540  01C9                     _topTactile_pressed:	
  4541  01C9                     	ds	1
  4542                           
  4543                           	psect	dataBANK3
  4544  01CA                     __pdataBANK3:	
  4545  01CA                     _blink_delay:	
  4546  01CA                     	ds	2
  4547  01CC                     _delay_time_changed:	
  4548  01CC                     	ds	2
  4549  01CE                     _knob3_prev:	
  4550  01CE                     	ds	2
  4551  01D0                     _knob4_prev:	
  4552  01D0                     	ds	2
  4553  01D2                     _knob5_prev:	
  4554  01D2                     	ds	2
  4555  01D4                     _mod_delay_time:	
  4556  01D4                     	ds	2
  4557  01D6                     _tap_iteration:	
  4558  01D6                     	ds	2
  4559  01D8                     _blink_state:	
  4560  01D8                     	ds	1
  4561  01D9                     _currentBypassState:	
  4562  01D9                     	ds	1
  4563  01DA                     _expSwitchState:	
  4564  01DA                     	ds	1
  4565  01DB                     _expressModeCnst:	
  4566  01DB                     	ds	1
  4567  01DC                     _expressionChannel:	
  4568  01DC                     	ds	1
  4569  01DD                     _presetChannel:	
  4570  01DD                     	ds	1
  4571  01DE                     _presetModeCnst:	
  4572  01DE                     	ds	1
  4573  01DF                     _switchTap_state:	
  4574  01DF                     	ds	1
  4575  01E0                     _symmetry:	
  4576  01E0                     	ds	1
  4577                           
  4578                           	psect	bssBANK4
  4579  0220                     __pbssBANK4:	
  4580  0220                     _tap_history:	
  4581  0220                     	ds	20
  4582  0234                     USARTWriteInt@F3536:	
  4583  0234                     	ds	5
  4584  0239                     _ledState:	
  4585  0239                     	ds	4
  4586  023D                     _tap_total:	
  4587  023D                     	ds	4
  4588  0241                     _test_timer:	
  4589  0241                     	ds	4
  4590  0245                     _adjust_sub_delay:	
  4591  0245                     	ds	2
  4592  0247                     _adjusted_pot_value:	
  4593  0247                     	ds	2
  4594  0249                     _debounce_bypass:	
  4595  0249                     	ds	2
  4596  024B                     _debounce_count:	
  4597  024B                     	ds	2
  4598  024D                     _debounce_mode1:	
  4599  024D                     	ds	2
  4600  024F                     _debounce_mode2:	
  4601  024F                     	ds	2
  4602  0251                     _delayfound:	
  4603  0251                     	ds	2
  4604  0253                     _errno:	
  4605  0253                     	ds	2
  4606  0255                     _reset_sub_delay:	
  4607  0255                     	ds	2
  4608  0257                     _switchBypass_toggle:	
  4609  0257                     	ds	2
  4610                           
  4611                           	psect	dataBANK4
  4612  0265                     __pdataBANK4:	
  4613  0265                     _switchBypass_up:	
  4614  0265                     	ds	2
  4615                           
  4616                           	psect	bssBANK5
  4617  02A0                     __pbssBANK5:	
  4618  02A0                     _tap:	
  4619  02A0                     	ds	44
  4620                           
  4621                           	psect	bssBANK6
  4622  0320                     __pbssBANK6:	
  4623  0320                     _URBuff:	
  4624  0320                     	ds	64
  4625                           
  4626                           	psect	dataBANK7
  4627  03A0                     __pdataBANK7:	
  4628  03A0                     _modSin:	
  4629  03A0                     	ds	61
  4630                           
  4631                           	psect	dataBANK8
  4632  0420                     __pdataBANK8:	
  4633  0420                     _modTri:	
  4634  0420                     	ds	61
  4635                           
  4636                           	psect	dataBANK9
  4637  04A0                     __pdataBANK9:	
  4638  04A0                     _modRevSaw:	
  4639  04A0                     	ds	61
  4640                           
  4641                           	psect	dataBANK10
  4642  0520                     __pdataBANK10:	
  4643  0520                     _modSaw:	
  4644  0520                     	ds	61
  4645                           
  4646                           	psect	bssBANK11
  4647  05A0                     __pbssBANK11:	
  4648  05A0                     _myBuf:	
  4649  05A0                     	ds	64
  4650                           
  4651                           	psect	clrtext
  4652  257B                     clear_ram0:	
  4653                           ;	Called with FSR0 containing the base address, and
  4654                           ;	btemp/btemp+1 has the size to clear
  4655                           
  4656  257B  0064               	clrwdt	;clear the watchdog before getting into this loop
  4657  257C                     clrloop0:	
  4658  257C  0180               	clrf	0	;clear RAM location pointed to by FSR
  4659  257D  3101               	addfsr 0,1
  4660  257E  3001               	movlw	1
  4661  257F  02FE               	subwf	126,f
  4662  2580  3000               	movlw	0
  4663  2581  3BFF               	subwfb	127,f
  4664  2582  087F               	movf	127,w
  4665  2583  047E               	iorwf	126,w
  4666  2584  1903               	btfsc	3,2
  4667  2585  3400               	retlw	0	;all done for this memory range, return
  4668  2586  2D7C               	goto	clrloop0	;have we reached the end yet?
  4669                           
  4670                           	psect	inittext
  4671  256F                     init_ram:	
  4672  256F  00FE               	movwf	126
  4673  2570                     initloop:	
  4674  2570  0012               	moviw fsr0++
  4675  2571  001E               	movwi fsr1++
  4676  2572  3001               	movlw	1
  4677  2573  02FE               	subwf	126,f
  4678  2574  3000               	movlw	0
  4679  2575  3BFF               	subwfb	127,f
  4680  2576  087F               	movf	127,w
  4681  2577  047E               	iorwf	126,w
  4682  2578  1903               	btfsc	3,2
  4683  2579  3400               	retlw	0
  4684  257A  2D70               	goto	initloop
  4685                           
  4686                           	psect	cstackBANK4
  4687  0259                     __pcstackBANK4:	
  4688  0259                     _main$2651:	
  4689                           
  4690                           ; 3 bytes @ 0x0
  4691  0259                     	ds	3
  4692  025C                     _main$2652:	
  4693                           
  4694                           ; 3 bytes @ 0x3
  4695  025C                     	ds	3
  4696  025F                     _main$2653:	
  4697                           
  4698                           ; 3 bytes @ 0x6
  4699  025F                     	ds	3
  4700  0262                     _main$2654:	
  4701                           
  4702                           ; 3 bytes @ 0x9
  4703  0262                     	ds	3
  4704                           
  4705                           	psect	cstackBANK3
  4706  01E1                     __pcstackBANK3:	
  4707  01E1                     ??_main:	
  4708                           
  4709                           ; 1 bytes @ 0x0
  4710  01E1                     	ds	15
  4711                           
  4712                           	psect	cstackBANK2
  4713  0120                     __pcstackBANK2:	
  4714  0120                     ??___fttol:	
  4715                           
  4716                           ; 1 bytes @ 0x0
  4717  0120                     	ds	4
  4718  0124                     ___fttol@sign1:	
  4719                           
  4720                           ; 1 bytes @ 0x4
  4721  0124                     	ds	1
  4722  0125                     ___fttol@lval:	
  4723                           
  4724                           ; 4 bytes @ 0x5
  4725  0125                     	ds	4
  4726  0129                     ___fttol@exp1:	
  4727                           
  4728                           ; 1 bytes @ 0x9
  4729  0129                     	ds	1
  4730  012A                     ?___altoft:	
  4731  012A                     ___altoft@c:	
  4732                           ; 3 bytes @ 0xA
  4733                           
  4734                           
  4735                           ; 4 bytes @ 0xA
  4736  012A                     	ds	4
  4737  012E                     ___altoft@exp:	
  4738                           
  4739                           ; 1 bytes @ 0xE
  4740  012E                     	ds	1
  4741  012F                     ___altoft@sign:	
  4742                           
  4743                           ; 1 bytes @ 0xF
  4744  012F                     	ds	1
  4745  0130                     ?_trunc:	
  4746  0130                     ?_floor:	
  4747                           ; 3 bytes @ 0x10
  4748                           
  4749  0130                     trunc@x:	
  4750                           ; 3 bytes @ 0x10
  4751                           
  4752  0130                     floor@x:	
  4753                           ; 3 bytes @ 0x10
  4754                           
  4755                           
  4756                           ; 3 bytes @ 0x10
  4757  0130                     	ds	3
  4758  0133                     trunc@i:	
  4759  0133                     floor@i:	
  4760                           ; 3 bytes @ 0x13
  4761                           
  4762                           
  4763                           ; 3 bytes @ 0x13
  4764  0133                     	ds	3
  4765  0136                     trunc@expon:	
  4766  0136                     floor@expon:	
  4767                           ; 2 bytes @ 0x16
  4768                           
  4769                           
  4770                           ; 2 bytes @ 0x16
  4771  0136                     	ds	2
  4772  0138                     ?_set_subdivision:	
  4773  0138                     ?_exp:	
  4774                           ; 2 bytes @ 0x18
  4775                           
  4776  0138                     set_subdivision@x:	
  4777                           ; 3 bytes @ 0x18
  4778                           
  4779  0138                     exp@x:	
  4780                           ; 2 bytes @ 0x18
  4781                           
  4782                           
  4783                           ; 3 bytes @ 0x18
  4784  0138                     	ds	2
  4785  013A                     set_subdivision@y:	
  4786                           
  4787                           ; 2 bytes @ 0x1A
  4788  013A                     	ds	1
  4789  013B                     ??_exp:	
  4790                           
  4791                           ; 1 bytes @ 0x1B
  4792  013B                     	ds	1
  4793  013C                     ??_set_subdivision:	
  4794  013C                     _exp$2671:	
  4795                           ; 1 bytes @ 0x1C
  4796                           
  4797                           
  4798                           ; 3 bytes @ 0x1C
  4799  013C                     	ds	3
  4800  013F                     set_subdivision@scalar:	
  4801  013F                     _exp$2426:	
  4802                           ; 3 bytes @ 0x1F
  4803                           
  4804                           
  4805                           ; 3 bytes @ 0x1F
  4806  013F                     	ds	3
  4807  0142                     set_subdivision@tmpX:	
  4808  0142                     exp@exponent:	
  4809                           ; 2 bytes @ 0x22
  4810                           
  4811                           
  4812                           ; 2 bytes @ 0x22
  4813  0142                     	ds	2
  4814  0144                     exp@sign:	
  4815                           
  4816                           ; 1 bytes @ 0x24
  4817  0144                     	ds	1
  4818  0145                     ?_pow:	
  4819  0145                     pow@x:	
  4820                           ; 3 bytes @ 0x25
  4821                           
  4822                           
  4823                           ; 3 bytes @ 0x25
  4824  0145                     	ds	3
  4825  0148                     pow@y:	
  4826                           
  4827                           ; 3 bytes @ 0x28
  4828  0148                     	ds	3
  4829  014B                     ??_pow:	
  4830                           
  4831                           ; 1 bytes @ 0x2B
  4832  014B                     	ds	1
  4833  014C                     _pow$2669:	
  4834                           
  4835                           ; 3 bytes @ 0x2C
  4836  014C                     	ds	3
  4837  014F                     _pow$2670:	
  4838                           
  4839                           ; 3 bytes @ 0x2F
  4840  014F                     	ds	3
  4841  0152                     pow@sign:	
  4842                           
  4843                           ; 1 bytes @ 0x32
  4844  0152                     	ds	1
  4845  0153                     pow@yi:	
  4846                           
  4847                           ; 4 bytes @ 0x33
  4848  0153                     	ds	4
  4849  0157                     ?_scaleA10kPot:	
  4850  0157                     ?_scaleiA10kPot:	
  4851                           ; 2 bytes @ 0x37
  4852                           
  4853  0157                     ?_scaleA100kPot:	
  4854                           ; 2 bytes @ 0x37
  4855                           
  4856  0157                     ?_scaleiA100kPot:	
  4857                           ; 2 bytes @ 0x37
  4858                           
  4859  0157                     scaleA100kPot@input:	
  4860                           ; 2 bytes @ 0x37
  4861                           
  4862  0157                     scaleiA100kPot@input:	
  4863                           ; 3 bytes @ 0x37
  4864                           
  4865  0157                     scaleA10kPot@input:	
  4866                           ; 3 bytes @ 0x37
  4867                           
  4868  0157                     scaleiA10kPot@input:	
  4869                           ; 3 bytes @ 0x37
  4870                           
  4871                           
  4872                           ; 3 bytes @ 0x37
  4873  0157                     	ds	3
  4874  015A                     scaleA100kPot@pwm:	
  4875  015A                     scaleiA100kPot@pwm:	
  4876                           ; 3 bytes @ 0x3A
  4877                           
  4878  015A                     scaleA10kPot@pwm:	
  4879                           ; 3 bytes @ 0x3A
  4880                           
  4881  015A                     scaleiA10kPot@pwm:	
  4882                           ; 3 bytes @ 0x3A
  4883                           
  4884                           
  4885                           ; 3 bytes @ 0x3A
  4886  015A                     	ds	3
  4887  015D                     _scaleA100kPot$2657:	
  4888  015D                     _scaleiA100kPot$2660:	
  4889                           ; 3 bytes @ 0x3D
  4890                           
  4891  015D                     _scaleA10kPot$2663:	
  4892                           ; 3 bytes @ 0x3D
  4893                           
  4894  015D                     _scaleiA10kPot$2666:	
  4895                           ; 3 bytes @ 0x3D
  4896                           
  4897                           
  4898                           ; 3 bytes @ 0x3D
  4899  015D                     	ds	3
  4900  0160                     _scaleA100kPot$2658:	
  4901  0160                     _scaleiA100kPot$2661:	
  4902                           ; 3 bytes @ 0x40
  4903                           
  4904  0160                     _scaleA10kPot$2664:	
  4905                           ; 3 bytes @ 0x40
  4906                           
  4907  0160                     _scaleiA10kPot$2667:	
  4908                           ; 3 bytes @ 0x40
  4909                           
  4910                           
  4911                           ; 3 bytes @ 0x40
  4912  0160                     	ds	3
  4913  0163                     _scaleA100kPot$2659:	
  4914  0163                     _scaleiA100kPot$2662:	
  4915                           ; 3 bytes @ 0x43
  4916                           
  4917  0163                     _scaleA10kPot$2665:	
  4918                           ; 3 bytes @ 0x43
  4919                           
  4920  0163                     _scaleiA10kPot$2668:	
  4921                           ; 3 bytes @ 0x43
  4922                           
  4923                           
  4924                           ; 3 bytes @ 0x43
  4925  0163                     	ds	3
  4926                           
  4927                           	psect	cstackBANK1
  4928  00A0                     __pcstackBANK1:	
  4929  00A0                     ?___ftge:	
  4930  00A0                     ?_set_leds_top:	
  4931                           ; 1 bit 
  4932                           
  4933  00A0                     ?_USARTInit:	
  4934                           ; 1 bytes @ 0x0
  4935                           
  4936  00A0                     ??_ConfigureOscillator:	
  4937                           ; 1 bytes @ 0x0
  4938                           
  4939  00A0                     ??_InitApp:	
  4940                           ; 1 bytes @ 0x0
  4941                           
  4942  00A0                     ??_InitializeTaps:	
  4943                           ; 1 bytes @ 0x0
  4944                           
  4945  00A0                     ??_init_adc:	
  4946                           ; 1 bytes @ 0x0
  4947                           
  4948  00A0                     ??_init_pwm:	
  4949                           ; 1 bytes @ 0x0
  4950                           
  4951  00A0                     ??_init_timer2:	
  4952                           ; 1 bytes @ 0x0
  4953                           
  4954  00A0                     ??_init_timer0:	
  4955                           ; 1 bytes @ 0x0
  4956                           
  4957  00A0                     ?_set_leds_bottom:	
  4958                           ; 1 bytes @ 0x0
  4959                           
  4960  00A0                     ?_setFeedbackState:	
  4961                           ; 1 bytes @ 0x0
  4962                           
  4963  00A0                     ?_setLongTapState:	
  4964                           ; 1 bytes @ 0x0
  4965                           
  4966  00A0                     ?_updateSwitchBypassState:	
  4967                           ; 1 bytes @ 0x0
  4968                           
  4969  00A0                     ?_adc_convert:	
  4970                           ; 1 bytes @ 0x0
  4971                           
  4972  00A0                     ?_FLASH_ReadWord:	
  4973                           ; 2 bytes @ 0x0
  4974                           
  4975  00A0                     ?_getSwitchBypassState:	
  4976                           ; 2 bytes @ 0x0
  4977                           
  4978  00A0                     ?___wmul:	
  4979                           ; 2 bytes @ 0x0
  4980                           
  4981  00A0                     ?___ftpack:	
  4982                           ; 2 bytes @ 0x0
  4983                           
  4984  00A0                     ?_frexp:	
  4985                           ; 3 bytes @ 0x0
  4986                           
  4987  00A0                     ?___lmul:	
  4988                           ; 3 bytes @ 0x0
  4989                           
  4990  00A0                     ?___aldiv:	
  4991                           ; 4 bytes @ 0x0
  4992                           
  4993  00A0                     FLASH_ReadWord@flashAddr:	
  4994                           ; 4 bytes @ 0x0
  4995                           
  4996  00A0                     set_leds_top@x:	
  4997                           ; 2 bytes @ 0x0
  4998                           
  4999  00A0                     set_leds_bottom@x:	
  5000                           ; 2 bytes @ 0x0
  5001                           
  5002  00A0                     updateSwitchBypassState@state:	
  5003                           ; 2 bytes @ 0x0
  5004                           
  5005  00A0                     setFeedbackState@f_state:	
  5006                           ; 2 bytes @ 0x0
  5007                           
  5008  00A0                     setLongTapState@f_state:	
  5009                           ; 2 bytes @ 0x0
  5010                           
  5011  00A0                     USARTInit@baud_rate:	
  5012                           ; 2 bytes @ 0x0
  5013                           
  5014  00A0                     ___wmul@multiplier:	
  5015                           ; 2 bytes @ 0x0
  5016                           
  5017  00A0                     ___ftpack@arg:	
  5018                           ; 2 bytes @ 0x0
  5019                           
  5020  00A0                     ___ftge@ff1:	
  5021                           ; 3 bytes @ 0x0
  5022                           
  5023  00A0                     frexp@value:	
  5024                           ; 3 bytes @ 0x0
  5025                           
  5026  00A0                     ___lmul@multiplier:	
  5027                           ; 3 bytes @ 0x0
  5028                           
  5029  00A0                     ___aldiv@divisor:	
  5030                           ; 4 bytes @ 0x0
  5031                           
  5032                           
  5033                           ; 4 bytes @ 0x0
  5034  00A0                     	ds	1
  5035  00A1                     InitializeTaps@itap:	
  5036                           
  5037                           ; 2 bytes @ 0x1
  5038  00A1                     	ds	1
  5039  00A2                     ??_USARTInit:	
  5040  00A2                     ??_adc_convert:	
  5041                           ; 1 bytes @ 0x2
  5042                           
  5043  00A2                     ??_FLASH_ReadWord:	
  5044                           ; 1 bytes @ 0x2
  5045                           
  5046  00A2                     ??_set_leds_bottom:	
  5047                           ; 1 bytes @ 0x2
  5048                           
  5049  00A2                     ??_setFeedbackState:	
  5050                           ; 1 bytes @ 0x2
  5051                           
  5052  00A2                     ??_setLongTapState:	
  5053                           ; 1 bytes @ 0x2
  5054                           
  5055  00A2                     ??_updateSwitchBypassState:	
  5056                           ; 1 bytes @ 0x2
  5057                           
  5058  00A2                     ??_getSwitchBypassState:	
  5059                           ; 1 bytes @ 0x2
  5060                           
  5061  00A2                     FLASH_ReadWord@GIEBitValue:	
  5062                           ; 1 bytes @ 0x2
  5063                           
  5064  00A2                     set_leds_top@ledState:	
  5065                           ; 1 bytes @ 0x2
  5066                           
  5067  00A2                     ___wmul@multiplicand:	
  5068                           ; 2 bytes @ 0x2
  5069                           
  5070                           
  5071                           ; 2 bytes @ 0x2
  5072  00A2                     	ds	1
  5073  00A3                     adc_convert@channel:	
  5074  00A3                     ___ftpack@exp:	
  5075                           ; 1 bytes @ 0x3
  5076                           
  5077  00A3                     frexp@eptr:	
  5078                           ; 1 bytes @ 0x3
  5079                           
  5080  00A3                     ___ftge@ff2:	
  5081                           ; 2 bytes @ 0x3
  5082                           
  5083                           
  5084                           ; 3 bytes @ 0x3
  5085  00A3                     	ds	1
  5086  00A4                     ??_set_leds_top:	
  5087  00A4                     ??_ReadSavedSettings:	
  5088                           ; 1 bytes @ 0x4
  5089                           
  5090  00A4                     ??_resetRingLEDs:	
  5091                           ; 1 bytes @ 0x4
  5092                           
  5093  00A4                     ??_setPresetDisplay:	
  5094                           ; 1 bytes @ 0x4
  5095                           
  5096  00A4                     ??_setExpressionDisplay:	
  5097                           ; 1 bytes @ 0x4
  5098                           
  5099  00A4                     ??___wmul:	
  5100                           ; 1 bytes @ 0x4
  5101                           
  5102  00A4                     ___ftpack@sign:	
  5103                           ; 1 bytes @ 0x4
  5104                           
  5105  00A4                     ___wmul@product:	
  5106                           ; 1 bytes @ 0x4
  5107                           
  5108  00A4                     ___lmul@multiplicand:	
  5109                           ; 2 bytes @ 0x4
  5110                           
  5111  00A4                     ___aldiv@dividend:	
  5112                           ; 4 bytes @ 0x4
  5113                           
  5114                           
  5115                           ; 4 bytes @ 0x4
  5116  00A4                     	ds	1
  5117  00A5                     ??___ftpack:	
  5118  00A5                     ??_frexp:	
  5119                           ; 1 bytes @ 0x5
  5120                           
  5121                           
  5122                           ; 1 bytes @ 0x5
  5123  00A5                     	ds	1
  5124  00A6                     ??___ftge:	
  5125  00A6                     setPresetDisplay@ledChannel:	
  5126                           ; 1 bytes @ 0x6
  5127                           
  5128  00A6                     setExpressionDisplay@ledChannel:	
  5129                           ; 1 bytes @ 0x6
  5130                           
  5131                           
  5132                           ; 1 bytes @ 0x6
  5133  00A6                     	ds	1
  5134  00A7                     ??_update_mode:	
  5135  00A7                     ??_update_selectMode:	
  5136                           ; 1 bytes @ 0x7
  5137                           
  5138  00A7                     ??_setPedalMode:	
  5139                           ; 1 bytes @ 0x7
  5140                           
  5141                           
  5142                           ; 1 bytes @ 0x7
  5143  00A7                     	ds	1
  5144  00A8                     ??___lmul:	
  5145  00A8                     ??___aldiv:	
  5146                           ; 1 bytes @ 0x8
  5147                           
  5148  00A8                     ?___awtoft:	
  5149                           ; 1 bytes @ 0x8
  5150                           
  5151  00A8                     ?___ftdiv:	
  5152                           ; 3 bytes @ 0x8
  5153                           
  5154  00A8                     ?___lltoft:	
  5155                           ; 3 bytes @ 0x8
  5156                           
  5157  00A8                     ___awtoft@c:	
  5158                           ; 3 bytes @ 0x8
  5159                           
  5160  00A8                     ___ftdiv@f2:	
  5161                           ; 2 bytes @ 0x8
  5162                           
  5163  00A8                     ___lmul@product:	
  5164                           ; 3 bytes @ 0x8
  5165                           
  5166  00A8                     ___lltoft@c:	
  5167                           ; 4 bytes @ 0x8
  5168                           
  5169                           
  5170                           ; 4 bytes @ 0x8
  5171  00A8                     	ds	1
  5172  00A9                     ___aldiv@counter:	
  5173                           
  5174                           ; 1 bytes @ 0x9
  5175  00A9                     	ds	1
  5176  00AA                     ___aldiv@sign:	
  5177                           
  5178                           ; 1 bytes @ 0xA
  5179  00AA                     	ds	1
  5180  00AB                     ??___awtoft:	
  5181  00AB                     ___ftdiv@f1:	
  5182                           ; 1 bytes @ 0xB
  5183                           
  5184  00AB                     ___aldiv@quotient:	
  5185                           ; 3 bytes @ 0xB
  5186                           
  5187                           
  5188                           ; 4 bytes @ 0xB
  5189  00AB                     	ds	1
  5190  00AC                     ?_wait_ms:	
  5191  00AC                     ??___lltoft:	
  5192                           ; 1 bytes @ 0xC
  5193                           
  5194  00AC                     wait_ms@timeSec:	
  5195                           ; 1 bytes @ 0xC
  5196                           
  5197                           
  5198                           ; 2 bytes @ 0xC
  5199  00AC                     	ds	1
  5200  00AD                     ___awtoft@sign:	
  5201  00AD                     ___lltoft@exp:	
  5202                           ; 1 bytes @ 0xD
  5203                           
  5204                           
  5205                           ; 1 bytes @ 0xD
  5206  00AD                     	ds	1
  5207  00AE                     ??_wait_ms:	
  5208  00AE                     ??___ftdiv:	
  5209                           ; 1 bytes @ 0xE
  5210                           
  5211  00AE                     wait_ms@timemsl:	
  5212                           ; 1 bytes @ 0xE
  5213                           
  5214                           
  5215                           ; 4 bytes @ 0xE
  5216  00AE                     	ds	4
  5217  00B2                     ??_read_bottom_tactile:	
  5218  00B2                     ??_read_top_tactile:	
  5219                           ; 1 bytes @ 0x12
  5220                           
  5221  00B2                     ??_solidring_tactiles:	
  5222                           ; 1 bytes @ 0x12
  5223                           
  5224  00B2                     ??_ring_tactiles:	
  5225                           ; 1 bytes @ 0x12
  5226                           
  5227  00B2                     ?_setSwitchBypassState:	
  5228                           ; 1 bytes @ 0x12
  5229                           
  5230  00B2                     ___ftdiv@cntr:	
  5231                           ; 1 bytes @ 0x12
  5232                           
  5233  00B2                     setSwitchBypassState@f_state:	
  5234                           ; 1 bytes @ 0x12
  5235                           
  5236                           
  5237                           ; 2 bytes @ 0x12
  5238  00B2                     	ds	1
  5239  00B3                     ring_tactiles@iLed:	
  5240  00B3                     ___ftdiv@f3:	
  5241                           ; 2 bytes @ 0x13
  5242                           
  5243                           
  5244                           ; 3 bytes @ 0x13
  5245  00B3                     	ds	1
  5246  00B4                     ??_setSwitchBypassState:	
  5247  00B4                     solidring_tactiles@ring_delay:	
  5248                           ; 1 bytes @ 0x14
  5249                           
  5250                           
  5251                           ; 1 bytes @ 0x14
  5252  00B4                     	ds	1
  5253  00B5                     ring_tactiles@iLed_1522:	
  5254                           
  5255                           ; 2 bytes @ 0x15
  5256  00B5                     	ds	1
  5257  00B6                     ??_initSwitchBypass:	
  5258  00B6                     ___ftdiv@exp:	
  5259                           ; 1 bytes @ 0x16
  5260                           
  5261  00B6                     initSwitchBypass@initState:	
  5262                           ; 1 bytes @ 0x16
  5263                           
  5264                           
  5265                           ; 2 bytes @ 0x16
  5266  00B6                     	ds	1
  5267  00B7                     ??_showSave:	
  5268  00B7                     ___ftdiv@sign:	
  5269                           ; 1 bytes @ 0x17
  5270                           
  5271                           
  5272                           ; 1 bytes @ 0x17
  5273  00B7                     	ds	1
  5274  00B8                     ?_setDoublePressState:	
  5275  00B8                     ?___ftneg:	
  5276                           ; 1 bytes @ 0x18
  5277                           
  5278  00B8                     setDoublePressState@f_state:	
  5279                           ; 3 bytes @ 0x18
  5280                           
  5281  00B8                     ___ftneg@f1:	
  5282                           ; 2 bytes @ 0x18
  5283                           
  5284                           
  5285                           ; 3 bytes @ 0x18
  5286  00B8                     	ds	2
  5287  00BA                     ??_setDoublePressState:	
  5288                           
  5289                           ; 1 bytes @ 0x1A
  5290  00BA                     	ds	1
  5291  00BB                     ??___ftneg:	
  5292  00BB                     ?___ftadd:	
  5293                           ; 1 bytes @ 0x1B
  5294                           
  5295  00BB                     ___ftadd@f1:	
  5296                           ; 3 bytes @ 0x1B
  5297                           
  5298                           
  5299                           ; 3 bytes @ 0x1B
  5300  00BB                     	ds	1
  5301  00BC                     ??_updateSwitchBypass:	
  5302  00BC                     ??_updateSwitchTap:	
  5303                           ; 1 bytes @ 0x1C
  5304                           
  5305                           
  5306                           ; 1 bytes @ 0x1C
  5307  00BC                     	ds	2
  5308  00BE                     ___ftadd@f2:	
  5309                           
  5310                           ; 3 bytes @ 0x1E
  5311  00BE                     	ds	3
  5312  00C1                     ??___ftadd:	
  5313                           
  5314                           ; 1 bytes @ 0x21
  5315  00C1                     	ds	1
  5316  00C2                     updateSwitchTap@tapCntDivisor:	
  5317                           
  5318                           ; 2 bytes @ 0x22
  5319  00C2                     	ds	2
  5320  00C4                     updateSwitchTap@iCnt:	
  5321                           
  5322                           ; 1 bytes @ 0x24
  5323  00C4                     	ds	1
  5324  00C5                     ___ftadd@sign:	
  5325                           
  5326                           ; 1 bytes @ 0x25
  5327  00C5                     	ds	1
  5328  00C6                     ___ftadd@exp2:	
  5329                           
  5330                           ; 1 bytes @ 0x26
  5331  00C6                     	ds	1
  5332  00C7                     ___ftadd@exp1:	
  5333                           
  5334                           ; 1 bytes @ 0x27
  5335  00C7                     	ds	1
  5336  00C8                     ?___ftmul:	
  5337  00C8                     ?___ftsub:	
  5338                           ; 3 bytes @ 0x28
  5339                           
  5340  00C8                     ___ftmul@f1:	
  5341                           ; 3 bytes @ 0x28
  5342                           
  5343  00C8                     ___ftsub@f2:	
  5344                           ; 3 bytes @ 0x28
  5345                           
  5346                           
  5347                           ; 3 bytes @ 0x28
  5348  00C8                     	ds	3
  5349  00CB                     ___ftmul@f2:	
  5350  00CB                     ___ftsub@f1:	
  5351                           ; 3 bytes @ 0x2B
  5352                           
  5353                           
  5354                           ; 3 bytes @ 0x2B
  5355  00CB                     	ds	3
  5356  00CE                     ??___ftmul:	
  5357  00CE                     ??___ftsub:	
  5358                           ; 1 bytes @ 0x2E
  5359                           
  5360                           
  5361                           ; 1 bytes @ 0x2E
  5362  00CE                     	ds	4
  5363  00D2                     ___ftmul@exp:	
  5364                           
  5365                           ; 1 bytes @ 0x32
  5366  00D2                     	ds	1
  5367  00D3                     ___ftmul@f3_as_product:	
  5368                           
  5369                           ; 3 bytes @ 0x33
  5370  00D3                     	ds	3
  5371  00D6                     ___ftmul@cntr:	
  5372                           
  5373                           ; 1 bytes @ 0x36
  5374  00D6                     	ds	1
  5375  00D7                     ___ftmul@sign:	
  5376                           
  5377                           ; 1 bytes @ 0x37
  5378  00D7                     	ds	1
  5379  00D8                     ?_map:	
  5380  00D8                     ?_eval_poly:	
  5381                           ; 3 bytes @ 0x38
  5382                           
  5383  00D8                     map@x:	
  5384                           ; 3 bytes @ 0x38
  5385                           
  5386  00D8                     eval_poly@x:	
  5387                           ; 3 bytes @ 0x38
  5388                           
  5389                           
  5390                           ; 3 bytes @ 0x38
  5391  00D8                     	ds	3
  5392  00DB                     eval_poly@d:	
  5393  00DB                     map@in_min:	
  5394                           ; 2 bytes @ 0x3B
  5395                           
  5396                           
  5397                           ; 3 bytes @ 0x3B
  5398  00DB                     	ds	2
  5399  00DD                     eval_poly@n:	
  5400                           
  5401                           ; 2 bytes @ 0x3D
  5402  00DD                     	ds	1
  5403  00DE                     map@in_max:	
  5404                           
  5405                           ; 3 bytes @ 0x3E
  5406  00DE                     	ds	1
  5407  00DF                     ??_eval_poly:	
  5408  00DF                     eval_poly@res:	
  5409                           ; 1 bytes @ 0x3F
  5410                           
  5411                           
  5412                           ; 3 bytes @ 0x3F
  5413  00DF                     	ds	2
  5414  00E1                     map@out_min:	
  5415                           
  5416                           ; 3 bytes @ 0x41
  5417  00E1                     	ds	1
  5418  00E2                     ?_log:	
  5419  00E2                     ?_ldexp:	
  5420                           ; 3 bytes @ 0x42
  5421                           
  5422  00E2                     ldexp@value:	
  5423                           ; 3 bytes @ 0x42
  5424                           
  5425  00E2                     log@x:	
  5426                           ; 3 bytes @ 0x42
  5427                           
  5428                           
  5429                           ; 3 bytes @ 0x42
  5430  00E2                     	ds	2
  5431  00E4                     map@out_max:	
  5432                           
  5433                           ; 3 bytes @ 0x44
  5434  00E4                     	ds	1
  5435  00E5                     ??_log:	
  5436  00E5                     ldexp@newexp:	
  5437                           ; 1 bytes @ 0x45
  5438                           
  5439  00E5                     log@exponent:	
  5440                           ; 2 bytes @ 0x45
  5441                           
  5442                           
  5443                           ; 2 bytes @ 0x45
  5444  00E5                     	ds	2
  5445  00E7                     ??_map:	
  5446  00E7                     ??_ldexp:	
  5447                           ; 1 bytes @ 0x47
  5448                           
  5449  00E7                     _map$2655:	
  5450                           ; 1 bytes @ 0x47
  5451                           
  5452                           
  5453                           ; 3 bytes @ 0x47
  5454  00E7                     	ds	2
  5455  00E9                     _ldexp$2458:	
  5456                           
  5457                           ; 3 bytes @ 0x49
  5458  00E9                     	ds	1
  5459  00EA                     ?___fttol:	
  5460  00EA                     ___fttol@f1:	
  5461                           ; 4 bytes @ 0x4A
  5462                           
  5463                           
  5464                           ; 3 bytes @ 0x4A
  5465  00EA                     	ds	4
  5466  00EE                     ??___altoft:	
  5467                           
  5468                           ; 1 bytes @ 0x4E
  5469  00EE                     	ds	2
  5470  00F0                     ??_scaleA10kPot:	
  5471  00F0                     ??_scaleiA10kPot:	
  5472                           ; 1 bytes @ 0x50
  5473                           
  5474  00F0                     ??_scaleA100kPot:	
  5475                           ; 1 bytes @ 0x50
  5476                           
  5477  00F0                     ??_scaleiA100kPot:	
  5478                           ; 1 bytes @ 0x50
  5479                           
  5480  00F0                     ??_trunc:	
  5481                           ; 1 bytes @ 0x50
  5482                           
  5483  00F0                     ??_floor:	
  5484                           ; 1 bytes @ 0x50
  5485                           
  5486                           
  5487                           	psect	cstackCOMMON
  5488  0070                     __pcstackCOMMON:	
  5489                           ; 1 bytes @ 0x50
  5490                           
  5491  0070                     ?_ConfigureOscillator:	
  5492  0070                     ?_InitApp:	
  5493                           ; 1 bytes @ 0x0
  5494                           
  5495  0070                     ?_InitializeTaps:	
  5496                           ; 1 bytes @ 0x0
  5497                           
  5498  0070                     ?_initSwitchBypass:	
  5499                           ; 1 bytes @ 0x0
  5500                           
  5501  0070                     ?_ReadSavedSettings:	
  5502                           ; 1 bytes @ 0x0
  5503                           
  5504  0070                     ?_update_mode:	
  5505                           ; 1 bytes @ 0x0
  5506                           
  5507  0070                     ?_update_selectMode:	
  5508                           ; 1 bytes @ 0x0
  5509                           
  5510  0070                     ?_updateSwitchBypass:	
  5511                           ; 1 bytes @ 0x0
  5512                           
  5513  0070                     ?_updateSwitchTap:	
  5514                           ; 1 bytes @ 0x0
  5515                           
  5516  0070                     ?_read_bottom_tactile:	
  5517                           ; 1 bytes @ 0x0
  5518                           
  5519  0070                     ?_read_top_tactile:	
  5520                           ; 1 bytes @ 0x0
  5521                           
  5522  0070                     ?_init_adc:	
  5523                           ; 1 bytes @ 0x0
  5524                           
  5525  0070                     ?_init_pwm:	
  5526                           ; 1 bytes @ 0x0
  5527                           
  5528  0070                     ?_init_timer2:	
  5529                           ; 1 bytes @ 0x0
  5530                           
  5531  0070                     ?_init_timer0:	
  5532                           ; 1 bytes @ 0x0
  5533                           
  5534  0070                     ?_solidring_tactiles:	
  5535                           ; 1 bytes @ 0x0
  5536                           
  5537  0070                     ?_ring_tactiles:	
  5538                           ; 1 bytes @ 0x0
  5539                           
  5540  0070                     ?_resetRingLEDs:	
  5541                           ; 1 bytes @ 0x0
  5542                           
  5543  0070                     ?_setPedalMode:	
  5544                           ; 1 bytes @ 0x0
  5545                           
  5546  0070                     ?_setPresetDisplay:	
  5547                           ; 1 bytes @ 0x0
  5548                           
  5549  0070                     ?_setExpressionDisplay:	
  5550                           ; 1 bytes @ 0x0
  5551                           
  5552  0070                     ?_isr:	
  5553                           ; 1 bytes @ 0x0
  5554                           
  5555  0070                     ?_main:	
  5556                           ; 1 bytes @ 0x0
  5557                           
  5558  0070                     ?_showSave:	
  5559                           ; 1 bytes @ 0x0
  5560                           
  5561  0070                     ?i1_set_leds_top:	
  5562                           ; 1 bytes @ 0x0
  5563                           
  5564  0070                     ?___awdiv:	
  5565                           ; 1 bytes @ 0x0
  5566                           
  5567  0070                     ?i1___lmul:	
  5568                           ; 2 bytes @ 0x0
  5569                           
  5570  0070                     ___awdiv@divisor:	
  5571                           ; 4 bytes @ 0x0
  5572                           
  5573  0070                     i1set_leds_top@x:	
  5574                           ; 2 bytes @ 0x0
  5575                           
  5576  0070                     i1___lmul@multiplier:	
  5577                           ; 2 bytes @ 0x0
  5578                           
  5579                           
  5580                           ; 4 bytes @ 0x0
  5581  0070                     	ds	2
  5582  0072                     ___awdiv@dividend:	
  5583  0072                     i1set_leds_top@ledState:	
  5584                           ; 2 bytes @ 0x2
  5585                           
  5586                           
  5587                           ; 2 bytes @ 0x2
  5588  0072                     	ds	2
  5589  0074                     ??___awdiv:	
  5590  0074                     ??i1_set_leds_top:	
  5591                           ; 1 bytes @ 0x4
  5592                           
  5593  0074                     i1___lmul@multiplicand:	
  5594                           ; 1 bytes @ 0x4
  5595                           
  5596                           
  5597                           ; 4 bytes @ 0x4
  5598  0074                     	ds	1
  5599  0075                     ___awdiv@counter:	
  5600                           
  5601                           ; 1 bytes @ 0x5
  5602  0075                     	ds	1
  5603  0076                     ___awdiv@sign:	
  5604                           
  5605                           ; 1 bytes @ 0x6
  5606  0076                     	ds	1
  5607  0077                     ___awdiv@quotient:	
  5608                           
  5609                           ; 2 bytes @ 0x7
  5610  0077                     	ds	1
  5611  0078                     ??i1___lmul:	
  5612  0078                     i1___lmul@product:	
  5613                           ; 1 bytes @ 0x8
  5614                           
  5615                           
  5616                           ; 4 bytes @ 0x8
  5617  0078                     	ds	4
  5618  007C                     ??i1___aldiv:	
  5619                           
  5620                           ; 1 bytes @ 0xC
  5621  007C                     	ds	1
  5622                           
  5623                           	psect	cstackBANK0
  5624  0020                     __pcstackBANK0:	
  5625  0020                     ?i1___aldiv:	
  5626  0020                     i1___aldiv@divisor:	
  5627                           ; 4 bytes @ 0x0
  5628                           
  5629                           
  5630                           ; 4 bytes @ 0x0
  5631  0020                     	ds	4
  5632  0024                     i1___aldiv@dividend:	
  5633                           
  5634                           ; 4 bytes @ 0x4
  5635  0024                     	ds	4
  5636  0028                     i1___aldiv@counter:	
  5637                           
  5638                           ; 1 bytes @ 0x8
  5639  0028                     	ds	1
  5640  0029                     i1___aldiv@sign:	
  5641                           
  5642                           ; 1 bytes @ 0x9
  5643  0029                     	ds	1
  5644  002A                     i1___aldiv@quotient:	
  5645                           
  5646                           ; 4 bytes @ 0xA
  5647  002A                     	ds	4
  5648  002E                     ?_modulation:	
  5649  002E                     modulation@x:	
  5650                           ; 4 bytes @ 0xE
  5651                           
  5652                           
  5653                           ; 4 bytes @ 0xE
  5654  002E                     	ds	4
  5655  0032                     modulation@y:	
  5656                           
  5657                           ; 4 bytes @ 0x12
  5658  0032                     	ds	4
  5659  0036                     ??_modulation:	
  5660                           
  5661                           ; 1 bytes @ 0x16
  5662  0036                     	ds	4
  5663  003A                     ??_isr:	
  5664                           
  5665                           ; 1 bytes @ 0x1A
  5666  003A                     	ds	9
  5667  0043                     isr@tmpSubDelay:	
  5668                           
  5669                           ; 2 bytes @ 0x23
  5670  0043                     	ds	2
  5671                           
  5672                           	psect	maintext
  5673  03DA                     __pmaintext:	
  5674 ;;
  5675 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5676 ;;
  5677 ;; *************** function _main *****************
  5678 ;; Defined at:
  5679 ;;		line 69 in file "main.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : B1F/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5694 ;;      Locals:         0       0       0       0       0      12       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5696 ;;      Totals:         0       0       0       0      15      12       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5697 ;;Total ram usage:       27 bytes
  5698 ;; Hardware stack levels required when called:    9
  5699 ;; This function calls:
  5700 ;;		_ConfigureOscillator
  5701 ;;		_InitApp
  5702 ;;		_InitializeTaps
  5703 ;;		_ReadSavedSettings
  5704 ;;		_USARTInit
  5705 ;;		___awtoft
  5706 ;;		___fttol
  5707 ;;		_adc_convert
  5708 ;;		_initSwitchBypass
  5709 ;;		_map
  5710 ;;		_read_bottom_tactile
  5711 ;;		_read_top_tactile
  5712 ;;		_scaleA100kPot
  5713 ;;		_scaleA10kPot
  5714 ;;		_scaleiA100kPot
  5715 ;;		_scaleiA10kPot
  5716 ;;		_set_subdivision
  5717 ;;		_updateSwitchBypass
  5718 ;;		_updateSwitchTap
  5719 ;;		_update_mode
  5720 ;;		_update_selectMode
  5721 ;; This function is called by:
  5722 ;;		Startup code after reset
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           
  5727                           ;psect for function _main
  5728  03DA                     _main:	
  5729                           
  5730                           ;main.c: 71: USARTInit(31250);
  5731                           
  5732                           ;incstack = 0
  5733                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5734  03DA  3012               	movlw	18
  5735  03DB  0021               	movlb	1	; select bank1
  5736  03DC  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5737  03DD  307A               	movlw	122
  5738  03DE  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5739  03DF  319B  2328  3183   	fcall	_USARTInit
  5740                           
  5741                           ;main.c: 72: ConfigureOscillator();
  5742  03E2  31A5  254E  3183   	fcall	_ConfigureOscillator
  5743                           
  5744                           ;main.c: 73: InitApp();
  5745  03E5  31A7  276E  3183   	fcall	_InitApp
  5746                           
  5747                           ;main.c: 75: PORTEbits.RE0 = 1;
  5748  03E8  0020               	movlb	0	; select bank0
  5749  03E9  1410               	bsf	16,0	;volatile
  5750                           
  5751                           ;main.c: 76: PORTEbits.RE1 = 1;
  5752  03EA  1490               	bsf	16,1	;volatile
  5753                           
  5754                           ;main.c: 77: PORTDbits.RD6 = 1;
  5755  03EB  170F               	bsf	15,6	;volatile
  5756                           
  5757                           ;main.c: 78: PORTDbits.RD5 = 1;
  5758  03EC  168F               	bsf	15,5	;volatile
  5759                           
  5760                           ;main.c: 79: PORTCbits.RC0 = 1;
  5761  03ED  140E               	bsf	14,0	;volatile
  5762                           
  5763                           ;main.c: 80: PORTDbits.RD7 = 1;
  5764  03EE  178F               	bsf	15,7	;volatile
  5765                           
  5766                           ;main.c: 82: InitializeTaps();
  5767  03EF  31A6  26EF  3183   	fcall	_InitializeTaps
  5768                           
  5769                           ;main.c: 83: initSwitchBypass();
  5770  03F2  31A5  2587  3183   	fcall	_initSwitchBypass
  5771                           
  5772                           ;main.c: 86: ReadSavedSettings();
  5773  03F5  3188  2002  3183   	fcall	_ReadSavedSettings
  5774  03F8                     l8209:	
  5775                           ;main.c: 88: while (1) {
  5776                           
  5777                           
  5778                           ;main.c: 91: update_mode();
  5779  03F8  3198  200B  3183   	fcall	_update_mode
  5780                           
  5781                           ;main.c: 92: update_selectMode();
  5782  03FB  319D  25E2  3183   	fcall	_update_selectMode
  5783                           
  5784                           ;main.c: 95: updateSwitchBypass();
  5785  03FE  3197  2717  3183   	fcall	_updateSwitchBypass
  5786                           
  5787                           ;main.c: 96: if (presetSaveMode != 1) {
  5788  0401  0020               	movlb	0	; select bank0
  5789  0402  0368               	decf	_presetSaveMode,w
  5790  0403  1903               	btfsc	3,2
  5791  0404  2C08               	goto	l8219
  5792                           
  5793                           ;main.c: 97: updateSwitchTap();
  5794  0405  318C  240F  3183   	fcall	_updateSwitchTap
  5795  0408                     l8219:	
  5796                           
  5797                           ;main.c: 98: }
  5798                           ;main.c: 100: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5799  0408  0020               	movlb	0	; select bank0
  5800  0409  0368               	decf	_presetSaveMode,w
  5801  040A  1903               	btfsc	3,2
  5802  040B  2C17               	goto	l8225
  5803  040C  0867               	movf	_mode2_state,w
  5804  040D  0023               	movlb	3	; select bank3
  5805  040E  065E               	xorwf	_presetModeCnst^(0+384),w
  5806  040F  1903               	skipnz
  5807  0410  2C17               	goto	l8225
  5808                           
  5809                           ;main.c: 101: read_bottom_tactile();
  5810  0411  319B  236B  3183   	fcall	_read_bottom_tactile
  5811                           
  5812                           ;main.c: 102: read_top_tactile();
  5813  0414  319C  244B  3183   	fcall	_read_top_tactile
  5814  0417                     l8225:	
  5815                           
  5816                           ;main.c: 103: }
  5817                           ;main.c: 106: knob_1_pos = adc_convert(0);
  5818  0417  3000               	movlw	0
  5819  0418  31A5  2596  3183   	fcall	_adc_convert
  5820  041B  0021               	movlb	1	; select bank1
  5821  041C  0821               	movf	(?_adc_convert+1)^(0+128),w
  5822  041D  0023               	movlb	3	; select bank3
  5823  041E  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5824  041F  0021               	movlb	1	; select bank1
  5825  0420  0820               	movf	?_adc_convert^(0+128),w
  5826  0421  0023               	movlb	3	; select bank3
  5827  0422  00AC               	movwf	_knob_1_pos^(0+384)
  5828                           
  5829                           ;main.c: 107: knob_2_pos = adc_convert(1);
  5830  0423  3001               	movlw	1
  5831  0424  31A5  2596  3183   	fcall	_adc_convert
  5832  0427  0021               	movlb	1	; select bank1
  5833  0428  0821               	movf	(?_adc_convert+1)^(0+128),w
  5834  0429  0023               	movlb	3	; select bank3
  5835  042A  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5836  042B  0021               	movlb	1	; select bank1
  5837  042C  0820               	movf	?_adc_convert^(0+128),w
  5838  042D  0023               	movlb	3	; select bank3
  5839  042E  00AE               	movwf	_knob_2_pos^(0+384)
  5840                           
  5841                           ;main.c: 108: knob_3_pos = adc_convert(2);
  5842  042F  3002               	movlw	2
  5843  0430  31A5  2596  3183   	fcall	_adc_convert
  5844  0433  0021               	movlb	1	; select bank1
  5845  0434  0821               	movf	(?_adc_convert+1)^(0+128),w
  5846  0435  0023               	movlb	3	; select bank3
  5847  0436  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5848  0437  0021               	movlb	1	; select bank1
  5849  0438  0820               	movf	?_adc_convert^(0+128),w
  5850  0439  0023               	movlb	3	; select bank3
  5851  043A  00B0               	movwf	_knob_3_pos^(0+384)
  5852                           
  5853                           ;main.c: 109: knob_4_pos = adc_convert(3);
  5854  043B  3003               	movlw	3
  5855  043C  31A5  2596  3183   	fcall	_adc_convert
  5856  043F  0021               	movlb	1	; select bank1
  5857  0440  0821               	movf	(?_adc_convert+1)^(0+128),w
  5858  0441  0023               	movlb	3	; select bank3
  5859  0442  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5860  0443  0021               	movlb	1	; select bank1
  5861  0444  0820               	movf	?_adc_convert^(0+128),w
  5862  0445  0023               	movlb	3	; select bank3
  5863  0446  00B2               	movwf	_knob_4_pos^(0+384)
  5864                           
  5865                           ;main.c: 110: knob_5_pos = adc_convert(4);
  5866  0447  3004               	movlw	4
  5867  0448  31A5  2596  3183   	fcall	_adc_convert
  5868  044B  0021               	movlb	1	; select bank1
  5869  044C  0821               	movf	(?_adc_convert+1)^(0+128),w
  5870  044D  0023               	movlb	3	; select bank3
  5871  044E  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5872  044F  0021               	movlb	1	; select bank1
  5873  0450  0820               	movf	?_adc_convert^(0+128),w
  5874  0451  0023               	movlb	3	; select bank3
  5875  0452  00B4               	movwf	_knob_5_pos^(0+384)
  5876                           
  5877                           ;main.c: 126: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5878  0453  0022               	movlb	2	; select bank2
  5879  0454  0966               	comf	_knob1_prev^(0+256),w	;volatile
  5880  0455  0023               	movlb	3	; select bank3
  5881  0456  00E1               	movwf	??_main^(0+384)
  5882  0457  0022               	movlb	2	; select bank2
  5883  0458  0967               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5884  0459  0023               	movlb	3	; select bank3
  5885  045A  00E2               	movwf	(??_main^(0+384)+1)
  5886  045B  0AE1               	incf	??_main^(0+384),f
  5887  045C  1903               	skipnz
  5888  045D  0AE2               	incf	(??_main^(0+384)+1),f
  5889  045E  082C               	movf	_knob_1_pos^(0+384),w
  5890  045F  0761               	addwf	??_main^(0+384),w
  5891  0460  00E3               	movwf	(??_main+2)^(0+384)
  5892  0461  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5893  0462  3D62               	addwfc	(??_main+1)^(0+384),w
  5894  0463  00E4               	movwf	(??_main+3)^(0+384)
  5895  0464  0864               	movf	(??_main+3)^(0+384),w
  5896  0465  3A80               	xorlw	128
  5897  0466  00E5               	movwf	(??_main+4)^(0+384)
  5898  0467  3080               	movlw	128
  5899  0468  0265               	subwf	(??_main+4)^(0+384),w
  5900  0469  1D03               	skipz
  5901  046A  2C6D               	goto	u9025
  5902  046B  3004               	movlw	4
  5903  046C  0263               	subwf	(??_main+2)^(0+384),w
  5904  046D                     u9025:	
  5905  046D  1803               	skipnc
  5906  046E  2C8B               	goto	l8239
  5907  046F  0022               	movlb	2	; select bank2
  5908  0470  0966               	comf	_knob1_prev^(0+256),w	;volatile
  5909  0471  0023               	movlb	3	; select bank3
  5910  0472  00E1               	movwf	??_main^(0+384)
  5911  0473  0022               	movlb	2	; select bank2
  5912  0474  0967               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5913  0475  0023               	movlb	3	; select bank3
  5914  0476  00E2               	movwf	(??_main^(0+384)+1)
  5915  0477  0AE1               	incf	??_main^(0+384),f
  5916  0478  1903               	skipnz
  5917  0479  0AE2               	incf	(??_main^(0+384)+1),f
  5918  047A  082C               	movf	_knob_1_pos^(0+384),w
  5919  047B  0761               	addwf	??_main^(0+384),w
  5920  047C  00E3               	movwf	(??_main+2)^(0+384)
  5921  047D  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5922  047E  3D62               	addwfc	(??_main+1)^(0+384),w
  5923  047F  00E4               	movwf	(??_main+3)^(0+384)
  5924  0480  0864               	movf	(??_main+3)^(0+384),w
  5925  0481  3A80               	xorlw	128
  5926  0482  00E5               	movwf	(??_main+4)^(0+384)
  5927  0483  307F               	movlw	127
  5928  0484  0265               	subwf	(??_main+4)^(0+384),w
  5929  0485  1D03               	skipz
  5930  0486  2C89               	goto	u9035
  5931  0487  30FD               	movlw	253
  5932  0488  0263               	subwf	(??_main+2)^(0+384),w
  5933  0489                     u9035:	
  5934  0489  1803               	skipnc
  5935  048A  2CEC               	goto	l8249
  5936  048B                     l8239:	
  5937                           
  5938                           ;main.c: 127: knob1_prev = knob_1_pos;
  5939  048B  0023               	movlb	3	; select bank3
  5940  048C  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5941  048D  0022               	movlb	2	; select bank2
  5942  048E  00E7               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5943  048F  0023               	movlb	3	; select bank3
  5944  0490  082C               	movf	_knob_1_pos^(0+384),w
  5945  0491  0022               	movlb	2	; select bank2
  5946  0492  00E6               	movwf	_knob1_prev^(0+256)	;volatile
  5947                           
  5948                           ;main.c: 128: CCPR2 = scaleA10kPot(knob1_prev);
  5949  0493  0867               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5950  0494  0021               	movlb	1	; select bank1
  5951  0495  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5952  0496  0022               	movlb	2	; select bank2
  5953  0497  0866               	movf	_knob1_prev^(0+256),w	;volatile
  5954  0498  0021               	movlb	1	; select bank1
  5955  0499  00A8               	movwf	___awtoft@c^(0+128)
  5956  049A  31A6  26A9  3183   	fcall	___awtoft
  5957  049D  0021               	movlb	1	; select bank1
  5958  049E  0828               	movf	?___awtoft^(0+128),w
  5959  049F  0024               	movlb	4	; select bank4
  5960  04A0  00D9               	movwf	_main$2651^(0+512)
  5961  04A1  0021               	movlb	1	; select bank1
  5962  04A2  0829               	movf	(?___awtoft+1)^(0+128),w
  5963  04A3  0024               	movlb	4	; select bank4
  5964  04A4  00DA               	movwf	(_main$2651+1)^(0+512)
  5965  04A5  0021               	movlb	1	; select bank1
  5966  04A6  082A               	movf	(?___awtoft+2)^(0+128),w
  5967  04A7  0024               	movlb	4	; select bank4
  5968  04A8  00DB               	movwf	(_main$2651+2)^(0+512)
  5969                           
  5970                           ;main.c: 128: CCPR2 = scaleA10kPot(knob1_prev);
  5971  04A9  0859               	movf	_main$2651^(0+512),w
  5972  04AA  0022               	movlb	2	; select bank2
  5973  04AB  00D7               	movwf	scaleA10kPot@input^(0+256)
  5974  04AC  0024               	movlb	4	; select bank4
  5975  04AD  085A               	movf	(_main$2651+1)^(0+512),w
  5976  04AE  0022               	movlb	2	; select bank2
  5977  04AF  00D8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5978  04B0  0024               	movlb	4	; select bank4
  5979  04B1  085B               	movf	(_main$2651+2)^(0+512),w
  5980  04B2  0022               	movlb	2	; select bank2
  5981  04B3  00D9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5982  04B4  319F  2780  3183   	fcall	_scaleA10kPot
  5983  04B7  0022               	movlb	2	; select bank2
  5984  04B8  0858               	movf	(?_scaleA10kPot+1)^(0+256),w
  5985  04B9  0025               	movlb	5	; select bank5
  5986  04BA  0099               	movwf	25	;volatile
  5987  04BB  0022               	movlb	2	; select bank2
  5988  04BC  0857               	movf	?_scaleA10kPot^(0+256),w
  5989  04BD  0025               	movlb	5	; select bank5
  5990  04BE  0098               	movwf	24	;volatile
  5991                           
  5992                           ;main.c: 129: CCPR3 = scaleiA10kPot(knob1_prev);
  5993  04BF  0022               	movlb	2	; select bank2
  5994  04C0  0867               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5995  04C1  0021               	movlb	1	; select bank1
  5996  04C2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5997  04C3  0022               	movlb	2	; select bank2
  5998  04C4  0866               	movf	_knob1_prev^(0+256),w	;volatile
  5999  04C5  0021               	movlb	1	; select bank1
  6000  04C6  00A8               	movwf	___awtoft@c^(0+128)
  6001  04C7  31A6  26A9  3183   	fcall	___awtoft
  6002  04CA  0021               	movlb	1	; select bank1
  6003  04CB  0828               	movf	?___awtoft^(0+128),w
  6004  04CC  0024               	movlb	4	; select bank4
  6005  04CD  00DC               	movwf	_main$2652^(0+512)
  6006  04CE  0021               	movlb	1	; select bank1
  6007  04CF  0829               	movf	(?___awtoft+1)^(0+128),w
  6008  04D0  0024               	movlb	4	; select bank4
  6009  04D1  00DD               	movwf	(_main$2652+1)^(0+512)
  6010  04D2  0021               	movlb	1	; select bank1
  6011  04D3  082A               	movf	(?___awtoft+2)^(0+128),w
  6012  04D4  0024               	movlb	4	; select bank4
  6013  04D5  00DE               	movwf	(_main$2652+2)^(0+512)
  6014                           
  6015                           ;main.c: 129: CCPR3 = scaleiA10kPot(knob1_prev);
  6016  04D6  085C               	movf	_main$2652^(0+512),w
  6017  04D7  0022               	movlb	2	; select bank2
  6018  04D8  00D7               	movwf	scaleiA10kPot@input^(0+256)
  6019  04D9  0024               	movlb	4	; select bank4
  6020  04DA  085D               	movf	(_main$2652+1)^(0+512),w
  6021  04DB  0022               	movlb	2	; select bank2
  6022  04DC  00D8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  6023  04DD  0024               	movlb	4	; select bank4
  6024  04DE  085E               	movf	(_main$2652+2)^(0+512),w
  6025  04DF  0022               	movlb	2	; select bank2
  6026  04E0  00D9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  6027  04E1  3192  225E  3183   	fcall	_scaleiA10kPot
  6028  04E4  0022               	movlb	2	; select bank2
  6029  04E5  0858               	movf	(?_scaleiA10kPot+1)^(0+256),w
  6030  04E6  0026               	movlb	6	; select bank6
  6031  04E7  0092               	movwf	18	;volatile
  6032  04E8  0022               	movlb	2	; select bank2
  6033  04E9  0857               	movf	?_scaleiA10kPot^(0+256),w
  6034  04EA  0026               	movlb	6	; select bank6
  6035  04EB  0091               	movwf	17	;volatile
  6036  04EC                     l8249:	
  6037                           
  6038                           ;main.c: 131: }
  6039                           ;main.c: 141: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  6040  04EC  0020               	movlb	0	; select bank0
  6041  04ED  094F               	comf	_knob2_prev,w	;volatile
  6042  04EE  0023               	movlb	3	; select bank3
  6043  04EF  00E1               	movwf	??_main^(0+384)
  6044  04F0  0020               	movlb	0	; select bank0
  6045  04F1  0950               	comf	_knob2_prev+1,w	;volatile
  6046  04F2  0023               	movlb	3	; select bank3
  6047  04F3  00E2               	movwf	(??_main^(0+384)+1)
  6048  04F4  0AE1               	incf	??_main^(0+384),f
  6049  04F5  1903               	skipnz
  6050  04F6  0AE2               	incf	(??_main^(0+384)+1),f
  6051  04F7  082E               	movf	_knob_2_pos^(0+384),w
  6052  04F8  0761               	addwf	??_main^(0+384),w
  6053  04F9  00E3               	movwf	(??_main+2)^(0+384)
  6054  04FA  082F               	movf	(_knob_2_pos+1)^(0+384),w
  6055  04FB  3D62               	addwfc	(??_main+1)^(0+384),w
  6056  04FC  00E4               	movwf	(??_main+3)^(0+384)
  6057  04FD  0864               	movf	(??_main+3)^(0+384),w
  6058  04FE  3A80               	xorlw	128
  6059  04FF  00E5               	movwf	(??_main+4)^(0+384)
  6060  0500  3080               	movlw	128
  6061  0501  0265               	subwf	(??_main+4)^(0+384),w
  6062  0502  1D03               	skipz
  6063  0503  2D06               	goto	u9045
  6064  0504  3004               	movlw	4
  6065  0505  0263               	subwf	(??_main+2)^(0+384),w
  6066  0506                     u9045:	
  6067  0506  1803               	skipnc
  6068  0507  2D24               	goto	l8253
  6069  0508  0020               	movlb	0	; select bank0
  6070  0509  094F               	comf	_knob2_prev,w	;volatile
  6071  050A  0023               	movlb	3	; select bank3
  6072  050B  00E1               	movwf	??_main^(0+384)
  6073  050C  0020               	movlb	0	; select bank0
  6074  050D  0950               	comf	_knob2_prev+1,w	;volatile
  6075  050E  0023               	movlb	3	; select bank3
  6076  050F  00E2               	movwf	(??_main^(0+384)+1)
  6077  0510  0AE1               	incf	??_main^(0+384),f
  6078  0511  1903               	skipnz
  6079  0512  0AE2               	incf	(??_main^(0+384)+1),f
  6080  0513  082E               	movf	_knob_2_pos^(0+384),w
  6081  0514  0761               	addwf	??_main^(0+384),w
  6082  0515  00E3               	movwf	(??_main+2)^(0+384)
  6083  0516  082F               	movf	(_knob_2_pos+1)^(0+384),w
  6084  0517  3D62               	addwfc	(??_main+1)^(0+384),w
  6085  0518  00E4               	movwf	(??_main+3)^(0+384)
  6086  0519  0864               	movf	(??_main+3)^(0+384),w
  6087  051A  3A80               	xorlw	128
  6088  051B  00E5               	movwf	(??_main+4)^(0+384)
  6089  051C  307F               	movlw	127
  6090  051D  0265               	subwf	(??_main+4)^(0+384),w
  6091  051E  1D03               	skipz
  6092  051F  2D22               	goto	u9055
  6093  0520  30FD               	movlw	253
  6094  0521  0263               	subwf	(??_main+2)^(0+384),w
  6095  0522                     u9055:	
  6096  0522  1803               	skipnc
  6097  0523  2D85               	goto	l8263
  6098  0524                     l8253:	
  6099                           
  6100                           ;main.c: 142: knob2_prev = knob_2_pos;
  6101  0524  0023               	movlb	3	; select bank3
  6102  0525  082F               	movf	(_knob_2_pos+1)^(0+384),w
  6103  0526  0020               	movlb	0	; select bank0
  6104  0527  00D0               	movwf	_knob2_prev+1	;volatile
  6105  0528  0023               	movlb	3	; select bank3
  6106  0529  082E               	movf	_knob_2_pos^(0+384),w
  6107  052A  0020               	movlb	0	; select bank0
  6108  052B  00CF               	movwf	_knob2_prev	;volatile
  6109                           
  6110                           ;main.c: 143: CCPR4 = scaleA100kPot(knob2_prev);
  6111  052C  0850               	movf	_knob2_prev+1,w	;volatile
  6112  052D  0021               	movlb	1	; select bank1
  6113  052E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6114  052F  0020               	movlb	0	; select bank0
  6115  0530  084F               	movf	_knob2_prev,w	;volatile
  6116  0531  0021               	movlb	1	; select bank1
  6117  0532  00A8               	movwf	___awtoft@c^(0+128)
  6118  0533  31A6  26A9  3183   	fcall	___awtoft
  6119  0536  0021               	movlb	1	; select bank1
  6120  0537  0828               	movf	?___awtoft^(0+128),w
  6121  0538  0024               	movlb	4	; select bank4
  6122  0539  00DF               	movwf	_main$2653^(0+512)
  6123  053A  0021               	movlb	1	; select bank1
  6124  053B  0829               	movf	(?___awtoft+1)^(0+128),w
  6125  053C  0024               	movlb	4	; select bank4
  6126  053D  00E0               	movwf	(_main$2653+1)^(0+512)
  6127  053E  0021               	movlb	1	; select bank1
  6128  053F  082A               	movf	(?___awtoft+2)^(0+128),w
  6129  0540  0024               	movlb	4	; select bank4
  6130  0541  00E1               	movwf	(_main$2653+2)^(0+512)
  6131                           
  6132                           ;main.c: 143: CCPR4 = scaleA100kPot(knob2_prev);
  6133  0542  085F               	movf	_main$2653^(0+512),w
  6134  0543  0022               	movlb	2	; select bank2
  6135  0544  00D7               	movwf	scaleA100kPot@input^(0+256)
  6136  0545  0024               	movlb	4	; select bank4
  6137  0546  0860               	movf	(_main$2653+1)^(0+512),w
  6138  0547  0022               	movlb	2	; select bank2
  6139  0548  00D8               	movwf	(scaleA100kPot@input+1)^(0+256)
  6140  0549  0024               	movlb	4	; select bank4
  6141  054A  0861               	movf	(_main$2653+2)^(0+512),w
  6142  054B  0022               	movlb	2	; select bank2
  6143  054C  00D9               	movwf	(scaleA100kPot@input+2)^(0+256)
  6144  054D  319F  2700  3183   	fcall	_scaleA100kPot
  6145  0550  0022               	movlb	2	; select bank2
  6146  0551  0858               	movf	(?_scaleA100kPot+1)^(0+256),w
  6147  0552  0026               	movlb	6	; select bank6
  6148  0553  0099               	movwf	25	;volatile
  6149  0554  0022               	movlb	2	; select bank2
  6150  0555  0857               	movf	?_scaleA100kPot^(0+256),w
  6151  0556  0026               	movlb	6	; select bank6
  6152  0557  0098               	movwf	24	;volatile
  6153                           
  6154                           ;main.c: 144: CCPR5 = scaleiA100kPot(knob2_prev);
  6155  0558  0020               	movlb	0	; select bank0
  6156  0559  0850               	movf	_knob2_prev+1,w	;volatile
  6157  055A  0021               	movlb	1	; select bank1
  6158  055B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6159  055C  0020               	movlb	0	; select bank0
  6160  055D  084F               	movf	_knob2_prev,w	;volatile
  6161  055E  0021               	movlb	1	; select bank1
  6162  055F  00A8               	movwf	___awtoft@c^(0+128)
  6163  0560  31A6  26A9  3183   	fcall	___awtoft
  6164  0563  0021               	movlb	1	; select bank1
  6165  0564  0828               	movf	?___awtoft^(0+128),w
  6166  0565  0024               	movlb	4	; select bank4
  6167  0566  00E2               	movwf	_main$2654^(0+512)
  6168  0567  0021               	movlb	1	; select bank1
  6169  0568  0829               	movf	(?___awtoft+1)^(0+128),w
  6170  0569  0024               	movlb	4	; select bank4
  6171  056A  00E3               	movwf	(_main$2654+1)^(0+512)
  6172  056B  0021               	movlb	1	; select bank1
  6173  056C  082A               	movf	(?___awtoft+2)^(0+128),w
  6174  056D  0024               	movlb	4	; select bank4
  6175  056E  00E4               	movwf	(_main$2654+2)^(0+512)
  6176                           
  6177                           ;main.c: 144: CCPR5 = scaleiA100kPot(knob2_prev);
  6178  056F  0862               	movf	_main$2654^(0+512),w
  6179  0570  0022               	movlb	2	; select bank2
  6180  0571  00D7               	movwf	scaleiA100kPot@input^(0+256)
  6181  0572  0024               	movlb	4	; select bank4
  6182  0573  0863               	movf	(_main$2654+1)^(0+512),w
  6183  0574  0022               	movlb	2	; select bank2
  6184  0575  00D8               	movwf	(scaleiA100kPot@input+1)^(0+256)
  6185  0576  0024               	movlb	4	; select bank4
  6186  0577  0864               	movf	(_main$2654+2)^(0+512),w
  6187  0578  0022               	movlb	2	; select bank2
  6188  0579  00D9               	movwf	(scaleiA100kPot@input+2)^(0+256)
  6189  057A  3190  2049  3183   	fcall	_scaleiA100kPot
  6190  057D  0022               	movlb	2	; select bank2
  6191  057E  0858               	movf	(?_scaleiA100kPot+1)^(0+256),w
  6192  057F  0026               	movlb	6	; select bank6
  6193  0580  009D               	movwf	29	;volatile
  6194  0581  0022               	movlb	2	; select bank2
  6195  0582  0857               	movf	?_scaleiA100kPot^(0+256),w
  6196  0583  0026               	movlb	6	; select bank6
  6197  0584  009C               	movwf	28	;volatile
  6198  0585                     l8263:	
  6199                           
  6200                           ;main.c: 145: }
  6201                           ;main.c: 155: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  6202  0585  0023               	movlb	3	; select bank3
  6203  0586  094E               	comf	_knob3_prev^(0+384),w	;volatile
  6204  0587  00E1               	movwf	??_main^(0+384)
  6205  0588  094F               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  6206  0589  00E2               	movwf	(??_main^(0+384)+1)
  6207  058A  0AE1               	incf	??_main^(0+384),f
  6208  058B  1903               	skipnz
  6209  058C  0AE2               	incf	(??_main^(0+384)+1),f
  6210  058D  0830               	movf	_knob_3_pos^(0+384),w
  6211  058E  0761               	addwf	??_main^(0+384),w
  6212  058F  00E3               	movwf	(??_main+2)^(0+384)
  6213  0590  0831               	movf	(_knob_3_pos+1)^(0+384),w
  6214  0591  3D62               	addwfc	(??_main+1)^(0+384),w
  6215  0592  00E4               	movwf	(??_main+3)^(0+384)
  6216  0593  0864               	movf	(??_main+3)^(0+384),w
  6217  0594  3A80               	xorlw	128
  6218  0595  00E5               	movwf	(??_main+4)^(0+384)
  6219  0596  3080               	movlw	128
  6220  0597  0265               	subwf	(??_main+4)^(0+384),w
  6221  0598  1D03               	skipz
  6222  0599  2D9C               	goto	u9065
  6223  059A  3004               	movlw	4
  6224  059B  0263               	subwf	(??_main+2)^(0+384),w
  6225  059C                     u9065:	
  6226  059C  1803               	skipnc
  6227  059D  2DB7               	goto	l8267
  6228  059E  0023               	movlb	3	; select bank3
  6229  059F  094E               	comf	_knob3_prev^(0+384),w	;volatile
  6230  05A0  00E1               	movwf	??_main^(0+384)
  6231  05A1  094F               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  6232  05A2  00E2               	movwf	(??_main^(0+384)+1)
  6233  05A3  0AE1               	incf	??_main^(0+384),f
  6234  05A4  1903               	skipnz
  6235  05A5  0AE2               	incf	(??_main^(0+384)+1),f
  6236  05A6  0830               	movf	_knob_3_pos^(0+384),w
  6237  05A7  0761               	addwf	??_main^(0+384),w
  6238  05A8  00E3               	movwf	(??_main+2)^(0+384)
  6239  05A9  0831               	movf	(_knob_3_pos+1)^(0+384),w
  6240  05AA  3D62               	addwfc	(??_main+1)^(0+384),w
  6241  05AB  00E4               	movwf	(??_main+3)^(0+384)
  6242  05AC  0864               	movf	(??_main+3)^(0+384),w
  6243  05AD  3A80               	xorlw	128
  6244  05AE  00E5               	movwf	(??_main+4)^(0+384)
  6245  05AF  307F               	movlw	127
  6246  05B0  0265               	subwf	(??_main+4)^(0+384),w
  6247  05B1  1D03               	skipz
  6248  05B2  2DB5               	goto	u9075
  6249  05B3  30FD               	movlw	253
  6250  05B4  0263               	subwf	(??_main+2)^(0+384),w
  6251  05B5                     u9075:	
  6252  05B5  1803               	skipnc
  6253  05B6  2DFA               	goto	l8271
  6254  05B7                     l8267:	
  6255                           
  6256                           ;main.c: 156: knob3_prev = knob_3_pos;
  6257  05B7  0023               	movlb	3	; select bank3
  6258  05B8  0831               	movf	(_knob_3_pos+1)^(0+384),w
  6259  05B9  00CF               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  6260  05BA  0830               	movf	_knob_3_pos^(0+384),w
  6261  05BB  00CE               	movwf	_knob3_prev^(0+384)	;volatile
  6262                           
  6263                           ;main.c: 157: symmetry = (int) map(knob3_prev, 0, 1023, 0, 360);
  6264  05BC  3000               	movlw	0
  6265  05BD  0021               	movlb	1	; select bank1
  6266  05BE  00E4               	movwf	map@out_max^(0+128)
  6267  05BF  30B4               	movlw	180
  6268  05C0  00E5               	movwf	(map@out_max+1)^(0+128)
  6269  05C1  3043               	movlw	67
  6270  05C2  00E6               	movwf	(map@out_max+2)^(0+128)
  6271  05C3  3000               	movlw	0
  6272  05C4  00E1               	movwf	map@out_min^(0+128)
  6273  05C5  3000               	movlw	0
  6274  05C6  00E2               	movwf	(map@out_min+1)^(0+128)
  6275  05C7  3000               	movlw	0
  6276  05C8  00E3               	movwf	(map@out_min+2)^(0+128)
  6277  05C9  30C0               	movlw	192
  6278  05CA  00DE               	movwf	map@in_max^(0+128)
  6279  05CB  307F               	movlw	127
  6280  05CC  00DF               	movwf	(map@in_max+1)^(0+128)
  6281  05CD  3044               	movlw	68
  6282  05CE  00E0               	movwf	(map@in_max+2)^(0+128)
  6283  05CF  3000               	movlw	0
  6284  05D0  00DB               	movwf	map@in_min^(0+128)
  6285  05D1  3000               	movlw	0
  6286  05D2  00DC               	movwf	(map@in_min+1)^(0+128)
  6287  05D3  3000               	movlw	0
  6288  05D4  00DD               	movwf	(map@in_min+2)^(0+128)
  6289  05D5  0023               	movlb	3	; select bank3
  6290  05D6  084F               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  6291  05D7  0021               	movlb	1	; select bank1
  6292  05D8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6293  05D9  0023               	movlb	3	; select bank3
  6294  05DA  084E               	movf	_knob3_prev^(0+384),w	;volatile
  6295  05DB  0021               	movlb	1	; select bank1
  6296  05DC  00A8               	movwf	___awtoft@c^(0+128)
  6297  05DD  31A6  26A9  3183   	fcall	___awtoft
  6298  05E0  0021               	movlb	1	; select bank1
  6299  05E1  0828               	movf	?___awtoft^(0+128),w
  6300  05E2  00D8               	movwf	map@x^(0+128)
  6301  05E3  0829               	movf	(?___awtoft+1)^(0+128),w
  6302  05E4  00D9               	movwf	(map@x+1)^(0+128)
  6303  05E5  082A               	movf	(?___awtoft+2)^(0+128),w
  6304  05E6  00DA               	movwf	(map@x+2)^(0+128)
  6305  05E7  3191  21D3  3183   	fcall	_map
  6306  05EA  0021               	movlb	1	; select bank1
  6307  05EB  0858               	movf	?_map^(0+128),w
  6308  05EC  00EA               	movwf	___fttol@f1^(0+128)
  6309  05ED  0859               	movf	(?_map+1)^(0+128),w
  6310  05EE  00EB               	movwf	(___fttol@f1+1)^(0+128)
  6311  05EF  085A               	movf	(?_map+2)^(0+128),w
  6312  05F0  00EC               	movwf	(___fttol@f1+2)^(0+128)
  6313  05F1  3192  22F8  3183   	fcall	___fttol
  6314  05F4  0021               	movlb	1	; select bank1
  6315  05F5  086A               	movf	?___fttol^(0+128),w
  6316  05F6  0023               	movlb	3	; select bank3
  6317  05F7  00E1               	movwf	??_main^(0+384)
  6318  05F8  0861               	movf	??_main^(0+384),w
  6319  05F9  00E0               	movwf	_symmetry^(0+384)
  6320  05FA                     l8271:	
  6321                           
  6322                           ;main.c: 159: }
  6323                           ;main.c: 170: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6324  05FA  0023               	movlb	3	; select bank3
  6325  05FB  0950               	comf	_knob4_prev^(0+384),w	;volatile
  6326  05FC  00E1               	movwf	??_main^(0+384)
  6327  05FD  0951               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6328  05FE  00E2               	movwf	(??_main^(0+384)+1)
  6329  05FF  0AE1               	incf	??_main^(0+384),f
  6330  0600  1903               	skipnz
  6331  0601  0AE2               	incf	(??_main^(0+384)+1),f
  6332  0602  0832               	movf	_knob_4_pos^(0+384),w
  6333  0603  0761               	addwf	??_main^(0+384),w
  6334  0604  00E3               	movwf	(??_main+2)^(0+384)
  6335  0605  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6336  0606  3D62               	addwfc	(??_main+1)^(0+384),w
  6337  0607  00E4               	movwf	(??_main+3)^(0+384)
  6338  0608  0864               	movf	(??_main+3)^(0+384),w
  6339  0609  3A80               	xorlw	128
  6340  060A  00E5               	movwf	(??_main+4)^(0+384)
  6341  060B  3080               	movlw	128
  6342  060C  0265               	subwf	(??_main+4)^(0+384),w
  6343  060D  1D03               	skipz
  6344  060E  2E11               	goto	u9085
  6345  060F  3004               	movlw	4
  6346  0610  0263               	subwf	(??_main+2)^(0+384),w
  6347  0611                     u9085:	
  6348  0611  1803               	skipnc
  6349  0612  2E2C               	goto	l8275
  6350  0613  0023               	movlb	3	; select bank3
  6351  0614  0950               	comf	_knob4_prev^(0+384),w	;volatile
  6352  0615  00E1               	movwf	??_main^(0+384)
  6353  0616  0951               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6354  0617  00E2               	movwf	(??_main^(0+384)+1)
  6355  0618  0AE1               	incf	??_main^(0+384),f
  6356  0619  1903               	skipnz
  6357  061A  0AE2               	incf	(??_main^(0+384)+1),f
  6358  061B  0832               	movf	_knob_4_pos^(0+384),w
  6359  061C  0761               	addwf	??_main^(0+384),w
  6360  061D  00E3               	movwf	(??_main+2)^(0+384)
  6361  061E  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6362  061F  3D62               	addwfc	(??_main+1)^(0+384),w
  6363  0620  00E4               	movwf	(??_main+3)^(0+384)
  6364  0621  0864               	movf	(??_main+3)^(0+384),w
  6365  0622  3A80               	xorlw	128
  6366  0623  00E5               	movwf	(??_main+4)^(0+384)
  6367  0624  307F               	movlw	127
  6368  0625  0265               	subwf	(??_main+4)^(0+384),w
  6369  0626  1D03               	skipz
  6370  0627  2E2A               	goto	u9095
  6371  0628  30FD               	movlw	253
  6372  0629  0263               	subwf	(??_main+2)^(0+384),w
  6373  062A                     u9095:	
  6374  062A  1803               	skipnc
  6375  062B  2E71               	goto	l8279
  6376  062C                     l8275:	
  6377                           
  6378                           ;main.c: 171: knob4_prev = knob_4_pos;
  6379  062C  0023               	movlb	3	; select bank3
  6380  062D  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6381  062E  00D1               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6382  062F  0832               	movf	_knob_4_pos^(0+384),w
  6383  0630  00D0               	movwf	_knob4_prev^(0+384)	;volatile
  6384                           
  6385                           ;main.c: 173: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  6386  0631  3000               	movlw	0
  6387  0632  0021               	movlb	1	; select bank1
  6388  0633  00E4               	movwf	map@out_max^(0+128)
  6389  0634  303C               	movlw	60
  6390  0635  00E5               	movwf	(map@out_max+1)^(0+128)
  6391  0636  3042               	movlw	66
  6392  0637  00E6               	movwf	(map@out_max+2)^(0+128)
  6393  0638  3000               	movlw	0
  6394  0639  00E1               	movwf	map@out_min^(0+128)
  6395  063A  3040               	movlw	64
  6396  063B  00E2               	movwf	(map@out_min+1)^(0+128)
  6397  063C  3040               	movlw	64
  6398  063D  00E3               	movwf	(map@out_min+2)^(0+128)
  6399  063E  30C0               	movlw	192
  6400  063F  00DE               	movwf	map@in_max^(0+128)
  6401  0640  307F               	movlw	127
  6402  0641  00DF               	movwf	(map@in_max+1)^(0+128)
  6403  0642  3044               	movlw	68
  6404  0643  00E0               	movwf	(map@in_max+2)^(0+128)
  6405  0644  3000               	movlw	0
  6406  0645  00DB               	movwf	map@in_min^(0+128)
  6407  0646  3000               	movlw	0
  6408  0647  00DC               	movwf	(map@in_min+1)^(0+128)
  6409  0648  3000               	movlw	0
  6410  0649  00DD               	movwf	(map@in_min+2)^(0+128)
  6411  064A  0023               	movlb	3	; select bank3
  6412  064B  0851               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6413  064C  0021               	movlb	1	; select bank1
  6414  064D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6415  064E  0023               	movlb	3	; select bank3
  6416  064F  0850               	movf	_knob4_prev^(0+384),w	;volatile
  6417  0650  0021               	movlb	1	; select bank1
  6418  0651  00A8               	movwf	___awtoft@c^(0+128)
  6419  0652  31A6  26A9  3183   	fcall	___awtoft
  6420  0655  0021               	movlb	1	; select bank1
  6421  0656  0828               	movf	?___awtoft^(0+128),w
  6422  0657  00D8               	movwf	map@x^(0+128)
  6423  0658  0829               	movf	(?___awtoft+1)^(0+128),w
  6424  0659  00D9               	movwf	(map@x+1)^(0+128)
  6425  065A  082A               	movf	(?___awtoft+2)^(0+128),w
  6426  065B  00DA               	movwf	(map@x+2)^(0+128)
  6427  065C  3191  21D3  3183   	fcall	_map
  6428  065F  0021               	movlb	1	; select bank1
  6429  0660  0858               	movf	?_map^(0+128),w
  6430  0661  00EA               	movwf	___fttol@f1^(0+128)
  6431  0662  0859               	movf	(?_map+1)^(0+128),w
  6432  0663  00EB               	movwf	(___fttol@f1+1)^(0+128)
  6433  0664  085A               	movf	(?_map+2)^(0+128),w
  6434  0665  00EC               	movwf	(___fttol@f1+2)^(0+128)
  6435  0666  3192  22F8  3183   	fcall	___fttol
  6436  0669  0021               	movlb	1	; select bank1
  6437  066A  086B               	movf	(?___fttol^(0+128)+1),w
  6438  066B  0023               	movlb	3	; select bank3
  6439  066C  00D5               	movwf	(_mod_delay_time+1)^(0+384)
  6440  066D  0021               	movlb	1	; select bank1
  6441  066E  086A               	movf	?___fttol^(0+128),w
  6442  066F  0023               	movlb	3	; select bank3
  6443  0670  00D4               	movwf	_mod_delay_time^(0+384)
  6444  0671                     l8279:	
  6445                           
  6446                           ;main.c: 174: }
  6447                           ;main.c: 182: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6448  0671  0023               	movlb	3	; select bank3
  6449  0672  0952               	comf	_knob5_prev^(0+384),w	;volatile
  6450  0673  00E1               	movwf	??_main^(0+384)
  6451  0674  0953               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6452  0675  00E2               	movwf	(??_main^(0+384)+1)
  6453  0676  0AE1               	incf	??_main^(0+384),f
  6454  0677  1903               	skipnz
  6455  0678  0AE2               	incf	(??_main^(0+384)+1),f
  6456  0679  0834               	movf	_knob_5_pos^(0+384),w
  6457  067A  0761               	addwf	??_main^(0+384),w
  6458  067B  00E3               	movwf	(??_main+2)^(0+384)
  6459  067C  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6460  067D  3D62               	addwfc	(??_main+1)^(0+384),w
  6461  067E  00E4               	movwf	(??_main+3)^(0+384)
  6462  067F  0864               	movf	(??_main+3)^(0+384),w
  6463  0680  3A80               	xorlw	128
  6464  0681  00E5               	movwf	(??_main+4)^(0+384)
  6465  0682  3080               	movlw	128
  6466  0683  0265               	subwf	(??_main+4)^(0+384),w
  6467  0684  1D03               	skipz
  6468  0685  2E88               	goto	u9105
  6469  0686  3004               	movlw	4
  6470  0687  0263               	subwf	(??_main+2)^(0+384),w
  6471  0688                     u9105:	
  6472  0688  1803               	skipnc
  6473  0689  2EA3               	goto	l8283
  6474  068A  0023               	movlb	3	; select bank3
  6475  068B  0952               	comf	_knob5_prev^(0+384),w	;volatile
  6476  068C  00E1               	movwf	??_main^(0+384)
  6477  068D  0953               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6478  068E  00E2               	movwf	(??_main^(0+384)+1)
  6479  068F  0AE1               	incf	??_main^(0+384),f
  6480  0690  1903               	skipnz
  6481  0691  0AE2               	incf	(??_main^(0+384)+1),f
  6482  0692  0834               	movf	_knob_5_pos^(0+384),w
  6483  0693  0761               	addwf	??_main^(0+384),w
  6484  0694  00E3               	movwf	(??_main+2)^(0+384)
  6485  0695  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6486  0696  3D62               	addwfc	(??_main+1)^(0+384),w
  6487  0697  00E4               	movwf	(??_main+3)^(0+384)
  6488  0698  0864               	movf	(??_main+3)^(0+384),w
  6489  0699  3A80               	xorlw	128
  6490  069A  00E5               	movwf	(??_main+4)^(0+384)
  6491  069B  307F               	movlw	127
  6492  069C  0265               	subwf	(??_main+4)^(0+384),w
  6493  069D  1D03               	skipz
  6494  069E  2EA1               	goto	u9115
  6495  069F  30FD               	movlw	253
  6496  06A0  0263               	subwf	(??_main+2)^(0+384),w
  6497  06A1                     u9115:	
  6498  06A1  1803               	skipnc
  6499  06A2  2EE8               	goto	l8287
  6500  06A3                     l8283:	
  6501                           
  6502                           ;main.c: 183: knob5_prev = knob_5_pos;
  6503  06A3  0023               	movlb	3	; select bank3
  6504  06A4  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6505  06A5  00D3               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6506  06A6  0834               	movf	_knob_5_pos^(0+384),w
  6507  06A7  00D2               	movwf	_knob5_prev^(0+384)	;volatile
  6508                           
  6509                           ;main.c: 184: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6510  06A8  3000               	movlw	0
  6511  06A9  0021               	movlb	1	; select bank1
  6512  06AA  00E4               	movwf	map@out_max^(0+128)
  6513  06AB  3000               	movlw	0
  6514  06AC  00E5               	movwf	(map@out_max+1)^(0+128)
  6515  06AD  3000               	movlw	0
  6516  06AE  00E6               	movwf	(map@out_max+2)^(0+128)
  6517  06AF  3060               	movlw	96
  6518  06B0  00E1               	movwf	map@out_min^(0+128)
  6519  06B1  309F               	movlw	159
  6520  06B2  00E2               	movwf	(map@out_min+1)^(0+128)
  6521  06B3  3044               	movlw	68
  6522  06B4  00E3               	movwf	(map@out_min+2)^(0+128)
  6523  06B5  30C0               	movlw	192
  6524  06B6  00DE               	movwf	map@in_max^(0+128)
  6525  06B7  307F               	movlw	127
  6526  06B8  00DF               	movwf	(map@in_max+1)^(0+128)
  6527  06B9  3044               	movlw	68
  6528  06BA  00E0               	movwf	(map@in_max+2)^(0+128)
  6529  06BB  3000               	movlw	0
  6530  06BC  00DB               	movwf	map@in_min^(0+128)
  6531  06BD  3000               	movlw	0
  6532  06BE  00DC               	movwf	(map@in_min+1)^(0+128)
  6533  06BF  3000               	movlw	0
  6534  06C0  00DD               	movwf	(map@in_min+2)^(0+128)
  6535  06C1  0023               	movlb	3	; select bank3
  6536  06C2  0853               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6537  06C3  0021               	movlb	1	; select bank1
  6538  06C4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6539  06C5  0023               	movlb	3	; select bank3
  6540  06C6  0852               	movf	_knob5_prev^(0+384),w	;volatile
  6541  06C7  0021               	movlb	1	; select bank1
  6542  06C8  00A8               	movwf	___awtoft@c^(0+128)
  6543  06C9  31A6  26A9  3183   	fcall	___awtoft
  6544  06CC  0021               	movlb	1	; select bank1
  6545  06CD  0828               	movf	?___awtoft^(0+128),w
  6546  06CE  00D8               	movwf	map@x^(0+128)
  6547  06CF  0829               	movf	(?___awtoft+1)^(0+128),w
  6548  06D0  00D9               	movwf	(map@x+1)^(0+128)
  6549  06D1  082A               	movf	(?___awtoft+2)^(0+128),w
  6550  06D2  00DA               	movwf	(map@x+2)^(0+128)
  6551  06D3  3191  21D3  3183   	fcall	_map
  6552  06D6  0021               	movlb	1	; select bank1
  6553  06D7  0858               	movf	?_map^(0+128),w
  6554  06D8  00EA               	movwf	___fttol@f1^(0+128)
  6555  06D9  0859               	movf	(?_map+1)^(0+128),w
  6556  06DA  00EB               	movwf	(___fttol@f1+1)^(0+128)
  6557  06DB  085A               	movf	(?_map+2)^(0+128),w
  6558  06DC  00EC               	movwf	(___fttol@f1+2)^(0+128)
  6559  06DD  3192  22F8  3183   	fcall	___fttol
  6560  06E0  0021               	movlb	1	; select bank1
  6561  06E1  086B               	movf	(?___fttol^(0+128)+1),w
  6562  06E2  0024               	movlb	4	; select bank4
  6563  06E3  00C8               	movwf	(_adjusted_pot_value+1)^(0+512)
  6564  06E4  0021               	movlb	1	; select bank1
  6565  06E5  086A               	movf	?___fttol^(0+128),w
  6566  06E6  0024               	movlb	4	; select bank4
  6567  06E7  00C7               	movwf	_adjusted_pot_value^(0+512)
  6568  06E8                     l8287:	
  6569                           
  6570                           ;main.c: 186: }
  6571                           ;main.c: 189: if (delay_time_changed == 1) {
  6572  06E8  0023               	movlb	3	; select bank3
  6573  06E9  034C               	decf	_delay_time_changed^(0+384),w
  6574  06EA  044D               	iorwf	(_delay_time_changed+1)^(0+384),w
  6575  06EB  1D03               	btfss	3,2
  6576  06EC  2BF8               	goto	l8209
  6577                           
  6578                           ;main.c: 190: delay_time = baseline_delay_time;
  6579  06ED  0020               	movlb	0	; select bank0
  6580  06EE  0848               	movf	_baseline_delay_time+3,w	;volatile
  6581  06EF  00CC               	movwf	_delay_time+3	;volatile
  6582  06F0  0847               	movf	_baseline_delay_time+2,w	;volatile
  6583  06F1  00CB               	movwf	_delay_time+2	;volatile
  6584  06F2  0846               	movf	_baseline_delay_time+1,w	;volatile
  6585  06F3  00CA               	movwf	_delay_time+1	;volatile
  6586  06F4  0845               	movf	_baseline_delay_time,w	;volatile
  6587  06F5  00C9               	movwf	_delay_time	;volatile
  6588                           
  6589                           ;main.c: 191: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6590  06F6  0846               	movf	_baseline_delay_time+1,w	;volatile
  6591  06F7  0022               	movlb	2	; select bank2
  6592  06F8  00B9               	movwf	(set_subdivision@x+1)^(0+256)
  6593  06F9  0020               	movlb	0	; select bank0
  6594  06FA  0845               	movf	_baseline_delay_time,w	;volatile
  6595  06FB  0022               	movlb	2	; select bank2
  6596  06FC  00B8               	movwf	set_subdivision@x^(0+256)
  6597  06FD  0020               	movlb	0	; select bank0
  6598  06FE  0854               	movf	_top_push_state+1,w
  6599  06FF  0022               	movlb	2	; select bank2
  6600  0700  00BB               	movwf	(set_subdivision@y+1)^(0+256)
  6601  0701  0020               	movlb	0	; select bank0
  6602  0702  0853               	movf	_top_push_state,w
  6603  0703  0022               	movlb	2	; select bank2
  6604  0704  00BA               	movwf	set_subdivision@y^(0+256)
  6605  0705  3196  265B  3183   	fcall	_set_subdivision
  6606  0708  0022               	movlb	2	; select bank2
  6607  0709  0838               	movf	?_set_subdivision^(0+256),w
  6608  070A  0020               	movlb	0	; select bank0
  6609  070B  00C9               	movwf	_delay_time	;volatile
  6610  070C  0022               	movlb	2	; select bank2
  6611  070D  0839               	movf	(?_set_subdivision+1)^(0+256),w
  6612  070E  0020               	movlb	0	; select bank0
  6613  070F  00CA               	movwf	_delay_time+1	;volatile
  6614  0710  0D89               	rlf	9,f
  6615  0711  3B89               	subwfb	9,f
  6616  0712  0989               	comf	9,f
  6617  0713  00CB               	movwf	_delay_time+2	;volatile
  6618  0714  00CC               	movwf	_delay_time+3	;volatile
  6619                           
  6620                           ;main.c: 192: reset_sub_delay = 1;
  6621  0715  3001               	movlw	1
  6622  0716  0024               	movlb	4	; select bank4
  6623  0717  00D5               	movwf	_reset_sub_delay^(0+512)
  6624  0718  3000               	movlw	0
  6625  0719  00D6               	movwf	(_reset_sub_delay^(0+512)+1)
  6626                           
  6627                           ;main.c: 193: delayfound = 0;
  6628  071A  01D1               	clrf	_delayfound^(0+512)
  6629  071B  01D2               	clrf	(_delayfound+1)^(0+512)
  6630                           
  6631                           ;main.c: 194: delay_counter = 0;
  6632  071C  0023               	movlb	3	; select bank3
  6633  071D  01A8               	clrf	_delay_counter^(0+384)	;volatile
  6634  071E  01A9               	clrf	(_delay_counter+1)^(0+384)	;volatile
  6635  071F                     l8305:	
  6636                           ;main.c: 196: while (delayfound == 0) {
  6637                           
  6638  071F  0024               	movlb	4	; select bank4
  6639  0720  0851               	movf	_delayfound^(0+512),w
  6640  0721  0452               	iorwf	(_delayfound+1)^(0+512),w
  6641  0722  1D03               	btfss	3,2
  6642  0723  2F79               	goto	l8307
  6643                           
  6644                           ;main.c: 197: if (delayArray[delay_counter] <= delay_time * 2) {
  6645  0724  0023               	movlb	3	; select bank3
  6646  0725  0829               	movf	(_delay_counter+1)^(0+384),w	;volatile
  6647  0726  00E2               	movwf	(??_main^(0+384)+1)
  6648  0727  0828               	movf	_delay_counter^(0+384),w	;volatile
  6649  0728  00E1               	movwf	??_main^(0+384)
  6650  0729  35E1               	lslf	??_main^(0+384),f
  6651  072A  0DE2               	rlf	(??_main^(0+384)+1),f
  6652  072B  30E8               	movlw	232
  6653  072C  00E3               	movwf	(??_main+2)^(0+384)
  6654  072D  3023               	movlw	35
  6655  072E  00E4               	movwf	((??_main+2)^(0+384)+1)
  6656  072F  0861               	movf	??_main^(0+384),w
  6657  0730  0763               	addwf	(??_main+2)^(0+384),w
  6658  0731  0086               	movwf	6
  6659  0732  0862               	movf	(??_main+1)^(0+384),w
  6660  0733  3D64               	addwfc	(??_main+3)^(0+384),w
  6661  0734  0087               	movwf	7
  6662  0735  3F40               	moviw [0]fsr1
  6663  0736  00E5               	movwf	(??_main+4)^(0+384)
  6664  0737  3F41               	moviw [1]fsr1
  6665  0738  00E6               	movwf	((??_main+4)^(0+384)+1)
  6666  0739  0865               	movf	(??_main+4)^(0+384),w
  6667  073A  00E7               	movwf	(??_main+6)^(0+384)
  6668  073B  0866               	movf	(??_main+5)^(0+384),w
  6669  073C  00E8               	movwf	((??_main+6)^(0+384)+1)
  6670  073D  3000               	movlw	0
  6671  073E  1BE8               	btfsc	((??_main+6)^(0+384)+1),7
  6672  073F  30FF               	movlw	255
  6673  0740  00E9               	movwf	((??_main+6)^(0+384)+2)
  6674  0741  00EA               	movwf	((??_main+6)^(0+384)+3)
  6675  0742  0020               	movlb	0	; select bank0
  6676  0743  0849               	movf	_delay_time,w	;volatile
  6677  0744  0023               	movlb	3	; select bank3
  6678  0745  00EB               	movwf	(??_main+10)^(0+384)
  6679  0746  0020               	movlb	0	; select bank0
  6680  0747  084A               	movf	_delay_time+1,w	;volatile
  6681  0748  0023               	movlb	3	; select bank3
  6682  0749  00EC               	movwf	((??_main+10)^(0+384)+1)
  6683  074A  0020               	movlb	0	; select bank0
  6684  074B  084B               	movf	_delay_time+2,w	;volatile
  6685  074C  0023               	movlb	3	; select bank3
  6686  074D  00ED               	movwf	((??_main+10)^(0+384)+2)
  6687  074E  0020               	movlb	0	; select bank0
  6688  074F  084C               	movf	_delay_time+3,w	;volatile
  6689  0750  0023               	movlb	3	; select bank3
  6690  0751  00EE               	movwf	((??_main+10)^(0+384)+3)
  6691  0752  3001               	movlw	1
  6692  0753                     u9135:	
  6693  0753  35EB               	lslf	(??_main+10)^(0+384),f
  6694  0754  0DEC               	rlf	((??_main+10)^(0+384)+1),f
  6695  0755  0DED               	rlf	((??_main+10)^(0+384)+2),f
  6696  0756  0DEE               	rlf	((??_main+10)^(0+384)+3),f
  6697  0757  0B89               	decfsz	9,f
  6698  0758  2F53               	goto	u9135
  6699  0759  086E               	movf	(??_main+13)^(0+384),w
  6700  075A  3A80               	xorlw	128
  6701  075B  00EF               	movwf	(??_main+14)^(0+384)
  6702  075C  086A               	movf	(??_main+9)^(0+384),w
  6703  075D  3A80               	xorlw	128
  6704  075E  026F               	subwf	(??_main+14)^(0+384),w
  6705  075F  1D03               	skipz
  6706  0760  2F6B               	goto	u9143
  6707  0761  0869               	movf	(??_main+8)^(0+384),w
  6708  0762  026D               	subwf	(??_main+12)^(0+384),w
  6709  0763  1D03               	skipz
  6710  0764  2F6B               	goto	u9143
  6711  0765  0868               	movf	(??_main+7)^(0+384),w
  6712  0766  026C               	subwf	(??_main+11)^(0+384),w
  6713  0767  1D03               	skipz
  6714  0768  2F6B               	goto	u9143
  6715  0769  0867               	movf	(??_main+6)^(0+384),w
  6716  076A  026B               	subwf	(??_main+10)^(0+384),w
  6717  076B                     u9143:	
  6718  076B  1C03               	skipc
  6719  076C  2F73               	goto	l8303
  6720                           
  6721                           ;main.c: 198: delayfound = 1;
  6722  076D  3001               	movlw	1
  6723  076E  0024               	movlb	4	; select bank4
  6724  076F  00D1               	movwf	_delayfound^(0+512)
  6725  0770  3000               	movlw	0
  6726  0771  00D2               	movwf	(_delayfound^(0+512)+1)
  6727                           
  6728                           ;main.c: 202: } else {
  6729  0772  2F1F               	goto	l8305
  6730  0773                     l8303:	
  6731                           
  6732                           ;main.c: 203: delay_counter++;
  6733  0773  3001               	movlw	1
  6734  0774  0023               	movlb	3	; select bank3
  6735  0775  07A8               	addwf	_delay_counter^(0+384),f	;volatile
  6736  0776  3000               	movlw	0
  6737  0777  3DA9               	addwfc	(_delay_counter+1)^(0+384),f	;volatile
  6738  0778  2F1F               	goto	l8305
  6739  0779                     l8307:	
  6740                           
  6741                           ;main.c: 205: }
  6742                           ;main.c: 206: }
  6743                           ;main.c: 208: delay_time_changed = 0;
  6744  0779  0023               	movlb	3	; select bank3
  6745  077A  01CC               	clrf	_delay_time_changed^(0+384)
  6746  077B  01CD               	clrf	(_delay_time_changed+1)^(0+384)
  6747  077C  2BF8               	goto	l8209
  6748  077D                     __end_of_main:	
  6749                           
  6750                           	psect	text1
  6751  1DE2                     __ptext1:	
  6752 ;; *************** function _update_selectMode *****************
  6753 ;; Defined at:
  6754 ;;		line 138 in file "tactiles.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;		None
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  1    wreg      void 
  6761 ;; Registers used:
  6762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6770 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6771 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6772 ;;Total ram usage:        1 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    5
  6775 ;; This function calls:
  6776 ;;		_setExpressionDisplay
  6777 ;;		_setPresetDisplay
  6778 ;; This function is called by:
  6779 ;;		_main
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function _update_selectMode
  6785  1DE2                     _update_selectMode:	
  6786                           
  6787                           ;tactiles.c: 139: if (mode2_state == 0 && presetSaveMode != 1) {
  6788                           
  6789                           ;incstack = 0
  6790                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6791  1DE2  0020               	movlb	0	; select bank0
  6792  1DE3  0867               	movf	_mode2_state,w
  6793  1DE4  1D03               	btfss	3,2
  6794  1DE5  2DE9               	goto	l993
  6795  1DE6  0368               	decf	_presetSaveMode,w
  6796  1DE7  1D03               	btfss	3,2
  6797  1DE8  0008               	return
  6798  1DE9                     l993:	
  6799                           ;tactiles.c: 141: return;
  6800                           
  6801                           
  6802                           ;tactiles.c: 142: }
  6803                           ;tactiles.c: 143: if (PORTDbits.RD7 == 0) {
  6804  1DE9  1B8F               	btfsc	15,7	;volatile
  6805  1DEA  2E37               	goto	l7859
  6806                           
  6807                           ;tactiles.c: 144: debounce_mode1++;
  6808  1DEB  3001               	movlw	1
  6809  1DEC  0024               	movlb	4	; select bank4
  6810  1DED  07CD               	addwf	_debounce_mode1^(0+512),f
  6811  1DEE  3000               	movlw	0
  6812  1DEF  3DCE               	addwfc	(_debounce_mode1+1)^(0+512),f
  6813                           
  6814                           ;tactiles.c: 145: if (debounce_mode1 > 25) {
  6815  1DF0  084E               	movf	(_debounce_mode1+1)^(0+512),w
  6816  1DF1  3A80               	xorlw	128
  6817  1DF2  0021               	movlb	1	; select bank1
  6818  1DF3  00A7               	movwf	??_update_selectMode^(0+128)
  6819  1DF4  3080               	movlw	128
  6820  1DF5  0227               	subwf	??_update_selectMode^(0+128),w
  6821  1DF6  1D03               	skipz
  6822  1DF7  2DFB               	goto	u8325
  6823  1DF8  301A               	movlw	26
  6824  1DF9  0024               	movlb	4	; select bank4
  6825  1DFA  024D               	subwf	_debounce_mode1^(0+512),w
  6826  1DFB                     u8325:	
  6827  1DFB  1C03               	skipc
  6828  1DFC  0008               	return
  6829                           
  6830                           ;tactiles.c: 146: debounce_mode1 = 25;
  6831  1DFD  3019               	movlw	25
  6832  1DFE  0024               	movlb	4	; select bank4
  6833  1DFF  00CD               	movwf	_debounce_mode1^(0+512)
  6834  1E00  3000               	movlw	0
  6835  1E01  00CE               	movwf	(_debounce_mode1^(0+512)+1)
  6836                           
  6837                           ;tactiles.c: 147: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6838  1E02  0020               	movlb	0	; select bank0
  6839  1E03  0867               	movf	_mode2_state,w
  6840  1E04  0023               	movlb	3	; select bank3
  6841  1E05  065E               	xorwf	_presetModeCnst^(0+384),w
  6842  1E06  1903               	skipnz
  6843  1E07  2E0C               	goto	l7841
  6844  1E08  0020               	movlb	0	; select bank0
  6845  1E09  0368               	decf	_presetSaveMode,w
  6846  1E0A  1D03               	btfss	3,2
  6847  1E0B  2E1D               	goto	l7849
  6848  1E0C                     l7841:	
  6849                           
  6850                           ;tactiles.c: 148: presetChannel++;
  6851  1E0C  3001               	movlw	1
  6852  1E0D  0021               	movlb	1	; select bank1
  6853  1E0E  00A7               	movwf	??_update_selectMode^(0+128)
  6854  1E0F  0827               	movf	??_update_selectMode^(0+128),w
  6855  1E10  0023               	movlb	3	; select bank3
  6856  1E11  07DD               	addwf	_presetChannel^(0+384),f
  6857                           
  6858                           ;tactiles.c: 149: if (presetChannel > 10) {
  6859  1E12  300B               	movlw	11
  6860  1E13  025D               	subwf	_presetChannel^(0+384),w
  6861  1E14  1C03               	skipc
  6862  1E15  2E18               	goto	l7847
  6863                           
  6864                           ;tactiles.c: 150: presetChannel = 1;
  6865  1E16  01DD               	clrf	_presetChannel^(0+384)
  6866  1E17  0ADD               	incf	_presetChannel^(0+384),f
  6867  1E18                     l7847:	
  6868                           
  6869                           ;tactiles.c: 151: }
  6870                           ;tactiles.c: 152: setPresetDisplay(presetChannel);
  6871  1E18  085D               	movf	_presetChannel^(0+384),w
  6872  1E19  3198  2043  319D   	fcall	_setPresetDisplay
  6873                           
  6874                           ;tactiles.c: 153: } else if (mode2_state == expressModeCnst) {
  6875  1E1C  2E33               	goto	l1004
  6876  1E1D                     l7849:	
  6877  1E1D  0020               	movlb	0	; select bank0
  6878  1E1E  0867               	movf	_mode2_state,w
  6879  1E1F  0023               	movlb	3	; select bank3
  6880  1E20  065B               	xorwf	_expressModeCnst^(0+384),w
  6881  1E21  1D03               	skipz
  6882  1E22  2E33               	goto	l1004
  6883                           
  6884                           ;tactiles.c: 154: expressionChannel++;
  6885  1E23  3001               	movlw	1
  6886  1E24  0021               	movlb	1	; select bank1
  6887  1E25  00A7               	movwf	??_update_selectMode^(0+128)
  6888  1E26  0827               	movf	??_update_selectMode^(0+128),w
  6889  1E27  0023               	movlb	3	; select bank3
  6890  1E28  07DC               	addwf	_expressionChannel^(0+384),f
  6891                           
  6892                           ;tactiles.c: 155: if (expressionChannel > 5) {
  6893  1E29  3006               	movlw	6
  6894  1E2A  025C               	subwf	_expressionChannel^(0+384),w
  6895  1E2B  1C03               	skipc
  6896  1E2C  2E2F               	goto	l7857
  6897                           
  6898                           ;tactiles.c: 156: expressionChannel = 1;
  6899  1E2D  01DC               	clrf	_expressionChannel^(0+384)
  6900  1E2E  0ADC               	incf	_expressionChannel^(0+384),f
  6901  1E2F                     l7857:	
  6902                           
  6903                           ;tactiles.c: 157: }
  6904                           ;tactiles.c: 158: setExpressionDisplay(expressionChannel);
  6905  1E2F  085C               	movf	_expressionChannel^(0+384),w
  6906  1E30  31A5  25E9  319D   	fcall	_setExpressionDisplay
  6907  1E33                     l1004:	
  6908                           ;tactiles.c: 159: }
  6909                           ;tactiles.c: 166: while (PORTDbits.RD7 == 0) {
  6910                           
  6911  1E33  0020               	movlb	0	; select bank0
  6912  1E34  1B8F               	btfsc	15,7	;volatile
  6913  1E35  0008               	return
  6914  1E36  2E33               	goto	l1004
  6915  1E37                     l7859:	
  6916                           ;tactiles.c: 167: }
  6917                           ;tactiles.c: 168: }
  6918                           ;tactiles.c: 169: } else {
  6919                           
  6920                           
  6921                           ;tactiles.c: 170: debounce_mode1 = 0;
  6922  1E37  0024               	movlb	4	; select bank4
  6923  1E38  01CD               	clrf	_debounce_mode1^(0+512)
  6924  1E39  01CE               	clrf	(_debounce_mode1+1)^(0+512)
  6925  1E3A  0008               	return
  6926  1E3B                     __end_of_update_selectMode:	
  6927                           
  6928                           	psect	text2
  6929  180B                     __ptext2:	
  6930 ;; *************** function _update_mode *****************
  6931 ;; Defined at:
  6932 ;;		line 86 in file "tactiles.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6948 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6949 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6950 ;;Total ram usage:        1 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    6
  6953 ;; This function calls:
  6954 ;;		_resetRingLEDs
  6955 ;;		_setPedalMode
  6956 ;; This function is called by:
  6957 ;;		_main
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           
  6962                           ;psect for function _update_mode
  6963  180B                     _update_mode:	
  6964                           
  6965                           ;tactiles.c: 91: if (PORTCbits.RC0 == 0) {
  6966                           
  6967                           ;incstack = 0
  6968                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6969  180B  0020               	movlb	0	; select bank0
  6970  180C  180E               	btfsc	14,0	;volatile
  6971  180D  283F               	goto	l7827
  6972                           
  6973                           ;tactiles.c: 94: debounce_mode2++;
  6974  180E  3001               	movlw	1
  6975  180F  0024               	movlb	4	; select bank4
  6976  1810  07CF               	addwf	_debounce_mode2^(0+512),f
  6977  1811  3000               	movlw	0
  6978  1812  3DD0               	addwfc	(_debounce_mode2+1)^(0+512),f
  6979                           
  6980                           ;tactiles.c: 95: if (debounce_mode2 > 25) {
  6981  1813  0850               	movf	(_debounce_mode2+1)^(0+512),w
  6982  1814  3A80               	xorlw	128
  6983  1815  0021               	movlb	1	; select bank1
  6984  1816  00A7               	movwf	??_update_mode^(0+128)
  6985  1817  3080               	movlw	128
  6986  1818  0227               	subwf	??_update_mode^(0+128),w
  6987  1819  1D03               	skipz
  6988  181A  281E               	goto	u8255
  6989  181B  301A               	movlw	26
  6990  181C  0024               	movlb	4	; select bank4
  6991  181D  024F               	subwf	_debounce_mode2^(0+512),w
  6992  181E                     u8255:	
  6993  181E  1C03               	skipc
  6994  181F  0008               	return
  6995                           
  6996                           ;tactiles.c: 96: debounce_mode2 = 25;
  6997  1820  3019               	movlw	25
  6998  1821  0024               	movlb	4	; select bank4
  6999  1822  00CF               	movwf	_debounce_mode2^(0+512)
  7000  1823  3000               	movlw	0
  7001  1824  00D0               	movwf	(_debounce_mode2^(0+512)+1)
  7002                           
  7003                           ;tactiles.c: 98: if (presetSaveMode == 1) {
  7004  1825  0020               	movlb	0	; select bank0
  7005  1826  0368               	decf	_presetSaveMode,w
  7006  1827  1D03               	btfss	3,2
  7007  1828  282E               	goto	l7819
  7008                           
  7009                           ;tactiles.c: 99: presetSaveMode = 0;
  7010  1829  01E8               	clrf	_presetSaveMode
  7011                           
  7012                           ;tactiles.c: 100: resetRingLEDs();
  7013  182A  31A6  2601  3198   	fcall	_resetRingLEDs
  7014                           
  7015                           ;tactiles.c: 101: } else {
  7016  182D  2838               	goto	l7825
  7017  182E                     l7819:	
  7018                           
  7019                           ;tactiles.c: 102: mode2_state++;
  7020  182E  3001               	movlw	1
  7021  182F  0021               	movlb	1	; select bank1
  7022  1830  00A7               	movwf	??_update_mode^(0+128)
  7023  1831  0827               	movf	??_update_mode^(0+128),w
  7024  1832  0020               	movlb	0	; select bank0
  7025  1833  07E7               	addwf	_mode2_state,f
  7026                           
  7027                           ;tactiles.c: 103: if (mode2_state > 2) {
  7028  1834  3003               	movlw	3
  7029  1835  0267               	subwf	_mode2_state,w
  7030  1836  1803               	btfsc	3,0
  7031                           
  7032                           ;tactiles.c: 104: mode2_state = 0;
  7033  1837  01E7               	clrf	_mode2_state
  7034  1838                     l7825:	
  7035                           
  7036                           ;tactiles.c: 105: }
  7037                           ;tactiles.c: 106: }
  7038                           ;tactiles.c: 108: setPedalMode();
  7039  1838  31A6  26CB  3198   	fcall	_setPedalMode
  7040  183B                     l978:	
  7041                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  7042                           
  7043  183B  0020               	movlb	0	; select bank0
  7044  183C  180E               	btfsc	14,0	;volatile
  7045  183D  0008               	return
  7046  183E  283B               	goto	l978
  7047  183F                     l7827:	
  7048                           ;tactiles.c: 110: }
  7049                           ;tactiles.c: 111: }
  7050                           ;tactiles.c: 112: } else {
  7051                           
  7052                           
  7053                           ;tactiles.c: 113: debounce_mode2 = 0;
  7054  183F  0024               	movlb	4	; select bank4
  7055  1840  01CF               	clrf	_debounce_mode2^(0+512)
  7056  1841  01D0               	clrf	(_debounce_mode2+1)^(0+512)
  7057  1842  0008               	return
  7058  1843                     __end_of_update_mode:	
  7059                           
  7060                           	psect	text3
  7061  0C0F                     __ptext3:	
  7062 ;; *************** function _updateSwitchTap *****************
  7063 ;; Defined at:
  7064 ;;		line 48 in file "SwitchTap.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  tapCntDiviso    2   34[BANK1 ] int 
  7069 ;;  iCnt            1   36[BANK1 ] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7080 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7081 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7082 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7083 ;;Total ram usage:        9 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    8
  7086 ;; This function calls:
  7087 ;;		___aldiv
  7088 ;;		_setDoublePressState
  7089 ;;		_setLongTapState
  7090 ;; This function is called by:
  7091 ;;		_main
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function _updateSwitchTap
  7097  0C0F                     _updateSwitchTap:	
  7098                           
  7099                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7103  0C0F  0021               	movlb	1	; select bank1
  7104  0C10  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7105                           
  7106                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  7107  0C11  0020               	movlb	0	; select bank0
  7108  0C12  1810               	btfsc	16,0	;volatile
  7109  0C13  2C1B               	goto	l7955
  7110                           
  7111                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  7112  0C14  0023               	movlb	3	; select bank3
  7113  0C15  0848               	movf	_switchTap_pressed^(0+384),w
  7114  0C16  1903               	btfsc	3,2
  7115  0C17  2C26               	goto	l1378
  7116                           
  7117                           ;SwitchTap.c: 59: switchTap_pressed--;
  7118  0C18  3001               	movlw	1
  7119  0C19  02C8               	subwf	_switchTap_pressed^(0+384),f
  7120                           
  7121                           ;SwitchTap.c: 60: }
  7122                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  7123  0C1A  2C26               	goto	l1378
  7124  0C1B                     l7955:	
  7125  0C1B  3019               	movlw	25
  7126  0C1C  0023               	movlb	3	; select bank3
  7127  0C1D  0248               	subwf	_switchTap_pressed^(0+384),w
  7128  0C1E  1803               	skipnc
  7129  0C1F  2C26               	goto	l1378
  7130                           
  7131                           ;SwitchTap.c: 62: switchTap_pressed++;
  7132  0C20  3001               	movlw	1
  7133  0C21  0021               	movlb	1	; select bank1
  7134  0C22  00BC               	movwf	??_updateSwitchTap^(0+128)
  7135  0C23  083C               	movf	??_updateSwitchTap^(0+128),w
  7136  0C24  0023               	movlb	3	; select bank3
  7137  0C25  07C8               	addwf	_switchTap_pressed^(0+384),f
  7138  0C26                     l1378:	
  7139                           
  7140                           ;SwitchTap.c: 63: }
  7141                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  7142  0C26  0848               	movf	_switchTap_pressed^(0+384),w
  7143  0C27  1D03               	btfss	3,2
  7144  0C28  2DE1               	goto	l8039
  7145                           
  7146                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  7147  0C29  0020               	movlb	0	; select bank0
  7148  0C2A  1BE1               	btfsc	_tap_timer+3,7	;volatile
  7149  0C2B  2CB3               	goto	l7999
  7150  0C2C  0861               	movf	_tap_timer+3,w	;volatile
  7151  0C2D  1D03               	btfss	3,2
  7152  0C2E  2C38               	goto	l7961
  7153  0C2F  0860               	movf	_tap_timer+2,w	;volatile
  7154  0C30  1D03               	btfss	3,2
  7155  0C31  2C38               	goto	l7961
  7156  0C32  301B               	movlw	27
  7157  0C33  025E               	subwf	_tap_timer,w	;volatile
  7158  0C34  3006               	movlw	6
  7159  0C35  3B5F               	subwfb	_tap_timer+1,w	;volatile
  7160  0C36  1C03               	btfss	3,0
  7161  0C37  2CB3               	goto	l7999
  7162  0C38                     l7961:	
  7163                           
  7164                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7165  0C38  0023               	movlb	3	; select bank3
  7166  0C39  0347               	decf	_switchTap_down^(0+384),w
  7167  0C3A  1903               	btfsc	3,2
  7168  0C3B  2C78               	goto	l7977
  7169                           
  7170                           ;SwitchTap.c: 78: switchTap_down = 1;
  7171  0C3C  01C7               	clrf	_switchTap_down^(0+384)
  7172  0C3D  0AC7               	incf	_switchTap_down^(0+384),f
  7173                           
  7174                           ;SwitchTap.c: 79: tap_timer = 0;
  7175  0C3E  3000               	movlw	0
  7176  0C3F  0020               	movlb	0	; select bank0
  7177  0C40  00E1               	movwf	_tap_timer+3	;volatile
  7178  0C41  3000               	movlw	0
  7179  0C42  00E0               	movwf	_tap_timer+2	;volatile
  7180  0C43  3000               	movlw	0
  7181  0C44  00DF               	movwf	_tap_timer+1	;volatile
  7182  0C45  3000               	movlw	0
  7183  0C46  00DE               	movwf	_tap_timer	;volatile
  7184                           
  7185                           ;SwitchTap.c: 80: tap_iteration = 1;
  7186  0C47  3001               	movlw	1
  7187  0C48  0023               	movlb	3	; select bank3
  7188  0C49  00D6               	movwf	_tap_iteration^(0+384)
  7189  0C4A  3000               	movlw	0
  7190  0C4B  00D7               	movwf	(_tap_iteration^(0+384)+1)
  7191                           
  7192                           ;SwitchTap.c: 81: tap_total = 0;
  7193  0C4C  3000               	movlw	0
  7194  0C4D  0024               	movlb	4	; select bank4
  7195  0C4E  00C0               	movwf	(_tap_total+3)^(0+512)
  7196  0C4F  3000               	movlw	0
  7197  0C50  00BF               	movwf	(_tap_total+2)^(0+512)
  7198  0C51  3000               	movlw	0
  7199  0C52  00BE               	movwf	(_tap_total+1)^(0+512)
  7200  0C53  3000               	movlw	0
  7201  0C54  00BD               	movwf	_tap_total^(0+512)
  7202                           
  7203                           ;SwitchTap.c: 82: delay_time_changed = 0;
  7204  0C55  0023               	movlb	3	; select bank3
  7205  0C56  01CC               	clrf	_delay_time_changed^(0+384)
  7206  0C57  01CD               	clrf	(_delay_time_changed+1)^(0+384)
  7207                           
  7208                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7209  0C58  0021               	movlb	1	; select bank1
  7210  0C59  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7211  0C5A  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7212  0C5B                     l7975:	
  7213  0C5B  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7214  0C5C  0020               	movlb	0	; select bank0
  7215  0C5D  0258               	subwf	_num_taps,w
  7216  0C5E  1C03               	btfss	3,0
  7217  0C5F  2C78               	goto	l7977
  7218                           
  7219                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7220  0C60  0021               	movlb	1	; select bank1
  7221  0C61  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7222  0C62  00BC               	movwf	??_updateSwitchTap^(0+128)
  7223  0C63  3001               	movlw	1
  7224  0C64                     u8665:	
  7225  0C64  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7226  0C65  3EFF               	addlw	-1
  7227  0C66  1D03               	skipz
  7228  0C67  2C64               	goto	u8665
  7229  0C68  353C               	lslf	??_updateSwitchTap^(0+128),w
  7230  0C69  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7231  0C6A  0086               	movwf	6
  7232  0C6B  3002               	movlw	2	; select bank4/5
  7233  0C6C  0087               	movwf	7
  7234  0C6D  3000               	movlw	0
  7235  0C6E  3FC0               	movwi [0]fsr1
  7236  0C6F  3000               	movlw	0
  7237  0C70  3FC1               	movwi [1]fsr1
  7238  0C71  3FC2               	movwi [2]fsr1
  7239  0C72  3FC3               	movwi [3]fsr1
  7240  0C73  3001               	movlw	1
  7241  0C74  00BC               	movwf	??_updateSwitchTap^(0+128)
  7242  0C75  083C               	movf	??_updateSwitchTap^(0+128),w
  7243  0C76  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7244  0C77  2C5B               	goto	l7975
  7245  0C78                     l7977:	
  7246                           
  7247                           ;SwitchTap.c: 86: }
  7248                           ;SwitchTap.c: 87: }
  7249                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7250  0C78  0023               	movlb	3	; select bank3
  7251  0C79  0842               	movf	_longTap_start^(0+384),w
  7252  0C7A  1D03               	btfss	3,2
  7253  0C7B  2C83               	goto	l7983
  7254                           
  7255                           ;SwitchTap.c: 91: longTap_start = 1;
  7256  0C7C  01C2               	clrf	_longTap_start^(0+384)
  7257  0C7D  0AC2               	incf	_longTap_start^(0+384),f
  7258                           
  7259                           ;SwitchTap.c: 92: longTap_state = 0;
  7260  0C7E  0020               	movlb	0	; select bank0
  7261  0C7F  01D7               	clrf	_longTap_state	;volatile
  7262                           
  7263                           ;SwitchTap.c: 93: longTap_timer = 0;
  7264  0C80  0023               	movlb	3	; select bank3
  7265  0C81  01B6               	clrf	_longTap_timer^(0+384)	;volatile
  7266  0C82  01B7               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7267  0C83                     l7983:	
  7268                           
  7269                           ;SwitchTap.c: 94: }
  7270                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7271  0C83  0020               	movlb	0	; select bank0
  7272  0C84  0852               	movf	_long_press_limit+1,w
  7273  0C85  0023               	movlb	3	; select bank3
  7274  0C86  0237               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7275  0C87  1D03               	skipz
  7276  0C88  2C8D               	goto	u8695
  7277  0C89  0020               	movlb	0	; select bank0
  7278  0C8A  0851               	movf	_long_press_limit,w
  7279  0C8B  0023               	movlb	3	; select bank3
  7280  0C8C  0236               	subwf	_longTap_timer^(0+384),w	;volatile
  7281  0C8D                     u8695:	
  7282  0C8D  1C03               	skipc
  7283  0C8E  0008               	return
  7284  0C8F  0020               	movlb	0	; select bank0
  7285  0C90  0857               	movf	_longTap_state,w	;volatile
  7286  0C91  1D03               	btfss	3,2
  7287  0C92  0008               	return
  7288  0C93  0866               	movf	_doubleTap_state,w	;volatile
  7289  0C94  1D03               	btfss	3,2
  7290  0C95  0008               	return
  7291                           
  7292                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7293  0C96  0852               	movf	_long_press_limit+1,w
  7294  0C97  0023               	movlb	3	; select bank3
  7295  0C98  00B7               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7296  0C99  0020               	movlb	0	; select bank0
  7297  0C9A  0851               	movf	_long_press_limit,w
  7298  0C9B  0023               	movlb	3	; select bank3
  7299  0C9C  00B6               	movwf	_longTap_timer^(0+384)	;volatile
  7300                           
  7301                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7302  0C9D  0022               	movlb	2	; select bank2
  7303  0C9E  120D               	bcf	13,4	;volatile
  7304                           
  7305                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  7306  0C9F  0023               	movlb	3	; select bank3
  7307  0CA0  0340               	decf	_feedback_start^(0+384),w
  7308  0CA1  1903               	btfsc	3,2
  7309  0CA2  2CAB               	goto	l7997
  7310                           
  7311                           ;SwitchTap.c: 104: setLongTapState(1);
  7312  0CA3  3001               	movlw	1
  7313  0CA4  0021               	movlb	1	; select bank1
  7314  0CA5  00A0               	movwf	setLongTapState@f_state^(0+128)
  7315  0CA6  3000               	movlw	0
  7316  0CA7  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7317  0CA8  31A6  2635         	fcall	_setLongTapState
  7318                           
  7319                           ;SwitchTap.c: 105: } else {
  7320  0CAA  0008               	return
  7321  0CAB                     l7997:	
  7322                           
  7323                           ;SwitchTap.c: 106: setDoublePressState(1);
  7324  0CAB  3001               	movlw	1
  7325  0CAC  0021               	movlb	1	; select bank1
  7326  0CAD  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7327  0CAE  3000               	movlw	0
  7328  0CAF  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7329  0CB0  3199  21E8         	fcall	_setDoublePressState
  7330                           
  7331                           ;SwitchTap.c: 107: }
  7332                           ;SwitchTap.c: 108: }
  7333                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7334  0CB2  0008               	return
  7335  0CB3                     l7999:	
  7336  0CB3  0020               	movlb	0	; select bank0
  7337  0CB4  1BE1               	btfsc	_tap_timer+3,7	;volatile
  7338  0CB5  2CC2               	goto	l8001
  7339  0CB6  0861               	movf	_tap_timer+3,w	;volatile
  7340  0CB7  1D03               	btfss	3,2
  7341  0CB8  0008               	return
  7342  0CB9  0860               	movf	_tap_timer+2,w	;volatile
  7343  0CBA  1D03               	btfss	3,2
  7344  0CBB  0008               	return
  7345  0CBC  301B               	movlw	27
  7346  0CBD  025E               	subwf	_tap_timer,w	;volatile
  7347  0CBE  3006               	movlw	6
  7348  0CBF  3B5F               	subwfb	_tap_timer+1,w	;volatile
  7349  0CC0  1803               	btfsc	3,0
  7350  0CC1  0008               	return
  7351  0CC2                     l8001:	
  7352  0CC2  0857               	movf	_longTap_state,w	;volatile
  7353  0CC3  1D03               	btfss	3,2
  7354  0CC4  0008               	return
  7355  0CC5  0023               	movlb	3	; select bank3
  7356  0CC6  0347               	decf	_switchTap_down^(0+384),w
  7357  0CC7  1903               	btfsc	3,2
  7358  0CC8  0008               	return
  7359                           
  7360                           ;SwitchTap.c: 112: switchTap_down = 1;
  7361  0CC9  01C7               	clrf	_switchTap_down^(0+384)
  7362  0CCA  0AC7               	incf	_switchTap_down^(0+384),f
  7363                           
  7364                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7365  0CCB  0020               	movlb	0	; select bank0
  7366  0CCC  1BE1               	btfsc	_tap_timer+3,7	;volatile
  7367  0CCD  2CE2               	goto	l1392
  7368  0CCE  0861               	movf	_tap_timer+3,w	;volatile
  7369  0CCF  1D03               	btfss	3,2
  7370  0CD0  2CDA               	goto	l8009
  7371  0CD1  0860               	movf	_tap_timer+2,w	;volatile
  7372  0CD2  1D03               	btfss	3,2
  7373  0CD3  2CDA               	goto	l8009
  7374  0CD4  3094               	movlw	148
  7375  0CD5  025E               	subwf	_tap_timer,w	;volatile
  7376  0CD6  3004               	movlw	4
  7377  0CD7  3B5F               	subwfb	_tap_timer+1,w	;volatile
  7378  0CD8  1C03               	btfss	3,0
  7379  0CD9  2CE2               	goto	l1392
  7380  0CDA                     l8009:	
  7381                           
  7382                           ;SwitchTap.c: 114: tap_timer = 1172;
  7383  0CDA  3000               	movlw	0
  7384  0CDB  00E1               	movwf	_tap_timer+3	;volatile
  7385  0CDC  3000               	movlw	0
  7386  0CDD  00E0               	movwf	_tap_timer+2	;volatile
  7387  0CDE  3004               	movlw	4
  7388  0CDF  00DF               	movwf	_tap_timer+1	;volatile
  7389  0CE0  3094               	movlw	148
  7390  0CE1  00DE               	movwf	_tap_timer	;volatile
  7391  0CE2                     l1392:	
  7392                           
  7393                           ;SwitchTap.c: 115: }
  7394                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7395  0CE2  0858               	movf	_num_taps,w
  7396  0CE3  0021               	movlb	1	; select bank1
  7397  0CE4  00BC               	movwf	??_updateSwitchTap^(0+128)
  7398  0CE5  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7399  0CE6  083C               	movf	??_updateSwitchTap^(0+128),w
  7400  0CE7  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7401  0CE8  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7402  0CE9  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7403                           
  7404                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7405  0CEA  0023               	movlb	3	; select bank3
  7406  0CEB  0857               	movf	(_tap_iteration+1)^(0+384),w
  7407  0CEC  3A80               	xorlw	128
  7408  0CED  3C80               	sublw	128
  7409  0CEE  1D03               	skipz
  7410  0CEF  2CF3               	goto	u8775
  7411  0CF0  0856               	movf	_tap_iteration^(0+384),w
  7412  0CF1  0020               	movlb	0	; select bank0
  7413  0CF2  0258               	subwf	_num_taps,w
  7414  0CF3                     u8775:	
  7415  0CF3  1C03               	skipc
  7416  0CF4  2D25               	goto	l8017
  7417                           
  7418                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7419  0CF5  0020               	movlb	0	; select bank0
  7420  0CF6  085E               	movf	_tap_timer,w	;volatile
  7421  0CF7  0024               	movlb	4	; select bank4
  7422  0CF8  07BD               	addwf	_tap_total^(0+512),f
  7423  0CF9  0020               	movlb	0	; select bank0
  7424  0CFA  085F               	movf	_tap_timer+1,w	;volatile
  7425  0CFB  0024               	movlb	4	; select bank4
  7426  0CFC  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7427  0CFD  0020               	movlb	0	; select bank0
  7428  0CFE  0860               	movf	_tap_timer+2,w	;volatile
  7429  0CFF  0024               	movlb	4	; select bank4
  7430  0D00  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7431  0D01  0020               	movlb	0	; select bank0
  7432  0D02  0861               	movf	_tap_timer+3,w	;volatile
  7433  0D03  0024               	movlb	4	; select bank4
  7434  0D04  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7435                           
  7436                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7437  0D05  0023               	movlb	3	; select bank3
  7438  0D06  0856               	movf	_tap_iteration^(0+384),w
  7439  0D07  0021               	movlb	1	; select bank1
  7440  0D08  00BC               	movwf	??_updateSwitchTap^(0+128)
  7441  0D09  3001               	movlw	1
  7442  0D0A                     u8785:	
  7443  0D0A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7444  0D0B  3EFF               	addlw	-1
  7445  0D0C  1D03               	skipz
  7446  0D0D  2D0A               	goto	u8785
  7447  0D0E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7448  0D0F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7449  0D10  0086               	movwf	6
  7450  0D11  3002               	movlw	2	; select bank4/5
  7451  0D12  0087               	movwf	7
  7452  0D13  0020               	movlb	0	; select bank0
  7453  0D14  085E               	movf	_tap_timer,w	;volatile
  7454  0D15  3FC0               	movwi [0]fsr1
  7455  0D16  085F               	movf	_tap_timer+1,w	;volatile
  7456  0D17  3FC1               	movwi [1]fsr1
  7457  0D18  0860               	movf	_tap_timer+2,w	;volatile
  7458  0D19  3FC2               	movwi [2]fsr1
  7459  0D1A  0861               	movf	_tap_timer+3,w	;volatile
  7460  0D1B  3FC3               	movwi [3]fsr1
  7461                           
  7462                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7463  0D1C  0023               	movlb	3	; select bank3
  7464  0D1D  0857               	movf	(_tap_iteration+1)^(0+384),w
  7465  0D1E  0021               	movlb	1	; select bank1
  7466  0D1F  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7467  0D20  0023               	movlb	3	; select bank3
  7468  0D21  0856               	movf	_tap_iteration^(0+384),w
  7469  0D22  0021               	movlb	1	; select bank1
  7470  0D23  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7471                           
  7472                           ;SwitchTap.c: 122: } else {
  7473  0D24  2DA1               	goto	l8031
  7474  0D25                     l8017:	
  7475                           
  7476                           ;SwitchTap.c: 123: tap_total = 0;
  7477  0D25  3000               	movlw	0
  7478  0D26  0024               	movlb	4	; select bank4
  7479  0D27  00C0               	movwf	(_tap_total+3)^(0+512)
  7480  0D28  3000               	movlw	0
  7481  0D29  00BF               	movwf	(_tap_total+2)^(0+512)
  7482  0D2A  3000               	movlw	0
  7483  0D2B  00BE               	movwf	(_tap_total+1)^(0+512)
  7484  0D2C  3000               	movlw	0
  7485  0D2D  00BD               	movwf	_tap_total^(0+512)
  7486                           
  7487                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7488  0D2E  0021               	movlb	1	; select bank1
  7489  0D2F  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7490  0D30  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7491  0D31                     l8025:	
  7492  0D31  0020               	movlb	0	; select bank0
  7493  0D32  0858               	movf	_num_taps,w
  7494  0D33  0021               	movlb	1	; select bank1
  7495  0D34  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7496  0D35  1803               	btfsc	3,0
  7497  0D36  2D7B               	goto	l8027
  7498                           
  7499                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7500  0D37  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7501  0D38  00BC               	movwf	??_updateSwitchTap^(0+128)
  7502  0D39  3001               	movlw	1
  7503  0D3A                     u8795:	
  7504  0D3A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7505  0D3B  3EFF               	addlw	-1
  7506  0D3C  1D03               	skipz
  7507  0D3D  2D3A               	goto	u8795
  7508  0D3E  353C               	lslf	??_updateSwitchTap^(0+128),w
  7509  0D3F  3E04               	addlw	4
  7510  0D40  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7511  0D41  0086               	movwf	6
  7512  0D42  3002               	movlw	2	; select bank4/5
  7513  0D43  0087               	movwf	7
  7514  0D44  3F40               	moviw [0]fsr1
  7515  0D45  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7516  0D46  3F41               	moviw [1]fsr1
  7517  0D47  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7518  0D48  3F42               	moviw [2]fsr1
  7519  0D49  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7520  0D4A  3F43               	moviw [3]fsr1
  7521  0D4B  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7522  0D4C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7523  0D4D  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7524  0D4E  3001               	movlw	1
  7525  0D4F                     u8805:	
  7526  0D4F  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7527  0D50  3EFF               	addlw	-1
  7528  0D51  1D03               	skipz
  7529  0D52  2D4F               	goto	u8805
  7530  0D53  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7531  0D54  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7532  0D55  0086               	movwf	6
  7533  0D56  3002               	movlw	2	; select bank4/5
  7534  0D57  0087               	movwf	7
  7535  0D58  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7536  0D59  3FC0               	movwi [0]fsr1
  7537  0D5A  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7538  0D5B  3FC1               	movwi [1]fsr1
  7539  0D5C  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7540  0D5D  3FC2               	movwi [2]fsr1
  7541  0D5E  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7542  0D5F  3FC3               	movwi [3]fsr1
  7543                           
  7544                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7545  0D60  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7546  0D61  00BC               	movwf	??_updateSwitchTap^(0+128)
  7547  0D62  3001               	movlw	1
  7548  0D63                     u8815:	
  7549  0D63  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7550  0D64  3EFF               	addlw	-1
  7551  0D65  1D03               	skipz
  7552  0D66  2D63               	goto	u8815
  7553  0D67  353C               	lslf	??_updateSwitchTap^(0+128),w
  7554  0D68  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7555  0D69  0086               	movwf	6
  7556  0D6A  3002               	movlw	2	; select bank4/5
  7557  0D6B  0087               	movwf	7
  7558  0D6C  3F40               	moviw [0]fsr1
  7559  0D6D  0024               	movlb	4	; select bank4
  7560  0D6E  07BD               	addwf	_tap_total^(0+512),f
  7561  0D6F  3F41               	moviw [1]fsr1
  7562  0D70  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7563  0D71  3F42               	moviw [2]fsr1
  7564  0D72  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7565  0D73  3F43               	moviw [3]fsr1
  7566  0D74  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7567  0D75  3001               	movlw	1
  7568  0D76  0021               	movlb	1	; select bank1
  7569  0D77  00BC               	movwf	??_updateSwitchTap^(0+128)
  7570  0D78  083C               	movf	??_updateSwitchTap^(0+128),w
  7571  0D79  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7572  0D7A  2D31               	goto	l8025
  7573  0D7B                     l8027:	
  7574                           
  7575                           ;SwitchTap.c: 127: }
  7576                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7577  0D7B  0020               	movlb	0	; select bank0
  7578  0D7C  0858               	movf	_num_taps,w
  7579  0D7D  0021               	movlb	1	; select bank1
  7580  0D7E  00BC               	movwf	??_updateSwitchTap^(0+128)
  7581  0D7F  3001               	movlw	1
  7582  0D80                     u8835:	
  7583  0D80  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7584  0D81  3EFF               	addlw	-1
  7585  0D82  1D03               	skipz
  7586  0D83  2D80               	goto	u8835
  7587  0D84  353C               	lslf	??_updateSwitchTap^(0+128),w
  7588  0D85  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7589  0D86  0086               	movwf	6
  7590  0D87  3002               	movlw	2	; select bank4/5
  7591  0D88  0087               	movwf	7
  7592  0D89  0020               	movlb	0	; select bank0
  7593  0D8A  085E               	movf	_tap_timer,w	;volatile
  7594  0D8B  3FC0               	movwi [0]fsr1
  7595  0D8C  085F               	movf	_tap_timer+1,w	;volatile
  7596  0D8D  3FC1               	movwi [1]fsr1
  7597  0D8E  0860               	movf	_tap_timer+2,w	;volatile
  7598  0D8F  3FC2               	movwi [2]fsr1
  7599  0D90  0861               	movf	_tap_timer+3,w	;volatile
  7600  0D91  3FC3               	movwi [3]fsr1
  7601                           
  7602                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7603  0D92  085E               	movf	_tap_timer,w	;volatile
  7604  0D93  0024               	movlb	4	; select bank4
  7605  0D94  07BD               	addwf	_tap_total^(0+512),f
  7606  0D95  0020               	movlb	0	; select bank0
  7607  0D96  085F               	movf	_tap_timer+1,w	;volatile
  7608  0D97  0024               	movlb	4	; select bank4
  7609  0D98  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7610  0D99  0020               	movlb	0	; select bank0
  7611  0D9A  0860               	movf	_tap_timer+2,w	;volatile
  7612  0D9B  0024               	movlb	4	; select bank4
  7613  0D9C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7614  0D9D  0020               	movlb	0	; select bank0
  7615  0D9E  0861               	movf	_tap_timer+3,w	;volatile
  7616  0D9F  0024               	movlb	4	; select bank4
  7617  0DA0  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7618  0DA1                     l8031:	
  7619                           
  7620                           ;SwitchTap.c: 130: }
  7621                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7622  0DA1  0021               	movlb	1	; select bank1
  7623  0DA2  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7624  0DA3  00A0               	movwf	___aldiv@divisor^(0+128)
  7625  0DA4  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7626  0DA5  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7627  0DA6  0D89               	rlf	9,f
  7628  0DA7  3B89               	subwfb	9,f
  7629  0DA8  0989               	comf	9,f
  7630  0DA9  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7631  0DAA  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7632  0DAB  0024               	movlb	4	; select bank4
  7633  0DAC  0840               	movf	(_tap_total+3)^(0+512),w
  7634  0DAD  0021               	movlb	1	; select bank1
  7635  0DAE  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7636  0DAF  0024               	movlb	4	; select bank4
  7637  0DB0  083F               	movf	(_tap_total+2)^(0+512),w
  7638  0DB1  0021               	movlb	1	; select bank1
  7639  0DB2  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7640  0DB3  0024               	movlb	4	; select bank4
  7641  0DB4  083E               	movf	(_tap_total+1)^(0+512),w
  7642  0DB5  0021               	movlb	1	; select bank1
  7643  0DB6  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7644  0DB7  0024               	movlb	4	; select bank4
  7645  0DB8  083D               	movf	_tap_total^(0+512),w
  7646  0DB9  0021               	movlb	1	; select bank1
  7647  0DBA  00A4               	movwf	___aldiv@dividend^(0+128)
  7648  0DBB  3187  277D         	fcall	___aldiv
  7649  0DBD  0021               	movlb	1	; select bank1
  7650  0DBE  0823               	movf	(?___aldiv+3)^(0+128),w
  7651  0DBF  0020               	movlb	0	; select bank0
  7652  0DC0  00C8               	movwf	_baseline_delay_time+3	;volatile
  7653  0DC1  0021               	movlb	1	; select bank1
  7654  0DC2  0822               	movf	(?___aldiv+2)^(0+128),w
  7655  0DC3  0020               	movlb	0	; select bank0
  7656  0DC4  00C7               	movwf	_baseline_delay_time+2	;volatile
  7657  0DC5  0021               	movlb	1	; select bank1
  7658  0DC6  0821               	movf	(?___aldiv+1)^(0+128),w
  7659  0DC7  0020               	movlb	0	; select bank0
  7660  0DC8  00C6               	movwf	_baseline_delay_time+1	;volatile
  7661  0DC9  0021               	movlb	1	; select bank1
  7662  0DCA  0820               	movf	?___aldiv^(0+128),w
  7663  0DCB  0020               	movlb	0	; select bank0
  7664  0DCC  00C5               	movwf	_baseline_delay_time	;volatile
  7665                           
  7666                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7667  0DCD  3001               	movlw	1
  7668  0DCE  0023               	movlb	3	; select bank3
  7669  0DCF  00CC               	movwf	_delay_time_changed^(0+384)
  7670  0DD0  3000               	movlw	0
  7671  0DD1  00CD               	movwf	(_delay_time_changed^(0+384)+1)
  7672                           
  7673                           ;SwitchTap.c: 134: tap_timer = 0;
  7674  0DD2  3000               	movlw	0
  7675  0DD3  0020               	movlb	0	; select bank0
  7676  0DD4  00E1               	movwf	_tap_timer+3	;volatile
  7677  0DD5  3000               	movlw	0
  7678  0DD6  00E0               	movwf	_tap_timer+2	;volatile
  7679  0DD7  3000               	movlw	0
  7680  0DD8  00DF               	movwf	_tap_timer+1	;volatile
  7681  0DD9  3000               	movlw	0
  7682  0DDA  00DE               	movwf	_tap_timer	;volatile
  7683                           
  7684                           ;SwitchTap.c: 136: tap_iteration++;
  7685  0DDB  3001               	movlw	1
  7686  0DDC  0023               	movlb	3	; select bank3
  7687  0DDD  07D6               	addwf	_tap_iteration^(0+384),f
  7688  0DDE  3000               	movlw	0
  7689  0DDF  3DD7               	addwfc	(_tap_iteration+1)^(0+384),f
  7690                           
  7691                           ;SwitchTap.c: 137: }
  7692                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7693  0DE0  0008               	return
  7694  0DE1                     l8039:	
  7695  0DE1  3019               	movlw	25
  7696  0DE2  0248               	subwf	_switchTap_pressed^(0+384),w
  7697  0DE3  1C03               	skipc
  7698  0DE4  0008               	return
  7699                           
  7700                           ;SwitchTap.c: 140: switchTap_down = 0;
  7701  0DE5  01C7               	clrf	_switchTap_down^(0+384)
  7702                           
  7703                           ;SwitchTap.c: 141: switchTap_state = 0;
  7704  0DE6  01DF               	clrf	_switchTap_state^(0+384)
  7705                           
  7706                           ;SwitchTap.c: 147: setLongTapState(0);
  7707  0DE7  3000               	movlw	0
  7708  0DE8  0021               	movlb	1	; select bank1
  7709  0DE9  00A0               	movwf	setLongTapState@f_state^(0+128)
  7710  0DEA  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7711  0DEB  31A6  2635         	fcall	_setLongTapState
  7712                           
  7713                           ;SwitchTap.c: 149: longTap_timer = 0;
  7714  0DED  0023               	movlb	3	; select bank3
  7715  0DEE  01B6               	clrf	_longTap_timer^(0+384)	;volatile
  7716  0DEF  01B7               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7717                           
  7718                           ;SwitchTap.c: 150: longTap_start = 0;
  7719  0DF0  01C2               	clrf	_longTap_start^(0+384)
  7720                           
  7721                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7722  0DF1  3019               	movlw	25
  7723  0DF2  0021               	movlb	1	; select bank1
  7724  0DF3  00BC               	movwf	??_updateSwitchTap^(0+128)
  7725  0DF4  083C               	movf	??_updateSwitchTap^(0+128),w
  7726  0DF5  0023               	movlb	3	; select bank3
  7727  0DF6  00C8               	movwf	_switchTap_pressed^(0+384)
  7728  0DF7  0008               	return
  7729  0DF8                     __end_of_updateSwitchTap:	
  7730                           
  7731                           	psect	text4
  7732  2635                     __ptext4:	
  7733 ;; *************** function _setLongTapState *****************
  7734 ;; Defined at:
  7735 ;;		line 167 in file "SwitchTap.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  f_state         2    0[BANK1 ] int 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, status,0
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7749 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7751 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7752 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7753 ;;Total ram usage:        4 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    3
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_updateSwitchTap
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function _setLongTapState
  7765  2635                     _setLongTapState:	
  7766                           
  7767                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7768                           
  7769                           ;incstack = 0
  7770                           ; Regs used in _setLongTapState: [wreg+status,0]
  7771  2635  0020               	movlb	0	; select bank0
  7772  2636  0857               	movf	_longTap_state,w	;volatile
  7773  2637  0021               	movlb	1	; select bank1
  7774  2638  00A2               	movwf	??_setLongTapState^(0+128)
  7775  2639  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7776  263A  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7777  263B  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7778  263C  1D03               	skipz
  7779  263D  2E40               	goto	u8065
  7780  263E  0820               	movf	setLongTapState@f_state^(0+128),w
  7781  263F  0622               	xorwf	??_setLongTapState^(0+128),w
  7782  2640                     u8065:	
  7783  2640  1903               	btfsc	3,2
  7784  2641  0008               	return
  7785                           
  7786                           ;SwitchTap.c: 169: longTap_state = f_state;
  7787  2642  0820               	movf	setLongTapState@f_state^(0+128),w
  7788  2643  00A2               	movwf	??_setLongTapState^(0+128)
  7789  2644  0822               	movf	??_setLongTapState^(0+128),w
  7790  2645  0020               	movlb	0	; select bank0
  7791  2646  00D7               	movwf	_longTap_state	;volatile
  7792                           
  7793                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7794  2647  0021               	movlb	1	; select bank1
  7795  2648  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7796  2649  0022               	movlb	2	; select bank2
  7797  264A  1C03               	skipc
  7798  264B  128D               	bcf	13,5	;volatile
  7799  264C  1803               	skipnc
  7800  264D  168D               	bsf	13,5	;volatile
  7801  264E  0008               	return
  7802  264F                     __end_of_setLongTapState:	
  7803                           
  7804                           	psect	text5
  7805  077D                     __ptext5:	
  7806 ;; *************** function ___aldiv *****************
  7807 ;; Defined at:
  7808 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;  divisor         4    0[BANK1 ] long 
  7811 ;;  dividend        4    4[BANK1 ] long 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  quotient        4   11[BANK1 ] long 
  7814 ;;  sign            1   10[BANK1 ] unsigned char 
  7815 ;;  counter         1    9[BANK1 ] unsigned char 
  7816 ;; Return value:  Size  Location     Type
  7817 ;;                  4    0[BANK1 ] long 
  7818 ;; Registers used:
  7819 ;;		wreg, status,2, status,0
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7825 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7826 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7827 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7828 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7829 ;;Total ram usage:       15 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; Hardware stack levels required when called:    3
  7832 ;; This function calls:
  7833 ;;		Nothing
  7834 ;; This function is called by:
  7835 ;;		_updateSwitchTap
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           
  7840                           ;psect for function ___aldiv
  7841  077D                     ___aldiv:	
  7842                           
  7843                           ;incstack = 0
  7844                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7845  077D  0021               	movlb	1	; select bank1
  7846  077E  01AA               	clrf	___aldiv@sign^(0+128)
  7847  077F  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7848  0780  2F8E               	goto	l1804
  7849  0781  09A0               	comf	___aldiv@divisor^(0+128),f
  7850  0782  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7851  0783  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7852  0784  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7853  0785  0AA0               	incf	___aldiv@divisor^(0+128),f
  7854  0786  1903               	skipnz
  7855  0787  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7856  0788  1903               	skipnz
  7857  0789  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7858  078A  1903               	skipnz
  7859  078B  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7860  078C  01AA               	clrf	___aldiv@sign^(0+128)
  7861  078D  0AAA               	incf	___aldiv@sign^(0+128),f
  7862  078E                     l1804:	
  7863  078E  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7864  078F  2F9F               	goto	l7691
  7865  0790  09A4               	comf	___aldiv@dividend^(0+128),f
  7866  0791  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7867  0792  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7868  0793  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7869  0794  0AA4               	incf	___aldiv@dividend^(0+128),f
  7870  0795  1903               	skipnz
  7871  0796  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7872  0797  1903               	skipnz
  7873  0798  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7874  0799  1903               	skipnz
  7875  079A  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7876  079B  3001               	movlw	1
  7877  079C  00A8               	movwf	??___aldiv^(0+128)
  7878  079D  0828               	movf	??___aldiv^(0+128),w
  7879  079E  06AA               	xorwf	___aldiv@sign^(0+128),f
  7880  079F                     l7691:	
  7881  079F  3000               	movlw	0
  7882  07A0  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7883  07A1  3000               	movlw	0
  7884  07A2  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7885  07A3  3000               	movlw	0
  7886  07A4  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7887  07A5  3000               	movlw	0
  7888  07A6  00AB               	movwf	___aldiv@quotient^(0+128)
  7889  07A7  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7890  07A8  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7891  07A9  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7892  07AA  0420               	iorwf	___aldiv@divisor^(0+128),w
  7893  07AB  1903               	skipnz
  7894  07AC  2FE8               	goto	l7713
  7895  07AD  01A9               	clrf	___aldiv@counter^(0+128)
  7896  07AE  0AA9               	incf	___aldiv@counter^(0+128),f
  7897  07AF                     l7699:	
  7898  07AF  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7899  07B0  2FBD               	goto	l7701
  7900  07B1  3001               	movlw	1
  7901  07B2                     u8105:	
  7902  07B2  35A0               	lslf	___aldiv@divisor^(0+128),f
  7903  07B3  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7904  07B4  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7905  07B5  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7906  07B6  0B89               	decfsz	9,f
  7907  07B7  2FB2               	goto	u8105
  7908  07B8  3001               	movlw	1
  7909  07B9  00A8               	movwf	??___aldiv^(0+128)
  7910  07BA  0828               	movf	??___aldiv^(0+128),w
  7911  07BB  07A9               	addwf	___aldiv@counter^(0+128),f
  7912  07BC  2FAF               	goto	l7699
  7913  07BD                     l7701:	
  7914  07BD  3001               	movlw	1
  7915  07BE                     u8125:	
  7916  07BE  35AB               	lslf	___aldiv@quotient^(0+128),f
  7917  07BF  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7918  07C0  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7919  07C1  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7920  07C2  0B89               	decfsz	9,f
  7921  07C3  2FBE               	goto	u8125
  7922  07C4  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7923  07C5  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7924  07C6  1D03               	skipz
  7925  07C7  2FD2               	goto	u8135
  7926  07C8  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7927  07C9  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7928  07CA  1D03               	skipz
  7929  07CB  2FD2               	goto	u8135
  7930  07CC  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7931  07CD  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7932  07CE  1D03               	skipz
  7933  07CF  2FD2               	goto	u8135
  7934  07D0  0820               	movf	___aldiv@divisor^(0+128),w
  7935  07D1  0224               	subwf	___aldiv@dividend^(0+128),w
  7936  07D2                     u8135:	
  7937  07D2  1C03               	skipc
  7938  07D3  2FDD               	goto	l7709
  7939  07D4  0820               	movf	___aldiv@divisor^(0+128),w
  7940  07D5  02A4               	subwf	___aldiv@dividend^(0+128),f
  7941  07D6  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7942  07D7  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7943  07D8  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7944  07D9  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7945  07DA  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7946  07DB  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7947  07DC  142B               	bsf	___aldiv@quotient^(0+128),0
  7948  07DD                     l7709:	
  7949  07DD  3001               	movlw	1
  7950  07DE                     u8145:	
  7951  07DE  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7952  07DF  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7953  07E0  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7954  07E1  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7955  07E2  0B89               	decfsz	9,f
  7956  07E3  2FDE               	goto	u8145
  7957  07E4  3001               	movlw	1
  7958  07E5  02A9               	subwf	___aldiv@counter^(0+128),f
  7959  07E6  1D03               	btfss	3,2
  7960  07E7  2FBD               	goto	l7701
  7961  07E8                     l7713:	
  7962  07E8  082A               	movf	___aldiv@sign^(0+128),w
  7963  07E9  1903               	btfsc	3,2
  7964  07EA  2FF6               	goto	l7717
  7965  07EB  09AB               	comf	___aldiv@quotient^(0+128),f
  7966  07EC  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7967  07ED  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7968  07EE  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7969  07EF  0AAB               	incf	___aldiv@quotient^(0+128),f
  7970  07F0  1903               	skipnz
  7971  07F1  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7972  07F2  1903               	skipnz
  7973  07F3  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7974  07F4  1903               	skipnz
  7975  07F5  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7976  07F6                     l7717:	
  7977  07F6  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7978  07F7  00A3               	movwf	(?___aldiv+3)^(0+128)
  7979  07F8  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7980  07F9  00A2               	movwf	(?___aldiv+2)^(0+128)
  7981  07FA  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7982  07FB  00A1               	movwf	(?___aldiv+1)^(0+128)
  7983  07FC  082B               	movf	___aldiv@quotient^(0+128),w
  7984  07FD  00A0               	movwf	?___aldiv^(0+128)
  7985  07FE  0008               	return
  7986  07FF                     __end_of___aldiv:	
  7987                           
  7988                           	psect	text6
  7989  1717                     __ptext6:	
  7990 ;; *************** function _updateSwitchBypass *****************
  7991 ;; Defined at:
  7992 ;;		line 34 in file "SwitchBypass.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;		None
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;		None
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      void 
  7999 ;; Registers used:
  8000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8008 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8009 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8010 ;;Total ram usage:        2 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    8
  8013 ;; This function calls:
  8014 ;;		_setDoublePressState
  8015 ;;		_setFeedbackState
  8016 ;;		_setSwitchBypassState
  8017 ;; This function is called by:
  8018 ;;		_main
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           
  8023                           ;psect for function _updateSwitchBypass
  8024  1717                     _updateSwitchBypass:	
  8025                           
  8026                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8030  1717  0020               	movlb	0	; select bank0
  8031  1718  1890               	btfsc	16,1	;volatile
  8032  1719  2F2D               	goto	l7867
  8033                           
  8034                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  8035  171A  0023               	movlb	3	; select bank3
  8036  171B  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  8037  171C  3A80               	xorlw	128
  8038  171D  0021               	movlb	1	; select bank1
  8039  171E  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8040  171F  3080               	movlw	128
  8041  1720  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8042  1721  1D03               	skipz
  8043  1722  2F26               	goto	u8405
  8044  1723  3001               	movlw	1
  8045  1724  0023               	movlb	3	; select bank3
  8046  1725  023C               	subwf	_switchBypass_pressed^(0+384),w
  8047  1726                     u8405:	
  8048  1726  1C03               	skipc
  8049  1727  2F40               	goto	l7871
  8050                           
  8051                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  8052  1728  30FF               	movlw	255
  8053  1729  0023               	movlb	3	; select bank3
  8054  172A  07BC               	addwf	_switchBypass_pressed^(0+384),f
  8055  172B  30FF               	movlw	255
  8056  172C  2F3F               	goto	L1
  8057  172D                     l7867:	
  8058                           ;SwitchBypass.c: 44: }
  8059                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  8060                           
  8061  172D  0023               	movlb	3	; select bank3
  8062  172E  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  8063  172F  3A80               	xorlw	128
  8064  1730  0021               	movlb	1	; select bank1
  8065  1731  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8066  1732  3080               	movlw	128
  8067  1733  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8068  1734  1D03               	skipz
  8069  1735  2F39               	goto	u8415
  8070  1736  3019               	movlw	25
  8071  1737  0023               	movlb	3	; select bank3
  8072  1738  023C               	subwf	_switchBypass_pressed^(0+384),w
  8073  1739                     u8415:	
  8074  1739  1803               	skipnc
  8075  173A  2F40               	goto	l7871
  8076                           
  8077                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  8078  173B  3001               	movlw	1
  8079  173C  0023               	movlb	3	; select bank3
  8080  173D  07BC               	addwf	_switchBypass_pressed^(0+384),f
  8081  173E  3000               	movlw	0
  8082  173F                     L1:	
  8083  173F  3DBD               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  8084  1740                     l7871:	
  8085                           
  8086                           ;SwitchBypass.c: 47: }
  8087                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  8088  1740  0023               	movlb	3	; select bank3
  8089  1741  083C               	movf	_switchBypass_pressed^(0+384),w
  8090  1742  043D               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  8091  1743  1D03               	btfss	3,2
  8092  1744  2FA0               	goto	l7911
  8093                           
  8094                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  8095  1745  0840               	movf	_feedback_start^(0+384),w
  8096  1746  1D03               	btfss	3,2
  8097  1747  2F4C               	goto	l7879
  8098                           
  8099                           ;SwitchBypass.c: 57: feedback_start = 1;
  8100  1748  01C0               	clrf	_feedback_start^(0+384)
  8101  1749  0AC0               	incf	_feedback_start^(0+384),f
  8102                           
  8103                           ;SwitchBypass.c: 58: feedback_timer = 0;
  8104  174A  01AA               	clrf	_feedback_timer^(0+384)	;volatile
  8105  174B  01AB               	clrf	(_feedback_timer+1)^(0+384)	;volatile
  8106  174C                     l7879:	
  8107                           
  8108                           ;SwitchBypass.c: 59: }
  8109                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  8110  174C  0020               	movlb	0	; select bank0
  8111  174D  0852               	movf	_long_press_limit+1,w
  8112  174E  0023               	movlb	3	; select bank3
  8113  174F  022B               	subwf	(_feedback_timer+1)^(0+384),w	;volatile
  8114  1750  1D03               	skipz
  8115  1751  2F56               	goto	u8445
  8116  1752  0020               	movlb	0	; select bank0
  8117  1753  0851               	movf	_long_press_limit,w
  8118  1754  0023               	movlb	3	; select bank3
  8119  1755  022A               	subwf	_feedback_timer^(0+384),w	;volatile
  8120  1756                     u8445:	
  8121  1756  1C03               	skipc
  8122  1757  2F76               	goto	l7893
  8123  1758  0020               	movlb	0	; select bank0
  8124  1759  0856               	movf	_feedback_state,w	;volatile
  8125  175A  1D03               	btfss	3,2
  8126  175B  2F76               	goto	l7893
  8127  175C  0866               	movf	_doubleTap_state,w	;volatile
  8128  175D  1D03               	btfss	3,2
  8129  175E  2F76               	goto	l7893
  8130                           
  8131                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  8132  175F  0022               	movlb	2	; select bank2
  8133  1760  110D               	bcf	13,2	;volatile
  8134                           
  8135                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  8136  1761  0023               	movlb	3	; select bank3
  8137  1762  0342               	decf	_longTap_start^(0+384),w
  8138  1763  1903               	btfsc	3,2
  8139  1764  2F6E               	goto	l7891
  8140                           
  8141                           ;SwitchBypass.c: 66: setFeedbackState(1);
  8142  1765  3001               	movlw	1
  8143  1766  0021               	movlb	1	; select bank1
  8144  1767  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8145  1768  3000               	movlw	0
  8146  1769  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  8147  176A  31A6  261B  3197   	fcall	_setFeedbackState
  8148                           
  8149                           ;SwitchBypass.c: 67: } else {
  8150  176D  2F76               	goto	l7893
  8151  176E                     l7891:	
  8152                           
  8153                           ;SwitchBypass.c: 68: setDoublePressState(1);
  8154  176E  3001               	movlw	1
  8155  176F  0021               	movlb	1	; select bank1
  8156  1770  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8157  1771  3000               	movlw	0
  8158  1772  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8159  1773  3199  21E8  3197   	fcall	_setDoublePressState
  8160  1776                     l7893:	
  8161                           
  8162                           ;SwitchBypass.c: 69: }
  8163                           ;SwitchBypass.c: 70: }
  8164                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  8165  1776  0020               	movlb	0	; select bank0
  8166  1777  0866               	movf	_doubleTap_state,w	;volatile
  8167  1778  1D03               	btfss	3,2
  8168  1779  2F9C               	goto	l1240
  8169  177A  0856               	movf	_feedback_state,w	;volatile
  8170  177B  1D03               	btfss	3,2
  8171  177C  2F9C               	goto	l1240
  8172                           
  8173                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  8174  177D  0359               	decf	_switchBypass_state,w
  8175  177E  1D03               	btfss	3,2
  8176  177F  2F8E               	goto	l7905
  8177                           
  8178                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  8179  1780  0024               	movlb	4	; select bank4
  8180  1781  0365               	decf	_switchBypass_up^(0+512),w
  8181  1782  0466               	iorwf	(_switchBypass_up+1)^(0+512),w
  8182  1783  1D03               	btfss	3,2
  8183  1784  2F9C               	goto	l1240
  8184                           
  8185                           ;SwitchBypass.c: 76: currentBypassState = 1;
  8186  1785  0023               	movlb	3	; select bank3
  8187  1786  01D9               	clrf	_currentBypassState^(0+384)
  8188  1787  0AD9               	incf	_currentBypassState^(0+384),f
  8189                           
  8190                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  8191  1788  3001               	movlw	1
  8192  1789  0024               	movlb	4	; select bank4
  8193  178A  00D7               	movwf	_switchBypass_toggle^(0+512)
  8194  178B  3000               	movlw	0
  8195  178C  00D8               	movwf	(_switchBypass_toggle^(0+512)+1)
  8196                           
  8197                           ;SwitchBypass.c: 78: }
  8198                           ;SwitchBypass.c: 93: } else {
  8199  178D  2F9C               	goto	l1240
  8200  178E                     l7905:	
  8201                           
  8202                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  8203  178E  0023               	movlb	3	; select bank3
  8204  178F  033F               	decf	_bypass_turning_on^(0+384),w
  8205  1790  1903               	btfsc	3,2
  8206  1791  2F9C               	goto	l1240
  8207                           
  8208                           ;SwitchBypass.c: 96: currentBypassState = 0;
  8209  1792  01D9               	clrf	_currentBypassState^(0+384)
  8210                           
  8211                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  8212  1793  01BF               	clrf	_bypass_turning_on^(0+384)
  8213  1794  0ABF               	incf	_bypass_turning_on^(0+384),f
  8214                           
  8215                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  8216  1795  0024               	movlb	4	; select bank4
  8217  1796  01D7               	clrf	_switchBypass_toggle^(0+512)
  8218  1797  01D8               	clrf	(_switchBypass_toggle+1)^(0+512)
  8219                           
  8220                           ;SwitchBypass.c: 101: feedback_state = 0;
  8221  1798  0020               	movlb	0	; select bank0
  8222  1799  01D6               	clrf	_feedback_state	;volatile
  8223                           
  8224                           ;SwitchBypass.c: 102: feedback_start = 0;
  8225  179A  0023               	movlb	3	; select bank3
  8226  179B  01C0               	clrf	_feedback_start^(0+384)
  8227  179C                     l1240:	
  8228                           
  8229                           ;SwitchBypass.c: 103: }
  8230                           ;SwitchBypass.c: 104: }
  8231                           ;SwitchBypass.c: 106: }
  8232                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  8233  179C  0024               	movlb	4	; select bank4
  8234  179D  01E5               	clrf	_switchBypass_up^(0+512)
  8235  179E  01E6               	clrf	(_switchBypass_up+1)^(0+512)
  8236                           
  8237                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  8238  179F  0008               	return
  8239  17A0                     l7911:	
  8240  17A0  0023               	movlb	3	; select bank3
  8241  17A1  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  8242  17A2  3A80               	xorlw	128
  8243  17A3  0021               	movlb	1	; select bank1
  8244  17A4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8245  17A5  3080               	movlw	128
  8246  17A6  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8247  17A7  1D03               	skipz
  8248  17A8  2FAC               	goto	u8535
  8249  17A9  3019               	movlw	25
  8250  17AA  0023               	movlb	3	; select bank3
  8251  17AB  023C               	subwf	_switchBypass_pressed^(0+384),w
  8252  17AC                     u8535:	
  8253  17AC  1C03               	skipc
  8254  17AD  0008               	return
  8255                           
  8256                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  8257  17AE  0020               	movlb	0	; select bank0
  8258  17AF  0366               	decf	_doubleTap_state,w	;volatile
  8259  17B0  1D03               	btfss	3,2
  8260  17B1  2FBB               	goto	l7917
  8261                           
  8262                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  8263  17B2  0023               	movlb	3	; select bank3
  8264  17B3  0859               	movf	_currentBypassState^(0+384),w
  8265  17B4  0021               	movlb	1	; select bank1
  8266  17B5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8267  17B6  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8268  17B7  083C               	movf	??_updateSwitchBypass^(0+128),w
  8269  17B8  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8270  17B9  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8271  17BA  2FD8               	goto	L2
  8272  17BB                     l7917:	
  8273                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  8274                           
  8275  17BB  0023               	movlb	3	; select bank3
  8276  17BC  033F               	decf	_bypass_turning_on^(0+384),w
  8277  17BD  1903               	btfsc	3,2
  8278  17BE  2FC3               	goto	l7921
  8279  17BF  0020               	movlb	0	; select bank0
  8280  17C0  0356               	decf	_feedback_state,w	;volatile
  8281  17C1  1D03               	btfss	3,2
  8282  17C2  2FC9               	goto	l7923
  8283  17C3                     l7921:	
  8284                           
  8285                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  8286  17C3  3001               	movlw	1
  8287  17C4  0021               	movlb	1	; select bank1
  8288  17C5  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8289  17C6  3000               	movlw	0
  8290  17C7  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8291  17C8  2FD9               	goto	L3
  8292  17C9                     l7923:	
  8293                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  8294                           
  8295  17C9  0024               	movlb	4	; select bank4
  8296  17CA  0357               	decf	_switchBypass_toggle^(0+512),w
  8297  17CB  0458               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8298  17CC  1D03               	btfss	3,2
  8299  17CD  2FDC               	goto	l7931
  8300  17CE  0020               	movlb	0	; select bank0
  8301  17CF  0856               	movf	_feedback_state,w	;volatile
  8302  17D0  1D03               	btfss	3,2
  8303  17D1  2FDC               	goto	l7931
  8304  17D2  0866               	movf	_doubleTap_state,w	;volatile
  8305  17D3  1D03               	btfss	3,2
  8306  17D4  2FDC               	goto	l7931
  8307                           
  8308                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8309  17D5  3000               	movlw	0
  8310  17D6  0021               	movlb	1	; select bank1
  8311  17D7  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8312  17D8                     L2:	
  8313  17D8  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8314  17D9                     L3:	
  8315  17D9  319B  23B2  3197   	fcall	_setSwitchBypassState
  8316  17DC                     l7931:	
  8317                           
  8318                           ;SwitchBypass.c: 115: }
  8319                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8320  17DC  0020               	movlb	0	; select bank0
  8321  17DD  0C59               	rrf	_switchBypass_state,w
  8322  17DE  0022               	movlb	2	; select bank2
  8323  17DF  1C03               	skipc
  8324  17E0  110D               	bcf	13,2	;volatile
  8325  17E1  1803               	skipnc
  8326  17E2  150D               	bsf	13,2	;volatile
  8327                           
  8328                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8329  17E3  3000               	movlw	0
  8330  17E4  0021               	movlb	1	; select bank1
  8331  17E5  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8332  17E6  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  8333  17E7  31A6  261B  3197   	fcall	_setFeedbackState
  8334                           
  8335                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8336  17EA  3000               	movlw	0
  8337  17EB  0021               	movlb	1	; select bank1
  8338  17EC  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8339  17ED  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8340  17EE  3199  21E8         	fcall	_setDoublePressState
  8341                           
  8342                           ;SwitchBypass.c: 122: feedback_start = 0;
  8343  17F0  0023               	movlb	3	; select bank3
  8344  17F1  01C0               	clrf	_feedback_start^(0+384)
  8345                           
  8346                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8347  17F2  01BF               	clrf	_bypass_turning_on^(0+384)
  8348                           
  8349                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8350  17F3  0024               	movlb	4	; select bank4
  8351  17F4  01D7               	clrf	_switchBypass_toggle^(0+512)
  8352  17F5  01D8               	clrf	(_switchBypass_toggle+1)^(0+512)
  8353                           
  8354                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8355  17F6  3001               	movlw	1
  8356  17F7  00E5               	movwf	_switchBypass_up^(0+512)
  8357  17F8  3000               	movlw	0
  8358  17F9  00E6               	movwf	(_switchBypass_up^(0+512)+1)
  8359                           
  8360                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8361  17FA  3019               	movlw	25
  8362  17FB  0023               	movlb	3	; select bank3
  8363  17FC  00BC               	movwf	_switchBypass_pressed^(0+384)
  8364  17FD  3000               	movlw	0
  8365  17FE  00BD               	movwf	(_switchBypass_pressed^(0+384)+1)
  8366  17FF  0008               	return
  8367  1800                     __end_of_updateSwitchBypass:	
  8368                           
  8369                           	psect	text7
  8370  261B                     __ptext7:	
  8371 ;; *************** function _setFeedbackState *****************
  8372 ;; Defined at:
  8373 ;;		line 151 in file "SwitchBypass.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  f_state         2    0[BANK1 ] int 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  1    wreg      void 
  8380 ;; Registers used:
  8381 ;;		wreg, status,0
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8387 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8389 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8390 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8391 ;;Total ram usage:        4 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    3
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_updateSwitchBypass
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _setFeedbackState
  8403  261B                     _setFeedbackState:	
  8404                           
  8405                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8406                           
  8407                           ;incstack = 0
  8408                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8409  261B  0020               	movlb	0	; select bank0
  8410  261C  0856               	movf	_feedback_state,w	;volatile
  8411  261D  0021               	movlb	1	; select bank1
  8412  261E  00A2               	movwf	??_setFeedbackState^(0+128)
  8413  261F  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  8414  2620  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  8415  2621  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  8416  2622  1D03               	skipz
  8417  2623  2E26               	goto	u8015
  8418  2624  0820               	movf	setFeedbackState@f_state^(0+128),w
  8419  2625  0622               	xorwf	??_setFeedbackState^(0+128),w
  8420  2626                     u8015:	
  8421  2626  1903               	btfsc	3,2
  8422  2627  0008               	return
  8423                           
  8424                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8425  2628  0820               	movf	setFeedbackState@f_state^(0+128),w
  8426  2629  00A2               	movwf	??_setFeedbackState^(0+128)
  8427  262A  0822               	movf	??_setFeedbackState^(0+128),w
  8428  262B  0020               	movlb	0	; select bank0
  8429  262C  00D6               	movwf	_feedback_state	;volatile
  8430                           
  8431                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8432  262D  0021               	movlb	1	; select bank1
  8433  262E  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  8434  262F  0022               	movlb	2	; select bank2
  8435  2630  1C03               	skipc
  8436  2631  118D               	bcf	13,3	;volatile
  8437  2632  1803               	skipnc
  8438  2633  158D               	bsf	13,3	;volatile
  8439  2634  0008               	return
  8440  2635                     __end_of_setFeedbackState:	
  8441                           
  8442                           	psect	text8
  8443  19E8                     __ptext8:	
  8444 ;; *************** function _setDoublePressState *****************
  8445 ;; Defined at:
  8446 ;;		line 21 in file "preset_programming.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;  f_state         2   24[BANK1 ] int 
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;		None
  8451 ;; Return value:  Size  Location     Type
  8452 ;;                  1    wreg      void 
  8453 ;; Registers used:
  8454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8455 ;; Tracked objects:
  8456 ;;		On entry : 0/0
  8457 ;;		On exit  : 0/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8460 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8462 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8463 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8464 ;;Total ram usage:        4 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; Hardware stack levels required when called:    7
  8467 ;; This function calls:
  8468 ;;		_resetRingLEDs
  8469 ;;		_setPedalMode
  8470 ;;		_setPresetDisplay
  8471 ;;		_showSave
  8472 ;;		_wait_ms
  8473 ;; This function is called by:
  8474 ;;		_updateSwitchBypass
  8475 ;;		_updateSwitchTap
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function _setDoublePressState
  8481  19E8                     _setDoublePressState:	
  8482                           
  8483                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8484                           
  8485                           ;incstack = 0
  8486                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8487  19E8  0020               	movlb	0	; select bank0
  8488  19E9  0866               	movf	_doubleTap_state,w	;volatile
  8489  19EA  0021               	movlb	1	; select bank1
  8490  19EB  00BA               	movwf	??_setDoublePressState^(0+128)
  8491  19EC  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8492  19ED  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8493  19EE  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8494  19EF  1D03               	skipz
  8495  19F0  29F3               	goto	u8025
  8496  19F1  0838               	movf	setDoublePressState@f_state^(0+128),w
  8497  19F2  063A               	xorwf	??_setDoublePressState^(0+128),w
  8498  19F3                     u8025:	
  8499  19F3  1903               	btfsc	3,2
  8500  19F4  0008               	return
  8501                           
  8502                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8503  19F5  0838               	movf	setDoublePressState@f_state^(0+128),w
  8504  19F6  00BA               	movwf	??_setDoublePressState^(0+128)
  8505  19F7  083A               	movf	??_setDoublePressState^(0+128),w
  8506  19F8  0020               	movlb	0	; select bank0
  8507  19F9  00E6               	movwf	_doubleTap_state	;volatile
  8508                           
  8509                           ;preset_programming.c: 24: if (f_state == 1) {
  8510  19FA  0021               	movlb	1	; select bank1
  8511  19FB  0338               	decf	setDoublePressState@f_state^(0+128),w
  8512  19FC  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8513  19FD  1D03               	btfss	3,2
  8514  19FE  2A02               	goto	l7655
  8515                           
  8516                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8517  19FF  0022               	movlb	2	; select bank2
  8518  1A00  120D               	bcf	13,4	;volatile
  8519                           
  8520                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8521  1A01  128D               	bcf	13,5	;volatile
  8522  1A02                     l7655:	
  8523                           
  8524                           ;preset_programming.c: 30: }
  8525                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8526  1A02  0020               	movlb	0	; select bank0
  8527  1A03  0366               	decf	_doubleTap_state,w	;volatile
  8528  1A04  1D03               	btfss	3,2
  8529  1A05  2A1E               	goto	l7671
  8530                           
  8531                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8532  1A06  0868               	movf	_presetSaveMode,w
  8533  1A07  1D03               	btfss	3,2
  8534  1A08  2A13               	goto	l7663
  8535                           
  8536                           ;preset_programming.c: 34: presetSaveMode = 1;
  8537  1A09  01E8               	clrf	_presetSaveMode
  8538  1A0A  0AE8               	incf	_presetSaveMode,f
  8539                           
  8540                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8541  1A0B  0022               	movlb	2	; select bank2
  8542  1A0C  108D               	bcf	13,1	;volatile
  8543                           
  8544                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8545  1A0D  0023               	movlb	3	; select bank3
  8546  1A0E  085D               	movf	_presetChannel^(0+384),w
  8547  1A0F  3198  2043  3199   	fcall	_setPresetDisplay
  8548                           
  8549                           ;preset_programming.c: 37: } else {
  8550  1A12  2A1E               	goto	l7671
  8551  1A13                     l7663:	
  8552                           
  8553                           ;preset_programming.c: 39: presetSaveMode = 0;
  8554  1A13  0020               	movlb	0	; select bank0
  8555  1A14  01E8               	clrf	_presetSaveMode
  8556                           
  8557                           ;preset_programming.c: 40: setPedalMode();
  8558  1A15  31A6  26CB  3199   	fcall	_setPedalMode
  8559                           
  8560                           ;preset_programming.c: 41: resetRingLEDs();
  8561  1A18  31A6  2601  3199   	fcall	_resetRingLEDs
  8562                           
  8563                           ;preset_programming.c: 42: showSave();
  8564  1A1B  31A5  25A9  3199   	fcall	_showSave
  8565  1A1E                     l7671:	
  8566                           
  8567                           ;preset_programming.c: 44: }
  8568                           ;preset_programming.c: 45: }
  8569                           ;preset_programming.c: 47: wait_ms(20);
  8570  1A1E  3014               	movlw	20
  8571  1A1F  0021               	movlb	1	; select bank1
  8572  1A20  00AC               	movwf	wait_ms@timeSec^(0+128)
  8573  1A21  3000               	movlw	0
  8574  1A22  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8575  1A23  31A7  27CE         	fcall	_wait_ms
  8576  1A25  0008               	return
  8577  1A26                     __end_of_setDoublePressState:	
  8578                           
  8579                           	psect	text9
  8580  25A9                     __ptext9:	
  8581 ;; *************** function _showSave *****************
  8582 ;; Defined at:
  8583 ;;		line 112 in file "LEDs.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;		None
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;		None
  8588 ;; Return value:  Size  Location     Type
  8589 ;;                  1    wreg      void 
  8590 ;; Registers used:
  8591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8599 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8600 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8601 ;;Total ram usage:        1 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    6
  8604 ;; This function calls:
  8605 ;;		_ring_tactiles
  8606 ;;		_solidring_tactiles
  8607 ;; This function is called by:
  8608 ;;		_setDoublePressState
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           
  8613                           ;psect for function _showSave
  8614  25A9                     _showSave:	
  8615                           
  8616                           ;LEDs.c: 113: suspend_blink = 1;
  8617                           
  8618                           ;incstack = 0
  8619                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8620  25A9  3001               	movlw	1
  8621  25AA  0021               	movlb	1	; select bank1
  8622  25AB  00B7               	movwf	??_showSave^(0+128)
  8623  25AC  0837               	movf	??_showSave^(0+128),w
  8624  25AD  0023               	movlb	3	; select bank3
  8625  25AE  00C6               	movwf	_suspend_blink^(0+384)	;volatile
  8626                           
  8627                           ;LEDs.c: 114: ring_tactiles();
  8628  25AF  319C  249B  31A5   	fcall	_ring_tactiles
  8629                           
  8630                           ;LEDs.c: 115: ring_tactiles();
  8631  25B2  319C  249B  31A5   	fcall	_ring_tactiles
  8632                           
  8633                           ;LEDs.c: 116: solidring_tactiles();
  8634  25B5  319A  2266  31A5   	fcall	_solidring_tactiles
  8635                           
  8636                           ;LEDs.c: 117: solidring_tactiles();
  8637  25B8  319A  2266         	fcall	_solidring_tactiles
  8638                           
  8639                           ;LEDs.c: 118: suspend_blink = 0;
  8640  25BA  0023               	movlb	3	; select bank3
  8641  25BB  01C6               	clrf	_suspend_blink^(0+384)	;volatile
  8642  25BC  0008               	return
  8643  25BD                     __end_of_showSave:	
  8644                           
  8645                           	psect	text10
  8646  1A66                     __ptext10:	
  8647 ;; *************** function _solidring_tactiles *****************
  8648 ;; Defined at:
  8649 ;;		line 208 in file "LEDs.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;		None
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  1    wreg      void 
  8656 ;; Registers used:
  8657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8664 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8665 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8666 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8667 ;;Total ram usage:        3 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    5
  8670 ;; This function calls:
  8671 ;;		_set_leds_bottom
  8672 ;;		_set_leds_top
  8673 ;;		_wait_ms
  8674 ;; This function is called by:
  8675 ;;		_showSave
  8676 ;;		_showBootSequence
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           
  8681                           ;psect for function _solidring_tactiles
  8682  1A66                     _solidring_tactiles:	
  8683                           
  8684                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8685                           
  8686                           ;incstack = 0
  8687                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8688  1A66  301E               	movlw	30
  8689  1A67  0021               	movlb	1	; select bank1
  8690  1A68  00B2               	movwf	??_solidring_tactiles^(0+128)
  8691  1A69  0832               	movf	??_solidring_tactiles^(0+128),w
  8692  1A6A  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8693                           
  8694                           ;LEDs.c: 210: set_leds_top(100, 1);
  8695  1A6B  3064               	movlw	100
  8696  1A6C  00A0               	movwf	set_leds_top@x^(0+128)
  8697  1A6D  3000               	movlw	0
  8698  1A6E  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8699  1A6F  3001               	movlw	1
  8700  1A70  00A2               	movwf	set_leds_top@ledState^(0+128)
  8701  1A71  3000               	movlw	0
  8702  1A72  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8703  1A73  319D  258E  319A   	fcall	_set_leds_top
  8704                           
  8705                           ;LEDs.c: 211: set_leds_bottom(100);
  8706  1A76  3064               	movlw	100
  8707  1A77  0021               	movlb	1	; select bank1
  8708  1A78  00A0               	movwf	set_leds_bottom@x^(0+128)
  8709  1A79  3000               	movlw	0
  8710  1A7A  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8711  1A7B  3198  207D  319A   	fcall	_set_leds_bottom
  8712                           
  8713                           ;LEDs.c: 212: wait_ms(ring_delay);
  8714  1A7E  0021               	movlb	1	; select bank1
  8715  1A7F  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8716  1A80  00B2               	movwf	??_solidring_tactiles^(0+128)
  8717  1A81  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8718  1A82  0832               	movf	??_solidring_tactiles^(0+128),w
  8719  1A83  00AC               	movwf	wait_ms@timeSec^(0+128)
  8720  1A84  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8721  1A85  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8722  1A86  31A7  27CE  319A   	fcall	_wait_ms
  8723                           
  8724                           ;LEDs.c: 214: set_leds_top(0, 1);
  8725  1A89  3000               	movlw	0
  8726  1A8A  0021               	movlb	1	; select bank1
  8727  1A8B  00A0               	movwf	set_leds_top@x^(0+128)
  8728  1A8C  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8729  1A8D  3001               	movlw	1
  8730  1A8E  00A2               	movwf	set_leds_top@ledState^(0+128)
  8731  1A8F  3000               	movlw	0
  8732  1A90  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8733  1A91  319D  258E  319A   	fcall	_set_leds_top
  8734                           
  8735                           ;LEDs.c: 215: set_leds_bottom(0);
  8736  1A94  3000               	movlw	0
  8737  1A95  0021               	movlb	1	; select bank1
  8738  1A96  00A0               	movwf	set_leds_bottom@x^(0+128)
  8739  1A97  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8740  1A98  3198  207D  319A   	fcall	_set_leds_bottom
  8741                           
  8742                           ;LEDs.c: 216: wait_ms(ring_delay);
  8743  1A9B  0021               	movlb	1	; select bank1
  8744  1A9C  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8745  1A9D  00B2               	movwf	??_solidring_tactiles^(0+128)
  8746  1A9E  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8747  1A9F  0832               	movf	??_solidring_tactiles^(0+128),w
  8748  1AA0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8749  1AA1  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8750  1AA2  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8751  1AA3  31A7  27CE         	fcall	_wait_ms
  8752  1AA5  0008               	return
  8753  1AA6                     __end_of_solidring_tactiles:	
  8754                           
  8755                           	psect	text11
  8756  1C9B                     __ptext11:	
  8757 ;; *************** function _ring_tactiles *****************
  8758 ;; Defined at:
  8759 ;;		line 196 in file "LEDs.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  iLed            2   21[BANK1 ] int 
  8764 ;;  iLed            2   19[BANK1 ] int 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  1    wreg      void 
  8767 ;; Registers used:
  8768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8775 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8776 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8777 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8778 ;;Total ram usage:        5 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    5
  8781 ;; This function calls:
  8782 ;;		_set_leds_bottom
  8783 ;;		_set_leds_top
  8784 ;;		_wait_ms
  8785 ;; This function is called by:
  8786 ;;		_showSave
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           
  8791                           ;psect for function _ring_tactiles
  8792  1C9B                     _ring_tactiles:	
  8793                           
  8794                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8795                           
  8796                           ;incstack = 0
  8797                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8798  1C9B  3001               	movlw	1
  8799  1C9C  0021               	movlb	1	; select bank1
  8800  1C9D  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8801  1C9E  3000               	movlw	0
  8802  1C9F  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8803  1CA0  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8804  1CA1  3A80               	xorlw	128
  8805  1CA2  00B2               	movwf	??_ring_tactiles^(0+128)
  8806  1CA3  3080               	movlw	128
  8807  1CA4  0232               	subwf	??_ring_tactiles^(0+128),w
  8808  1CA5  1D03               	skipz
  8809  1CA6  2CA9               	goto	u7545
  8810  1CA7  3007               	movlw	7
  8811  1CA8  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8812  1CA9                     u7545:	
  8813  1CA9  1803               	btfsc	3,0
  8814  1CAA  2CCF               	goto	l7213
  8815  1CAB                     l7205:	
  8816                           
  8817                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8818  1CAB  0021               	movlb	1	; select bank1
  8819  1CAC  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8820  1CAD  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8821  1CAE  0833               	movf	ring_tactiles@iLed^(0+128),w
  8822  1CAF  00A0               	movwf	set_leds_top@x^(0+128)
  8823  1CB0  3001               	movlw	1
  8824  1CB1  00A2               	movwf	set_leds_top@ledState^(0+128)
  8825  1CB2  3000               	movlw	0
  8826  1CB3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8827  1CB4  319D  258E  319C   	fcall	_set_leds_top
  8828                           
  8829                           ;LEDs.c: 199: wait_ms(5);
  8830  1CB7  3005               	movlw	5
  8831  1CB8  0021               	movlb	1	; select bank1
  8832  1CB9  00AC               	movwf	wait_ms@timeSec^(0+128)
  8833  1CBA  3000               	movlw	0
  8834  1CBB  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8835  1CBC  31A7  27CE  319C   	fcall	_wait_ms
  8836  1CBF  3001               	movlw	1
  8837  1CC0  0021               	movlb	1	; select bank1
  8838  1CC1  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8839  1CC2  3000               	movlw	0
  8840  1CC3  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8841  1CC4  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8842  1CC5  3A80               	xorlw	128
  8843  1CC6  00B2               	movwf	??_ring_tactiles^(0+128)
  8844  1CC7  3080               	movlw	128
  8845  1CC8  0232               	subwf	??_ring_tactiles^(0+128),w
  8846  1CC9  1D03               	skipz
  8847  1CCA  2CCD               	goto	u7555
  8848  1CCB  3007               	movlw	7
  8849  1CCC  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8850  1CCD                     u7555:	
  8851  1CCD  1C03               	skipc
  8852  1CCE  2CAB               	goto	l7205
  8853  1CCF                     l7213:	
  8854                           
  8855                           ;LEDs.c: 200: }
  8856                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8857  1CCF  3005               	movlw	5
  8858  1CD0  0021               	movlb	1	; select bank1
  8859  1CD1  00B5               	movwf	ring_tactiles@iLed_1522^(0+128)
  8860  1CD2  3000               	movlw	0
  8861  1CD3  00B6               	movwf	(ring_tactiles@iLed_1522^(0+128)+1)
  8862  1CD4                     L4:	
  8863  1CD4  1BB6               	btfsc	(ring_tactiles@iLed_1522+1)^(0+128),7
  8864  1CD5  0008               	return
  8865                           
  8866                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8867  1CD6  0836               	movf	(ring_tactiles@iLed_1522+1)^(0+128),w
  8868  1CD7  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8869  1CD8  0835               	movf	ring_tactiles@iLed_1522^(0+128),w
  8870  1CD9  00A0               	movwf	set_leds_bottom@x^(0+128)
  8871  1CDA  3198  207D  319C   	fcall	_set_leds_bottom
  8872                           
  8873                           ;LEDs.c: 203: wait_ms(5);
  8874  1CDD  3005               	movlw	5
  8875  1CDE  0021               	movlb	1	; select bank1
  8876  1CDF  00AC               	movwf	wait_ms@timeSec^(0+128)
  8877  1CE0  3000               	movlw	0
  8878  1CE1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8879  1CE2  31A7  27CE  319C   	fcall	_wait_ms
  8880  1CE5  30FF               	movlw	255
  8881  1CE6  0021               	movlb	1	; select bank1
  8882  1CE7  07B5               	addwf	ring_tactiles@iLed_1522^(0+128),f
  8883  1CE8  30FF               	movlw	255
  8884  1CE9  3DB6               	addwfc	(ring_tactiles@iLed_1522+1)^(0+128),f
  8885  1CEA  2CD4               	goto	L4
  8886  1CEB                     __end_of_ring_tactiles:	
  8887                           
  8888                           	psect	text12
  8889  26CB                     __ptext12:	
  8890 ;; *************** function _setPedalMode *****************
  8891 ;; Defined at:
  8892 ;;		line 118 in file "tactiles.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;		None
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  1    wreg      void 
  8899 ;; Registers used:
  8900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8910 ;;Total ram usage:        0 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    5
  8913 ;; This function calls:
  8914 ;;		_resetRingLEDs
  8915 ;;		_setExpressionDisplay
  8916 ;;		_setPresetDisplay
  8917 ;; This function is called by:
  8918 ;;		_update_mode
  8919 ;;		_setDoublePressState
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           
  8924                           ;psect for function _setPedalMode
  8925  26CB                     _setPedalMode:	
  8926                           
  8927                           ;tactiles.c: 119: switch (mode2_state) {
  8928                           
  8929                           ;incstack = 0
  8930                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8931  26CB  2EE2               	goto	l7413
  8932  26CC                     l986:	
  8933                           ;tactiles.c: 120: case 0:
  8934                           
  8935                           
  8936                           ;tactiles.c: 121: LATBbits.LATB1 = 0;
  8937  26CC  0022               	movlb	2	; select bank2
  8938  26CD  108D               	bcf	13,1	;volatile
  8939                           
  8940                           ;tactiles.c: 122: LATBbits.LATB0 = 0;
  8941  26CE  100D               	bcf	13,0	;volatile
  8942                           
  8943                           ;tactiles.c: 123: resetRingLEDs();
  8944  26CF  31A6  2601         	fcall	_resetRingLEDs
  8945                           
  8946                           ;tactiles.c: 124: break;
  8947  26D1  0008               	return
  8948  26D2                     l988:	
  8949                           ;tactiles.c: 125: case 1:
  8950                           
  8951                           
  8952                           ;tactiles.c: 126: LATBbits.LATB1 = 0;
  8953  26D2  0022               	movlb	2	; select bank2
  8954  26D3  108D               	bcf	13,1	;volatile
  8955                           
  8956                           ;tactiles.c: 127: LATBbits.LATB0 = 1;
  8957  26D4  140D               	bsf	13,0	;volatile
  8958                           
  8959                           ;tactiles.c: 128: setPresetDisplay(presetChannel);
  8960  26D5  0023               	movlb	3	; select bank3
  8961  26D6  085D               	movf	_presetChannel^(0+384),w
  8962  26D7  3198  2043         	fcall	_setPresetDisplay
  8963                           
  8964                           ;tactiles.c: 129: break;
  8965  26D9  0008               	return
  8966  26DA                     l989:	
  8967                           ;tactiles.c: 130: case 2:
  8968                           
  8969                           
  8970                           ;tactiles.c: 131: LATBbits.LATB1 = 1;
  8971  26DA  0022               	movlb	2	; select bank2
  8972  26DB  148D               	bsf	13,1	;volatile
  8973                           
  8974                           ;tactiles.c: 132: LATBbits.LATB0 = 0;
  8975  26DC  100D               	bcf	13,0	;volatile
  8976                           
  8977                           ;tactiles.c: 133: setExpressionDisplay(expressionChannel);
  8978  26DD  0023               	movlb	3	; select bank3
  8979  26DE  085C               	movf	_expressionChannel^(0+384),w
  8980  26DF  31A5  25E9         	fcall	_setExpressionDisplay
  8981                           
  8982                           ;tactiles.c: 135: }
  8983                           
  8984                           ;tactiles.c: 134: break;
  8985  26E1  0008               	return
  8986  26E2                     l7413:	
  8987  26E2  0020               	movlb	0	; select bank0
  8988  26E3  0867               	movf	_mode2_state,w
  8989                           
  8990                           ; Switch size 1, requested type "space"
  8991                           ; Number of cases is 3, Range of values is 0 to 2
  8992                           ; switch strategies available:
  8993                           ; Name         Instructions Cycles
  8994                           ; simple_byte           10     6 (average)
  8995                           ; direct_byte           12     6 (fixed)
  8996                           ; jumptable            260     6 (fixed)
  8997                           ;	Chosen strategy is simple_byte
  8998  26E4  3A00               	xorlw	0	; case 0
  8999  26E5  1903               	skipnz
  9000  26E6  2ECC               	goto	l986
  9001  26E7  3A01               	xorlw	1	; case 1
  9002  26E8  1903               	skipnz
  9003  26E9  2ED2               	goto	l988
  9004  26EA  3A03               	xorlw	3	; case 2
  9005  26EB  1903               	skipnz
  9006  26EC  2EDA               	goto	l989
  9007  26ED  2EEE               	goto	l990
  9008  26EE                     l990:	
  9009  26EE  0008               	return
  9010  26EF                     __end_of_setPedalMode:	
  9011                           
  9012                           	psect	text13
  9013  1843                     __ptext13:	
  9014 ;; *************** function _setPresetDisplay *****************
  9015 ;; Defined at:
  9016 ;;		line 51 in file "preset_programming.c"
  9017 ;; Parameters:    Size  Location     Type
  9018 ;;  ledChannel      1    wreg     unsigned char 
  9019 ;; Auto vars:     Size  Location     Type
  9020 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9021 ;; Return value:  Size  Location     Type
  9022 ;;                  1    wreg      void 
  9023 ;; Registers used:
  9024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9025 ;; Tracked objects:
  9026 ;;		On entry : 0/0
  9027 ;;		On exit  : 0/0
  9028 ;;		Unchanged: 0/0
  9029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9031 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9032 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9033 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9034 ;;Total ram usage:        3 bytes
  9035 ;; Hardware stack levels used:    1
  9036 ;; Hardware stack levels required when called:    4
  9037 ;; This function calls:
  9038 ;;		_set_leds_bottom
  9039 ;;		_set_leds_top
  9040 ;; This function is called by:
  9041 ;;		_setPedalMode
  9042 ;;		_update_selectMode
  9043 ;;		_setDoublePressState
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function _setPresetDisplay
  9049  1843                     _setPresetDisplay:	
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9053                           ;setPresetDisplay@ledChannel stored from wreg
  9054  1843  0021               	movlb	1	; select bank1
  9055  1844  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  9056                           
  9057                           ;preset_programming.c: 52: if (ledChannel < 6) {
  9058  1845  3006               	movlw	6
  9059  1846  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  9060  1847  1803               	skipnc
  9061  1848  285F               	goto	l7233
  9062                           
  9063                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  9064  1849  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9065  184A  00A4               	movwf	??_setPresetDisplay^(0+128)
  9066  184B  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9067  184C  0824               	movf	??_setPresetDisplay^(0+128),w
  9068  184D  00A0               	movwf	set_leds_top@x^(0+128)
  9069  184E  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9070  184F  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9071  1850  3001               	movlw	1
  9072  1851  00A2               	movwf	set_leds_top@ledState^(0+128)
  9073  1852  3000               	movlw	0
  9074  1853  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9075  1854  319D  258E  3198   	fcall	_set_leds_top
  9076                           
  9077                           ;preset_programming.c: 54: set_leds_bottom(6);
  9078  1857  3006               	movlw	6
  9079  1858  0021               	movlb	1	; select bank1
  9080  1859  00A0               	movwf	set_leds_bottom@x^(0+128)
  9081  185A  3000               	movlw	0
  9082  185B  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9083  185C  3198  207D         	fcall	_set_leds_bottom
  9084                           
  9085                           ;preset_programming.c: 55: } else {
  9086  185E  0008               	return
  9087  185F                     l7233:	
  9088                           
  9089                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9090  185F  3006               	movlw	6
  9091  1860  0021               	movlb	1	; select bank1
  9092  1861  00A0               	movwf	set_leds_top@x^(0+128)
  9093  1862  3000               	movlw	0
  9094  1863  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9095  1864  3001               	movlw	1
  9096  1865  00A2               	movwf	set_leds_top@ledState^(0+128)
  9097  1866  3000               	movlw	0
  9098  1867  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9099  1868  319D  258E  3198   	fcall	_set_leds_top
  9100                           
  9101                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9102  186B  0021               	movlb	1	; select bank1
  9103  186C  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9104  186D  00A4               	movwf	??_setPresetDisplay^(0+128)
  9105  186E  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9106  186F  09A4               	comf	??_setPresetDisplay^(0+128),f
  9107  1870  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9108  1871  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9109  1872  1903               	skipnz
  9110  1873  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9111  1874  0824               	movf	??_setPresetDisplay^(0+128),w
  9112  1875  3E0B               	addlw	11
  9113  1876  00A0               	movwf	set_leds_bottom@x^(0+128)
  9114  1877  3000               	movlw	0
  9115  1878  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9116  1879  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9117  187A  3198  207D         	fcall	_set_leds_bottom
  9118  187C  0008               	return
  9119  187D                     __end_of_setPresetDisplay:	
  9120                           
  9121                           	psect	text14
  9122  25E9                     __ptext14:	
  9123 ;; *************** function _setExpressionDisplay *****************
  9124 ;; Defined at:
  9125 ;;		line 66 in file "preset_programming.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;  ledChannel      1    wreg     unsigned char 
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  1    wreg      void 
  9132 ;; Registers used:
  9133 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9140 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9141 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9142 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9143 ;;Total ram usage:        3 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    4
  9146 ;; This function calls:
  9147 ;;		_set_leds_bottom
  9148 ;;		_set_leds_top
  9149 ;; This function is called by:
  9150 ;;		_setPedalMode
  9151 ;;		_update_selectMode
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           
  9156                           ;psect for function _setExpressionDisplay
  9157  25E9                     _setExpressionDisplay:	
  9158                           
  9159                           ;incstack = 0
  9160                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9161                           ;setExpressionDisplay@ledChannel stored from wreg
  9162  25E9  0021               	movlb	1	; select bank1
  9163  25EA  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9164                           
  9165                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9166  25EB  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9167  25EC  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9168  25ED  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9169  25EE  0824               	movf	??_setExpressionDisplay^(0+128),w
  9170  25EF  00A0               	movwf	set_leds_top@x^(0+128)
  9171  25F0  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9172  25F1  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9173  25F2  3001               	movlw	1
  9174  25F3  00A2               	movwf	set_leds_top@ledState^(0+128)
  9175  25F4  3000               	movlw	0
  9176  25F5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9177  25F6  319D  258E  31A5   	fcall	_set_leds_top
  9178                           
  9179                           ;preset_programming.c: 68: set_leds_bottom(6);
  9180  25F9  3006               	movlw	6
  9181  25FA  0021               	movlb	1	; select bank1
  9182  25FB  00A0               	movwf	set_leds_bottom@x^(0+128)
  9183  25FC  3000               	movlw	0
  9184  25FD  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9185  25FE  3198  207D         	fcall	_set_leds_bottom
  9186  2600  0008               	return
  9187  2601                     __end_of_setExpressionDisplay:	
  9188                           
  9189                           	psect	text15
  9190  2601                     __ptext15:	
  9191 ;; *************** function _resetRingLEDs *****************
  9192 ;; Defined at:
  9193 ;;		line 61 in file "preset_programming.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;		None
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;		None
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9211 ;;Total ram usage:        0 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    4
  9214 ;; This function calls:
  9215 ;;		_set_leds_bottom
  9216 ;;		_set_leds_top
  9217 ;; This function is called by:
  9218 ;;		_update_mode
  9219 ;;		_setPedalMode
  9220 ;;		_setDoublePressState
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           
  9225                           ;psect for function _resetRingLEDs
  9226  2601                     _resetRingLEDs:	
  9227                           
  9228                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9229                           
  9230                           ;incstack = 0
  9231                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9232  2601  0020               	movlb	0	; select bank0
  9233  2602  0854               	movf	_top_push_state+1,w
  9234  2603  0021               	movlb	1	; select bank1
  9235  2604  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9236  2605  0020               	movlb	0	; select bank0
  9237  2606  0853               	movf	_top_push_state,w
  9238  2607  0021               	movlb	1	; select bank1
  9239  2608  00A0               	movwf	set_leds_top@x^(0+128)
  9240  2609  3001               	movlw	1
  9241  260A  00A2               	movwf	set_leds_top@ledState^(0+128)
  9242  260B  3000               	movlw	0
  9243  260C  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9244  260D  319D  258E  31A6   	fcall	_set_leds_top
  9245                           
  9246                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9247  2610  0020               	movlb	0	; select bank0
  9248  2611  084E               	movf	_bottom_push_state+1,w
  9249  2612  0021               	movlb	1	; select bank1
  9250  2613  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9251  2614  0020               	movlb	0	; select bank0
  9252  2615  084D               	movf	_bottom_push_state,w
  9253  2616  0021               	movlb	1	; select bank1
  9254  2617  00A0               	movwf	set_leds_bottom@x^(0+128)
  9255  2618  3198  207D         	fcall	_set_leds_bottom
  9256  261A  0008               	return
  9257  261B                     __end_of_resetRingLEDs:	
  9258                           
  9259                           	psect	text16
  9260  165B                     __ptext16:	
  9261 ;; *************** function _set_subdivision *****************
  9262 ;; Defined at:
  9263 ;;		line 77 in file "user.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  x               2   24[BANK2 ] int 
  9266 ;;  y               2   26[BANK2 ] int 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;  scalar          3   31[BANK2 ] float 
  9269 ;;  tmpX            2   34[BANK2 ] int 
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  2   24[BANK2 ] int 
  9272 ;; Registers used:
  9273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9279 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9280 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9281 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9282 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9283 ;;Total ram usage:       12 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    6
  9286 ;; This function calls:
  9287 ;;		___awtoft
  9288 ;;		___ftmul
  9289 ;;		___fttol
  9290 ;;		_trunc
  9291 ;; This function is called by:
  9292 ;;		_main
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _set_subdivision
  9298  165B                     _set_subdivision:	
  9299                           
  9300                           ;user.c: 81: adjust_sub_delay = 0;
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9304  165B  0024               	movlb	4	; select bank4
  9305  165C  01C5               	clrf	_adjust_sub_delay^(0+512)
  9306  165D  01C6               	clrf	(_adjust_sub_delay+1)^(0+512)
  9307                           
  9308                           ;user.c: 82: int tmpX = x;
  9309  165E  0022               	movlb	2	; select bank2
  9310  165F  0839               	movf	(set_subdivision@x+1)^(0+256),w
  9311  1660  00C3               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9312  1661  0838               	movf	set_subdivision@x^(0+256),w
  9313  1662  00C2               	movwf	set_subdivision@tmpX^(0+256)
  9314                           
  9315                           ;user.c: 83: float scalar = 1.0;
  9316  1663  3000               	movlw	0
  9317  1664  00BF               	movwf	set_subdivision@scalar^(0+256)
  9318  1665  3080               	movlw	128
  9319  1666  00C0               	movwf	(set_subdivision@scalar+1)^(0+256)
  9320  1667  303F               	movlw	63
  9321  1668  00C1               	movwf	(set_subdivision@scalar+2)^(0+256)
  9322                           
  9323                           ;user.c: 85: switch (y) {
  9324  1669  2E85               	goto	l8171
  9325  166A                     l8159:	
  9326                           ;user.c: 86: case 1:
  9327                           
  9328                           
  9329                           ;user.c: 87: scalar = 2.0;
  9330  166A  3000               	movlw	0
  9331  166B  00BF               	movwf	set_subdivision@scalar^(0+256)
  9332  166C  3000               	movlw	0
  9333  166D  00C0               	movwf	(set_subdivision@scalar+1)^(0+256)
  9334  166E  3040               	movlw	64
  9335  166F  2E83               	goto	L8
  9336  1670                     l8161:	
  9337                           ;user.c: 89: case 2:
  9338                           
  9339                           ;user.c: 88: break;
  9340                           
  9341                           
  9342                           ;user.c: 90: scalar = 0.6666;
  9343  1670  30A6               	movlw	166
  9344  1671  00BF               	movwf	set_subdivision@scalar^(0+256)
  9345  1672  302A               	movlw	42
  9346  1673  2E77               	goto	L10
  9347  1674                     l8163:	
  9348                           ;user.c: 92: case 3:
  9349                           
  9350                           ;user.c: 91: break;
  9351                           
  9352                           
  9353                           ;user.c: 93: scalar = .5;
  9354  1674  3000               	movlw	0
  9355  1675  00BF               	movwf	set_subdivision@scalar^(0+256)
  9356  1676  3000               	movlw	0
  9357  1677                     L10:	
  9358  1677  00C0               	movwf	(set_subdivision@scalar+1)^(0+256)
  9359  1678  303F               	movlw	63
  9360  1679  2E83               	goto	L8
  9361  167A                     l8165:	
  9362                           ;user.c: 95: case 4:
  9363                           
  9364                           ;user.c: 94: break;
  9365                           
  9366                           
  9367                           ;user.c: 96: scalar = 0.3333;
  9368  167A  30A6               	movlw	166
  9369  167B  00BF               	movwf	set_subdivision@scalar^(0+256)
  9370  167C  30AA               	movlw	170
  9371  167D  2E81               	goto	L9
  9372  167E                     l8167:	
  9373                           ;user.c: 98: case 5:
  9374                           
  9375                           ;user.c: 97: break;
  9376                           
  9377                           
  9378                           ;user.c: 99: scalar = 0.25;
  9379  167E  3000               	movlw	0
  9380  167F  00BF               	movwf	set_subdivision@scalar^(0+256)
  9381  1680  3080               	movlw	128
  9382  1681                     L9:	
  9383  1681  00C0               	movwf	(set_subdivision@scalar+1)^(0+256)
  9384  1682  303E               	movlw	62
  9385  1683                     L8:	
  9386  1683  00C1               	movwf	(set_subdivision@scalar+2)^(0+256)
  9387                           
  9388                           ;user.c: 104: }
  9389                           
  9390                           ;user.c: 103: break;
  9391                           
  9392                           ;user.c: 101: case 6:
  9393                           
  9394                           ;user.c: 100: break;
  9395  1684  2E9E               	goto	l8173
  9396  1685                     l8171:	
  9397                           
  9398                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9399                           ; Switch size 1, requested type "space"
  9400                           ; Number of cases is 1, Range of values is 0 to 0
  9401                           ; switch strategies available:
  9402                           ; Name         Instructions Cycles
  9403                           ; simple_byte            4     3 (average)
  9404                           ; direct_byte            8     6 (fixed)
  9405                           ; jumptable            260     6 (fixed)
  9406                           ;	Chosen strategy is simple_byte
  9407  1685  083B               	movf	(set_subdivision@y+1)^(0+256),w
  9408  1686  3A00               	xorlw	0	; case 0
  9409  1687  1903               	skipnz
  9410  1688  2E8A               	goto	l8677
  9411  1689  2E9E               	goto	l8173
  9412  168A                     l8677:	
  9413                           
  9414                           ; Switch size 1, requested type "space"
  9415                           ; Number of cases is 6, Range of values is 1 to 6
  9416                           ; switch strategies available:
  9417                           ; Name         Instructions Cycles
  9418                           ; simple_byte           19    10 (average)
  9419                           ; direct_byte           21     9 (fixed)
  9420                           ; jumptable            263     9 (fixed)
  9421                           ;	Chosen strategy is simple_byte
  9422  168A  083A               	movf	set_subdivision@y^(0+256),w
  9423  168B  3A01               	xorlw	1	; case 1
  9424  168C  1903               	skipnz
  9425  168D  2E6A               	goto	l8159
  9426  168E  3A03               	xorlw	3	; case 2
  9427  168F  1903               	skipnz
  9428  1690  2E70               	goto	l8161
  9429  1691  3A01               	xorlw	1	; case 3
  9430  1692  1903               	skipnz
  9431  1693  2E74               	goto	l8163
  9432  1694  3A07               	xorlw	7	; case 4
  9433  1695  1903               	skipnz
  9434  1696  2E7A               	goto	l8165
  9435  1697  3A01               	xorlw	1	; case 5
  9436  1698  1903               	skipnz
  9437  1699  2E7E               	goto	l8167
  9438  169A  3A03               	xorlw	3	; case 6
  9439  169B  1903               	skipnz
  9440  169C  2E9E               	goto	l8173
  9441  169D  2E9E               	goto	l8173
  9442  169E                     l8173:	
  9443                           
  9444                           ;user.c: 106: tmpX = tmpX * scalar;
  9445  169E  0843               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9446  169F  0021               	movlb	1	; select bank1
  9447  16A0  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9448  16A1  0022               	movlb	2	; select bank2
  9449  16A2  0842               	movf	set_subdivision@tmpX^(0+256),w
  9450  16A3  0021               	movlb	1	; select bank1
  9451  16A4  00A8               	movwf	___awtoft@c^(0+128)
  9452  16A5  31A6  26A9  3196   	fcall	___awtoft
  9453  16A8  0021               	movlb	1	; select bank1
  9454  16A9  0828               	movf	?___awtoft^(0+128),w
  9455  16AA  00CB               	movwf	___ftmul@f2^(0+128)
  9456  16AB  0829               	movf	(?___awtoft+1)^(0+128),w
  9457  16AC  00CC               	movwf	(___ftmul@f2+1)^(0+128)
  9458  16AD  082A               	movf	(?___awtoft+2)^(0+128),w
  9459  16AE  00CD               	movwf	(___ftmul@f2+2)^(0+128)
  9460  16AF  0022               	movlb	2	; select bank2
  9461  16B0  083F               	movf	set_subdivision@scalar^(0+256),w
  9462  16B1  0021               	movlb	1	; select bank1
  9463  16B2  00C8               	movwf	___ftmul@f1^(0+128)
  9464  16B3  0022               	movlb	2	; select bank2
  9465  16B4  0840               	movf	(set_subdivision@scalar+1)^(0+256),w
  9466  16B5  0021               	movlb	1	; select bank1
  9467  16B6  00C9               	movwf	(___ftmul@f1+1)^(0+128)
  9468  16B7  0022               	movlb	2	; select bank2
  9469  16B8  0841               	movf	(set_subdivision@scalar+2)^(0+256),w
  9470  16B9  0021               	movlb	1	; select bank1
  9471  16BA  00CA               	movwf	(___ftmul@f1+2)^(0+128)
  9472  16BB  3195  25A7  3196   	fcall	___ftmul
  9473  16BE  0021               	movlb	1	; select bank1
  9474  16BF  0848               	movf	?___ftmul^(0+128),w
  9475  16C0  00EA               	movwf	___fttol@f1^(0+128)
  9476  16C1  0849               	movf	(?___ftmul+1)^(0+128),w
  9477  16C2  00EB               	movwf	(___fttol@f1+1)^(0+128)
  9478  16C3  084A               	movf	(?___ftmul+2)^(0+128),w
  9479  16C4  00EC               	movwf	(___fttol@f1+2)^(0+128)
  9480  16C5  3192  22F8  3196   	fcall	___fttol
  9481  16C8  0021               	movlb	1	; select bank1
  9482  16C9  086B               	movf	(?___fttol^(0+128)+1),w
  9483  16CA  0022               	movlb	2	; select bank2
  9484  16CB  00C3               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9485  16CC  0021               	movlb	1	; select bank1
  9486  16CD  086A               	movf	?___fttol^(0+128),w
  9487  16CE  0022               	movlb	2	; select bank2
  9488  16CF  00C2               	movwf	set_subdivision@tmpX^(0+256)
  9489                           
  9490                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  9491  16D0  0843               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9492  16D1  0021               	movlb	1	; select bank1
  9493  16D2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9494  16D3  0022               	movlb	2	; select bank2
  9495  16D4  0842               	movf	set_subdivision@tmpX^(0+256),w
  9496  16D5  0021               	movlb	1	; select bank1
  9497  16D6  00A8               	movwf	___awtoft@c^(0+128)
  9498  16D7  31A6  26A9  3196   	fcall	___awtoft
  9499  16DA  0021               	movlb	1	; select bank1
  9500  16DB  0828               	movf	?___awtoft^(0+128),w
  9501  16DC  0022               	movlb	2	; select bank2
  9502  16DD  00B0               	movwf	trunc@x^(0+256)
  9503  16DE  0021               	movlb	1	; select bank1
  9504  16DF  0829               	movf	(?___awtoft+1)^(0+128),w
  9505  16E0  0022               	movlb	2	; select bank2
  9506  16E1  00B1               	movwf	(trunc@x+1)^(0+256)
  9507  16E2  0021               	movlb	1	; select bank1
  9508  16E3  082A               	movf	(?___awtoft+2)^(0+128),w
  9509  16E4  0022               	movlb	2	; select bank2
  9510  16E5  00B2               	movwf	(trunc@x+2)^(0+256)
  9511  16E6  319D  253C  3196   	fcall	_trunc
  9512  16E9  0022               	movlb	2	; select bank2
  9513  16EA  0830               	movf	?_trunc^(0+256),w
  9514  16EB  00BC               	movwf	??_set_subdivision^(0+256)
  9515  16EC  0831               	movf	(?_trunc+1)^(0+256),w
  9516  16ED  00BD               	movwf	(??_set_subdivision^(0+256)+1)
  9517  16EE  0832               	movf	(?_trunc+2)^(0+256),w
  9518  16EF  00BE               	movwf	(??_set_subdivision^(0+256)+2)
  9519  16F0  0843               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9520  16F1  0021               	movlb	1	; select bank1
  9521  16F2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9522  16F3  0022               	movlb	2	; select bank2
  9523  16F4  0842               	movf	set_subdivision@tmpX^(0+256),w
  9524  16F5  0021               	movlb	1	; select bank1
  9525  16F6  00A8               	movwf	___awtoft@c^(0+128)
  9526  16F7  31A6  26A9  3196   	fcall	___awtoft
  9527  16FA  0021               	movlb	1	; select bank1
  9528  16FB  082A               	movf	(?___awtoft+2)^(0+128),w
  9529  16FC  0022               	movlb	2	; select bank2
  9530  16FD  063E               	xorwf	(??_set_subdivision+2)^(0+256),w
  9531  16FE  1D03               	skipz
  9532  16FF  2F0A               	goto	u8985
  9533  1700  0021               	movlb	1	; select bank1
  9534  1701  0829               	movf	(?___awtoft+1)^(0+128),w
  9535  1702  0022               	movlb	2	; select bank2
  9536  1703  063D               	xorwf	(??_set_subdivision+1)^(0+256),w
  9537  1704  1D03               	skipz
  9538  1705  2F0A               	goto	u8985
  9539  1706  0021               	movlb	1	; select bank1
  9540  1707  0828               	movf	?___awtoft^(0+128),w
  9541  1708  0022               	movlb	2	; select bank2
  9542  1709  063C               	xorwf	??_set_subdivision^(0+256),w
  9543  170A                     u8985:	
  9544  170A  1903               	skipnz
  9545  170B  2F11               	goto	l582
  9546                           
  9547                           ;user.c: 109: adjust_sub_delay = 1;
  9548  170C  3001               	movlw	1
  9549  170D  0024               	movlb	4	; select bank4
  9550  170E  00C5               	movwf	_adjust_sub_delay^(0+512)
  9551  170F  3000               	movlw	0
  9552  1710  00C6               	movwf	(_adjust_sub_delay^(0+512)+1)
  9553  1711                     l582:	
  9554                           
  9555                           ;user.c: 110: }
  9556                           ;user.c: 112: return tmpX;
  9557  1711  0022               	movlb	2	; select bank2
  9558  1712  0843               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9559  1713  00B9               	movwf	(?_set_subdivision+1)^(0+256)
  9560  1714  0842               	movf	set_subdivision@tmpX^(0+256),w
  9561  1715  00B8               	movwf	?_set_subdivision^(0+256)
  9562  1716  0008               	return
  9563  1717                     __end_of_set_subdivision:	
  9564                           
  9565                           	psect	text17
  9566  125E                     __ptext17:	
  9567 ;; *************** function _scaleiA10kPot *****************
  9568 ;; Defined at:
  9569 ;;		line 206 in file "user.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  input           3   55[BANK2 ] int 
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;  pwm             3   58[BANK2 ] float 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;                  2   55[BANK2 ] int 
  9576 ;; Registers used:
  9577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9583 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9584 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9586 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9587 ;;Total ram usage:       15 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    8
  9590 ;; This function calls:
  9591 ;;		___ftadd
  9592 ;;		___ftdiv
  9593 ;;		___ftmul
  9594 ;;		___ftneg
  9595 ;;		___fttol
  9596 ;;		_pow
  9597 ;;		_trunc
  9598 ;; This function is called by:
  9599 ;;		_main
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           
  9604                           ;psect for function _scaleiA10kPot
  9605  125E                     _scaleiA10kPot:	
  9606                           
  9607                           ;user.c: 209: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
  9608                           
  9609                           ;incstack = 0
  9610                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9611  125E  3000               	movlw	0
  9612  125F  0021               	movlb	1	; select bank1
  9613  1260  00BB               	movwf	___ftadd@f1^(0+128)
  9614  1261  3080               	movlw	128
  9615  1262  00BC               	movwf	(___ftadd@f1+1)^(0+128)
  9616  1263  303F               	movlw	63
  9617  1264  00BD               	movwf	(___ftadd@f1+2)^(0+128)
  9618  1265  0022               	movlb	2	; select bank2
  9619  1266  0857               	movf	scaleiA10kPot@input^(0+256),w
  9620  1267  0021               	movlb	1	; select bank1
  9621  1268  00AB               	movwf	___ftdiv@f1^(0+128)
  9622  1269  0022               	movlb	2	; select bank2
  9623  126A  0858               	movf	(scaleiA10kPot@input+1)^(0+256),w
  9624  126B  0021               	movlb	1	; select bank1
  9625  126C  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
  9626  126D  0022               	movlb	2	; select bank2
  9627  126E  0859               	movf	(scaleiA10kPot@input+2)^(0+256),w
  9628  126F  0021               	movlb	1	; select bank1
  9629  1270  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
  9630  1271  30C0               	movlw	192
  9631  1272  00A8               	movwf	___ftdiv@f2^(0+128)
  9632  1273  307F               	movlw	127
  9633  1274  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
  9634  1275  3044               	movlw	68
  9635  1276  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
  9636  1277  3193  239D  3192   	fcall	___ftdiv
  9637  127A  0021               	movlb	1	; select bank1
  9638  127B  0828               	movf	?___ftdiv^(0+128),w
  9639  127C  00B8               	movwf	___ftneg@f1^(0+128)
  9640  127D  0829               	movf	(?___ftdiv+1)^(0+128),w
  9641  127E  00B9               	movwf	(___ftneg@f1+1)^(0+128)
  9642  127F  082A               	movf	(?___ftdiv+2)^(0+128),w
  9643  1280  00BA               	movwf	(___ftneg@f1+2)^(0+128)
  9644  1281  31A5  2566  3192   	fcall	___ftneg
  9645  1284  0021               	movlb	1	; select bank1
  9646  1285  0838               	movf	?___ftneg^(0+128),w
  9647  1286  00BE               	movwf	___ftadd@f2^(0+128)
  9648  1287  0839               	movf	(?___ftneg+1)^(0+128),w
  9649  1288  00BF               	movwf	(___ftadd@f2+1)^(0+128)
  9650  1289  083A               	movf	(?___ftneg+2)^(0+128),w
  9651  128A  00C0               	movwf	(___ftadd@f2+2)^(0+128)
  9652  128B  3188  2078  3192   	fcall	___ftadd
  9653  128E  0021               	movlb	1	; select bank1
  9654  128F  083B               	movf	?___ftadd^(0+128),w
  9655  1290  0022               	movlb	2	; select bank2
  9656  1291  00DD               	movwf	_scaleiA10kPot$2666^(0+256)
  9657  1292  0021               	movlb	1	; select bank1
  9658  1293  083C               	movf	(?___ftadd+1)^(0+128),w
  9659  1294  0022               	movlb	2	; select bank2
  9660  1295  00DE               	movwf	(_scaleiA10kPot$2666+1)^(0+256)
  9661  1296  0021               	movlb	1	; select bank1
  9662  1297  083D               	movf	(?___ftadd+2)^(0+128),w
  9663  1298  0022               	movlb	2	; select bank2
  9664  1299  00DF               	movwf	(_scaleiA10kPot$2666+2)^(0+256)
  9665                           
  9666                           ;user.c: 209: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
  9667  129A  306A               	movlw	106
  9668  129B  00C8               	movwf	pow@y^(0+256)
  9669  129C  309C               	movlw	156
  9670  129D  00C9               	movwf	(pow@y+1)^(0+256)
  9671  129E  30BF               	movlw	191
  9672  129F  00CA               	movwf	(pow@y+2)^(0+256)
  9673  12A0  085D               	movf	_scaleiA10kPot$2666^(0+256),w
  9674  12A1  00C5               	movwf	pow@x^(0+256)
  9675  12A2  085E               	movf	(_scaleiA10kPot$2666+1)^(0+256),w
  9676  12A3  00C6               	movwf	(pow@x+1)^(0+256)
  9677  12A4  085F               	movf	(_scaleiA10kPot$2666+2)^(0+256),w
  9678  12A5  00C7               	movwf	(pow@x+2)^(0+256)
  9679  12A6  3189  216E  3192   	fcall	_pow
  9680  12A9  0022               	movlb	2	; select bank2
  9681  12AA  0845               	movf	?_pow^(0+256),w
  9682  12AB  00E0               	movwf	_scaleiA10kPot$2667^(0+256)
  9683  12AC  0846               	movf	(?_pow+1)^(0+256),w
  9684  12AD  00E1               	movwf	(_scaleiA10kPot$2667+1)^(0+256)
  9685  12AE  0847               	movf	(?_pow+2)^(0+256),w
  9686  12AF  00E2               	movwf	(_scaleiA10kPot$2667+2)^(0+256)
  9687                           
  9688                           ;user.c: 209: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
  9689  12B0  30E3               	movlw	227
  9690  12B1  0021               	movlb	1	; select bank1
  9691  12B2  00C8               	movwf	___ftmul@f1^(0+128)
  9692  12B3  300B               	movlw	11
  9693  12B4  00C9               	movwf	(___ftmul@f1+1)^(0+128)
  9694  12B5  3041               	movlw	65
  9695  12B6  00CA               	movwf	(___ftmul@f1+2)^(0+128)
  9696  12B7  0022               	movlb	2	; select bank2
  9697  12B8  0860               	movf	_scaleiA10kPot$2667^(0+256),w
  9698  12B9  0021               	movlb	1	; select bank1
  9699  12BA  00CB               	movwf	___ftmul@f2^(0+128)
  9700  12BB  0022               	movlb	2	; select bank2
  9701  12BC  0861               	movf	(_scaleiA10kPot$2667+1)^(0+256),w
  9702  12BD  0021               	movlb	1	; select bank1
  9703  12BE  00CC               	movwf	(___ftmul@f2+1)^(0+128)
  9704  12BF  0022               	movlb	2	; select bank2
  9705  12C0  0862               	movf	(_scaleiA10kPot$2667+2)^(0+256),w
  9706  12C1  0021               	movlb	1	; select bank1
  9707  12C2  00CD               	movwf	(___ftmul@f2+2)^(0+128)
  9708  12C3  3195  25A7  3192   	fcall	___ftmul
  9709  12C6  0021               	movlb	1	; select bank1
  9710  12C7  0848               	movf	?___ftmul^(0+128),w
  9711  12C8  0022               	movlb	2	; select bank2
  9712  12C9  00DA               	movwf	scaleiA10kPot@pwm^(0+256)
  9713  12CA  0021               	movlb	1	; select bank1
  9714  12CB  0849               	movf	(?___ftmul+1)^(0+128),w
  9715  12CC  0022               	movlb	2	; select bank2
  9716  12CD  00DB               	movwf	(scaleiA10kPot@pwm+1)^(0+256)
  9717  12CE  0021               	movlb	1	; select bank1
  9718  12CF  084A               	movf	(?___ftmul+2)^(0+128),w
  9719  12D0  0022               	movlb	2	; select bank2
  9720  12D1  00DC               	movwf	(scaleiA10kPot@pwm+2)^(0+256)
  9721                           
  9722                           ;user.c: 210: return trunc(pwm);
  9723  12D2  085A               	movf	scaleiA10kPot@pwm^(0+256),w
  9724  12D3  00B0               	movwf	trunc@x^(0+256)
  9725  12D4  085B               	movf	(scaleiA10kPot@pwm+1)^(0+256),w
  9726  12D5  00B1               	movwf	(trunc@x+1)^(0+256)
  9727  12D6  085C               	movf	(scaleiA10kPot@pwm+2)^(0+256),w
  9728  12D7  00B2               	movwf	(trunc@x+2)^(0+256)
  9729  12D8  319D  253C  3192   	fcall	_trunc
  9730  12DB  0022               	movlb	2	; select bank2
  9731  12DC  0830               	movf	?_trunc^(0+256),w
  9732  12DD  00E3               	movwf	_scaleiA10kPot$2668^(0+256)
  9733  12DE  0831               	movf	(?_trunc+1)^(0+256),w
  9734  12DF  00E4               	movwf	(_scaleiA10kPot$2668+1)^(0+256)
  9735  12E0  0832               	movf	(?_trunc+2)^(0+256),w
  9736  12E1  00E5               	movwf	(_scaleiA10kPot$2668+2)^(0+256)
  9737                           
  9738                           ;user.c: 210: return trunc(pwm);
  9739  12E2  0863               	movf	_scaleiA10kPot$2668^(0+256),w
  9740  12E3  0021               	movlb	1	; select bank1
  9741  12E4  00EA               	movwf	___fttol@f1^(0+128)
  9742  12E5  0022               	movlb	2	; select bank2
  9743  12E6  0864               	movf	(_scaleiA10kPot$2668+1)^(0+256),w
  9744  12E7  0021               	movlb	1	; select bank1
  9745  12E8  00EB               	movwf	(___fttol@f1+1)^(0+128)
  9746  12E9  0022               	movlb	2	; select bank2
  9747  12EA  0865               	movf	(_scaleiA10kPot$2668+2)^(0+256),w
  9748  12EB  0021               	movlb	1	; select bank1
  9749  12EC  00EC               	movwf	(___fttol@f1+2)^(0+128)
  9750  12ED  3192  22F8         	fcall	___fttol
  9751  12EF  0021               	movlb	1	; select bank1
  9752  12F0  086B               	movf	(?___fttol^(0+128)+1),w
  9753  12F1  0022               	movlb	2	; select bank2
  9754  12F2  00D8               	movwf	(?_scaleiA10kPot+1)^(0+256)
  9755  12F3  0021               	movlb	1	; select bank1
  9756  12F4  086A               	movf	?___fttol^(0+128),w
  9757  12F5  0022               	movlb	2	; select bank2
  9758  12F6  00D7               	movwf	?_scaleiA10kPot^(0+256)
  9759  12F7  0008               	return
  9760  12F8                     __end_of_scaleiA10kPot:	
  9761                           
  9762                           	psect	text18
  9763  1049                     __ptext18:	
  9764 ;; *************** function _scaleiA100kPot *****************
  9765 ;; Defined at:
  9766 ;;		line 193 in file "user.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;  input           3   55[BANK2 ] int 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  pwm             3   58[BANK2 ] float 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  2   55[BANK2 ] int 
  9773 ;; Registers used:
  9774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9780 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9781 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9783 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9784 ;;Total ram usage:       15 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    8
  9787 ;; This function calls:
  9788 ;;		___ftdiv
  9789 ;;		___ftmul
  9790 ;;		___fttol
  9791 ;;		_pow
  9792 ;;		_trunc
  9793 ;; This function is called by:
  9794 ;;		_main
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           
  9799                           ;psect for function _scaleiA100kPot
  9800  1049                     _scaleiA100kPot:	
  9801                           
  9802                           ;user.c: 195: float pwm = 3.5755 * (pow((input / 1023.0), -1.112));
  9803                           
  9804                           ;incstack = 0
  9805                           ; Regs used in _scaleiA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9806  1049  30C0               	movlw	192
  9807  104A  0021               	movlb	1	; select bank1
  9808  104B  00A8               	movwf	___ftdiv@f2^(0+128)
  9809  104C  307F               	movlw	127
  9810  104D  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
  9811  104E  3044               	movlw	68
  9812  104F  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
  9813  1050  0022               	movlb	2	; select bank2
  9814  1051  0857               	movf	scaleiA100kPot@input^(0+256),w
  9815  1052  0021               	movlb	1	; select bank1
  9816  1053  00AB               	movwf	___ftdiv@f1^(0+128)
  9817  1054  0022               	movlb	2	; select bank2
  9818  1055  0858               	movf	(scaleiA100kPot@input+1)^(0+256),w
  9819  1056  0021               	movlb	1	; select bank1
  9820  1057  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
  9821  1058  0022               	movlb	2	; select bank2
  9822  1059  0859               	movf	(scaleiA100kPot@input+2)^(0+256),w
  9823  105A  0021               	movlb	1	; select bank1
  9824  105B  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
  9825  105C  3193  239D  3190   	fcall	___ftdiv
  9826  105F  0021               	movlb	1	; select bank1
  9827  1060  0828               	movf	?___ftdiv^(0+128),w
  9828  1061  0022               	movlb	2	; select bank2
  9829  1062  00DD               	movwf	_scaleiA100kPot$2660^(0+256)
  9830  1063  0021               	movlb	1	; select bank1
  9831  1064  0829               	movf	(?___ftdiv+1)^(0+128),w
  9832  1065  0022               	movlb	2	; select bank2
  9833  1066  00DE               	movwf	(_scaleiA100kPot$2660+1)^(0+256)
  9834  1067  0021               	movlb	1	; select bank1
  9835  1068  082A               	movf	(?___ftdiv+2)^(0+128),w
  9836  1069  0022               	movlb	2	; select bank2
  9837  106A  00DF               	movwf	(_scaleiA100kPot$2660+2)^(0+256)
  9838                           
  9839                           ;user.c: 195: float pwm = 3.5755 * (pow((input / 1023.0), -1.112));
  9840  106B  3056               	movlw	86
  9841  106C  00C8               	movwf	pow@y^(0+256)
  9842  106D  308E               	movlw	142
  9843  106E  00C9               	movwf	(pow@y+1)^(0+256)
  9844  106F  30BF               	movlw	191
  9845  1070  00CA               	movwf	(pow@y+2)^(0+256)
  9846  1071  085D               	movf	_scaleiA100kPot$2660^(0+256),w
  9847  1072  00C5               	movwf	pow@x^(0+256)
  9848  1073  085E               	movf	(_scaleiA100kPot$2660+1)^(0+256),w
  9849  1074  00C6               	movwf	(pow@x+1)^(0+256)
  9850  1075  085F               	movf	(_scaleiA100kPot$2660+2)^(0+256),w
  9851  1076  00C7               	movwf	(pow@x+2)^(0+256)
  9852  1077  3189  216E  3190   	fcall	_pow
  9853  107A  0022               	movlb	2	; select bank2
  9854  107B  0845               	movf	?_pow^(0+256),w
  9855  107C  00E0               	movwf	_scaleiA100kPot$2661^(0+256)
  9856  107D  0846               	movf	(?_pow+1)^(0+256),w
  9857  107E  00E1               	movwf	(_scaleiA100kPot$2661+1)^(0+256)
  9858  107F  0847               	movf	(?_pow+2)^(0+256),w
  9859  1080  00E2               	movwf	(_scaleiA100kPot$2661+2)^(0+256)
  9860                           
  9861                           ;user.c: 195: float pwm = 3.5755 * (pow((input / 1023.0), -1.112));
  9862  1081  30D5               	movlw	213
  9863  1082  0021               	movlb	1	; select bank1
  9864  1083  00C8               	movwf	___ftmul@f1^(0+128)
  9865  1084  3064               	movlw	100
  9866  1085  00C9               	movwf	(___ftmul@f1+1)^(0+128)
  9867  1086  3040               	movlw	64
  9868  1087  00CA               	movwf	(___ftmul@f1+2)^(0+128)
  9869  1088  0022               	movlb	2	; select bank2
  9870  1089  0860               	movf	_scaleiA100kPot$2661^(0+256),w
  9871  108A  0021               	movlb	1	; select bank1
  9872  108B  00CB               	movwf	___ftmul@f2^(0+128)
  9873  108C  0022               	movlb	2	; select bank2
  9874  108D  0861               	movf	(_scaleiA100kPot$2661+1)^(0+256),w
  9875  108E  0021               	movlb	1	; select bank1
  9876  108F  00CC               	movwf	(___ftmul@f2+1)^(0+128)
  9877  1090  0022               	movlb	2	; select bank2
  9878  1091  0862               	movf	(_scaleiA100kPot$2661+2)^(0+256),w
  9879  1092  0021               	movlb	1	; select bank1
  9880  1093  00CD               	movwf	(___ftmul@f2+2)^(0+128)
  9881  1094  3195  25A7  3190   	fcall	___ftmul
  9882  1097  0021               	movlb	1	; select bank1
  9883  1098  0848               	movf	?___ftmul^(0+128),w
  9884  1099  0022               	movlb	2	; select bank2
  9885  109A  00DA               	movwf	scaleiA100kPot@pwm^(0+256)
  9886  109B  0021               	movlb	1	; select bank1
  9887  109C  0849               	movf	(?___ftmul+1)^(0+128),w
  9888  109D  0022               	movlb	2	; select bank2
  9889  109E  00DB               	movwf	(scaleiA100kPot@pwm+1)^(0+256)
  9890  109F  0021               	movlb	1	; select bank1
  9891  10A0  084A               	movf	(?___ftmul+2)^(0+128),w
  9892  10A1  0022               	movlb	2	; select bank2
  9893  10A2  00DC               	movwf	(scaleiA100kPot@pwm+2)^(0+256)
  9894                           
  9895                           ;user.c: 196: return trunc(pwm);
  9896  10A3  085A               	movf	scaleiA100kPot@pwm^(0+256),w
  9897  10A4  00B0               	movwf	trunc@x^(0+256)
  9898  10A5  085B               	movf	(scaleiA100kPot@pwm+1)^(0+256),w
  9899  10A6  00B1               	movwf	(trunc@x+1)^(0+256)
  9900  10A7  085C               	movf	(scaleiA100kPot@pwm+2)^(0+256),w
  9901  10A8  00B2               	movwf	(trunc@x+2)^(0+256)
  9902  10A9  319D  253C  3190   	fcall	_trunc
  9903  10AC  0022               	movlb	2	; select bank2
  9904  10AD  0830               	movf	?_trunc^(0+256),w
  9905  10AE  00E3               	movwf	_scaleiA100kPot$2662^(0+256)
  9906  10AF  0831               	movf	(?_trunc+1)^(0+256),w
  9907  10B0  00E4               	movwf	(_scaleiA100kPot$2662+1)^(0+256)
  9908  10B1  0832               	movf	(?_trunc+2)^(0+256),w
  9909  10B2  00E5               	movwf	(_scaleiA100kPot$2662+2)^(0+256)
  9910                           
  9911                           ;user.c: 196: return trunc(pwm);
  9912  10B3  0863               	movf	_scaleiA100kPot$2662^(0+256),w
  9913  10B4  0021               	movlb	1	; select bank1
  9914  10B5  00EA               	movwf	___fttol@f1^(0+128)
  9915  10B6  0022               	movlb	2	; select bank2
  9916  10B7  0864               	movf	(_scaleiA100kPot$2662+1)^(0+256),w
  9917  10B8  0021               	movlb	1	; select bank1
  9918  10B9  00EB               	movwf	(___fttol@f1+1)^(0+128)
  9919  10BA  0022               	movlb	2	; select bank2
  9920  10BB  0865               	movf	(_scaleiA100kPot$2662+2)^(0+256),w
  9921  10BC  0021               	movlb	1	; select bank1
  9922  10BD  00EC               	movwf	(___fttol@f1+2)^(0+128)
  9923  10BE  3192  22F8         	fcall	___fttol
  9924  10C0  0021               	movlb	1	; select bank1
  9925  10C1  086B               	movf	(?___fttol^(0+128)+1),w
  9926  10C2  0022               	movlb	2	; select bank2
  9927  10C3  00D8               	movwf	(?_scaleiA100kPot+1)^(0+256)
  9928  10C4  0021               	movlb	1	; select bank1
  9929  10C5  086A               	movf	?___fttol^(0+128),w
  9930  10C6  0022               	movlb	2	; select bank2
  9931  10C7  00D7               	movwf	?_scaleiA100kPot^(0+256)
  9932  10C8  0008               	return
  9933  10C9                     __end_of_scaleiA100kPot:	
  9934                           
  9935                           	psect	text19
  9936  1F80                     __ptext19:	
  9937 ;; *************** function _scaleA10kPot *****************
  9938 ;; Defined at:
  9939 ;;		line 199 in file "user.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;  input           3   55[BANK2 ] int 
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;  pwm             3   58[BANK2 ] float 
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  2   55[BANK2 ] int 
  9946 ;; Registers used:
  9947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9953 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9954 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9956 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9957 ;;Total ram usage:       15 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:    8
  9960 ;; This function calls:
  9961 ;;		___ftdiv
  9962 ;;		___ftmul
  9963 ;;		___fttol
  9964 ;;		_pow
  9965 ;;		_trunc
  9966 ;; This function is called by:
  9967 ;;		_main
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function _scaleA10kPot
  9973  1F80                     _scaleA10kPot:	
  9974                           
  9975                           ;user.c: 201: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
  9976                           
  9977                           ;incstack = 0
  9978                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9979  1F80  30C0               	movlw	192
  9980  1F81  0021               	movlb	1	; select bank1
  9981  1F82  00A8               	movwf	___ftdiv@f2^(0+128)
  9982  1F83  307F               	movlw	127
  9983  1F84  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
  9984  1F85  3044               	movlw	68
  9985  1F86  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
  9986  1F87  0022               	movlb	2	; select bank2
  9987  1F88  0857               	movf	scaleA10kPot@input^(0+256),w
  9988  1F89  0021               	movlb	1	; select bank1
  9989  1F8A  00AB               	movwf	___ftdiv@f1^(0+128)
  9990  1F8B  0022               	movlb	2	; select bank2
  9991  1F8C  0858               	movf	(scaleA10kPot@input+1)^(0+256),w
  9992  1F8D  0021               	movlb	1	; select bank1
  9993  1F8E  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
  9994  1F8F  0022               	movlb	2	; select bank2
  9995  1F90  0859               	movf	(scaleA10kPot@input+2)^(0+256),w
  9996  1F91  0021               	movlb	1	; select bank1
  9997  1F92  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
  9998  1F93  3193  239D  319F   	fcall	___ftdiv
  9999  1F96  0021               	movlb	1	; select bank1
 10000  1F97  0828               	movf	?___ftdiv^(0+128),w
 10001  1F98  0022               	movlb	2	; select bank2
 10002  1F99  00DD               	movwf	_scaleA10kPot$2663^(0+256)
 10003  1F9A  0021               	movlb	1	; select bank1
 10004  1F9B  0829               	movf	(?___ftdiv+1)^(0+128),w
 10005  1F9C  0022               	movlb	2	; select bank2
 10006  1F9D  00DE               	movwf	(_scaleA10kPot$2663+1)^(0+256)
 10007  1F9E  0021               	movlb	1	; select bank1
 10008  1F9F  082A               	movf	(?___ftdiv+2)^(0+128),w
 10009  1FA0  0022               	movlb	2	; select bank2
 10010  1FA1  00DF               	movwf	(_scaleA10kPot$2663+2)^(0+256)
 10011                           
 10012                           ;user.c: 201: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 10013  1FA2  306A               	movlw	106
 10014  1FA3  00C8               	movwf	pow@y^(0+256)
 10015  1FA4  309C               	movlw	156
 10016  1FA5  00C9               	movwf	(pow@y+1)^(0+256)
 10017  1FA6  30BF               	movlw	191
 10018  1FA7  00CA               	movwf	(pow@y+2)^(0+256)
 10019  1FA8  085D               	movf	_scaleA10kPot$2663^(0+256),w
 10020  1FA9  00C5               	movwf	pow@x^(0+256)
 10021  1FAA  085E               	movf	(_scaleA10kPot$2663+1)^(0+256),w
 10022  1FAB  00C6               	movwf	(pow@x+1)^(0+256)
 10023  1FAC  085F               	movf	(_scaleA10kPot$2663+2)^(0+256),w
 10024  1FAD  00C7               	movwf	(pow@x+2)^(0+256)
 10025  1FAE  3189  216E  319F   	fcall	_pow
 10026  1FB1  0022               	movlb	2	; select bank2
 10027  1FB2  0845               	movf	?_pow^(0+256),w
 10028  1FB3  00E0               	movwf	_scaleA10kPot$2664^(0+256)
 10029  1FB4  0846               	movf	(?_pow+1)^(0+256),w
 10030  1FB5  00E1               	movwf	(_scaleA10kPot$2664+1)^(0+256)
 10031  1FB6  0847               	movf	(?_pow+2)^(0+256),w
 10032  1FB7  00E2               	movwf	(_scaleA10kPot$2664+2)^(0+256)
 10033                           
 10034                           ;user.c: 201: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 10035  1FB8  30E3               	movlw	227
 10036  1FB9  0021               	movlb	1	; select bank1
 10037  1FBA  00C8               	movwf	___ftmul@f1^(0+128)
 10038  1FBB  300B               	movlw	11
 10039  1FBC  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 10040  1FBD  3041               	movlw	65
 10041  1FBE  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 10042  1FBF  0022               	movlb	2	; select bank2
 10043  1FC0  0860               	movf	_scaleA10kPot$2664^(0+256),w
 10044  1FC1  0021               	movlb	1	; select bank1
 10045  1FC2  00CB               	movwf	___ftmul@f2^(0+128)
 10046  1FC3  0022               	movlb	2	; select bank2
 10047  1FC4  0861               	movf	(_scaleA10kPot$2664+1)^(0+256),w
 10048  1FC5  0021               	movlb	1	; select bank1
 10049  1FC6  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 10050  1FC7  0022               	movlb	2	; select bank2
 10051  1FC8  0862               	movf	(_scaleA10kPot$2664+2)^(0+256),w
 10052  1FC9  0021               	movlb	1	; select bank1
 10053  1FCA  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 10054  1FCB  3195  25A7  319F   	fcall	___ftmul
 10055  1FCE  0021               	movlb	1	; select bank1
 10056  1FCF  0848               	movf	?___ftmul^(0+128),w
 10057  1FD0  0022               	movlb	2	; select bank2
 10058  1FD1  00DA               	movwf	scaleA10kPot@pwm^(0+256)
 10059  1FD2  0021               	movlb	1	; select bank1
 10060  1FD3  0849               	movf	(?___ftmul+1)^(0+128),w
 10061  1FD4  0022               	movlb	2	; select bank2
 10062  1FD5  00DB               	movwf	(scaleA10kPot@pwm+1)^(0+256)
 10063  1FD6  0021               	movlb	1	; select bank1
 10064  1FD7  084A               	movf	(?___ftmul+2)^(0+128),w
 10065  1FD8  0022               	movlb	2	; select bank2
 10066  1FD9  00DC               	movwf	(scaleA10kPot@pwm+2)^(0+256)
 10067                           
 10068                           ;user.c: 202: return trunc(pwm);
 10069  1FDA  085A               	movf	scaleA10kPot@pwm^(0+256),w
 10070  1FDB  00B0               	movwf	trunc@x^(0+256)
 10071  1FDC  085B               	movf	(scaleA10kPot@pwm+1)^(0+256),w
 10072  1FDD  00B1               	movwf	(trunc@x+1)^(0+256)
 10073  1FDE  085C               	movf	(scaleA10kPot@pwm+2)^(0+256),w
 10074  1FDF  00B2               	movwf	(trunc@x+2)^(0+256)
 10075  1FE0  319D  253C  319F   	fcall	_trunc
 10076  1FE3  0022               	movlb	2	; select bank2
 10077  1FE4  0830               	movf	?_trunc^(0+256),w
 10078  1FE5  00E3               	movwf	_scaleA10kPot$2665^(0+256)
 10079  1FE6  0831               	movf	(?_trunc+1)^(0+256),w
 10080  1FE7  00E4               	movwf	(_scaleA10kPot$2665+1)^(0+256)
 10081  1FE8  0832               	movf	(?_trunc+2)^(0+256),w
 10082  1FE9  00E5               	movwf	(_scaleA10kPot$2665+2)^(0+256)
 10083                           
 10084                           ;user.c: 202: return trunc(pwm);
 10085  1FEA  0863               	movf	_scaleA10kPot$2665^(0+256),w
 10086  1FEB  0021               	movlb	1	; select bank1
 10087  1FEC  00EA               	movwf	___fttol@f1^(0+128)
 10088  1FED  0022               	movlb	2	; select bank2
 10089  1FEE  0864               	movf	(_scaleA10kPot$2665+1)^(0+256),w
 10090  1FEF  0021               	movlb	1	; select bank1
 10091  1FF0  00EB               	movwf	(___fttol@f1+1)^(0+128)
 10092  1FF1  0022               	movlb	2	; select bank2
 10093  1FF2  0865               	movf	(_scaleA10kPot$2665+2)^(0+256),w
 10094  1FF3  0021               	movlb	1	; select bank1
 10095  1FF4  00EC               	movwf	(___fttol@f1+2)^(0+128)
 10096  1FF5  3192  22F8         	fcall	___fttol
 10097  1FF7  0021               	movlb	1	; select bank1
 10098  1FF8  086B               	movf	(?___fttol^(0+128)+1),w
 10099  1FF9  0022               	movlb	2	; select bank2
 10100  1FFA  00D8               	movwf	(?_scaleA10kPot+1)^(0+256)
 10101  1FFB  0021               	movlb	1	; select bank1
 10102  1FFC  086A               	movf	?___fttol^(0+128),w
 10103  1FFD  0022               	movlb	2	; select bank2
 10104  1FFE  00D7               	movwf	?_scaleA10kPot^(0+256)
 10105  1FFF  0008               	return
 10106  2000                     __end_of_scaleA10kPot:	
 10107                           
 10108                           	psect	text20
 10109  1F00                     __ptext20:	
 10110 ;; *************** function _scaleA100kPot *****************
 10111 ;; Defined at:
 10112 ;;		line 187 in file "user.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  input           3   55[BANK2 ] int 
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;  pwm             3   58[BANK2 ] float 
 10117 ;; Return value:  Size  Location     Type
 10118 ;;                  2   55[BANK2 ] int 
 10119 ;; Registers used:
 10120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10126 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10127 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10129 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10130 ;;Total ram usage:       15 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    8
 10133 ;; This function calls:
 10134 ;;		___ftdiv
 10135 ;;		___ftmul
 10136 ;;		___fttol
 10137 ;;		_pow
 10138 ;;		_trunc
 10139 ;; This function is called by:
 10140 ;;		_main
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           
 10145                           ;psect for function _scaleA100kPot
 10146  1F00                     _scaleA100kPot:	
 10147                           
 10148                           ;user.c: 189: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 10149                           
 10150                           ;incstack = 0
 10151                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10152  1F00  30C0               	movlw	192
 10153  1F01  0021               	movlb	1	; select bank1
 10154  1F02  00A8               	movwf	___ftdiv@f2^(0+128)
 10155  1F03  307F               	movlw	127
 10156  1F04  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
 10157  1F05  3044               	movlw	68
 10158  1F06  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
 10159  1F07  0022               	movlb	2	; select bank2
 10160  1F08  0857               	movf	scaleA100kPot@input^(0+256),w
 10161  1F09  0021               	movlb	1	; select bank1
 10162  1F0A  00AB               	movwf	___ftdiv@f1^(0+128)
 10163  1F0B  0022               	movlb	2	; select bank2
 10164  1F0C  0858               	movf	(scaleA100kPot@input+1)^(0+256),w
 10165  1F0D  0021               	movlb	1	; select bank1
 10166  1F0E  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
 10167  1F0F  0022               	movlb	2	; select bank2
 10168  1F10  0859               	movf	(scaleA100kPot@input+2)^(0+256),w
 10169  1F11  0021               	movlb	1	; select bank1
 10170  1F12  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
 10171  1F13  3193  239D  319F   	fcall	___ftdiv
 10172  1F16  0021               	movlb	1	; select bank1
 10173  1F17  0828               	movf	?___ftdiv^(0+128),w
 10174  1F18  0022               	movlb	2	; select bank2
 10175  1F19  00DD               	movwf	_scaleA100kPot$2657^(0+256)
 10176  1F1A  0021               	movlb	1	; select bank1
 10177  1F1B  0829               	movf	(?___ftdiv+1)^(0+128),w
 10178  1F1C  0022               	movlb	2	; select bank2
 10179  1F1D  00DE               	movwf	(_scaleA100kPot$2657+1)^(0+256)
 10180  1F1E  0021               	movlb	1	; select bank1
 10181  1F1F  082A               	movf	(?___ftdiv+2)^(0+128),w
 10182  1F20  0022               	movlb	2	; select bank2
 10183  1F21  00DF               	movwf	(_scaleA100kPot$2657+2)^(0+256)
 10184                           
 10185                           ;user.c: 189: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 10186  1F22  3056               	movlw	86
 10187  1F23  00C8               	movwf	pow@y^(0+256)
 10188  1F24  308E               	movlw	142
 10189  1F25  00C9               	movwf	(pow@y+1)^(0+256)
 10190  1F26  30BF               	movlw	191
 10191  1F27  00CA               	movwf	(pow@y+2)^(0+256)
 10192  1F28  085D               	movf	_scaleA100kPot$2657^(0+256),w
 10193  1F29  00C5               	movwf	pow@x^(0+256)
 10194  1F2A  085E               	movf	(_scaleA100kPot$2657+1)^(0+256),w
 10195  1F2B  00C6               	movwf	(pow@x+1)^(0+256)
 10196  1F2C  085F               	movf	(_scaleA100kPot$2657+2)^(0+256),w
 10197  1F2D  00C7               	movwf	(pow@x+2)^(0+256)
 10198  1F2E  3189  216E  319F   	fcall	_pow
 10199  1F31  0022               	movlb	2	; select bank2
 10200  1F32  0845               	movf	?_pow^(0+256),w
 10201  1F33  00E0               	movwf	_scaleA100kPot$2658^(0+256)
 10202  1F34  0846               	movf	(?_pow+1)^(0+256),w
 10203  1F35  00E1               	movwf	(_scaleA100kPot$2658+1)^(0+256)
 10204  1F36  0847               	movf	(?_pow+2)^(0+256),w
 10205  1F37  00E2               	movwf	(_scaleA100kPot$2658+2)^(0+256)
 10206                           
 10207                           ;user.c: 189: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 10208  1F38  309F               	movlw	159
 10209  1F39  0021               	movlb	1	; select bank1
 10210  1F3A  00C8               	movwf	___ftmul@f1^(0+128)
 10211  1F3B  3068               	movlw	104
 10212  1F3C  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 10213  1F3D  3040               	movlw	64
 10214  1F3E  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 10215  1F3F  0022               	movlb	2	; select bank2
 10216  1F40  0860               	movf	_scaleA100kPot$2658^(0+256),w
 10217  1F41  0021               	movlb	1	; select bank1
 10218  1F42  00CB               	movwf	___ftmul@f2^(0+128)
 10219  1F43  0022               	movlb	2	; select bank2
 10220  1F44  0861               	movf	(_scaleA100kPot$2658+1)^(0+256),w
 10221  1F45  0021               	movlb	1	; select bank1
 10222  1F46  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 10223  1F47  0022               	movlb	2	; select bank2
 10224  1F48  0862               	movf	(_scaleA100kPot$2658+2)^(0+256),w
 10225  1F49  0021               	movlb	1	; select bank1
 10226  1F4A  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 10227  1F4B  3195  25A7  319F   	fcall	___ftmul
 10228  1F4E  0021               	movlb	1	; select bank1
 10229  1F4F  0848               	movf	?___ftmul^(0+128),w
 10230  1F50  0022               	movlb	2	; select bank2
 10231  1F51  00DA               	movwf	scaleA100kPot@pwm^(0+256)
 10232  1F52  0021               	movlb	1	; select bank1
 10233  1F53  0849               	movf	(?___ftmul+1)^(0+128),w
 10234  1F54  0022               	movlb	2	; select bank2
 10235  1F55  00DB               	movwf	(scaleA100kPot@pwm+1)^(0+256)
 10236  1F56  0021               	movlb	1	; select bank1
 10237  1F57  084A               	movf	(?___ftmul+2)^(0+128),w
 10238  1F58  0022               	movlb	2	; select bank2
 10239  1F59  00DC               	movwf	(scaleA100kPot@pwm+2)^(0+256)
 10240                           
 10241                           ;user.c: 190: return trunc(pwm);
 10242  1F5A  085A               	movf	scaleA100kPot@pwm^(0+256),w
 10243  1F5B  00B0               	movwf	trunc@x^(0+256)
 10244  1F5C  085B               	movf	(scaleA100kPot@pwm+1)^(0+256),w
 10245  1F5D  00B1               	movwf	(trunc@x+1)^(0+256)
 10246  1F5E  085C               	movf	(scaleA100kPot@pwm+2)^(0+256),w
 10247  1F5F  00B2               	movwf	(trunc@x+2)^(0+256)
 10248  1F60  319D  253C  319F   	fcall	_trunc
 10249  1F63  0022               	movlb	2	; select bank2
 10250  1F64  0830               	movf	?_trunc^(0+256),w
 10251  1F65  00E3               	movwf	_scaleA100kPot$2659^(0+256)
 10252  1F66  0831               	movf	(?_trunc+1)^(0+256),w
 10253  1F67  00E4               	movwf	(_scaleA100kPot$2659+1)^(0+256)
 10254  1F68  0832               	movf	(?_trunc+2)^(0+256),w
 10255  1F69  00E5               	movwf	(_scaleA100kPot$2659+2)^(0+256)
 10256                           
 10257                           ;user.c: 190: return trunc(pwm);
 10258  1F6A  0863               	movf	_scaleA100kPot$2659^(0+256),w
 10259  1F6B  0021               	movlb	1	; select bank1
 10260  1F6C  00EA               	movwf	___fttol@f1^(0+128)
 10261  1F6D  0022               	movlb	2	; select bank2
 10262  1F6E  0864               	movf	(_scaleA100kPot$2659+1)^(0+256),w
 10263  1F6F  0021               	movlb	1	; select bank1
 10264  1F70  00EB               	movwf	(___fttol@f1+1)^(0+128)
 10265  1F71  0022               	movlb	2	; select bank2
 10266  1F72  0865               	movf	(_scaleA100kPot$2659+2)^(0+256),w
 10267  1F73  0021               	movlb	1	; select bank1
 10268  1F74  00EC               	movwf	(___fttol@f1+2)^(0+128)
 10269  1F75  3192  22F8         	fcall	___fttol
 10270  1F77  0021               	movlb	1	; select bank1
 10271  1F78  086B               	movf	(?___fttol^(0+128)+1),w
 10272  1F79  0022               	movlb	2	; select bank2
 10273  1F7A  00D8               	movwf	(?_scaleA100kPot+1)^(0+256)
 10274  1F7B  0021               	movlb	1	; select bank1
 10275  1F7C  086A               	movf	?___fttol^(0+128),w
 10276  1F7D  0022               	movlb	2	; select bank2
 10277  1F7E  00D7               	movwf	?_scaleA100kPot^(0+256)
 10278  1F7F  0008               	return
 10279  1F80                     __end_of_scaleA100kPot:	
 10280                           
 10281                           	psect	text21
 10282  1D3C                     __ptext21:	
 10283 ;; *************** function _trunc *****************
 10284 ;; Defined at:
 10285 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;  x               3   16[BANK2 ] int 
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;  i               3   19[BANK2 ] int 
 10290 ;;  expon           2   22[BANK2 ] int 
 10291 ;; Return value:  Size  Location     Type
 10292 ;;                  3   16[BANK2 ] int 
 10293 ;; Registers used:
 10294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10300 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10301 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10303 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10304 ;;Total ram usage:        8 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    5
 10307 ;; This function calls:
 10308 ;;		___altoft
 10309 ;;		___fttol
 10310 ;;		_frexp
 10311 ;; This function is called by:
 10312 ;;		_set_subdivision
 10313 ;;		_scaleA100kPot
 10314 ;;		_scaleiA100kPot
 10315 ;;		_scaleA10kPot
 10316 ;;		_scaleiA10kPot
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _trunc
 10322  1D3C                     _trunc:	
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10326  1D3C  0022               	movlb	2	; select bank2
 10327  1D3D  0830               	movf	trunc@x^(0+256),w
 10328  1D3E  0021               	movlb	1	; select bank1
 10329  1D3F  00A0               	movwf	frexp@value^(0+128)
 10330  1D40  0022               	movlb	2	; select bank2
 10331  1D41  0831               	movf	(trunc@x+1)^(0+256),w
 10332  1D42  0021               	movlb	1	; select bank1
 10333  1D43  00A1               	movwf	(frexp@value+1)^(0+128)
 10334  1D44  0022               	movlb	2	; select bank2
 10335  1D45  0832               	movf	(trunc@x+2)^(0+256),w
 10336  1D46  0021               	movlb	1	; select bank1
 10337  1D47  00A2               	movwf	(frexp@value+2)^(0+128)
 10338  1D48  3036               	movlw	low trunc@expon
 10339  1D49  00A3               	movwf	frexp@eptr^(0+128)
 10340  1D4A  3001               	movlw	high trunc@expon
 10341  1D4B  00A4               	movwf	(frexp@eptr+1)^(0+128)
 10342  1D4C  319A  2226  319D   	fcall	_frexp
 10343  1D4F  0022               	movlb	2	; select bank2
 10344  1D50  1FB7               	btfss	(trunc@expon+1)^(0+256),7
 10345  1D51  2D59               	goto	l7537
 10346  1D52  3000               	movlw	0
 10347  1D53  00B0               	movwf	?_trunc^(0+256)
 10348  1D54  3000               	movlw	0
 10349  1D55  00B1               	movwf	(?_trunc+1)^(0+256)
 10350  1D56  3000               	movlw	0
 10351  1D57  00B2               	movwf	(?_trunc+2)^(0+256)
 10352  1D58  0008               	return
 10353  1D59                     l7537:	
 10354  1D59  3000               	movlw	0
 10355  1D5A  0237               	subwf	(trunc@expon+1)^(0+256),w
 10356  1D5B  3015               	movlw	21
 10357  1D5C  1903               	skipnz
 10358  1D5D  0236               	subwf	trunc@expon^(0+256),w
 10359  1D5E  1803               	btfsc	3,0
 10360  1D5F  0008               	return
 10361  1D60  0830               	movf	trunc@x^(0+256),w
 10362  1D61  0021               	movlb	1	; select bank1
 10363  1D62  00EA               	movwf	___fttol@f1^(0+128)
 10364  1D63  0022               	movlb	2	; select bank2
 10365  1D64  0831               	movf	(trunc@x+1)^(0+256),w
 10366  1D65  0021               	movlb	1	; select bank1
 10367  1D66  00EB               	movwf	(___fttol@f1+1)^(0+128)
 10368  1D67  0022               	movlb	2	; select bank2
 10369  1D68  0832               	movf	(trunc@x+2)^(0+256),w
 10370  1D69  0021               	movlb	1	; select bank1
 10371  1D6A  00EC               	movwf	(___fttol@f1+2)^(0+128)
 10372  1D6B  3192  22F8  319D   	fcall	___fttol
 10373  1D6E  0021               	movlb	1	; select bank1
 10374  1D6F  086D               	movf	(?___fttol+3)^(0+128),w
 10375  1D70  0022               	movlb	2	; select bank2
 10376  1D71  00AD               	movwf	(___altoft@c+3)^(0+256)
 10377  1D72  0021               	movlb	1	; select bank1
 10378  1D73  086C               	movf	(?___fttol+2)^(0+128),w
 10379  1D74  0022               	movlb	2	; select bank2
 10380  1D75  00AC               	movwf	(___altoft@c+2)^(0+256)
 10381  1D76  0021               	movlb	1	; select bank1
 10382  1D77  086B               	movf	(?___fttol+1)^(0+128),w
 10383  1D78  0022               	movlb	2	; select bank2
 10384  1D79  00AB               	movwf	(___altoft@c+1)^(0+256)
 10385  1D7A  0021               	movlb	1	; select bank1
 10386  1D7B  086A               	movf	?___fttol^(0+128),w
 10387  1D7C  0022               	movlb	2	; select bank2
 10388  1D7D  00AA               	movwf	___altoft@c^(0+256)
 10389  1D7E  319B  23FC         	fcall	___altoft
 10390  1D80  0022               	movlb	2	; select bank2
 10391  1D81  082A               	movf	?___altoft^(0+256),w
 10392  1D82  00B3               	movwf	trunc@i^(0+256)
 10393  1D83  082B               	movf	(?___altoft+1)^(0+256),w
 10394  1D84  00B4               	movwf	(trunc@i+1)^(0+256)
 10395  1D85  082C               	movf	(?___altoft+2)^(0+256),w
 10396  1D86  00B5               	movwf	(trunc@i+2)^(0+256)
 10397  1D87  0833               	movf	trunc@i^(0+256),w
 10398  1D88  00B0               	movwf	?_trunc^(0+256)
 10399  1D89  0834               	movf	(trunc@i+1)^(0+256),w
 10400  1D8A  00B1               	movwf	(?_trunc+1)^(0+256)
 10401  1D8B  0835               	movf	(trunc@i+2)^(0+256),w
 10402  1D8C  00B2               	movwf	(?_trunc+2)^(0+256)
 10403  1D8D  0008               	return
 10404  1D8E                     __end_of_trunc:	
 10405                           
 10406                           	psect	text22
 10407  096E                     __ptext22:	
 10408 ;; *************** function _pow *****************
 10409 ;; Defined at:
 10410 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  x               3   37[BANK2 ] int 
 10413 ;;  y               3   40[BANK2 ] int 
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  yi              4   51[BANK2 ] unsigned long 
 10416 ;;  sign            1   50[BANK2 ] unsigned char 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  3   37[BANK2 ] unsigned char 
 10419 ;; Registers used:
 10420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10426 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10427 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10428 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10429 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10430 ;;Total ram usage:       18 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    7
 10433 ;; This function calls:
 10434 ;;		___ftge
 10435 ;;		___ftmul
 10436 ;;		___ftneg
 10437 ;;		___fttol
 10438 ;;		___lltoft
 10439 ;;		_exp
 10440 ;;		_log
 10441 ;; This function is called by:
 10442 ;;		_scaleA100kPot
 10443 ;;		_scaleiA100kPot
 10444 ;;		_scaleA10kPot
 10445 ;;		_scaleiA10kPot
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function _pow
 10451  096E                     _pow:	
 10452                           
 10453                           ;incstack = 0
 10454                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10455  096E  0022               	movlb	2	; select bank2
 10456  096F  01D2               	clrf	pow@sign^(0+256)
 10457  0970  0847               	movf	(pow@x+2)^(0+256),w
 10458  0971  0446               	iorwf	(pow@x+1)^(0+256),w
 10459  0972  0445               	iorwf	pow@x^(0+256),w
 10460  0973  1D03               	skipz
 10461  0974  299A               	goto	l7557
 10462  0975  3000               	movlw	0
 10463  0976  0021               	movlb	1	; select bank1
 10464  0977  00A0               	movwf	___ftge@ff1^(0+128)
 10465  0978  3000               	movlw	0
 10466  0979  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10467  097A  3000               	movlw	0
 10468  097B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10469  097C  0022               	movlb	2	; select bank2
 10470  097D  0848               	movf	pow@y^(0+256),w
 10471  097E  0021               	movlb	1	; select bank1
 10472  097F  00A3               	movwf	___ftge@ff2^(0+128)
 10473  0980  0022               	movlb	2	; select bank2
 10474  0981  0849               	movf	(pow@y+1)^(0+256),w
 10475  0982  0021               	movlb	1	; select bank1
 10476  0983  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10477  0984  0022               	movlb	2	; select bank2
 10478  0985  084A               	movf	(pow@y+2)^(0+256),w
 10479  0986  0021               	movlb	1	; select bank1
 10480  0987  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10481  0988  3198  20B8  3189   	fcall	___ftge
 10482  098B  1C03               	btfss	3,0
 10483  098C  2992               	goto	l2113
 10484  098D  3021               	movlw	33
 10485  098E  0024               	movlb	4	; select bank4
 10486  098F  00D3               	movwf	_errno^(0+512)
 10487  0990  3000               	movlw	0
 10488  0991  00D4               	movwf	(_errno^(0+512)+1)
 10489  0992                     l2113:	
 10490  0992  3000               	movlw	0
 10491  0993  0022               	movlb	2	; select bank2
 10492  0994  00C5               	movwf	?_pow^(0+256)
 10493  0995  3000               	movlw	0
 10494  0996  00C6               	movwf	(?_pow+1)^(0+256)
 10495  0997  3000               	movlw	0
 10496  0998  00C7               	movwf	(?_pow+2)^(0+256)
 10497  0999  0008               	return
 10498  099A                     l7557:	
 10499  099A  084A               	movf	(pow@y+2)^(0+256),w
 10500  099B  0449               	iorwf	(pow@y+1)^(0+256),w
 10501  099C  0448               	iorwf	pow@y^(0+256),w
 10502  099D  1D03               	skipz
 10503  099E  29A6               	goto	l7563
 10504  099F  3000               	movlw	0
 10505  09A0  00C5               	movwf	?_pow^(0+256)
 10506  09A1  3080               	movlw	128
 10507  09A2  00C6               	movwf	(?_pow+1)^(0+256)
 10508  09A3  303F               	movlw	63
 10509  09A4  00C7               	movwf	(?_pow+2)^(0+256)
 10510  09A5  0008               	return
 10511  09A6                     l7563:	
 10512  09A6  0845               	movf	pow@x^(0+256),w
 10513  09A7  0021               	movlb	1	; select bank1
 10514  09A8  00A0               	movwf	___ftge@ff1^(0+128)
 10515  09A9  0022               	movlb	2	; select bank2
 10516  09AA  0846               	movf	(pow@x+1)^(0+256),w
 10517  09AB  0021               	movlb	1	; select bank1
 10518  09AC  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10519  09AD  0022               	movlb	2	; select bank2
 10520  09AE  0847               	movf	(pow@x+2)^(0+256),w
 10521  09AF  0021               	movlb	1	; select bank1
 10522  09B0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10523  09B1  3000               	movlw	0
 10524  09B2  00A3               	movwf	___ftge@ff2^(0+128)
 10525  09B3  3000               	movlw	0
 10526  09B4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10527  09B5  3000               	movlw	0
 10528  09B6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10529  09B7  3198  20B8  3189   	fcall	___ftge
 10530  09BA  1803               	btfsc	3,0
 10531  09BB  2A2C               	goto	l7575
 10532  09BC  0022               	movlb	2	; select bank2
 10533  09BD  0848               	movf	pow@y^(0+256),w
 10534  09BE  0021               	movlb	1	; select bank1
 10535  09BF  00EA               	movwf	___fttol@f1^(0+128)
 10536  09C0  0022               	movlb	2	; select bank2
 10537  09C1  0849               	movf	(pow@y+1)^(0+256),w
 10538  09C2  0021               	movlb	1	; select bank1
 10539  09C3  00EB               	movwf	(___fttol@f1+1)^(0+128)
 10540  09C4  0022               	movlb	2	; select bank2
 10541  09C5  084A               	movf	(pow@y+2)^(0+256),w
 10542  09C6  0021               	movlb	1	; select bank1
 10543  09C7  00EC               	movwf	(___fttol@f1+2)^(0+128)
 10544  09C8  3192  22F8  3189   	fcall	___fttol
 10545  09CB  0021               	movlb	1	; select bank1
 10546  09CC  086D               	movf	(?___fttol+3)^(0+128),w
 10547  09CD  0022               	movlb	2	; select bank2
 10548  09CE  00D6               	movwf	(pow@yi+3)^(0+256)
 10549  09CF  0021               	movlb	1	; select bank1
 10550  09D0  086C               	movf	(?___fttol+2)^(0+128),w
 10551  09D1  0022               	movlb	2	; select bank2
 10552  09D2  00D5               	movwf	(pow@yi+2)^(0+256)
 10553  09D3  0021               	movlb	1	; select bank1
 10554  09D4  086B               	movf	(?___fttol+1)^(0+128),w
 10555  09D5  0022               	movlb	2	; select bank2
 10556  09D6  00D4               	movwf	(pow@yi+1)^(0+256)
 10557  09D7  0021               	movlb	1	; select bank1
 10558  09D8  086A               	movf	?___fttol^(0+128),w
 10559  09D9  0022               	movlb	2	; select bank2
 10560  09DA  00D3               	movwf	pow@yi^(0+256)
 10561  09DB  0856               	movf	(pow@yi+3)^(0+256),w
 10562  09DC  0021               	movlb	1	; select bank1
 10563  09DD  00AB               	movwf	(___lltoft@c+3)^(0+128)
 10564  09DE  0022               	movlb	2	; select bank2
 10565  09DF  0855               	movf	(pow@yi+2)^(0+256),w
 10566  09E0  0021               	movlb	1	; select bank1
 10567  09E1  00AA               	movwf	(___lltoft@c+2)^(0+128)
 10568  09E2  0022               	movlb	2	; select bank2
 10569  09E3  0854               	movf	(pow@yi+1)^(0+256),w
 10570  09E4  0021               	movlb	1	; select bank1
 10571  09E5  00A9               	movwf	(___lltoft@c+1)^(0+128)
 10572  09E6  0022               	movlb	2	; select bank2
 10573  09E7  0853               	movf	pow@yi^(0+256),w
 10574  09E8  0021               	movlb	1	; select bank1
 10575  09E9  00A8               	movwf	___lltoft@c^(0+128)
 10576  09EA  31A7  2715  3189   	fcall	___lltoft
 10577  09ED  0022               	movlb	2	; select bank2
 10578  09EE  084A               	movf	(pow@y+2)^(0+256),w
 10579  09EF  0021               	movlb	1	; select bank1
 10580  09F0  062A               	xorwf	(?___lltoft+2)^(0+128),w
 10581  09F1  1D03               	skipz
 10582  09F2  29FD               	goto	u7965
 10583  09F3  0022               	movlb	2	; select bank2
 10584  09F4  0849               	movf	(pow@y+1)^(0+256),w
 10585  09F5  0021               	movlb	1	; select bank1
 10586  09F6  0629               	xorwf	(?___lltoft+1)^(0+128),w
 10587  09F7  1D03               	skipz
 10588  09F8  29FD               	goto	u7965
 10589  09F9  0022               	movlb	2	; select bank2
 10590  09FA  0848               	movf	pow@y^(0+256),w
 10591  09FB  0021               	movlb	1	; select bank1
 10592  09FC  0628               	xorwf	?___lltoft^(0+128),w
 10593  09FD                     u7965:	
 10594  09FD  1903               	skipnz
 10595  09FE  2A0C               	goto	l7571
 10596  09FF  3021               	movlw	33
 10597  0A00  0024               	movlb	4	; select bank4
 10598  0A01  00D3               	movwf	_errno^(0+512)
 10599  0A02  3000               	movlw	0
 10600  0A03  00D4               	movwf	(_errno^(0+512)+1)
 10601  0A04  3000               	movlw	0
 10602  0A05  0022               	movlb	2	; select bank2
 10603  0A06  00C5               	movwf	?_pow^(0+256)
 10604  0A07  3000               	movlw	0
 10605  0A08  00C6               	movwf	(?_pow+1)^(0+256)
 10606  0A09  3000               	movlw	0
 10607  0A0A  00C7               	movwf	(?_pow+2)^(0+256)
 10608  0A0B  0008               	return
 10609  0A0C                     l7571:	
 10610  0A0C  0022               	movlb	2	; select bank2
 10611  0A0D  0853               	movf	pow@yi^(0+256),w
 10612  0A0E  3901               	andlw	1
 10613  0A0F  00CB               	movwf	??_pow^(0+256)
 10614  0A10  084B               	movf	??_pow^(0+256),w
 10615  0A11  00D2               	movwf	pow@sign^(0+256)
 10616  0A12  0845               	movf	pow@x^(0+256),w
 10617  0A13  0021               	movlb	1	; select bank1
 10618  0A14  00B8               	movwf	___ftneg@f1^(0+128)
 10619  0A15  0022               	movlb	2	; select bank2
 10620  0A16  0846               	movf	(pow@x+1)^(0+256),w
 10621  0A17  0021               	movlb	1	; select bank1
 10622  0A18  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 10623  0A19  0022               	movlb	2	; select bank2
 10624  0A1A  0847               	movf	(pow@x+2)^(0+256),w
 10625  0A1B  0021               	movlb	1	; select bank1
 10626  0A1C  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 10627  0A1D  31A5  2566  3189   	fcall	___ftneg
 10628  0A20  0021               	movlb	1	; select bank1
 10629  0A21  0838               	movf	?___ftneg^(0+128),w
 10630  0A22  0022               	movlb	2	; select bank2
 10631  0A23  00C5               	movwf	pow@x^(0+256)
 10632  0A24  0021               	movlb	1	; select bank1
 10633  0A25  0839               	movf	(?___ftneg+1)^(0+128),w
 10634  0A26  0022               	movlb	2	; select bank2
 10635  0A27  00C6               	movwf	(pow@x+1)^(0+256)
 10636  0A28  0021               	movlb	1	; select bank1
 10637  0A29  083A               	movf	(?___ftneg+2)^(0+128),w
 10638  0A2A  0022               	movlb	2	; select bank2
 10639  0A2B  00C7               	movwf	(pow@x+2)^(0+256)
 10640  0A2C                     l7575:	
 10641  0A2C  0022               	movlb	2	; select bank2
 10642  0A2D  0845               	movf	pow@x^(0+256),w
 10643  0A2E  0021               	movlb	1	; select bank1
 10644  0A2F  00E2               	movwf	log@x^(0+128)
 10645  0A30  0022               	movlb	2	; select bank2
 10646  0A31  0846               	movf	(pow@x+1)^(0+256),w
 10647  0A32  0021               	movlb	1	; select bank1
 10648  0A33  00E3               	movwf	(log@x+1)^(0+128)
 10649  0A34  0022               	movlb	2	; select bank2
 10650  0A35  0847               	movf	(pow@x+2)^(0+256),w
 10651  0A36  0021               	movlb	1	; select bank1
 10652  0A37  00E4               	movwf	(log@x+2)^(0+128)
 10653  0A38  3194  2446  3189   	fcall	_log
 10654  0A3B  0021               	movlb	1	; select bank1
 10655  0A3C  0862               	movf	?_log^(0+128),w
 10656  0A3D  0022               	movlb	2	; select bank2
 10657  0A3E  00CC               	movwf	_pow$2669^(0+256)
 10658  0A3F  0021               	movlb	1	; select bank1
 10659  0A40  0863               	movf	(?_log+1)^(0+128),w
 10660  0A41  0022               	movlb	2	; select bank2
 10661  0A42  00CD               	movwf	(_pow$2669+1)^(0+256)
 10662  0A43  0021               	movlb	1	; select bank1
 10663  0A44  0864               	movf	(?_log+2)^(0+128),w
 10664  0A45  0022               	movlb	2	; select bank2
 10665  0A46  00CE               	movwf	(_pow$2669+2)^(0+256)
 10666  0A47  0848               	movf	pow@y^(0+256),w
 10667  0A48  0021               	movlb	1	; select bank1
 10668  0A49  00C8               	movwf	___ftmul@f1^(0+128)
 10669  0A4A  0022               	movlb	2	; select bank2
 10670  0A4B  0849               	movf	(pow@y+1)^(0+256),w
 10671  0A4C  0021               	movlb	1	; select bank1
 10672  0A4D  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 10673  0A4E  0022               	movlb	2	; select bank2
 10674  0A4F  084A               	movf	(pow@y+2)^(0+256),w
 10675  0A50  0021               	movlb	1	; select bank1
 10676  0A51  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 10677  0A52  0022               	movlb	2	; select bank2
 10678  0A53  084C               	movf	_pow$2669^(0+256),w
 10679  0A54  0021               	movlb	1	; select bank1
 10680  0A55  00CB               	movwf	___ftmul@f2^(0+128)
 10681  0A56  0022               	movlb	2	; select bank2
 10682  0A57  084D               	movf	(_pow$2669+1)^(0+256),w
 10683  0A58  0021               	movlb	1	; select bank1
 10684  0A59  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 10685  0A5A  0022               	movlb	2	; select bank2
 10686  0A5B  084E               	movf	(_pow$2669+2)^(0+256),w
 10687  0A5C  0021               	movlb	1	; select bank1
 10688  0A5D  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 10689  0A5E  3195  25A7  3189   	fcall	___ftmul
 10690  0A61  0021               	movlb	1	; select bank1
 10691  0A62  0848               	movf	?___ftmul^(0+128),w
 10692  0A63  0022               	movlb	2	; select bank2
 10693  0A64  00CF               	movwf	_pow$2670^(0+256)
 10694  0A65  0021               	movlb	1	; select bank1
 10695  0A66  0849               	movf	(?___ftmul+1)^(0+128),w
 10696  0A67  0022               	movlb	2	; select bank2
 10697  0A68  00D0               	movwf	(_pow$2670+1)^(0+256)
 10698  0A69  0021               	movlb	1	; select bank1
 10699  0A6A  084A               	movf	(?___ftmul+2)^(0+128),w
 10700  0A6B  0022               	movlb	2	; select bank2
 10701  0A6C  00D1               	movwf	(_pow$2670+2)^(0+256)
 10702  0A6D  084F               	movf	_pow$2670^(0+256),w
 10703  0A6E  00B8               	movwf	exp@x^(0+256)
 10704  0A6F  0850               	movf	(_pow$2670+1)^(0+256),w
 10705  0A70  00B9               	movwf	(exp@x+1)^(0+256)
 10706  0A71  0851               	movf	(_pow$2670+2)^(0+256),w
 10707  0A72  00BA               	movwf	(exp@x+2)^(0+256)
 10708  0A73  318A  229A  3189   	fcall	_exp
 10709  0A76  0022               	movlb	2	; select bank2
 10710  0A77  0838               	movf	?_exp^(0+256),w
 10711  0A78  00C5               	movwf	pow@x^(0+256)
 10712  0A79  0839               	movf	(?_exp+1)^(0+256),w
 10713  0A7A  00C6               	movwf	(pow@x+1)^(0+256)
 10714  0A7B  083A               	movf	(?_exp+2)^(0+256),w
 10715  0A7C  00C7               	movwf	(pow@x+2)^(0+256)
 10716  0A7D  0852               	movf	pow@sign^(0+256),w
 10717  0A7E  1903               	btfsc	3,2
 10718  0A7F  0008               	return
 10719  0A80  0845               	movf	pow@x^(0+256),w
 10720  0A81  0021               	movlb	1	; select bank1
 10721  0A82  00B8               	movwf	___ftneg@f1^(0+128)
 10722  0A83  0022               	movlb	2	; select bank2
 10723  0A84  0846               	movf	(pow@x+1)^(0+256),w
 10724  0A85  0021               	movlb	1	; select bank1
 10725  0A86  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 10726  0A87  0022               	movlb	2	; select bank2
 10727  0A88  0847               	movf	(pow@x+2)^(0+256),w
 10728  0A89  0021               	movlb	1	; select bank1
 10729  0A8A  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 10730  0A8B  31A5  2566         	fcall	___ftneg
 10731  0A8D  0021               	movlb	1	; select bank1
 10732  0A8E  0838               	movf	?___ftneg^(0+128),w
 10733  0A8F  0022               	movlb	2	; select bank2
 10734  0A90  00C5               	movwf	?_pow^(0+256)
 10735  0A91  0021               	movlb	1	; select bank1
 10736  0A92  0839               	movf	(?___ftneg+1)^(0+128),w
 10737  0A93  0022               	movlb	2	; select bank2
 10738  0A94  00C6               	movwf	(?_pow+1)^(0+256)
 10739  0A95  0021               	movlb	1	; select bank1
 10740  0A96  083A               	movf	(?___ftneg+2)^(0+128),w
 10741  0A97  0022               	movlb	2	; select bank2
 10742  0A98  00C7               	movwf	(?_pow+2)^(0+256)
 10743  0A99  0008               	return
 10744  0A9A                     __end_of_pow:	
 10745                           
 10746                           	psect	text23
 10747  1446                     __ptext23:	
 10748 ;; *************** function _log *****************
 10749 ;; Defined at:
 10750 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;  x               3   66[BANK1 ] unsigned char 
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;  exponent        2   69[BANK1 ] int 
 10755 ;; Return value:  Size  Location     Type
 10756 ;;                  3   66[BANK1 ] int 
 10757 ;; Registers used:
 10758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10759 ;; Tracked objects:
 10760 ;;		On entry : 0/0
 10761 ;;		On exit  : 0/0
 10762 ;;		Unchanged: 0/0
 10763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10764 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10765 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10767 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10768 ;;Total ram usage:        5 bytes
 10769 ;; Hardware stack levels used:    1
 10770 ;; Hardware stack levels required when called:    6
 10771 ;; This function calls:
 10772 ;;		___awtoft
 10773 ;;		___ftadd
 10774 ;;		___ftge
 10775 ;;		___ftmul
 10776 ;;		_eval_poly
 10777 ;;		_frexp
 10778 ;; This function is called by:
 10779 ;;		_pow
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           
 10784                           ;psect for function _log
 10785  1446                     _log:	
 10786                           
 10787                           ;incstack = 0
 10788                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10789  1446  0021               	movlb	1	; select bank1
 10790  1447  0862               	movf	log@x^(0+128),w
 10791  1448  00A0               	movwf	___ftge@ff1^(0+128)
 10792  1449  0863               	movf	(log@x+1)^(0+128),w
 10793  144A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10794  144B  0864               	movf	(log@x+2)^(0+128),w
 10795  144C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10796  144D  3000               	movlw	0
 10797  144E  00A3               	movwf	___ftge@ff2^(0+128)
 10798  144F  3000               	movlw	0
 10799  1450  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10800  1451  3000               	movlw	0
 10801  1452  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10802  1453  3198  20B8  3194   	fcall	___ftge
 10803  1456  1803               	btfsc	3,0
 10804  1457  2C65               	goto	l7431
 10805  1458  3021               	movlw	33
 10806  1459  0024               	movlb	4	; select bank4
 10807  145A  00D3               	movwf	_errno^(0+512)
 10808  145B  3000               	movlw	0
 10809  145C  00D4               	movwf	(_errno^(0+512)+1)
 10810  145D  3000               	movlw	0
 10811  145E  0021               	movlb	1	; select bank1
 10812  145F  00E2               	movwf	?_log^(0+128)
 10813  1460  3000               	movlw	0
 10814  1461  00E3               	movwf	(?_log+1)^(0+128)
 10815  1462  3000               	movlw	0
 10816  1463  00E4               	movwf	(?_log+2)^(0+128)
 10817  1464  0008               	return
 10818  1465                     l7431:	
 10819  1465  0021               	movlb	1	; select bank1
 10820  1466  0864               	movf	(log@x+2)^(0+128),w
 10821  1467  0463               	iorwf	(log@x+1)^(0+128),w
 10822  1468  0462               	iorwf	log@x^(0+128),w
 10823  1469  1D03               	skipz
 10824  146A  2C78               	goto	l7437
 10825  146B  3022               	movlw	34
 10826  146C  0024               	movlb	4	; select bank4
 10827  146D  00D3               	movwf	_errno^(0+512)
 10828  146E  3000               	movlw	0
 10829  146F  00D4               	movwf	(_errno^(0+512)+1)
 10830  1470  3000               	movlw	0
 10831  1471  0021               	movlb	1	; select bank1
 10832  1472  00E2               	movwf	?_log^(0+128)
 10833  1473  3000               	movlw	0
 10834  1474  00E3               	movwf	(?_log+1)^(0+128)
 10835  1475  3000               	movlw	0
 10836  1476  00E4               	movwf	(?_log+2)^(0+128)
 10837  1477  0008               	return
 10838  1478                     l7437:	
 10839  1478  3000               	movlw	0
 10840  1479  00BB               	movwf	___ftadd@f1^(0+128)
 10841  147A  3080               	movlw	128
 10842  147B  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 10843  147C  30BF               	movlw	191
 10844  147D  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 10845  147E  3000               	movlw	0
 10846  147F  00C8               	movwf	___ftmul@f1^(0+128)
 10847  1480  3000               	movlw	0
 10848  1481  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 10849  1482  3040               	movlw	64
 10850  1483  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 10851  1484  30E5               	movlw	low log@exponent
 10852  1485  00A3               	movwf	frexp@eptr^(0+128)
 10853  1486  3000               	movlw	high log@exponent
 10854  1487  00A4               	movwf	(frexp@eptr+1)^(0+128)
 10855  1488  0862               	movf	log@x^(0+128),w
 10856  1489  00A0               	movwf	frexp@value^(0+128)
 10857  148A  0863               	movf	(log@x+1)^(0+128),w
 10858  148B  00A1               	movwf	(frexp@value+1)^(0+128)
 10859  148C  0864               	movf	(log@x+2)^(0+128),w
 10860  148D  00A2               	movwf	(frexp@value+2)^(0+128)
 10861  148E  319A  2226  3194   	fcall	_frexp
 10862  1491  0021               	movlb	1	; select bank1
 10863  1492  0820               	movf	?_frexp^(0+128),w
 10864  1493  00CB               	movwf	___ftmul@f2^(0+128)
 10865  1494  0821               	movf	(?_frexp+1)^(0+128),w
 10866  1495  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 10867  1496  0822               	movf	(?_frexp+2)^(0+128),w
 10868  1497  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 10869  1498  3195  25A7  3194   	fcall	___ftmul
 10870  149B  0021               	movlb	1	; select bank1
 10871  149C  0848               	movf	?___ftmul^(0+128),w
 10872  149D  00BE               	movwf	___ftadd@f2^(0+128)
 10873  149E  0849               	movf	(?___ftmul+1)^(0+128),w
 10874  149F  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 10875  14A0  084A               	movf	(?___ftmul+2)^(0+128),w
 10876  14A1  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 10877  14A2  3188  2078  3194   	fcall	___ftadd
 10878  14A5  0021               	movlb	1	; select bank1
 10879  14A6  083B               	movf	?___ftadd^(0+128),w
 10880  14A7  00E2               	movwf	log@x^(0+128)
 10881  14A8  083C               	movf	(?___ftadd+1)^(0+128),w
 10882  14A9  00E3               	movwf	(log@x+1)^(0+128)
 10883  14AA  083D               	movf	(?___ftadd+2)^(0+128),w
 10884  14AB  00E4               	movwf	(log@x+2)^(0+128)
 10885  14AC  30FF               	movlw	255
 10886  14AD  07E5               	addwf	log@exponent^(0+128),f
 10887  14AE  30FF               	movlw	255
 10888  14AF  3DE6               	addwfc	(log@exponent+1)^(0+128),f
 10889  14B0  0862               	movf	log@x^(0+128),w
 10890  14B1  00D8               	movwf	eval_poly@x^(0+128)
 10891  14B2  0863               	movf	(log@x+1)^(0+128),w
 10892  14B3  00D9               	movwf	(eval_poly@x+1)^(0+128)
 10893  14B4  0864               	movf	(log@x+2)^(0+128),w
 10894  14B5  00DA               	movwf	(eval_poly@x+2)^(0+128)
 10895  14B6  301E               	movlw	low (log@coeff| (0+32768))
 10896  14B7  00DB               	movwf	eval_poly@d^(0+128)
 10897  14B8  30A0               	movlw	high (log@coeff| (0+32768))
 10898  14B9  00DC               	movwf	(eval_poly@d^(0+128)+1)
 10899  14BA  3008               	movlw	8
 10900  14BB  00DD               	movwf	eval_poly@n^(0+128)
 10901  14BC  3000               	movlw	0
 10902  14BD  00DE               	movwf	(eval_poly@n^(0+128)+1)
 10903  14BE  319E  263B  3194   	fcall	_eval_poly
 10904  14C1  0021               	movlb	1	; select bank1
 10905  14C2  0858               	movf	?_eval_poly^(0+128),w
 10906  14C3  00E2               	movwf	log@x^(0+128)
 10907  14C4  0859               	movf	(?_eval_poly+1)^(0+128),w
 10908  14C5  00E3               	movwf	(log@x+1)^(0+128)
 10909  14C6  085A               	movf	(?_eval_poly+2)^(0+128),w
 10910  14C7  00E4               	movwf	(log@x+2)^(0+128)
 10911  14C8  0862               	movf	log@x^(0+128),w
 10912  14C9  00BB               	movwf	___ftadd@f1^(0+128)
 10913  14CA  0863               	movf	(log@x+1)^(0+128),w
 10914  14CB  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 10915  14CC  0864               	movf	(log@x+2)^(0+128),w
 10916  14CD  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 10917  14CE  3072               	movlw	114
 10918  14CF  00C8               	movwf	___ftmul@f1^(0+128)
 10919  14D0  3031               	movlw	49
 10920  14D1  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 10921  14D2  303F               	movlw	63
 10922  14D3  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 10923  14D4  0866               	movf	(log@exponent+1)^(0+128),w
 10924  14D5  00A9               	movwf	(___awtoft@c+1)^(0+128)
 10925  14D6  0865               	movf	log@exponent^(0+128),w
 10926  14D7  00A8               	movwf	___awtoft@c^(0+128)
 10927  14D8  31A6  26A9  3194   	fcall	___awtoft
 10928  14DB  0021               	movlb	1	; select bank1
 10929  14DC  0828               	movf	?___awtoft^(0+128),w
 10930  14DD  00CB               	movwf	___ftmul@f2^(0+128)
 10931  14DE  0829               	movf	(?___awtoft+1)^(0+128),w
 10932  14DF  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 10933  14E0  082A               	movf	(?___awtoft+2)^(0+128),w
 10934  14E1  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 10935  14E2  3195  25A7  3194   	fcall	___ftmul
 10936  14E5  0021               	movlb	1	; select bank1
 10937  14E6  0848               	movf	?___ftmul^(0+128),w
 10938  14E7  00BE               	movwf	___ftadd@f2^(0+128)
 10939  14E8  0849               	movf	(?___ftmul+1)^(0+128),w
 10940  14E9  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 10941  14EA  084A               	movf	(?___ftmul+2)^(0+128),w
 10942  14EB  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 10943  14EC  3188  2078         	fcall	___ftadd
 10944  14EE  0021               	movlb	1	; select bank1
 10945  14EF  083B               	movf	?___ftadd^(0+128),w
 10946  14F0  00E2               	movwf	?_log^(0+128)
 10947  14F1  083C               	movf	(?___ftadd+1)^(0+128),w
 10948  14F2  00E3               	movwf	(?_log+1)^(0+128)
 10949  14F3  083D               	movf	(?___ftadd+2)^(0+128),w
 10950  14F4  00E4               	movwf	(?_log+2)^(0+128)
 10951  14F5  0008               	return
 10952  14F6                     __end_of_log:	
 10953                           
 10954                           	psect	text24
 10955  0A9A                     __ptext24:	
 10956 ;; *************** function _exp *****************
 10957 ;; Defined at:
 10958 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;  x               3   24[BANK2 ] int 
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;  exponent        2   34[BANK2 ] int 
 10963 ;;  sign            1   36[BANK2 ] unsigned char 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  3   24[BANK2 ] unsigned char 
 10966 ;; Registers used:
 10967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10973 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10974 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10975 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10976 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10977 ;;Total ram usage:       13 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    6
 10980 ;; This function calls:
 10981 ;;		___awtoft
 10982 ;;		___ftdiv
 10983 ;;		___ftge
 10984 ;;		___ftmul
 10985 ;;		___ftneg
 10986 ;;		___ftsub
 10987 ;;		___fttol
 10988 ;;		_eval_poly
 10989 ;;		_floor
 10990 ;;		_ldexp
 10991 ;; This function is called by:
 10992 ;;		_pow
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           
 10997                           ;psect for function _exp
 10998  0A9A                     _exp:	
 10999                           
 11000                           ;incstack = 0
 11001                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11002  0A9A  0022               	movlb	2	; select bank2
 11003  0A9B  083A               	movf	(exp@x+2)^(0+256),w
 11004  0A9C  0439               	iorwf	(exp@x+1)^(0+256),w
 11005  0A9D  0438               	iorwf	exp@x^(0+256),w
 11006  0A9E  1D03               	skipz
 11007  0A9F  2AA7               	goto	l7453
 11008  0AA0  3000               	movlw	0
 11009  0AA1  00B8               	movwf	?_exp^(0+256)
 11010  0AA2  3080               	movlw	128
 11011  0AA3  00B9               	movwf	(?_exp+1)^(0+256)
 11012  0AA4  303F               	movlw	63
 11013  0AA5  00BA               	movwf	(?_exp+2)^(0+256)
 11014  0AA6  0008               	return
 11015  0AA7                     l7453:	
 11016  0AA7  3072               	movlw	114
 11017  0AA8  0021               	movlb	1	; select bank1
 11018  0AA9  00A0               	movwf	___ftge@ff1^(0+128)
 11019  0AAA  3031               	movlw	49
 11020  0AAB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11021  0AAC  3044               	movlw	68
 11022  0AAD  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11023  0AAE  0022               	movlb	2	; select bank2
 11024  0AAF  0838               	movf	exp@x^(0+256),w
 11025  0AB0  0021               	movlb	1	; select bank1
 11026  0AB1  00A3               	movwf	___ftge@ff2^(0+128)
 11027  0AB2  0022               	movlb	2	; select bank2
 11028  0AB3  0839               	movf	(exp@x+1)^(0+256),w
 11029  0AB4  0021               	movlb	1	; select bank1
 11030  0AB5  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11031  0AB6  0022               	movlb	2	; select bank2
 11032  0AB7  083A               	movf	(exp@x+2)^(0+256),w
 11033  0AB8  0021               	movlb	1	; select bank1
 11034  0AB9  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11035  0ABA  3198  20B8  318A   	fcall	___ftge
 11036  0ABD  1803               	btfsc	3,0
 11037  0ABE  2ACC               	goto	l7463
 11038  0ABF  3022               	movlw	34
 11039  0AC0  0024               	movlb	4	; select bank4
 11040  0AC1  00D3               	movwf	_errno^(0+512)
 11041  0AC2  3000               	movlw	0
 11042  0AC3  00D4               	movwf	(_errno^(0+512)+1)
 11043  0AC4  30FF               	movlw	255
 11044  0AC5  0022               	movlb	2	; select bank2
 11045  0AC6  00B8               	movwf	?_exp^(0+256)
 11046  0AC7  307F               	movlw	127
 11047  0AC8  00B9               	movwf	(?_exp+1)^(0+256)
 11048  0AC9  307F               	movlw	127
 11049  0ACA  00BA               	movwf	(?_exp+2)^(0+256)
 11050  0ACB  0008               	return
 11051  0ACC                     l7463:	
 11052  0ACC  0022               	movlb	2	; select bank2
 11053  0ACD  0838               	movf	exp@x^(0+256),w
 11054  0ACE  0021               	movlb	1	; select bank1
 11055  0ACF  00A0               	movwf	___ftge@ff1^(0+128)
 11056  0AD0  0022               	movlb	2	; select bank2
 11057  0AD1  0839               	movf	(exp@x+1)^(0+256),w
 11058  0AD2  0021               	movlb	1	; select bank1
 11059  0AD3  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11060  0AD4  0022               	movlb	2	; select bank2
 11061  0AD5  083A               	movf	(exp@x+2)^(0+256),w
 11062  0AD6  0021               	movlb	1	; select bank1
 11063  0AD7  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11064  0AD8  3049               	movlw	73
 11065  0AD9  00A3               	movwf	___ftge@ff2^(0+128)
 11066  0ADA  303A               	movlw	58
 11067  0ADB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11068  0ADC  30C4               	movlw	196
 11069  0ADD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11070  0ADE  3198  20B8  318A   	fcall	___ftge
 11071  0AE1  1803               	btfsc	3,0
 11072  0AE2  2AF0               	goto	l7469
 11073  0AE3  3022               	movlw	34
 11074  0AE4  0024               	movlb	4	; select bank4
 11075  0AE5  00D3               	movwf	_errno^(0+512)
 11076  0AE6  3000               	movlw	0
 11077  0AE7  00D4               	movwf	(_errno^(0+512)+1)
 11078  0AE8  3000               	movlw	0
 11079  0AE9  0022               	movlb	2	; select bank2
 11080  0AEA  00B8               	movwf	?_exp^(0+256)
 11081  0AEB  3000               	movlw	0
 11082  0AEC  00B9               	movwf	(?_exp+1)^(0+256)
 11083  0AED  3000               	movlw	0
 11084  0AEE  00BA               	movwf	(?_exp+2)^(0+256)
 11085  0AEF  0008               	return
 11086  0AF0                     l7469:	
 11087  0AF0  0022               	movlb	2	; select bank2
 11088  0AF1  0838               	movf	exp@x^(0+256),w
 11089  0AF2  0021               	movlb	1	; select bank1
 11090  0AF3  00A0               	movwf	___ftge@ff1^(0+128)
 11091  0AF4  0022               	movlb	2	; select bank2
 11092  0AF5  0839               	movf	(exp@x+1)^(0+256),w
 11093  0AF6  0021               	movlb	1	; select bank1
 11094  0AF7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11095  0AF8  0022               	movlb	2	; select bank2
 11096  0AF9  083A               	movf	(exp@x+2)^(0+256),w
 11097  0AFA  0021               	movlb	1	; select bank1
 11098  0AFB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11099  0AFC  3000               	movlw	0
 11100  0AFD  00A3               	movwf	___ftge@ff2^(0+128)
 11101  0AFE  3000               	movlw	0
 11102  0AFF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11103  0B00  3000               	movlw	0
 11104  0B01  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11105  0B02  3198  20B8  318A   	fcall	___ftge
 11106  0B05  1803               	btfsc	3,0
 11107  0B06  2B09               	goto	u7850
 11108  0B07  3001               	movlw	1
 11109  0B08  2B0A               	goto	u7860
 11110  0B09                     u7850:	
 11111  0B09  3000               	movlw	0
 11112  0B0A                     u7860:	
 11113  0B0A  0022               	movlb	2	; select bank2
 11114  0B0B  00BB               	movwf	??_exp^(0+256)
 11115  0B0C  083B               	movf	??_exp^(0+256),w
 11116  0B0D  00C4               	movwf	exp@sign^(0+256)
 11117  0B0E  0844               	movf	exp@sign^(0+256),w
 11118  0B0F  1903               	btfsc	3,2
 11119  0B10  2B2B               	goto	l7475
 11120  0B11  0838               	movf	exp@x^(0+256),w
 11121  0B12  0021               	movlb	1	; select bank1
 11122  0B13  00B8               	movwf	___ftneg@f1^(0+128)
 11123  0B14  0022               	movlb	2	; select bank2
 11124  0B15  0839               	movf	(exp@x+1)^(0+256),w
 11125  0B16  0021               	movlb	1	; select bank1
 11126  0B17  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 11127  0B18  0022               	movlb	2	; select bank2
 11128  0B19  083A               	movf	(exp@x+2)^(0+256),w
 11129  0B1A  0021               	movlb	1	; select bank1
 11130  0B1B  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 11131  0B1C  31A5  2566  318A   	fcall	___ftneg
 11132  0B1F  0021               	movlb	1	; select bank1
 11133  0B20  0838               	movf	?___ftneg^(0+128),w
 11134  0B21  0022               	movlb	2	; select bank2
 11135  0B22  00B8               	movwf	exp@x^(0+256)
 11136  0B23  0021               	movlb	1	; select bank1
 11137  0B24  0839               	movf	(?___ftneg+1)^(0+128),w
 11138  0B25  0022               	movlb	2	; select bank2
 11139  0B26  00B9               	movwf	(exp@x+1)^(0+256)
 11140  0B27  0021               	movlb	1	; select bank1
 11141  0B28  083A               	movf	(?___ftneg+2)^(0+128),w
 11142  0B29  0022               	movlb	2	; select bank2
 11143  0B2A  00BA               	movwf	(exp@x+2)^(0+256)
 11144  0B2B                     l7475:	
 11145  0B2B  30AA               	movlw	170
 11146  0B2C  0021               	movlb	1	; select bank1
 11147  0B2D  00C8               	movwf	___ftmul@f1^(0+128)
 11148  0B2E  30B8               	movlw	184
 11149  0B2F  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 11150  0B30  303F               	movlw	63
 11151  0B31  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 11152  0B32  0022               	movlb	2	; select bank2
 11153  0B33  0838               	movf	exp@x^(0+256),w
 11154  0B34  0021               	movlb	1	; select bank1
 11155  0B35  00CB               	movwf	___ftmul@f2^(0+128)
 11156  0B36  0022               	movlb	2	; select bank2
 11157  0B37  0839               	movf	(exp@x+1)^(0+256),w
 11158  0B38  0021               	movlb	1	; select bank1
 11159  0B39  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 11160  0B3A  0022               	movlb	2	; select bank2
 11161  0B3B  083A               	movf	(exp@x+2)^(0+256),w
 11162  0B3C  0021               	movlb	1	; select bank1
 11163  0B3D  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 11164  0B3E  3195  25A7  318A   	fcall	___ftmul
 11165  0B41  0021               	movlb	1	; select bank1
 11166  0B42  0848               	movf	?___ftmul^(0+128),w
 11167  0B43  0022               	movlb	2	; select bank2
 11168  0B44  00B8               	movwf	exp@x^(0+256)
 11169  0B45  0021               	movlb	1	; select bank1
 11170  0B46  0849               	movf	(?___ftmul+1)^(0+128),w
 11171  0B47  0022               	movlb	2	; select bank2
 11172  0B48  00B9               	movwf	(exp@x+1)^(0+256)
 11173  0B49  0021               	movlb	1	; select bank1
 11174  0B4A  084A               	movf	(?___ftmul+2)^(0+128),w
 11175  0B4B  0022               	movlb	2	; select bank2
 11176  0B4C  00BA               	movwf	(exp@x+2)^(0+256)
 11177  0B4D  0838               	movf	exp@x^(0+256),w
 11178  0B4E  00B0               	movwf	floor@x^(0+256)
 11179  0B4F  0839               	movf	(exp@x+1)^(0+256),w
 11180  0B50  00B1               	movwf	(floor@x+1)^(0+256)
 11181  0B51  083A               	movf	(exp@x+2)^(0+256),w
 11182  0B52  00B2               	movwf	(floor@x+2)^(0+256)
 11183  0B53  3194  24F6  318A   	fcall	_floor
 11184  0B56  0022               	movlb	2	; select bank2
 11185  0B57  0830               	movf	?_floor^(0+256),w
 11186  0B58  00BC               	movwf	_exp$2671^(0+256)
 11187  0B59  0831               	movf	(?_floor+1)^(0+256),w
 11188  0B5A  00BD               	movwf	(_exp$2671+1)^(0+256)
 11189  0B5B  0832               	movf	(?_floor+2)^(0+256),w
 11190  0B5C  00BE               	movwf	(_exp$2671+2)^(0+256)
 11191  0B5D  083C               	movf	_exp$2671^(0+256),w
 11192  0B5E  0021               	movlb	1	; select bank1
 11193  0B5F  00EA               	movwf	___fttol@f1^(0+128)
 11194  0B60  0022               	movlb	2	; select bank2
 11195  0B61  083D               	movf	(_exp$2671+1)^(0+256),w
 11196  0B62  0021               	movlb	1	; select bank1
 11197  0B63  00EB               	movwf	(___fttol@f1+1)^(0+128)
 11198  0B64  0022               	movlb	2	; select bank2
 11199  0B65  083E               	movf	(_exp$2671+2)^(0+256),w
 11200  0B66  0021               	movlb	1	; select bank1
 11201  0B67  00EC               	movwf	(___fttol@f1+2)^(0+128)
 11202  0B68  3192  22F8  318A   	fcall	___fttol
 11203  0B6B  0021               	movlb	1	; select bank1
 11204  0B6C  086B               	movf	(?___fttol^(0+128)+1),w
 11205  0B6D  0022               	movlb	2	; select bank2
 11206  0B6E  00C3               	movwf	(exp@exponent+1)^(0+256)
 11207  0B6F  0021               	movlb	1	; select bank1
 11208  0B70  086A               	movf	?___fttol^(0+128),w
 11209  0B71  0022               	movlb	2	; select bank2
 11210  0B72  00C2               	movwf	exp@exponent^(0+256)
 11211  0B73  0843               	movf	(exp@exponent+1)^(0+256),w
 11212  0B74  0021               	movlb	1	; select bank1
 11213  0B75  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11214  0B76  0022               	movlb	2	; select bank2
 11215  0B77  0842               	movf	exp@exponent^(0+256),w
 11216  0B78  0021               	movlb	1	; select bank1
 11217  0B79  00A8               	movwf	___awtoft@c^(0+128)
 11218  0B7A  31A6  26A9  318A   	fcall	___awtoft
 11219  0B7D  0021               	movlb	1	; select bank1
 11220  0B7E  0828               	movf	?___awtoft^(0+128),w
 11221  0B7F  00C8               	movwf	___ftsub@f2^(0+128)
 11222  0B80  0829               	movf	(?___awtoft+1)^(0+128),w
 11223  0B81  00C9               	movwf	(___ftsub@f2+1)^(0+128)
 11224  0B82  082A               	movf	(?___awtoft+2)^(0+128),w
 11225  0B83  00CA               	movwf	(___ftsub@f2+2)^(0+128)
 11226  0B84  0022               	movlb	2	; select bank2
 11227  0B85  0838               	movf	exp@x^(0+256),w
 11228  0B86  0021               	movlb	1	; select bank1
 11229  0B87  00CB               	movwf	___ftsub@f1^(0+128)
 11230  0B88  0022               	movlb	2	; select bank2
 11231  0B89  0839               	movf	(exp@x+1)^(0+256),w
 11232  0B8A  0021               	movlb	1	; select bank1
 11233  0B8B  00CC               	movwf	(___ftsub@f1+1)^(0+128)
 11234  0B8C  0022               	movlb	2	; select bank2
 11235  0B8D  083A               	movf	(exp@x+2)^(0+256),w
 11236  0B8E  0021               	movlb	1	; select bank1
 11237  0B8F  00CD               	movwf	(___ftsub@f1+2)^(0+128)
 11238  0B90  31A6  266B  318A   	fcall	___ftsub
 11239  0B93  0021               	movlb	1	; select bank1
 11240  0B94  0848               	movf	?___ftsub^(0+128),w
 11241  0B95  0022               	movlb	2	; select bank2
 11242  0B96  00B8               	movwf	exp@x^(0+256)
 11243  0B97  0021               	movlb	1	; select bank1
 11244  0B98  0849               	movf	(?___ftsub+1)^(0+128),w
 11245  0B99  0022               	movlb	2	; select bank2
 11246  0B9A  00B9               	movwf	(exp@x+1)^(0+256)
 11247  0B9B  0021               	movlb	1	; select bank1
 11248  0B9C  084A               	movf	(?___ftsub+2)^(0+128),w
 11249  0B9D  0022               	movlb	2	; select bank2
 11250  0B9E  00BA               	movwf	(exp@x+2)^(0+256)
 11251  0B9F  0838               	movf	exp@x^(0+256),w
 11252  0BA0  0021               	movlb	1	; select bank1
 11253  0BA1  00D8               	movwf	eval_poly@x^(0+128)
 11254  0BA2  0022               	movlb	2	; select bank2
 11255  0BA3  0839               	movf	(exp@x+1)^(0+256),w
 11256  0BA4  0021               	movlb	1	; select bank1
 11257  0BA5  00D9               	movwf	(eval_poly@x+1)^(0+128)
 11258  0BA6  0022               	movlb	2	; select bank2
 11259  0BA7  083A               	movf	(exp@x+2)^(0+256),w
 11260  0BA8  0021               	movlb	1	; select bank1
 11261  0BA9  00DA               	movwf	(eval_poly@x+2)^(0+128)
 11262  0BAA  3000               	movlw	low (exp@coeff| (0+32768))
 11263  0BAB  00DB               	movwf	eval_poly@d^(0+128)
 11264  0BAC  30A0               	movlw	high (exp@coeff| (0+32768))
 11265  0BAD  00DC               	movwf	(eval_poly@d^(0+128)+1)
 11266  0BAE  3009               	movlw	9
 11267  0BAF  00DD               	movwf	eval_poly@n^(0+128)
 11268  0BB0  3000               	movlw	0
 11269  0BB1  00DE               	movwf	(eval_poly@n^(0+128)+1)
 11270  0BB2  319E  263B  318A   	fcall	_eval_poly
 11271  0BB5  0021               	movlb	1	; select bank1
 11272  0BB6  0858               	movf	?_eval_poly^(0+128),w
 11273  0BB7  00E2               	movwf	ldexp@value^(0+128)
 11274  0BB8  0859               	movf	(?_eval_poly+1)^(0+128),w
 11275  0BB9  00E3               	movwf	(ldexp@value+1)^(0+128)
 11276  0BBA  085A               	movf	(?_eval_poly+2)^(0+128),w
 11277  0BBB  00E4               	movwf	(ldexp@value+2)^(0+128)
 11278  0BBC  0022               	movlb	2	; select bank2
 11279  0BBD  0843               	movf	(exp@exponent+1)^(0+256),w
 11280  0BBE  0021               	movlb	1	; select bank1
 11281  0BBF  00E6               	movwf	(ldexp@newexp+1)^(0+128)
 11282  0BC0  0022               	movlb	2	; select bank2
 11283  0BC1  0842               	movf	exp@exponent^(0+256),w
 11284  0BC2  0021               	movlb	1	; select bank1
 11285  0BC3  00E5               	movwf	ldexp@newexp^(0+128)
 11286  0BC4  3191  214B  318A   	fcall	_ldexp
 11287  0BC7  0021               	movlb	1	; select bank1
 11288  0BC8  0862               	movf	?_ldexp^(0+128),w
 11289  0BC9  0022               	movlb	2	; select bank2
 11290  0BCA  00B8               	movwf	exp@x^(0+256)
 11291  0BCB  0021               	movlb	1	; select bank1
 11292  0BCC  0863               	movf	(?_ldexp+1)^(0+128),w
 11293  0BCD  0022               	movlb	2	; select bank2
 11294  0BCE  00B9               	movwf	(exp@x+1)^(0+256)
 11295  0BCF  0021               	movlb	1	; select bank1
 11296  0BD0  0864               	movf	(?_ldexp+2)^(0+128),w
 11297  0BD1  0022               	movlb	2	; select bank2
 11298  0BD2  00BA               	movwf	(exp@x+2)^(0+256)
 11299  0BD3  0844               	movf	exp@sign^(0+256),w
 11300  0BD4  1903               	btfsc	3,2
 11301  0BD5  0008               	return
 11302  0BD6  30FF               	movlw	255
 11303  0BD7  00BF               	movwf	_exp$2426^(0+256)
 11304  0BD8  307F               	movlw	127
 11305  0BD9  00C0               	movwf	(_exp$2426+1)^(0+256)
 11306  0BDA  307F               	movlw	127
 11307  0BDB  00C1               	movwf	(_exp$2426+2)^(0+256)
 11308  0BDC  083A               	movf	(exp@x+2)^(0+256),w
 11309  0BDD  0641               	xorwf	(_exp$2426+2)^(0+256),w
 11310  0BDE  1D03               	skipz
 11311  0BDF  2BE6               	goto	u7895
 11312  0BE0  0839               	movf	(exp@x+1)^(0+256),w
 11313  0BE1  0640               	xorwf	(_exp$2426+1)^(0+256),w
 11314  0BE2  1D03               	skipz
 11315  0BE3  2BE6               	goto	u7895
 11316  0BE4  0838               	movf	exp@x^(0+256),w
 11317  0BE5  063F               	xorwf	_exp$2426^(0+256),w
 11318  0BE6                     u7895:	
 11319  0BE6  1D03               	skipz
 11320  0BE7  2BEF               	goto	l7497
 11321  0BE8  3000               	movlw	0
 11322  0BE9  00B8               	movwf	?_exp^(0+256)
 11323  0BEA  3000               	movlw	0
 11324  0BEB  00B9               	movwf	(?_exp+1)^(0+256)
 11325  0BEC  3000               	movlw	0
 11326  0BED  00BA               	movwf	(?_exp+2)^(0+256)
 11327  0BEE  0008               	return
 11328  0BEF                     l7497:	
 11329  0BEF  0838               	movf	exp@x^(0+256),w
 11330  0BF0  0021               	movlb	1	; select bank1
 11331  0BF1  00A8               	movwf	___ftdiv@f2^(0+128)
 11332  0BF2  0022               	movlb	2	; select bank2
 11333  0BF3  0839               	movf	(exp@x+1)^(0+256),w
 11334  0BF4  0021               	movlb	1	; select bank1
 11335  0BF5  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
 11336  0BF6  0022               	movlb	2	; select bank2
 11337  0BF7  083A               	movf	(exp@x+2)^(0+256),w
 11338  0BF8  0021               	movlb	1	; select bank1
 11339  0BF9  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
 11340  0BFA  3000               	movlw	0
 11341  0BFB  00AB               	movwf	___ftdiv@f1^(0+128)
 11342  0BFC  3080               	movlw	128
 11343  0BFD  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
 11344  0BFE  303F               	movlw	63
 11345  0BFF  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
 11346  0C00  3193  239D         	fcall	___ftdiv
 11347  0C02  0021               	movlb	1	; select bank1
 11348  0C03  0828               	movf	?___ftdiv^(0+128),w
 11349  0C04  0022               	movlb	2	; select bank2
 11350  0C05  00B8               	movwf	?_exp^(0+256)
 11351  0C06  0021               	movlb	1	; select bank1
 11352  0C07  0829               	movf	(?___ftdiv+1)^(0+128),w
 11353  0C08  0022               	movlb	2	; select bank2
 11354  0C09  00B9               	movwf	(?_exp+1)^(0+256)
 11355  0C0A  0021               	movlb	1	; select bank1
 11356  0C0B  082A               	movf	(?___ftdiv+2)^(0+128),w
 11357  0C0C  0022               	movlb	2	; select bank2
 11358  0C0D  00BA               	movwf	(?_exp+2)^(0+256)
 11359  0C0E  0008               	return
 11360  0C0F                     __end_of_exp:	
 11361                           
 11362                           	psect	text25
 11363  114B                     __ptext25:	
 11364 ;; *************** function _ldexp *****************
 11365 ;; Defined at:
 11366 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;  value           3   66[BANK1 ] unsigned char 
 11369 ;;  newexp          2   69[BANK1 ] int 
 11370 ;; Auto vars:     Size  Location     Type
 11371 ;;		None
 11372 ;; Return value:  Size  Location     Type
 11373 ;;                  3   66[BANK1 ] int 
 11374 ;; Registers used:
 11375 ;;		wreg, status,2, status,0, pclath, cstack
 11376 ;; Tracked objects:
 11377 ;;		On entry : 0/0
 11378 ;;		On exit  : 0/0
 11379 ;;		Unchanged: 0/0
 11380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11381 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11382 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11383 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11384 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11385 ;;Total ram usage:       10 bytes
 11386 ;; Hardware stack levels used:    1
 11387 ;; Hardware stack levels required when called:    4
 11388 ;; This function calls:
 11389 ;;		___ftge
 11390 ;;		___ftneg
 11391 ;; This function is called by:
 11392 ;;		_exp
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _ldexp
 11398  114B                     _ldexp:	
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 11402  114B  0021               	movlb	1	; select bank1
 11403  114C  0864               	movf	(ldexp@value+2)^(0+128),w
 11404  114D  0463               	iorwf	(ldexp@value+1)^(0+128),w
 11405  114E  0462               	iorwf	ldexp@value^(0+128),w
 11406  114F  1D03               	skipz
 11407  1150  2958               	goto	l7343
 11408  1151  3000               	movlw	0
 11409  1152  00E2               	movwf	?_ldexp^(0+128)
 11410  1153  3000               	movlw	0
 11411  1154  00E3               	movwf	(?_ldexp+1)^(0+128)
 11412  1155  3000               	movlw	0
 11413  1156  00E4               	movwf	(?_ldexp+2)^(0+128)
 11414  1157  0008               	return
 11415  1158                     l7343:	
 11416  1158  0864               	movf	(ldexp@value^(0+128)+2),w
 11417  1159  397F               	andlw	127
 11418  115A  00E7               	movwf	??_ldexp^(0+128)
 11419  115B  01E8               	clrf	(??_ldexp^(0+128)+1)
 11420  115C  35E7               	lslf	??_ldexp^(0+128),f
 11421  115D  0DE8               	rlf	(??_ldexp^(0+128)+1),f
 11422  115E  0867               	movf	??_ldexp^(0+128),w
 11423  115F  07E5               	addwf	ldexp@newexp^(0+128),f
 11424  1160  0868               	movf	(??_ldexp+1)^(0+128),w
 11425  1161  3DE6               	addwfc	(ldexp@newexp+1)^(0+128),f
 11426  1162  0D63               	rlf	(ldexp@value^(0+128)+1),w
 11427  1163  0D63               	rlf	(ldexp@value^(0+128)+1),w
 11428  1164  3901               	andlw	1
 11429  1165  00E7               	movwf	??_ldexp^(0+128)
 11430  1166  01E8               	clrf	(??_ldexp^(0+128)+1)
 11431  1167  0867               	movf	??_ldexp^(0+128),w
 11432  1168  07E5               	addwf	ldexp@newexp^(0+128),f
 11433  1169  0868               	movf	(??_ldexp+1)^(0+128),w
 11434  116A  3DE6               	addwfc	(ldexp@newexp+1)^(0+128),f
 11435  116B  1FE6               	btfss	(ldexp@newexp+1)^(0+128),7
 11436  116C  297A               	goto	l7353
 11437  116D  3022               	movlw	34
 11438  116E  0024               	movlb	4	; select bank4
 11439  116F  00D3               	movwf	_errno^(0+512)
 11440  1170  3000               	movlw	0
 11441  1171  00D4               	movwf	(_errno^(0+512)+1)
 11442  1172  3000               	movlw	0
 11443  1173  0021               	movlb	1	; select bank1
 11444  1174  00E2               	movwf	?_ldexp^(0+128)
 11445  1175  3000               	movlw	0
 11446  1176  00E3               	movwf	(?_ldexp+1)^(0+128)
 11447  1177  3000               	movlw	0
 11448  1178  00E4               	movwf	(?_ldexp+2)^(0+128)
 11449  1179  0008               	return
 11450  117A                     l7353:	
 11451  117A  0866               	movf	(ldexp@newexp+1)^(0+128),w
 11452  117B  3A80               	xorlw	128
 11453  117C  00E7               	movwf	??_ldexp^(0+128)
 11454  117D  3081               	movlw	129
 11455  117E  0267               	subwf	??_ldexp^(0+128),w
 11456  117F  1D03               	skipz
 11457  1180  2983               	goto	u7765
 11458  1181  3000               	movlw	0
 11459  1182  0265               	subwf	ldexp@newexp^(0+128),w
 11460  1183                     u7765:	
 11461  1183  1C03               	skipc
 11462  1184  29BB               	goto	l7377
 11463  1185  3022               	movlw	34
 11464  1186  0024               	movlb	4	; select bank4
 11465  1187  00D3               	movwf	_errno^(0+512)
 11466  1188  3000               	movlw	0
 11467  1189  00D4               	movwf	(_errno^(0+512)+1)
 11468  118A  0021               	movlb	1	; select bank1
 11469  118B  0862               	movf	ldexp@value^(0+128),w
 11470  118C  00A0               	movwf	___ftge@ff1^(0+128)
 11471  118D  0863               	movf	(ldexp@value+1)^(0+128),w
 11472  118E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11473  118F  0864               	movf	(ldexp@value+2)^(0+128),w
 11474  1190  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11475  1191  3000               	movlw	0
 11476  1192  00A3               	movwf	___ftge@ff2^(0+128)
 11477  1193  3000               	movlw	0
 11478  1194  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11479  1195  3000               	movlw	0
 11480  1196  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11481  1197  3198  20B8  3191   	fcall	___ftge
 11482  119A  1803               	btfsc	3,0
 11483  119B  29B3               	goto	l7373
 11484  119C  30FF               	movlw	255
 11485  119D  0021               	movlb	1	; select bank1
 11486  119E  00E9               	movwf	_ldexp$2458^(0+128)
 11487  119F  307F               	movlw	127
 11488  11A0  00EA               	movwf	(_ldexp$2458+1)^(0+128)
 11489  11A1  307F               	movlw	127
 11490  11A2  00EB               	movwf	(_ldexp$2458+2)^(0+128)
 11491  11A3  0869               	movf	_ldexp$2458^(0+128),w
 11492  11A4  00B8               	movwf	___ftneg@f1^(0+128)
 11493  11A5  086A               	movf	(_ldexp$2458+1)^(0+128),w
 11494  11A6  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 11495  11A7  086B               	movf	(_ldexp$2458+2)^(0+128),w
 11496  11A8  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 11497  11A9  31A5  2566         	fcall	___ftneg
 11498  11AB  0021               	movlb	1	; select bank1
 11499  11AC  0838               	movf	?___ftneg^(0+128),w
 11500  11AD  00E2               	movwf	?_ldexp^(0+128)
 11501  11AE  0839               	movf	(?___ftneg+1)^(0+128),w
 11502  11AF  00E3               	movwf	(?_ldexp+1)^(0+128)
 11503  11B0  083A               	movf	(?___ftneg+2)^(0+128),w
 11504  11B1  00E4               	movwf	(?_ldexp+2)^(0+128)
 11505  11B2  0008               	return
 11506  11B3                     l7373:	
 11507  11B3  30FF               	movlw	255
 11508  11B4  0021               	movlb	1	; select bank1
 11509  11B5  00E2               	movwf	?_ldexp^(0+128)
 11510  11B6  307F               	movlw	127
 11511  11B7  00E3               	movwf	(?_ldexp+1)^(0+128)
 11512  11B8  307F               	movlw	127
 11513  11B9  00E4               	movwf	(?_ldexp+2)^(0+128)
 11514  11BA  0008               	return
 11515  11BB                     l7377:	
 11516  11BB  0021               	movlb	1	; select bank1
 11517  11BC  0866               	movf	(ldexp@newexp+1)^(0+128),w
 11518  11BD  00E8               	movwf	(??_ldexp^(0+128)+1)
 11519  11BE  0865               	movf	ldexp@newexp^(0+128),w
 11520  11BF  00E7               	movwf	??_ldexp^(0+128)
 11521  11C0  0D68               	rlf	(??_ldexp^(0+128)+1),w
 11522  11C1  0CE8               	rrf	(??_ldexp^(0+128)+1),f
 11523  11C2  0CE7               	rrf	??_ldexp^(0+128),f
 11524  11C3  0864               	movf	(ldexp@value^(0+128)+2),w
 11525  11C4  0667               	xorwf	??_ldexp^(0+128),w
 11526  11C5  3980               	andlw	-128
 11527  11C6  0667               	xorwf	??_ldexp^(0+128),w
 11528  11C7  00E4               	movwf	(ldexp@value^(0+128)+2)
 11529  11C8  0865               	movf	ldexp@newexp^(0+128),w
 11530  11C9  3901               	andlw	1
 11531  11CA  00E7               	movwf	??_ldexp^(0+128)
 11532  11CB  0CE7               	rrf	??_ldexp^(0+128),f
 11533  11CC  0CE7               	rrf	??_ldexp^(0+128),f
 11534  11CD  0863               	movf	(ldexp@value^(0+128)+1),w
 11535  11CE  0667               	xorwf	??_ldexp^(0+128),w
 11536  11CF  397F               	andlw	-129
 11537  11D0  0667               	xorwf	??_ldexp^(0+128),w
 11538  11D1  00E3               	movwf	(ldexp@value^(0+128)+1)
 11539  11D2  0008               	return
 11540  11D3                     __end_of_ldexp:	
 11541                           
 11542                           	psect	text26
 11543  14F6                     __ptext26:	
 11544 ;; *************** function _floor *****************
 11545 ;; Defined at:
 11546 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 11547 ;; Parameters:    Size  Location     Type
 11548 ;;  x               3   16[BANK2 ] int 
 11549 ;; Auto vars:     Size  Location     Type
 11550 ;;  i               3   19[BANK2 ] int 
 11551 ;;  expon           2   22[BANK2 ] int 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;                  3   16[BANK2 ] int 
 11554 ;; Registers used:
 11555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11561 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11562 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11564 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11565 ;;Total ram usage:        8 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    5
 11568 ;; This function calls:
 11569 ;;		___altoft
 11570 ;;		___ftadd
 11571 ;;		___ftge
 11572 ;;		___fttol
 11573 ;;		_frexp
 11574 ;; This function is called by:
 11575 ;;		_exp
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           
 11580                           ;psect for function _floor
 11581  14F6                     _floor:	
 11582                           
 11583                           ;incstack = 0
 11584                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11585  14F6  0022               	movlb	2	; select bank2
 11586  14F7  0830               	movf	floor@x^(0+256),w
 11587  14F8  0021               	movlb	1	; select bank1
 11588  14F9  00A0               	movwf	frexp@value^(0+128)
 11589  14FA  0022               	movlb	2	; select bank2
 11590  14FB  0831               	movf	(floor@x+1)^(0+256),w
 11591  14FC  0021               	movlb	1	; select bank1
 11592  14FD  00A1               	movwf	(frexp@value+1)^(0+128)
 11593  14FE  0022               	movlb	2	; select bank2
 11594  14FF  0832               	movf	(floor@x+2)^(0+256),w
 11595  1500  0021               	movlb	1	; select bank1
 11596  1501  00A2               	movwf	(frexp@value+2)^(0+128)
 11597  1502  3036               	movlw	low floor@expon
 11598  1503  00A3               	movwf	frexp@eptr^(0+128)
 11599  1504  3001               	movlw	high floor@expon
 11600  1505  00A4               	movwf	(frexp@eptr+1)^(0+128)
 11601  1506  319A  2226  3194   	fcall	_frexp
 11602  1509  0022               	movlb	2	; select bank2
 11603  150A  1FB7               	btfss	(floor@expon+1)^(0+256),7
 11604  150B  2D32               	goto	l7313
 11605  150C  0830               	movf	floor@x^(0+256),w
 11606  150D  0021               	movlb	1	; select bank1
 11607  150E  00A0               	movwf	___ftge@ff1^(0+128)
 11608  150F  0022               	movlb	2	; select bank2
 11609  1510  0831               	movf	(floor@x+1)^(0+256),w
 11610  1511  0021               	movlb	1	; select bank1
 11611  1512  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11612  1513  0022               	movlb	2	; select bank2
 11613  1514  0832               	movf	(floor@x+2)^(0+256),w
 11614  1515  0021               	movlb	1	; select bank1
 11615  1516  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11616  1517  3000               	movlw	0
 11617  1518  00A3               	movwf	___ftge@ff2^(0+128)
 11618  1519  3000               	movlw	0
 11619  151A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11620  151B  3000               	movlw	0
 11621  151C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11622  151D  3198  20B8  3194   	fcall	___ftge
 11623  1520  1803               	btfsc	3,0
 11624  1521  2D2A               	goto	l7309
 11625  1522  3000               	movlw	0
 11626  1523  0022               	movlb	2	; select bank2
 11627  1524  00B0               	movwf	?_floor^(0+256)
 11628  1525  3080               	movlw	128
 11629  1526  00B1               	movwf	(?_floor+1)^(0+256)
 11630  1527  30BF               	movlw	191
 11631  1528  00B2               	movwf	(?_floor+2)^(0+256)
 11632  1529  0008               	return
 11633  152A                     l7309:	
 11634  152A  3000               	movlw	0
 11635  152B  0022               	movlb	2	; select bank2
 11636  152C  00B0               	movwf	?_floor^(0+256)
 11637  152D  3000               	movlw	0
 11638  152E  00B1               	movwf	(?_floor+1)^(0+256)
 11639  152F  3000               	movlw	0
 11640  1530  00B2               	movwf	(?_floor+2)^(0+256)
 11641  1531  0008               	return
 11642  1532                     l7313:	
 11643  1532  3000               	movlw	0
 11644  1533  0237               	subwf	(floor@expon+1)^(0+256),w
 11645  1534  3015               	movlw	21
 11646  1535  1903               	skipnz
 11647  1536  0236               	subwf	floor@expon^(0+256),w
 11648  1537  1803               	btfsc	3,0
 11649  1538  0008               	return
 11650  1539  0830               	movf	floor@x^(0+256),w
 11651  153A  0021               	movlb	1	; select bank1
 11652  153B  00EA               	movwf	___fttol@f1^(0+128)
 11653  153C  0022               	movlb	2	; select bank2
 11654  153D  0831               	movf	(floor@x+1)^(0+256),w
 11655  153E  0021               	movlb	1	; select bank1
 11656  153F  00EB               	movwf	(___fttol@f1+1)^(0+128)
 11657  1540  0022               	movlb	2	; select bank2
 11658  1541  0832               	movf	(floor@x+2)^(0+256),w
 11659  1542  0021               	movlb	1	; select bank1
 11660  1543  00EC               	movwf	(___fttol@f1+2)^(0+128)
 11661  1544  3192  22F8  3194   	fcall	___fttol
 11662  1547  0021               	movlb	1	; select bank1
 11663  1548  086D               	movf	(?___fttol+3)^(0+128),w
 11664  1549  0022               	movlb	2	; select bank2
 11665  154A  00AD               	movwf	(___altoft@c+3)^(0+256)
 11666  154B  0021               	movlb	1	; select bank1
 11667  154C  086C               	movf	(?___fttol+2)^(0+128),w
 11668  154D  0022               	movlb	2	; select bank2
 11669  154E  00AC               	movwf	(___altoft@c+2)^(0+256)
 11670  154F  0021               	movlb	1	; select bank1
 11671  1550  086B               	movf	(?___fttol+1)^(0+128),w
 11672  1551  0022               	movlb	2	; select bank2
 11673  1552  00AB               	movwf	(___altoft@c+1)^(0+256)
 11674  1553  0021               	movlb	1	; select bank1
 11675  1554  086A               	movf	?___fttol^(0+128),w
 11676  1555  0022               	movlb	2	; select bank2
 11677  1556  00AA               	movwf	___altoft@c^(0+256)
 11678  1557  319B  23FC  3194   	fcall	___altoft
 11679  155A  0022               	movlb	2	; select bank2
 11680  155B  082A               	movf	?___altoft^(0+256),w
 11681  155C  00B3               	movwf	floor@i^(0+256)
 11682  155D  082B               	movf	(?___altoft+1)^(0+256),w
 11683  155E  00B4               	movwf	(floor@i+1)^(0+256)
 11684  155F  082C               	movf	(?___altoft+2)^(0+256),w
 11685  1560  00B5               	movwf	(floor@i+2)^(0+256)
 11686  1561  0830               	movf	floor@x^(0+256),w
 11687  1562  0021               	movlb	1	; select bank1
 11688  1563  00A0               	movwf	___ftge@ff1^(0+128)
 11689  1564  0022               	movlb	2	; select bank2
 11690  1565  0831               	movf	(floor@x+1)^(0+256),w
 11691  1566  0021               	movlb	1	; select bank1
 11692  1567  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11693  1568  0022               	movlb	2	; select bank2
 11694  1569  0832               	movf	(floor@x+2)^(0+256),w
 11695  156A  0021               	movlb	1	; select bank1
 11696  156B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11697  156C  0022               	movlb	2	; select bank2
 11698  156D  0833               	movf	floor@i^(0+256),w
 11699  156E  0021               	movlb	1	; select bank1
 11700  156F  00A3               	movwf	___ftge@ff2^(0+128)
 11701  1570  0022               	movlb	2	; select bank2
 11702  1571  0834               	movf	(floor@i+1)^(0+256),w
 11703  1572  0021               	movlb	1	; select bank1
 11704  1573  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11705  1574  0022               	movlb	2	; select bank2
 11706  1575  0835               	movf	(floor@i+2)^(0+256),w
 11707  1576  0021               	movlb	1	; select bank1
 11708  1577  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11709  1578  3198  20B8  3194   	fcall	___ftge
 11710  157B  1803               	btfsc	3,0
 11711  157C  2D9F               	goto	l7323
 11712  157D  3000               	movlw	0
 11713  157E  0021               	movlb	1	; select bank1
 11714  157F  00BB               	movwf	___ftadd@f1^(0+128)
 11715  1580  3080               	movlw	128
 11716  1581  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 11717  1582  30BF               	movlw	191
 11718  1583  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 11719  1584  0022               	movlb	2	; select bank2
 11720  1585  0833               	movf	floor@i^(0+256),w
 11721  1586  0021               	movlb	1	; select bank1
 11722  1587  00BE               	movwf	___ftadd@f2^(0+128)
 11723  1588  0022               	movlb	2	; select bank2
 11724  1589  0834               	movf	(floor@i+1)^(0+256),w
 11725  158A  0021               	movlb	1	; select bank1
 11726  158B  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 11727  158C  0022               	movlb	2	; select bank2
 11728  158D  0835               	movf	(floor@i+2)^(0+256),w
 11729  158E  0021               	movlb	1	; select bank1
 11730  158F  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 11731  1590  3188  2078         	fcall	___ftadd
 11732  1592  0021               	movlb	1	; select bank1
 11733  1593  083B               	movf	?___ftadd^(0+128),w
 11734  1594  0022               	movlb	2	; select bank2
 11735  1595  00B0               	movwf	?_floor^(0+256)
 11736  1596  0021               	movlb	1	; select bank1
 11737  1597  083C               	movf	(?___ftadd+1)^(0+128),w
 11738  1598  0022               	movlb	2	; select bank2
 11739  1599  00B1               	movwf	(?_floor+1)^(0+256)
 11740  159A  0021               	movlb	1	; select bank1
 11741  159B  083D               	movf	(?___ftadd+2)^(0+128),w
 11742  159C  0022               	movlb	2	; select bank2
 11743  159D  00B2               	movwf	(?_floor+2)^(0+256)
 11744  159E  0008               	return
 11745  159F                     l7323:	
 11746  159F  0022               	movlb	2	; select bank2
 11747  15A0  0833               	movf	floor@i^(0+256),w
 11748  15A1  00B0               	movwf	?_floor^(0+256)
 11749  15A2  0834               	movf	(floor@i+1)^(0+256),w
 11750  15A3  00B1               	movwf	(?_floor+1)^(0+256)
 11751  15A4  0835               	movf	(floor@i+2)^(0+256),w
 11752  15A5  00B2               	movwf	(?_floor+2)^(0+256)
 11753  15A6  0008               	return
 11754  15A7                     __end_of_floor:	
 11755                           
 11756                           	psect	text27
 11757  1A26                     __ptext27:	
 11758 ;; *************** function _frexp *****************
 11759 ;; Defined at:
 11760 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;  value           3    0[BANK1 ] int 
 11763 ;;  eptr            2    3[BANK1 ] PTR int 
 11764 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 11765 ;; Auto vars:     Size  Location     Type
 11766 ;;		None
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  3    0[BANK1 ] PTR int 
 11769 ;; Registers used:
 11770 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11776 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11778 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11779 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11780 ;;Total ram usage:        7 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:    3
 11783 ;; This function calls:
 11784 ;;		Nothing
 11785 ;; This function is called by:
 11786 ;;		_trunc
 11787 ;;		_floor
 11788 ;;		_log
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           
 11793                           ;psect for function _frexp
 11794  1A26                     _frexp:	
 11795                           
 11796                           ;incstack = 0
 11797                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 11798  1A26  0021               	movlb	1	; select bank1
 11799  1A27  0822               	movf	(frexp@value+2)^(0+128),w
 11800  1A28  0421               	iorwf	(frexp@value+1)^(0+128),w
 11801  1A29  0420               	iorwf	frexp@value^(0+128),w
 11802  1A2A  1D03               	skipz
 11803  1A2B  2A3A               	goto	l7175
 11804  1A2C  0823               	movf	frexp@eptr^(0+128),w
 11805  1A2D  0086               	movwf	6
 11806  1A2E  0824               	movf	(frexp@eptr+1)^(0+128),w
 11807  1A2F  0087               	movwf	7
 11808  1A30  3000               	movlw	0
 11809  1A31  3FC0               	movwi [0]fsr1
 11810  1A32  3FC1               	movwi [1]fsr1
 11811  1A33  3000               	movlw	0
 11812  1A34  00A0               	movwf	?_frexp^(0+128)
 11813  1A35  3000               	movlw	0
 11814  1A36  00A1               	movwf	(?_frexp+1)^(0+128)
 11815  1A37  3000               	movlw	0
 11816  1A38  00A2               	movwf	(?_frexp+2)^(0+128)
 11817  1A39  0008               	return
 11818  1A3A                     l7175:	
 11819  1A3A  0822               	movf	(frexp@value^(0+128)+2),w
 11820  1A3B  397F               	andlw	127
 11821  1A3C  00A5               	movwf	??_frexp^(0+128)
 11822  1A3D  01A6               	clrf	(??_frexp^(0+128)+1)
 11823  1A3E  35A5               	lslf	??_frexp^(0+128),f
 11824  1A3F  0DA6               	rlf	(??_frexp^(0+128)+1),f
 11825  1A40  0823               	movf	frexp@eptr^(0+128),w
 11826  1A41  0086               	movwf	6
 11827  1A42  0824               	movf	(frexp@eptr+1)^(0+128),w
 11828  1A43  0087               	movwf	7
 11829  1A44  0825               	movf	??_frexp^(0+128),w
 11830  1A45  3FC0               	movwi [0]fsr1
 11831  1A46  0826               	movf	(??_frexp+1)^(0+128),w
 11832  1A47  3FC1               	movwi [1]fsr1
 11833  1A48  0D21               	rlf	(frexp@value^(0+128)+1),w
 11834  1A49  0D21               	rlf	(frexp@value^(0+128)+1),w
 11835  1A4A  3901               	andlw	1
 11836  1A4B  00A5               	movwf	??_frexp^(0+128)
 11837  1A4C  01A6               	clrf	(??_frexp^(0+128)+1)
 11838  1A4D  0823               	movf	frexp@eptr^(0+128),w
 11839  1A4E  0086               	movwf	6
 11840  1A4F  0824               	movf	(frexp@eptr+1)^(0+128),w
 11841  1A50  0087               	movwf	7
 11842  1A51  0825               	movf	??_frexp^(0+128),w
 11843  1A52  0481               	iorwf	1,f
 11844  1A53  3141               	addfsr 1,1
 11845  1A54  0826               	movf	(??_frexp+1)^(0+128),w
 11846  1A55  0481               	iorwf	1,f
 11847  1A56  0823               	movf	frexp@eptr^(0+128),w
 11848  1A57  0086               	movwf	6
 11849  1A58  0824               	movf	(frexp@eptr+1)^(0+128),w
 11850  1A59  0087               	movwf	7
 11851  1A5A  3082               	movlw	130
 11852  1A5B  0781               	addwf	1,f
 11853  1A5C  3141               	addfsr 1,1
 11854  1A5D  30FF               	movlw	255
 11855  1A5E  3D81               	addwfc	1,f
 11856  1A5F  317F               	addfsr 1,-1
 11857  1A60  0822               	movf	(frexp@value^(0+128)+2),w
 11858  1A61  3980               	andlw	-128
 11859  1A62  383F               	iorlw	63
 11860  1A63  00A2               	movwf	(frexp@value^(0+128)+2)
 11861  1A64  13A1               	bcf	(frexp@value^(0+128)+1),7
 11862  1A65  0008               	return
 11863  1A66                     __end_of_frexp:	
 11864                           
 11865                           	psect	text28
 11866  12F8                     __ptext28:	
 11867 ;; *************** function ___fttol *****************
 11868 ;; Defined at:
 11869 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 11870 ;; Parameters:    Size  Location     Type
 11871 ;;  f1              3   74[BANK1 ] float 
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;  lval            4    5[BANK2 ] unsigned long 
 11874 ;;  exp1            1    9[BANK2 ] unsigned char 
 11875 ;;  sign1           1    4[BANK2 ] unsigned char 
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  4   74[BANK1 ] long 
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11885 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11886 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11887 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11888 ;;      Totals:         0       0       4      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11889 ;;Total ram usage:       14 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    3
 11892 ;; This function calls:
 11893 ;;		Nothing
 11894 ;; This function is called by:
 11895 ;;		_main
 11896 ;;		_set_subdivision
 11897 ;;		_scaleA100kPot
 11898 ;;		_scaleiA100kPot
 11899 ;;		_scaleA10kPot
 11900 ;;		_scaleiA10kPot
 11901 ;;		_pow
 11902 ;;		_trunc
 11903 ;;		_exp
 11904 ;;		_floor
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           
 11909                           ;psect for function ___fttol
 11910  12F8                     ___fttol:	
 11911                           
 11912                           ;incstack = 0
 11913                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11914  12F8  0021               	movlb	1	; select bank1
 11915  12F9  086A               	movf	___fttol@f1^(0+128),w
 11916  12FA  0022               	movlb	2	; select bank2
 11917  12FB  00A0               	movwf	??___fttol^(0+256)
 11918  12FC  0021               	movlb	1	; select bank1
 11919  12FD  086B               	movf	(___fttol@f1+1)^(0+128),w
 11920  12FE  0022               	movlb	2	; select bank2
 11921  12FF  00A1               	movwf	(??___fttol^(0+256)+1)
 11922  1300  0021               	movlb	1	; select bank1
 11923  1301  086C               	movf	(___fttol@f1+2)^(0+128),w
 11924  1302  0022               	movlb	2	; select bank2
 11925  1303  00A2               	movwf	(??___fttol^(0+256)+2)
 11926  1304  1003               	clrc
 11927  1305  0D21               	rlf	(??___fttol^(0+256)+1),w
 11928  1306  0D22               	rlf	(??___fttol^(0+256)+2),w
 11929  1307  00A3               	movwf	(??___fttol+3)^(0+256)
 11930  1308  0823               	movf	(??___fttol+3)^(0+256),w
 11931  1309  00A9               	movwf	___fttol@exp1^(0+256)
 11932  130A  0829               	movf	___fttol@exp1^(0+256),w
 11933  130B  1D03               	btfss	3,2
 11934  130C  2B17               	goto	l7131
 11935  130D  3000               	movlw	0
 11936  130E  0021               	movlb	1	; select bank1
 11937  130F  00ED               	movwf	(?___fttol+3)^(0+128)
 11938  1310  3000               	movlw	0
 11939  1311  00EC               	movwf	(?___fttol+2)^(0+128)
 11940  1312  3000               	movlw	0
 11941  1313  00EB               	movwf	(?___fttol+1)^(0+128)
 11942  1314  3000               	movlw	0
 11943  1315  00EA               	movwf	?___fttol^(0+128)
 11944  1316  0008               	return
 11945  1317                     l7131:	
 11946  1317  0021               	movlb	1	; select bank1
 11947  1318  086A               	movf	___fttol@f1^(0+128),w
 11948  1319  0022               	movlb	2	; select bank2
 11949  131A  00A0               	movwf	??___fttol^(0+256)
 11950  131B  0021               	movlb	1	; select bank1
 11951  131C  086B               	movf	(___fttol@f1+1)^(0+128),w
 11952  131D  0022               	movlb	2	; select bank2
 11953  131E  00A1               	movwf	(??___fttol^(0+256)+1)
 11954  131F  0021               	movlb	1	; select bank1
 11955  1320  086C               	movf	(___fttol@f1+2)^(0+128),w
 11956  1321  0022               	movlb	2	; select bank2
 11957  1322  00A2               	movwf	(??___fttol^(0+256)+2)
 11958  1323  3017               	movlw	23
 11959  1324                     u7445:	
 11960  1324  36A2               	lsrf	(??___fttol^(0+256)+2),f
 11961  1325  0CA1               	rrf	(??___fttol^(0+256)+1),f
 11962  1326  0CA0               	rrf	??___fttol^(0+256),f
 11963  1327  0B89               	decfsz	9,f
 11964  1328  2B24               	goto	u7445
 11965  1329  0820               	movf	??___fttol^(0+256),w
 11966  132A  00A3               	movwf	(??___fttol+3)^(0+256)
 11967  132B  0823               	movf	(??___fttol+3)^(0+256),w
 11968  132C  00A4               	movwf	___fttol@sign1^(0+256)
 11969  132D  0021               	movlb	1	; select bank1
 11970  132E  17EB               	bsf	(___fttol@f1^(0+128)+1),7
 11971  132F  30FF               	movlw	255
 11972  1330  05EA               	andwf	___fttol@f1^(0+128),f
 11973  1331  30FF               	movlw	255
 11974  1332  05EB               	andwf	(___fttol@f1+1)^(0+128),f
 11975  1333  3000               	movlw	0
 11976  1334  05EC               	andwf	(___fttol@f1+2)^(0+128),f
 11977  1335  086A               	movf	___fttol@f1^(0+128),w
 11978  1336  0022               	movlb	2	; select bank2
 11979  1337  00A5               	movwf	___fttol@lval^(0+256)
 11980  1338  0021               	movlb	1	; select bank1
 11981  1339  086B               	movf	(___fttol@f1+1)^(0+128),w
 11982  133A  0022               	movlb	2	; select bank2
 11983  133B  00A6               	movwf	(___fttol@lval^(0+256)+1)
 11984  133C  0021               	movlb	1	; select bank1
 11985  133D  086C               	movf	(___fttol@f1+2)^(0+128),w
 11986  133E  0022               	movlb	2	; select bank2
 11987  133F  00A7               	movwf	(___fttol@lval^(0+256)+2)
 11988  1340  01A8               	clrf	(___fttol@lval^(0+256)+3)
 11989  1341  308E               	movlw	142
 11990  1342  02A9               	subwf	___fttol@exp1^(0+256),f
 11991  1343  1FA9               	btfss	___fttol@exp1^(0+256),7
 11992  1344  2B63               	goto	l7151
 11993  1345  0829               	movf	___fttol@exp1^(0+256),w
 11994  1346  3A80               	xorlw	128
 11995  1347  3E8F               	addlw	143
 11996  1348  1803               	skipnc
 11997  1349  2B54               	goto	l7149
 11998  134A  3000               	movlw	0
 11999  134B  0021               	movlb	1	; select bank1
 12000  134C  00ED               	movwf	(?___fttol+3)^(0+128)
 12001  134D  3000               	movlw	0
 12002  134E  00EC               	movwf	(?___fttol+2)^(0+128)
 12003  134F  3000               	movlw	0
 12004  1350  00EB               	movwf	(?___fttol+1)^(0+128)
 12005  1351  3000               	movlw	0
 12006  1352  00EA               	movwf	?___fttol^(0+128)
 12007  1353  0008               	return
 12008  1354                     l7149:	
 12009  1354  3001               	movlw	1
 12010  1355                     u7475:	
 12011  1355  0022               	movlb	2	; select bank2
 12012  1356  36A8               	lsrf	(___fttol@lval+3)^(0+256),f
 12013  1357  0CA7               	rrf	(___fttol@lval+2)^(0+256),f
 12014  1358  0CA6               	rrf	(___fttol@lval+1)^(0+256),f
 12015  1359  0CA5               	rrf	___fttol@lval^(0+256),f
 12016  135A  0B89               	decfsz	9,f
 12017  135B  2B55               	goto	u7475
 12018  135C  3001               	movlw	1
 12019  135D  00A0               	movwf	??___fttol^(0+256)
 12020  135E  0820               	movf	??___fttol^(0+256),w
 12021  135F  07A9               	addwf	___fttol@exp1^(0+256),f
 12022  1360  1903               	btfsc	3,2
 12023  1361  2B7F               	goto	l7159
 12024  1362  2B54               	goto	l7149
 12025  1363                     l7151:	
 12026  1363  3018               	movlw	24
 12027  1364  0229               	subwf	___fttol@exp1^(0+256),w
 12028  1365  1C03               	skipc
 12029  1366  2B7B               	goto	l2001
 12030  1367  3000               	movlw	0
 12031  1368  0021               	movlb	1	; select bank1
 12032  1369  00ED               	movwf	(?___fttol+3)^(0+128)
 12033  136A  3000               	movlw	0
 12034  136B  00EC               	movwf	(?___fttol+2)^(0+128)
 12035  136C  3000               	movlw	0
 12036  136D  00EB               	movwf	(?___fttol+1)^(0+128)
 12037  136E  3000               	movlw	0
 12038  136F  00EA               	movwf	?___fttol^(0+128)
 12039  1370  0008               	return
 12040  1371                     l7157:	
 12041  1371  3001               	movlw	1
 12042  1372                     u7505:	
 12043  1372  0022               	movlb	2	; select bank2
 12044  1373  35A5               	lslf	___fttol@lval^(0+256),f
 12045  1374  0DA6               	rlf	(___fttol@lval+1)^(0+256),f
 12046  1375  0DA7               	rlf	(___fttol@lval+2)^(0+256),f
 12047  1376  0DA8               	rlf	(___fttol@lval+3)^(0+256),f
 12048  1377  0B89               	decfsz	9,f
 12049  1378  2B72               	goto	u7505
 12050  1379  3001               	movlw	1
 12051  137A  02A9               	subwf	___fttol@exp1^(0+256),f
 12052  137B                     l2001:	
 12053  137B  0022               	movlb	2	; select bank2
 12054  137C  0829               	movf	___fttol@exp1^(0+256),w
 12055  137D  1D03               	btfss	3,2
 12056  137E  2B71               	goto	l7157
 12057  137F                     l7159:	
 12058  137F  0824               	movf	___fttol@sign1^(0+256),w
 12059  1380  1903               	btfsc	3,2
 12060  1381  2B8D               	goto	l7163
 12061  1382  09A5               	comf	___fttol@lval^(0+256),f
 12062  1383  09A6               	comf	(___fttol@lval+1)^(0+256),f
 12063  1384  09A7               	comf	(___fttol@lval+2)^(0+256),f
 12064  1385  09A8               	comf	(___fttol@lval+3)^(0+256),f
 12065  1386  0AA5               	incf	___fttol@lval^(0+256),f
 12066  1387  1903               	skipnz
 12067  1388  0AA6               	incf	(___fttol@lval+1)^(0+256),f
 12068  1389  1903               	skipnz
 12069  138A  0AA7               	incf	(___fttol@lval+2)^(0+256),f
 12070  138B  1903               	skipnz
 12071  138C  0AA8               	incf	(___fttol@lval+3)^(0+256),f
 12072  138D                     l7163:	
 12073  138D  0828               	movf	(___fttol@lval+3)^(0+256),w
 12074  138E  0021               	movlb	1	; select bank1
 12075  138F  00ED               	movwf	(?___fttol+3)^(0+128)
 12076  1390  0022               	movlb	2	; select bank2
 12077  1391  0827               	movf	(___fttol@lval+2)^(0+256),w
 12078  1392  0021               	movlb	1	; select bank1
 12079  1393  00EC               	movwf	(?___fttol+2)^(0+128)
 12080  1394  0022               	movlb	2	; select bank2
 12081  1395  0826               	movf	(___fttol@lval+1)^(0+256),w
 12082  1396  0021               	movlb	1	; select bank1
 12083  1397  00EB               	movwf	(?___fttol+1)^(0+128)
 12084  1398  0022               	movlb	2	; select bank2
 12085  1399  0825               	movf	___fttol@lval^(0+256),w
 12086  139A  0021               	movlb	1	; select bank1
 12087  139B  00EA               	movwf	?___fttol^(0+128)
 12088  139C  0008               	return
 12089  139D                     __end_of___fttol:	
 12090                           
 12091                           	psect	text29
 12092  18B8                     __ptext29:	
 12093 ;; *************** function ___ftge *****************
 12094 ;; Defined at:
 12095 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;  ff1             3    0[BANK1 ] float 
 12098 ;;  ff2             3    3[BANK1 ] float 
 12099 ;; Auto vars:     Size  Location     Type
 12100 ;;		None
 12101 ;; Return value:  Size  Location     Type
 12102 ;;		None               void
 12103 ;; Registers used:
 12104 ;;		wreg, status,2, status,0
 12105 ;; Tracked objects:
 12106 ;;		On entry : 0/0
 12107 ;;		On exit  : 0/0
 12108 ;;		Unchanged: 0/0
 12109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12110 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12112 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12113 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12114 ;;Total ram usage:        9 bytes
 12115 ;; Hardware stack levels used:    1
 12116 ;; Hardware stack levels required when called:    3
 12117 ;; This function calls:
 12118 ;;		Nothing
 12119 ;; This function is called by:
 12120 ;;		_pow
 12121 ;;		_exp
 12122 ;;		_floor
 12123 ;;		_ldexp
 12124 ;;		_log
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           
 12129                           ;psect for function ___ftge
 12130  18B8                     ___ftge:	
 12131                           
 12132                           ;incstack = 0
 12133                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 12134  18B8  0021               	movlb	1	; select bank1
 12135  18B9  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 12136  18BA  28CF               	goto	l7051
 12137  18BB  0920               	comf	___ftge@ff1^(0+128),w
 12138  18BC  00A6               	movwf	??___ftge^(0+128)
 12139  18BD  0921               	comf	(___ftge@ff1+1)^(0+128),w
 12140  18BE  00A7               	movwf	(??___ftge^(0+128)+1)
 12141  18BF  0922               	comf	(___ftge@ff1+2)^(0+128),w
 12142  18C0  00A8               	movwf	(??___ftge^(0+128)+2)
 12143  18C1  0AA6               	incf	??___ftge^(0+128),f
 12144  18C2  1903               	skipnz
 12145  18C3  0AA7               	incf	(??___ftge^(0+128)+1),f
 12146  18C4  1903               	skipnz
 12147  18C5  0AA8               	incf	(??___ftge^(0+128)+2),f
 12148  18C6  3000               	movlw	0
 12149  18C7  0726               	addwf	??___ftge^(0+128),w
 12150  18C8  00A0               	movwf	___ftge@ff1^(0+128)
 12151  18C9  3000               	movlw	0
 12152  18CA  3D27               	addwfc	(??___ftge+1)^(0+128),w
 12153  18CB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12154  18CC  3080               	movlw	128
 12155  18CD  3D28               	addwfc	(??___ftge+2)^(0+128),w
 12156  18CE  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12157  18CF                     l7051:	
 12158  18CF  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 12159  18D0  28E5               	goto	l7055
 12160  18D1  0923               	comf	___ftge@ff2^(0+128),w
 12161  18D2  00A6               	movwf	??___ftge^(0+128)
 12162  18D3  0924               	comf	(___ftge@ff2+1)^(0+128),w
 12163  18D4  00A7               	movwf	(??___ftge^(0+128)+1)
 12164  18D5  0925               	comf	(___ftge@ff2+2)^(0+128),w
 12165  18D6  00A8               	movwf	(??___ftge^(0+128)+2)
 12166  18D7  0AA6               	incf	??___ftge^(0+128),f
 12167  18D8  1903               	skipnz
 12168  18D9  0AA7               	incf	(??___ftge^(0+128)+1),f
 12169  18DA  1903               	skipnz
 12170  18DB  0AA8               	incf	(??___ftge^(0+128)+2),f
 12171  18DC  3000               	movlw	0
 12172  18DD  0726               	addwf	??___ftge^(0+128),w
 12173  18DE  00A3               	movwf	___ftge@ff2^(0+128)
 12174  18DF  3000               	movlw	0
 12175  18E0  3D27               	addwfc	(??___ftge+1)^(0+128),w
 12176  18E1  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12177  18E2  3080               	movlw	128
 12178  18E3  3D28               	addwfc	(??___ftge+2)^(0+128),w
 12179  18E4  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12180  18E5                     l7055:	
 12181  18E5  3080               	movlw	128
 12182  18E6  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 12183  18E7  3080               	movlw	128
 12184  18E8  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 12185  18E9  0825               	movf	(___ftge@ff2+2)^(0+128),w
 12186  18EA  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 12187  18EB  1D03               	skipz
 12188  18EC  0008               	return
 12189  18ED  0824               	movf	(___ftge@ff2+1)^(0+128),w
 12190  18EE  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 12191  18EF  1D03               	skipz
 12192  18F0  0008               	return
 12193  18F1  0823               	movf	___ftge@ff2^(0+128),w
 12194  18F2  0220               	subwf	___ftge@ff1^(0+128),w
 12195  18F3  0008               	return
 12196  18F4                     __end_of___ftge:	
 12197                           
 12198                           	psect	text30
 12199  1BFC                     __ptext30:	
 12200 ;; *************** function ___altoft *****************
 12201 ;; Defined at:
 12202 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;  c               4   10[BANK2 ] long 
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  sign            1   15[BANK2 ] unsigned char 
 12207 ;;  exp             1   14[BANK2 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  3   10[BANK2 ] float 
 12210 ;; Registers used:
 12211 ;;		wreg, status,2, status,0, pclath, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12217 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12218 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12219 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12220 ;;      Totals:         0       0       2       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12221 ;;Total ram usage:        8 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    4
 12224 ;; This function calls:
 12225 ;;		___ftpack
 12226 ;; This function is called by:
 12227 ;;		_trunc
 12228 ;;		_floor
 12229 ;; This function uses a non-reentrant model
 12230 ;;
 12231                           
 12232                           
 12233                           ;psect for function ___altoft
 12234  1BFC                     ___altoft:	
 12235                           
 12236                           ;incstack = 0
 12237                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 12238  1BFC  0022               	movlb	2	; select bank2
 12239  1BFD  01AF               	clrf	___altoft@sign^(0+256)
 12240  1BFE  308E               	movlw	142
 12241  1BFF  0021               	movlb	1	; select bank1
 12242  1C00  00EE               	movwf	??___altoft^(0+128)
 12243  1C01  086E               	movf	??___altoft^(0+128),w
 12244  1C02  0022               	movlb	2	; select bank2
 12245  1C03  00AE               	movwf	___altoft@exp^(0+256)
 12246  1C04  1FAD               	btfss	(___altoft@c+3)^(0+256),7
 12247  1C05  2C13               	goto	l6971
 12248  1C06  09AA               	comf	___altoft@c^(0+256),f
 12249  1C07  09AB               	comf	(___altoft@c+1)^(0+256),f
 12250  1C08  09AC               	comf	(___altoft@c+2)^(0+256),f
 12251  1C09  09AD               	comf	(___altoft@c+3)^(0+256),f
 12252  1C0A  0AAA               	incf	___altoft@c^(0+256),f
 12253  1C0B  1903               	skipnz
 12254  1C0C  0AAB               	incf	(___altoft@c+1)^(0+256),f
 12255  1C0D  1903               	skipnz
 12256  1C0E  0AAC               	incf	(___altoft@c+2)^(0+256),f
 12257  1C0F  1903               	skipnz
 12258  1C10  0AAD               	incf	(___altoft@c+3)^(0+256),f
 12259  1C11  01AF               	clrf	___altoft@sign^(0+256)
 12260  1C12  0AAF               	incf	___altoft@sign^(0+256),f
 12261  1C13                     l6971:	
 12262  1C13  30FF               	movlw	255
 12263  1C14  052D               	andwf	(___altoft@c+3)^(0+256),w
 12264  1C15  1903               	btfsc	3,2
 12265  1C16  2C25               	goto	l6973
 12266  1C17  3001               	movlw	1
 12267  1C18                     u7025:	
 12268  1C18  36AD               	lsrf	(___altoft@c+3)^(0+256),f
 12269  1C19  0CAC               	rrf	(___altoft@c+2)^(0+256),f
 12270  1C1A  0CAB               	rrf	(___altoft@c+1)^(0+256),f
 12271  1C1B  0CAA               	rrf	___altoft@c^(0+256),f
 12272  1C1C  0B89               	decfsz	9,f
 12273  1C1D  2C18               	goto	u7025
 12274  1C1E  3001               	movlw	1
 12275  1C1F  0021               	movlb	1	; select bank1
 12276  1C20  00EE               	movwf	??___altoft^(0+128)
 12277  1C21  086E               	movf	??___altoft^(0+128),w
 12278  1C22  0022               	movlb	2	; select bank2
 12279  1C23  07AE               	addwf	___altoft@exp^(0+256),f
 12280  1C24  2C13               	goto	l6971
 12281  1C25                     l6973:	
 12282  1C25  082A               	movf	___altoft@c^(0+256),w
 12283  1C26  0021               	movlb	1	; select bank1
 12284  1C27  00A0               	movwf	___ftpack@arg^(0+128)
 12285  1C28  0022               	movlb	2	; select bank2
 12286  1C29  082B               	movf	(___altoft@c+1)^(0+256),w
 12287  1C2A  0021               	movlb	1	; select bank1
 12288  1C2B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 12289  1C2C  0022               	movlb	2	; select bank2
 12290  1C2D  082C               	movf	(___altoft@c+2)^(0+256),w
 12291  1C2E  0021               	movlb	1	; select bank1
 12292  1C2F  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 12293  1C30  0022               	movlb	2	; select bank2
 12294  1C31  082E               	movf	___altoft@exp^(0+256),w
 12295  1C32  0021               	movlb	1	; select bank1
 12296  1C33  00EE               	movwf	??___altoft^(0+128)
 12297  1C34  086E               	movf	??___altoft^(0+128),w
 12298  1C35  00A3               	movwf	___ftpack@exp^(0+128)
 12299  1C36  0022               	movlb	2	; select bank2
 12300  1C37  082F               	movf	___altoft@sign^(0+256),w
 12301  1C38  0021               	movlb	1	; select bank1
 12302  1C39  00EF               	movwf	(??___altoft+1)^(0+128)
 12303  1C3A  086F               	movf	(??___altoft+1)^(0+128),w
 12304  1C3B  00A4               	movwf	___ftpack@sign^(0+128)
 12305  1C3C  319E  269B         	fcall	___ftpack
 12306  1C3E  0021               	movlb	1	; select bank1
 12307  1C3F  0820               	movf	?___ftpack^(0+128),w
 12308  1C40  0022               	movlb	2	; select bank2
 12309  1C41  00AA               	movwf	?___altoft^(0+256)
 12310  1C42  0021               	movlb	1	; select bank1
 12311  1C43  0821               	movf	(?___ftpack+1)^(0+128),w
 12312  1C44  0022               	movlb	2	; select bank2
 12313  1C45  00AB               	movwf	(?___altoft+1)^(0+256)
 12314  1C46  0021               	movlb	1	; select bank1
 12315  1C47  0822               	movf	(?___ftpack+2)^(0+128),w
 12316  1C48  0022               	movlb	2	; select bank2
 12317  1C49  00AC               	movwf	(?___altoft+2)^(0+256)
 12318  1C4A  0008               	return
 12319  1C4B                     __end_of___altoft:	
 12320                           
 12321                           	psect	text31
 12322  1E3B                     __ptext31:	
 12323 ;; *************** function _eval_poly *****************
 12324 ;; Defined at:
 12325 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  x               3   56[BANK1 ] float 
 12328 ;;  d               2   59[BANK1 ] PTR const 
 12329 ;;		 -> log@coeff(27), exp@coeff(30), 
 12330 ;;  n               2   61[BANK1 ] int 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  res             3   63[BANK1 ] int 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  3   56[BANK1 ] int 
 12335 ;; Registers used:
 12336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12342 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12343 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12345 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12346 ;;Total ram usage:       10 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    5
 12349 ;; This function calls:
 12350 ;;		___ftadd
 12351 ;;		___ftmul
 12352 ;;		___wmul
 12353 ;; This function is called by:
 12354 ;;		_exp
 12355 ;;		_log
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           
 12360                           ;psect for function _eval_poly
 12361  1E3B                     _eval_poly:	
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12365  1E3B  0021               	movlb	1	; select bank1
 12366  1E3C  085E               	movf	(eval_poly@n+1)^(0+128),w
 12367  1E3D  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
 12368  1E3E  085D               	movf	eval_poly@n^(0+128),w
 12369  1E3F  00A0               	movwf	___wmul@multiplier^(0+128)
 12370  1E40  3003               	movlw	3
 12371  1E41  00A2               	movwf	___wmul@multiplicand^(0+128)
 12372  1E42  3000               	movlw	0
 12373  1E43  00A3               	movwf	(___wmul@multiplicand^(0+128)+1)
 12374  1E44  31A6  264F  319E   	fcall	___wmul
 12375  1E47  0021               	movlb	1	; select bank1
 12376  1E48  085B               	movf	eval_poly@d^(0+128),w
 12377  1E49  0720               	addwf	?___wmul^(0+128),w
 12378  1E4A  0084               	movwf	4
 12379  1E4B  085C               	movf	(eval_poly@d+1)^(0+128),w
 12380  1E4C  3D21               	addwfc	(?___wmul+1)^(0+128),w
 12381  1E4D  0085               	movwf	5
 12382  1E4E  3F00               	moviw [0]fsr0
 12383  1E4F  00DF               	movwf	eval_poly@res^(0+128)
 12384  1E50  3F01               	moviw [1]fsr0
 12385  1E51  00E0               	movwf	(eval_poly@res+1)^(0+128)
 12386  1E52  3F02               	moviw [2]fsr0
 12387  1E53                     L13:	
 12388  1E53  00E1               	movwf	(eval_poly@res+2)^(0+128)
 12389  1E54  085D               	movf	eval_poly@n^(0+128),w
 12390  1E55  045E               	iorwf	(eval_poly@n+1)^(0+128),w
 12391  1E56  1903               	btfsc	3,2
 12392  1E57  2E94               	goto	l7333
 12393  1E58  30FF               	movlw	255
 12394  1E59  07DD               	addwf	eval_poly@n^(0+128),f
 12395  1E5A  30FF               	movlw	255
 12396  1E5B  3DDE               	addwfc	(eval_poly@n+1)^(0+128),f
 12397  1E5C  085E               	movf	(eval_poly@n+1)^(0+128),w
 12398  1E5D  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
 12399  1E5E  085D               	movf	eval_poly@n^(0+128),w
 12400  1E5F  00A0               	movwf	___wmul@multiplier^(0+128)
 12401  1E60  3003               	movlw	3
 12402  1E61  00A2               	movwf	___wmul@multiplicand^(0+128)
 12403  1E62  3000               	movlw	0
 12404  1E63  00A3               	movwf	(___wmul@multiplicand^(0+128)+1)
 12405  1E64  31A6  264F  319E   	fcall	___wmul
 12406  1E67  0021               	movlb	1	; select bank1
 12407  1E68  085B               	movf	eval_poly@d^(0+128),w
 12408  1E69  0720               	addwf	?___wmul^(0+128),w
 12409  1E6A  0084               	movwf	4
 12410  1E6B  085C               	movf	(eval_poly@d+1)^(0+128),w
 12411  1E6C  3D21               	addwfc	(?___wmul+1)^(0+128),w
 12412  1E6D  0085               	movwf	5
 12413  1E6E  3F00               	moviw [0]fsr0
 12414  1E6F  00BB               	movwf	___ftadd@f1^(0+128)
 12415  1E70  3F01               	moviw [1]fsr0
 12416  1E71  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 12417  1E72  3F02               	moviw [2]fsr0
 12418  1E73  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 12419  1E74  085F               	movf	eval_poly@res^(0+128),w
 12420  1E75  00C8               	movwf	___ftmul@f1^(0+128)
 12421  1E76  0860               	movf	(eval_poly@res+1)^(0+128),w
 12422  1E77  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 12423  1E78  0861               	movf	(eval_poly@res+2)^(0+128),w
 12424  1E79  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 12425  1E7A  0858               	movf	eval_poly@x^(0+128),w
 12426  1E7B  00CB               	movwf	___ftmul@f2^(0+128)
 12427  1E7C  0859               	movf	(eval_poly@x+1)^(0+128),w
 12428  1E7D  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 12429  1E7E  085A               	movf	(eval_poly@x+2)^(0+128),w
 12430  1E7F  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 12431  1E80  3195  25A7  319E   	fcall	___ftmul
 12432  1E83  0021               	movlb	1	; select bank1
 12433  1E84  0848               	movf	?___ftmul^(0+128),w
 12434  1E85  00BE               	movwf	___ftadd@f2^(0+128)
 12435  1E86  0849               	movf	(?___ftmul+1)^(0+128),w
 12436  1E87  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 12437  1E88  084A               	movf	(?___ftmul+2)^(0+128),w
 12438  1E89  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 12439  1E8A  3188  2078  319E   	fcall	___ftadd
 12440  1E8D  0021               	movlb	1	; select bank1
 12441  1E8E  083B               	movf	?___ftadd^(0+128),w
 12442  1E8F  00DF               	movwf	eval_poly@res^(0+128)
 12443  1E90  083C               	movf	(?___ftadd+1)^(0+128),w
 12444  1E91  00E0               	movwf	(eval_poly@res+1)^(0+128)
 12445  1E92  083D               	movf	(?___ftadd+2)^(0+128),w
 12446  1E93  2E53               	goto	L13
 12447  1E94                     l7333:	
 12448  1E94  085F               	movf	eval_poly@res^(0+128),w
 12449  1E95  00D8               	movwf	?_eval_poly^(0+128)
 12450  1E96  0860               	movf	(eval_poly@res+1)^(0+128),w
 12451  1E97  00D9               	movwf	(?_eval_poly+1)^(0+128)
 12452  1E98  0861               	movf	(eval_poly@res+2)^(0+128),w
 12453  1E99  00DA               	movwf	(?_eval_poly+2)^(0+128)
 12454  1E9A  0008               	return
 12455  1E9B                     __end_of_eval_poly:	
 12456                           
 12457                           	psect	text32
 12458  264F                     __ptext32:	
 12459 ;; *************** function ___wmul *****************
 12460 ;; Defined at:
 12461 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;  multiplier      2    0[BANK1 ] unsigned int 
 12464 ;;  multiplicand    2    2[BANK1 ] unsigned int 
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;  product         2    4[BANK1 ] unsigned int 
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  2    0[BANK1 ] unsigned int 
 12469 ;; Registers used:
 12470 ;;		wreg, status,2, status,0
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12476 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12477 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12479 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12480 ;;Total ram usage:        6 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    3
 12483 ;; This function calls:
 12484 ;;		Nothing
 12485 ;; This function is called by:
 12486 ;;		_eval_poly
 12487 ;; This function uses a non-reentrant model
 12488 ;;
 12489                           
 12490                           
 12491                           ;psect for function ___wmul
 12492  264F                     ___wmul:	
 12493                           
 12494                           ;incstack = 0
 12495                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12496  264F  0021               	movlb	1	; select bank1
 12497  2650  01A4               	clrf	___wmul@product^(0+128)
 12498  2651  01A5               	clrf	(___wmul@product+1)^(0+128)
 12499  2652                     l6949:	
 12500  2652  1C20               	btfss	___wmul@multiplier^(0+128),0
 12501  2653  2E58               	goto	l1749
 12502  2654  0822               	movf	___wmul@multiplicand^(0+128),w
 12503  2655  07A4               	addwf	___wmul@product^(0+128),f
 12504  2656  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
 12505  2657  3DA5               	addwfc	(___wmul@product+1)^(0+128),f
 12506  2658                     l1749:	
 12507  2658  3001               	movlw	1
 12508  2659                     u6985:	
 12509  2659  35A2               	lslf	___wmul@multiplicand^(0+128),f
 12510  265A  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
 12511  265B  0B89               	decfsz	9,f
 12512  265C  2E59               	goto	u6985
 12513  265D  3001               	movlw	1
 12514  265E                     u6995:	
 12515  265E  36A1               	lsrf	(___wmul@multiplier+1)^(0+128),f
 12516  265F  0CA0               	rrf	___wmul@multiplier^(0+128),f
 12517  2660  0B89               	decfsz	9,f
 12518  2661  2E5E               	goto	u6995
 12519  2662  0820               	movf	___wmul@multiplier^(0+128),w
 12520  2663  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
 12521  2664  1D03               	btfss	3,2
 12522  2665  2E52               	goto	l6949
 12523  2666  0825               	movf	(___wmul@product+1)^(0+128),w
 12524  2667  00A1               	movwf	(?___wmul+1)^(0+128)
 12525  2668  0824               	movf	___wmul@product^(0+128),w
 12526  2669  00A0               	movwf	?___wmul^(0+128)
 12527  266A  0008               	return
 12528  266B                     __end_of___wmul:	
 12529                           
 12530                           	psect	text33
 12531  266B                     __ptext33:	
 12532 ;; *************** function ___ftsub *****************
 12533 ;; Defined at:
 12534 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 12535 ;; Parameters:    Size  Location     Type
 12536 ;;  f2              3   40[BANK1 ] float 
 12537 ;;  f1              3   43[BANK1 ] float 
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;		None
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  3   40[BANK1 ] float 
 12542 ;; Registers used:
 12543 ;;		wreg, status,2, status,0, pclath, cstack
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12549 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12552 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12553 ;;Total ram usage:        6 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; Hardware stack levels required when called:    5
 12556 ;; This function calls:
 12557 ;;		___ftadd
 12558 ;; This function is called by:
 12559 ;;		_exp
 12560 ;; This function uses a non-reentrant model
 12561 ;;
 12562                           
 12563                           
 12564                           ;psect for function ___ftsub
 12565  266B                     ___ftsub:	
 12566                           
 12567                           ;incstack = 0
 12568                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12569  266B  0021               	movlb	1	; select bank1
 12570  266C  084A               	movf	(___ftsub@f2+2)^(0+128),w
 12571  266D  0449               	iorwf	(___ftsub@f2+1)^(0+128),w
 12572  266E  0448               	iorwf	___ftsub@f2^(0+128),w
 12573  266F  1903               	skipnz
 12574  2670  2E73               	goto	l7295
 12575  2671  3080               	movlw	128
 12576  2672  06CA               	xorwf	(___ftsub@f2+2)^(0+128),f
 12577  2673                     l7295:	
 12578  2673  084B               	movf	___ftsub@f1^(0+128),w
 12579  2674  00BB               	movwf	___ftadd@f1^(0+128)
 12580  2675  084C               	movf	(___ftsub@f1+1)^(0+128),w
 12581  2676  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 12582  2677  084D               	movf	(___ftsub@f1+2)^(0+128),w
 12583  2678  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 12584  2679  0848               	movf	___ftsub@f2^(0+128),w
 12585  267A  00BE               	movwf	___ftadd@f2^(0+128)
 12586  267B  0849               	movf	(___ftsub@f2+1)^(0+128),w
 12587  267C  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 12588  267D  084A               	movf	(___ftsub@f2+2)^(0+128),w
 12589  267E  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 12590  267F  3188  2078         	fcall	___ftadd
 12591  2681  0021               	movlb	1	; select bank1
 12592  2682  083B               	movf	?___ftadd^(0+128),w
 12593  2683  00C8               	movwf	?___ftsub^(0+128)
 12594  2684  083C               	movf	(?___ftadd+1)^(0+128),w
 12595  2685  00C9               	movwf	(?___ftsub+1)^(0+128)
 12596  2686  083D               	movf	(?___ftadd+2)^(0+128),w
 12597  2687  00CA               	movwf	(?___ftsub+2)^(0+128)
 12598  2688  0008               	return
 12599  2689                     __end_of___ftsub:	
 12600                           
 12601                           	psect	text34
 12602  26A9                     __ptext34:	
 12603 ;; *************** function ___awtoft *****************
 12604 ;; Defined at:
 12605 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 12606 ;; Parameters:    Size  Location     Type
 12607 ;;  c               2    8[BANK1 ] int 
 12608 ;; Auto vars:     Size  Location     Type
 12609 ;;  sign            1   13[BANK1 ] unsigned char 
 12610 ;; Return value:  Size  Location     Type
 12611 ;;                  3    8[BANK1 ] float 
 12612 ;; Registers used:
 12613 ;;		wreg, status,2, status,0, pclath, cstack
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12619 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12620 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12621 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12622 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12623 ;;Total ram usage:        6 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; Hardware stack levels required when called:    4
 12626 ;; This function calls:
 12627 ;;		___ftpack
 12628 ;; This function is called by:
 12629 ;;		_main
 12630 ;;		_set_subdivision
 12631 ;;		_exp
 12632 ;;		_log
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           
 12637                           ;psect for function ___awtoft
 12638  26A9                     ___awtoft:	
 12639                           
 12640                           ;incstack = 0
 12641                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12642  26A9  0021               	movlb	1	; select bank1
 12643  26AA  01AD               	clrf	___awtoft@sign^(0+128)
 12644  26AB  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 12645  26AC  2EB4               	goto	l7245
 12646  26AD  09A8               	comf	___awtoft@c^(0+128),f
 12647  26AE  09A9               	comf	(___awtoft@c+1)^(0+128),f
 12648  26AF  0AA8               	incf	___awtoft@c^(0+128),f
 12649  26B0  1903               	skipnz
 12650  26B1  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 12651  26B2  01AD               	clrf	___awtoft@sign^(0+128)
 12652  26B3  0AAD               	incf	___awtoft@sign^(0+128),f
 12653  26B4                     l7245:	
 12654  26B4  0828               	movf	___awtoft@c^(0+128),w
 12655  26B5  00A0               	movwf	___ftpack@arg^(0+128)
 12656  26B6  0829               	movf	(___awtoft@c+1)^(0+128),w
 12657  26B7  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 12658  26B8  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 12659  26B9  308E               	movlw	142
 12660  26BA  00AB               	movwf	??___awtoft^(0+128)
 12661  26BB  082B               	movf	??___awtoft^(0+128),w
 12662  26BC  00A3               	movwf	___ftpack@exp^(0+128)
 12663  26BD  082D               	movf	___awtoft@sign^(0+128),w
 12664  26BE  00AC               	movwf	(??___awtoft+1)^(0+128)
 12665  26BF  082C               	movf	(??___awtoft+1)^(0+128),w
 12666  26C0  00A4               	movwf	___ftpack@sign^(0+128)
 12667  26C1  319E  269B         	fcall	___ftpack
 12668  26C3  0021               	movlb	1	; select bank1
 12669  26C4  0820               	movf	?___ftpack^(0+128),w
 12670  26C5  00A8               	movwf	?___awtoft^(0+128)
 12671  26C6  0821               	movf	(?___ftpack+1)^(0+128),w
 12672  26C7  00A9               	movwf	(?___awtoft+1)^(0+128)
 12673  26C8  0822               	movf	(?___ftpack+2)^(0+128),w
 12674  26C9  00AA               	movwf	(?___awtoft+2)^(0+128)
 12675  26CA  0008               	return
 12676  26CB                     __end_of___awtoft:	
 12677                           
 12678                           	psect	text35
 12679  2715                     __ptext35:	
 12680 ;; *************** function ___lltoft *****************
 12681 ;; Defined at:
 12682 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;  c               4    8[BANK1 ] unsigned long 
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  exp             1   13[BANK1 ] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  3    8[BANK1 ] float 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2, status,0, pclath, cstack
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12696 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12697 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12698 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12699 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12700 ;;Total ram usage:        6 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    4
 12703 ;; This function calls:
 12704 ;;		___ftpack
 12705 ;; This function is called by:
 12706 ;;		_pow
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           
 12711                           ;psect for function ___lltoft
 12712  2715                     ___lltoft:	
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 12716  2715  308E               	movlw	142
 12717  2716  0021               	movlb	1	; select bank1
 12718  2717  00AC               	movwf	??___lltoft^(0+128)
 12719  2718  082C               	movf	??___lltoft^(0+128),w
 12720  2719  00AD               	movwf	___lltoft@exp^(0+128)
 12721  271A                     l7419:	
 12722  271A  30FF               	movlw	255
 12723  271B  052B               	andwf	(___lltoft@c+3)^(0+128),w
 12724  271C  1903               	btfsc	3,2
 12725  271D  2F2A               	goto	l7421
 12726  271E  3001               	movlw	1
 12727  271F                     u7785:	
 12728  271F  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 12729  2720  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 12730  2721  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 12731  2722  0CA8               	rrf	___lltoft@c^(0+128),f
 12732  2723  0B89               	decfsz	9,f
 12733  2724  2F1F               	goto	u7785
 12734  2725  3001               	movlw	1
 12735  2726  00AC               	movwf	??___lltoft^(0+128)
 12736  2727  082C               	movf	??___lltoft^(0+128),w
 12737  2728  07AD               	addwf	___lltoft@exp^(0+128),f
 12738  2729  2F1A               	goto	l7419
 12739  272A                     l7421:	
 12740  272A  0828               	movf	___lltoft@c^(0+128),w
 12741  272B  00A0               	movwf	___ftpack@arg^(0+128)
 12742  272C  0829               	movf	(___lltoft@c+1)^(0+128),w
 12743  272D  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 12744  272E  082A               	movf	(___lltoft@c+2)^(0+128),w
 12745  272F  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 12746  2730  082D               	movf	___lltoft@exp^(0+128),w
 12747  2731  00AC               	movwf	??___lltoft^(0+128)
 12748  2732  082C               	movf	??___lltoft^(0+128),w
 12749  2733  00A3               	movwf	___ftpack@exp^(0+128)
 12750  2734  01A4               	clrf	___ftpack@sign^(0+128)
 12751  2735  319E  269B         	fcall	___ftpack
 12752  2737  0021               	movlb	1	; select bank1
 12753  2738  0820               	movf	?___ftpack^(0+128),w
 12754  2739  00A8               	movwf	?___lltoft^(0+128)
 12755  273A  0821               	movf	(?___ftpack+1)^(0+128),w
 12756  273B  00A9               	movwf	(?___lltoft+1)^(0+128)
 12757  273C  0822               	movf	(?___ftpack+2)^(0+128),w
 12758  273D  00AA               	movwf	(?___lltoft+2)^(0+128)
 12759  273E  0008               	return
 12760  273F                     __end_of___lltoft:	
 12761                           
 12762                           	psect	text36
 12763  1C4B                     __ptext36:	
 12764 ;; *************** function _read_top_tactile *****************
 12765 ;; Defined at:
 12766 ;;		line 49 in file "tactiles.c"
 12767 ;; Parameters:    Size  Location     Type
 12768 ;;		None
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;		None
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      void 
 12773 ;; Registers used:
 12774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12782 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12783 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12784 ;;Total ram usage:        1 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    5
 12787 ;; This function calls:
 12788 ;;		_set_leds_top
 12789 ;;		_wait_ms
 12790 ;; This function is called by:
 12791 ;;		_main
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           
 12796                           ;psect for function _read_top_tactile
 12797  1C4B                     _read_top_tactile:	
 12798                           
 12799                           ;tactiles.c: 59: if (PORTDbits.RD5 == 0) {
 12800                           
 12801                           ;incstack = 0
 12802                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12803  1C4B  0020               	movlb	0	; select bank0
 12804  1C4C  1A8F               	btfsc	15,5	;volatile
 12805  1C4D  2C55               	goto	l8077
 12806                           
 12807                           ;tactiles.c: 60: if (topTactile_pressed > 0) {
 12808  1C4E  0023               	movlb	3	; select bank3
 12809  1C4F  0849               	movf	_topTactile_pressed^(0+384),w
 12810  1C50  1903               	btfsc	3,2
 12811  1C51  2C60               	goto	l963
 12812                           
 12813                           ;tactiles.c: 61: topTactile_pressed--;
 12814  1C52  3001               	movlw	1
 12815  1C53  02C9               	subwf	_topTactile_pressed^(0+384),f
 12816                           
 12817                           ;tactiles.c: 62: }
 12818                           ;tactiles.c: 63: } else if (topTactile_pressed < 25) {
 12819  1C54  2C60               	goto	l963
 12820  1C55                     l8077:	
 12821  1C55  3019               	movlw	25
 12822  1C56  0023               	movlb	3	; select bank3
 12823  1C57  0249               	subwf	_topTactile_pressed^(0+384),w
 12824  1C58  1803               	skipnc
 12825  1C59  2C60               	goto	l963
 12826                           
 12827                           ;tactiles.c: 64: topTactile_pressed++;
 12828  1C5A  3001               	movlw	1
 12829  1C5B  0021               	movlb	1	; select bank1
 12830  1C5C  00B2               	movwf	??_read_top_tactile^(0+128)
 12831  1C5D  0832               	movf	??_read_top_tactile^(0+128),w
 12832  1C5E  0023               	movlb	3	; select bank3
 12833  1C5F  07C9               	addwf	_topTactile_pressed^(0+384),f
 12834  1C60                     l963:	
 12835                           
 12836                           ;tactiles.c: 65: }
 12837                           ;tactiles.c: 70: if (topTactile_pressed == 0) {
 12838  1C60  0849               	movf	_topTactile_pressed^(0+384),w
 12839  1C61  1D03               	btfss	3,2
 12840  1C62  0008               	return
 12841                           
 12842                           ;tactiles.c: 72: top_push_state = top_push_state + 1;
 12843  1C63  0020               	movlb	0	; select bank0
 12844  1C64  0853               	movf	_top_push_state,w
 12845  1C65  3E01               	addlw	1
 12846  1C66  00D3               	movwf	_top_push_state
 12847  1C67  3000               	movlw	0
 12848  1C68  3D54               	addwfc	_top_push_state+1,w
 12849  1C69  00D4               	movwf	_top_push_state+1
 12850                           
 12851                           ;tactiles.c: 73: if (top_push_state >= 7) {
 12852  1C6A  0854               	movf	_top_push_state+1,w
 12853  1C6B  3A80               	xorlw	128
 12854  1C6C  0021               	movlb	1	; select bank1
 12855  1C6D  00B2               	movwf	??_read_top_tactile^(0+128)
 12856  1C6E  3080               	movlw	128
 12857  1C6F  0232               	subwf	??_read_top_tactile^(0+128),w
 12858  1C70  1D03               	skipz
 12859  1C71  2C75               	goto	u8955
 12860  1C72  3007               	movlw	7
 12861  1C73  0020               	movlb	0	; select bank0
 12862  1C74  0253               	subwf	_top_push_state,w
 12863  1C75                     u8955:	
 12864  1C75  1C03               	skipc
 12865  1C76  2C7C               	goto	l8087
 12866                           
 12867                           ;tactiles.c: 74: top_push_state = 1;
 12868  1C77  3001               	movlw	1
 12869  1C78  0020               	movlb	0	; select bank0
 12870  1C79  00D3               	movwf	_top_push_state
 12871  1C7A  3000               	movlw	0
 12872  1C7B  00D4               	movwf	_top_push_state+1
 12873  1C7C                     l8087:	
 12874                           
 12875                           ;tactiles.c: 75: }
 12876                           ;tactiles.c: 76: set_leds_top(top_push_state, 1);
 12877  1C7C  0020               	movlb	0	; select bank0
 12878  1C7D  0854               	movf	_top_push_state+1,w
 12879  1C7E  0021               	movlb	1	; select bank1
 12880  1C7F  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 12881  1C80  0020               	movlb	0	; select bank0
 12882  1C81  0853               	movf	_top_push_state,w
 12883  1C82  0021               	movlb	1	; select bank1
 12884  1C83  00A0               	movwf	set_leds_top@x^(0+128)
 12885  1C84  3001               	movlw	1
 12886  1C85  00A2               	movwf	set_leds_top@ledState^(0+128)
 12887  1C86  3000               	movlw	0
 12888  1C87  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 12889  1C88  319D  258E  319C   	fcall	_set_leds_top
 12890                           
 12891                           ;tactiles.c: 77: delay_time_changed = 1;
 12892  1C8B  3001               	movlw	1
 12893  1C8C  0023               	movlb	3	; select bank3
 12894  1C8D  00CC               	movwf	_delay_time_changed^(0+384)
 12895  1C8E  3000               	movlw	0
 12896  1C8F  00CD               	movwf	(_delay_time_changed^(0+384)+1)
 12897  1C90                     l967:	
 12898                           ;tactiles.c: 80: while (PORTDbits.RD5 == 0) {
 12899                           
 12900  1C90  0020               	movlb	0	; select bank0
 12901  1C91  1E8F               	btfss	15,5	;volatile
 12902  1C92  2C90               	goto	l967
 12903                           
 12904                           ;tactiles.c: 81: }
 12905                           ;tactiles.c: 82: wait_ms(20);
 12906  1C93  3014               	movlw	20
 12907  1C94  0021               	movlb	1	; select bank1
 12908  1C95  00AC               	movwf	wait_ms@timeSec^(0+128)
 12909  1C96  3000               	movlw	0
 12910  1C97  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 12911  1C98  31A7  27CE         	fcall	_wait_ms
 12912  1C9A  0008               	return
 12913  1C9B                     __end_of_read_top_tactile:	
 12914                           
 12915                           	psect	text37
 12916  1B6B                     __ptext37:	
 12917 ;; *************** function _read_bottom_tactile *****************
 12918 ;; Defined at:
 12919 ;;		line 18 in file "tactiles.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;		None
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;		None
 12924 ;; Return value:  Size  Location     Type
 12925 ;;                  1    wreg      void 
 12926 ;; Registers used:
 12927 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12935 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12936 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12937 ;;Total ram usage:        1 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; Hardware stack levels required when called:    5
 12940 ;; This function calls:
 12941 ;;		_set_leds_bottom
 12942 ;;		_wait_ms
 12943 ;; This function is called by:
 12944 ;;		_main
 12945 ;; This function uses a non-reentrant model
 12946 ;;
 12947                           
 12948                           
 12949                           ;psect for function _read_bottom_tactile
 12950  1B6B                     _read_bottom_tactile:	
 12951                           
 12952                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 12953                           
 12954                           ;incstack = 0
 12955                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12956  1B6B  0020               	movlb	0	; select bank0
 12957  1B6C  1B0F               	btfsc	15,6	;volatile
 12958  1B6D  2B75               	goto	l8057
 12959                           
 12960                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 12961  1B6E  0023               	movlb	3	; select bank3
 12962  1B6F  083E               	movf	_bottomTactile_pressed^(0+384),w
 12963  1B70  1903               	btfsc	3,2
 12964  1B71  2B80               	goto	l951
 12965                           
 12966                           ;tactiles.c: 29: bottomTactile_pressed--;
 12967  1B72  3001               	movlw	1
 12968  1B73  02BE               	subwf	_bottomTactile_pressed^(0+384),f
 12969                           
 12970                           ;tactiles.c: 30: }
 12971                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 12972  1B74  2B80               	goto	l951
 12973  1B75                     l8057:	
 12974  1B75  3019               	movlw	25
 12975  1B76  0023               	movlb	3	; select bank3
 12976  1B77  023E               	subwf	_bottomTactile_pressed^(0+384),w
 12977  1B78  1803               	skipnc
 12978  1B79  2B80               	goto	l951
 12979                           
 12980                           ;tactiles.c: 32: bottomTactile_pressed++;
 12981  1B7A  3001               	movlw	1
 12982  1B7B  0021               	movlb	1	; select bank1
 12983  1B7C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 12984  1B7D  0832               	movf	??_read_bottom_tactile^(0+128),w
 12985  1B7E  0023               	movlb	3	; select bank3
 12986  1B7F  07BE               	addwf	_bottomTactile_pressed^(0+384),f
 12987  1B80                     l951:	
 12988                           
 12989                           ;tactiles.c: 33: }
 12990                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 12991  1B80  083E               	movf	_bottomTactile_pressed^(0+384),w
 12992  1B81  1D03               	btfss	3,2
 12993  1B82  0008               	return
 12994                           
 12995                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 12996  1B83  0020               	movlb	0	; select bank0
 12997  1B84  084D               	movf	_bottom_push_state,w
 12998  1B85  3E01               	addlw	1
 12999  1B86  00CD               	movwf	_bottom_push_state
 13000  1B87  3000               	movlw	0
 13001  1B88  3D4E               	addwfc	_bottom_push_state+1,w
 13002  1B89  00CE               	movwf	_bottom_push_state+1
 13003                           
 13004                           ;tactiles.c: 38: if (bottom_push_state > 6) {
 13005  1B8A  084E               	movf	_bottom_push_state+1,w
 13006  1B8B  3A80               	xorlw	128
 13007  1B8C  0021               	movlb	1	; select bank1
 13008  1B8D  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13009  1B8E  3080               	movlw	128
 13010  1B8F  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13011  1B90  1D03               	skipz
 13012  1B91  2B95               	goto	u8895
 13013  1B92  3007               	movlw	7
 13014  1B93  0020               	movlb	0	; select bank0
 13015  1B94  024D               	subwf	_bottom_push_state,w
 13016  1B95                     u8895:	
 13017  1B95  1C03               	skipc
 13018  1B96  2B9C               	goto	l8067
 13019                           
 13020                           ;tactiles.c: 39: bottom_push_state = 1;
 13021  1B97  3001               	movlw	1
 13022  1B98  0020               	movlb	0	; select bank0
 13023  1B99  00CD               	movwf	_bottom_push_state
 13024  1B9A  3000               	movlw	0
 13025  1B9B  00CE               	movwf	_bottom_push_state+1
 13026  1B9C                     l8067:	
 13027                           
 13028                           ;tactiles.c: 40: }
 13029                           ;tactiles.c: 41: set_leds_bottom(bottom_push_state);
 13030  1B9C  0020               	movlb	0	; select bank0
 13031  1B9D  084E               	movf	_bottom_push_state+1,w
 13032  1B9E  0021               	movlb	1	; select bank1
 13033  1B9F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13034  1BA0  0020               	movlb	0	; select bank0
 13035  1BA1  084D               	movf	_bottom_push_state,w
 13036  1BA2  0021               	movlb	1	; select bank1
 13037  1BA3  00A0               	movwf	set_leds_bottom@x^(0+128)
 13038  1BA4  3198  207D  319B   	fcall	_set_leds_bottom
 13039  1BA7                     l955:	
 13040                           ;tactiles.c: 43: while (PORTDbits.RD6 == 0) {
 13041                           
 13042  1BA7  0020               	movlb	0	; select bank0
 13043  1BA8  1F0F               	btfss	15,6	;volatile
 13044  1BA9  2BA7               	goto	l955
 13045                           
 13046                           ;tactiles.c: 44: }
 13047                           ;tactiles.c: 45: wait_ms(20);
 13048  1BAA  3014               	movlw	20
 13049  1BAB  0021               	movlb	1	; select bank1
 13050  1BAC  00AC               	movwf	wait_ms@timeSec^(0+128)
 13051  1BAD  3000               	movlw	0
 13052  1BAE  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13053  1BAF  31A7  27CE         	fcall	_wait_ms
 13054  1BB1  0008               	return
 13055  1BB2                     __end_of_read_bottom_tactile:	
 13056                           
 13057                           	psect	text38
 13058  11D3                     __ptext38:	
 13059 ;; *************** function _map *****************
 13060 ;; Defined at:
 13061 ;;		line 177 in file "user.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;  x               3   56[BANK1 ] float 
 13064 ;;  in_min          3   59[BANK1 ] float 
 13065 ;;  in_max          3   62[BANK1 ] float 
 13066 ;;  out_min         3   65[BANK1 ] float 
 13067 ;;  out_max         3   68[BANK1 ] float 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;		None
 13070 ;; Return value:  Size  Location     Type
 13071 ;;                  3   56[BANK1 ] float 
 13072 ;; Registers used:
 13073 ;;		wreg, status,2, status,0, pclath, cstack
 13074 ;; Tracked objects:
 13075 ;;		On entry : 0/0
 13076 ;;		On exit  : 0/0
 13077 ;;		Unchanged: 0/0
 13078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13079 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13080 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13082 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13083 ;;Total ram usage:       18 bytes
 13084 ;; Hardware stack levels used:    1
 13085 ;; Hardware stack levels required when called:    5
 13086 ;; This function calls:
 13087 ;;		___ftadd
 13088 ;;		___ftdiv
 13089 ;;		___ftmul
 13090 ;;		___ftneg
 13091 ;; This function is called by:
 13092 ;;		_main
 13093 ;; This function uses a non-reentrant model
 13094 ;;
 13095                           
 13096                           
 13097                           ;psect for function _map
 13098  11D3                     _map:	
 13099                           
 13100                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13101                           
 13102                           ;incstack = 0
 13103                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13104  11D3  0021               	movlb	1	; select bank1
 13105  11D4  085E               	movf	map@in_max^(0+128),w
 13106  11D5  00BB               	movwf	___ftadd@f1^(0+128)
 13107  11D6  085F               	movf	(map@in_max+1)^(0+128),w
 13108  11D7  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 13109  11D8  0860               	movf	(map@in_max+2)^(0+128),w
 13110  11D9  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 13111  11DA  085B               	movf	map@in_min^(0+128),w
 13112  11DB  00B8               	movwf	___ftneg@f1^(0+128)
 13113  11DC  085C               	movf	(map@in_min+1)^(0+128),w
 13114  11DD  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 13115  11DE  085D               	movf	(map@in_min+2)^(0+128),w
 13116  11DF  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 13117  11E0  31A5  2566  3191   	fcall	___ftneg
 13118  11E3  0021               	movlb	1	; select bank1
 13119  11E4  0838               	movf	?___ftneg^(0+128),w
 13120  11E5  00BE               	movwf	___ftadd@f2^(0+128)
 13121  11E6  0839               	movf	(?___ftneg+1)^(0+128),w
 13122  11E7  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 13123  11E8  083A               	movf	(?___ftneg+2)^(0+128),w
 13124  11E9  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 13125  11EA  3188  2078  3191   	fcall	___ftadd
 13126  11ED  0021               	movlb	1	; select bank1
 13127  11EE  083B               	movf	?___ftadd^(0+128),w
 13128  11EF  00A8               	movwf	___ftdiv@f2^(0+128)
 13129  11F0  083C               	movf	(?___ftadd+1)^(0+128),w
 13130  11F1  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
 13131  11F2  083D               	movf	(?___ftadd+2)^(0+128),w
 13132  11F3  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
 13133  11F4  0864               	movf	map@out_max^(0+128),w
 13134  11F5  00BB               	movwf	___ftadd@f1^(0+128)
 13135  11F6  0865               	movf	(map@out_max+1)^(0+128),w
 13136  11F7  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 13137  11F8  0866               	movf	(map@out_max+2)^(0+128),w
 13138  11F9  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 13139  11FA  0861               	movf	map@out_min^(0+128),w
 13140  11FB  00B8               	movwf	___ftneg@f1^(0+128)
 13141  11FC  0862               	movf	(map@out_min+1)^(0+128),w
 13142  11FD  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 13143  11FE  0863               	movf	(map@out_min+2)^(0+128),w
 13144  11FF  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 13145  1200  31A5  2566  3191   	fcall	___ftneg
 13146  1203  0021               	movlb	1	; select bank1
 13147  1204  0838               	movf	?___ftneg^(0+128),w
 13148  1205  00BE               	movwf	___ftadd@f2^(0+128)
 13149  1206  0839               	movf	(?___ftneg+1)^(0+128),w
 13150  1207  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 13151  1208  083A               	movf	(?___ftneg+2)^(0+128),w
 13152  1209  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 13153  120A  3188  2078  3191   	fcall	___ftadd
 13154  120D  0021               	movlb	1	; select bank1
 13155  120E  083B               	movf	?___ftadd^(0+128),w
 13156  120F  00C8               	movwf	___ftmul@f1^(0+128)
 13157  1210  083C               	movf	(?___ftadd+1)^(0+128),w
 13158  1211  00C9               	movwf	(___ftmul@f1+1)^(0+128)
 13159  1212  083D               	movf	(?___ftadd+2)^(0+128),w
 13160  1213  00CA               	movwf	(___ftmul@f1+2)^(0+128)
 13161  1214  0858               	movf	map@x^(0+128),w
 13162  1215  00BB               	movwf	___ftadd@f1^(0+128)
 13163  1216  0859               	movf	(map@x+1)^(0+128),w
 13164  1217  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 13165  1218  085A               	movf	(map@x+2)^(0+128),w
 13166  1219  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 13167  121A  085B               	movf	map@in_min^(0+128),w
 13168  121B  00B8               	movwf	___ftneg@f1^(0+128)
 13169  121C  085C               	movf	(map@in_min+1)^(0+128),w
 13170  121D  00B9               	movwf	(___ftneg@f1+1)^(0+128)
 13171  121E  085D               	movf	(map@in_min+2)^(0+128),w
 13172  121F  00BA               	movwf	(___ftneg@f1+2)^(0+128)
 13173  1220  31A5  2566  3191   	fcall	___ftneg
 13174  1223  0021               	movlb	1	; select bank1
 13175  1224  0838               	movf	?___ftneg^(0+128),w
 13176  1225  00BE               	movwf	___ftadd@f2^(0+128)
 13177  1226  0839               	movf	(?___ftneg+1)^(0+128),w
 13178  1227  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 13179  1228  083A               	movf	(?___ftneg+2)^(0+128),w
 13180  1229  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 13181  122A  3188  2078  3191   	fcall	___ftadd
 13182  122D  0021               	movlb	1	; select bank1
 13183  122E  083B               	movf	?___ftadd^(0+128),w
 13184  122F  00CB               	movwf	___ftmul@f2^(0+128)
 13185  1230  083C               	movf	(?___ftadd+1)^(0+128),w
 13186  1231  00CC               	movwf	(___ftmul@f2+1)^(0+128)
 13187  1232  083D               	movf	(?___ftadd+2)^(0+128),w
 13188  1233  00CD               	movwf	(___ftmul@f2+2)^(0+128)
 13189  1234  3195  25A7  3191   	fcall	___ftmul
 13190  1237  0021               	movlb	1	; select bank1
 13191  1238  0848               	movf	?___ftmul^(0+128),w
 13192  1239  00AB               	movwf	___ftdiv@f1^(0+128)
 13193  123A  0849               	movf	(?___ftmul+1)^(0+128),w
 13194  123B  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
 13195  123C  084A               	movf	(?___ftmul+2)^(0+128),w
 13196  123D  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
 13197  123E  3193  239D  3191   	fcall	___ftdiv
 13198  1241  0021               	movlb	1	; select bank1
 13199  1242  0828               	movf	?___ftdiv^(0+128),w
 13200  1243  00E7               	movwf	_map$2655^(0+128)
 13201  1244  0829               	movf	(?___ftdiv+1)^(0+128),w
 13202  1245  00E8               	movwf	(_map$2655+1)^(0+128)
 13203  1246  082A               	movf	(?___ftdiv+2)^(0+128),w
 13204  1247  00E9               	movwf	(_map$2655+2)^(0+128)
 13205                           
 13206                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13207  1248  0861               	movf	map@out_min^(0+128),w
 13208  1249  00BB               	movwf	___ftadd@f1^(0+128)
 13209  124A  0862               	movf	(map@out_min+1)^(0+128),w
 13210  124B  00BC               	movwf	(___ftadd@f1+1)^(0+128)
 13211  124C  0863               	movf	(map@out_min+2)^(0+128),w
 13212  124D  00BD               	movwf	(___ftadd@f1+2)^(0+128)
 13213  124E  0867               	movf	_map$2655^(0+128),w
 13214  124F  00BE               	movwf	___ftadd@f2^(0+128)
 13215  1250  0868               	movf	(_map$2655+1)^(0+128),w
 13216  1251  00BF               	movwf	(___ftadd@f2+1)^(0+128)
 13217  1252  0869               	movf	(_map$2655+2)^(0+128),w
 13218  1253  00C0               	movwf	(___ftadd@f2+2)^(0+128)
 13219  1254  3188  2078         	fcall	___ftadd
 13220  1256  0021               	movlb	1	; select bank1
 13221  1257  083B               	movf	?___ftadd^(0+128),w
 13222  1258  00D8               	movwf	?_map^(0+128)
 13223  1259  083C               	movf	(?___ftadd+1)^(0+128),w
 13224  125A  00D9               	movwf	(?_map+1)^(0+128)
 13225  125B  083D               	movf	(?___ftadd+2)^(0+128),w
 13226  125C  00DA               	movwf	(?_map+2)^(0+128)
 13227  125D  0008               	return
 13228  125E                     __end_of_map:	
 13229                           
 13230                           	psect	text39
 13231  2566                     __ptext39:	
 13232 ;; *************** function ___ftneg *****************
 13233 ;; Defined at:
 13234 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  f1              3   24[BANK1 ] float 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;		None
 13239 ;; Return value:  Size  Location     Type
 13240 ;;                  3   24[BANK1 ] float 
 13241 ;; Registers used:
 13242 ;;		wreg
 13243 ;; Tracked objects:
 13244 ;;		On entry : 0/0
 13245 ;;		On exit  : 0/0
 13246 ;;		Unchanged: 0/0
 13247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13248 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13251 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13252 ;;Total ram usage:        3 bytes
 13253 ;; Hardware stack levels used:    1
 13254 ;; Hardware stack levels required when called:    3
 13255 ;; This function calls:
 13256 ;;		Nothing
 13257 ;; This function is called by:
 13258 ;;		_map
 13259 ;;		_scaleiA10kPot
 13260 ;;		_pow
 13261 ;;		_exp
 13262 ;;		_ldexp
 13263 ;;		_scalePotValue
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function ___ftneg
 13269  2566                     ___ftneg:	
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in ___ftneg: [wreg]
 13273  2566  0021               	movlb	1	; select bank1
 13274  2567  083A               	movf	(___ftneg@f1+2)^(0+128),w
 13275  2568  0439               	iorwf	(___ftneg@f1+1)^(0+128),w
 13276  2569  0438               	iorwf	___ftneg@f1^(0+128),w
 13277  256A  1903               	skipnz
 13278  256B  0008               	return
 13279  256C  3080               	movlw	128
 13280  256D  06BA               	xorwf	(___ftneg@f1+2)^(0+128),f
 13281  256E  0008               	return
 13282  256F                     __end_of___ftneg:	
 13283                           
 13284                           	psect	text40
 13285  15A7                     __ptext40:	
 13286 ;; *************** function ___ftmul *****************
 13287 ;; Defined at:
 13288 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 13289 ;; Parameters:    Size  Location     Type
 13290 ;;  f1              3   40[BANK1 ] float 
 13291 ;;  f2              3   43[BANK1 ] float 
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;  f3_as_produc    3   51[BANK1 ] unsigned um
 13294 ;;  sign            1   55[BANK1 ] unsigned char 
 13295 ;;  cntr            1   54[BANK1 ] unsigned char 
 13296 ;;  exp             1   50[BANK1 ] unsigned char 
 13297 ;; Return value:  Size  Location     Type
 13298 ;;                  3   40[BANK1 ] float 
 13299 ;; Registers used:
 13300 ;;		wreg, status,2, status,0, pclath, cstack
 13301 ;; Tracked objects:
 13302 ;;		On entry : 0/0
 13303 ;;		On exit  : 0/0
 13304 ;;		Unchanged: 0/0
 13305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13306 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13307 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13308 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13309 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13310 ;;Total ram usage:       16 bytes
 13311 ;; Hardware stack levels used:    1
 13312 ;; Hardware stack levels required when called:    4
 13313 ;; This function calls:
 13314 ;;		___ftpack
 13315 ;; This function is called by:
 13316 ;;		_set_subdivision
 13317 ;;		_map
 13318 ;;		_scaleA100kPot
 13319 ;;		_scaleiA100kPot
 13320 ;;		_scaleA10kPot
 13321 ;;		_scaleiA10kPot
 13322 ;;		_pow
 13323 ;;		_exp
 13324 ;;		_log
 13325 ;;		_eval_poly
 13326 ;;		_scalePotValue
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           
 13331                           ;psect for function ___ftmul
 13332  15A7                     ___ftmul:	
 13333                           
 13334                           ;incstack = 0
 13335                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 13336  15A7  0021               	movlb	1	; select bank1
 13337  15A8  0848               	movf	___ftmul@f1^(0+128),w
 13338  15A9  00CE               	movwf	??___ftmul^(0+128)
 13339  15AA  0849               	movf	(___ftmul@f1+1)^(0+128),w
 13340  15AB  00CF               	movwf	(??___ftmul^(0+128)+1)
 13341  15AC  084A               	movf	(___ftmul@f1+2)^(0+128),w
 13342  15AD  00D0               	movwf	(??___ftmul^(0+128)+2)
 13343  15AE  1003               	clrc
 13344  15AF  0D4F               	rlf	(??___ftmul^(0+128)+1),w
 13345  15B0  0D50               	rlf	(??___ftmul^(0+128)+2),w
 13346  15B1  00D1               	movwf	(??___ftmul+3)^(0+128)
 13347  15B2  0851               	movf	(??___ftmul+3)^(0+128),w
 13348  15B3  00D2               	movwf	___ftmul@exp^(0+128)
 13349  15B4  0852               	movf	___ftmul@exp^(0+128),w
 13350  15B5  1D03               	btfss	3,2
 13351  15B6  2DBE               	goto	l7073
 13352  15B7  3000               	movlw	0
 13353  15B8  00C8               	movwf	?___ftmul^(0+128)
 13354  15B9  3000               	movlw	0
 13355  15BA  00C9               	movwf	(?___ftmul+1)^(0+128)
 13356  15BB  3000               	movlw	0
 13357  15BC  00CA               	movwf	(?___ftmul+2)^(0+128)
 13358  15BD  0008               	return
 13359  15BE                     l7073:	
 13360  15BE  084B               	movf	___ftmul@f2^(0+128),w
 13361  15BF  00CE               	movwf	??___ftmul^(0+128)
 13362  15C0  084C               	movf	(___ftmul@f2+1)^(0+128),w
 13363  15C1  00CF               	movwf	(??___ftmul^(0+128)+1)
 13364  15C2  084D               	movf	(___ftmul@f2+2)^(0+128),w
 13365  15C3  00D0               	movwf	(??___ftmul^(0+128)+2)
 13366  15C4  1003               	clrc
 13367  15C5  0D4F               	rlf	(??___ftmul^(0+128)+1),w
 13368  15C6  0D50               	rlf	(??___ftmul^(0+128)+2),w
 13369  15C7  00D1               	movwf	(??___ftmul+3)^(0+128)
 13370  15C8  0851               	movf	(??___ftmul+3)^(0+128),w
 13371  15C9  00D7               	movwf	___ftmul@sign^(0+128)
 13372  15CA  0857               	movf	___ftmul@sign^(0+128),w
 13373  15CB  1D03               	btfss	3,2
 13374  15CC  2DD4               	goto	l7079
 13375  15CD  3000               	movlw	0
 13376  15CE  00C8               	movwf	?___ftmul^(0+128)
 13377  15CF  3000               	movlw	0
 13378  15D0  00C9               	movwf	(?___ftmul+1)^(0+128)
 13379  15D1  3000               	movlw	0
 13380  15D2  00CA               	movwf	(?___ftmul+2)^(0+128)
 13381  15D3  0008               	return
 13382  15D4                     l7079:	
 13383  15D4  0857               	movf	___ftmul@sign^(0+128),w
 13384  15D5  3E7B               	addlw	123
 13385  15D6  00CE               	movwf	??___ftmul^(0+128)
 13386  15D7  084E               	movf	??___ftmul^(0+128),w
 13387  15D8  07D2               	addwf	___ftmul@exp^(0+128),f
 13388  15D9  0848               	movf	___ftmul@f1^(0+128),w
 13389  15DA  00CE               	movwf	??___ftmul^(0+128)
 13390  15DB  0849               	movf	(___ftmul@f1+1)^(0+128),w
 13391  15DC  00CF               	movwf	(??___ftmul^(0+128)+1)
 13392  15DD  084A               	movf	(___ftmul@f1+2)^(0+128),w
 13393  15DE  00D0               	movwf	(??___ftmul^(0+128)+2)
 13394  15DF  3010               	movlw	16
 13395  15E0                     u7325:	
 13396  15E0  36D0               	lsrf	(??___ftmul^(0+128)+2),f
 13397  15E1  0CCF               	rrf	(??___ftmul^(0+128)+1),f
 13398  15E2  0CCE               	rrf	??___ftmul^(0+128),f
 13399  15E3  0B89               	decfsz	9,f
 13400  15E4  2DE0               	goto	u7325
 13401  15E5  084E               	movf	??___ftmul^(0+128),w
 13402  15E6  00D1               	movwf	(??___ftmul+3)^(0+128)
 13403  15E7  0851               	movf	(??___ftmul+3)^(0+128),w
 13404  15E8  00D7               	movwf	___ftmul@sign^(0+128)
 13405  15E9  084B               	movf	___ftmul@f2^(0+128),w
 13406  15EA  00CE               	movwf	??___ftmul^(0+128)
 13407  15EB  084C               	movf	(___ftmul@f2+1)^(0+128),w
 13408  15EC  00CF               	movwf	(??___ftmul^(0+128)+1)
 13409  15ED  084D               	movf	(___ftmul@f2+2)^(0+128),w
 13410  15EE  00D0               	movwf	(??___ftmul^(0+128)+2)
 13411  15EF  3010               	movlw	16
 13412  15F0                     u7335:	
 13413  15F0  36D0               	lsrf	(??___ftmul^(0+128)+2),f
 13414  15F1  0CCF               	rrf	(??___ftmul^(0+128)+1),f
 13415  15F2  0CCE               	rrf	??___ftmul^(0+128),f
 13416  15F3  0B89               	decfsz	9,f
 13417  15F4  2DF0               	goto	u7335
 13418  15F5  084E               	movf	??___ftmul^(0+128),w
 13419  15F6  00D1               	movwf	(??___ftmul+3)^(0+128)
 13420  15F7  0851               	movf	(??___ftmul+3)^(0+128),w
 13421  15F8  06D7               	xorwf	___ftmul@sign^(0+128),f
 13422  15F9  3080               	movlw	128
 13423  15FA  00CE               	movwf	??___ftmul^(0+128)
 13424  15FB  084E               	movf	??___ftmul^(0+128),w
 13425  15FC  05D7               	andwf	___ftmul@sign^(0+128),f
 13426  15FD  17C9               	bsf	(___ftmul@f1^(0+128)+1),7
 13427  15FE  17CC               	bsf	(___ftmul@f2^(0+128)+1),7
 13428  15FF  30FF               	movlw	255
 13429  1600  05CB               	andwf	___ftmul@f2^(0+128),f
 13430  1601  30FF               	movlw	255
 13431  1602  05CC               	andwf	(___ftmul@f2+1)^(0+128),f
 13432  1603  3000               	movlw	0
 13433  1604  05CD               	andwf	(___ftmul@f2+2)^(0+128),f
 13434  1605  3000               	movlw	0
 13435  1606  00D3               	movwf	___ftmul@f3_as_product^(0+128)
 13436  1607  3000               	movlw	0
 13437  1608  00D4               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 13438  1609  3000               	movlw	0
 13439  160A  00D5               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 13440  160B  3007               	movlw	7
 13441  160C  00CE               	movwf	??___ftmul^(0+128)
 13442  160D  084E               	movf	??___ftmul^(0+128),w
 13443  160E  00D6               	movwf	___ftmul@cntr^(0+128)
 13444  160F                     l7091:	
 13445  160F  1C48               	btfss	___ftmul@f1^(0+128),0
 13446  1610  2E17               	goto	l7095
 13447  1611  084B               	movf	___ftmul@f2^(0+128),w
 13448  1612  07D3               	addwf	___ftmul@f3_as_product^(0+128),f
 13449  1613  084C               	movf	(___ftmul@f2+1)^(0+128),w
 13450  1614  3DD4               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 13451  1615  084D               	movf	(___ftmul@f2+2)^(0+128),w
 13452  1616  3DD5               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 13453  1617                     l7095:	
 13454  1617  3001               	movlw	1
 13455  1618                     u7355:	
 13456  1618  36CA               	lsrf	(___ftmul@f1+2)^(0+128),f
 13457  1619  0CC9               	rrf	(___ftmul@f1+1)^(0+128),f
 13458  161A  0CC8               	rrf	___ftmul@f1^(0+128),f
 13459  161B  0B89               	decfsz	9,f
 13460  161C  2E18               	goto	u7355
 13461  161D  3001               	movlw	1
 13462  161E                     u7365:	
 13463  161E  35CB               	lslf	___ftmul@f2^(0+128),f
 13464  161F  0DCC               	rlf	(___ftmul@f2+1)^(0+128),f
 13465  1620  0DCD               	rlf	(___ftmul@f2+2)^(0+128),f
 13466  1621  0B89               	decfsz	9,f
 13467  1622  2E1E               	goto	u7365
 13468  1623  3001               	movlw	1
 13469  1624  02D6               	subwf	___ftmul@cntr^(0+128),f
 13470  1625  1D03               	btfss	3,2
 13471  1626  2E0F               	goto	l7091
 13472  1627  3009               	movlw	9
 13473  1628  00CE               	movwf	??___ftmul^(0+128)
 13474  1629  084E               	movf	??___ftmul^(0+128),w
 13475  162A  00D6               	movwf	___ftmul@cntr^(0+128)
 13476  162B                     l7103:	
 13477  162B  1C48               	btfss	___ftmul@f1^(0+128),0
 13478  162C  2E33               	goto	l7107
 13479  162D  084B               	movf	___ftmul@f2^(0+128),w
 13480  162E  07D3               	addwf	___ftmul@f3_as_product^(0+128),f
 13481  162F  084C               	movf	(___ftmul@f2+1)^(0+128),w
 13482  1630  3DD4               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 13483  1631  084D               	movf	(___ftmul@f2+2)^(0+128),w
 13484  1632  3DD5               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 13485  1633                     l7107:	
 13486  1633  3001               	movlw	1
 13487  1634                     u7395:	
 13488  1634  36CA               	lsrf	(___ftmul@f1+2)^(0+128),f
 13489  1635  0CC9               	rrf	(___ftmul@f1+1)^(0+128),f
 13490  1636  0CC8               	rrf	___ftmul@f1^(0+128),f
 13491  1637  0B89               	decfsz	9,f
 13492  1638  2E34               	goto	u7395
 13493  1639  3001               	movlw	1
 13494  163A                     u7405:	
 13495  163A  36D5               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 13496  163B  0CD4               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 13497  163C  0CD3               	rrf	___ftmul@f3_as_product^(0+128),f
 13498  163D  0B89               	decfsz	9,f
 13499  163E  2E3A               	goto	u7405
 13500  163F  3001               	movlw	1
 13501  1640  02D6               	subwf	___ftmul@cntr^(0+128),f
 13502  1641  1D03               	btfss	3,2
 13503  1642  2E2B               	goto	l7103
 13504  1643  0853               	movf	___ftmul@f3_as_product^(0+128),w
 13505  1644  00A0               	movwf	___ftpack@arg^(0+128)
 13506  1645  0854               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 13507  1646  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13508  1647  0855               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 13509  1648  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13510  1649  0852               	movf	___ftmul@exp^(0+128),w
 13511  164A  00CE               	movwf	??___ftmul^(0+128)
 13512  164B  084E               	movf	??___ftmul^(0+128),w
 13513  164C  00A3               	movwf	___ftpack@exp^(0+128)
 13514  164D  0857               	movf	___ftmul@sign^(0+128),w
 13515  164E  00CF               	movwf	(??___ftmul+1)^(0+128)
 13516  164F  084F               	movf	(??___ftmul+1)^(0+128),w
 13517  1650  00A4               	movwf	___ftpack@sign^(0+128)
 13518  1651  319E  269B         	fcall	___ftpack
 13519  1653  0021               	movlb	1	; select bank1
 13520  1654  0820               	movf	?___ftpack^(0+128),w
 13521  1655  00C8               	movwf	?___ftmul^(0+128)
 13522  1656  0821               	movf	(?___ftpack+1)^(0+128),w
 13523  1657  00C9               	movwf	(?___ftmul+1)^(0+128)
 13524  1658  0822               	movf	(?___ftpack+2)^(0+128),w
 13525  1659  00CA               	movwf	(?___ftmul+2)^(0+128)
 13526  165A  0008               	return
 13527  165B                     __end_of___ftmul:	
 13528                           
 13529                           	psect	text41
 13530  139D                     __ptext41:	
 13531 ;; *************** function ___ftdiv *****************
 13532 ;; Defined at:
 13533 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;  f2              3    8[BANK1 ] float 
 13536 ;;  f1              3   11[BANK1 ] float 
 13537 ;; Auto vars:     Size  Location     Type
 13538 ;;  f3              3   19[BANK1 ] float 
 13539 ;;  sign            1   23[BANK1 ] unsigned char 
 13540 ;;  exp             1   22[BANK1 ] unsigned char 
 13541 ;;  cntr            1   18[BANK1 ] unsigned char 
 13542 ;; Return value:  Size  Location     Type
 13543 ;;                  3    8[BANK1 ] float 
 13544 ;; Registers used:
 13545 ;;		wreg, status,2, status,0, pclath, cstack
 13546 ;; Tracked objects:
 13547 ;;		On entry : 0/0
 13548 ;;		On exit  : 0/0
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13551 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13552 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13553 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13554 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13555 ;;Total ram usage:       16 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    4
 13558 ;; This function calls:
 13559 ;;		___ftpack
 13560 ;; This function is called by:
 13561 ;;		_map
 13562 ;;		_scaleA100kPot
 13563 ;;		_scaleiA100kPot
 13564 ;;		_scaleA10kPot
 13565 ;;		_scaleiA10kPot
 13566 ;;		_exp
 13567 ;;		_scalePotValue
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function ___ftdiv
 13573  139D                     ___ftdiv:	
 13574                           
 13575                           ;incstack = 0
 13576                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13577  139D  0021               	movlb	1	; select bank1
 13578  139E  082B               	movf	___ftdiv@f1^(0+128),w
 13579  139F  00AE               	movwf	??___ftdiv^(0+128)
 13580  13A0  082C               	movf	(___ftdiv@f1+1)^(0+128),w
 13581  13A1  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13582  13A2  082D               	movf	(___ftdiv@f1+2)^(0+128),w
 13583  13A3  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13584  13A4  1003               	clrc
 13585  13A5  0D2F               	rlf	(??___ftdiv^(0+128)+1),w
 13586  13A6  0D30               	rlf	(??___ftdiv^(0+128)+2),w
 13587  13A7  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13588  13A8  0831               	movf	(??___ftdiv+3)^(0+128),w
 13589  13A9  00B6               	movwf	___ftdiv@exp^(0+128)
 13590  13AA  0836               	movf	___ftdiv@exp^(0+128),w
 13591  13AB  1D03               	btfss	3,2
 13592  13AC  2BB4               	goto	l7255
 13593  13AD  3000               	movlw	0
 13594  13AE  00A8               	movwf	?___ftdiv^(0+128)
 13595  13AF  3000               	movlw	0
 13596  13B0  00A9               	movwf	(?___ftdiv+1)^(0+128)
 13597  13B1  3000               	movlw	0
 13598  13B2  00AA               	movwf	(?___ftdiv+2)^(0+128)
 13599  13B3  0008               	return
 13600  13B4                     l7255:	
 13601  13B4  0828               	movf	___ftdiv@f2^(0+128),w
 13602  13B5  00AE               	movwf	??___ftdiv^(0+128)
 13603  13B6  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13604  13B7  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13605  13B8  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13606  13B9  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13607  13BA  1003               	clrc
 13608  13BB  0D2F               	rlf	(??___ftdiv^(0+128)+1),w
 13609  13BC  0D30               	rlf	(??___ftdiv^(0+128)+2),w
 13610  13BD  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13611  13BE  0831               	movf	(??___ftdiv+3)^(0+128),w
 13612  13BF  00B7               	movwf	___ftdiv@sign^(0+128)
 13613  13C0  0837               	movf	___ftdiv@sign^(0+128),w
 13614  13C1  1D03               	btfss	3,2
 13615  13C2  2BCA               	goto	l7261
 13616  13C3  3000               	movlw	0
 13617  13C4  00A8               	movwf	?___ftdiv^(0+128)
 13618  13C5  3000               	movlw	0
 13619  13C6  00A9               	movwf	(?___ftdiv+1)^(0+128)
 13620  13C7  3000               	movlw	0
 13621  13C8  00AA               	movwf	(?___ftdiv+2)^(0+128)
 13622  13C9  0008               	return
 13623  13CA                     l7261:	
 13624  13CA  3000               	movlw	0
 13625  13CB  00B3               	movwf	___ftdiv@f3^(0+128)
 13626  13CC  3000               	movlw	0
 13627  13CD  00B4               	movwf	(___ftdiv@f3+1)^(0+128)
 13628  13CE  3000               	movlw	0
 13629  13CF  00B5               	movwf	(___ftdiv@f3+2)^(0+128)
 13630  13D0  3089               	movlw	137
 13631  13D1  0737               	addwf	___ftdiv@sign^(0+128),w
 13632  13D2  00AE               	movwf	??___ftdiv^(0+128)
 13633  13D3  082E               	movf	??___ftdiv^(0+128),w
 13634  13D4  02B6               	subwf	___ftdiv@exp^(0+128),f
 13635  13D5  082B               	movf	___ftdiv@f1^(0+128),w
 13636  13D6  00AE               	movwf	??___ftdiv^(0+128)
 13637  13D7  082C               	movf	(___ftdiv@f1+1)^(0+128),w
 13638  13D8  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13639  13D9  082D               	movf	(___ftdiv@f1+2)^(0+128),w
 13640  13DA  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13641  13DB  3010               	movlw	16
 13642  13DC                     u7625:	
 13643  13DC  36B0               	lsrf	(??___ftdiv^(0+128)+2),f
 13644  13DD  0CAF               	rrf	(??___ftdiv^(0+128)+1),f
 13645  13DE  0CAE               	rrf	??___ftdiv^(0+128),f
 13646  13DF  0B89               	decfsz	9,f
 13647  13E0  2BDC               	goto	u7625
 13648  13E1  082E               	movf	??___ftdiv^(0+128),w
 13649  13E2  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13650  13E3  0831               	movf	(??___ftdiv+3)^(0+128),w
 13651  13E4  00B7               	movwf	___ftdiv@sign^(0+128)
 13652  13E5  0828               	movf	___ftdiv@f2^(0+128),w
 13653  13E6  00AE               	movwf	??___ftdiv^(0+128)
 13654  13E7  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13655  13E8  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13656  13E9  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13657  13EA  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13658  13EB  3010               	movlw	16
 13659  13EC                     u7635:	
 13660  13EC  36B0               	lsrf	(??___ftdiv^(0+128)+2),f
 13661  13ED  0CAF               	rrf	(??___ftdiv^(0+128)+1),f
 13662  13EE  0CAE               	rrf	??___ftdiv^(0+128),f
 13663  13EF  0B89               	decfsz	9,f
 13664  13F0  2BEC               	goto	u7635
 13665  13F1  082E               	movf	??___ftdiv^(0+128),w
 13666  13F2  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13667  13F3  0831               	movf	(??___ftdiv+3)^(0+128),w
 13668  13F4  06B7               	xorwf	___ftdiv@sign^(0+128),f
 13669  13F5  3080               	movlw	128
 13670  13F6  00AE               	movwf	??___ftdiv^(0+128)
 13671  13F7  082E               	movf	??___ftdiv^(0+128),w
 13672  13F8  05B7               	andwf	___ftdiv@sign^(0+128),f
 13673  13F9  17AC               	bsf	(___ftdiv@f1^(0+128)+1),7
 13674  13FA  30FF               	movlw	255
 13675  13FB  05AB               	andwf	___ftdiv@f1^(0+128),f
 13676  13FC  30FF               	movlw	255
 13677  13FD  05AC               	andwf	(___ftdiv@f1+1)^(0+128),f
 13678  13FE  3000               	movlw	0
 13679  13FF  05AD               	andwf	(___ftdiv@f1+2)^(0+128),f
 13680  1400  17A9               	bsf	(___ftdiv@f2^(0+128)+1),7
 13681  1401  30FF               	movlw	255
 13682  1402  05A8               	andwf	___ftdiv@f2^(0+128),f
 13683  1403  30FF               	movlw	255
 13684  1404  05A9               	andwf	(___ftdiv@f2+1)^(0+128),f
 13685  1405  3000               	movlw	0
 13686  1406  05AA               	andwf	(___ftdiv@f2+2)^(0+128),f
 13687  1407  3018               	movlw	24
 13688  1408  00AE               	movwf	??___ftdiv^(0+128)
 13689  1409  082E               	movf	??___ftdiv^(0+128),w
 13690  140A  00B2               	movwf	___ftdiv@cntr^(0+128)
 13691  140B                     l7275:	
 13692  140B  3001               	movlw	1
 13693  140C                     u7645:	
 13694  140C  35B3               	lslf	___ftdiv@f3^(0+128),f
 13695  140D  0DB4               	rlf	(___ftdiv@f3+1)^(0+128),f
 13696  140E  0DB5               	rlf	(___ftdiv@f3+2)^(0+128),f
 13697  140F  0B89               	decfsz	9,f
 13698  1410  2C0C               	goto	u7645
 13699  1411  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13700  1412  022D               	subwf	(___ftdiv@f1+2)^(0+128),w
 13701  1413  1D03               	skipz
 13702  1414  2C1B               	goto	u7655
 13703  1415  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13704  1416  022C               	subwf	(___ftdiv@f1+1)^(0+128),w
 13705  1417  1D03               	skipz
 13706  1418  2C1B               	goto	u7655
 13707  1419  0828               	movf	___ftdiv@f2^(0+128),w
 13708  141A  022B               	subwf	___ftdiv@f1^(0+128),w
 13709  141B                     u7655:	
 13710  141B  1C03               	skipc
 13711  141C  2C24               	goto	l7283
 13712  141D  0828               	movf	___ftdiv@f2^(0+128),w
 13713  141E  02AB               	subwf	___ftdiv@f1^(0+128),f
 13714  141F  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13715  1420  3BAC               	subwfb	(___ftdiv@f1+1)^(0+128),f
 13716  1421  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13717  1422  3BAD               	subwfb	(___ftdiv@f1+2)^(0+128),f
 13718  1423  1433               	bsf	___ftdiv@f3^(0+128),0
 13719  1424                     l7283:	
 13720  1424  3001               	movlw	1
 13721  1425                     u7665:	
 13722  1425  35AB               	lslf	___ftdiv@f1^(0+128),f
 13723  1426  0DAC               	rlf	(___ftdiv@f1+1)^(0+128),f
 13724  1427  0DAD               	rlf	(___ftdiv@f1+2)^(0+128),f
 13725  1428  0B89               	decfsz	9,f
 13726  1429  2C25               	goto	u7665
 13727  142A  3001               	movlw	1
 13728  142B  02B2               	subwf	___ftdiv@cntr^(0+128),f
 13729  142C  1D03               	btfss	3,2
 13730  142D  2C0B               	goto	l7275
 13731  142E  0833               	movf	___ftdiv@f3^(0+128),w
 13732  142F  00A0               	movwf	___ftpack@arg^(0+128)
 13733  1430  0834               	movf	(___ftdiv@f3+1)^(0+128),w
 13734  1431  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13735  1432  0835               	movf	(___ftdiv@f3+2)^(0+128),w
 13736  1433  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13737  1434  0836               	movf	___ftdiv@exp^(0+128),w
 13738  1435  00AE               	movwf	??___ftdiv^(0+128)
 13739  1436  082E               	movf	??___ftdiv^(0+128),w
 13740  1437  00A3               	movwf	___ftpack@exp^(0+128)
 13741  1438  0837               	movf	___ftdiv@sign^(0+128),w
 13742  1439  00AF               	movwf	(??___ftdiv+1)^(0+128)
 13743  143A  082F               	movf	(??___ftdiv+1)^(0+128),w
 13744  143B  00A4               	movwf	___ftpack@sign^(0+128)
 13745  143C  319E  269B         	fcall	___ftpack
 13746  143E  0021               	movlb	1	; select bank1
 13747  143F  0820               	movf	?___ftpack^(0+128),w
 13748  1440  00A8               	movwf	?___ftdiv^(0+128)
 13749  1441  0821               	movf	(?___ftpack+1)^(0+128),w
 13750  1442  00A9               	movwf	(?___ftdiv+1)^(0+128)
 13751  1443  0822               	movf	(?___ftpack+2)^(0+128),w
 13752  1444  00AA               	movwf	(?___ftdiv+2)^(0+128)
 13753  1445  0008               	return
 13754  1446                     __end_of___ftdiv:	
 13755                           
 13756                           	psect	text42
 13757  0878                     __ptext42:	
 13758 ;; *************** function ___ftadd *****************
 13759 ;; Defined at:
 13760 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 13761 ;; Parameters:    Size  Location     Type
 13762 ;;  f1              3   27[BANK1 ] float 
 13763 ;;  f2              3   30[BANK1 ] float 
 13764 ;; Auto vars:     Size  Location     Type
 13765 ;;  exp1            1   39[BANK1 ] unsigned char 
 13766 ;;  exp2            1   38[BANK1 ] unsigned char 
 13767 ;;  sign            1   37[BANK1 ] unsigned char 
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  3   27[BANK1 ] float 
 13770 ;; Registers used:
 13771 ;;		wreg, status,2, status,0, pclath, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13777 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13778 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13779 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13780 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13781 ;;Total ram usage:       13 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    4
 13784 ;; This function calls:
 13785 ;;		___ftpack
 13786 ;; This function is called by:
 13787 ;;		_map
 13788 ;;		_scaleiA10kPot
 13789 ;;		___ftsub
 13790 ;;		_floor
 13791 ;;		_log
 13792 ;;		_eval_poly
 13793 ;;		_scalePotValue
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           
 13798                           ;psect for function ___ftadd
 13799  0878                     ___ftadd:	
 13800                           
 13801                           ;incstack = 0
 13802                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13803  0878  0021               	movlb	1	; select bank1
 13804  0879  083B               	movf	___ftadd@f1^(0+128),w
 13805  087A  00C1               	movwf	??___ftadd^(0+128)
 13806  087B  083C               	movf	(___ftadd@f1+1)^(0+128),w
 13807  087C  00C2               	movwf	(??___ftadd^(0+128)+1)
 13808  087D  083D               	movf	(___ftadd@f1+2)^(0+128),w
 13809  087E  00C3               	movwf	(??___ftadd^(0+128)+2)
 13810  087F  1003               	clrc
 13811  0880  0D42               	rlf	(??___ftadd^(0+128)+1),w
 13812  0881  0D43               	rlf	(??___ftadd^(0+128)+2),w
 13813  0882  00C4               	movwf	(??___ftadd+3)^(0+128)
 13814  0883  0844               	movf	(??___ftadd+3)^(0+128),w
 13815  0884  00C7               	movwf	___ftadd@exp1^(0+128)
 13816  0885  083E               	movf	___ftadd@f2^(0+128),w
 13817  0886  00C1               	movwf	??___ftadd^(0+128)
 13818  0887  083F               	movf	(___ftadd@f2+1)^(0+128),w
 13819  0888  00C2               	movwf	(??___ftadd^(0+128)+1)
 13820  0889  0840               	movf	(___ftadd@f2+2)^(0+128),w
 13821  088A  00C3               	movwf	(??___ftadd^(0+128)+2)
 13822  088B  1003               	clrc
 13823  088C  0D42               	rlf	(??___ftadd^(0+128)+1),w
 13824  088D  0D43               	rlf	(??___ftadd^(0+128)+2),w
 13825  088E  00C4               	movwf	(??___ftadd+3)^(0+128)
 13826  088F  0844               	movf	(??___ftadd+3)^(0+128),w
 13827  0890  00C6               	movwf	___ftadd@exp2^(0+128)
 13828  0891  0847               	movf	___ftadd@exp1^(0+128),w
 13829  0892  1903               	btfsc	3,2
 13830  0893  28A0               	goto	l6983
 13831  0894  0846               	movf	___ftadd@exp2^(0+128),w
 13832  0895  0247               	subwf	___ftadd@exp1^(0+128),w
 13833  0896  1803               	skipnc
 13834  0897  28A7               	goto	l6987
 13835  0898  0347               	decf	___ftadd@exp1^(0+128),w
 13836  0899  3AFF               	xorlw	255
 13837  089A  0746               	addwf	___ftadd@exp2^(0+128),w
 13838  089B  00C1               	movwf	??___ftadd^(0+128)
 13839  089C  3019               	movlw	25
 13840  089D  0241               	subwf	??___ftadd^(0+128),w
 13841  089E  1C03               	skipc
 13842  089F  28A7               	goto	l6987
 13843  08A0                     l6983:	
 13844  08A0  083E               	movf	___ftadd@f2^(0+128),w
 13845  08A1  00BB               	movwf	?___ftadd^(0+128)
 13846  08A2  083F               	movf	(___ftadd@f2+1)^(0+128),w
 13847  08A3  00BC               	movwf	(?___ftadd+1)^(0+128)
 13848  08A4  0840               	movf	(___ftadd@f2+2)^(0+128),w
 13849  08A5  00BD               	movwf	(?___ftadd+2)^(0+128)
 13850  08A6  0008               	return
 13851  08A7                     l6987:	
 13852  08A7  0846               	movf	___ftadd@exp2^(0+128),w
 13853  08A8  1903               	btfsc	3,2
 13854  08A9  0008               	return
 13855  08AA  0847               	movf	___ftadd@exp1^(0+128),w
 13856  08AB  0246               	subwf	___ftadd@exp2^(0+128),w
 13857  08AC  1803               	skipnc
 13858  08AD  28B6               	goto	l6993
 13859  08AE  0346               	decf	___ftadd@exp2^(0+128),w
 13860  08AF  3AFF               	xorlw	255
 13861  08B0  0747               	addwf	___ftadd@exp1^(0+128),w
 13862  08B1  00C1               	movwf	??___ftadd^(0+128)
 13863  08B2  3019               	movlw	25
 13864  08B3  0241               	subwf	??___ftadd^(0+128),w
 13865  08B4  1803               	btfsc	3,0
 13866  08B5  0008               	return
 13867  08B6                     l6993:	
 13868  08B6  3006               	movlw	6
 13869  08B7  00C1               	movwf	??___ftadd^(0+128)
 13870  08B8  0841               	movf	??___ftadd^(0+128),w
 13871  08B9  00C5               	movwf	___ftadd@sign^(0+128)
 13872  08BA  1BBD               	btfsc	(___ftadd@f1+2)^(0+128),7
 13873  08BB  17C5               	bsf	___ftadd@sign^(0+128),7
 13874  08BC  1BC0               	btfsc	(___ftadd@f2+2)^(0+128),7
 13875  08BD  1745               	bsf	___ftadd@sign^(0+128),6
 13876  08BE  17BC               	bsf	(___ftadd@f1^(0+128)+1),7
 13877  08BF  30FF               	movlw	255
 13878  08C0  05BB               	andwf	___ftadd@f1^(0+128),f
 13879  08C1  30FF               	movlw	255
 13880  08C2  05BC               	andwf	(___ftadd@f1+1)^(0+128),f
 13881  08C3  3000               	movlw	0
 13882  08C4  05BD               	andwf	(___ftadd@f1+2)^(0+128),f
 13883  08C5  17BF               	bsf	(___ftadd@f2^(0+128)+1),7
 13884  08C6  30FF               	movlw	255
 13885  08C7  05BE               	andwf	___ftadd@f2^(0+128),f
 13886  08C8  30FF               	movlw	255
 13887  08C9  05BF               	andwf	(___ftadd@f2+1)^(0+128),f
 13888  08CA  3000               	movlw	0
 13889  08CB  05C0               	andwf	(___ftadd@f2+2)^(0+128),f
 13890  08CC  0846               	movf	___ftadd@exp2^(0+128),w
 13891  08CD  0247               	subwf	___ftadd@exp1^(0+128),w
 13892  08CE  1803               	skipnc
 13893  08CF  28F2               	goto	l7015
 13894  08D0                     l7005:	
 13895  08D0  3001               	movlw	1
 13896  08D1                     u7135:	
 13897  08D1  35BE               	lslf	___ftadd@f2^(0+128),f
 13898  08D2  0DBF               	rlf	(___ftadd@f2+1)^(0+128),f
 13899  08D3  0DC0               	rlf	(___ftadd@f2+2)^(0+128),f
 13900  08D4  0B89               	decfsz	9,f
 13901  08D5  28D1               	goto	u7135
 13902  08D6  3001               	movlw	1
 13903  08D7  02C6               	subwf	___ftadd@exp2^(0+128),f
 13904  08D8  0846               	movf	___ftadd@exp2^(0+128),w
 13905  08D9  0647               	xorwf	___ftadd@exp1^(0+128),w
 13906  08DA  1903               	skipnz
 13907  08DB  28ED               	goto	l7013
 13908  08DC  3001               	movlw	1
 13909  08DD  02C5               	subwf	___ftadd@sign^(0+128),f
 13910  08DE  0845               	movf	___ftadd@sign^(0+128),w
 13911  08DF  3907               	andlw	7
 13912  08E0  1903               	btfsc	3,2
 13913  08E1  28ED               	goto	l7013
 13914  08E2  28D0               	goto	l7005
 13915  08E3                     l7011:	
 13916  08E3  3001               	movlw	1
 13917  08E4                     u7165:	
 13918  08E4  36BD               	lsrf	(___ftadd@f1+2)^(0+128),f
 13919  08E5  0CBC               	rrf	(___ftadd@f1+1)^(0+128),f
 13920  08E6  0CBB               	rrf	___ftadd@f1^(0+128),f
 13921  08E7  0B89               	decfsz	9,f
 13922  08E8  28E4               	goto	u7165
 13923  08E9  3001               	movlw	1
 13924  08EA  00C1               	movwf	??___ftadd^(0+128)
 13925  08EB  0841               	movf	??___ftadd^(0+128),w
 13926  08EC  07C7               	addwf	___ftadd@exp1^(0+128),f
 13927  08ED                     l7013:	
 13928  08ED  0847               	movf	___ftadd@exp1^(0+128),w
 13929  08EE  0646               	xorwf	___ftadd@exp2^(0+128),w
 13930  08EF  1903               	btfsc	3,2
 13931  08F0  2917               	goto	l1941
 13932  08F1  28E3               	goto	l7011
 13933  08F2                     l7015:	
 13934  08F2  0847               	movf	___ftadd@exp1^(0+128),w
 13935  08F3  0246               	subwf	___ftadd@exp2^(0+128),w
 13936  08F4  1803               	skipnc
 13937  08F5  2917               	goto	l1941
 13938  08F6                     l7017:	
 13939  08F6  3001               	movlw	1
 13940  08F7                     u7195:	
 13941  08F7  35BB               	lslf	___ftadd@f1^(0+128),f
 13942  08F8  0DBC               	rlf	(___ftadd@f1+1)^(0+128),f
 13943  08F9  0DBD               	rlf	(___ftadd@f1+2)^(0+128),f
 13944  08FA  0B89               	decfsz	9,f
 13945  08FB  28F7               	goto	u7195
 13946  08FC  3001               	movlw	1
 13947  08FD  02C7               	subwf	___ftadd@exp1^(0+128),f
 13948  08FE  0846               	movf	___ftadd@exp2^(0+128),w
 13949  08FF  0647               	xorwf	___ftadd@exp1^(0+128),w
 13950  0900  1903               	skipnz
 13951  0901  2913               	goto	l7025
 13952  0902  3001               	movlw	1
 13953  0903  02C5               	subwf	___ftadd@sign^(0+128),f
 13954  0904  0845               	movf	___ftadd@sign^(0+128),w
 13955  0905  3907               	andlw	7
 13956  0906  1903               	btfsc	3,2
 13957  0907  2913               	goto	l7025
 13958  0908  28F6               	goto	l7017
 13959  0909                     l7023:	
 13960  0909  3001               	movlw	1
 13961  090A                     u7225:	
 13962  090A  36C0               	lsrf	(___ftadd@f2+2)^(0+128),f
 13963  090B  0CBF               	rrf	(___ftadd@f2+1)^(0+128),f
 13964  090C  0CBE               	rrf	___ftadd@f2^(0+128),f
 13965  090D  0B89               	decfsz	9,f
 13966  090E  290A               	goto	u7225
 13967  090F  3001               	movlw	1
 13968  0910  00C1               	movwf	??___ftadd^(0+128)
 13969  0911  0841               	movf	??___ftadd^(0+128),w
 13970  0912  07C6               	addwf	___ftadd@exp2^(0+128),f
 13971  0913                     l7025:	
 13972  0913  0847               	movf	___ftadd@exp1^(0+128),w
 13973  0914  0646               	xorwf	___ftadd@exp2^(0+128),w
 13974  0915  1D03               	skipz
 13975  0916  2909               	goto	l7023
 13976  0917                     l1941:	
 13977  0917  1FC5               	btfss	___ftadd@sign^(0+128),7
 13978  0918  2929               	goto	l7029
 13979  0919  30FF               	movlw	255
 13980  091A  06BB               	xorwf	___ftadd@f1^(0+128),f
 13981  091B  30FF               	movlw	255
 13982  091C  06BC               	xorwf	(___ftadd@f1+1)^(0+128),f
 13983  091D  30FF               	movlw	255
 13984  091E  06BD               	xorwf	(___ftadd@f1+2)^(0+128),f
 13985  091F  3001               	movlw	1
 13986  0920  07BB               	addwf	___ftadd@f1^(0+128),f
 13987  0921  3000               	movlw	0
 13988  0922  1803               	skipnc
 13989  0923  3001               	movlw	1
 13990  0924  07BC               	addwf	(___ftadd@f1+1)^(0+128),f
 13991  0925  3000               	movlw	0
 13992  0926  1803               	skipnc
 13993  0927  3001               	movlw	1
 13994  0928  07BD               	addwf	(___ftadd@f1+2)^(0+128),f
 13995  0929                     l7029:	
 13996  0929  1F45               	btfss	___ftadd@sign^(0+128),6
 13997  092A  293B               	goto	l7033
 13998  092B  30FF               	movlw	255
 13999  092C  06BE               	xorwf	___ftadd@f2^(0+128),f
 14000  092D  30FF               	movlw	255
 14001  092E  06BF               	xorwf	(___ftadd@f2+1)^(0+128),f
 14002  092F  30FF               	movlw	255
 14003  0930  06C0               	xorwf	(___ftadd@f2+2)^(0+128),f
 14004  0931  3001               	movlw	1
 14005  0932  07BE               	addwf	___ftadd@f2^(0+128),f
 14006  0933  3000               	movlw	0
 14007  0934  1803               	skipnc
 14008  0935  3001               	movlw	1
 14009  0936  07BF               	addwf	(___ftadd@f2+1)^(0+128),f
 14010  0937  3000               	movlw	0
 14011  0938  1803               	skipnc
 14012  0939  3001               	movlw	1
 14013  093A  07C0               	addwf	(___ftadd@f2+2)^(0+128),f
 14014  093B                     l7033:	
 14015  093B  01C5               	clrf	___ftadd@sign^(0+128)
 14016  093C  083B               	movf	___ftadd@f1^(0+128),w
 14017  093D  07BE               	addwf	___ftadd@f2^(0+128),f
 14018  093E  083C               	movf	(___ftadd@f1+1)^(0+128),w
 14019  093F  3DBF               	addwfc	(___ftadd@f2+1)^(0+128),f
 14020  0940  083D               	movf	(___ftadd@f1+2)^(0+128),w
 14021  0941  3DC0               	addwfc	(___ftadd@f2+2)^(0+128),f
 14022  0942  1FC0               	btfss	(___ftadd@f2+2)^(0+128),7
 14023  0943  2956               	goto	l7043
 14024  0944  30FF               	movlw	255
 14025  0945  06BE               	xorwf	___ftadd@f2^(0+128),f
 14026  0946  30FF               	movlw	255
 14027  0947  06BF               	xorwf	(___ftadd@f2+1)^(0+128),f
 14028  0948  30FF               	movlw	255
 14029  0949  06C0               	xorwf	(___ftadd@f2+2)^(0+128),f
 14030  094A  3001               	movlw	1
 14031  094B  07BE               	addwf	___ftadd@f2^(0+128),f
 14032  094C  3000               	movlw	0
 14033  094D  1803               	skipnc
 14034  094E  3001               	movlw	1
 14035  094F  07BF               	addwf	(___ftadd@f2+1)^(0+128),f
 14036  0950  3000               	movlw	0
 14037  0951  1803               	skipnc
 14038  0952  3001               	movlw	1
 14039  0953  07C0               	addwf	(___ftadd@f2+2)^(0+128),f
 14040  0954  01C5               	clrf	___ftadd@sign^(0+128)
 14041  0955  0AC5               	incf	___ftadd@sign^(0+128),f
 14042  0956                     l7043:	
 14043  0956  083E               	movf	___ftadd@f2^(0+128),w
 14044  0957  00A0               	movwf	___ftpack@arg^(0+128)
 14045  0958  083F               	movf	(___ftadd@f2+1)^(0+128),w
 14046  0959  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 14047  095A  0840               	movf	(___ftadd@f2+2)^(0+128),w
 14048  095B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 14049  095C  0847               	movf	___ftadd@exp1^(0+128),w
 14050  095D  00C1               	movwf	??___ftadd^(0+128)
 14051  095E  0841               	movf	??___ftadd^(0+128),w
 14052  095F  00A3               	movwf	___ftpack@exp^(0+128)
 14053  0960  0845               	movf	___ftadd@sign^(0+128),w
 14054  0961  00C2               	movwf	(??___ftadd+1)^(0+128)
 14055  0962  0842               	movf	(??___ftadd+1)^(0+128),w
 14056  0963  00A4               	movwf	___ftpack@sign^(0+128)
 14057  0964  319E  269B         	fcall	___ftpack
 14058  0966  0021               	movlb	1	; select bank1
 14059  0967  0820               	movf	?___ftpack^(0+128),w
 14060  0968  00BB               	movwf	?___ftadd^(0+128)
 14061  0969  0821               	movf	(?___ftpack+1)^(0+128),w
 14062  096A  00BC               	movwf	(?___ftadd+1)^(0+128)
 14063  096B  0822               	movf	(?___ftpack+2)^(0+128),w
 14064  096C  00BD               	movwf	(?___ftadd+2)^(0+128)
 14065  096D  0008               	return
 14066  096E                     __end_of___ftadd:	
 14067                           
 14068                           	psect	text43
 14069  1E9B                     __ptext43:	
 14070 ;; *************** function ___ftpack *****************
 14071 ;; Defined at:
 14072 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;  arg             3    0[BANK1 ] unsigned um
 14075 ;;  exp             1    3[BANK1 ] unsigned char 
 14076 ;;  sign            1    4[BANK1 ] unsigned char 
 14077 ;; Auto vars:     Size  Location     Type
 14078 ;;		None
 14079 ;; Return value:  Size  Location     Type
 14080 ;;                  3    0[BANK1 ] float 
 14081 ;; Registers used:
 14082 ;;		wreg, status,2, status,0
 14083 ;; Tracked objects:
 14084 ;;		On entry : 0/0
 14085 ;;		On exit  : 0/0
 14086 ;;		Unchanged: 0/0
 14087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14088 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14090 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14091 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14092 ;;Total ram usage:        8 bytes
 14093 ;; Hardware stack levels used:    1
 14094 ;; Hardware stack levels required when called:    3
 14095 ;; This function calls:
 14096 ;;		Nothing
 14097 ;; This function is called by:
 14098 ;;		___altoft
 14099 ;;		___awtoft
 14100 ;;		___ftadd
 14101 ;;		___ftdiv
 14102 ;;		___ftmul
 14103 ;;		___lltoft
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function ___ftpack
 14109  1E9B                     ___ftpack:	
 14110                           
 14111                           ;incstack = 0
 14112                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14113  1E9B  0021               	movlb	1	; select bank1
 14114  1E9C  0823               	movf	___ftpack@exp^(0+128),w
 14115  1E9D  1903               	btfsc	3,2
 14116  1E9E  2EA4               	goto	l6883
 14117  1E9F  0822               	movf	(___ftpack@arg+2)^(0+128),w
 14118  1EA0  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 14119  1EA1  0420               	iorwf	___ftpack@arg^(0+128),w
 14120  1EA2  1D03               	skipz
 14121  1EA3  2EB5               	goto	l6889
 14122  1EA4                     l6883:	
 14123  1EA4  3000               	movlw	0
 14124  1EA5  00A0               	movwf	?___ftpack^(0+128)
 14125  1EA6  3000               	movlw	0
 14126  1EA7  00A1               	movwf	(?___ftpack+1)^(0+128)
 14127  1EA8  3000               	movlw	0
 14128  1EA9  00A2               	movwf	(?___ftpack+2)^(0+128)
 14129  1EAA  0008               	return
 14130  1EAB                     l6887:	
 14131  1EAB  3001               	movlw	1
 14132  1EAC  00A5               	movwf	??___ftpack^(0+128)
 14133  1EAD  0825               	movf	??___ftpack^(0+128),w
 14134  1EAE  07A3               	addwf	___ftpack@exp^(0+128),f
 14135  1EAF  3001               	movlw	1
 14136  1EB0                     u6865:	
 14137  1EB0  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 14138  1EB1  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 14139  1EB2  0CA0               	rrf	___ftpack@arg^(0+128),f
 14140  1EB3  0B89               	decfsz	9,f
 14141  1EB4  2EB0               	goto	u6865
 14142  1EB5                     l6889:	
 14143  1EB5  30FE               	movlw	254
 14144  1EB6  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 14145  1EB7  1903               	btfsc	3,2
 14146  1EB8  2ECE               	goto	l1910
 14147  1EB9  2EAB               	goto	l6887
 14148  1EBA                     l6891:	
 14149  1EBA  3001               	movlw	1
 14150  1EBB  00A5               	movwf	??___ftpack^(0+128)
 14151  1EBC  0825               	movf	??___ftpack^(0+128),w
 14152  1EBD  07A3               	addwf	___ftpack@exp^(0+128),f
 14153  1EBE  3001               	movlw	1
 14154  1EBF  07A0               	addwf	___ftpack@arg^(0+128),f
 14155  1EC0  3000               	movlw	0
 14156  1EC1  1803               	skipnc
 14157  1EC2  3001               	movlw	1
 14158  1EC3  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 14159  1EC4  3000               	movlw	0
 14160  1EC5  1803               	skipnc
 14161  1EC6  3001               	movlw	1
 14162  1EC7  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 14163  1EC8  3001               	movlw	1
 14164  1EC9                     u6885:	
 14165  1EC9  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 14166  1ECA  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 14167  1ECB  0CA0               	rrf	___ftpack@arg^(0+128),f
 14168  1ECC  0B89               	decfsz	9,f
 14169  1ECD  2EC9               	goto	u6885
 14170  1ECE                     l1910:	
 14171  1ECE  30FF               	movlw	255
 14172  1ECF  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 14173  1ED0  1903               	btfsc	3,2
 14174  1ED1  2EDB               	goto	l6899
 14175  1ED2  2EBA               	goto	l6891
 14176  1ED3                     l6897:	
 14177  1ED3  3001               	movlw	1
 14178  1ED4  02A3               	subwf	___ftpack@exp^(0+128),f
 14179  1ED5  3001               	movlw	1
 14180  1ED6                     u6905:	
 14181  1ED6  35A0               	lslf	___ftpack@arg^(0+128),f
 14182  1ED7  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 14183  1ED8  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 14184  1ED9  0B89               	decfsz	9,f
 14185  1EDA  2ED6               	goto	u6905
 14186  1EDB                     l6899:	
 14187  1EDB  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 14188  1EDC  2EE1               	goto	l1917
 14189  1EDD  3002               	movlw	2
 14190  1EDE  0223               	subwf	___ftpack@exp^(0+128),w
 14191  1EDF  1803               	skipnc
 14192  1EE0  2ED3               	goto	l6897
 14193  1EE1                     l1917:	
 14194  1EE1  1823               	btfsc	___ftpack@exp^(0+128),0
 14195  1EE2  2EE9               	goto	l1918
 14196  1EE3  30FF               	movlw	255
 14197  1EE4  05A0               	andwf	___ftpack@arg^(0+128),f
 14198  1EE5  307F               	movlw	127
 14199  1EE6  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 14200  1EE7  30FF               	movlw	255
 14201  1EE8  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 14202  1EE9                     l1918:	
 14203  1EE9  1003               	clrc
 14204  1EEA  0CA3               	rrf	___ftpack@exp^(0+128),f
 14205  1EEB  0823               	movf	___ftpack@exp^(0+128),w
 14206  1EEC  00A5               	movwf	??___ftpack^(0+128)
 14207  1EED  01A6               	clrf	(??___ftpack^(0+128)+1)
 14208  1EEE  01A7               	clrf	(??___ftpack^(0+128)+2)
 14209  1EEF  3010               	movlw	16
 14210  1EF0                     u6945:	
 14211  1EF0  35A5               	lslf	??___ftpack^(0+128),f
 14212  1EF1  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 14213  1EF2  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 14214  1EF3  0B89               	decfsz	9,f
 14215  1EF4  2EF0               	goto	u6945
 14216  1EF5  0825               	movf	??___ftpack^(0+128),w
 14217  1EF6  04A0               	iorwf	___ftpack@arg^(0+128),f
 14218  1EF7  0826               	movf	(??___ftpack+1)^(0+128),w
 14219  1EF8  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 14220  1EF9  0827               	movf	(??___ftpack+2)^(0+128),w
 14221  1EFA  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 14222  1EFB  0824               	movf	___ftpack@sign^(0+128),w
 14223  1EFC  1903               	btfsc	3,2
 14224  1EFD  0008               	return
 14225  1EFE  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 14226  1EFF  0008               	return
 14227  1F00                     __end_of___ftpack:	
 14228                           
 14229                           	psect	text44
 14230  2587                     __ptext44:	
 14231 ;; *************** function _initSwitchBypass *****************
 14232 ;; Defined at:
 14233 ;;		line 29 in file "SwitchBypass.c"
 14234 ;; Parameters:    Size  Location     Type
 14235 ;;		None
 14236 ;; Auto vars:     Size  Location     Type
 14237 ;;  initState       2   22[BANK1 ] int 
 14238 ;; Return value:  Size  Location     Type
 14239 ;;                  1    wreg      void 
 14240 ;; Registers used:
 14241 ;;		wreg, status,2, status,0, pclath, cstack
 14242 ;; Tracked objects:
 14243 ;;		On entry : 0/0
 14244 ;;		On exit  : 0/0
 14245 ;;		Unchanged: 0/0
 14246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14248 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14250 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14251 ;;Total ram usage:        2 bytes
 14252 ;; Hardware stack levels used:    1
 14253 ;; Hardware stack levels required when called:    6
 14254 ;; This function calls:
 14255 ;;		_getSwitchBypassState
 14256 ;;		_setSwitchBypassState
 14257 ;; This function is called by:
 14258 ;;		_main
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           
 14263                           ;psect for function _initSwitchBypass
 14264  2587                     _initSwitchBypass:	
 14265                           
 14266                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14267                           
 14268                           ;incstack = 0
 14269                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14270  2587  31A5  2552  31A5   	fcall	_getSwitchBypassState
 14271  258A  0021               	movlb	1	; select bank1
 14272  258B  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14273  258C  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14274  258D  0820               	movf	?_getSwitchBypassState^(0+128),w
 14275  258E  00B6               	movwf	initSwitchBypass@initState^(0+128)
 14276                           
 14277                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14278  258F  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14279  2590  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14280  2591  0836               	movf	initSwitchBypass@initState^(0+128),w
 14281  2592  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 14282  2593  319B  23B2         	fcall	_setSwitchBypassState
 14283  2595  0008               	return
 14284  2596                     __end_of_initSwitchBypass:	
 14285                           
 14286                           	psect	text45
 14287  1BB2                     __ptext45:	
 14288 ;; *************** function _setSwitchBypassState *****************
 14289 ;; Defined at:
 14290 ;;		line 134 in file "SwitchBypass.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;  f_state         2   18[BANK1 ] int 
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;		None
 14295 ;; Return value:  Size  Location     Type
 14296 ;;                  1    wreg      void 
 14297 ;; Registers used:
 14298 ;;		wreg, status,2, status,0, pclath, cstack
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14304 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14306 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14307 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14308 ;;Total ram usage:        4 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    5
 14311 ;; This function calls:
 14312 ;;		_updateSwitchBypassState
 14313 ;;		_wait_ms
 14314 ;; This function is called by:
 14315 ;;		_initSwitchBypass
 14316 ;;		_updateSwitchBypass
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           
 14321                           ;psect for function _setSwitchBypassState
 14322  1BB2                     _setSwitchBypassState:	
 14323                           
 14324                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 14325                           
 14326                           ;incstack = 0
 14327                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14328  1BB2  0020               	movlb	0	; select bank0
 14329  1BB3  0859               	movf	_switchBypass_state,w
 14330  1BB4  0021               	movlb	1	; select bank1
 14331  1BB5  00B4               	movwf	??_setSwitchBypassState^(0+128)
 14332  1BB6  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14333  1BB7  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14334  1BB8  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14335  1BB9  1D03               	skipz
 14336  1BBA  2BBD               	goto	u7985
 14337  1BBB  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 14338  1BBC  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 14339  1BBD                     u7985:	
 14340  1BBD  1903               	btfsc	3,2
 14341  1BBE  0008               	return
 14342                           
 14343                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 14344  1BBF  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 14345  1BC0  00B4               	movwf	??_setSwitchBypassState^(0+128)
 14346  1BC1  0834               	movf	??_setSwitchBypassState^(0+128),w
 14347  1BC2  0020               	movlb	0	; select bank0
 14348  1BC3  00D9               	movwf	_switchBypass_state
 14349                           
 14350                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 14351  1BC4  0021               	movlb	1	; select bank1
 14352  1BC5  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 14353  1BC6  0022               	movlb	2	; select bank2
 14354  1BC7  1C03               	skipc
 14355  1BC8  110D               	bcf	13,2	;volatile
 14356  1BC9  1803               	skipnc
 14357  1BCA  150D               	bsf	13,2	;volatile
 14358                           
 14359                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 14360  1BCB  118D               	bcf	13,3	;volatile
 14361                           
 14362                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 14363  1BCC  0021               	movlb	1	; select bank1
 14364  1BCD  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 14365  1BCE  0027               	movlb	7	; select bank7
 14366  1BCF  1C03               	skipc
 14367  1BD0  110D               	bcf	13,2	;volatile
 14368  1BD1  1803               	skipnc
 14369  1BD2  150D               	bsf	13,2	;volatile
 14370                           
 14371                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 14372  1BD3  0021               	movlb	1	; select bank1
 14373  1BD4  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 14374  1BD5  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 14375  1BD6  1D03               	btfss	3,2
 14376  1BD7  2BDB               	goto	u7990
 14377  1BD8  0027               	movlb	7	; select bank7
 14378  1BD9  148D               	bsf	13,1	;volatile
 14379  1BDA  2BDD               	goto	l7627
 14380  1BDB                     u7990:	
 14381  1BDB  0027               	movlb	7	; select bank7
 14382  1BDC  108D               	bcf	13,1	;volatile
 14383  1BDD                     l7627:	
 14384                           
 14385                           ;SwitchBypass.c: 142: wait_ms(20);
 14386  1BDD  3014               	movlw	20
 14387  1BDE  0021               	movlb	1	; select bank1
 14388  1BDF  00AC               	movwf	wait_ms@timeSec^(0+128)
 14389  1BE0  3000               	movlw	0
 14390  1BE1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14391  1BE2  31A7  27CE  319B   	fcall	_wait_ms
 14392                           
 14393                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 14394  1BE5  0027               	movlb	7	; select bank7
 14395  1BE6  110D               	bcf	13,2	;volatile
 14396                           
 14397                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 14398  1BE7  108D               	bcf	13,1	;volatile
 14399                           
 14400                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 14401  1BE8  0020               	movlb	0	; select bank0
 14402  1BE9  0859               	movf	_switchBypass_state,w
 14403  1BEA  0021               	movlb	1	; select bank1
 14404  1BEB  00B4               	movwf	??_setSwitchBypassState^(0+128)
 14405  1BEC  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14406  1BED  0834               	movf	??_setSwitchBypassState^(0+128),w
 14407  1BEE  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14408  1BEF  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 14409  1BF0  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14410  1BF1  3187  27FF  319B   	fcall	_updateSwitchBypassState
 14411                           
 14412                           ;SwitchBypass.c: 148: wait_ms(20);
 14413  1BF4  3014               	movlw	20
 14414  1BF5  0021               	movlb	1	; select bank1
 14415  1BF6  00AC               	movwf	wait_ms@timeSec^(0+128)
 14416  1BF7  3000               	movlw	0
 14417  1BF8  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14418  1BF9  31A7  27CE         	fcall	_wait_ms
 14419  1BFB  0008               	return
 14420  1BFC                     __end_of_setSwitchBypassState:	
 14421                           
 14422                           	psect	text46
 14423  27CE                     __ptext46:	
 14424 ;; *************** function _wait_ms *****************
 14425 ;; Defined at:
 14426 ;;		line 23 in file "system.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;  timemsl         4   14[BANK1 ] long 
 14431 ;; Return value:  Size  Location     Type
 14432 ;;                  1    wreg      void 
 14433 ;; Registers used:
 14434 ;;		wreg, status,2, status,0, pclath, cstack
 14435 ;; Tracked objects:
 14436 ;;		On entry : 0/0
 14437 ;;		On exit  : 0/0
 14438 ;;		Unchanged: 0/0
 14439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14440 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14441 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14443 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14444 ;;Total ram usage:        6 bytes
 14445 ;; Hardware stack levels used:    1
 14446 ;; Hardware stack levels required when called:    4
 14447 ;; This function calls:
 14448 ;;		___lmul
 14449 ;; This function is called by:
 14450 ;;		_ring_tactiles
 14451 ;;		_solidring_tactiles
 14452 ;;		_read_bottom_tactile
 14453 ;;		_read_top_tactile
 14454 ;;		_setSwitchBypassState
 14455 ;;		_setDoublePressState
 14456 ;;		_showError_Alternating
 14457 ;;		_show_error
 14458 ;;		_show_cancel
 14459 ;;		_star_tactiles
 14460 ;;		_initExpModeState
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           
 14465                           ;psect for function _wait_ms
 14466  27CE                     _wait_ms:	
 14467                           
 14468                           ;system.c: 25: long timemsl = 0;
 14469                           
 14470                           ;incstack = 0
 14471                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14472  27CE  3000               	movlw	0
 14473  27CF  0021               	movlb	1	; select bank1
 14474  27D0  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14475  27D1  3000               	movlw	0
 14476  27D2  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14477  27D3  3000               	movlw	0
 14478  27D4  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14479  27D5  3000               	movlw	0
 14480  27D6  00AE               	movwf	wait_ms@timemsl^(0+128)
 14481                           
 14482                           ;system.c: 26: timemsl = timeSec * 1000l;
 14483  27D7  082C               	movf	wait_ms@timeSec^(0+128),w
 14484  27D8  00A0               	movwf	___lmul@multiplier^(0+128)
 14485  27D9  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14486  27DA  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14487  27DB  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14488  27DC  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14489  27DD  3000               	movlw	0
 14490  27DE  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14491  27DF  3000               	movlw	0
 14492  27E0  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14493  27E1  3003               	movlw	3
 14494  27E2  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14495  27E3  30E8               	movlw	232
 14496  27E4  00A4               	movwf	___lmul@multiplicand^(0+128)
 14497  27E5  31A7  279E  31A7   	fcall	___lmul
 14498  27E8  0021               	movlb	1	; select bank1
 14499  27E9  0823               	movf	(?___lmul+3)^(0+128),w
 14500  27EA  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14501  27EB  0822               	movf	(?___lmul+2)^(0+128),w
 14502  27EC  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14503  27ED  0821               	movf	(?___lmul+1)^(0+128),w
 14504  27EE  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14505  27EF  0820               	movf	?___lmul^(0+128),w
 14506  27F0  00AE               	movwf	wait_ms@timemsl^(0+128)
 14507  27F1                     l389:	
 14508                           ;system.c: 27: for( ; timemsl; timemsl--);
 14509                           
 14510  27F1  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14511  27F2  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14512  27F3  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14513  27F4  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14514  27F5  1903               	btfsc	3,2
 14515  27F6  0008               	return
 14516  27F7  30FF               	movlw	255
 14517  27F8  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14518  27F9  30FF               	movlw	255
 14519  27FA  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14520  27FB  30FF               	movlw	255
 14521  27FC  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14522  27FD  30FF               	movlw	255
 14523  27FE  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14524  27FF  2FF1               	goto	l389
 14525  2800                     __end_of_wait_ms:	
 14526                           
 14527                           	psect	text47
 14528  279E                     __ptext47:	
 14529 ;; *************** function ___lmul *****************
 14530 ;; Defined at:
 14531 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14534 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  product         4    8[BANK1 ] unsigned long 
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  4    0[BANK1 ] unsigned long 
 14539 ;; Registers used:
 14540 ;;		wreg, status,2, status,0
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14546 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14547 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14549 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14550 ;;Total ram usage:       12 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    3
 14553 ;; This function calls:
 14554 ;;		Nothing
 14555 ;; This function is called by:
 14556 ;;		_wait_ms
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           
 14561                           ;psect for function ___lmul
 14562  279E                     ___lmul:	
 14563                           
 14564                           ;incstack = 0
 14565                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14566  279E  3000               	movlw	0
 14567  279F  0021               	movlb	1	; select bank1
 14568  27A0  00AB               	movwf	(___lmul@product+3)^(0+128)
 14569  27A1  3000               	movlw	0
 14570  27A2  00AA               	movwf	(___lmul@product+2)^(0+128)
 14571  27A3  3000               	movlw	0
 14572  27A4  00A9               	movwf	(___lmul@product+1)^(0+128)
 14573  27A5  3000               	movlw	0
 14574  27A6  00A8               	movwf	___lmul@product^(0+128)
 14575  27A7                     l6867:	
 14576  27A7  1C20               	btfss	___lmul@multiplier^(0+128),0
 14577  27A8  2FB1               	goto	l6871
 14578  27A9  0824               	movf	___lmul@multiplicand^(0+128),w
 14579  27AA  07A8               	addwf	___lmul@product^(0+128),f
 14580  27AB  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14581  27AC  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14582  27AD  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14583  27AE  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14584  27AF  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14585  27B0  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14586  27B1                     l6871:	
 14587  27B1  3001               	movlw	1
 14588  27B2                     u6815:	
 14589  27B2  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14590  27B3  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14591  27B4  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14592  27B5  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14593  27B6  0B89               	decfsz	9,f
 14594  27B7  2FB2               	goto	u6815
 14595  27B8  3001               	movlw	1
 14596  27B9                     u6825:	
 14597  27B9  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14598  27BA  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14599  27BB  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14600  27BC  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14601  27BD  0B89               	decfsz	9,f
 14602  27BE  2FB9               	goto	u6825
 14603  27BF  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14604  27C0  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14605  27C1  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14606  27C2  0420               	iorwf	___lmul@multiplier^(0+128),w
 14607  27C3  1D03               	skipz
 14608  27C4  2FA7               	goto	l6867
 14609  27C5  082B               	movf	(___lmul@product+3)^(0+128),w
 14610  27C6  00A3               	movwf	(?___lmul+3)^(0+128)
 14611  27C7  082A               	movf	(___lmul@product+2)^(0+128),w
 14612  27C8  00A2               	movwf	(?___lmul+2)^(0+128)
 14613  27C9  0829               	movf	(___lmul@product+1)^(0+128),w
 14614  27CA  00A1               	movwf	(?___lmul+1)^(0+128)
 14615  27CB  0828               	movf	___lmul@product^(0+128),w
 14616  27CC  00A0               	movwf	?___lmul^(0+128)
 14617  27CD  0008               	return
 14618  27CE                     __end_of___lmul:	
 14619                           
 14620                           	psect	text48
 14621  07FF                     __ptext48:	
 14622 ;; *************** function _updateSwitchBypassState *****************
 14623 ;; Defined at:
 14624 ;;		line 96 in file "state_manager.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  state           2    0[BANK1 ] int 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;		None
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  1    wreg      void 
 14631 ;; Registers used:
 14632 ;;		None
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14638 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14641 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14642 ;;Total ram usage:        2 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    3
 14645 ;; This function calls:
 14646 ;;		Nothing
 14647 ;; This function is called by:
 14648 ;;		_setSwitchBypassState
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           
 14653                           ;psect for function _updateSwitchBypassState
 14654  07FF                     _updateSwitchBypassState:	
 14655                           
 14656                           ;incstack = 0
 14657                           ; Regs used in _updateSwitchBypassState: []
 14658  07FF  0008               	return
 14659  0800                     __end_of_updateSwitchBypassState:	
 14660                           
 14661                           	psect	text49
 14662  2552                     __ptext49:	
 14663 ;; *************** function _getSwitchBypassState *****************
 14664 ;; Defined at:
 14665 ;;		line 103 in file "state_manager.c"
 14666 ;; Parameters:    Size  Location     Type
 14667 ;;		None
 14668 ;; Auto vars:     Size  Location     Type
 14669 ;;		None
 14670 ;; Return value:  Size  Location     Type
 14671 ;;                  2    0[BANK1 ] int 
 14672 ;; Registers used:
 14673 ;;		status,2
 14674 ;; Tracked objects:
 14675 ;;		On entry : 0/0
 14676 ;;		On exit  : 0/0
 14677 ;;		Unchanged: 0/0
 14678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14679 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14682 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14683 ;;Total ram usage:        2 bytes
 14684 ;; Hardware stack levels used:    1
 14685 ;; Hardware stack levels required when called:    3
 14686 ;; This function calls:
 14687 ;;		Nothing
 14688 ;; This function is called by:
 14689 ;;		_initSwitchBypass
 14690 ;; This function uses a non-reentrant model
 14691 ;;
 14692                           
 14693                           
 14694                           ;psect for function _getSwitchBypassState
 14695  2552                     _getSwitchBypassState:	
 14696                           
 14697                           ;state_manager.c: 108: return 0;
 14698                           
 14699                           ;incstack = 0
 14700                           ; Regs used in _getSwitchBypassState: [status,2]
 14701  2552  0021               	movlb	1	; select bank1
 14702  2553  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14703  2554  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14704  2555  0008               	return
 14705  2556                     __end_of_getSwitchBypassState:	
 14706                           
 14707                           	psect	text50
 14708  2596                     __ptext50:	
 14709 ;; *************** function _adc_convert *****************
 14710 ;; Defined at:
 14711 ;;		line 122 in file "user.c"
 14712 ;; Parameters:    Size  Location     Type
 14713 ;;  channel         1    wreg     unsigned char 
 14714 ;; Auto vars:     Size  Location     Type
 14715 ;;  channel         1    3[BANK1 ] unsigned char 
 14716 ;; Return value:  Size  Location     Type
 14717 ;;                  2    0[BANK1 ] unsigned int 
 14718 ;; Registers used:
 14719 ;;		wreg, status,2, status,0
 14720 ;; Tracked objects:
 14721 ;;		On entry : 0/0
 14722 ;;		On exit  : 0/0
 14723 ;;		Unchanged: 0/0
 14724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14725 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14726 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14727 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14728 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14729 ;;Total ram usage:        4 bytes
 14730 ;; Hardware stack levels used:    1
 14731 ;; Hardware stack levels required when called:    3
 14732 ;; This function calls:
 14733 ;;		Nothing
 14734 ;; This function is called by:
 14735 ;;		_main
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739                           
 14740                           ;psect for function _adc_convert
 14741  2596                     _adc_convert:	
 14742                           
 14743                           ;incstack = 0
 14744                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 14745                           ;adc_convert@channel stored from wreg
 14746  2596  0021               	movlb	1	; select bank1
 14747  2597  00A3               	movwf	adc_convert@channel^(0+128)
 14748                           
 14749                           ;user.c: 123: ADCON0bits.CHS = channel;
 14750  2598  0823               	movf	adc_convert@channel^(0+128),w
 14751  2599  00A2               	movwf	??_adc_convert^(0+128)
 14752  259A  0DA2               	rlf	??_adc_convert^(0+128),f
 14753  259B  0DA2               	rlf	??_adc_convert^(0+128),f
 14754  259C  081D               	movf	29,w	;volatile
 14755  259D  0622               	xorwf	??_adc_convert^(0+128),w
 14756  259E  3983               	andlw	-125
 14757  259F  0622               	xorwf	??_adc_convert^(0+128),w
 14758  25A0  009D               	movwf	29	;volatile
 14759                           
 14760                           ;user.c: 124: ADCON0bits.GO = 0b1;
 14761  25A1  149D               	bsf	29,1	;volatile
 14762  25A2                     l589:	
 14763                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 14764                           
 14765  25A2  189D               	btfsc	29,1	;volatile
 14766  25A3  2DA2               	goto	l589
 14767                           
 14768                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 14769  25A4  081C               	movf	28,w	;volatile
 14770  25A5  00A1               	movwf	(?_adc_convert+1)^(0+128)
 14771  25A6  081B               	movf	27,w	;volatile
 14772  25A7  00A0               	movwf	?_adc_convert^(0+128)
 14773  25A8  0008               	return
 14774  25A9                     __end_of_adc_convert:	
 14775                           
 14776                           	psect	text51
 14777  1B28                     __ptext51:	
 14778 ;; *************** function _USARTInit *****************
 14779 ;; Defined at:
 14780 ;;		line 31 in file "usart_pic16.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;		None
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  1    wreg      void 
 14787 ;; Registers used:
 14788 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14789 ;; Tracked objects:
 14790 ;;		On entry : 0/0
 14791 ;;		On exit  : 0/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14794 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14796 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14797 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14798 ;;Total ram usage:        3 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; Hardware stack levels required when called:    3
 14801 ;; This function calls:
 14802 ;;		Nothing
 14803 ;; This function is called by:
 14804 ;;		_main
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           
 14809                           ;psect for function _USARTInit
 14810  1B28                     _USARTInit:	
 14811                           
 14812                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 14813                           
 14814                           ;incstack = 0
 14815                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 14816  1B28  30FF               	movlw	255
 14817  1B29  0020               	movlb	0	; select bank0
 14818  1B2A  00E9               	movwf	_UQEnd	;volatile
 14819  1B2B  0021               	movlb	1	; select bank1
 14820  1B2C  00A2               	movwf	??_USARTInit^(0+128)
 14821  1B2D  0822               	movf	??_USARTInit^(0+128),w
 14822  1B2E  00FD               	movwf	_UQFront	;volatile
 14823                           
 14824                           ;usart_pic16.c: 37: switch(baud_rate)
 14825  1B2F  2B3A               	goto	l7733
 14826  1B30                     l7723:	
 14827                           ;usart_pic16.c: 38: {
 14828                           ;usart_pic16.c: 39: case 9600:
 14829                           
 14830                           
 14831                           ;usart_pic16.c: 40: SPBRG=103;
 14832  1B30  3067               	movlw	103
 14833  1B31  2B37               	goto	L16
 14834  1B32                     l7725:	
 14835                           ;usart_pic16.c: 42: case 19200:
 14836                           
 14837                           ;usart_pic16.c: 41: break;
 14838                           
 14839                           
 14840                           ;usart_pic16.c: 43: SPBRG=51;
 14841  1B32  3033               	movlw	51
 14842  1B33  2B37               	goto	L16
 14843  1B34                     l7727:	
 14844                           ;usart_pic16.c: 45: case 31250:
 14845                           
 14846                           ;usart_pic16.c: 44: break;
 14847                           
 14848                           
 14849                           ;usart_pic16.c: 46: SPBRG = 31;
 14850  1B34  301F               	movlw	31
 14851  1B35  2B37               	goto	L16
 14852  1B36                     l7729:	
 14853                           ;usart_pic16.c: 48: case 38400:
 14854                           
 14855                           ;usart_pic16.c: 47: break;
 14856                           
 14857                           
 14858                           ;usart_pic16.c: 49: SPBRG=25;
 14859  1B36  3019               	movlw	25
 14860  1B37                     L16:	
 14861  1B37  0023               	movlb	3	; select bank3
 14862  1B38  009B               	movwf	27	;volatile
 14863                           
 14864                           ;usart_pic16.c: 51: }
 14865                           
 14866                           ;usart_pic16.c: 50: break;
 14867  1B39  2B5D               	goto	l1664
 14868  1B3A                     l7733:	
 14869                           
 14870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 14871                           ; Switch size 1, requested type "space"
 14872                           ; Number of cases is 4, Range of values is 37 to 150
 14873                           ; switch strategies available:
 14874                           ; Name         Instructions Cycles
 14875                           ; simple_byte           13     7 (average)
 14876                           ; direct_byte          237     9 (fixed)
 14877                           ; jumptable            263     9 (fixed)
 14878                           ;	Chosen strategy is simple_byte
 14879  1B3A  0021               	movlb	1	; select bank1
 14880  1B3B  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 14881  1B3C  3A25               	xorlw	37	; case 37
 14882  1B3D  1903               	skipnz
 14883  1B3E  2B49               	goto	l8679
 14884  1B3F  3A6E               	xorlw	110	; case 75
 14885  1B40  1903               	skipnz
 14886  1B41  2B4E               	goto	l8681
 14887  1B42  3A31               	xorlw	49	; case 122
 14888  1B43  1903               	skipnz
 14889  1B44  2B53               	goto	l8683
 14890  1B45  3AEC               	xorlw	236	; case 150
 14891  1B46  1903               	skipnz
 14892  1B47  2B58               	goto	l8685
 14893  1B48  2B5D               	goto	l1664
 14894  1B49                     l8679:	
 14895                           
 14896                           ; Switch size 1, requested type "space"
 14897                           ; Number of cases is 1, Range of values is 128 to 128
 14898                           ; switch strategies available:
 14899                           ; Name         Instructions Cycles
 14900                           ; simple_byte            4     3 (average)
 14901                           ; direct_byte           11     9 (fixed)
 14902                           ; jumptable            263     9 (fixed)
 14903                           ;	Chosen strategy is simple_byte
 14904  1B49  0820               	movf	USARTInit@baud_rate^(0+128),w
 14905  1B4A  3A80               	xorlw	128	; case 128
 14906  1B4B  1903               	skipnz
 14907  1B4C  2B30               	goto	l7723
 14908  1B4D  2B5D               	goto	l1664
 14909  1B4E                     l8681:	
 14910                           
 14911                           ; Switch size 1, requested type "space"
 14912                           ; Number of cases is 1, Range of values is 0 to 0
 14913                           ; switch strategies available:
 14914                           ; Name         Instructions Cycles
 14915                           ; simple_byte            4     3 (average)
 14916                           ; direct_byte            8     6 (fixed)
 14917                           ; jumptable            260     6 (fixed)
 14918                           ;	Chosen strategy is simple_byte
 14919  1B4E  0820               	movf	USARTInit@baud_rate^(0+128),w
 14920  1B4F  3A00               	xorlw	0	; case 0
 14921  1B50  1903               	skipnz
 14922  1B51  2B32               	goto	l7725
 14923  1B52  2B5D               	goto	l1664
 14924  1B53                     l8683:	
 14925                           
 14926                           ; Switch size 1, requested type "space"
 14927                           ; Number of cases is 1, Range of values is 18 to 18
 14928                           ; switch strategies available:
 14929                           ; Name         Instructions Cycles
 14930                           ; simple_byte            4     3 (average)
 14931                           ; direct_byte           11     9 (fixed)
 14932                           ; jumptable            263     9 (fixed)
 14933                           ;	Chosen strategy is simple_byte
 14934  1B53  0820               	movf	USARTInit@baud_rate^(0+128),w
 14935  1B54  3A12               	xorlw	18	; case 18
 14936  1B55  1903               	skipnz
 14937  1B56  2B34               	goto	l7727
 14938  1B57  2B5D               	goto	l1664
 14939  1B58                     l8685:	
 14940                           
 14941                           ; Switch size 1, requested type "space"
 14942                           ; Number of cases is 1, Range of values is 0 to 0
 14943                           ; switch strategies available:
 14944                           ; Name         Instructions Cycles
 14945                           ; simple_byte            4     3 (average)
 14946                           ; direct_byte            8     6 (fixed)
 14947                           ; jumptable            260     6 (fixed)
 14948                           ;	Chosen strategy is simple_byte
 14949  1B58  0820               	movf	USARTInit@baud_rate^(0+128),w
 14950  1B59  3A00               	xorlw	0	; case 0
 14951  1B5A  1903               	skipnz
 14952  1B5B  2B36               	goto	l7729
 14953  1B5C  2B5D               	goto	l1664
 14954  1B5D                     l1664:	
 14955                           
 14956                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 14957  1B5D  0023               	movlb	3	; select bank3
 14958  1B5E  131E               	bcf	30,6	;volatile
 14959                           
 14960                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 14961  1B5F  169E               	bsf	30,5	;volatile
 14962                           
 14963                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 14964  1B60  121E               	bcf	30,4	;volatile
 14965                           
 14966                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 14967  1B61  151E               	bsf	30,2	;volatile
 14968                           
 14969                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 14970  1B62  179D               	bsf	29,7	;volatile
 14971                           
 14972                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 14973  1B63  131D               	bcf	29,6	;volatile
 14974                           
 14975                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 14976  1B64  161D               	bsf	29,4	;volatile
 14977                           
 14978                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 14979  1B65  119D               	bcf	29,3	;volatile
 14980                           
 14981                           ;usart_pic16.c: 65: RCIE=1;
 14982  1B66  0021               	movlb	1	; select bank1
 14983  1B67  1691               	bsf	17,5	;volatile
 14984                           
 14985                           ;usart_pic16.c: 66: PEIE=1;
 14986  1B68  170B               	bsf	11,6	;volatile
 14987                           
 14988                           ;usart_pic16.c: 68: (GIE = 1);
 14989  1B69  178B               	bsf	11,7	;volatile
 14990  1B6A  0008               	return
 14991  1B6B                     __end_of_USARTInit:	
 14992                           
 14993                           	psect	text52
 14994  0802                     __ptext52:	
 14995 ;; *************** function _ReadSavedSettings *****************
 14996 ;; Defined at:
 14997 ;;		line 225 in file "user.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;		None
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;		None
 15002 ;; Return value:  Size  Location     Type
 15003 ;;                  1    wreg      void 
 15004 ;; Registers used:
 15005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15013 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15014 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15015 ;;Total ram usage:        1 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    4
 15018 ;; This function calls:
 15019 ;;		_FLASH_ReadWord
 15020 ;;		_set_leds_bottom
 15021 ;;		_set_leds_top
 15022 ;; This function is called by:
 15023 ;;		_main
 15024 ;; This function uses a non-reentrant model
 15025 ;;
 15026                           
 15027                           
 15028                           ;psect for function _ReadSavedSettings
 15029  0802                     _ReadSavedSettings:	
 15030                           
 15031                           ;user.c: 227: top_push_state = FLASH_ReadWord(0x1F81);
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15035  0802  3081               	movlw	129
 15036  0803  0021               	movlb	1	; select bank1
 15037  0804  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 15038  0805  301F               	movlw	31
 15039  0806  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 15040  0807  31A6  2689  3188   	fcall	_FLASH_ReadWord
 15041  080A  0021               	movlb	1	; select bank1
 15042  080B  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 15043  080C  0020               	movlb	0	; select bank0
 15044  080D  00D4               	movwf	_top_push_state+1
 15045  080E  0021               	movlb	1	; select bank1
 15046  080F  0820               	movf	?_FLASH_ReadWord^(0+128),w
 15047  0810  0020               	movlb	0	; select bank0
 15048  0811  00D3               	movwf	_top_push_state
 15049                           
 15050                           ;user.c: 228: bottom_push_state = FLASH_ReadWord(0x1F82);
 15051  0812  3082               	movlw	130
 15052  0813  0021               	movlb	1	; select bank1
 15053  0814  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 15054  0815  301F               	movlw	31
 15055  0816  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 15056  0817  31A6  2689  3188   	fcall	_FLASH_ReadWord
 15057  081A  0021               	movlb	1	; select bank1
 15058  081B  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 15059  081C  0020               	movlb	0	; select bank0
 15060  081D  00CE               	movwf	_bottom_push_state+1
 15061  081E  0021               	movlb	1	; select bank1
 15062  081F  0820               	movf	?_FLASH_ReadWord^(0+128),w
 15063  0820  0020               	movlb	0	; select bank0
 15064  0821  00CD               	movwf	_bottom_push_state
 15065                           
 15066                           ;user.c: 230: if (top_push_state > 6) {
 15067  0822  0854               	movf	_top_push_state+1,w
 15068  0823  3A80               	xorlw	128
 15069  0824  0021               	movlb	1	; select bank1
 15070  0825  00A4               	movwf	??_ReadSavedSettings^(0+128)
 15071  0826  3080               	movlw	128
 15072  0827  0224               	subwf	??_ReadSavedSettings^(0+128),w
 15073  0828  1D03               	skipz
 15074  0829  282D               	goto	u8205
 15075  082A  3007               	movlw	7
 15076  082B  0020               	movlb	0	; select bank0
 15077  082C  0253               	subwf	_top_push_state,w
 15078  082D                     u8205:	
 15079  082D  1C03               	skipc
 15080  082E  2834               	goto	l630
 15081                           
 15082                           ;user.c: 232: top_push_state = 6;
 15083  082F  3006               	movlw	6
 15084  0830  0020               	movlb	0	; select bank0
 15085  0831  00D3               	movwf	_top_push_state
 15086  0832  3000               	movlw	0
 15087  0833  00D4               	movwf	_top_push_state+1
 15088  0834                     l630:	
 15089                           
 15090                           ;user.c: 233: }
 15091                           ;user.c: 234: if (bottom_push_state > 6) {
 15092  0834  0020               	movlb	0	; select bank0
 15093  0835  084E               	movf	_bottom_push_state+1,w
 15094  0836  3A80               	xorlw	128
 15095  0837  0021               	movlb	1	; select bank1
 15096  0838  00A4               	movwf	??_ReadSavedSettings^(0+128)
 15097  0839  3080               	movlw	128
 15098  083A  0224               	subwf	??_ReadSavedSettings^(0+128),w
 15099  083B  1D03               	skipz
 15100  083C  2840               	goto	u8215
 15101  083D  3007               	movlw	7
 15102  083E  0020               	movlb	0	; select bank0
 15103  083F  024D               	subwf	_bottom_push_state,w
 15104  0840                     u8215:	
 15105  0840  1C03               	skipc
 15106  0841  2847               	goto	l7787
 15107                           
 15108                           ;user.c: 236: bottom_push_state = 6;
 15109  0842  3006               	movlw	6
 15110  0843  0020               	movlb	0	; select bank0
 15111  0844  00CD               	movwf	_bottom_push_state
 15112  0845  3000               	movlw	0
 15113  0846  00CE               	movwf	_bottom_push_state+1
 15114  0847                     l7787:	
 15115                           
 15116                           ;user.c: 237: }
 15117                           ;user.c: 240: LATGbits.LATG1 = !switchBypass_state;
 15118  0847  0020               	movlb	0	; select bank0
 15119  0848  0859               	movf	_switchBypass_state,w
 15120  0849  1D03               	btfss	3,2
 15121  084A  284E               	goto	u8220
 15122  084B  0027               	movlb	7	; select bank7
 15123  084C  148D               	bsf	13,1	;volatile
 15124  084D  2850               	goto	l7789
 15125  084E                     u8220:	
 15126  084E  0027               	movlb	7	; select bank7
 15127  084F  108D               	bcf	13,1	;volatile
 15128  0850                     l7789:	
 15129                           
 15130                           ;user.c: 241: LATGbits.LATG2 = switchBypass_state;
 15131  0850  0020               	movlb	0	; select bank0
 15132  0851  0C59               	rrf	_switchBypass_state,w
 15133  0852  0027               	movlb	7	; select bank7
 15134  0853  1C03               	skipc
 15135  0854  110D               	bcf	13,2	;volatile
 15136  0855  1803               	skipnc
 15137  0856  150D               	bsf	13,2	;volatile
 15138                           
 15139                           ;user.c: 242: LATBbits.LATB2 = 0;
 15140  0857  0022               	movlb	2	; select bank2
 15141  0858  110D               	bcf	13,2	;volatile
 15142                           
 15143                           ;user.c: 243: LATBbits.LATB3 = 0;
 15144  0859  118D               	bcf	13,3	;volatile
 15145                           
 15146                           ;user.c: 245: LATBbits.LATB4 = 0;
 15147  085A  120D               	bcf	13,4	;volatile
 15148                           
 15149                           ;user.c: 246: LATBbits.LATB5 = 0;
 15150  085B  128D               	bcf	13,5	;volatile
 15151                           
 15152                           ;user.c: 248: LATBbits.LATB1 = 0;
 15153  085C  108D               	bcf	13,1	;volatile
 15154                           
 15155                           ;user.c: 249: LATBbits.LATB0 = 0;
 15156  085D  100D               	bcf	13,0	;volatile
 15157                           
 15158                           ;user.c: 252: set_leds_top(top_push_state, 1);
 15159  085E  0020               	movlb	0	; select bank0
 15160  085F  0854               	movf	_top_push_state+1,w
 15161  0860  0021               	movlb	1	; select bank1
 15162  0861  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 15163  0862  0020               	movlb	0	; select bank0
 15164  0863  0853               	movf	_top_push_state,w
 15165  0864  0021               	movlb	1	; select bank1
 15166  0865  00A0               	movwf	set_leds_top@x^(0+128)
 15167  0866  3001               	movlw	1
 15168  0867  00A2               	movwf	set_leds_top@ledState^(0+128)
 15169  0868  3000               	movlw	0
 15170  0869  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 15171  086A  319D  258E  3188   	fcall	_set_leds_top
 15172                           
 15173                           ;user.c: 253: set_leds_bottom(bottom_push_state);
 15174  086D  0020               	movlb	0	; select bank0
 15175  086E  084E               	movf	_bottom_push_state+1,w
 15176  086F  0021               	movlb	1	; select bank1
 15177  0870  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 15178  0871  0020               	movlb	0	; select bank0
 15179  0872  084D               	movf	_bottom_push_state,w
 15180  0873  0021               	movlb	1	; select bank1
 15181  0874  00A0               	movwf	set_leds_bottom@x^(0+128)
 15182  0875  3198  207D         	fcall	_set_leds_bottom
 15183  0877  0008               	return
 15184  0878                     __end_of_ReadSavedSettings:	
 15185                           
 15186                           	psect	text53
 15187  1D8E                     __ptext53:	
 15188 ;; *************** function _set_leds_top *****************
 15189 ;; Defined at:
 15190 ;;		line 16 in file "LEDs.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  x               2    0[BANK1 ] int 
 15193 ;;  ledState        2    2[BANK1 ] int 
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;		None
 15196 ;; Return value:  Size  Location     Type
 15197 ;;                  1    wreg      void 
 15198 ;; Registers used:
 15199 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15200 ;; Tracked objects:
 15201 ;;		On entry : 0/0
 15202 ;;		On exit  : 0/0
 15203 ;;		Unchanged: 0/0
 15204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15205 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15208 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15209 ;;Total ram usage:        4 bytes
 15210 ;; Hardware stack levels used:    1
 15211 ;; Hardware stack levels required when called:    3
 15212 ;; This function calls:
 15213 ;;		Nothing
 15214 ;; This function is called by:
 15215 ;;		_ReadSavedSettings
 15216 ;;		_ring_tactiles
 15217 ;;		_solidring_tactiles
 15218 ;;		_read_top_tactile
 15219 ;;		_setPresetDisplay
 15220 ;;		_resetRingLEDs
 15221 ;;		_setExpressionDisplay
 15222 ;;		_star_tactiles
 15223 ;; This function uses a non-reentrant model
 15224 ;;
 15225                           
 15226                           
 15227                           ;psect for function _set_leds_top
 15228  1D8E                     _set_leds_top:	
 15229                           
 15230                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 15231                           
 15232                           ;incstack = 0
 15233                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 15234  1D8E  0027               	movlb	7	; select bank7
 15235  1D8F  100C               	bcf	12,0	;volatile
 15236                           
 15237                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 15238  1D90  108C               	bcf	12,1	;volatile
 15239                           
 15240                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 15241  1D91  110C               	bcf	12,2	;volatile
 15242                           
 15243                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 15244  1D92  118C               	bcf	12,3	;volatile
 15245                           
 15246                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 15247  1D93  120C               	bcf	12,4	;volatile
 15248                           
 15249                           ;LEDs.c: 22: switch (x) {
 15250  1D94  2DC4               	goto	l6925
 15251  1D95                     l6913:	
 15252                           ;LEDs.c: 23: case 1:
 15253                           
 15254                           
 15255                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 15256  1D95  0021               	movlb	1	; select bank1
 15257  1D96  0C22               	rrf	set_leds_top@ledState^(0+128),w
 15258  1D97  0027               	movlb	7	; select bank7
 15259  1D98  1C03               	skipc
 15260  1D99  100C               	bcf	12,0	;volatile
 15261  1D9A  1803               	skipnc
 15262  1D9B  140C               	bsf	12,0	;volatile
 15263                           
 15264                           ;LEDs.c: 25: break;
 15265  1D9C  0008               	return
 15266  1D9D                     l6915:	
 15267                           ;LEDs.c: 26: case 2:
 15268                           
 15269                           
 15270                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 15271  1D9D  0021               	movlb	1	; select bank1
 15272  1D9E  0C22               	rrf	set_leds_top@ledState^(0+128),w
 15273  1D9F  0027               	movlb	7	; select bank7
 15274  1DA0  1C03               	skipc
 15275  1DA1  108C               	bcf	12,1	;volatile
 15276  1DA2  1803               	skipnc
 15277  1DA3  148C               	bsf	12,1	;volatile
 15278                           
 15279                           ;LEDs.c: 28: break;
 15280  1DA4  0008               	return
 15281  1DA5                     l6917:	
 15282                           ;LEDs.c: 29: case 3:
 15283                           
 15284                           
 15285                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 15286  1DA5  0021               	movlb	1	; select bank1
 15287  1DA6  0C22               	rrf	set_leds_top@ledState^(0+128),w
 15288  1DA7  0027               	movlb	7	; select bank7
 15289  1DA8  1C03               	skipc
 15290  1DA9  110C               	bcf	12,2	;volatile
 15291  1DAA  1803               	skipnc
 15292  1DAB  150C               	bsf	12,2	;volatile
 15293                           
 15294                           ;LEDs.c: 31: break;
 15295  1DAC  0008               	return
 15296  1DAD                     l6919:	
 15297                           ;LEDs.c: 32: case 4:
 15298                           
 15299                           
 15300                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 15301  1DAD  0021               	movlb	1	; select bank1
 15302  1DAE  0C22               	rrf	set_leds_top@ledState^(0+128),w
 15303  1DAF  0027               	movlb	7	; select bank7
 15304  1DB0  1C03               	skipc
 15305  1DB1  118C               	bcf	12,3	;volatile
 15306  1DB2  1803               	skipnc
 15307  1DB3  158C               	bsf	12,3	;volatile
 15308                           
 15309                           ;LEDs.c: 34: break;
 15310  1DB4  0008               	return
 15311  1DB5                     l6921:	
 15312                           ;LEDs.c: 35: case 5:
 15313                           
 15314                           
 15315                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 15316  1DB5  0021               	movlb	1	; select bank1
 15317  1DB6  0C22               	rrf	set_leds_top@ledState^(0+128),w
 15318  1DB7  0027               	movlb	7	; select bank7
 15319  1DB8  1C03               	skipc
 15320  1DB9  120C               	bcf	12,4	;volatile
 15321  1DBA  1803               	skipnc
 15322  1DBB  160C               	bsf	12,4	;volatile
 15323                           
 15324                           ;LEDs.c: 39: break;
 15325                           
 15326                           ;LEDs.c: 38: case 6:
 15327                           
 15328                           ;LEDs.c: 37: break;
 15329  1DBC  0008               	return
 15330  1DBD                     l785:	
 15331                           ;LEDs.c: 40: case 100:
 15332                           
 15333                           
 15334                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 15335  1DBD  0027               	movlb	7	; select bank7
 15336  1DBE  140C               	bsf	12,0	;volatile
 15337                           
 15338                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 15339  1DBF  148C               	bsf	12,1	;volatile
 15340                           
 15341                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 15342  1DC0  150C               	bsf	12,2	;volatile
 15343                           
 15344                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 15345  1DC1  158C               	bsf	12,3	;volatile
 15346                           
 15347                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 15348  1DC2  160C               	bsf	12,4	;volatile
 15349                           
 15350                           ;LEDs.c: 47: }
 15351                           
 15352                           ;LEDs.c: 46: break;
 15353  1DC3  0008               	return
 15354  1DC4                     l6925:	
 15355                           
 15356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15357                           ; Switch size 1, requested type "space"
 15358                           ; Number of cases is 1, Range of values is 0 to 0
 15359                           ; switch strategies available:
 15360                           ; Name         Instructions Cycles
 15361                           ; simple_byte            4     3 (average)
 15362                           ; direct_byte            8     6 (fixed)
 15363                           ; jumptable            260     6 (fixed)
 15364                           ;	Chosen strategy is simple_byte
 15365  1DC4  0021               	movlb	1	; select bank1
 15366  1DC5  0821               	movf	(set_leds_top@x+1)^(0+128),w
 15367  1DC6  3A00               	xorlw	0	; case 0
 15368  1DC7  1903               	skipnz
 15369  1DC8  2DCA               	goto	l8687
 15370  1DC9  2DE1               	goto	l786
 15371  1DCA                     l8687:	
 15372                           
 15373                           ; Switch size 1, requested type "space"
 15374                           ; Number of cases is 7, Range of values is 1 to 100
 15375                           ; switch strategies available:
 15376                           ; Name         Instructions Cycles
 15377                           ; simple_byte           22    12 (average)
 15378                           ; direct_byte          209     9 (fixed)
 15379                           ; jumptable            263     9 (fixed)
 15380                           ;	Chosen strategy is simple_byte
 15381  1DCA  0820               	movf	set_leds_top@x^(0+128),w
 15382  1DCB  3A01               	xorlw	1	; case 1
 15383  1DCC  1903               	skipnz
 15384  1DCD  2D95               	goto	l6913
 15385  1DCE  3A03               	xorlw	3	; case 2
 15386  1DCF  1903               	skipnz
 15387  1DD0  2D9D               	goto	l6915
 15388  1DD1  3A01               	xorlw	1	; case 3
 15389  1DD2  1903               	skipnz
 15390  1DD3  2DA5               	goto	l6917
 15391  1DD4  3A07               	xorlw	7	; case 4
 15392  1DD5  1903               	skipnz
 15393  1DD6  2DAD               	goto	l6919
 15394  1DD7  3A01               	xorlw	1	; case 5
 15395  1DD8  1903               	skipnz
 15396  1DD9  2DB5               	goto	l6921
 15397  1DDA  3A03               	xorlw	3	; case 6
 15398  1DDB  1903               	skipnz
 15399  1DDC  2DE1               	goto	l786
 15400  1DDD  3A62               	xorlw	98	; case 100
 15401  1DDE  1903               	skipnz
 15402  1DDF  2DBD               	goto	l785
 15403  1DE0  2DE1               	goto	l786
 15404  1DE1                     l786:	
 15405  1DE1  0008               	return
 15406  1DE2                     __end_of_set_leds_top:	
 15407                           
 15408                           	psect	text54
 15409  187D                     __ptext54:	
 15410 ;; *************** function _set_leds_bottom *****************
 15411 ;; Defined at:
 15412 ;;		line 51 in file "LEDs.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;  x               2    0[BANK1 ] int 
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;		None
 15417 ;; Return value:  Size  Location     Type
 15418 ;;                  1    wreg      void 
 15419 ;; Registers used:
 15420 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15426 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15429 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15430 ;;Total ram usage:        2 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; Hardware stack levels required when called:    3
 15433 ;; This function calls:
 15434 ;;		Nothing
 15435 ;; This function is called by:
 15436 ;;		_ReadSavedSettings
 15437 ;;		_ring_tactiles
 15438 ;;		_solidring_tactiles
 15439 ;;		_read_bottom_tactile
 15440 ;;		_setPresetDisplay
 15441 ;;		_resetRingLEDs
 15442 ;;		_setExpressionDisplay
 15443 ;;		_star_tactiles
 15444 ;; This function uses a non-reentrant model
 15445 ;;
 15446                           
 15447                           
 15448                           ;psect for function _set_leds_bottom
 15449  187D                     _set_leds_bottom:	
 15450                           
 15451                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 15452                           
 15453                           ;incstack = 0
 15454                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 15455  187D  0022               	movlb	2	; select bank2
 15456  187E  100F               	bcf	15,0	;volatile
 15457                           
 15458                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 15459  187F  108F               	bcf	15,1	;volatile
 15460                           
 15461                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 15462  1880  110F               	bcf	15,2	;volatile
 15463                           
 15464                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 15465  1881  118F               	bcf	15,3	;volatile
 15466                           
 15467                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 15468  1882  120F               	bcf	15,4	;volatile
 15469                           
 15470                           ;LEDs.c: 57: switch (x) {
 15471  1883  289A               	goto	l6941
 15472  1884                     l790:	
 15473                           ;LEDs.c: 58: case 1:
 15474                           
 15475                           
 15476                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 15477  1884  0022               	movlb	2	; select bank2
 15478  1885  140F               	bsf	15,0	;volatile
 15479                           
 15480                           ;LEDs.c: 60: break;
 15481  1886  0008               	return
 15482  1887                     l792:	
 15483                           ;LEDs.c: 61: case 2:
 15484                           
 15485                           
 15486                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 15487  1887  0022               	movlb	2	; select bank2
 15488  1888  148F               	bsf	15,1	;volatile
 15489                           
 15490                           ;LEDs.c: 63: break;
 15491  1889  0008               	return
 15492  188A                     l793:	
 15493                           ;LEDs.c: 64: case 3:
 15494                           
 15495                           
 15496                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 15497  188A  0022               	movlb	2	; select bank2
 15498  188B  150F               	bsf	15,2	;volatile
 15499                           
 15500                           ;LEDs.c: 66: break;
 15501  188C  0008               	return
 15502  188D                     l794:	
 15503                           ;LEDs.c: 67: case 4:
 15504                           
 15505                           
 15506                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 15507  188D  0022               	movlb	2	; select bank2
 15508  188E  158F               	bsf	15,3	;volatile
 15509                           
 15510                           ;LEDs.c: 69: break;
 15511  188F  0008               	return
 15512  1890                     l795:	
 15513                           ;LEDs.c: 70: case 5:
 15514                           
 15515                           
 15516                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 15517  1890  0022               	movlb	2	; select bank2
 15518  1891  160F               	bsf	15,4	;volatile
 15519                           
 15520                           ;LEDs.c: 74: break;
 15521                           
 15522                           ;LEDs.c: 73: case 6:
 15523                           
 15524                           ;LEDs.c: 72: break;
 15525  1892  0008               	return
 15526  1893                     l797:	
 15527                           ;LEDs.c: 75: case 100:
 15528                           
 15529                           
 15530                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 15531  1893  0022               	movlb	2	; select bank2
 15532  1894  140F               	bsf	15,0	;volatile
 15533                           
 15534                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 15535  1895  148F               	bsf	15,1	;volatile
 15536                           
 15537                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 15538  1896  150F               	bsf	15,2	;volatile
 15539                           
 15540                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 15541  1897  158F               	bsf	15,3	;volatile
 15542                           
 15543                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 15544  1898  160F               	bsf	15,4	;volatile
 15545                           
 15546                           ;LEDs.c: 82: }
 15547                           
 15548                           ;LEDs.c: 81: break;
 15549  1899  0008               	return
 15550  189A                     l6941:	
 15551                           
 15552                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15553                           ; Switch size 1, requested type "space"
 15554                           ; Number of cases is 1, Range of values is 0 to 0
 15555                           ; switch strategies available:
 15556                           ; Name         Instructions Cycles
 15557                           ; simple_byte            4     3 (average)
 15558                           ; direct_byte            8     6 (fixed)
 15559                           ; jumptable            260     6 (fixed)
 15560                           ;	Chosen strategy is simple_byte
 15561  189A  0021               	movlb	1	; select bank1
 15562  189B  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 15563  189C  3A00               	xorlw	0	; case 0
 15564  189D  1903               	skipnz
 15565  189E  28A0               	goto	l8689
 15566  189F  28B7               	goto	l798
 15567  18A0                     l8689:	
 15568                           
 15569                           ; Switch size 1, requested type "space"
 15570                           ; Number of cases is 7, Range of values is 1 to 100
 15571                           ; switch strategies available:
 15572                           ; Name         Instructions Cycles
 15573                           ; simple_byte           22    12 (average)
 15574                           ; direct_byte          209     9 (fixed)
 15575                           ; jumptable            263     9 (fixed)
 15576                           ;	Chosen strategy is simple_byte
 15577  18A0  0820               	movf	set_leds_bottom@x^(0+128),w
 15578  18A1  3A01               	xorlw	1	; case 1
 15579  18A2  1903               	skipnz
 15580  18A3  2884               	goto	l790
 15581  18A4  3A03               	xorlw	3	; case 2
 15582  18A5  1903               	skipnz
 15583  18A6  2887               	goto	l792
 15584  18A7  3A01               	xorlw	1	; case 3
 15585  18A8  1903               	skipnz
 15586  18A9  288A               	goto	l793
 15587  18AA  3A07               	xorlw	7	; case 4
 15588  18AB  1903               	skipnz
 15589  18AC  288D               	goto	l794
 15590  18AD  3A01               	xorlw	1	; case 5
 15591  18AE  1903               	skipnz
 15592  18AF  2890               	goto	l795
 15593  18B0  3A03               	xorlw	3	; case 6
 15594  18B1  1903               	skipnz
 15595  18B2  28B7               	goto	l798
 15596  18B3  3A62               	xorlw	98	; case 100
 15597  18B4  1903               	skipnz
 15598  18B5  2893               	goto	l797
 15599  18B6  28B7               	goto	l798
 15600  18B7                     l798:	
 15601  18B7  0008               	return
 15602  18B8                     __end_of_set_leds_bottom:	
 15603                           
 15604                           	psect	text55
 15605  2689                     __ptext55:	
 15606 ;; *************** function _FLASH_ReadWord *****************
 15607 ;; Defined at:
 15608 ;;		line 58 in file "memory.c"
 15609 ;; Parameters:    Size  Location     Type
 15610 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 15611 ;; Auto vars:     Size  Location     Type
 15612 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 15613 ;; Return value:  Size  Location     Type
 15614 ;;                  2    0[BANK1 ] unsigned int 
 15615 ;; Registers used:
 15616 ;;		wreg, status,2, status,0
 15617 ;; Tracked objects:
 15618 ;;		On entry : 0/0
 15619 ;;		On exit  : 0/0
 15620 ;;		Unchanged: 0/0
 15621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15622 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15623 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15625 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15626 ;;Total ram usage:        3 bytes
 15627 ;; Hardware stack levels used:    1
 15628 ;; Hardware stack levels required when called:    3
 15629 ;; This function calls:
 15630 ;;		Nothing
 15631 ;; This function is called by:
 15632 ;;		_ReadSavedSettings
 15633 ;;		_FLASH_WriteWord
 15634 ;; This function uses a non-reentrant model
 15635 ;;
 15636                           
 15637                           
 15638                           ;psect for function _FLASH_ReadWord
 15639  2689                     _FLASH_ReadWord:	
 15640                           
 15641                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 15642                           
 15643                           ;incstack = 0
 15644                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 15645  2689  3000               	movlw	0
 15646  268A  1B8B               	btfsc	11,7	;volatile
 15647  268B  3001               	movlw	1
 15648  268C  0021               	movlb	1	; select bank1
 15649  268D  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 15650                           
 15651                           ;memory.c: 61: INTCONbits.GIE = 0;
 15652  268E  138B               	bcf	11,7	;volatile
 15653                           
 15654                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 15655  268F  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 15656  2690  0023               	movlb	3	; select bank3
 15657  2691  0091               	movwf	17	;volatile
 15658                           
 15659                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 15660  2692  0021               	movlb	1	; select bank1
 15661  2693  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 15662  2694  0023               	movlb	3	; select bank3
 15663  2695  0092               	movwf	18	;volatile
 15664                           
 15665                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 15666  2696  1315               	bcf	21,6	;volatile
 15667                           
 15668                           ;memory.c: 66: PMCON1bits.RD = 1;
 15669  2697  1415               	bsf	21,0	;volatile
 15670                           
 15671                           ;memory.c: 67: __nop();
 15672  2698  0000               	nop
 15673                           
 15674                           ;memory.c: 68: __nop();
 15675  2699  0000               	nop
 15676                           
 15677                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 15678  269A  0021               	movlb	1	; select bank1
 15679  269B  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 15680  269C  1C03               	skipc
 15681  269D  138B               	bcf	11,7	;volatile
 15682  269E  1803               	skipnc
 15683  269F  178B               	bsf	11,7	;volatile
 15684                           
 15685                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 15686  26A0  0023               	movlb	3	; select bank3
 15687  26A1  0814               	movf	20,w	;volatile
 15688  26A2  0021               	movlb	1	; select bank1
 15689  26A3  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 15690  26A4  0023               	movlb	3	; select bank3
 15691  26A5  0813               	movf	19,w	;volatile
 15692  26A6  0021               	movlb	1	; select bank1
 15693  26A7  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 15694  26A8  0008               	return
 15695  26A9                     __end_of_FLASH_ReadWord:	
 15696                           
 15697                           	psect	text56
 15698  26EF                     __ptext56:	
 15699 ;; *************** function _InitializeTaps *****************
 15700 ;; Defined at:
 15701 ;;		line 219 in file "user.c"
 15702 ;; Parameters:    Size  Location     Type
 15703 ;;		None
 15704 ;; Auto vars:     Size  Location     Type
 15705 ;;  itap            2    1[BANK1 ] int 
 15706 ;; Return value:  Size  Location     Type
 15707 ;;                  1    wreg      void 
 15708 ;; Registers used:
 15709 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15716 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15717 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15718 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15719 ;;Total ram usage:        3 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:    3
 15722 ;; This function calls:
 15723 ;;		Nothing
 15724 ;; This function is called by:
 15725 ;;		_main
 15726 ;; This function uses a non-reentrant model
 15727 ;;
 15728                           
 15729                           
 15730                           ;psect for function _InitializeTaps
 15731  26EF                     _InitializeTaps:	
 15732                           
 15733                           ;user.c: 220: for (int itap = 0; itap < 12; itap++) {
 15734                           
 15735                           ;incstack = 0
 15736                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 15737  26EF  0021               	movlb	1	; select bank1
 15738  26F0  01A1               	clrf	InitializeTaps@itap^(0+128)
 15739  26F1  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 15740  26F2                     L17:	
 15741  26F2  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 15742  26F3  3A80               	xorlw	128
 15743  26F4  00A0               	movwf	??_InitializeTaps^(0+128)
 15744  26F5  3080               	movlw	128
 15745  26F6  0220               	subwf	??_InitializeTaps^(0+128),w
 15746  26F7  1D03               	skipz
 15747  26F8  2EFB               	goto	u8175
 15748  26F9  300C               	movlw	12
 15749  26FA  0221               	subwf	InitializeTaps@itap^(0+128),w
 15750  26FB                     u8175:	
 15751  26FB  1803               	btfsc	3,0
 15752  26FC  0008               	return
 15753                           
 15754                           ;user.c: 221: tap[itap] = 0;
 15755  26FD  0021               	movlb	1	; select bank1
 15756  26FE  0821               	movf	InitializeTaps@itap^(0+128),w
 15757  26FF  00A0               	movwf	??_InitializeTaps^(0+128)
 15758  2700  3001               	movlw	1
 15759  2701                     u8185:	
 15760  2701  35A0               	lslf	??_InitializeTaps^(0+128),f
 15761  2702  3EFF               	addlw	-1
 15762  2703  1D03               	skipz
 15763  2704  2F01               	goto	u8185
 15764  2705  3520               	lslf	??_InitializeTaps^(0+128),w
 15765  2706  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 15766  2707  0086               	movwf	6
 15767  2708  3002               	movlw	2	; select bank5/6
 15768  2709  0087               	movwf	7
 15769  270A  3000               	movlw	0
 15770  270B  3FC0               	movwi [0]fsr1
 15771  270C  3000               	movlw	0
 15772  270D  3FC1               	movwi [1]fsr1
 15773  270E  3FC2               	movwi [2]fsr1
 15774  270F  3FC3               	movwi [3]fsr1
 15775  2710  3001               	movlw	1
 15776  2711  07A1               	addwf	InitializeTaps@itap^(0+128),f
 15777  2712  3000               	movlw	0
 15778  2713  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 15779  2714  2EF2               	goto	L17
 15780  2715                     __end_of_InitializeTaps:	
 15781                           
 15782                           	psect	text57
 15783  276E                     __ptext57:	
 15784 ;; *************** function _InitApp *****************
 15785 ;; Defined at:
 15786 ;;		line 23 in file "user.c"
 15787 ;; Parameters:    Size  Location     Type
 15788 ;;		None
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;		None
 15791 ;; Return value:  Size  Location     Type
 15792 ;;                  1    wreg      void 
 15793 ;; Registers used:
 15794 ;;		wreg, status,2, status,0, pclath, cstack
 15795 ;; Tracked objects:
 15796 ;;		On entry : 0/0
 15797 ;;		On exit  : 0/0
 15798 ;;		Unchanged: 0/0
 15799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15804 ;;Total ram usage:        0 bytes
 15805 ;; Hardware stack levels used:    1
 15806 ;; Hardware stack levels required when called:    5
 15807 ;; This function calls:
 15808 ;;		_init_adc
 15809 ;;		_init_pwm
 15810 ;; This function is called by:
 15811 ;;		_main
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           
 15816                           ;psect for function _InitApp
 15817  276E                     _InitApp:	
 15818                           
 15819                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 15820                           
 15821                           ;incstack = 0
 15822                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 15823  276E  0021               	movlb	1	; select bank1
 15824  276F  100D               	bcf	13,0	;volatile
 15825                           
 15826                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 15827  2770  108D               	bcf	13,1	;volatile
 15828                           
 15829                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 15830  2771  110D               	bcf	13,2	;volatile
 15831                           
 15832                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 15833  2772  118D               	bcf	13,3	;volatile
 15834                           
 15835                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 15836  2773  120D               	bcf	13,4	;volatile
 15837                           
 15838                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 15839  2774  128D               	bcf	13,5	;volatile
 15840                           
 15841                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 15842  2775  140E               	bsf	14,0	;volatile
 15843                           
 15844                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 15845  2776  120E               	bcf	14,4	;volatile
 15846                           
 15847                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 15848  2777  128E               	bcf	14,5	;volatile
 15849                           
 15850                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 15851  2778  100F               	bcf	15,0	;volatile
 15852                           
 15853                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 15854  2779  108F               	bcf	15,1	;volatile
 15855                           
 15856                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 15857  277A  110F               	bcf	15,2	;volatile
 15858                           
 15859                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 15860  277B  118F               	bcf	15,3	;volatile
 15861                           
 15862                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 15863  277C  120F               	bcf	15,4	;volatile
 15864                           
 15865                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 15866  277D  168F               	bsf	15,5	;volatile
 15867                           
 15868                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 15869  277E  170F               	bsf	15,6	;volatile
 15870                           
 15871                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 15872  277F  178F               	bsf	15,7	;volatile
 15873                           
 15874                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 15875  2780  1410               	bsf	16,0	;volatile
 15876                           
 15877                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 15878  2781  1490               	bsf	16,1	;volatile
 15879                           
 15880                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 15881  2782  0023               	movlb	3	; select bank3
 15882  2783  1010               	bcf	16,0	;volatile
 15883                           
 15884                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 15885  2784  1090               	bcf	16,1	;volatile
 15886                           
 15887                           ;user.c: 53: PORTEbits.RE0 = 0;
 15888  2785  0020               	movlb	0	; select bank0
 15889  2786  1010               	bcf	16,0	;volatile
 15890                           
 15891                           ;user.c: 54: PORTEbits.RE1 = 0;
 15892  2787  1090               	bcf	16,1	;volatile
 15893                           
 15894                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 15895  2788  0026               	movlb	6	; select bank6
 15896  2789  100C               	bcf	12,0	;volatile
 15897                           
 15898                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 15899  278A  108C               	bcf	12,1	;volatile
 15900                           
 15901                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 15902  278B  110C               	bcf	12,2	;volatile
 15903                           
 15904                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 15905  278C  118C               	bcf	12,3	;volatile
 15906                           
 15907                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 15908  278D  120C               	bcf	12,4	;volatile
 15909                           
 15910                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 15911  278E  128C               	bcf	12,5	;volatile
 15912                           
 15913                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 15914  278F  170C               	bsf	12,6	;volatile
 15915                           
 15916                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 15917  2790  0028               	movlb	8	; select bank8
 15918  2791  130C               	bcf	12,6	;volatile
 15919                           
 15920                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 15921  2792  0026               	movlb	6	; select bank6
 15922  2793  108D               	bcf	13,1	;volatile
 15923                           
 15924                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 15925  2794  110D               	bcf	13,2	;volatile
 15926                           
 15927                           ;user.c: 68: init_adc();
 15928  2795  3198  2001  31A7   	fcall	_init_adc
 15929                           
 15930                           ;user.c: 69: init_pwm();
 15931  2798  319A  22E7         	fcall	_init_pwm
 15932                           
 15933                           ;user.c: 71: INTCONbits.GIE = 0b1;
 15934  279A  178B               	bsf	11,7	;volatile
 15935                           
 15936                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 15937  279B  168B               	bsf	11,5	;volatile
 15938                           
 15939                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 15940  279C  110B               	bcf	11,2	;volatile
 15941  279D  0008               	return
 15942  279E                     __end_of_InitApp:	
 15943                           
 15944                           	psect	text58
 15945  1AE7                     __ptext58:	
 15946 ;; *************** function _init_pwm *****************
 15947 ;; Defined at:
 15948 ;;		line 129 in file "user.c"
 15949 ;; Parameters:    Size  Location     Type
 15950 ;;		None
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;		None
 15953 ;; Return value:  Size  Location     Type
 15954 ;;                  1    wreg      void 
 15955 ;; Registers used:
 15956 ;;		wreg, status,2, status,0, pclath, cstack
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15966 ;;Total ram usage:        0 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    4
 15969 ;; This function calls:
 15970 ;;		_init_timer0
 15971 ;;		_init_timer2
 15972 ;; This function is called by:
 15973 ;;		_InitApp
 15974 ;; This function uses a non-reentrant model
 15975 ;;
 15976                           
 15977                           
 15978                           ;psect for function _init_pwm
 15979  1AE7                     _init_pwm:	
 15980                           
 15981                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 15982                           
 15983                           ;incstack = 0
 15984                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 15985  1AE7  0022               	movlb	2	; select bank2
 15986  1AE8  101D               	bcf	29,0	;volatile
 15987                           
 15988                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 15989  1AE9  0021               	movlb	1	; select bank1
 15990  1AEA  110E               	bcf	14,2	;volatile
 15991                           
 15992                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 15993  1AEB  108E               	bcf	14,1	;volatile
 15994                           
 15995                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 15996  1AEC  0026               	movlb	6	; select bank6
 15997  1AED  100D               	bcf	13,0	;volatile
 15998                           
 15999                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 16000  1AEE  118D               	bcf	13,3	;volatile
 16001                           
 16002                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 16003  1AEF  120D               	bcf	13,4	;volatile
 16004                           
 16005                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 16006  1AF0  0021               	movlb	1	; select bank1
 16007  1AF1  1310               	bcf	16,6	;volatile
 16008                           
 16009                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 16010  1AF2  1290               	bcf	16,5	;volatile
 16011                           
 16012                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 16013  1AF3  1210               	bcf	16,4	;volatile
 16014                           
 16015                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 16016  1AF4  1190               	bcf	16,3	;volatile
 16017                           
 16018                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 16019  1AF5  1110               	bcf	16,2	;volatile
 16020                           
 16021                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 16022  1AF6  300F               	movlw	15
 16023  1AF7  0025               	movlb	5	; select bank5
 16024  1AF8  0493               	iorwf	19,f	;volatile
 16025                           
 16026                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 16027  1AF9  300F               	movlw	15
 16028  1AFA  049A               	iorwf	26,f	;volatile
 16029                           
 16030                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 16031  1AFB  300F               	movlw	15
 16032  1AFC  0026               	movlb	6	; select bank6
 16033  1AFD  0493               	iorwf	19,f	;volatile
 16034                           
 16035                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 16036  1AFE  300F               	movlw	15
 16037  1AFF  049A               	iorwf	26,f	;volatile
 16038                           
 16039                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 16040  1B00  300F               	movlw	15
 16041  1B01  049E               	iorwf	30,f	;volatile
 16042                           
 16043                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 16044  1B02  300F               	movlw	15
 16045  1B03  002C               	movlb	12	; select bank12
 16046  1B04  0493               	iorwf	19,f	;volatile
 16047                           
 16048                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 16049  1B05  300F               	movlw	15
 16050  1B06  0496               	iorwf	22,f	;volatile
 16051                           
 16052                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 16053  1B07  300F               	movlw	15
 16054  1B08  0499               	iorwf	25,f	;volatile
 16055                           
 16056                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 16057  1B09  300F               	movlw	15
 16058  1B0A  049C               	iorwf	28,f	;volatile
 16059                           
 16060                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 16061  1B0B  300F               	movlw	15
 16062  1B0C  049F               	iorwf	31,f	;volatile
 16063                           
 16064                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 16065  1B0D  0025               	movlb	5	; select bank5
 16066  1B0E  019D               	clrf	29	;volatile
 16067                           
 16068                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 16069  1B0F  019E               	clrf	30	;volatile
 16070                           
 16071                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 16072  1B10  019F               	clrf	31	;volatile
 16073                           
 16074                           ;user.c: 154: CCPR1 = 50;
 16075  1B11  3000               	movlw	0
 16076  1B12  0092               	movwf	18	;volatile
 16077  1B13  3032               	movlw	50
 16078  1B14  0091               	movwf	17	;volatile
 16079                           
 16080                           ;user.c: 155: CCPR2 = 100;
 16081  1B15  3000               	movlw	0
 16082  1B16  0099               	movwf	25	;volatile
 16083  1B17  3064               	movlw	100
 16084  1B18  0098               	movwf	24	;volatile
 16085                           
 16086                           ;user.c: 156: CCPR3 = 150;
 16087  1B19  3000               	movlw	0
 16088  1B1A  0026               	movlb	6	; select bank6
 16089  1B1B  0092               	movwf	18	;volatile
 16090  1B1C  3096               	movlw	150
 16091  1B1D  0091               	movwf	17	;volatile
 16092                           
 16093                           ;user.c: 157: CCPR4 = 200;
 16094  1B1E  3000               	movlw	0
 16095  1B1F  0099               	movwf	25	;volatile
 16096  1B20  30C8               	movlw	200
 16097  1B21  0098               	movwf	24	;volatile
 16098                           
 16099                           ;user.c: 158: init_timer2();
 16100  1B22  31A5  255D  319A   	fcall	_init_timer2
 16101                           
 16102                           ;user.c: 159: init_timer0();
 16103  1B25  31A5  2556         	fcall	_init_timer0
 16104  1B27  0008               	return
 16105  1B28                     __end_of_init_pwm:	
 16106                           
 16107                           	psect	text59
 16108  255D                     __ptext59:	
 16109 ;; *************** function _init_timer2 *****************
 16110 ;; Defined at:
 16111 ;;		line 162 in file "user.c"
 16112 ;; Parameters:    Size  Location     Type
 16113 ;;		None
 16114 ;; Auto vars:     Size  Location     Type
 16115 ;;		None
 16116 ;; Return value:  Size  Location     Type
 16117 ;;                  1    wreg      void 
 16118 ;; Registers used:
 16119 ;;		wreg, status,2, status,0
 16120 ;; Tracked objects:
 16121 ;;		On entry : 0/0
 16122 ;;		On exit  : 0/0
 16123 ;;		Unchanged: 0/0
 16124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16129 ;;Total ram usage:        0 bytes
 16130 ;; Hardware stack levels used:    1
 16131 ;; Hardware stack levels required when called:    3
 16132 ;; This function calls:
 16133 ;;		Nothing
 16134 ;; This function is called by:
 16135 ;;		_init_pwm
 16136 ;; This function uses a non-reentrant model
 16137 ;;
 16138                           
 16139                           
 16140                           ;psect for function _init_timer2
 16141  255D                     _init_timer2:	
 16142                           
 16143                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 16144                           
 16145                           ;incstack = 0
 16146                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 16147  255D  3087               	movlw	-121
 16148  255E  0020               	movlb	0	; select bank0
 16149  255F  059C               	andwf	28,f	;volatile
 16150                           
 16151                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 16152  2560  30FC               	movlw	-4
 16153  2561  059C               	andwf	28,f	;volatile
 16154                           
 16155                           ;user.c: 165: PR2 = 0xFF;
 16156  2562  30FF               	movlw	255
 16157  2563  009B               	movwf	27	;volatile
 16158                           
 16159                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 16160  2564  151C               	bsf	28,2	;volatile
 16161  2565  0008               	return
 16162  2566                     __end_of_init_timer2:	
 16163                           
 16164                           	psect	text60
 16165  2556                     __ptext60:	
 16166 ;; *************** function _init_timer0 *****************
 16167 ;; Defined at:
 16168 ;;		line 169 in file "user.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;		None
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;		None
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  1    wreg      void 
 16175 ;; Registers used:
 16176 ;;		None
 16177 ;; Tracked objects:
 16178 ;;		On entry : 0/0
 16179 ;;		On exit  : 0/0
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16186 ;;Total ram usage:        0 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; Hardware stack levels required when called:    3
 16189 ;; This function calls:
 16190 ;;		Nothing
 16191 ;; This function is called by:
 16192 ;;		_init_pwm
 16193 ;; This function uses a non-reentrant model
 16194 ;;
 16195                           
 16196                           
 16197                           ;psect for function _init_timer0
 16198  2556                     _init_timer0:	
 16199                           
 16200                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in _init_timer0: []
 16204  2556  0021               	movlb	1	; select bank1
 16205  2557  1295               	bcf	21,5	;volatile
 16206                           
 16207                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 16208  2558  1195               	bcf	21,3	;volatile
 16209                           
 16210                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 16211  2559  1015               	bcf	21,0	;volatile
 16212                           
 16213                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 16214  255A  1495               	bsf	21,1	;volatile
 16215                           
 16216                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 16217  255B  1115               	bcf	21,2	;volatile
 16218  255C  0008               	return
 16219  255D                     __end_of_init_timer0:	
 16220                           
 16221                           	psect	text61
 16222  1801                     __ptext61:	
 16223 ;; *************** function _init_adc *****************
 16224 ;; Defined at:
 16225 ;;		line 115 in file "user.c"
 16226 ;; Parameters:    Size  Location     Type
 16227 ;;		None
 16228 ;; Auto vars:     Size  Location     Type
 16229 ;;		None
 16230 ;; Return value:  Size  Location     Type
 16231 ;;                  1    wreg      void 
 16232 ;; Registers used:
 16233 ;;		wreg, status,2, status,0
 16234 ;; Tracked objects:
 16235 ;;		On entry : 0/0
 16236 ;;		On exit  : 0/0
 16237 ;;		Unchanged: 0/0
 16238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16243 ;;Total ram usage:        0 bytes
 16244 ;; Hardware stack levels used:    1
 16245 ;; Hardware stack levels required when called:    3
 16246 ;; This function calls:
 16247 ;;		Nothing
 16248 ;; This function is called by:
 16249 ;;		_InitApp
 16250 ;; This function uses a non-reentrant model
 16251 ;;
 16252                           
 16253                           
 16254                           ;psect for function _init_adc
 16255  1801                     _init_adc:	
 16256                           
 16257                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 16258                           
 16259                           ;incstack = 0
 16260                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 16261  1801  0021               	movlb	1	; select bank1
 16262  1802  179E               	bsf	30,7	;volatile
 16263                           
 16264                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 16265  1803  081E               	movf	30,w	;volatile
 16266  1804  398F               	andlw	-113
 16267  1805  3860               	iorlw	96
 16268  1806  009E               	movwf	30	;volatile
 16269                           
 16270                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 16271  1807  30FC               	movlw	-4
 16272  1808  059E               	andwf	30,f	;volatile
 16273                           
 16274                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 16275  1809  141D               	bsf	29,0	;volatile
 16276  180A  0008               	return
 16277  180B                     __end_of_init_adc:	
 16278                           
 16279                           	psect	text62
 16280  254E                     __ptext62:	
 16281 ;; *************** function _ConfigureOscillator *****************
 16282 ;; Defined at:
 16283 ;;		line 18 in file "system.c"
 16284 ;; Parameters:    Size  Location     Type
 16285 ;;		None
 16286 ;; Auto vars:     Size  Location     Type
 16287 ;;		None
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  1    wreg      void 
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, status,0
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16301 ;;Total ram usage:        0 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    3
 16304 ;; This function calls:
 16305 ;;		Nothing
 16306 ;; This function is called by:
 16307 ;;		_main
 16308 ;; This function uses a non-reentrant model
 16309 ;;
 16310                           
 16311                           
 16312                           ;psect for function _ConfigureOscillator
 16313  254E                     _ConfigureOscillator:	
 16314                           
 16315                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 16316                           
 16317                           ;incstack = 0
 16318                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 16319  254E  30FC               	movlw	-4
 16320  254F  0021               	movlb	1	; select bank1
 16321  2550  0599               	andwf	25,f	;volatile
 16322  2551  0008               	return
 16323  2552                     __end_of_ConfigureOscillator:	
 16324                           
 16325                           	psect	intentry
 16326  0004                     __pintentry:	
 16327 ;; *************** function _isr *****************
 16328 ;; Defined at:
 16329 ;;		line 27 in file "interrupts.c"
 16330 ;; Parameters:    Size  Location     Type
 16331 ;;		None
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;  tmpSubDelay     2   35[BANK0 ] int 
 16334 ;; Return value:  Size  Location     Type
 16335 ;;                  1    wreg      void 
 16336 ;; Registers used:
 16337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16338 ;; Tracked objects:
 16339 ;;		On entry : 0/0
 16340 ;;		On exit  : 0/0
 16341 ;;		Unchanged: 0/0
 16342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16345 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16346 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16347 ;;Total ram usage:       11 bytes
 16348 ;; Hardware stack levels used:    1
 16349 ;; Hardware stack levels required when called:    2
 16350 ;; This function calls:
 16351 ;;		___awdiv
 16352 ;;		_modulation
 16353 ;;		i1_set_leds_top
 16354 ;; This function is called by:
 16355 ;;		Interrupt level 1
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359  0004                     _isr:	
 16360                           
 16361                           ;incstack = 0
 16362                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16363  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 16364  0005  3180               	pagesel	$
 16365  0006  0020               	movlb	0	; select bank0
 16366  0007  087F               	movf	127,w
 16367  0008  00C2               	movwf	??_isr+8
 16368                           
 16369                           ;interrupts.c: 28: int tmpSubDelay;
 16370                           ;interrupts.c: 30: extern volatile long timer;
 16371                           ;interrupts.c: 31: extern volatile long sub_timer;
 16372                           ;interrupts.c: 32: extern volatile long tap_timer;
 16373                           ;interrupts.c: 33: extern signed int adjusted_pot_value;
 16374                           ;interrupts.c: 34: extern int mod_delay_time;
 16375                           ;interrupts.c: 36: extern volatile long baseline_delay_time;
 16376                           ;interrupts.c: 38: extern int top_push_state;
 16377                           ;interrupts.c: 39: extern uint8_t feedback_start;
 16378                           ;interrupts.c: 40: extern volatile long mod_timer;
 16379                           ;interrupts.c: 41: extern volatile long delay_time;
 16380  0009  1D0B               	btfss	11,2	;volatile
 16381  000A  291F               	goto	i1l139
 16382                           
 16383                           ;interrupts.c: 45: tmpSubDelay = delay_time;
 16384  000B  084A               	movf	_delay_time+1,w	;volatile
 16385  000C  00C4               	movwf	isr@tmpSubDelay+1
 16386  000D  0849               	movf	_delay_time,w	;volatile
 16387  000E  00C3               	movwf	isr@tmpSubDelay
 16388                           
 16389                           ;interrupts.c: 46: timer = timer + 1;
 16390  000F  3001               	movlw	1
 16391  0010  00BA               	movwf	??_isr
 16392  0011  3000               	movlw	0
 16393  0012  00BB               	movwf	??_isr+1
 16394  0013  3000               	movlw	0
 16395  0014  00BC               	movwf	??_isr+2
 16396  0015  3000               	movlw	0
 16397  0016  00BD               	movwf	??_isr+3
 16398  0017  0862               	movf	_timer,w	;volatile
 16399  0018  07BA               	addwf	??_isr,f
 16400  0019  0863               	movf	_timer+1,w	;volatile
 16401  001A  3DBB               	addwfc	??_isr+1,f
 16402  001B  0864               	movf	_timer+2,w	;volatile
 16403  001C  3DBC               	addwfc	??_isr+2,f
 16404  001D  0865               	movf	_timer+3,w	;volatile
 16405  001E  3DBD               	addwfc	??_isr+3,f
 16406  001F  083D               	movf	??_isr+3,w
 16407  0020  00E5               	movwf	_timer+3	;volatile
 16408  0021  083C               	movf	??_isr+2,w
 16409  0022  00E4               	movwf	_timer+2	;volatile
 16410  0023  083B               	movf	??_isr+1,w
 16411  0024  00E3               	movwf	_timer+1	;volatile
 16412  0025  083A               	movf	??_isr,w
 16413  0026  00E2               	movwf	_timer	;volatile
 16414                           
 16415                           ;interrupts.c: 47: sub_timer = sub_timer + 1;
 16416  0027  3001               	movlw	1
 16417  0028  00BA               	movwf	??_isr
 16418  0029  3000               	movlw	0
 16419  002A  00BB               	movwf	??_isr+1
 16420  002B  3000               	movlw	0
 16421  002C  00BC               	movwf	??_isr+2
 16422  002D  3000               	movlw	0
 16423  002E  00BD               	movwf	??_isr+3
 16424  002F  085A               	movf	_sub_timer,w	;volatile
 16425  0030  07BA               	addwf	??_isr,f
 16426  0031  085B               	movf	_sub_timer+1,w	;volatile
 16427  0032  3DBB               	addwfc	??_isr+1,f
 16428  0033  085C               	movf	_sub_timer+2,w	;volatile
 16429  0034  3DBC               	addwfc	??_isr+2,f
 16430  0035  085D               	movf	_sub_timer+3,w	;volatile
 16431  0036  3DBD               	addwfc	??_isr+3,f
 16432  0037  083D               	movf	??_isr+3,w
 16433  0038  00DD               	movwf	_sub_timer+3	;volatile
 16434  0039  083C               	movf	??_isr+2,w
 16435  003A  00DC               	movwf	_sub_timer+2	;volatile
 16436  003B  083B               	movf	??_isr+1,w
 16437  003C  00DB               	movwf	_sub_timer+1	;volatile
 16438  003D  083A               	movf	??_isr,w
 16439  003E  00DA               	movwf	_sub_timer	;volatile
 16440                           
 16441                           ;interrupts.c: 48: tap_timer = tap_timer + 1;
 16442  003F  3001               	movlw	1
 16443  0040  00BA               	movwf	??_isr
 16444  0041  3000               	movlw	0
 16445  0042  00BB               	movwf	??_isr+1
 16446  0043  3000               	movlw	0
 16447  0044  00BC               	movwf	??_isr+2
 16448  0045  3000               	movlw	0
 16449  0046  00BD               	movwf	??_isr+3
 16450  0047  085E               	movf	_tap_timer,w	;volatile
 16451  0048  07BA               	addwf	??_isr,f
 16452  0049  085F               	movf	_tap_timer+1,w	;volatile
 16453  004A  3DBB               	addwfc	??_isr+1,f
 16454  004B  0860               	movf	_tap_timer+2,w	;volatile
 16455  004C  3DBC               	addwfc	??_isr+2,f
 16456  004D  0861               	movf	_tap_timer+3,w	;volatile
 16457  004E  3DBD               	addwfc	??_isr+3,f
 16458  004F  083D               	movf	??_isr+3,w
 16459  0050  00E1               	movwf	_tap_timer+3	;volatile
 16460  0051  083C               	movf	??_isr+2,w
 16461  0052  00E0               	movwf	_tap_timer+2	;volatile
 16462  0053  083B               	movf	??_isr+1,w
 16463  0054  00DF               	movwf	_tap_timer+1	;volatile
 16464  0055  083A               	movf	??_isr,w
 16465  0056  00DE               	movwf	_tap_timer	;volatile
 16466                           
 16467                           ;interrupts.c: 49: mod_timer = mod_timer + 1;
 16468  0057  3001               	movlw	1
 16469  0058  00BA               	movwf	??_isr
 16470  0059  3000               	movlw	0
 16471  005A  00BB               	movwf	??_isr+1
 16472  005B  3000               	movlw	0
 16473  005C  00BC               	movwf	??_isr+2
 16474  005D  3000               	movlw	0
 16475  005E  00BD               	movwf	??_isr+3
 16476  005F  0023               	movlb	3	; select bank3
 16477  0060  0824               	movf	_mod_timer^(0+384),w	;volatile
 16478  0061  0020               	movlb	0	; select bank0
 16479  0062  07BA               	addwf	??_isr,f
 16480  0063  0023               	movlb	3	; select bank3
 16481  0064  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 16482  0065  0020               	movlb	0	; select bank0
 16483  0066  3DBB               	addwfc	??_isr+1,f
 16484  0067  0023               	movlb	3	; select bank3
 16485  0068  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 16486  0069  0020               	movlb	0	; select bank0
 16487  006A  3DBC               	addwfc	??_isr+2,f
 16488  006B  0023               	movlb	3	; select bank3
 16489  006C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 16490  006D  0020               	movlb	0	; select bank0
 16491  006E  3DBD               	addwfc	??_isr+3,f
 16492  006F  083D               	movf	??_isr+3,w
 16493  0070  0023               	movlb	3	; select bank3
 16494  0071  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 16495  0072  0020               	movlb	0	; select bank0
 16496  0073  083C               	movf	??_isr+2,w
 16497  0074  0023               	movlb	3	; select bank3
 16498  0075  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 16499  0076  0020               	movlb	0	; select bank0
 16500  0077  083B               	movf	??_isr+1,w
 16501  0078  0023               	movlb	3	; select bank3
 16502  0079  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 16503  007A  0020               	movlb	0	; select bank0
 16504  007B  083A               	movf	??_isr,w
 16505  007C  0023               	movlb	3	; select bank3
 16506  007D  00A4               	movwf	_mod_timer^(0+384)	;volatile
 16507                           
 16508                           ;interrupts.c: 50: double_timer++;
 16509  007E  3001               	movlw	1
 16510  007F  07A0               	addwf	_double_timer^(0+384),f	;volatile
 16511  0080  3000               	movlw	0
 16512  0081  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 16513  0082  3000               	movlw	0
 16514  0083  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 16515  0084  3000               	movlw	0
 16516  0085  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 16517                           
 16518                           ;interrupts.c: 51: test_timer++;
 16519  0086  3001               	movlw	1
 16520  0087  0024               	movlb	4	; select bank4
 16521  0088  07C1               	addwf	_test_timer^(0+512),f	;volatile
 16522  0089  3000               	movlw	0
 16523  008A  3DC2               	addwfc	(_test_timer+1)^(0+512),f	;volatile
 16524  008B  3000               	movlw	0
 16525  008C  3DC3               	addwfc	(_test_timer+2)^(0+512),f	;volatile
 16526  008D  3000               	movlw	0
 16527  008E  3DC4               	addwfc	(_test_timer+3)^(0+512),f	;volatile
 16528                           
 16529                           ;interrupts.c: 52: if (feedback_start == 1) {
 16530  008F  0023               	movlb	3	; select bank3
 16531  0090  0340               	decf	_feedback_start^(0+384),w
 16532  0091  1D03               	btfss	3,2
 16533  0092  28A9               	goto	i1l6087
 16534                           
 16535                           ;interrupts.c: 53: feedback_timer++;
 16536  0093  3001               	movlw	1
 16537  0094  07AA               	addwf	_feedback_timer^(0+384),f	;volatile
 16538  0095  3000               	movlw	0
 16539  0096  3DAB               	addwfc	(_feedback_timer+1)^(0+384),f	;volatile
 16540                           
 16541                           ;interrupts.c: 54: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 16542  0097  082B               	movf	(_feedback_timer+1)^(0+384),w	;volatile
 16543  0098  0020               	movlb	0	; select bank0
 16544  0099  0252               	subwf	_long_press_limit+1,w
 16545  009A  1D03               	skipz
 16546  009B  28A0               	goto	u591_25
 16547  009C  0023               	movlb	3	; select bank3
 16548  009D  082A               	movf	_feedback_timer^(0+384),w	;volatile
 16549  009E  0020               	movlb	0	; select bank0
 16550  009F  0251               	subwf	_long_press_limit,w
 16551  00A0                     u591_25:	
 16552  00A0  1803               	skipnc
 16553  00A1  28A9               	goto	i1l6087
 16554  00A2  0852               	movf	_long_press_limit+1,w
 16555  00A3  0023               	movlb	3	; select bank3
 16556  00A4  00AB               	movwf	(_feedback_timer+1)^(0+384)	;volatile
 16557  00A5  0020               	movlb	0	; select bank0
 16558  00A6  0851               	movf	_long_press_limit,w
 16559  00A7  0023               	movlb	3	; select bank3
 16560  00A8  00AA               	movwf	_feedback_timer^(0+384)	;volatile
 16561  00A9                     i1l6087:	
 16562                           
 16563                           ;interrupts.c: 55: }
 16564                           ;interrupts.c: 56: if (longTap_start == 1) {
 16565  00A9  0023               	movlb	3	; select bank3
 16566  00AA  0342               	decf	_longTap_start^(0+384),w
 16567  00AB  1D03               	btfss	3,2
 16568  00AC  28C3               	goto	i1l6093
 16569                           
 16570                           ;interrupts.c: 57: longTap_timer++;
 16571  00AD  3001               	movlw	1
 16572  00AE  07B6               	addwf	_longTap_timer^(0+384),f	;volatile
 16573  00AF  3000               	movlw	0
 16574  00B0  3DB7               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 16575                           
 16576                           ;interrupts.c: 58: if (longTap_timer > long_press_limit) {
 16577  00B1  0837               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 16578  00B2  0020               	movlb	0	; select bank0
 16579  00B3  0252               	subwf	_long_press_limit+1,w
 16580  00B4  1D03               	skipz
 16581  00B5  28BA               	goto	u593_25
 16582  00B6  0023               	movlb	3	; select bank3
 16583  00B7  0836               	movf	_longTap_timer^(0+384),w	;volatile
 16584  00B8  0020               	movlb	0	; select bank0
 16585  00B9  0251               	subwf	_long_press_limit,w
 16586  00BA                     u593_25:	
 16587  00BA  1803               	skipnc
 16588  00BB  28C3               	goto	i1l6093
 16589                           
 16590                           ;interrupts.c: 59: longTap_timer = long_press_limit;
 16591  00BC  0852               	movf	_long_press_limit+1,w
 16592  00BD  0023               	movlb	3	; select bank3
 16593  00BE  00B7               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 16594  00BF  0020               	movlb	0	; select bank0
 16595  00C0  0851               	movf	_long_press_limit,w
 16596  00C1  0023               	movlb	3	; select bank3
 16597  00C2  00B6               	movwf	_longTap_timer^(0+384)	;volatile
 16598  00C3                     i1l6093:	
 16599                           
 16600                           ;interrupts.c: 60: }
 16601                           ;interrupts.c: 61: }
 16602                           ;interrupts.c: 62: INTCONbits.TMR0IF = 0;
 16603  00C3  110B               	bcf	11,2	;volatile
 16604                           
 16605                           ;interrupts.c: 64: if (adjust_sub_delay == 1) {
 16606  00C4  0024               	movlb	4	; select bank4
 16607  00C5  0345               	decf	_adjust_sub_delay^(0+512),w
 16608  00C6  0446               	iorwf	(_adjust_sub_delay+1)^(0+512),w
 16609  00C7  1D03               	btfss	3,2
 16610  00C8  291F               	goto	i1l139
 16611                           
 16612                           ;interrupts.c: 65: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 16613  00C9  0020               	movlb	0	; select bank0
 16614  00CA  085D               	movf	_sub_timer+3,w	;volatile
 16615  00CB  3A80               	xorlw	128
 16616  00CC  00BA               	movwf	??_isr
 16617  00CD  084C               	movf	_delay_time+3,w	;volatile
 16618  00CE  3A80               	xorlw	128
 16619  00CF  023A               	subwf	??_isr,w
 16620  00D0  1D03               	skipz
 16621  00D1  28DC               	goto	u595_23
 16622  00D2  084B               	movf	_delay_time+2,w	;volatile
 16623  00D3  025C               	subwf	_sub_timer+2,w	;volatile
 16624  00D4  1D03               	skipz
 16625  00D5  28DC               	goto	u595_23
 16626  00D6  084A               	movf	_delay_time+1,w	;volatile
 16627  00D7  025B               	subwf	_sub_timer+1,w	;volatile
 16628  00D8  1D03               	skipz
 16629  00D9  28DC               	goto	u595_23
 16630  00DA  0849               	movf	_delay_time,w	;volatile
 16631  00DB  025A               	subwf	_sub_timer,w	;volatile
 16632  00DC                     u595_23:	
 16633  00DC  1C03               	skipc
 16634  00DD  291F               	goto	i1l139
 16635  00DE  0845               	movf	_baseline_delay_time,w	;volatile
 16636  00DF  00BA               	movwf	??_isr
 16637  00E0  0846               	movf	_baseline_delay_time+1,w	;volatile
 16638  00E1  00BB               	movwf	??_isr+1
 16639  00E2  0847               	movf	_baseline_delay_time+2,w	;volatile
 16640  00E3  00BC               	movwf	??_isr+2
 16641  00E4  0848               	movf	_baseline_delay_time+3,w	;volatile
 16642  00E5  00BD               	movwf	??_isr+3
 16643  00E6  0962               	comf	_timer,w	;volatile
 16644  00E7  00BE               	movwf	??_isr+4
 16645  00E8  0963               	comf	_timer+1,w	;volatile
 16646  00E9  00BF               	movwf	??_isr+5
 16647  00EA  0964               	comf	_timer+2,w	;volatile
 16648  00EB  00C0               	movwf	??_isr+6
 16649  00EC  0965               	comf	_timer+3,w	;volatile
 16650  00ED  00C1               	movwf	??_isr+7
 16651  00EE  0ABE               	incf	??_isr+4,f
 16652  00EF  1903               	skipnz
 16653  00F0  0ABF               	incf	??_isr+5,f
 16654  00F1  1903               	skipnz
 16655  00F2  0AC0               	incf	??_isr+6,f
 16656  00F3  1903               	skipnz
 16657  00F4  0AC1               	incf	??_isr+7,f
 16658  00F5  083E               	movf	??_isr+4,w
 16659  00F6  07BA               	addwf	??_isr,f
 16660  00F7  083F               	movf	??_isr+5,w
 16661  00F8  3DBB               	addwfc	??_isr+1,f
 16662  00F9  0840               	movf	??_isr+6,w
 16663  00FA  3DBC               	addwfc	??_isr+2,f
 16664  00FB  0841               	movf	??_isr+7,w
 16665  00FC  3DBD               	addwfc	??_isr+3,f
 16666  00FD  1BBD               	btfsc	??_isr+3,7
 16667  00FE  290C               	goto	i1l6101
 16668  00FF  083D               	movf	??_isr+3,w
 16669  0100  1D03               	btfss	3,2
 16670  0101  291F               	goto	i1l139
 16671  0102  083C               	movf	??_isr+2,w
 16672  0103  1D03               	btfss	3,2
 16673  0104  291F               	goto	i1l139
 16674  0105  083B               	movf	??_isr+1,w
 16675  0106  1D03               	btfss	3,2
 16676  0107  291F               	goto	i1l139
 16677  0108  3004               	movlw	4
 16678  0109  023A               	subwf	??_isr,w
 16679  010A  1803               	btfsc	3,0
 16680  010B  291F               	goto	i1l139
 16681  010C                     i1l6101:	
 16682                           
 16683                           ;interrupts.c: 66: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 16684  010C  0962               	comf	_timer,w	;volatile
 16685  010D  00BA               	movwf	??_isr
 16686  010E  0963               	comf	_timer+1,w	;volatile
 16687  010F  00BB               	movwf	??_isr+1
 16688  0110  0ABA               	incf	??_isr,f
 16689  0111  1903               	skipnz
 16690  0112  0ABB               	incf	??_isr+1,f
 16691  0113  0845               	movf	_baseline_delay_time,w	;volatile
 16692  0114  073A               	addwf	??_isr,w
 16693  0115  00BC               	movwf	??_isr+2
 16694  0116  0846               	movf	_baseline_delay_time+1,w	;volatile
 16695  0117  3D3B               	addwfc	??_isr+1,w
 16696  0118  00BD               	movwf	??_isr+3
 16697  0119  085A               	movf	_sub_timer,w	;volatile
 16698  011A  073C               	addwf	??_isr+2,w
 16699  011B  00C3               	movwf	isr@tmpSubDelay
 16700  011C  085B               	movf	_sub_timer+1,w	;volatile
 16701  011D  3D3D               	addwfc	??_isr+3,w
 16702  011E  00C4               	movwf	isr@tmpSubDelay+1
 16703  011F                     i1l139:	
 16704                           
 16705                           ;interrupts.c: 67: }
 16706                           ;interrupts.c: 68: }
 16707                           ;interrupts.c: 69: }
 16708                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 16709  011F  0020               	movlb	0	; select bank0
 16710  0120  0857               	movf	_longTap_state,w	;volatile
 16711  0121  1D03               	btfss	3,2
 16712  0122  297F               	goto	i1l6127
 16713  0123  0866               	movf	_doubleTap_state,w	;volatile
 16714  0124  1D03               	btfss	3,2
 16715  0125  297F               	goto	i1l6127
 16716  0126  0868               	movf	_presetSaveMode,w
 16717  0127  1D03               	btfss	3,2
 16718  0128  297F               	goto	i1l6127
 16719                           
 16720                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 16721  0129  0865               	movf	_timer+3,w	;volatile
 16722  012A  3A80               	xorlw	128
 16723  012B  00BA               	movwf	??_isr
 16724  012C  0848               	movf	_baseline_delay_time+3,w	;volatile
 16725  012D  3A80               	xorlw	128
 16726  012E  023A               	subwf	??_isr,w
 16727  012F  1D03               	skipz
 16728  0130  293B               	goto	u600_23
 16729  0131  0847               	movf	_baseline_delay_time+2,w	;volatile
 16730  0132  0264               	subwf	_timer+2,w	;volatile
 16731  0133  1D03               	skipz
 16732  0134  293B               	goto	u600_23
 16733  0135  0846               	movf	_baseline_delay_time+1,w	;volatile
 16734  0136  0263               	subwf	_timer+1,w	;volatile
 16735  0137  1D03               	skipz
 16736  0138  293B               	goto	u600_23
 16737  0139  0845               	movf	_baseline_delay_time,w	;volatile
 16738  013A  0262               	subwf	_timer,w	;volatile
 16739  013B                     u600_23:	
 16740  013B  1C03               	skipc
 16741  013C  296D               	goto	i1l6123
 16742                           
 16743                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 16744  013D  0022               	movlb	2	; select bank2
 16745  013E  160D               	bsf	13,4	;volatile
 16746                           
 16747                           ;interrupts.c: 80: timer = 0;
 16748  013F  3000               	movlw	0
 16749  0140  0020               	movlb	0	; select bank0
 16750  0141  00E5               	movwf	_timer+3	;volatile
 16751  0142  3000               	movlw	0
 16752  0143  00E4               	movwf	_timer+2	;volatile
 16753  0144  3000               	movlw	0
 16754  0145  00E3               	movwf	_timer+1	;volatile
 16755  0146  3000               	movlw	0
 16756  0147  00E2               	movwf	_timer	;volatile
 16757                           
 16758                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 16759  0148  0024               	movlb	4	; select bank4
 16760  0149  0355               	decf	_reset_sub_delay^(0+512),w
 16761  014A  0456               	iorwf	(_reset_sub_delay+1)^(0+512),w
 16762  014B  1D03               	btfss	3,2
 16763  014C  296D               	goto	i1l6123
 16764                           
 16765                           ;interrupts.c: 83: CCPR1 = delay_counter;
 16766  014D  0023               	movlb	3	; select bank3
 16767  014E  0829               	movf	(_delay_counter+1)^(0+384),w	;volatile
 16768  014F  0025               	movlb	5	; select bank5
 16769  0150  0092               	movwf	18	;volatile
 16770  0151  0023               	movlb	3	; select bank3
 16771  0152  0828               	movf	_delay_counter^(0+384),w	;volatile
 16772  0153  0025               	movlb	5	; select bank5
 16773  0154  0091               	movwf	17	;volatile
 16774                           
 16775                           ;interrupts.c: 86: mod_counter = 0;
 16776  0155  0023               	movlb	3	; select bank3
 16777  0156  01B8               	clrf	_mod_counter^(0+384)
 16778  0157  01B9               	clrf	(_mod_counter+1)^(0+384)
 16779                           
 16780                           ;interrupts.c: 87: mod_timer = mod_delay_time;
 16781  0158  0854               	movf	_mod_delay_time^(0+384),w
 16782  0159  00A4               	movwf	_mod_timer^(0+384)	;volatile
 16783  015A  0855               	movf	(_mod_delay_time+1)^(0+384),w
 16784  015B  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 16785  015C  0D89               	rlf	9,f
 16786  015D  3B89               	subwfb	9,f
 16787  015E  0989               	comf	9,f
 16788  015F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 16789  0160  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 16790                           
 16791                           ;interrupts.c: 89: reset_sub_delay = 0;
 16792  0161  0024               	movlb	4	; select bank4
 16793  0162  01D5               	clrf	_reset_sub_delay^(0+512)
 16794  0163  01D6               	clrf	(_reset_sub_delay+1)^(0+512)
 16795                           
 16796                           ;interrupts.c: 90: sub_timer = delay_time;
 16797  0164  0020               	movlb	0	; select bank0
 16798  0165  084C               	movf	_delay_time+3,w	;volatile
 16799  0166  00DD               	movwf	_sub_timer+3	;volatile
 16800  0167  084B               	movf	_delay_time+2,w	;volatile
 16801  0168  00DC               	movwf	_sub_timer+2	;volatile
 16802  0169  084A               	movf	_delay_time+1,w	;volatile
 16803  016A  00DB               	movwf	_sub_timer+1	;volatile
 16804  016B  0849               	movf	_delay_time,w	;volatile
 16805  016C  00DA               	movwf	_sub_timer	;volatile
 16806  016D                     i1l6123:	
 16807                           
 16808                           ;interrupts.c: 91: }
 16809                           ;interrupts.c: 92: }
 16810                           ;interrupts.c: 94: if (timer >= 30) {
 16811  016D  0020               	movlb	0	; select bank0
 16812  016E  1BE5               	btfsc	_timer+3,7	;volatile
 16813  016F  297F               	goto	i1l6127
 16814  0170  0865               	movf	_timer+3,w	;volatile
 16815  0171  1D03               	btfss	3,2
 16816  0172  297D               	goto	i1l6125
 16817  0173  0864               	movf	_timer+2,w	;volatile
 16818  0174  1D03               	btfss	3,2
 16819  0175  297D               	goto	i1l6125
 16820  0176  0863               	movf	_timer+1,w	;volatile
 16821  0177  1D03               	btfss	3,2
 16822  0178  297D               	goto	i1l6125
 16823  0179  301E               	movlw	30
 16824  017A  0262               	subwf	_timer,w	;volatile
 16825  017B  1C03               	btfss	3,0
 16826  017C  297F               	goto	i1l6127
 16827  017D                     i1l6125:	
 16828                           
 16829                           ;interrupts.c: 96: LATBbits.LATB4 = 0;
 16830  017D  0022               	movlb	2	; select bank2
 16831  017E  120D               	bcf	13,4	;volatile
 16832  017F                     i1l6127:	
 16833                           
 16834                           ;interrupts.c: 98: }
 16835                           ;interrupts.c: 99: }
 16836                           ;interrupts.c: 102: if (presetSaveMode == 1) {
 16837  017F  0020               	movlb	0	; select bank0
 16838  0180  0368               	decf	_presetSaveMode,w
 16839  0181  1D03               	btfss	3,2
 16840  0182  29AF               	goto	i1l6139
 16841                           
 16842                           ;interrupts.c: 105: if (double_timer >= 250) {
 16843  0183  0023               	movlb	3	; select bank3
 16844  0184  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 16845  0185  299E               	goto	i1l6135
 16846  0186  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 16847  0187  1D03               	btfss	3,2
 16848  0188  2993               	goto	i1l6131
 16849  0189  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 16850  018A  1D03               	btfss	3,2
 16851  018B  2993               	goto	i1l6131
 16852  018C  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 16853  018D  1D03               	btfss	3,2
 16854  018E  2993               	goto	i1l6131
 16855  018F  30FA               	movlw	250
 16856  0190  0220               	subwf	_double_timer^(0+384),w	;volatile
 16857  0191  1C03               	btfss	3,0
 16858  0192  299E               	goto	i1l6135
 16859  0193                     i1l6131:	
 16860                           
 16861                           ;interrupts.c: 106: LATBbits.LATB0 = 1;
 16862  0193  0022               	movlb	2	; select bank2
 16863  0194  140D               	bsf	13,0	;volatile
 16864                           
 16865                           ;interrupts.c: 107: double_timer = 0;
 16866  0195  3000               	movlw	0
 16867  0196  0023               	movlb	3	; select bank3
 16868  0197  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 16869  0198  3000               	movlw	0
 16870  0199  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 16871  019A  3000               	movlw	0
 16872  019B  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 16873  019C  3000               	movlw	0
 16874  019D  00A0               	movwf	_double_timer^(0+384)	;volatile
 16875  019E                     i1l6135:	
 16876                           
 16877                           ;interrupts.c: 109: }
 16878                           ;interrupts.c: 110: if (double_timer >= 30) {
 16879  019E  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 16880  019F  29AF               	goto	i1l6139
 16881  01A0  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 16882  01A1  1D03               	btfss	3,2
 16883  01A2  29AD               	goto	i1l6137
 16884  01A3  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 16885  01A4  1D03               	btfss	3,2
 16886  01A5  29AD               	goto	i1l6137
 16887  01A6  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 16888  01A7  1D03               	btfss	3,2
 16889  01A8  29AD               	goto	i1l6137
 16890  01A9  301E               	movlw	30
 16891  01AA  0220               	subwf	_double_timer^(0+384),w	;volatile
 16892  01AB  1C03               	btfss	3,0
 16893  01AC  29AF               	goto	i1l6139
 16894  01AD                     i1l6137:	
 16895                           
 16896                           ;interrupts.c: 112: LATBbits.LATB0 = 0;
 16897  01AD  0022               	movlb	2	; select bank2
 16898  01AE  100D               	bcf	13,0	;volatile
 16899  01AF                     i1l6139:	
 16900                           
 16901                           ;interrupts.c: 113: }
 16902                           ;interrupts.c: 114: }
 16903                           ;interrupts.c: 116: if (presetSaveMode < 1 && mode2_state == 0) {
 16904  01AF  0020               	movlb	0	; select bank0
 16905  01B0  0868               	movf	_presetSaveMode,w
 16906  01B1  1D03               	btfss	3,2
 16907  01B2  2A0E               	goto	i1l6159
 16908  01B3  0867               	movf	_mode2_state,w
 16909  01B4  1D03               	btfss	3,2
 16910  01B5  2A0E               	goto	i1l6159
 16911                           
 16912                           ;interrupts.c: 117: if (sub_timer >= tmpSubDelay ) {
 16913  01B6  0843               	movf	isr@tmpSubDelay,w
 16914  01B7  00BA               	movwf	??_isr
 16915  01B8  0844               	movf	isr@tmpSubDelay+1,w
 16916  01B9  00BB               	movwf	??_isr+1
 16917  01BA  3000               	movlw	0
 16918  01BB  1BBB               	btfsc	??_isr+1,7
 16919  01BC  30FF               	movlw	255
 16920  01BD  00BC               	movwf	??_isr+2
 16921  01BE  00BD               	movwf	??_isr+3
 16922  01BF  085D               	movf	_sub_timer+3,w	;volatile
 16923  01C0  3A80               	xorlw	128
 16924  01C1  00BE               	movwf	??_isr+4
 16925  01C2  083D               	movf	??_isr+3,w
 16926  01C3  3A80               	xorlw	128
 16927  01C4  023E               	subwf	??_isr+4,w
 16928  01C5  1D03               	skipz
 16929  01C6  29D1               	goto	u608_23
 16930  01C7  083C               	movf	??_isr+2,w
 16931  01C8  025C               	subwf	_sub_timer+2,w	;volatile
 16932  01C9  1D03               	skipz
 16933  01CA  29D1               	goto	u608_23
 16934  01CB  083B               	movf	??_isr+1,w
 16935  01CC  025B               	subwf	_sub_timer+1,w	;volatile
 16936  01CD  1D03               	skipz
 16937  01CE  29D1               	goto	u608_23
 16938  01CF  083A               	movf	??_isr,w
 16939  01D0  025A               	subwf	_sub_timer,w	;volatile
 16940  01D1                     u608_23:	
 16941  01D1  1C03               	skipc
 16942  01D2  29F0               	goto	i1l6153
 16943                           
 16944                           ;interrupts.c: 118: if (suspend_blink == 0) {
 16945  01D3  0023               	movlb	3	; select bank3
 16946  01D4  0846               	movf	_suspend_blink^(0+384),w	;volatile
 16947  01D5  1D03               	btfss	3,2
 16948  01D6  29E3               	goto	i1l6149
 16949                           
 16950                           ;interrupts.c: 119: set_leds_top(top_push_state, 1);
 16951  01D7  0020               	movlb	0	; select bank0
 16952  01D8  0854               	movf	_top_push_state+1,w
 16953  01D9  00F1               	movwf	i1set_leds_top@x+1
 16954  01DA  0853               	movf	_top_push_state,w
 16955  01DB  00F0               	movwf	i1set_leds_top@x
 16956  01DC  3001               	movlw	1
 16957  01DD  00F2               	movwf	i1set_leds_top@ledState
 16958  01DE  3000               	movlw	0
 16959  01DF  00F3               	movwf	i1set_leds_top@ledState+1
 16960  01E0  3190  2001  3180   	fcall	i1_set_leds_top
 16961  01E3                     i1l6149:	
 16962                           
 16963                           ;interrupts.c: 120: }
 16964                           ;interrupts.c: 121: tmpSubDelay = delay_time;
 16965  01E3  0020               	movlb	0	; select bank0
 16966  01E4  084A               	movf	_delay_time+1,w	;volatile
 16967  01E5  00C4               	movwf	isr@tmpSubDelay+1
 16968  01E6  0849               	movf	_delay_time,w	;volatile
 16969  01E7  00C3               	movwf	isr@tmpSubDelay
 16970                           
 16971                           ;interrupts.c: 122: sub_timer = 0;
 16972  01E8  3000               	movlw	0
 16973  01E9  00DD               	movwf	_sub_timer+3	;volatile
 16974  01EA  3000               	movlw	0
 16975  01EB  00DC               	movwf	_sub_timer+2	;volatile
 16976  01EC  3000               	movlw	0
 16977  01ED  00DB               	movwf	_sub_timer+1	;volatile
 16978  01EE  3000               	movlw	0
 16979  01EF  00DA               	movwf	_sub_timer	;volatile
 16980  01F0                     i1l6153:	
 16981                           
 16982                           ;interrupts.c: 123: }
 16983                           ;interrupts.c: 125: if (sub_timer >= 20) {
 16984  01F0  1BDD               	btfsc	_sub_timer+3,7	;volatile
 16985  01F1  2A0E               	goto	i1l6159
 16986  01F2  085D               	movf	_sub_timer+3,w	;volatile
 16987  01F3  1D03               	btfss	3,2
 16988  01F4  29FF               	goto	i1l6155
 16989  01F5  085C               	movf	_sub_timer+2,w	;volatile
 16990  01F6  1D03               	btfss	3,2
 16991  01F7  29FF               	goto	i1l6155
 16992  01F8  085B               	movf	_sub_timer+1,w	;volatile
 16993  01F9  1D03               	btfss	3,2
 16994  01FA  29FF               	goto	i1l6155
 16995  01FB  3014               	movlw	20
 16996  01FC  025A               	subwf	_sub_timer,w	;volatile
 16997  01FD  1C03               	btfss	3,0
 16998  01FE  2A0E               	goto	i1l6159
 16999  01FF                     i1l6155:	
 17000                           
 17001                           ;interrupts.c: 126: if (suspend_blink == 0) {
 17002  01FF  0023               	movlb	3	; select bank3
 17003  0200  0846               	movf	_suspend_blink^(0+384),w	;volatile
 17004  0201  1D03               	btfss	3,2
 17005  0202  2A0E               	goto	i1l6159
 17006                           
 17007                           ;interrupts.c: 127: set_leds_top(top_push_state, 0);
 17008  0203  0020               	movlb	0	; select bank0
 17009  0204  0854               	movf	_top_push_state+1,w
 17010  0205  00F1               	movwf	i1set_leds_top@x+1
 17011  0206  0853               	movf	_top_push_state,w
 17012  0207  00F0               	movwf	i1set_leds_top@x
 17013  0208  3000               	movlw	0
 17014  0209  00F2               	movwf	i1set_leds_top@ledState
 17015  020A  00F3               	movwf	i1set_leds_top@ledState+1
 17016  020B  3190  2001  3180   	fcall	i1_set_leds_top
 17017  020E                     i1l6159:	
 17018                           
 17019                           ;interrupts.c: 128: }
 17020                           ;interrupts.c: 129: }
 17021                           ;interrupts.c: 130: }
 17022                           ;interrupts.c: 145: if (mod_timer >= mod_delay_time) {
 17023  020E  0023               	movlb	3	; select bank3
 17024  020F  0854               	movf	_mod_delay_time^(0+384),w
 17025  0210  0020               	movlb	0	; select bank0
 17026  0211  00BA               	movwf	??_isr
 17027  0212  0023               	movlb	3	; select bank3
 17028  0213  0855               	movf	(_mod_delay_time+1)^(0+384),w
 17029  0214  0020               	movlb	0	; select bank0
 17030  0215  00BB               	movwf	??_isr+1
 17031  0216  3000               	movlw	0
 17032  0217  1BBB               	btfsc	??_isr+1,7
 17033  0218  30FF               	movlw	255
 17034  0219  00BC               	movwf	??_isr+2
 17035  021A  00BD               	movwf	??_isr+3
 17036  021B  0023               	movlb	3	; select bank3
 17037  021C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 17038  021D  3A80               	xorlw	128
 17039  021E  0020               	movlb	0	; select bank0
 17040  021F  00BE               	movwf	??_isr+4
 17041  0220  083D               	movf	??_isr+3,w
 17042  0221  3A80               	xorlw	128
 17043  0222  023E               	subwf	??_isr+4,w
 17044  0223  0023               	movlb	3	; select bank3
 17045  0224  1D03               	skipz
 17046  0225  2A36               	goto	u612_23
 17047  0226  0020               	movlb	0	; select bank0
 17048  0227  083C               	movf	??_isr+2,w
 17049  0228  0023               	movlb	3	; select bank3
 17050  0229  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 17051  022A  1D03               	skipz
 17052  022B  2A36               	goto	u612_23
 17053  022C  0020               	movlb	0	; select bank0
 17054  022D  083B               	movf	??_isr+1,w
 17055  022E  0023               	movlb	3	; select bank3
 17056  022F  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 17057  0230  1D03               	skipz
 17058  0231  2A36               	goto	u612_23
 17059  0232  0020               	movlb	0	; select bank0
 17060  0233  083A               	movf	??_isr,w
 17061  0234  0023               	movlb	3	; select bank3
 17062  0235  0224               	subwf	_mod_timer^(0+384),w	;volatile
 17063  0236                     u612_23:	
 17064  0236  1C03               	skipc
 17065  0237  2AE5               	goto	i1l6193
 17066                           
 17067                           ;interrupts.c: 146: mod_timer = 0;
 17068  0238  3000               	movlw	0
 17069  0239  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 17070  023A  3000               	movlw	0
 17071  023B  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 17072  023C  3000               	movlw	0
 17073  023D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 17074  023E  3000               	movlw	0
 17075  023F  00A4               	movwf	_mod_timer^(0+384)	;volatile
 17076                           
 17077                           ;interrupts.c: 149: if (mod_counter >= 60) {
 17078  0240  0839               	movf	(_mod_counter+1)^(0+384),w
 17079  0241  3A80               	xorlw	128
 17080  0242  0020               	movlb	0	; select bank0
 17081  0243  00BA               	movwf	??_isr
 17082  0244  3080               	movlw	128
 17083  0245  023A               	subwf	??_isr,w
 17084  0246  1D03               	skipz
 17085  0247  2A4B               	goto	u613_25
 17086  0248  303C               	movlw	60
 17087  0249  0023               	movlb	3	; select bank3
 17088  024A  0238               	subwf	_mod_counter^(0+384),w
 17089  024B                     u613_25:	
 17090  024B  1C03               	skipc
 17091  024C  2A50               	goto	i1l6165
 17092                           
 17093                           ;interrupts.c: 150: mod_counter = 0;
 17094  024D  0023               	movlb	3	; select bank3
 17095  024E  01B8               	clrf	_mod_counter^(0+384)
 17096  024F  01B9               	clrf	(_mod_counter+1)^(0+384)
 17097  0250                     i1l6165:	
 17098                           
 17099                           ;interrupts.c: 151: }
 17100                           ;interrupts.c: 152: PORTCbits.RC4 = 0;
 17101  0250  0020               	movlb	0	; select bank0
 17102  0251  120E               	bcf	14,4	;volatile
 17103                           
 17104                           ;interrupts.c: 153: switch (bottom_push_state) {
 17105  0252  2A8C               	goto	i1l6185
 17106  0253                     i1l6167:	
 17107                           ;interrupts.c: 154: case 1:
 17108                           
 17109                           
 17110                           ;interrupts.c: 155: mod_value = (int)modSin[mod_counter];
 17111  0253  0023               	movlb	3	; select bank3
 17112  0254  0838               	movf	_mod_counter^(0+384),w
 17113  0255  3EA0               	addlw	(low (_modSin| (0+768)))& (0+255)
 17114  0256  0086               	movwf	6
 17115  0257  3003               	movlw	3	; select bank7/8
 17116  0258  2A81               	goto	L21
 17117  0259                     i1l6169:	
 17118                           ;interrupts.c: 157: case 2:
 17119                           
 17120                           ;interrupts.c: 156: break;
 17121                           
 17122                           
 17123                           ;interrupts.c: 158: mod_value = (int)modTri[mod_counter];
 17124  0259  0023               	movlb	3	; select bank3
 17125  025A  0838               	movf	_mod_counter^(0+384),w
 17126  025B  3E20               	addlw	(low (_modTri| (0+1024)))& (0+255)
 17127  025C  2A7F               	goto	L22
 17128  025D                     i1l6171:	
 17129                           ;interrupts.c: 160: case 3:
 17130                           
 17131                           ;interrupts.c: 159: break;
 17132                           
 17133                           
 17134                           ;interrupts.c: 161: if (mod_counter < 31) {
 17135  025D  0023               	movlb	3	; select bank3
 17136  025E  0839               	movf	(_mod_counter+1)^(0+384),w
 17137  025F  3A80               	xorlw	128
 17138  0260  0020               	movlb	0	; select bank0
 17139  0261  00BA               	movwf	??_isr
 17140  0262  3080               	movlw	128
 17141  0263  023A               	subwf	??_isr,w
 17142  0264  1D03               	skipz
 17143  0265  2A69               	goto	u614_25
 17144  0266  301F               	movlw	31
 17145  0267  0023               	movlb	3	; select bank3
 17146  0268  0238               	subwf	_mod_counter^(0+384),w
 17147  0269                     u614_25:	
 17148  0269  1803               	skipnc
 17149  026A  2A70               	goto	i1l6175
 17150                           
 17151                           ;interrupts.c: 162: mod_value = 100;
 17152  026B  3064               	movlw	100
 17153  026C  0023               	movlb	3	; select bank3
 17154  026D  00BA               	movwf	_mod_value^(0+384)
 17155  026E  3000               	movlw	0
 17156  026F  2A74               	goto	L20
 17157  0270                     i1l6175:	
 17158                           ;interrupts.c: 163: } else {
 17159                           
 17160                           
 17161                           ;interrupts.c: 164: mod_value = -100;
 17162  0270  309C               	movlw	156
 17163  0271  0023               	movlb	3	; select bank3
 17164  0272  00BA               	movwf	_mod_value^(0+384)
 17165  0273  30FF               	movlw	255
 17166  0274                     L20:	
 17167  0274  00BB               	movwf	(_mod_value^(0+384)+1)
 17168                           
 17169                           ;interrupts.c: 165: }
 17170                           ;interrupts.c: 166: break;
 17171  0275  2AA3               	goto	i1l6187
 17172  0276                     i1l6177:	
 17173                           ;interrupts.c: 167: case 4:
 17174                           
 17175                           
 17176                           ;interrupts.c: 168: mod_value = (int) modSaw[mod_counter];
 17177  0276  0023               	movlb	3	; select bank3
 17178  0277  0838               	movf	_mod_counter^(0+384),w
 17179  0278  3E20               	addlw	(low (_modSaw| (0+1280)))& (0+255)
 17180  0279  0086               	movwf	6
 17181  027A  3005               	movlw	5	; select bank10/11
 17182  027B  2A81               	goto	L21
 17183  027C                     i1l6179:	
 17184                           ;interrupts.c: 170: case 5:
 17185                           
 17186                           ;interrupts.c: 169: break;
 17187                           
 17188                           
 17189                           ;interrupts.c: 171: mod_value = (int)modRevSaw[mod_counter];
 17190  027C  0023               	movlb	3	; select bank3
 17191  027D  0838               	movf	_mod_counter^(0+384),w
 17192  027E  3EA0               	addlw	(low (_modRevSaw| (0+1024)))& (0+255)
 17193  027F                     L22:	
 17194  027F  0086               	movwf	6
 17195  0280  3004               	movlw	4	; select bank9/10
 17196  0281                     L21:	
 17197  0281  0087               	movwf	7
 17198  0282  0801               	movf	1,w
 17199  0283  00BA               	movwf	_mod_value^(0+384)
 17200  0284  01BB               	clrf	(_mod_value+1)^(0+384)
 17201  0285  1BBA               	btfsc	_mod_value^(0+384),7
 17202  0286  03BB               	decf	(_mod_value+1)^(0+384),f
 17203                           
 17204                           ;interrupts.c: 172: break;
 17205  0287  2AA3               	goto	i1l6187
 17206  0288                     i1l6181:	
 17207                           ;interrupts.c: 173: default:
 17208                           
 17209                           
 17210                           ;interrupts.c: 174: mod_value = 0;
 17211  0288  0023               	movlb	3	; select bank3
 17212  0289  01BA               	clrf	_mod_value^(0+384)
 17213  028A  01BB               	clrf	(_mod_value+1)^(0+384)
 17214                           
 17215                           ;interrupts.c: 176: }
 17216                           
 17217                           ;interrupts.c: 175: break;
 17218  028B  2AA3               	goto	i1l6187
 17219  028C                     i1l6185:	
 17220                           
 17221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17222                           ; Switch size 1, requested type "space"
 17223                           ; Number of cases is 1, Range of values is 0 to 0
 17224                           ; switch strategies available:
 17225                           ; Name         Instructions Cycles
 17226                           ; simple_byte            4     3 (average)
 17227                           ; direct_byte            8     6 (fixed)
 17228                           ; jumptable            260     6 (fixed)
 17229                           ;	Chosen strategy is simple_byte
 17230  028C  0020               	movlb	0	; select bank0
 17231  028D  084E               	movf	_bottom_push_state+1,w
 17232  028E  3A00               	xorlw	0	; case 0
 17233  028F  1903               	skipnz
 17234  0290  2A92               	goto	i1l8691
 17235  0291  2A88               	goto	i1l6181
 17236  0292                     i1l8691:	
 17237                           
 17238                           ; Switch size 1, requested type "space"
 17239                           ; Number of cases is 5, Range of values is 1 to 5
 17240                           ; switch strategies available:
 17241                           ; Name         Instructions Cycles
 17242                           ; simple_byte           16     9 (average)
 17243                           ; direct_byte           19     9 (fixed)
 17244                           ; jumptable            263     9 (fixed)
 17245                           ;	Chosen strategy is simple_byte
 17246  0292  084D               	movf	_bottom_push_state,w
 17247  0293  3A01               	xorlw	1	; case 1
 17248  0294  1903               	skipnz
 17249  0295  2A53               	goto	i1l6167
 17250  0296  3A03               	xorlw	3	; case 2
 17251  0297  1903               	skipnz
 17252  0298  2A59               	goto	i1l6169
 17253  0299  3A01               	xorlw	1	; case 3
 17254  029A  1903               	skipnz
 17255  029B  2A5D               	goto	i1l6171
 17256  029C  3A07               	xorlw	7	; case 4
 17257  029D  1903               	skipnz
 17258  029E  2A76               	goto	i1l6177
 17259  029F  3A01               	xorlw	1	; case 5
 17260  02A0  1903               	skipnz
 17261  02A1  2A7C               	goto	i1l6179
 17262  02A2  2A88               	goto	i1l6181
 17263  02A3                     i1l6187:	
 17264                           
 17265                           ;interrupts.c: 179: mod_value = modulation(mod_value, adjusted_pot_value);
 17266  02A3  0023               	movlb	3	; select bank3
 17267  02A4  083A               	movf	_mod_value^(0+384),w
 17268  02A5  0020               	movlb	0	; select bank0
 17269  02A6  00AE               	movwf	modulation@x
 17270  02A7  0023               	movlb	3	; select bank3
 17271  02A8  083B               	movf	(_mod_value+1)^(0+384),w
 17272  02A9  0020               	movlb	0	; select bank0
 17273  02AA  00AF               	movwf	modulation@x+1
 17274  02AB  0D89               	rlf	9,f
 17275  02AC  3B89               	subwfb	9,f
 17276  02AD  0989               	comf	9,f
 17277  02AE  00B0               	movwf	modulation@x+2
 17278  02AF  00B1               	movwf	modulation@x+3
 17279  02B0  0024               	movlb	4	; select bank4
 17280  02B1  0847               	movf	_adjusted_pot_value^(0+512),w
 17281  02B2  0020               	movlb	0	; select bank0
 17282  02B3  00B2               	movwf	modulation@y
 17283  02B4  0024               	movlb	4	; select bank4
 17284  02B5  0848               	movf	(_adjusted_pot_value+1)^(0+512),w
 17285  02B6  0020               	movlb	0	; select bank0
 17286  02B7  00B3               	movwf	modulation@y+1
 17287  02B8  0D89               	rlf	9,f
 17288  02B9  3B89               	subwfb	9,f
 17289  02BA  0989               	comf	9,f
 17290  02BB  00B4               	movwf	modulation@y+2
 17291  02BC  00B5               	movwf	modulation@y+3
 17292  02BD  319A  22A6  3180   	fcall	_modulation
 17293  02C0  0020               	movlb	0	; select bank0
 17294  02C1  082F               	movf	?_modulation+1,w
 17295  02C2  0023               	movlb	3	; select bank3
 17296  02C3  00BB               	movwf	(_mod_value+1)^(0+384)
 17297  02C4  0020               	movlb	0	; select bank0
 17298  02C5  082E               	movf	?_modulation,w
 17299  02C6  0023               	movlb	3	; select bank3
 17300  02C7  00BA               	movwf	_mod_value^(0+384)
 17301                           
 17302                           ;interrupts.c: 180: CCPR9 = mod_value / 2;
 17303  02C8  3002               	movlw	2
 17304  02C9  00F0               	movwf	___awdiv@divisor
 17305  02CA  3000               	movlw	0
 17306  02CB  00F1               	movwf	___awdiv@divisor+1
 17307  02CC  083B               	movf	(_mod_value+1)^(0+384),w
 17308  02CD  00F3               	movwf	___awdiv@dividend+1
 17309  02CE  083A               	movf	_mod_value^(0+384),w
 17310  02CF  00F2               	movwf	___awdiv@dividend
 17311  02D0  319C  24EB  3180   	fcall	___awdiv
 17312  02D3  0871               	movf	?___awdiv+1,w
 17313  02D4  002C               	movlb	12	; select bank12
 17314  02D5  009B               	movwf	27	;volatile
 17315  02D6  0870               	movf	?___awdiv,w
 17316  02D7  009A               	movwf	26	;volatile
 17317                           
 17318                           ;interrupts.c: 181: mod_timer = 0;
 17319  02D8  3000               	movlw	0
 17320  02D9  0023               	movlb	3	; select bank3
 17321  02DA  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 17322  02DB  3000               	movlw	0
 17323  02DC  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 17324  02DD  3000               	movlw	0
 17325  02DE  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 17326  02DF  3000               	movlw	0
 17327  02E0  00A4               	movwf	_mod_timer^(0+384)	;volatile
 17328                           
 17329                           ;interrupts.c: 182: mod_counter++;
 17330  02E1  3001               	movlw	1
 17331  02E2  07B8               	addwf	_mod_counter^(0+384),f
 17332  02E3  3000               	movlw	0
 17333  02E4  3DB9               	addwfc	(_mod_counter+1)^(0+384),f
 17334  02E5                     i1l6193:	
 17335                           
 17336                           ;interrupts.c: 184: }
 17337                           ;interrupts.c: 188: if (preset_programmning_on == 1) {
 17338  02E5  0345               	decf	_preset_programmning_on^(0+384),w
 17339  02E6  1D03               	btfss	3,2
 17340  02E7  2B13               	goto	i1l6205
 17341                           
 17342                           ;interrupts.c: 189: preset_blink++;
 17343  02E8  3001               	movlw	1
 17344  02E9  0020               	movlb	0	; select bank0
 17345  02EA  00BA               	movwf	??_isr
 17346  02EB  083A               	movf	??_isr,w
 17347  02EC  0023               	movlb	3	; select bank3
 17348  02ED  07C4               	addwf	_preset_blink^(0+384),f
 17349                           
 17350                           ;interrupts.c: 191: if (preset_blink >= blink_delay) {
 17351  02EE  084B               	movf	(_blink_delay+1)^(0+384),w
 17352  02EF  3A80               	xorlw	128
 17353  02F0  3C80               	sublw	128
 17354  02F1  1D03               	skipz
 17355  02F2  2AF5               	goto	u616_25
 17356  02F3  084A               	movf	_blink_delay^(0+384),w
 17357  02F4  0244               	subwf	_preset_blink^(0+384),w
 17358  02F5                     u616_25:	
 17359  02F5  1C03               	skipc
 17360  02F6  2B18               	goto	i1l6209
 17361                           
 17362                           ;interrupts.c: 192: LATBbits.LATB1 = 1;
 17363  02F7  0022               	movlb	2	; select bank2
 17364  02F8  148D               	bsf	13,1	;volatile
 17365                           
 17366                           ;interrupts.c: 193: if (preset_blink > blink_delay*2) {
 17367  02F9  0023               	movlb	3	; select bank3
 17368  02FA  084B               	movf	(_blink_delay+1)^(0+384),w
 17369  02FB  0020               	movlb	0	; select bank0
 17370  02FC  00BB               	movwf	??_isr+1
 17371  02FD  0023               	movlb	3	; select bank3
 17372  02FE  084A               	movf	_blink_delay^(0+384),w
 17373  02FF  0020               	movlb	0	; select bank0
 17374  0300  00BA               	movwf	??_isr
 17375  0301  35BA               	lslf	??_isr,f
 17376  0302  0DBB               	rlf	??_isr+1,f
 17377  0303  083B               	movf	??_isr+1,w
 17378  0304  3A80               	xorlw	128
 17379  0305  00BC               	movwf	??_isr+2
 17380  0306  3080               	movlw	128
 17381  0307  023C               	subwf	??_isr+2,w
 17382  0308  1D03               	skipz
 17383  0309  2B0E               	goto	u617_25
 17384  030A  0023               	movlb	3	; select bank3
 17385  030B  0844               	movf	_preset_blink^(0+384),w
 17386  030C  0020               	movlb	0	; select bank0
 17387  030D  023A               	subwf	??_isr,w
 17388  030E                     u617_25:	
 17389  030E  1803               	skipnc
 17390  030F  2B1A               	goto	i1l176
 17391                           
 17392                           ;interrupts.c: 194: preset_blink = 0;
 17393  0310  0023               	movlb	3	; select bank3
 17394  0311  01C4               	clrf	_preset_blink^(0+384)
 17395                           
 17396                           ;interrupts.c: 195: }
 17397                           ;interrupts.c: 197: } else {
 17398  0312  2B1A               	goto	i1l176
 17399  0313                     i1l6205:	
 17400                           ;interrupts.c: 199: }
 17401                           ;interrupts.c: 201: } else {
 17402                           
 17403                           ;interrupts.c: 198: LATBbits.LATB1 = 0;
 17404                           
 17405                           
 17406                           ;interrupts.c: 202: if (preset_blink > 0) {
 17407  0313  0023               	movlb	3	; select bank3
 17408  0314  0844               	movf	_preset_blink^(0+384),w
 17409  0315  1903               	btfsc	3,2
 17410  0316  2B1A               	goto	i1l176
 17411                           
 17412                           ;interrupts.c: 203: preset_blink = 0;
 17413  0317  01C4               	clrf	_preset_blink^(0+384)
 17414  0318                     i1l6209:	
 17415                           
 17416                           ;interrupts.c: 204: LATBbits.LATB1 = 0;
 17417  0318  0022               	movlb	2	; select bank2
 17418  0319  108D               	bcf	13,1	;volatile
 17419  031A                     i1l176:	
 17420  031A  0020               	movlb	0	; select bank0
 17421  031B  0842               	movf	??_isr+8,w
 17422  031C  00FF               	movwf	127
 17423  031D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17424  031E  0009               	retfie
 17425  031F                     __end_of_isr:	
 17426                           
 17427                           	psect	text64
 17428  1001                     __ptext64:	
 17429 ;; *************** function i1_set_leds_top *****************
 17430 ;; Defined at:
 17431 ;;		line 16 in file "LEDs.c"
 17432 ;; Parameters:    Size  Location     Type
 17433 ;;  x               2    0[COMMON] int 
 17434 ;;  ledState        2    2[COMMON] int 
 17435 ;; Auto vars:     Size  Location     Type
 17436 ;;		None
 17437 ;; Return value:  Size  Location     Type
 17438 ;;                  1    wreg      void 
 17439 ;; Registers used:
 17440 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17441 ;; Tracked objects:
 17442 ;;		On entry : 0/0
 17443 ;;		On exit  : 0/0
 17444 ;;		Unchanged: 0/0
 17445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17449 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17450 ;;Total ram usage:        4 bytes
 17451 ;; Hardware stack levels used:    1
 17452 ;; This function calls:
 17453 ;;		Nothing
 17454 ;; This function is called by:
 17455 ;;		_isr
 17456 ;; This function uses a non-reentrant model
 17457 ;;
 17458                           
 17459                           
 17460                           ;psect for function i1_set_leds_top
 17461  1001                     i1_set_leds_top:	
 17462                           
 17463                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 17464                           
 17465                           ;incstack = 0
 17466                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 17467  1001  0027               	movlb	7	; select bank7
 17468  1002  100C               	bcf	12,0	;volatile
 17469                           
 17470                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 17471  1003  108C               	bcf	12,1	;volatile
 17472                           
 17473                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 17474  1004  110C               	bcf	12,2	;volatile
 17475                           
 17476                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 17477  1005  118C               	bcf	12,3	;volatile
 17478                           
 17479                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 17480  1006  120C               	bcf	12,4	;volatile
 17481                           
 17482                           ;LEDs.c: 22: switch (x) {
 17483  1007  282C               	goto	i1l6071
 17484  1008                     i1l6059:	
 17485                           ;LEDs.c: 23: case 1:
 17486                           
 17487                           
 17488                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 17489  1008  0C72               	rrf	i1set_leds_top@ledState,w
 17490  1009  1C03               	skipc
 17491  100A  100C               	bcf	12,0	;volatile
 17492  100B  1803               	skipnc
 17493  100C  140C               	bsf	12,0	;volatile
 17494                           
 17495                           ;LEDs.c: 25: break;
 17496  100D  0008               	return
 17497  100E                     i1l6061:	
 17498                           ;LEDs.c: 26: case 2:
 17499                           
 17500                           
 17501                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17502  100E  0C72               	rrf	i1set_leds_top@ledState,w
 17503  100F  1C03               	skipc
 17504  1010  108C               	bcf	12,1	;volatile
 17505  1011  1803               	skipnc
 17506  1012  148C               	bsf	12,1	;volatile
 17507                           
 17508                           ;LEDs.c: 28: break;
 17509  1013  0008               	return
 17510  1014                     i1l6063:	
 17511                           ;LEDs.c: 29: case 3:
 17512                           
 17513                           
 17514                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17515  1014  0C72               	rrf	i1set_leds_top@ledState,w
 17516  1015  1C03               	skipc
 17517  1016  110C               	bcf	12,2	;volatile
 17518  1017  1803               	skipnc
 17519  1018  150C               	bsf	12,2	;volatile
 17520                           
 17521                           ;LEDs.c: 31: break;
 17522  1019  0008               	return
 17523  101A                     i1l6065:	
 17524                           ;LEDs.c: 32: case 4:
 17525                           
 17526                           
 17527                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17528  101A  0C72               	rrf	i1set_leds_top@ledState,w
 17529  101B  1C03               	skipc
 17530  101C  118C               	bcf	12,3	;volatile
 17531  101D  1803               	skipnc
 17532  101E  158C               	bsf	12,3	;volatile
 17533                           
 17534                           ;LEDs.c: 34: break;
 17535  101F  0008               	return
 17536  1020                     i1l6067:	
 17537                           ;LEDs.c: 35: case 5:
 17538                           
 17539                           
 17540                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17541  1020  0C72               	rrf	i1set_leds_top@ledState,w
 17542  1021  1C03               	skipc
 17543  1022  120C               	bcf	12,4	;volatile
 17544  1023  1803               	skipnc
 17545  1024  160C               	bsf	12,4	;volatile
 17546                           
 17547                           ;LEDs.c: 39: break;
 17548                           
 17549                           ;LEDs.c: 38: case 6:
 17550                           
 17551                           ;LEDs.c: 37: break;
 17552  1025  0008               	return
 17553  1026                     i1l785:	
 17554                           ;LEDs.c: 40: case 100:
 17555                           
 17556                           
 17557                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17558  1026  140C               	bsf	12,0	;volatile
 17559                           
 17560                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17561  1027  148C               	bsf	12,1	;volatile
 17562                           
 17563                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17564  1028  150C               	bsf	12,2	;volatile
 17565                           
 17566                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17567  1029  158C               	bsf	12,3	;volatile
 17568                           
 17569                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17570  102A  160C               	bsf	12,4	;volatile
 17571                           
 17572                           ;LEDs.c: 47: }
 17573                           
 17574                           ;LEDs.c: 46: break;
 17575  102B  0008               	return
 17576  102C                     i1l6071:	
 17577                           
 17578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17579                           ; Switch size 1, requested type "space"
 17580                           ; Number of cases is 1, Range of values is 0 to 0
 17581                           ; switch strategies available:
 17582                           ; Name         Instructions Cycles
 17583                           ; simple_byte            4     3 (average)
 17584                           ; direct_byte            8     6 (fixed)
 17585                           ; jumptable            260     6 (fixed)
 17586                           ;	Chosen strategy is simple_byte
 17587  102C  0871               	movf	i1set_leds_top@x+1,w
 17588  102D  3A00               	xorlw	0	; case 0
 17589  102E  1903               	skipnz
 17590  102F  2831               	goto	i1l8693
 17591  1030  2848               	goto	i1l786
 17592  1031                     i1l8693:	
 17593                           
 17594                           ; Switch size 1, requested type "space"
 17595                           ; Number of cases is 7, Range of values is 1 to 100
 17596                           ; switch strategies available:
 17597                           ; Name         Instructions Cycles
 17598                           ; simple_byte           22    12 (average)
 17599                           ; direct_byte          209     9 (fixed)
 17600                           ; jumptable            263     9 (fixed)
 17601                           ;	Chosen strategy is simple_byte
 17602  1031  0870               	movf	i1set_leds_top@x,w
 17603  1032  3A01               	xorlw	1	; case 1
 17604  1033  1903               	skipnz
 17605  1034  2808               	goto	i1l6059
 17606  1035  3A03               	xorlw	3	; case 2
 17607  1036  1903               	skipnz
 17608  1037  280E               	goto	i1l6061
 17609  1038  3A01               	xorlw	1	; case 3
 17610  1039  1903               	skipnz
 17611  103A  2814               	goto	i1l6063
 17612  103B  3A07               	xorlw	7	; case 4
 17613  103C  1903               	skipnz
 17614  103D  281A               	goto	i1l6065
 17615  103E  3A01               	xorlw	1	; case 5
 17616  103F  1903               	skipnz
 17617  1040  2820               	goto	i1l6067
 17618  1041  3A03               	xorlw	3	; case 6
 17619  1042  1903               	skipnz
 17620  1043  2848               	goto	i1l786
 17621  1044  3A62               	xorlw	98	; case 100
 17622  1045  1903               	skipnz
 17623  1046  2826               	goto	i1l785
 17624  1047  2848               	goto	i1l786
 17625  1048                     i1l786:	
 17626  1048  0008               	return
 17627  1049                     __end_ofi1_set_leds_top:	
 17628                           
 17629                           	psect	text65
 17630  1AA6                     __ptext65:	
 17631 ;; *************** function _modulation *****************
 17632 ;; Defined at:
 17633 ;;		line 213 in file "user.c"
 17634 ;; Parameters:    Size  Location     Type
 17635 ;;  x               4   14[BANK0 ] long 
 17636 ;;  y               4   18[BANK0 ] long 
 17637 ;; Auto vars:     Size  Location     Type
 17638 ;;		None
 17639 ;; Return value:  Size  Location     Type
 17640 ;;                  4   14[BANK0 ] long 
 17641 ;; Registers used:
 17642 ;;		wreg, status,2, status,0, pclath, cstack
 17643 ;; Tracked objects:
 17644 ;;		On entry : 0/0
 17645 ;;		On exit  : 0/0
 17646 ;;		Unchanged: 0/0
 17647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17648 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17650 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17651 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17652 ;;Total ram usage:       12 bytes
 17653 ;; Hardware stack levels used:    1
 17654 ;; Hardware stack levels required when called:    1
 17655 ;; This function calls:
 17656 ;;		i1___aldiv
 17657 ;;		i1___lmul
 17658 ;; This function is called by:
 17659 ;;		_isr
 17660 ;; This function uses a non-reentrant model
 17661 ;;
 17662                           
 17663                           
 17664                           ;psect for function _modulation
 17665  1AA6                     _modulation:	
 17666                           
 17667                           ;user.c: 216: return (127500 + (y * x)) / 1000;
 17668                           
 17669                           ;incstack = 0
 17670                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 17671  1AA6  3000               	movlw	0
 17672  1AA7  0020               	movlb	0	; select bank0
 17673  1AA8  00A3               	movwf	i1___aldiv@divisor+3
 17674  1AA9  3000               	movlw	0
 17675  1AAA  00A2               	movwf	i1___aldiv@divisor+2
 17676  1AAB  3003               	movlw	3
 17677  1AAC  00A1               	movwf	i1___aldiv@divisor+1
 17678  1AAD  30E8               	movlw	232
 17679  1AAE  00A0               	movwf	i1___aldiv@divisor
 17680  1AAF  300C               	movlw	12
 17681  1AB0  00B6               	movwf	??_modulation
 17682  1AB1  30F2               	movlw	242
 17683  1AB2  00B7               	movwf	??_modulation+1
 17684  1AB3  3001               	movlw	1
 17685  1AB4  00B8               	movwf	??_modulation+2
 17686  1AB5  3000               	movlw	0
 17687  1AB6  00B9               	movwf	??_modulation+3
 17688  1AB7  0835               	movf	modulation@y+3,w
 17689  1AB8  00F3               	movwf	i1___lmul@multiplier+3
 17690  1AB9  0834               	movf	modulation@y+2,w
 17691  1ABA  00F2               	movwf	i1___lmul@multiplier+2
 17692  1ABB  0833               	movf	modulation@y+1,w
 17693  1ABC  00F1               	movwf	i1___lmul@multiplier+1
 17694  1ABD  0832               	movf	modulation@y,w
 17695  1ABE  00F0               	movwf	i1___lmul@multiplier
 17696  1ABF  0831               	movf	modulation@x+3,w
 17697  1AC0  00F7               	movwf	i1___lmul@multiplicand+3
 17698  1AC1  0830               	movf	modulation@x+2,w
 17699  1AC2  00F6               	movwf	i1___lmul@multiplicand+2
 17700  1AC3  082F               	movf	modulation@x+1,w
 17701  1AC4  00F5               	movwf	i1___lmul@multiplicand+1
 17702  1AC5  082E               	movf	modulation@x,w
 17703  1AC6  00F4               	movwf	i1___lmul@multiplicand
 17704  1AC7  31A7  273F  319A   	fcall	i1___lmul
 17705  1ACA  0870               	movf	?i1___lmul,w
 17706  1ACB  0020               	movlb	0	; select bank0
 17707  1ACC  07B6               	addwf	??_modulation,f
 17708  1ACD  0871               	movf	?i1___lmul+1,w
 17709  1ACE  3DB7               	addwfc	??_modulation+1,f
 17710  1ACF  0872               	movf	?i1___lmul+2,w
 17711  1AD0  3DB8               	addwfc	??_modulation+2,f
 17712  1AD1  0873               	movf	?i1___lmul+3,w
 17713  1AD2  3DB9               	addwfc	??_modulation+3,f
 17714  1AD3  0839               	movf	??_modulation+3,w
 17715  1AD4  00A7               	movwf	i1___aldiv@dividend+3
 17716  1AD5  0838               	movf	??_modulation+2,w
 17717  1AD6  00A6               	movwf	i1___aldiv@dividend+2
 17718  1AD7  0837               	movf	??_modulation+1,w
 17719  1AD8  00A5               	movwf	i1___aldiv@dividend+1
 17720  1AD9  0836               	movf	??_modulation,w
 17721  1ADA  00A4               	movwf	i1___aldiv@dividend
 17722  1ADB  3190  20C9         	fcall	i1___aldiv
 17723  1ADD  0020               	movlb	0	; select bank0
 17724  1ADE  0823               	movf	?i1___aldiv+3,w
 17725  1ADF  00B1               	movwf	?_modulation+3
 17726  1AE0  0822               	movf	?i1___aldiv+2,w
 17727  1AE1  00B0               	movwf	?_modulation+2
 17728  1AE2  0821               	movf	?i1___aldiv+1,w
 17729  1AE3  00AF               	movwf	?_modulation+1
 17730  1AE4  0820               	movf	?i1___aldiv,w
 17731  1AE5  00AE               	movwf	?_modulation
 17732  1AE6  0008               	return
 17733  1AE7                     __end_of_modulation:	
 17734                           
 17735                           	psect	text66
 17736  273F                     __ptext66:	
 17737 ;; *************** function i1___lmul *****************
 17738 ;; Defined at:
 17739 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;  multiplier      4    0[COMMON] unsigned long 
 17742 ;;  multiplicand    4    4[COMMON] unsigned long 
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;  __lmul          4    8[COMMON] unsigned long 
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  4    0[COMMON] unsigned long 
 17747 ;; Registers used:
 17748 ;;		wreg, status,2, status,0
 17749 ;; Tracked objects:
 17750 ;;		On entry : 0/0
 17751 ;;		On exit  : 0/0
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17754 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17755 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17757 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17758 ;;Total ram usage:       12 bytes
 17759 ;; Hardware stack levels used:    1
 17760 ;; This function calls:
 17761 ;;		Nothing
 17762 ;; This function is called by:
 17763 ;;		_modulation
 17764 ;; This function uses a non-reentrant model
 17765 ;;
 17766                           
 17767                           
 17768                           ;psect for function i1___lmul
 17769  273F                     i1___lmul:	
 17770                           
 17771                           ;incstack = 0
 17772                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 17773  273F  3000               	movlw	0
 17774  2740  00FB               	movwf	i1___lmul@product+3
 17775  2741  3000               	movlw	0
 17776  2742  00FA               	movwf	i1___lmul@product+2
 17777  2743  3000               	movlw	0
 17778  2744  00F9               	movwf	i1___lmul@product+1
 17779  2745  3000               	movlw	0
 17780  2746  00F8               	movwf	i1___lmul@product
 17781  2747                     i1l5435:	
 17782  2747  1C70               	btfss	i1___lmul@multiplier,0
 17783  2748  2F51               	goto	i1l5439
 17784  2749  0874               	movf	i1___lmul@multiplicand,w
 17785  274A  07F8               	addwf	i1___lmul@product,f
 17786  274B  0875               	movf	i1___lmul@multiplicand+1,w
 17787  274C  3DF9               	addwfc	i1___lmul@product+1,f
 17788  274D  0876               	movf	i1___lmul@multiplicand+2,w
 17789  274E  3DFA               	addwfc	i1___lmul@product+2,f
 17790  274F  0877               	movf	i1___lmul@multiplicand+3,w
 17791  2750  3DFB               	addwfc	i1___lmul@product+3,f
 17792  2751                     i1l5439:	
 17793  2751  3001               	movlw	1
 17794  2752                     u476_25:	
 17795  2752  35F4               	lslf	i1___lmul@multiplicand,f
 17796  2753  0DF5               	rlf	i1___lmul@multiplicand+1,f
 17797  2754  0DF6               	rlf	i1___lmul@multiplicand+2,f
 17798  2755  0DF7               	rlf	i1___lmul@multiplicand+3,f
 17799  2756  0B89               	decfsz	9,f
 17800  2757  2F52               	goto	u476_25
 17801  2758  3001               	movlw	1
 17802  2759                     u477_25:	
 17803  2759  36F3               	lsrf	i1___lmul@multiplier+3,f
 17804  275A  0CF2               	rrf	i1___lmul@multiplier+2,f
 17805  275B  0CF1               	rrf	i1___lmul@multiplier+1,f
 17806  275C  0CF0               	rrf	i1___lmul@multiplier,f
 17807  275D  0B89               	decfsz	9,f
 17808  275E  2F59               	goto	u477_25
 17809  275F  0873               	movf	i1___lmul@multiplier+3,w
 17810  2760  0472               	iorwf	i1___lmul@multiplier+2,w
 17811  2761  0471               	iorwf	i1___lmul@multiplier+1,w
 17812  2762  0470               	iorwf	i1___lmul@multiplier,w
 17813  2763  1D03               	skipz
 17814  2764  2F47               	goto	i1l5435
 17815  2765  087B               	movf	i1___lmul@product+3,w
 17816  2766  00F3               	movwf	?i1___lmul+3
 17817  2767  087A               	movf	i1___lmul@product+2,w
 17818  2768  00F2               	movwf	?i1___lmul+2
 17819  2769  0879               	movf	i1___lmul@product+1,w
 17820  276A  00F1               	movwf	?i1___lmul+1
 17821  276B  0878               	movf	i1___lmul@product,w
 17822  276C  00F0               	movwf	?i1___lmul
 17823  276D  0008               	return
 17824  276E                     __end_ofi1___lmul:	
 17825                           
 17826                           	psect	text67
 17827  10C9                     __ptext67:	
 17828 ;; *************** function i1___aldiv *****************
 17829 ;; Defined at:
 17830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 17831 ;; Parameters:    Size  Location     Type
 17832 ;;  divisor         4    0[BANK0 ] long 
 17833 ;;  dividend        4    4[BANK0 ] long 
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;  __aldiv         4   10[BANK0 ] long 
 17836 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 17837 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 17838 ;; Return value:  Size  Location     Type
 17839 ;;                  4    0[BANK0 ] long 
 17840 ;; Registers used:
 17841 ;;		wreg, status,2, status,0
 17842 ;; Tracked objects:
 17843 ;;		On entry : 0/0
 17844 ;;		On exit  : 0/0
 17845 ;;		Unchanged: 0/0
 17846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17847 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17848 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17850 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17851 ;;Total ram usage:       15 bytes
 17852 ;; Hardware stack levels used:    1
 17853 ;; This function calls:
 17854 ;;		Nothing
 17855 ;; This function is called by:
 17856 ;;		_modulation
 17857 ;; This function uses a non-reentrant model
 17858 ;;
 17859                           
 17860                           
 17861                           ;psect for function i1___aldiv
 17862  10C9                     i1___aldiv:	
 17863                           
 17864                           ;incstack = 0
 17865                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 17866  10C9  0020               	movlb	0	; select bank0
 17867  10CA  01A9               	clrf	i1___aldiv@sign
 17868  10CB  1FA3               	btfss	i1___aldiv@divisor+3,7
 17869  10CC  28DA               	goto	i1l1804
 17870  10CD  09A0               	comf	i1___aldiv@divisor,f
 17871  10CE  09A1               	comf	i1___aldiv@divisor+1,f
 17872  10CF  09A2               	comf	i1___aldiv@divisor+2,f
 17873  10D0  09A3               	comf	i1___aldiv@divisor+3,f
 17874  10D1  0AA0               	incf	i1___aldiv@divisor,f
 17875  10D2  1903               	skipnz
 17876  10D3  0AA1               	incf	i1___aldiv@divisor+1,f
 17877  10D4  1903               	skipnz
 17878  10D5  0AA2               	incf	i1___aldiv@divisor+2,f
 17879  10D6  1903               	skipnz
 17880  10D7  0AA3               	incf	i1___aldiv@divisor+3,f
 17881  10D8  01A9               	clrf	i1___aldiv@sign
 17882  10D9  0AA9               	incf	i1___aldiv@sign,f
 17883  10DA                     i1l1804:	
 17884  10DA  1FA7               	btfss	i1___aldiv@dividend+3,7
 17885  10DB  28EB               	goto	i1l5457
 17886  10DC  09A4               	comf	i1___aldiv@dividend,f
 17887  10DD  09A5               	comf	i1___aldiv@dividend+1,f
 17888  10DE  09A6               	comf	i1___aldiv@dividend+2,f
 17889  10DF  09A7               	comf	i1___aldiv@dividend+3,f
 17890  10E0  0AA4               	incf	i1___aldiv@dividend,f
 17891  10E1  1903               	skipnz
 17892  10E2  0AA5               	incf	i1___aldiv@dividend+1,f
 17893  10E3  1903               	skipnz
 17894  10E4  0AA6               	incf	i1___aldiv@dividend+2,f
 17895  10E5  1903               	skipnz
 17896  10E6  0AA7               	incf	i1___aldiv@dividend+3,f
 17897  10E7  3001               	movlw	1
 17898  10E8  00FC               	movwf	??i1___aldiv
 17899  10E9  087C               	movf	??i1___aldiv,w
 17900  10EA  06A9               	xorwf	i1___aldiv@sign,f
 17901  10EB                     i1l5457:	
 17902  10EB  3000               	movlw	0
 17903  10EC  00AD               	movwf	i1___aldiv@quotient+3
 17904  10ED  3000               	movlw	0
 17905  10EE  00AC               	movwf	i1___aldiv@quotient+2
 17906  10EF  3000               	movlw	0
 17907  10F0  00AB               	movwf	i1___aldiv@quotient+1
 17908  10F1  3000               	movlw	0
 17909  10F2  00AA               	movwf	i1___aldiv@quotient
 17910  10F3  0823               	movf	i1___aldiv@divisor+3,w
 17911  10F4  0422               	iorwf	i1___aldiv@divisor+2,w
 17912  10F5  0421               	iorwf	i1___aldiv@divisor+1,w
 17913  10F6  0420               	iorwf	i1___aldiv@divisor,w
 17914  10F7  1903               	skipnz
 17915  10F8  2934               	goto	i1l5479
 17916  10F9  01A8               	clrf	i1___aldiv@counter
 17917  10FA  0AA8               	incf	i1___aldiv@counter,f
 17918  10FB                     i1l5465:	
 17919  10FB  1BA3               	btfsc	i1___aldiv@divisor+3,7
 17920  10FC  2909               	goto	i1l5467
 17921  10FD  3001               	movlw	1
 17922  10FE                     u482_25:	
 17923  10FE  35A0               	lslf	i1___aldiv@divisor,f
 17924  10FF  0DA1               	rlf	i1___aldiv@divisor+1,f
 17925  1100  0DA2               	rlf	i1___aldiv@divisor+2,f
 17926  1101  0DA3               	rlf	i1___aldiv@divisor+3,f
 17927  1102  0B89               	decfsz	9,f
 17928  1103  28FE               	goto	u482_25
 17929  1104  3001               	movlw	1
 17930  1105  00FC               	movwf	??i1___aldiv
 17931  1106  087C               	movf	??i1___aldiv,w
 17932  1107  07A8               	addwf	i1___aldiv@counter,f
 17933  1108  28FB               	goto	i1l5465
 17934  1109                     i1l5467:	
 17935  1109  3001               	movlw	1
 17936  110A                     u484_25:	
 17937  110A  35AA               	lslf	i1___aldiv@quotient,f
 17938  110B  0DAB               	rlf	i1___aldiv@quotient+1,f
 17939  110C  0DAC               	rlf	i1___aldiv@quotient+2,f
 17940  110D  0DAD               	rlf	i1___aldiv@quotient+3,f
 17941  110E  0B89               	decfsz	9,f
 17942  110F  290A               	goto	u484_25
 17943  1110  0823               	movf	i1___aldiv@divisor+3,w
 17944  1111  0227               	subwf	i1___aldiv@dividend+3,w
 17945  1112  1D03               	skipz
 17946  1113  291E               	goto	u485_25
 17947  1114  0822               	movf	i1___aldiv@divisor+2,w
 17948  1115  0226               	subwf	i1___aldiv@dividend+2,w
 17949  1116  1D03               	skipz
 17950  1117  291E               	goto	u485_25
 17951  1118  0821               	movf	i1___aldiv@divisor+1,w
 17952  1119  0225               	subwf	i1___aldiv@dividend+1,w
 17953  111A  1D03               	skipz
 17954  111B  291E               	goto	u485_25
 17955  111C  0820               	movf	i1___aldiv@divisor,w
 17956  111D  0224               	subwf	i1___aldiv@dividend,w
 17957  111E                     u485_25:	
 17958  111E  1C03               	skipc
 17959  111F  2929               	goto	i1l5475
 17960  1120  0820               	movf	i1___aldiv@divisor,w
 17961  1121  02A4               	subwf	i1___aldiv@dividend,f
 17962  1122  0821               	movf	i1___aldiv@divisor+1,w
 17963  1123  3BA5               	subwfb	i1___aldiv@dividend+1,f
 17964  1124  0822               	movf	i1___aldiv@divisor+2,w
 17965  1125  3BA6               	subwfb	i1___aldiv@dividend+2,f
 17966  1126  0823               	movf	i1___aldiv@divisor+3,w
 17967  1127  3BA7               	subwfb	i1___aldiv@dividend+3,f
 17968  1128  142A               	bsf	i1___aldiv@quotient,0
 17969  1129                     i1l5475:	
 17970  1129  3001               	movlw	1
 17971  112A                     u486_25:	
 17972  112A  36A3               	lsrf	i1___aldiv@divisor+3,f
 17973  112B  0CA2               	rrf	i1___aldiv@divisor+2,f
 17974  112C  0CA1               	rrf	i1___aldiv@divisor+1,f
 17975  112D  0CA0               	rrf	i1___aldiv@divisor,f
 17976  112E  0B89               	decfsz	9,f
 17977  112F  292A               	goto	u486_25
 17978  1130  3001               	movlw	1
 17979  1131  02A8               	subwf	i1___aldiv@counter,f
 17980  1132  1D03               	btfss	3,2
 17981  1133  2909               	goto	i1l5467
 17982  1134                     i1l5479:	
 17983  1134  0829               	movf	i1___aldiv@sign,w
 17984  1135  1903               	btfsc	3,2
 17985  1136  2942               	goto	i1l5483
 17986  1137  09AA               	comf	i1___aldiv@quotient,f
 17987  1138  09AB               	comf	i1___aldiv@quotient+1,f
 17988  1139  09AC               	comf	i1___aldiv@quotient+2,f
 17989  113A  09AD               	comf	i1___aldiv@quotient+3,f
 17990  113B  0AAA               	incf	i1___aldiv@quotient,f
 17991  113C  1903               	skipnz
 17992  113D  0AAB               	incf	i1___aldiv@quotient+1,f
 17993  113E  1903               	skipnz
 17994  113F  0AAC               	incf	i1___aldiv@quotient+2,f
 17995  1140  1903               	skipnz
 17996  1141  0AAD               	incf	i1___aldiv@quotient+3,f
 17997  1142                     i1l5483:	
 17998  1142  082D               	movf	i1___aldiv@quotient+3,w
 17999  1143  00A3               	movwf	?i1___aldiv+3
 18000  1144  082C               	movf	i1___aldiv@quotient+2,w
 18001  1145  00A2               	movwf	?i1___aldiv+2
 18002  1146  082B               	movf	i1___aldiv@quotient+1,w
 18003  1147  00A1               	movwf	?i1___aldiv+1
 18004  1148  082A               	movf	i1___aldiv@quotient,w
 18005  1149  00A0               	movwf	?i1___aldiv
 18006  114A  0008               	return
 18007  114B                     __end_ofi1___aldiv:	
 18008                           
 18009                           	psect	text68
 18010  1CEB                     __ptext68:	
 18011 ;; *************** function ___awdiv *****************
 18012 ;; Defined at:
 18013 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 18014 ;; Parameters:    Size  Location     Type
 18015 ;;  divisor         2    0[COMMON] int 
 18016 ;;  dividend        2    2[COMMON] int 
 18017 ;; Auto vars:     Size  Location     Type
 18018 ;;  quotient        2    7[COMMON] int 
 18019 ;;  sign            1    6[COMMON] unsigned char 
 18020 ;;  counter         1    5[COMMON] unsigned char 
 18021 ;; Return value:  Size  Location     Type
 18022 ;;                  2    0[COMMON] int 
 18023 ;; Registers used:
 18024 ;;		wreg, status,2, status,0
 18025 ;; Tracked objects:
 18026 ;;		On entry : 0/0
 18027 ;;		On exit  : 0/0
 18028 ;;		Unchanged: 0/0
 18029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18031 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18033 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18034 ;;Total ram usage:        9 bytes
 18035 ;; Hardware stack levels used:    1
 18036 ;; This function calls:
 18037 ;;		Nothing
 18038 ;; This function is called by:
 18039 ;;		_isr
 18040 ;;		_USARTWriteInt
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044                           
 18045                           ;psect for function ___awdiv
 18046  1CEB                     ___awdiv:	
 18047                           
 18048                           ;incstack = 0
 18049                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18050  1CEB  01F6               	clrf	___awdiv@sign
 18051  1CEC  1FF1               	btfss	___awdiv@divisor+1,7
 18052  1CED  2CF5               	goto	i1l6021
 18053  1CEE  09F0               	comf	___awdiv@divisor,f
 18054  1CEF  09F1               	comf	___awdiv@divisor+1,f
 18055  1CF0  0AF0               	incf	___awdiv@divisor,f
 18056  1CF1  1903               	skipnz
 18057  1CF2  0AF1               	incf	___awdiv@divisor+1,f
 18058  1CF3  01F6               	clrf	___awdiv@sign
 18059  1CF4  0AF6               	incf	___awdiv@sign,f
 18060  1CF5                     i1l6021:	
 18061  1CF5  1FF3               	btfss	___awdiv@dividend+1,7
 18062  1CF6  2D00               	goto	i1l6027
 18063  1CF7  09F2               	comf	___awdiv@dividend,f
 18064  1CF8  09F3               	comf	___awdiv@dividend+1,f
 18065  1CF9  0AF2               	incf	___awdiv@dividend,f
 18066  1CFA  1903               	skipnz
 18067  1CFB  0AF3               	incf	___awdiv@dividend+1,f
 18068  1CFC  3001               	movlw	1
 18069  1CFD  00F4               	movwf	??___awdiv
 18070  1CFE  0874               	movf	??___awdiv,w
 18071  1CFF  06F6               	xorwf	___awdiv@sign,f
 18072  1D00                     i1l6027:	
 18073  1D00  01F7               	clrf	___awdiv@quotient
 18074  1D01  01F8               	clrf	___awdiv@quotient+1
 18075  1D02  0870               	movf	___awdiv@divisor,w
 18076  1D03  0471               	iorwf	___awdiv@divisor+1,w
 18077  1D04  1903               	btfsc	3,2
 18078  1D05  2D2F               	goto	i1l6049
 18079  1D06  01F5               	clrf	___awdiv@counter
 18080  1D07  0AF5               	incf	___awdiv@counter,f
 18081  1D08                     i1l6037:	
 18082  1D08  1BF1               	btfsc	___awdiv@divisor+1,7
 18083  1D09  2D14               	goto	i1l6039
 18084  1D0A  3001               	movlw	1
 18085  1D0B                     u582_25:	
 18086  1D0B  35F0               	lslf	___awdiv@divisor,f
 18087  1D0C  0DF1               	rlf	___awdiv@divisor+1,f
 18088  1D0D  0B89               	decfsz	9,f
 18089  1D0E  2D0B               	goto	u582_25
 18090  1D0F  3001               	movlw	1
 18091  1D10  00F4               	movwf	??___awdiv
 18092  1D11  0874               	movf	??___awdiv,w
 18093  1D12  07F5               	addwf	___awdiv@counter,f
 18094  1D13  2D08               	goto	i1l6037
 18095  1D14                     i1l6039:	
 18096  1D14  3001               	movlw	1
 18097  1D15                     u584_25:	
 18098  1D15  35F7               	lslf	___awdiv@quotient,f
 18099  1D16  0DF8               	rlf	___awdiv@quotient+1,f
 18100  1D17  0B89               	decfsz	9,f
 18101  1D18  2D15               	goto	u584_25
 18102  1D19  0871               	movf	___awdiv@divisor+1,w
 18103  1D1A  0273               	subwf	___awdiv@dividend+1,w
 18104  1D1B  1D03               	skipz
 18105  1D1C  2D1F               	goto	u585_25
 18106  1D1D  0870               	movf	___awdiv@divisor,w
 18107  1D1E  0272               	subwf	___awdiv@dividend,w
 18108  1D1F                     u585_25:	
 18109  1D1F  1C03               	skipc
 18110  1D20  2D26               	goto	i1l6045
 18111  1D21  0870               	movf	___awdiv@divisor,w
 18112  1D22  02F2               	subwf	___awdiv@dividend,f
 18113  1D23  0871               	movf	___awdiv@divisor+1,w
 18114  1D24  3BF3               	subwfb	___awdiv@dividend+1,f
 18115  1D25  1477               	bsf	___awdiv@quotient,0
 18116  1D26                     i1l6045:	
 18117  1D26  3001               	movlw	1
 18118  1D27                     u586_25:	
 18119  1D27  36F1               	lsrf	___awdiv@divisor+1,f
 18120  1D28  0CF0               	rrf	___awdiv@divisor,f
 18121  1D29  0B89               	decfsz	9,f
 18122  1D2A  2D27               	goto	u586_25
 18123  1D2B  3001               	movlw	1
 18124  1D2C  02F5               	subwf	___awdiv@counter,f
 18125  1D2D  1D03               	btfss	3,2
 18126  1D2E  2D14               	goto	i1l6039
 18127  1D2F                     i1l6049:	
 18128  1D2F  0876               	movf	___awdiv@sign,w
 18129  1D30  1903               	btfsc	3,2
 18130  1D31  2D37               	goto	i1l6053
 18131  1D32  09F7               	comf	___awdiv@quotient,f
 18132  1D33  09F8               	comf	___awdiv@quotient+1,f
 18133  1D34  0AF7               	incf	___awdiv@quotient,f
 18134  1D35  1903               	skipnz
 18135  1D36  0AF8               	incf	___awdiv@quotient+1,f
 18136  1D37                     i1l6053:	
 18137  1D37  0878               	movf	___awdiv@quotient+1,w
 18138  1D38  00F1               	movwf	?___awdiv+1
 18139  1D39  0877               	movf	___awdiv@quotient,w
 18140  1D3A  00F0               	movwf	?___awdiv
 18141  1D3B  0008               	return
 18142  1D3C                     __end_of___awdiv:	
 18143  007E                     btemp	set	126	;btemp
 18144  007E                     int$flags	set	126
 18145  007E                     wtemp	set	126
 18146  007E                     wtemp0	set	126
 18147  0080                     wtemp1	set	128
 18148  0082                     wtemp2	set	130
 18149  0084                     wtemp3	set	132
 18150  0086                     wtemp4	set	134
 18151  0088                     wtemp5	set	136
 18152  007F                     wtemp6	set	127
 18153  007E                     ttemp	set	126
 18154  007E                     ttemp0	set	126
 18155  0081                     ttemp1	set	129
 18156  0084                     ttemp2	set	132
 18157  0087                     ttemp3	set	135
 18158  007F                     ttemp4	set	127
 18159  007E                     ltemp	set	126
 18160  007E                     ltemp0	set	126
 18161  0082                     ltemp1	set	130
 18162  0086                     ltemp2	set	134
 18163  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    57
    Data        812
    BSS         286
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     70      72
    BANK3            80     15      80
    BANK4            80     12      71
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      61
    BANK10           80      0      61
    BANK11           80      0      64
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK1[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    _trunc->___altoft
    _log->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_map
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftsub->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftmul
    ___ftneg->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftneg
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA100kPot
    _main->_scaleiA10kPot
    _set_subdivision->_trunc
    _scaleiA10kPot->_pow
    _scaleiA100kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _trunc->___altoft
    _pow->_exp
    _exp->_floor
    _floor->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  564951
                                              0 BANK3     15    15      0
                                              0 BANK4     12    12      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                     _scaleiA100kPot
                      _scaleiA10kPot
                    _set_subdivision
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   16015
                                             24 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       15    12      3  114635
                                             55 BANK2     15    12      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
                              _trunc
 ---------------------------------------------------------------------------------
 (1) _scaleiA100kPot                                      15    12      3  108220
                                             55 BANK2     15    12      3
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
                              _trunc
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        15    12      3  108220
                                             55 BANK2     15    12      3
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
                              _trunc
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       15    12      3  108220
                                             55 BANK2     15    12      3
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                8     5      3    5650
                                             16 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6   91915
                                             37 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   28935
                                             66 BANK1      5     2      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   50413
                                             24 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    2892
                                             66 BANK1     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   12707
                                             16 BANK2      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     784
                                              0 BANK1      7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1295
                                             74 BANK1      4     0      4
                                              0 BANK2     10    10      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1584
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                             78 BANK1      2     2      0
                                             10 BANK2      6     2      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   11851
                                             56 BANK1     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5907
                                             40 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3641
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   16937
                                             56 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     758
                                             24 BANK1      3     0      3
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    5034
                                             40 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    4082
                                              8 BANK1     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    5657
                                             27 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       _frexp (ARG)
   _scaleA10kPot
     ___ftdiv
       ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       _frexp (ARG)
   _scaleiA100kPot
     ___ftdiv
       ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       _frexp (ARG)
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       _frexp (ARG)
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
       _frexp (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     46      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      F      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      C      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     327      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.3%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3D      26       76.3%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     327      28        0.0%
BANK11              50      0      40      29       80.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jan 07 11:22:38 2017

                     _update_mode 180B                      ___altoft@exp 012E                       __CFG_CP$OFF 0000  
                   ___altoft@sign 012F                  scaleA100kPot@pwm 015A                      ___awdiv@sign 0076  
              _topTactile_pressed 01C9        setDoublePressState@f_state 00B8               ___wmul@multiplicand 00A2  
              USARTInit@baud_rate 00A0                   _updateSwitchTap 0C0F                      ___ftadd@exp1 00C7  
                    ___ftadd@exp2 00C6                      ___ftadd@sign 00C5                               l630 0834  
            __size_of_adc_convert 0013                               l389 27F1                               l582 1711  
                             l589 25A2                               l790 1884                               l951 1B80  
                             l792 1887                               l793 188A                               l785 1DBD  
                             l794 188D                               l786 1DE1                               l795 1890  
                             l955 1BA7                               l963 1C60                               l797 1893  
                             l798 18B7                               l990 26EE                               l967 1C90  
                             l993 1DE9                               l986 26CC                               l978 183B  
                             _GIE 005F                               l988 26D2                               l989 26DA  
                             _RB1 0069                               _PR2 001B      solidring_tactiles@ring_delay 00B4  
                             _map 11D3                               _exp 0A9A                               _log 1446  
                             _isr 0004                               _tap 02A0                               _pow 096E  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 0142           __end_of_set_leds_bottom 18B8  
                    __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029                      ___ftdiv@cntr 00B2  
                    ___ftdiv@sign 00B7                              l1004 1E33                              l2001 137B  
                            l1240 179C                              l2113 0992                              l1392 0CE2  
                            l1378 0C26                              l1804 078E                              l1910 1ECE  
                            l1664 1B5D                              l1917 1EE1                              l1941 0917  
                            l1749 2658                              l1918 1EE9                              l7011 08E3  
                            l7013 08ED                              l7005 08D0                              ?_map 00D8  
                            l7023 0909                              l7015 08F2                              l7103 162B  
                            l7033 093B                              l7025 0913                              l7017 08F6  
                            l8001 0CC2                              l7043 0956                              l7107 1633  
                            l7051 18CF                              l7131 1317                              l7029 0929  
                            l7213 1CCF                              l7205 1CAB                              l7055 18E5  
                            l7151 1363                              l8031 0DA1                              l7073 15BE  
                            l7313 1532                              l7233 185F                              l8025 0D31  
                            l8017 0D25                              l8009 0CDA                              l7091 160F  
                            l7163 138D                              l7323 159F                              l8027 0D7B  
                            ?_exp 0138                              l7261 13CA                              l7421 272A  
                            l7245 26B4                              l7333 1E94                              l7157 1371  
                            l7149 1354                              l7309 152A                              l7413 26E2  
                            ?_log 00E2                              l7255 13B4                              l7095 1617  
                            l7079 15D4                              l7159 137F                              l7175 1A3A  
                            l7343 1158                              l7431 1465                              l8039 0DE1  
                            l8303 0773                              l8057 1B75                              l7353 117A  
                            l8161 1670                              l8305 071F                              l8225 0417  
                            l8209 03F8                              l7283 1424                              l7275 140B  
                            l8067 1B9C                              l7419 271A                              l8163 1674  
                            l8171 1685                              l8307 0779                              l8219 0408  
                            ?_isr 0070                              l8077 1C55                              l7373 11B3  
                            l7453 0AA7                              l7437 1478                              l8165 167A  
                            l8173 169E                              l7701 07BD                              l8253 0524  
                            l8087 1C7C                              l7295 2673                              l7463 0ACC  
                            l8167 167E                              l8159 166A                              l8271 05FA  
                            l8263 0585                              l8239 048B                              l6921 1DB5  
                            l6913 1D95                              l7377 11BB                              l7537 1D59  
                            l7713 07E8                              l8249 04EC                              l6915 1D9D  
                            l7723 1B30                              l7627 1BDD                              l7475 0B2B  
                            l7571 0A0C                              l7563 09A6                              l8283 06A3  
                            l8275 062C                              l8267 05B7                              l6941 189A  
                            l6917 1DA5                              l6925 1DC4                              l7725 1B32  
                            l7733 1B3A                              l7469 0AF0                              l7557 099A  
                            l7717 07F6                              l7709 07DD                              l6919 1DAD  
                            l7727 1B34                              l6871 27B1                              l7575 0A2C  
                            l7663 1A13                              l7671 1A1E                              l7655 1A02  
                            l7911 17A0                              l8287 06E8                              l8279 0671  
                            l7729 1B36                              l7497 0BEF                              l7921 17C3  
                            l7905 178E                              l7825 1838                              l7841 1E0C  
                            l6867 27A7                              l6891 1EBA                              l6883 1EA4  
                            l6971 1C13                              l7923 17C9                              l7931 17DC  
                            l7691 079F                              l7819 182E                              l7827 183F  
                            l6949 2652                              l6973 1C25                              l7917 17BB  
                            l6887 1EAB                              l6983 08A0                              l7871 1740  
                            l7847 1E18                              l8681 1B4E                              l6897 1ED3  
                            l6889 1EB5                              l6993 08B6                              l7961 0C38  
                            l7857 1E2F                              l7849 1E1D                              l7787 0847  
                            l8683 1B53                              l6899 1EDB                              l6987 08A7  
                            l7891 176E                              l7867 172D                              l7699 07AF  
                            l7955 0C1B                              l7859 1E37                              l7789 0850  
                            l8685 1B58                              l8677 168A                              l7893 1776  
                            ?_pow 0145                              l8687 1DCA                              l8679 1B49  
                            l7879 174C                              l7983 0C83                              l7975 0C5B  
                            l8689 18A0                              l7977 0C78                              l7997 0CAB  
                            l7999 0CB3                              _PEIE 005E                              u7025 1C18  
                            _RCIE 048D                              u7135 08D1                              u8015 2626  
                            u7225 090A                              u8025 19F3                              u8105 07B2  
                            u8220 084E                              u8205 082D                              u7165 08E4  
                            u7405 163A                              u7325 15E0                              u8125 07BE  
                            u8215 0840                              u7335 15F0                              u8135 07D2  
                            u7505 1372                              u8145 07DE                              u8065 2640  
                            u9105 0688                              u9025 046D                              u7195 08F7  
                            u7355 1618                              u9115 06A1                              u9035 0489  
                            u7365 161E                              u7445 1324                              u8405 1726  
                            u8325 1DFB                              u9045 0506                              u8175 26FB  
                            u6815 27B2                              u8415 1739                              u8255 181E  
                            u9143 076B                              u9135 0753                              u9055 0522  
                            u8185 2701                              u6825 27B9                              u6905 1ED6  
                            u7625 13DC                              u7545 1CA9                              u9065 059C  
                            u7635 13EC                              u7395 1634                              u7475 1355  
                            u7555 1CCD                              u9075 05B5                              u7645 140C  
                            u8445 1756                              u9085 0611                              u7655 141B  
                            u8535 17AC                              u9095 062A                              u6945 1EF0  
                            u6865 1EB0                              u7665 1425                              u7850 0B09  
                            u7860 0B0A                              u6885 1EC9                              u7765 1183  
                            u8805 0D4F                              u8815 0D63                              u7785 271F  
                            u6985 2659                              u8665 0C64                              u6995 265E  
                            u8835 0D80                              u7965 09FD                              u7990 1BDB  
                            u7895 0BE6                              u8775 0CF3                              u8695 0C8D  
                            u7985 1BBD                              u8785 0D0A                              u8955 1C75  
                            u8795 0D3A                              u8895 1B95                              u8985 170A  
              scaleA100kPot@input 0157                      __CFG_WRT$OFF 0000                 _scaleA10kPot$2663 015D  
               _scaleA10kPot$2664 0160                     __CFG_FCMEN$ON 0000                 _scaleA10kPot$2665 0163  
                ??_scaleiA100kPot 00F0                              _iCnt 01C1                              _main 03DA  
                    ___ftpack@arg 00A0                      ___ftpack@exp 00A3                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              map@x 00D8  
                            btemp 007E                              exp@x 0138                              log@x 00E2  
                   __CFG_BOREN$ON 0000                              ltemp 007E                              pow@x 0145  
                            pow@y 0148          __end_of_setFeedbackState 2635                              start 031F  
                            ttemp 007E                              wtemp 007E      __end_of_getSwitchBypassState 2556  
                 _expressModeCnst 01DB      updateSwitchTap@tapCntDivisor 00C2      __end_of_setSwitchBypassState 1BFC  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00D6  
                    ___ftmul@sign 00D7                   __end_of_InitApp 279E                 scaleiA100kPot@pwm 015A  
                    ___fttol@exp1 0129                             ??_map 00E7                             ??_exp 013B  
                           ??_log 00E5                      ___fttol@lval 0125                             ??_isr 003A  
                           ??_pow 014B                   _switchBypass_up 0265         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 07FF                             ?_main 0070                   __end_of___awdiv 1D3C  
                 __end_of___ftadd 096E                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 1446  
                 __end_of___ftneg 256F                   __end_of___ftmul 165B                   ___awdiv@divisor 0070  
                 __end_of___ftsub 2689                   __end_of___fttol 139D                             i1l139 011F  
                           i1l176 031A                             i1l785 1026                             i1l786 1048  
                 ___awdiv@counter 0075                             _RCREG 0199                             _SPBRG 019B  
                           _TXREG 019A                             _UQEnd 0069               _ConfigureOscillator 254E  
                _setPresetDisplay 1843                      ?_init_timer0 0070                      ?_init_timer2 0070  
             ___lmul@multiplicand 00A4                      ___lltoft@exp 00AD                   _switchTap_state 01DF  
               ??_setLongTapState 00A2                     ___awtoft@sign 00AD                             _floor 14F6  
                           _ldexp 114B                             _frexp 1A26                             _myBuf 05A0  
                           _errno 0253                     ___ftpack@sign 00A4                             _timer 0062  
                           _trunc 1D3C                  __end_ofi1___lmul 276E                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 2800                             pow@yi 0153                   scaleA10kPot@pwm 015A  
              __size_of_USARTInit 0043                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 1BB2                __size_ofi1___aldiv 0082  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F             set_subdivision@scalar 013F                       exp@exponent 0142  
            ?_ConfigureOscillator 0070                _updateSwitchBypass 1717                       ldexp@newexp 00E5  
         __end_of_updateSwitchTap 0DF8                   __initialization 0321                       log@exponent 00E5  
         _updateSwitchBypassState 07FF                      __end_of_main 077D           __size_of_InitializeTaps 0026  
             i1___lmul@multiplier 0070            __size_of_scaleA100kPot 0080               ?_updateSwitchBypass 0070  
          ring_tactiles@iLed_1522 00B5                    __CFG_LPBOR$OFF 0000                   _set_subdivision 165B  
                          ??_main 01E1                     ___fttol@sign1 0124                     ?_scaleA10kPot 0157  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 1AA6                    _feedback_timer 01AA  
                  _feedback_state 0056                    _feedback_start 01C0                  ?_set_leds_bottom 00A0  
                          ?_floor 0130                            ?_ldexp 00E2                            ?_frexp 00A0  
                __end_of___altoft 1C4B                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0072               _baseline_delay_time 0045                  __end_of___awtoft 26CB  
                __end_of___ftpack 1F00              ??_updateSwitchBypass 00BC                            ?_trunc 0130  
                __end_of___lltoft 273F                            i1l1804 10DA                            i1l6021 1CF5  
                          i1l6101 010C                            i1l6027 1D00                            i1l6131 0193  
                          i1l6123 016D                            i1l6053 1D37                            i1l6045 1D26  
                          i1l6037 1D08                            i1l6061 100E                            i1l6205 0313  
                          i1l6125 017D                            i1l6039 1D14                            i1l6063 1014  
                          i1l6071 102C                            i1l6135 019E                            i1l6127 017F  
                          i1l6049 1D2F                            i1l6065 101A                            i1l6209 0318  
                          i1l6153 01F0                            i1l6137 01AD                            i1l5435 2747  
                          i1l6067 1020                            i1l6059 1008                            i1l6171 025D  
                          i1l6155 01FF                            i1l6139 01AF                            i1l6181 0288  
                          i1l6165 0250                            i1l6149 01E3                            i1l6093 00C3  
                          i1l5439 2751                            i1l6175 0270                            i1l6167 0253  
                          i1l6159 020E                            i1l6087 00A9                            i1l5465 10FB  
                          i1l5457 10EB                            i1l6177 0276                            i1l6169 0259  
                          i1l6185 028C                            i1l6193 02E5                            i1l5483 1142  
                          i1l5475 1129                            i1l5467 1109                            i1l6179 027C  
                          i1l6187 02A3                            i1l5479 1134                            i1l8691 0292  
                          i1l8693 1031                            u600_23 013B                            _PMADRH 0192  
                          _PMADRL 0191                            _PMDATH 0194                            _PMDATL 0193  
                          _PMCON2 0196                            u612_23 0236                            u613_25 024B  
                          u614_25 0269                            u608_23 01D1                            u616_25 02F5  
                          u617_25 030E                            u482_25 10FE                            u484_25 110A  
                          u476_25 2752                            u485_25 111E                            u477_25 2759  
                          u582_25 1D0B                            u486_25 112A                            u591_25 00A0  
                          u584_25 1D15                            u585_25 1D1F                            u593_25 00BA  
                          u586_25 1D27                            u595_23 00DC                    _debounce_count 024B  
                  _debounce_mode1 024D                    _debounce_mode2 024F                            _URBuff 0320  
                       ??_InitApp 00A0             ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 1C9B  
                  __CFG_PWRTE$OFF 0000                            ___ftge 18B8                            ___lmul 279E  
                       ??___aldiv 00A8                            ___wmul 264F                 _update_selectMode 1DE2  
                       ??___awdiv 0074                         ??___ftadd 00C1                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 00AE                         ??___ftneg 00BB                         ??___ftmul 00CE  
                       ??___ftsub 00CE                         ??___fttol 0120                  __end_of_init_adc 180B  
                          _modSaw 0520                            _modSin 03A0                            _modTri 0420  
                __end_of_init_pwm 1B28                ?_update_selectMode 0070                  ___awdiv@quotient 0077  
           __end_of_resetRingLEDs 261B                 __end_of_USARTInit 1B6B                      __pdataBANK10 0520  
                  ??_scaleA10kPot 00F0                 __end_ofi1___aldiv 114B                            floor@i 0133  
                          floor@x 0130             ___ftmul@f3_as_product 00D3                      __pdataBIGRAM 23E8  
         FLASH_ReadWord@flashAddr 00A0                  __end_of_showSave 25BD               ??_update_selectMode 00A7  
            _getSwitchBypassState 2552                         ??_wait_ms 00AE              _setSwitchBypassState 1BB2  
                          trunc@i 0133                            trunc@x 0130                     _scaleA100kPot 1F00  
    __end_of_setExpressionDisplay 2601            __size_of_scaleiA10kPot 009A            setLongTapState@f_state 00A0  
                __end_ofexp@coeff 201E                  __end_oflog@coeff 2039           __end_of__initialization 03D6  
                      ___altoft@c 012A                        ___ftadd@f1 00BB                        ___ftadd@f2 00BE  
                      ___ftge@ff1 00A0                        ___ftge@ff2 00A3                 _bypass_turning_on 01BF  
                    eval_poly@res 00DF                        ___ftdiv@f1 00AB                        ___ftdiv@f2 00A8  
                      ___ftdiv@f3 00B3                    _top_push_state 0053         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00B8               _switchBypass_toggle 0257                        ___awtoft@c 00A8  
           __end_of_ring_tactiles 1CEB         __end_of_update_selectMode 1E3B           __end_of_set_subdivision 1717  
                      ___ftmul@f1 00C8                        ___ftmul@f2 00CB                        ___ftsub@f1 00CB  
                      ___ftsub@f2 00C8                        ___fttol@f1 00EA                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 25BD  
                    __pidataBANK2 0002                      __pidataBANK3 25D2                      __pidataBANK4 0800  
                    __pidataBANK7 19AB                      __pidataBANK8 196E                      __pidataBANK9 1931  
                      ___lltoft@c 00A8                     __end_of_floor 15A7                     __end_of_ldexp 11D3  
                   __end_of_frexp 1A66                     __end_of_trunc 1D8E                  _initSwitchBypass 2587  
             scaleiA100kPot@input 0157                         ?i1___lmul 0070                   _doubleTap_state 0066  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2  
                  ?_scaleA100kPot 0157                           ??_floor 00F0                           ??_ldexp 00E7  
                         ??_frexp 00A5              __size_of_init_timer0 0007              __size_of_init_timer2 0009  
               i1___aldiv@divisor 0020                 i1___aldiv@counter 0028                           ??_trunc 00F0  
                   ?_setPedalMode 0070                        __pbssBANK0 005A                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                        __pbssBANK5 02A0                        __pbssBANK6 0320  
              __size_of_eval_poly 0060                  ??i1_set_leds_top 0074                   __CFG_VCAPEN$OFF 0000  
                      __pnvCOMMON 007D                        _delayArray 23E8                 ?_setFeedbackState 00A0  
        __end_of_setPresetDisplay 187D                        _delay_time 0049                  _long_press_limit 0051  
    __size_of_setDoublePressState 003E                        _delayfound 0251                        __pmaintext 03DA  
              ??_setFeedbackState 00A2                    _InitializeTaps 26EF                           ?___ftge 00A0  
                         ?___lmul 00A0                           ?___wmul 00A0                        __pintentry 0004  
                   _scaleiA10kPot 125E                        _blink_rate 0055                     ??_adc_convert 00A2  
                       ?___altoft 012A                    ___lmul@product 00A8                   _setLongTapState 2635  
                       ?___awtoft 00A8                         ?___ftpack 00A0                         ?___lltoft 00A8  
                      ??i1___lmul 0078                    _FLASH_ReadWord 2689   __end_of_updateSwitchBypassState 0800  
                     modulation@x 002E                       modulation@y 0032                        _ldexp$2458 00E9  
                 _debounce_bypass 0249                    ??_setPedalMode 00A7                USARTWriteInt@F3536 0234  
                   _suspend_blink 01C6                           _UQFront 007D                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 276E              __end_of_scaleA10kPot 2000  
          __end_of_InitializeTaps 2715                     ?_set_leds_top 00A0                        _knob1_prev 0166  
      __size_of_update_selectMode 0059                        _knob2_prev 004F                        _knob3_prev 01CE  
                      _knob4_prev 01D0                        _knob5_prev 01D2                  ?_set_subdivision 0138  
                       ?_showSave 0070                           ___aldiv 077D                    ?_scaleiA10kPot 0157  
                 __size_of___ftge 003C                           ___awdiv 1CEB                   __size_of___lmul 0030  
                         ___ftadd 0878                           ___ftdiv 139D                           ___ftneg 2566  
                      _knob_1_pos 01AC                        _knob_2_pos 01AE                   __size_of___wmul 001C  
                         ___ftmul 15A7                        _knob_3_pos 01B0                           ___ftsub 266B  
                         ___fttol 12F8                        _knob_4_pos 01B2                        _knob_5_pos 01B4  
               _switchTap_pressed 01C8                        ??___altoft 00EE              _setExpressionDisplay 25E9  
          __end_of_FLASH_ReadWord 26A9                        ??___awtoft 00AB                        ??___ftpack 00A5  
               __end_of_eval_poly 1E9B                InitializeTaps@itap 00A1                        ??___lltoft 00AC  
                         __ptext1 1DE2                           __ptext2 180B                           __ptext3 0C0F  
                         __ptext4 2635                           __ptext5 077D                           __ptext6 1717  
                         __ptext7 261B                           __ptext8 19E8                           __ptext9 25A9  
          ??_getSwitchBypassState 00A2                         _T2CONbits 001C                  _adjust_sub_delay 0245  
                    __size_of_map 008B                      __size_of_exp 0175                      __size_of_log 00B0  
                    __size_of_isr 031B            ??_setSwitchBypassState 00B4                      __size_of_pow 012C  
             __end_of_adc_convert 25A9                   ??_scaleA100kPot 00F0                  ___aldiv@dividend 00A4  
                         _wait_ms 27CE                           clrloop0 257C              end_of_initialization 03D6  
                         exp@sign 0144                        _modulation 1AA6                           init_ram 256F  
                      ??_init_adc 00A0                           initloop 2570                        ??_init_pwm 00A0  
    updateSwitchBypassState@state 00A0                _solidring_tactiles 1A66                     _longTap_timer 01B6  
                   _longTap_state 0057                     _longTap_start 01C2                    ??_set_leds_top 00A4  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070                           pow@sign 0152  
               scaleA10kPot@input 0157           __end_of_setLongTapState 264F            i1set_leds_top@ledState 0072  
              ??_read_top_tactile 00B2                         _RCSTAbits 019D                        ??_showSave 00B7  
                ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047               ?_solidring_tactiles 0070  
         __size_of_scaleiA100kPot 0080                      __pstringtext 2000         FLASH_ReadWord@GIEBitValue 00A2  
             _scaleiA100kPot$2660 015D               _scaleiA100kPot$2661 0160               _scaleiA100kPot$2662 0163  
           ?_setExpressionDisplay 0070              __size_of_update_mode 0038                   ?_FLASH_ReadWord 00A0  
               _expressionChannel 01DC                         _PORTAbits 000C                         _PORTCbits 000E  
                       _PORTDbits 000F                         _PORTEbits 0010                        _test_timer 0241  
                       _USARTInit 1B28                         _TRISBbits 008D                         _TRISCbits 008E  
                       _TRISDbits 008F                         _TRISEbits 0090                         _TRISFbits 030C  
                       _TRISGbits 030D                         i1___aldiv 10C9           setFeedbackState@f_state 00A0  
            ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 2552                        map@out_max 00E4  
                      map@out_min 00E1       __size_of_updateSwitchBypass 00E9          __end_of_initSwitchBypass 2596  
                     _CCP1CONbits 0293                       ___ftdiv@exp 00B6          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A                         _TXSTAbits 019E              _switchBypass_pressed 01BC  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                   ??_scaleiA10kPot 00F0                       _CCP7CONbits 0616  
                     ___ftmul@exp 00D2                adc_convert@channel 00A3                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 00A2                     __pidataBANK10 18F4  
                  __end_of___ftge 18F4              __end_of_setPedalMode 26EF                    __end_of___lmul 27CE  
                   __pidataBIGRAM 0DF8                    __end_of___wmul 266B                      _double_timer 01A0  
                     _adc_convert 2596                    _switchTap_down 01C7                        floor@expon 0136  
           i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F               start_initialization 0321  
                      ?_USARTInit 00A0                        eval_poly@d 00DB                        eval_poly@n 00DD  
                      eval_poly@x 00D8             _bottomTactile_pressed 01BE               _setDoublePressState 19E8  
                      ldexp@value 00E2                        ?i1___aldiv 0020                       __end_of_map 125E  
                     __end_of_exp 0C0F                       __end_of_log 14F6                       __end_of_isr 031F  
                     __end_of_pow 0A9A             __size_of_scaleA10kPot 0080                _adjusted_pot_value 0247  
                     ?_modulation 002E                scaleiA10kPot@input 0157                        frexp@value 00A0  
          __size_of_resetRingLEDs 001A              ?_setDoublePressState 00B8                  ?_setLongTapState 00A0  
               ?_setPresetDisplay 0070                          ??___ftge 00A6                          ??___lmul 00A8  
          ??_setExpressionDisplay 00A4                          ??___wmul 00A4                ??_setPresetDisplay 00A4  
                     __pdataBANK0 0045                       __pdataBANK2 0166                       __pdataBANK3 01CA  
                     __pdataBANK4 0265                       __pdataBANK7 03A0                       __pdataBANK8 0420  
                     __pdataBANK9 04A0                i1___aldiv@dividend 0024                     _tap_iteration 01D6  
        __size_of_updateSwitchTap 01E9                 __size_of___altoft 004F                       __pbssBANK11 05A0  
       __size_of_setFeedbackState 001A                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                    _scaleA10kPot 1F80                 __size_of___lltoft 002A                     ??_init_timer0 00A0  
                   ??_init_timer2 00A0              __end_of_set_leds_top 1DE2                         ___latbits 0003  
  setExpressionDisplay@ledChannel 00A6                _switchBypass_state 0059                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK3 01E1  
                   __pcstackBANK4 0259            __size_of_ring_tactiles 0050                    _expSwitchState 01DA  
                   _delay_counter 01A8                  i1___lmul@product 0078                  scaleiA10kPot@pwm 015A  
        ?_updateSwitchBypassState 00A0                i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043  
                        ?_InitApp 0070                         __pnvBANK0 0069             ??_setDoublePressState 00BA  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                         _main$2651 0259  
                       _main$2652 025C                         _main$2653 025F                         _main$2654 0262  
                        ?___aldiv 00A0                 ??_set_leds_bottom 00A2                    _scaleiA100kPot 1049  
              _currentBypassState 01D9                          ?___awdiv 0070                          ?___ftadd 00BB  
                        ?___ftdiv 00A8                          ?___ftneg 00B8                          ?___ftmul 00C8  
                        ?___ftsub 00C8                          ?___fttol 00EA                 __size_of_showSave 0014  
              _scaleA100kPot$2657 015D                _scaleA100kPot$2658 0160                _scaleA100kPot$2659 0163  
                     _blink_delay 01CA               __size_of_modulation 0041                     _resetRingLEDs 2601  
                     _blink_state 01D8                         _eval_poly 1E3B                       ??_USARTInit 00A2  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                     ??i1___aldiv 007C                          ?_wait_ms 00AC                         _modRevSaw 04A0  
             _read_bottom_tactile 1B6B                    __size_of_floor 00B1                    __size_of_ldexp 0088  
                  __size_of_frexp 0040                    _presetModeCnst 01DE                    __size_of_trunc 0052  
             __end_of_init_timer0 255D               __end_of_init_timer2 2566                         _mod_value 01BA  
                       _mod_timer 01A4                  ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0  
                 ___aldiv@counter 00A9                    _presetSaveMode 0068                    ___wmul@product 00A4  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 01D4                         clear_ram0 257B  
                       _tap_timer 005E                         _tap_total 023D             __size_of_setPedalMode 0024  
          __end_of_scaleiA100kPot 10C9                     set_leds_top@x 00A0                          _PIR1bits 0011  
                   _ring_tactiles 1C9B                  ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 00B6                         map@in_max 00DE  
                       map@in_min 00DB                    ?_resetRingLEDs 0070                         _sub_timer 005A  
                      _ADCON0bits 009D                          i1___lmul 273F                        _ADCON1bits 009E  
        __size_of_set_subdivision 00BC                 ___wmul@multiplier 00A0                  set_subdivision@x 0138  
                set_subdivision@y 013A         __size_of_read_top_tactile 0050                        ?_eval_poly 00D8  
   __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A             __end_of_scaleA100kPot 1F80  
               ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0                      _setPedalMode 26CB  
               _ReadSavedSettings 0802                 ?_initSwitchBypass 0070                 ring_tactiles@iLed 00B3  
                  wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070                    wait_ms@timemsl 00AE  
                       frexp@eptr 00A3       setSwitchBypassState@f_state 00B2                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                    ?_ring_tactiles 0070                   ?_scaleiA100kPot 0157  
                     _mode1_state 01C3                     ??_update_mode 00A7                       _mode2_state 0067  
           ??_read_bottom_tactile 00B2               updateSwitchTap@iCnt 00C4               ??_ReadSavedSettings 00A4  
                      _APFCONbits 011D                  __size_of___aldiv 0082                  __size_of___awdiv 0051  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 00A0  
                __size_of___ftneg 0009                          ___altoft 1BFC                  __size_of___ftmul 00B4  
                __size_of___ftsub 001E                  __size_of___fttol 00A5                          ___awtoft 26A9  
           __size_of_set_leds_top 0054                          ___ftpack 1E9B                          _map$2655 00E7  
                        ___lltoft 2715            _preset_programmning_on 01C5                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 00A0                  _setFeedbackState 261B  
                        _exp$2426 013F                          _exp$2671 013C                       _init_timer0 2556  
                     _init_timer2 255D                _delay_time_changed 01CC        __end_of_updateSwitchBypass 1800  
                        __ptext10 1A66                          __ptext11 1C9B                          __ptext20 1F00  
                        __ptext12 26CB                          __ptext21 1D3C                          __ptext13 1843  
                        __ptext30 1BFC                          __ptext22 096E                          __ptext14 25E9  
                        __ptext31 1E3B                          __ptext23 1446                          __ptext15 2601  
                        __ptext40 15A7                          __ptext32 264F                          __ptext24 0A9A  
                        __ptext16 165B                          __ptext41 139D                          __ptext33 266B  
                        __ptext25 114B                          __ptext17 125E                          __ptext50 2596  
                        __ptext42 0878                          __ptext34 26A9                          __ptext26 14F6  
                        __ptext18 1049                          __ptext51 1B28                          __ptext43 1E9B  
                        __ptext35 2715                          __ptext27 1A26                          __ptext19 1F80  
                        __ptext60 2556                          __ptext52 0802                          __ptext44 2587  
                        __ptext36 1C4B                          __ptext28 12F8                          __ptext61 1801  
                        __ptext53 1D8E                          __ptext45 1BB2                          __ptext37 1B6B  
                        __ptext29 18B8                          __ptext62 254E                          __ptext54 187D  
                        __ptext46 27CE                          __ptext38 11D3                          __ptext55 2689  
                        __ptext47 279E                          __ptext39 2566                          __ptext64 1001  
                        __ptext56 26EF                          __ptext48 07FF                          __ptext65 1AA6  
                        __ptext57 276E                          __ptext49 2552                          __ptext66 273F  
                        __ptext58 1AE7                          __ptext67 10C9                          __ptext59 255D  
                        __ptext68 1CEB         __end_of_ReadSavedSettings 0878                  __size_of_wait_ms 0032  
     __size_of_solidring_tactiles 0040                          _ledState 0239                          _pow$2670 014F  
                        _pow$2669 014C                     _presetChannel 01DD                      ??_modulation 0036  
                     _mod_counter 01B8                        trunc@expon 0136                          _init_adc 1801  
                   __size_of_main 03A3                          _init_pwm 1AE7      __size_of_ConfigureOscillator 0004  
                    _set_leds_top 1D8E                          _showSave 25A9                          _num_taps 0058  
           __end_of_scaleiA10kPot 12F8                          int$flags 007E                   ??_resetRingLEDs 00A4  
                 i1set_leds_top@x 0070               __end_of_update_mode 1843                          exp@coeff 2000  
                        _symmetry 01E0                          log@coeff 201E                __end_of_modulation 1AE7  
                      _INTCONbits 000B                       ??_eval_poly 00DF         __size_of_setPresetDisplay 003A  
                     _tap_history 0220                 ??_set_subdivision 013C                          intlevel1 0000  
                 _set_leds_bottom 187D                        _PMCON1bits 0195                   ??_ring_tactiles 00B2  
               __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 0255                        _OSCCONbits 0099  
                    _preset_blink 01C4                    i1_set_leds_top 1001  __size_of_updateSwitchBypassState 0001  
   __size_of_setExpressionDisplay 0018                _scaleiA10kPot$2666 015D                _scaleiA10kPot$2667 0160  
              _scaleiA10kPot$2668 0163          __size_of_setLongTapState 001A                  _read_top_tactile 1C4B  
                    ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 1A26  
                    _CCP10CONbits 061F                 _bottom_push_state 004D        setPresetDisplay@ledChannel 00A6  
          __end_ofi1_set_leds_top 1049  
