

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 13 20:41:28 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x920,80
   111                           	dabs	1,0x8A0,80
   112                           	dabs	1,0x820,80
   113                           	dabs	1,0x7A0,80
   114                           	dabs	1,0x742,46
   115                           	dabs	1,0x720,34
   116                           	dabs	1,0x6A0,80
   117                           	dabs	1,0x620,80
   118                           	dabs	1,0x5BA,54
   119                           	dabs	1,0x2482,0,_sinArray
   120                           	dabs	1,0x238A,0,_modArray
   121                           	dabs	1,0x7E,2
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0110                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  011D                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  018F                     	;# 
   182  0190                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0194                     	;# 
   189  0195                     	;# 
   190  0196                     	;# 
   191  0197                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  020D                     	;# 
   216  020F                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0219                     	;# 
   234  021A                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021D                     	;# 
   238  021E                     	;# 
   239  021F                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  029F                     	;# 
   253  030C                     	;# 
   254  030D                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0318                     	;# 
   260  0318                     	;# 
   261  0319                     	;# 
   262  031A                     	;# 
   263  031C                     	;# 
   264  031C                     	;# 
   265  031D                     	;# 
   266  031E                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  040C                     	;# 
   273  040D                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  048D                     	;# 
   291  0491                     	;# 
   292  0491                     	;# 
   293  0492                     	;# 
   294  0492                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0495                     	;# 
   302  0496                     	;# 
   303  0496                     	;# 
   304  0497                     	;# 
   305  0497                     	;# 
   306  0595                     	;# 
   307  0596                     	;# 
   308  0597                     	;# 
   309  059C                     	;# 
   310  059D                     	;# 
   311  059E                     	;# 
   312  0611                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0614                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0617                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  061A                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061D                     	;# 
   329  061D                     	;# 
   330  061E                     	;# 
   331  061F                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  008F                     	;# 
   377  0090                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0093                     	;# 
   381  0094                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0110                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  011D                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  018F                     	;# 
   403  0190                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  0197                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  020D                     	;# 
   437  020F                     	;# 
   438  0210                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0219                     	;# 
   455  021A                     	;# 
   456  021B                     	;# 
   457  021C                     	;# 
   458  021D                     	;# 
   459  021E                     	;# 
   460  021F                     	;# 
   461  028C                     	;# 
   462  028D                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  029D                     	;# 
   472  029E                     	;# 
   473  029F                     	;# 
   474  030C                     	;# 
   475  030D                     	;# 
   476  0311                     	;# 
   477  0311                     	;# 
   478  0312                     	;# 
   479  0313                     	;# 
   480  0318                     	;# 
   481  0318                     	;# 
   482  0319                     	;# 
   483  031A                     	;# 
   484  031C                     	;# 
   485  031C                     	;# 
   486  031D                     	;# 
   487  031E                     	;# 
   488  038C                     	;# 
   489  038D                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  040C                     	;# 
   494  040D                     	;# 
   495  0411                     	;# 
   496  0411                     	;# 
   497  0412                     	;# 
   498  0413                     	;# 
   499  0414                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  0418                     	;# 
   504  0418                     	;# 
   505  0419                     	;# 
   506  041A                     	;# 
   507  041B                     	;# 
   508  041C                     	;# 
   509  041D                     	;# 
   510  041E                     	;# 
   511  048D                     	;# 
   512  0491                     	;# 
   513  0491                     	;# 
   514  0492                     	;# 
   515  0492                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0494                     	;# 
   520  0494                     	;# 
   521  0495                     	;# 
   522  0495                     	;# 
   523  0496                     	;# 
   524  0496                     	;# 
   525  0497                     	;# 
   526  0497                     	;# 
   527  0595                     	;# 
   528  0596                     	;# 
   529  0597                     	;# 
   530  059C                     	;# 
   531  059D                     	;# 
   532  059E                     	;# 
   533  0611                     	;# 
   534  0611                     	;# 
   535  0612                     	;# 
   536  0613                     	;# 
   537  0614                     	;# 
   538  0614                     	;# 
   539  0615                     	;# 
   540  0616                     	;# 
   541  0617                     	;# 
   542  0617                     	;# 
   543  0618                     	;# 
   544  0619                     	;# 
   545  061A                     	;# 
   546  061A                     	;# 
   547  061B                     	;# 
   548  061C                     	;# 
   549  061D                     	;# 
   550  061D                     	;# 
   551  061E                     	;# 
   552  061F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  008F                     	;# 
   598  0090                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  010F                     	;# 
   617  0110                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018D                     	;# 
   623  018F                     	;# 
   624  0190                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0197                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  020F                     	;# 
   659  0210                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  028C                     	;# 
   683  028D                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  029D                     	;# 
   693  029E                     	;# 
   694  029F                     	;# 
   695  030C                     	;# 
   696  030D                     	;# 
   697  0311                     	;# 
   698  0311                     	;# 
   699  0312                     	;# 
   700  0313                     	;# 
   701  0318                     	;# 
   702  0318                     	;# 
   703  0319                     	;# 
   704  031A                     	;# 
   705  031C                     	;# 
   706  031C                     	;# 
   707  031D                     	;# 
   708  031E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  040C                     	;# 
   715  040D                     	;# 
   716  0411                     	;# 
   717  0411                     	;# 
   718  0412                     	;# 
   719  0413                     	;# 
   720  0414                     	;# 
   721  0415                     	;# 
   722  0416                     	;# 
   723  0417                     	;# 
   724  0418                     	;# 
   725  0418                     	;# 
   726  0419                     	;# 
   727  041A                     	;# 
   728  041B                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  048D                     	;# 
   733  0491                     	;# 
   734  0491                     	;# 
   735  0492                     	;# 
   736  0492                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0494                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0495                     	;# 
   744  0496                     	;# 
   745  0496                     	;# 
   746  0497                     	;# 
   747  0497                     	;# 
   748  0595                     	;# 
   749  0596                     	;# 
   750  0597                     	;# 
   751  059C                     	;# 
   752  059D                     	;# 
   753  059E                     	;# 
   754  0611                     	;# 
   755  0611                     	;# 
   756  0612                     	;# 
   757  0613                     	;# 
   758  0614                     	;# 
   759  0614                     	;# 
   760  0615                     	;# 
   761  0616                     	;# 
   762  0617                     	;# 
   763  0617                     	;# 
   764  0618                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061A                     	;# 
   768  061B                     	;# 
   769  061C                     	;# 
   770  061D                     	;# 
   771  061D                     	;# 
   772  061E                     	;# 
   773  061F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0110                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  011D                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018F                     	;# 
   845  0190                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0197                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  020F                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021E                     	;# 
   902  021F                     	;# 
   903  028C                     	;# 
   904  028D                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  029D                     	;# 
   914  029E                     	;# 
   915  029F                     	;# 
   916  030C                     	;# 
   917  030D                     	;# 
   918  0311                     	;# 
   919  0311                     	;# 
   920  0312                     	;# 
   921  0313                     	;# 
   922  0318                     	;# 
   923  0318                     	;# 
   924  0319                     	;# 
   925  031A                     	;# 
   926  031C                     	;# 
   927  031C                     	;# 
   928  031D                     	;# 
   929  031E                     	;# 
   930  038C                     	;# 
   931  038D                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  040C                     	;# 
   936  040D                     	;# 
   937  0411                     	;# 
   938  0411                     	;# 
   939  0412                     	;# 
   940  0413                     	;# 
   941  0414                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  0418                     	;# 
   946  0418                     	;# 
   947  0419                     	;# 
   948  041A                     	;# 
   949  041B                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  048D                     	;# 
   954  0491                     	;# 
   955  0491                     	;# 
   956  0492                     	;# 
   957  0492                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0494                     	;# 
   962  0494                     	;# 
   963  0495                     	;# 
   964  0495                     	;# 
   965  0496                     	;# 
   966  0496                     	;# 
   967  0497                     	;# 
   968  0497                     	;# 
   969  0595                     	;# 
   970  0596                     	;# 
   971  0597                     	;# 
   972  059C                     	;# 
   973  059D                     	;# 
   974  059E                     	;# 
   975  0611                     	;# 
   976  0611                     	;# 
   977  0612                     	;# 
   978  0613                     	;# 
   979  0614                     	;# 
   980  0614                     	;# 
   981  0615                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061A                     	;# 
   989  061B                     	;# 
   990  061C                     	;# 
   991  061D                     	;# 
   992  061D                     	;# 
   993  061E                     	;# 
   994  061F                     	;# 
   995  0FE4                     	;# 
   996  0FE5                     	;# 
   997  0FE6                     	;# 
   998  0FE7                     	;# 
   999  0FE8                     	;# 
  1000  0FE9                     	;# 
  1001  0FEA                     	;# 
  1002  0FEB                     	;# 
  1003  0FED                     	;# 
  1004  0FEE                     	;# 
  1005  0FEF                     	;# 
  1006  0000                     	;# 
  1007  0001                     	;# 
  1008  0002                     	;# 
  1009  0003                     	;# 
  1010  0004                     	;# 
  1011  0005                     	;# 
  1012  0006                     	;# 
  1013  0007                     	;# 
  1014  0008                     	;# 
  1015  0009                     	;# 
  1016  000A                     	;# 
  1017  000B                     	;# 
  1018  000C                     	;# 
  1019  000D                     	;# 
  1020  000E                     	;# 
  1021  000F                     	;# 
  1022  0010                     	;# 
  1023  0011                     	;# 
  1024  0012                     	;# 
  1025  0013                     	;# 
  1026  0014                     	;# 
  1027  0015                     	;# 
  1028  0016                     	;# 
  1029  0016                     	;# 
  1030  0017                     	;# 
  1031  0018                     	;# 
  1032  0019                     	;# 
  1033  001A                     	;# 
  1034  001B                     	;# 
  1035  001C                     	;# 
  1036  008C                     	;# 
  1037  008D                     	;# 
  1038  008E                     	;# 
  1039  008F                     	;# 
  1040  0090                     	;# 
  1041  0091                     	;# 
  1042  0092                     	;# 
  1043  0093                     	;# 
  1044  0094                     	;# 
  1045  0095                     	;# 
  1046  0096                     	;# 
  1047  0097                     	;# 
  1048  0099                     	;# 
  1049  009A                     	;# 
  1050  009B                     	;# 
  1051  009B                     	;# 
  1052  009C                     	;# 
  1053  009D                     	;# 
  1054  009E                     	;# 
  1055  010C                     	;# 
  1056  010D                     	;# 
  1057  010E                     	;# 
  1058  010F                     	;# 
  1059  0110                     	;# 
  1060  0116                     	;# 
  1061  0117                     	;# 
  1062  011D                     	;# 
  1063  018C                     	;# 
  1064  018D                     	;# 
  1065  018F                     	;# 
  1066  0190                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0194                     	;# 
  1073  0195                     	;# 
  1074  0196                     	;# 
  1075  0197                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  020D                     	;# 
  1100  020F                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0219                     	;# 
  1118  021A                     	;# 
  1119  021B                     	;# 
  1120  021C                     	;# 
  1121  021D                     	;# 
  1122  021E                     	;# 
  1123  021F                     	;# 
  1124  028C                     	;# 
  1125  028D                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0298                     	;# 
  1131  0298                     	;# 
  1132  0299                     	;# 
  1133  029A                     	;# 
  1134  029D                     	;# 
  1135  029E                     	;# 
  1136  029F                     	;# 
  1137  030C                     	;# 
  1138  030D                     	;# 
  1139  0311                     	;# 
  1140  0311                     	;# 
  1141  0312                     	;# 
  1142  0313                     	;# 
  1143  0318                     	;# 
  1144  0318                     	;# 
  1145  0319                     	;# 
  1146  031A                     	;# 
  1147  031C                     	;# 
  1148  031C                     	;# 
  1149  031D                     	;# 
  1150  031E                     	;# 
  1151  038C                     	;# 
  1152  038D                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  040C                     	;# 
  1157  040D                     	;# 
  1158  0411                     	;# 
  1159  0411                     	;# 
  1160  0412                     	;# 
  1161  0413                     	;# 
  1162  0414                     	;# 
  1163  0415                     	;# 
  1164  0416                     	;# 
  1165  0417                     	;# 
  1166  0418                     	;# 
  1167  0418                     	;# 
  1168  0419                     	;# 
  1169  041A                     	;# 
  1170  041B                     	;# 
  1171  041C                     	;# 
  1172  041D                     	;# 
  1173  041E                     	;# 
  1174  048D                     	;# 
  1175  0491                     	;# 
  1176  0491                     	;# 
  1177  0492                     	;# 
  1178  0492                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0494                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0495                     	;# 
  1186  0496                     	;# 
  1187  0496                     	;# 
  1188  0497                     	;# 
  1189  0497                     	;# 
  1190  0595                     	;# 
  1191  0596                     	;# 
  1192  0597                     	;# 
  1193  059C                     	;# 
  1194  059D                     	;# 
  1195  059E                     	;# 
  1196  0611                     	;# 
  1197  0611                     	;# 
  1198  0612                     	;# 
  1199  0613                     	;# 
  1200  0614                     	;# 
  1201  0614                     	;# 
  1202  0615                     	;# 
  1203  0616                     	;# 
  1204  0617                     	;# 
  1205  0617                     	;# 
  1206  0618                     	;# 
  1207  0619                     	;# 
  1208  061A                     	;# 
  1209  061A                     	;# 
  1210  061B                     	;# 
  1211  061C                     	;# 
  1212  061D                     	;# 
  1213  061D                     	;# 
  1214  061E                     	;# 
  1215  061F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  000F                     	;# 
  1243  0010                     	;# 
  1244  0011                     	;# 
  1245  0012                     	;# 
  1246  0013                     	;# 
  1247  0014                     	;# 
  1248  0015                     	;# 
  1249  0016                     	;# 
  1250  0016                     	;# 
  1251  0017                     	;# 
  1252  0018                     	;# 
  1253  0019                     	;# 
  1254  001A                     	;# 
  1255  001B                     	;# 
  1256  001C                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  008F                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0095                     	;# 
  1267  0096                     	;# 
  1268  0097                     	;# 
  1269  0099                     	;# 
  1270  009A                     	;# 
  1271  009B                     	;# 
  1272  009B                     	;# 
  1273  009C                     	;# 
  1274  009D                     	;# 
  1275  009E                     	;# 
  1276  010C                     	;# 
  1277  010D                     	;# 
  1278  010E                     	;# 
  1279  010F                     	;# 
  1280  0110                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  011D                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018F                     	;# 
  1287  0190                     	;# 
  1288  0191                     	;# 
  1289  0191                     	;# 
  1290  0192                     	;# 
  1291  0193                     	;# 
  1292  0193                     	;# 
  1293  0194                     	;# 
  1294  0195                     	;# 
  1295  0196                     	;# 
  1296  0197                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  020F                     	;# 
  1322  0210                     	;# 
  1323  0211                     	;# 
  1324  0211                     	;# 
  1325  0212                     	;# 
  1326  0212                     	;# 
  1327  0213                     	;# 
  1328  0213                     	;# 
  1329  0214                     	;# 
  1330  0214                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0216                     	;# 
  1335  0216                     	;# 
  1336  0217                     	;# 
  1337  0217                     	;# 
  1338  0219                     	;# 
  1339  021A                     	;# 
  1340  021B                     	;# 
  1341  021C                     	;# 
  1342  021D                     	;# 
  1343  021E                     	;# 
  1344  021F                     	;# 
  1345  028C                     	;# 
  1346  028D                     	;# 
  1347  0291                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0293                     	;# 
  1351  0298                     	;# 
  1352  0298                     	;# 
  1353  0299                     	;# 
  1354  029A                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  029F                     	;# 
  1358  030C                     	;# 
  1359  030D                     	;# 
  1360  0311                     	;# 
  1361  0311                     	;# 
  1362  0312                     	;# 
  1363  0313                     	;# 
  1364  0318                     	;# 
  1365  0318                     	;# 
  1366  0319                     	;# 
  1367  031A                     	;# 
  1368  031C                     	;# 
  1369  031C                     	;# 
  1370  031D                     	;# 
  1371  031E                     	;# 
  1372  038C                     	;# 
  1373  038D                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  040C                     	;# 
  1378  040D                     	;# 
  1379  0411                     	;# 
  1380  0411                     	;# 
  1381  0412                     	;# 
  1382  0413                     	;# 
  1383  0414                     	;# 
  1384  0415                     	;# 
  1385  0416                     	;# 
  1386  0417                     	;# 
  1387  0418                     	;# 
  1388  0418                     	;# 
  1389  0419                     	;# 
  1390  041A                     	;# 
  1391  041B                     	;# 
  1392  041C                     	;# 
  1393  041D                     	;# 
  1394  041E                     	;# 
  1395  048D                     	;# 
  1396  0491                     	;# 
  1397  0491                     	;# 
  1398  0492                     	;# 
  1399  0492                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0494                     	;# 
  1404  0494                     	;# 
  1405  0495                     	;# 
  1406  0495                     	;# 
  1407  0496                     	;# 
  1408  0496                     	;# 
  1409  0497                     	;# 
  1410  0497                     	;# 
  1411  0595                     	;# 
  1412  0596                     	;# 
  1413  0597                     	;# 
  1414  059C                     	;# 
  1415  059D                     	;# 
  1416  059E                     	;# 
  1417  0611                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061D                     	;# 
  1434  061D                     	;# 
  1435  061E                     	;# 
  1436  061F                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000D                     	;# 
  1462  000E                     	;# 
  1463  000F                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  008C                     	;# 
  1479  008D                     	;# 
  1480  008E                     	;# 
  1481  008F                     	;# 
  1482  0090                     	;# 
  1483  0091                     	;# 
  1484  0092                     	;# 
  1485  0093                     	;# 
  1486  0094                     	;# 
  1487  0095                     	;# 
  1488  0096                     	;# 
  1489  0097                     	;# 
  1490  0099                     	;# 
  1491  009A                     	;# 
  1492  009B                     	;# 
  1493  009B                     	;# 
  1494  009C                     	;# 
  1495  009D                     	;# 
  1496  009E                     	;# 
  1497  010C                     	;# 
  1498  010D                     	;# 
  1499  010E                     	;# 
  1500  010F                     	;# 
  1501  0110                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  011D                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  018F                     	;# 
  1508  0190                     	;# 
  1509  0191                     	;# 
  1510  0191                     	;# 
  1511  0192                     	;# 
  1512  0193                     	;# 
  1513  0193                     	;# 
  1514  0194                     	;# 
  1515  0195                     	;# 
  1516  0196                     	;# 
  1517  0197                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  020D                     	;# 
  1542  020F                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0219                     	;# 
  1560  021A                     	;# 
  1561  021B                     	;# 
  1562  021C                     	;# 
  1563  021D                     	;# 
  1564  021E                     	;# 
  1565  021F                     	;# 
  1566  028C                     	;# 
  1567  028D                     	;# 
  1568  0291                     	;# 
  1569  0291                     	;# 
  1570  0292                     	;# 
  1571  0293                     	;# 
  1572  0298                     	;# 
  1573  0298                     	;# 
  1574  0299                     	;# 
  1575  029A                     	;# 
  1576  029D                     	;# 
  1577  029E                     	;# 
  1578  029F                     	;# 
  1579  030C                     	;# 
  1580  030D                     	;# 
  1581  0311                     	;# 
  1582  0311                     	;# 
  1583  0312                     	;# 
  1584  0313                     	;# 
  1585  0318                     	;# 
  1586  0318                     	;# 
  1587  0319                     	;# 
  1588  031A                     	;# 
  1589  031C                     	;# 
  1590  031C                     	;# 
  1591  031D                     	;# 
  1592  031E                     	;# 
  1593  038C                     	;# 
  1594  038D                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  040C                     	;# 
  1599  040D                     	;# 
  1600  0411                     	;# 
  1601  0411                     	;# 
  1602  0412                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  0418                     	;# 
  1610  0419                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  048D                     	;# 
  1617  0491                     	;# 
  1618  0491                     	;# 
  1619  0492                     	;# 
  1620  0492                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0494                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0495                     	;# 
  1628  0496                     	;# 
  1629  0496                     	;# 
  1630  0497                     	;# 
  1631  0497                     	;# 
  1632  0595                     	;# 
  1633  0596                     	;# 
  1634  0597                     	;# 
  1635  059C                     	;# 
  1636  059D                     	;# 
  1637  059E                     	;# 
  1638  0611                     	;# 
  1639  0611                     	;# 
  1640  0612                     	;# 
  1641  0613                     	;# 
  1642  0614                     	;# 
  1643  0614                     	;# 
  1644  0615                     	;# 
  1645  0616                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  061D                     	;# 
  1655  061D                     	;# 
  1656  061E                     	;# 
  1657  061F                     	;# 
  1658  0FE4                     	;# 
  1659  0FE5                     	;# 
  1660  0FE6                     	;# 
  1661  0FE7                     	;# 
  1662  0FE8                     	;# 
  1663  0FE9                     	;# 
  1664  0FEA                     	;# 
  1665  0FEB                     	;# 
  1666  0FED                     	;# 
  1667  0FEE                     	;# 
  1668  0FEF                     	;# 
  1669  0000                     	;# 
  1670  0001                     	;# 
  1671  0002                     	;# 
  1672  0003                     	;# 
  1673  0004                     	;# 
  1674  0005                     	;# 
  1675  0006                     	;# 
  1676  0007                     	;# 
  1677  0008                     	;# 
  1678  0009                     	;# 
  1679  000A                     	;# 
  1680  000B                     	;# 
  1681  000C                     	;# 
  1682  000D                     	;# 
  1683  000E                     	;# 
  1684  000F                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  008C                     	;# 
  1700  008D                     	;# 
  1701  008E                     	;# 
  1702  008F                     	;# 
  1703  0090                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0093                     	;# 
  1707  0094                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0099                     	;# 
  1712  009A                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  010F                     	;# 
  1722  0110                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  011D                     	;# 
  1726  018C                     	;# 
  1727  018D                     	;# 
  1728  018F                     	;# 
  1729  0190                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0197                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028D                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0298                     	;# 
  1794  0298                     	;# 
  1795  0299                     	;# 
  1796  029A                     	;# 
  1797  029D                     	;# 
  1798  029E                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  0311                     	;# 
  1803  0311                     	;# 
  1804  0312                     	;# 
  1805  0313                     	;# 
  1806  0318                     	;# 
  1807  0318                     	;# 
  1808  0319                     	;# 
  1809  031A                     	;# 
  1810  031C                     	;# 
  1811  031C                     	;# 
  1812  031D                     	;# 
  1813  031E                     	;# 
  1814  038C                     	;# 
  1815  038D                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  040C                     	;# 
  1820  040D                     	;# 
  1821  0411                     	;# 
  1822  0411                     	;# 
  1823  0412                     	;# 
  1824  0413                     	;# 
  1825  0414                     	;# 
  1826  0415                     	;# 
  1827  0416                     	;# 
  1828  0417                     	;# 
  1829  0418                     	;# 
  1830  0418                     	;# 
  1831  0419                     	;# 
  1832  041A                     	;# 
  1833  041B                     	;# 
  1834  041C                     	;# 
  1835  041D                     	;# 
  1836  041E                     	;# 
  1837  048D                     	;# 
  1838  0491                     	;# 
  1839  0491                     	;# 
  1840  0492                     	;# 
  1841  0492                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0494                     	;# 
  1846  0494                     	;# 
  1847  0495                     	;# 
  1848  0495                     	;# 
  1849  0496                     	;# 
  1850  0496                     	;# 
  1851  0497                     	;# 
  1852  0497                     	;# 
  1853  0595                     	;# 
  1854  0596                     	;# 
  1855  0597                     	;# 
  1856  059C                     	;# 
  1857  059D                     	;# 
  1858  059E                     	;# 
  1859  0611                     	;# 
  1860  0611                     	;# 
  1861  0612                     	;# 
  1862  0613                     	;# 
  1863  0614                     	;# 
  1864  0614                     	;# 
  1865  0615                     	;# 
  1866  0616                     	;# 
  1867  0617                     	;# 
  1868  0617                     	;# 
  1869  0618                     	;# 
  1870  0619                     	;# 
  1871  061A                     	;# 
  1872  061A                     	;# 
  1873  061B                     	;# 
  1874  061C                     	;# 
  1875  061D                     	;# 
  1876  061D                     	;# 
  1877  061E                     	;# 
  1878  061F                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  000F                     	;# 
  1906  0010                     	;# 
  1907  0011                     	;# 
  1908  0012                     	;# 
  1909  0013                     	;# 
  1910  0014                     	;# 
  1911  0015                     	;# 
  1912  0016                     	;# 
  1913  0016                     	;# 
  1914  0017                     	;# 
  1915  0018                     	;# 
  1916  0019                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  008C                     	;# 
  1921  008D                     	;# 
  1922  008E                     	;# 
  1923  008F                     	;# 
  1924  0090                     	;# 
  1925  0091                     	;# 
  1926  0092                     	;# 
  1927  0093                     	;# 
  1928  0094                     	;# 
  1929  0095                     	;# 
  1930  0096                     	;# 
  1931  0097                     	;# 
  1932  0099                     	;# 
  1933  009A                     	;# 
  1934  009B                     	;# 
  1935  009B                     	;# 
  1936  009C                     	;# 
  1937  009D                     	;# 
  1938  009E                     	;# 
  1939  010C                     	;# 
  1940  010D                     	;# 
  1941  010E                     	;# 
  1942  010F                     	;# 
  1943  0110                     	;# 
  1944  0116                     	;# 
  1945  0117                     	;# 
  1946  011D                     	;# 
  1947  018C                     	;# 
  1948  018D                     	;# 
  1949  018F                     	;# 
  1950  0190                     	;# 
  1951  0191                     	;# 
  1952  0191                     	;# 
  1953  0192                     	;# 
  1954  0193                     	;# 
  1955  0193                     	;# 
  1956  0194                     	;# 
  1957  0195                     	;# 
  1958  0196                     	;# 
  1959  0197                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  020D                     	;# 
  1984  020F                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0219                     	;# 
  2002  021A                     	;# 
  2003  021B                     	;# 
  2004  021C                     	;# 
  2005  021D                     	;# 
  2006  021E                     	;# 
  2007  021F                     	;# 
  2008  028C                     	;# 
  2009  028D                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  029D                     	;# 
  2019  029E                     	;# 
  2020  029F                     	;# 
  2021  030C                     	;# 
  2022  030D                     	;# 
  2023  0311                     	;# 
  2024  0311                     	;# 
  2025  0312                     	;# 
  2026  0313                     	;# 
  2027  0318                     	;# 
  2028  0318                     	;# 
  2029  0319                     	;# 
  2030  031A                     	;# 
  2031  031C                     	;# 
  2032  031C                     	;# 
  2033  031D                     	;# 
  2034  031E                     	;# 
  2035  038C                     	;# 
  2036  038D                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  040C                     	;# 
  2041  040D                     	;# 
  2042  0411                     	;# 
  2043  0411                     	;# 
  2044  0412                     	;# 
  2045  0413                     	;# 
  2046  0414                     	;# 
  2047  0415                     	;# 
  2048  0416                     	;# 
  2049  0417                     	;# 
  2050  0418                     	;# 
  2051  0418                     	;# 
  2052  0419                     	;# 
  2053  041A                     	;# 
  2054  041B                     	;# 
  2055  041C                     	;# 
  2056  041D                     	;# 
  2057  041E                     	;# 
  2058  048D                     	;# 
  2059  0491                     	;# 
  2060  0491                     	;# 
  2061  0492                     	;# 
  2062  0492                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0494                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0495                     	;# 
  2070  0496                     	;# 
  2071  0496                     	;# 
  2072  0497                     	;# 
  2073  0497                     	;# 
  2074  0595                     	;# 
  2075  0596                     	;# 
  2076  0597                     	;# 
  2077  059C                     	;# 
  2078  059D                     	;# 
  2079  059E                     	;# 
  2080  0611                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  0614                     	;# 
  2086  0615                     	;# 
  2087  0616                     	;# 
  2088  0617                     	;# 
  2089  0617                     	;# 
  2090  0618                     	;# 
  2091  0619                     	;# 
  2092  061A                     	;# 
  2093  061A                     	;# 
  2094  061B                     	;# 
  2095  061C                     	;# 
  2096  061D                     	;# 
  2097  061D                     	;# 
  2098  061E                     	;# 
  2099  061F                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111  0000                     	;# 
  2112  0001                     	;# 
  2113  0002                     	;# 
  2114  0003                     	;# 
  2115  0004                     	;# 
  2116  0005                     	;# 
  2117  0006                     	;# 
  2118  0007                     	;# 
  2119  0008                     	;# 
  2120  0009                     	;# 
  2121  000A                     	;# 
  2122  000B                     	;# 
  2123  000C                     	;# 
  2124  000D                     	;# 
  2125  000E                     	;# 
  2126  000F                     	;# 
  2127  0010                     	;# 
  2128  0011                     	;# 
  2129  0012                     	;# 
  2130  0013                     	;# 
  2131  0014                     	;# 
  2132  0015                     	;# 
  2133  0016                     	;# 
  2134  0016                     	;# 
  2135  0017                     	;# 
  2136  0018                     	;# 
  2137  0019                     	;# 
  2138  001A                     	;# 
  2139  001B                     	;# 
  2140  001C                     	;# 
  2141  008C                     	;# 
  2142  008D                     	;# 
  2143  008E                     	;# 
  2144  008F                     	;# 
  2145  0090                     	;# 
  2146  0091                     	;# 
  2147  0092                     	;# 
  2148  0093                     	;# 
  2149  0094                     	;# 
  2150  0095                     	;# 
  2151  0096                     	;# 
  2152  0097                     	;# 
  2153  0099                     	;# 
  2154  009A                     	;# 
  2155  009B                     	;# 
  2156  009B                     	;# 
  2157  009C                     	;# 
  2158  009D                     	;# 
  2159  009E                     	;# 
  2160  010C                     	;# 
  2161  010D                     	;# 
  2162  010E                     	;# 
  2163  010F                     	;# 
  2164  0110                     	;# 
  2165  0116                     	;# 
  2166  0117                     	;# 
  2167  011D                     	;# 
  2168  018C                     	;# 
  2169  018D                     	;# 
  2170  018F                     	;# 
  2171  0190                     	;# 
  2172  0191                     	;# 
  2173  0191                     	;# 
  2174  0192                     	;# 
  2175  0193                     	;# 
  2176  0193                     	;# 
  2177  0194                     	;# 
  2178  0195                     	;# 
  2179  0196                     	;# 
  2180  0197                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  020D                     	;# 
  2205  020F                     	;# 
  2206  0210                     	;# 
  2207  0211                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0212                     	;# 
  2211  0213                     	;# 
  2212  0213                     	;# 
  2213  0214                     	;# 
  2214  0214                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0216                     	;# 
  2219  0216                     	;# 
  2220  0217                     	;# 
  2221  0217                     	;# 
  2222  0219                     	;# 
  2223  021A                     	;# 
  2224  021B                     	;# 
  2225  021C                     	;# 
  2226  021D                     	;# 
  2227  021E                     	;# 
  2228  021F                     	;# 
  2229  028C                     	;# 
  2230  028D                     	;# 
  2231  0291                     	;# 
  2232  0291                     	;# 
  2233  0292                     	;# 
  2234  0293                     	;# 
  2235  0298                     	;# 
  2236  0298                     	;# 
  2237  0299                     	;# 
  2238  029A                     	;# 
  2239  029D                     	;# 
  2240  029E                     	;# 
  2241  029F                     	;# 
  2242  030C                     	;# 
  2243  030D                     	;# 
  2244  0311                     	;# 
  2245  0311                     	;# 
  2246  0312                     	;# 
  2247  0313                     	;# 
  2248  0318                     	;# 
  2249  0318                     	;# 
  2250  0319                     	;# 
  2251  031A                     	;# 
  2252  031C                     	;# 
  2253  031C                     	;# 
  2254  031D                     	;# 
  2255  031E                     	;# 
  2256  038C                     	;# 
  2257  038D                     	;# 
  2258  0394                     	;# 
  2259  0395                     	;# 
  2260  0396                     	;# 
  2261  040C                     	;# 
  2262  040D                     	;# 
  2263  0411                     	;# 
  2264  0411                     	;# 
  2265  0412                     	;# 
  2266  0413                     	;# 
  2267  0414                     	;# 
  2268  0415                     	;# 
  2269  0416                     	;# 
  2270  0417                     	;# 
  2271  0418                     	;# 
  2272  0418                     	;# 
  2273  0419                     	;# 
  2274  041A                     	;# 
  2275  041B                     	;# 
  2276  041C                     	;# 
  2277  041D                     	;# 
  2278  041E                     	;# 
  2279  048D                     	;# 
  2280  0491                     	;# 
  2281  0491                     	;# 
  2282  0492                     	;# 
  2283  0492                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0494                     	;# 
  2288  0494                     	;# 
  2289  0495                     	;# 
  2290  0495                     	;# 
  2291  0496                     	;# 
  2292  0496                     	;# 
  2293  0497                     	;# 
  2294  0497                     	;# 
  2295  0595                     	;# 
  2296  0596                     	;# 
  2297  0597                     	;# 
  2298  059C                     	;# 
  2299  059D                     	;# 
  2300  059E                     	;# 
  2301  0611                     	;# 
  2302  0611                     	;# 
  2303  0612                     	;# 
  2304  0613                     	;# 
  2305  0614                     	;# 
  2306  0614                     	;# 
  2307  0615                     	;# 
  2308  0616                     	;# 
  2309  0617                     	;# 
  2310  0617                     	;# 
  2311  0618                     	;# 
  2312  0619                     	;# 
  2313  061A                     	;# 
  2314  061A                     	;# 
  2315  061B                     	;# 
  2316  061C                     	;# 
  2317  061D                     	;# 
  2318  061D                     	;# 
  2319  061E                     	;# 
  2320  061F                     	;# 
  2321  0FE4                     	;# 
  2322  0FE5                     	;# 
  2323  0FE6                     	;# 
  2324  0FE7                     	;# 
  2325  0FE8                     	;# 
  2326  0FE9                     	;# 
  2327  0FEA                     	;# 
  2328  0FEB                     	;# 
  2329  0FED                     	;# 
  2330  0FEE                     	;# 
  2331  0FEF                     	;# 
  2332  0000                     	;# 
  2333  0001                     	;# 
  2334  0002                     	;# 
  2335  0003                     	;# 
  2336  0004                     	;# 
  2337  0005                     	;# 
  2338  0006                     	;# 
  2339  0007                     	;# 
  2340  0008                     	;# 
  2341  0009                     	;# 
  2342  000A                     	;# 
  2343  000B                     	;# 
  2344  000C                     	;# 
  2345  000D                     	;# 
  2346  000E                     	;# 
  2347  000F                     	;# 
  2348  0010                     	;# 
  2349  0011                     	;# 
  2350  0012                     	;# 
  2351  0013                     	;# 
  2352  0014                     	;# 
  2353  0015                     	;# 
  2354  0016                     	;# 
  2355  0016                     	;# 
  2356  0017                     	;# 
  2357  0018                     	;# 
  2358  0019                     	;# 
  2359  001A                     	;# 
  2360  001B                     	;# 
  2361  001C                     	;# 
  2362  008C                     	;# 
  2363  008D                     	;# 
  2364  008E                     	;# 
  2365  008F                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0097                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  010C                     	;# 
  2382  010D                     	;# 
  2383  010E                     	;# 
  2384  010F                     	;# 
  2385  0110                     	;# 
  2386  0116                     	;# 
  2387  0117                     	;# 
  2388  011D                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018F                     	;# 
  2392  0190                     	;# 
  2393  0191                     	;# 
  2394  0191                     	;# 
  2395  0192                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0197                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  020D                     	;# 
  2426  020F                     	;# 
  2427  0210                     	;# 
  2428  0211                     	;# 
  2429  0211                     	;# 
  2430  0212                     	;# 
  2431  0212                     	;# 
  2432  0213                     	;# 
  2433  0213                     	;# 
  2434  0214                     	;# 
  2435  0214                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0216                     	;# 
  2440  0216                     	;# 
  2441  0217                     	;# 
  2442  0217                     	;# 
  2443  0219                     	;# 
  2444  021A                     	;# 
  2445  021B                     	;# 
  2446  021C                     	;# 
  2447  021D                     	;# 
  2448  021E                     	;# 
  2449  021F                     	;# 
  2450  028C                     	;# 
  2451  028D                     	;# 
  2452  0291                     	;# 
  2453  0291                     	;# 
  2454  0292                     	;# 
  2455  0293                     	;# 
  2456  0298                     	;# 
  2457  0298                     	;# 
  2458  0299                     	;# 
  2459  029A                     	;# 
  2460  029D                     	;# 
  2461  029E                     	;# 
  2462  029F                     	;# 
  2463  030C                     	;# 
  2464  030D                     	;# 
  2465  0311                     	;# 
  2466  0311                     	;# 
  2467  0312                     	;# 
  2468  0313                     	;# 
  2469  0318                     	;# 
  2470  0318                     	;# 
  2471  0319                     	;# 
  2472  031A                     	;# 
  2473  031C                     	;# 
  2474  031C                     	;# 
  2475  031D                     	;# 
  2476  031E                     	;# 
  2477  038C                     	;# 
  2478  038D                     	;# 
  2479  0394                     	;# 
  2480  0395                     	;# 
  2481  0396                     	;# 
  2482  040C                     	;# 
  2483  040D                     	;# 
  2484  0411                     	;# 
  2485  0411                     	;# 
  2486  0412                     	;# 
  2487  0413                     	;# 
  2488  0414                     	;# 
  2489  0415                     	;# 
  2490  0416                     	;# 
  2491  0417                     	;# 
  2492  0418                     	;# 
  2493  0418                     	;# 
  2494  0419                     	;# 
  2495  041A                     	;# 
  2496  041B                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  048D                     	;# 
  2501  0491                     	;# 
  2502  0491                     	;# 
  2503  0492                     	;# 
  2504  0492                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0494                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0495                     	;# 
  2512  0496                     	;# 
  2513  0496                     	;# 
  2514  0497                     	;# 
  2515  0497                     	;# 
  2516  0595                     	;# 
  2517  0596                     	;# 
  2518  0597                     	;# 
  2519  059C                     	;# 
  2520  059D                     	;# 
  2521  059E                     	;# 
  2522  0611                     	;# 
  2523  0611                     	;# 
  2524  0612                     	;# 
  2525  0613                     	;# 
  2526  0614                     	;# 
  2527  0614                     	;# 
  2528  0615                     	;# 
  2529  0616                     	;# 
  2530  0617                     	;# 
  2531  0617                     	;# 
  2532  0618                     	;# 
  2533  0619                     	;# 
  2534  061A                     	;# 
  2535  061A                     	;# 
  2536  061B                     	;# 
  2537  061C                     	;# 
  2538  061D                     	;# 
  2539  061D                     	;# 
  2540  061E                     	;# 
  2541  061F                     	;# 
  2542  0FE4                     	;# 
  2543  0FE5                     	;# 
  2544  0FE6                     	;# 
  2545  0FE7                     	;# 
  2546  0FE8                     	;# 
  2547  0FE9                     	;# 
  2548  0FEA                     	;# 
  2549  0FEB                     	;# 
  2550  0FED                     	;# 
  2551  0FEE                     	;# 
  2552  0FEF                     	;# 
  2553  0000                     	;# 
  2554  0001                     	;# 
  2555  0002                     	;# 
  2556  0003                     	;# 
  2557  0004                     	;# 
  2558  0005                     	;# 
  2559  0006                     	;# 
  2560  0007                     	;# 
  2561  0008                     	;# 
  2562  0009                     	;# 
  2563  000A                     	;# 
  2564  000B                     	;# 
  2565  000C                     	;# 
  2566  000D                     	;# 
  2567  000E                     	;# 
  2568  000F                     	;# 
  2569  0010                     	;# 
  2570  0011                     	;# 
  2571  0012                     	;# 
  2572  0013                     	;# 
  2573  0014                     	;# 
  2574  0015                     	;# 
  2575  0016                     	;# 
  2576  0016                     	;# 
  2577  0017                     	;# 
  2578  0018                     	;# 
  2579  0019                     	;# 
  2580  001A                     	;# 
  2581  001B                     	;# 
  2582  001C                     	;# 
  2583  008C                     	;# 
  2584  008D                     	;# 
  2585  008E                     	;# 
  2586  008F                     	;# 
  2587  0090                     	;# 
  2588  0091                     	;# 
  2589  0092                     	;# 
  2590  0093                     	;# 
  2591  0094                     	;# 
  2592  0095                     	;# 
  2593  0096                     	;# 
  2594  0097                     	;# 
  2595  0099                     	;# 
  2596  009A                     	;# 
  2597  009B                     	;# 
  2598  009B                     	;# 
  2599  009C                     	;# 
  2600  009D                     	;# 
  2601  009E                     	;# 
  2602  010C                     	;# 
  2603  010D                     	;# 
  2604  010E                     	;# 
  2605  010F                     	;# 
  2606  0110                     	;# 
  2607  0116                     	;# 
  2608  0117                     	;# 
  2609  011D                     	;# 
  2610  018C                     	;# 
  2611  018D                     	;# 
  2612  018F                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0194                     	;# 
  2620  0195                     	;# 
  2621  0196                     	;# 
  2622  0197                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  020D                     	;# 
  2647  020F                     	;# 
  2648  0210                     	;# 
  2649  0211                     	;# 
  2650  0211                     	;# 
  2651  0212                     	;# 
  2652  0212                     	;# 
  2653  0213                     	;# 
  2654  0213                     	;# 
  2655  0214                     	;# 
  2656  0214                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0216                     	;# 
  2661  0216                     	;# 
  2662  0217                     	;# 
  2663  0217                     	;# 
  2664  0219                     	;# 
  2665  021A                     	;# 
  2666  021B                     	;# 
  2667  021C                     	;# 
  2668  021D                     	;# 
  2669  021E                     	;# 
  2670  021F                     	;# 
  2671  028C                     	;# 
  2672  028D                     	;# 
  2673  0291                     	;# 
  2674  0291                     	;# 
  2675  0292                     	;# 
  2676  0293                     	;# 
  2677  0298                     	;# 
  2678  0298                     	;# 
  2679  0299                     	;# 
  2680  029A                     	;# 
  2681  029D                     	;# 
  2682  029E                     	;# 
  2683  029F                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  0311                     	;# 
  2687  0311                     	;# 
  2688  0312                     	;# 
  2689  0313                     	;# 
  2690  0318                     	;# 
  2691  0318                     	;# 
  2692  0319                     	;# 
  2693  031A                     	;# 
  2694  031C                     	;# 
  2695  031C                     	;# 
  2696  031D                     	;# 
  2697  031E                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  0394                     	;# 
  2701  0395                     	;# 
  2702  0396                     	;# 
  2703  040C                     	;# 
  2704  040D                     	;# 
  2705  0411                     	;# 
  2706  0411                     	;# 
  2707  0412                     	;# 
  2708  0413                     	;# 
  2709  0414                     	;# 
  2710  0415                     	;# 
  2711  0416                     	;# 
  2712  0417                     	;# 
  2713  0418                     	;# 
  2714  0418                     	;# 
  2715  0419                     	;# 
  2716  041A                     	;# 
  2717  041B                     	;# 
  2718  041C                     	;# 
  2719  041D                     	;# 
  2720  041E                     	;# 
  2721  048D                     	;# 
  2722  0491                     	;# 
  2723  0491                     	;# 
  2724  0492                     	;# 
  2725  0492                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0494                     	;# 
  2730  0494                     	;# 
  2731  0495                     	;# 
  2732  0495                     	;# 
  2733  0496                     	;# 
  2734  0496                     	;# 
  2735  0497                     	;# 
  2736  0497                     	;# 
  2737  0595                     	;# 
  2738  0596                     	;# 
  2739  0597                     	;# 
  2740  059C                     	;# 
  2741  059D                     	;# 
  2742  059E                     	;# 
  2743  0611                     	;# 
  2744  0611                     	;# 
  2745  0612                     	;# 
  2746  0613                     	;# 
  2747  0614                     	;# 
  2748  0614                     	;# 
  2749  0615                     	;# 
  2750  0616                     	;# 
  2751  0617                     	;# 
  2752  0617                     	;# 
  2753  0618                     	;# 
  2754  0619                     	;# 
  2755  061A                     	;# 
  2756  061A                     	;# 
  2757  061B                     	;# 
  2758  061C                     	;# 
  2759  061D                     	;# 
  2760  061D                     	;# 
  2761  061E                     	;# 
  2762  061F                     	;# 
  2763  0FE4                     	;# 
  2764  0FE5                     	;# 
  2765  0FE6                     	;# 
  2766  0FE7                     	;# 
  2767  0FE8                     	;# 
  2768  0FE9                     	;# 
  2769  0FEA                     	;# 
  2770  0FEB                     	;# 
  2771  0FED                     	;# 
  2772  0FEE                     	;# 
  2773  0FEF                     	;# 
  2774  0000                     	;# 
  2775  0001                     	;# 
  2776  0002                     	;# 
  2777  0003                     	;# 
  2778  0004                     	;# 
  2779  0005                     	;# 
  2780  0006                     	;# 
  2781  0007                     	;# 
  2782  0008                     	;# 
  2783  0009                     	;# 
  2784  000A                     	;# 
  2785  000B                     	;# 
  2786  000C                     	;# 
  2787  000D                     	;# 
  2788  000E                     	;# 
  2789  000F                     	;# 
  2790  0010                     	;# 
  2791  0011                     	;# 
  2792  0012                     	;# 
  2793  0013                     	;# 
  2794  0014                     	;# 
  2795  0015                     	;# 
  2796  0016                     	;# 
  2797  0016                     	;# 
  2798  0017                     	;# 
  2799  0018                     	;# 
  2800  0019                     	;# 
  2801  001A                     	;# 
  2802  001B                     	;# 
  2803  001C                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  008F                     	;# 
  2808  0090                     	;# 
  2809  0091                     	;# 
  2810  0092                     	;# 
  2811  0093                     	;# 
  2812  0094                     	;# 
  2813  0095                     	;# 
  2814  0096                     	;# 
  2815  0097                     	;# 
  2816  0099                     	;# 
  2817  009A                     	;# 
  2818  009B                     	;# 
  2819  009B                     	;# 
  2820  009C                     	;# 
  2821  009D                     	;# 
  2822  009E                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  010F                     	;# 
  2827  0110                     	;# 
  2828  0116                     	;# 
  2829  0117                     	;# 
  2830  011D                     	;# 
  2831  018C                     	;# 
  2832  018D                     	;# 
  2833  018F                     	;# 
  2834  0190                     	;# 
  2835  0191                     	;# 
  2836  0191                     	;# 
  2837  0192                     	;# 
  2838  0193                     	;# 
  2839  0193                     	;# 
  2840  0194                     	;# 
  2841  0195                     	;# 
  2842  0196                     	;# 
  2843  0197                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  020D                     	;# 
  2868  020F                     	;# 
  2869  0210                     	;# 
  2870  0211                     	;# 
  2871  0211                     	;# 
  2872  0212                     	;# 
  2873  0212                     	;# 
  2874  0213                     	;# 
  2875  0213                     	;# 
  2876  0214                     	;# 
  2877  0214                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0216                     	;# 
  2882  0216                     	;# 
  2883  0217                     	;# 
  2884  0217                     	;# 
  2885  0219                     	;# 
  2886  021A                     	;# 
  2887  021B                     	;# 
  2888  021C                     	;# 
  2889  021D                     	;# 
  2890  021E                     	;# 
  2891  021F                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0298                     	;# 
  2899  0298                     	;# 
  2900  0299                     	;# 
  2901  029A                     	;# 
  2902  029D                     	;# 
  2903  029E                     	;# 
  2904  029F                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  0311                     	;# 
  2908  0311                     	;# 
  2909  0312                     	;# 
  2910  0313                     	;# 
  2911  0318                     	;# 
  2912  0318                     	;# 
  2913  0319                     	;# 
  2914  031A                     	;# 
  2915  031C                     	;# 
  2916  031C                     	;# 
  2917  031D                     	;# 
  2918  031E                     	;# 
  2919  038C                     	;# 
  2920  038D                     	;# 
  2921  0394                     	;# 
  2922  0395                     	;# 
  2923  0396                     	;# 
  2924  040C                     	;# 
  2925  040D                     	;# 
  2926  0411                     	;# 
  2927  0411                     	;# 
  2928  0412                     	;# 
  2929  0413                     	;# 
  2930  0414                     	;# 
  2931  0415                     	;# 
  2932  0416                     	;# 
  2933  0417                     	;# 
  2934  0418                     	;# 
  2935  0418                     	;# 
  2936  0419                     	;# 
  2937  041A                     	;# 
  2938  041B                     	;# 
  2939  041C                     	;# 
  2940  041D                     	;# 
  2941  041E                     	;# 
  2942  048D                     	;# 
  2943  0491                     	;# 
  2944  0491                     	;# 
  2945  0492                     	;# 
  2946  0492                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0494                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0495                     	;# 
  2954  0496                     	;# 
  2955  0496                     	;# 
  2956  0497                     	;# 
  2957  0497                     	;# 
  2958  0595                     	;# 
  2959  0596                     	;# 
  2960  0597                     	;# 
  2961  059C                     	;# 
  2962  059D                     	;# 
  2963  059E                     	;# 
  2964  0611                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0614                     	;# 
  2970  0615                     	;# 
  2971  0616                     	;# 
  2972  0617                     	;# 
  2973  0617                     	;# 
  2974  0618                     	;# 
  2975  0619                     	;# 
  2976  061A                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061D                     	;# 
  2982  061E                     	;# 
  2983  061F                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  008C                     	;# 
  3026  008D                     	;# 
  3027  008E                     	;# 
  3028  008F                     	;# 
  3029  0090                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0099                     	;# 
  3038  009A                     	;# 
  3039  009B                     	;# 
  3040  009B                     	;# 
  3041  009C                     	;# 
  3042  009D                     	;# 
  3043  009E                     	;# 
  3044  010C                     	;# 
  3045  010D                     	;# 
  3046  010E                     	;# 
  3047  010F                     	;# 
  3048  0110                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  011D                     	;# 
  3052  018C                     	;# 
  3053  018D                     	;# 
  3054  018F                     	;# 
  3055  0190                     	;# 
  3056  0191                     	;# 
  3057  0191                     	;# 
  3058  0192                     	;# 
  3059  0193                     	;# 
  3060  0193                     	;# 
  3061  0194                     	;# 
  3062  0195                     	;# 
  3063  0196                     	;# 
  3064  0197                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  020D                     	;# 
  3089  020F                     	;# 
  3090  0210                     	;# 
  3091  0211                     	;# 
  3092  0211                     	;# 
  3093  0212                     	;# 
  3094  0212                     	;# 
  3095  0213                     	;# 
  3096  0213                     	;# 
  3097  0214                     	;# 
  3098  0214                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0216                     	;# 
  3103  0216                     	;# 
  3104  0217                     	;# 
  3105  0217                     	;# 
  3106  0219                     	;# 
  3107  021A                     	;# 
  3108  021B                     	;# 
  3109  021C                     	;# 
  3110  021D                     	;# 
  3111  021E                     	;# 
  3112  021F                     	;# 
  3113  028C                     	;# 
  3114  028D                     	;# 
  3115  0291                     	;# 
  3116  0291                     	;# 
  3117  0292                     	;# 
  3118  0293                     	;# 
  3119  0298                     	;# 
  3120  0298                     	;# 
  3121  0299                     	;# 
  3122  029A                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  029F                     	;# 
  3126  030C                     	;# 
  3127  030D                     	;# 
  3128  0311                     	;# 
  3129  0311                     	;# 
  3130  0312                     	;# 
  3131  0313                     	;# 
  3132  0318                     	;# 
  3133  0318                     	;# 
  3134  0319                     	;# 
  3135  031A                     	;# 
  3136  031C                     	;# 
  3137  031C                     	;# 
  3138  031D                     	;# 
  3139  031E                     	;# 
  3140  038C                     	;# 
  3141  038D                     	;# 
  3142  0394                     	;# 
  3143  0395                     	;# 
  3144  0396                     	;# 
  3145  040C                     	;# 
  3146  040D                     	;# 
  3147  0411                     	;# 
  3148  0411                     	;# 
  3149  0412                     	;# 
  3150  0413                     	;# 
  3151  0414                     	;# 
  3152  0415                     	;# 
  3153  0416                     	;# 
  3154  0417                     	;# 
  3155  0418                     	;# 
  3156  0418                     	;# 
  3157  0419                     	;# 
  3158  041A                     	;# 
  3159  041B                     	;# 
  3160  041C                     	;# 
  3161  041D                     	;# 
  3162  041E                     	;# 
  3163  048D                     	;# 
  3164  0491                     	;# 
  3165  0491                     	;# 
  3166  0492                     	;# 
  3167  0492                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0494                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0495                     	;# 
  3175  0496                     	;# 
  3176  0496                     	;# 
  3177  0497                     	;# 
  3178  0497                     	;# 
  3179  0595                     	;# 
  3180  0596                     	;# 
  3181  0597                     	;# 
  3182  059C                     	;# 
  3183  059D                     	;# 
  3184  059E                     	;# 
  3185  0611                     	;# 
  3186  0611                     	;# 
  3187  0612                     	;# 
  3188  0613                     	;# 
  3189  0614                     	;# 
  3190  0614                     	;# 
  3191  0615                     	;# 
  3192  0616                     	;# 
  3193  0617                     	;# 
  3194  0617                     	;# 
  3195  0618                     	;# 
  3196  0619                     	;# 
  3197  061A                     	;# 
  3198  061A                     	;# 
  3199  061B                     	;# 
  3200  061C                     	;# 
  3201  061D                     	;# 
  3202  061D                     	;# 
  3203  061E                     	;# 
  3204  061F                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  000F                     	;# 
  3232  0010                     	;# 
  3233  0011                     	;# 
  3234  0012                     	;# 
  3235  0013                     	;# 
  3236  0014                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  001A                     	;# 
  3244  001B                     	;# 
  3245  001C                     	;# 
  3246  008C                     	;# 
  3247  008D                     	;# 
  3248  008E                     	;# 
  3249  008F                     	;# 
  3250  0090                     	;# 
  3251  0091                     	;# 
  3252  0092                     	;# 
  3253  0093                     	;# 
  3254  0094                     	;# 
  3255  0095                     	;# 
  3256  0096                     	;# 
  3257  0097                     	;# 
  3258  0099                     	;# 
  3259  009A                     	;# 
  3260  009B                     	;# 
  3261  009B                     	;# 
  3262  009C                     	;# 
  3263  009D                     	;# 
  3264  009E                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  010F                     	;# 
  3269  0110                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  011D                     	;# 
  3273  018C                     	;# 
  3274  018D                     	;# 
  3275  018F                     	;# 
  3276  0190                     	;# 
  3277  0191                     	;# 
  3278  0191                     	;# 
  3279  0192                     	;# 
  3280  0193                     	;# 
  3281  0193                     	;# 
  3282  0194                     	;# 
  3283  0195                     	;# 
  3284  0196                     	;# 
  3285  0197                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  020D                     	;# 
  3310  020F                     	;# 
  3311  0210                     	;# 
  3312  0211                     	;# 
  3313  0211                     	;# 
  3314  0212                     	;# 
  3315  0212                     	;# 
  3316  0213                     	;# 
  3317  0213                     	;# 
  3318  0214                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0216                     	;# 
  3324  0216                     	;# 
  3325  0217                     	;# 
  3326  0217                     	;# 
  3327  0219                     	;# 
  3328  021A                     	;# 
  3329  021B                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021E                     	;# 
  3333  021F                     	;# 
  3334  028C                     	;# 
  3335  028D                     	;# 
  3336  0291                     	;# 
  3337  0291                     	;# 
  3338  0292                     	;# 
  3339  0293                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  029F                     	;# 
  3347  030C                     	;# 
  3348  030D                     	;# 
  3349  0311                     	;# 
  3350  0311                     	;# 
  3351  0312                     	;# 
  3352  0313                     	;# 
  3353  0318                     	;# 
  3354  0318                     	;# 
  3355  0319                     	;# 
  3356  031A                     	;# 
  3357  031C                     	;# 
  3358  031C                     	;# 
  3359  031D                     	;# 
  3360  031E                     	;# 
  3361  038C                     	;# 
  3362  038D                     	;# 
  3363  0394                     	;# 
  3364  0395                     	;# 
  3365  0396                     	;# 
  3366  040C                     	;# 
  3367  040D                     	;# 
  3368  0411                     	;# 
  3369  0411                     	;# 
  3370  0412                     	;# 
  3371  0413                     	;# 
  3372  0414                     	;# 
  3373  0415                     	;# 
  3374  0416                     	;# 
  3375  0417                     	;# 
  3376  0418                     	;# 
  3377  0418                     	;# 
  3378  0419                     	;# 
  3379  041A                     	;# 
  3380  041B                     	;# 
  3381  041C                     	;# 
  3382  041D                     	;# 
  3383  041E                     	;# 
  3384  048D                     	;# 
  3385  0491                     	;# 
  3386  0491                     	;# 
  3387  0492                     	;# 
  3388  0492                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0494                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0495                     	;# 
  3396  0496                     	;# 
  3397  0496                     	;# 
  3398  0497                     	;# 
  3399  0497                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  059C                     	;# 
  3404  059D                     	;# 
  3405  059E                     	;# 
  3406  0611                     	;# 
  3407  0611                     	;# 
  3408  0612                     	;# 
  3409  0613                     	;# 
  3410  0614                     	;# 
  3411  0614                     	;# 
  3412  0615                     	;# 
  3413  0616                     	;# 
  3414  0617                     	;# 
  3415  0617                     	;# 
  3416  0618                     	;# 
  3417  0619                     	;# 
  3418  061A                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061D                     	;# 
  3424  061E                     	;# 
  3425  061F                     	;# 
  3426  0FE4                     	;# 
  3427  0FE5                     	;# 
  3428  0FE6                     	;# 
  3429  0FE7                     	;# 
  3430  0FE8                     	;# 
  3431  0FE9                     	;# 
  3432  0FEA                     	;# 
  3433  0FEB                     	;# 
  3434  0FED                     	;# 
  3435  0FEE                     	;# 
  3436  0FEF                     	;_modArray
  3437                           
  3438                           	psect	idataBANK0
  3439  2DB5                     __pidataBANK0:	
  3440                           
  3441                           ;initializer for _delay_time
  3442  2DB5  34D0               	retlw	208
  3443  2DB6  3407               	retlw	7
  3444  2DB7  3400               	retlw	0
  3445  2DB8  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  2DB9  3401               	retlw	1
  3449  2DBA  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  2DBB  34E8               	retlw	232
  3453  2DBC  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  2DBD  3406               	retlw	6
  3457  2DBE  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  2DBF  3414               	retlw	20
  3461                           
  3462                           ;initializer for _expressionChannel
  3463  2DC0  3401               	retlw	1
  3464                           
  3465                           ;initializer for _longTap_state
  3466  2DC1  34FF               	retlw	255
  3467                           
  3468                           ;initializer for _mod_time_changed
  3469  2DC2  3401               	retlw	1
  3470                           
  3471                           ;initializer for _num_taps
  3472  2DC3  3404               	retlw	4
  3473                           
  3474                           ;initializer for _presetChannel
  3475  2DC4  3401               	retlw	1
  3476                           
  3477                           ;initializer for _switchBypass_state
  3478  2DC5  34FF               	retlw	255
  3479                           
  3480                           	psect	idataBANK2
  3481  07FF                     __pidataBANK2:	
  3482                           
  3483                           ;initializer for _switchTap_state
  3484  07FF  34FF               	retlw	255
  3485                           
  3486                           	psect	idataBANK3
  3487  2E25                     __pidataBANK3:	
  3488                           
  3489                           ;initializer for _baseline_mod_time
  3490  2E25  34D0               	retlw	208
  3491  2E26  3407               	retlw	7
  3492  2E27  3400               	retlw	0
  3493  2E28  3400               	retlw	0
  3494                           
  3495                           ;initializer for _blink_delay
  3496  2E29  3464               	retlw	100
  3497  2E2A  3400               	retlw	0
  3498                           
  3499                           ;initializer for _knob1_prev
  3500  2E2B  34D0               	retlw	208
  3501  2E2C  3407               	retlw	7
  3502                           
  3503                           ;initializer for _knob2_prev
  3504  2E2D  34D0               	retlw	208
  3505  2E2E  3407               	retlw	7
  3506                           
  3507                           ;initializer for _knob3_prev
  3508  2E2F  34D0               	retlw	208
  3509  2E30  3407               	retlw	7
  3510                           
  3511                           ;initializer for _knob4_prev
  3512  2E31  34D0               	retlw	208
  3513  2E32  3407               	retlw	7
  3514                           
  3515                           ;initializer for _knob5_prev
  3516  2E33  34D0               	retlw	208
  3517  2E34  3407               	retlw	7
  3518                           
  3519                           ;initializer for _mod_delay_time
  3520  2E35  34D0               	retlw	208
  3521  2E36  3407               	retlw	7
  3522                           
  3523                           ;initializer for _symmetry
  3524  2E37  34B4               	retlw	180
  3525  2E38  3400               	retlw	0
  3526                           
  3527                           ;initializer for _tap_iteration
  3528  2E39  3401               	retlw	1
  3529  2E3A  3400               	retlw	0
  3530                           
  3531                           ;initializer for _blink_state
  3532  2E3B  3401               	retlw	1
  3533                           
  3534                           ;initializer for _currentBypassState
  3535  2E3C  34FF               	retlw	255
  3536                           
  3537                           ;initializer for _expSwitchState
  3538  2E3D  34FF               	retlw	255
  3539                           
  3540                           ;initializer for _expressModeCnst
  3541  2E3E  3402               	retlw	2
  3542                           
  3543                           ;initializer for _presetModeCnst
  3544  2E3F  3401               	retlw	1
  3545                           
  3546                           	psect	idataBANK4
  3547  0002                     __pidataBANK4:	
  3548                           
  3549                           ;initializer for _switchBypass_up
  3550  0002  3401               	retlw	1
  3551  0003  3400               	retlw	0
  3552                           
  3553                           	psect	stringtext
  3554  2800                     __pstringtext:	
  3555  2800                     exp@coeff:	
  3556  2800  3400               	retlw	0
  3557  2801  3480               	retlw	128
  3558  2802  343F               	retlw	63
  3559  2803  3472               	retlw	114
  3560  2804  3431               	retlw	49
  3561  2805  343F               	retlw	63
  3562  2806  34FE               	retlw	254
  3563  2807  3475               	retlw	117
  3564  2808  343E               	retlw	62
  3565  2809  3458               	retlw	88
  3566  280A  3463               	retlw	99
  3567  280B  343D               	retlw	61
  3568  280C  3495               	retlw	149
  3569  280D  341D               	retlw	29
  3570  280E  343C               	retlw	60
  3571  280F  34C5               	retlw	197
  3572  2810  34AE               	retlw	174
  3573  2811  343A               	retlw	58
  3574  2812  3479               	retlw	121
  3575  2813  3421               	retlw	33
  3576  2814  3439               	retlw	57
  3577  2815  3494               	retlw	148
  3578  2816  3480               	retlw	128
  3579  2817  3437               	retlw	55
  3580  2818  3493               	retlw	147
  3581  2819  34A7               	retlw	167
  3582  281A  3435               	retlw	53
  3583  281B  3456               	retlw	86
  3584  281C  3415               	retlw	21
  3585  281D  3434               	retlw	52
  3586  281E                     __end_ofexp@coeff:	
  3587  281E                     log@coeff:	
  3588  281E  3400               	retlw	0
  3589  281F  3400               	retlw	0
  3590  2820  3400               	retlw	0
  3591  2821  3400               	retlw	0
  3592  2822  3480               	retlw	128
  3593  2823  343F               	retlw	63
  3594  2824  34F0               	retlw	240
  3595  2825  34FF               	retlw	255
  3596  2826  34BE               	retlw	190
  3597  2827  34E2               	retlw	226
  3598  2828  34A9               	retlw	169
  3599  2829  343E               	retlw	62
  3600  282A  3483               	retlw	131
  3601  282B  3476               	retlw	118
  3602  282C  34BE               	retlw	190
  3603  282D  34AE               	retlw	174
  3604  282E  342B               	retlw	43
  3605  282F  343E               	retlw	62
  3606  2830  343C               	retlw	60
  3607  2831  34C3               	retlw	195
  3608  2832  34BD               	retlw	189
  3609  2833  34D2               	retlw	210
  3610  2834  3413               	retlw	19
  3611  2835  343D               	retlw	61
  3612  2836  3478               	retlw	120
  3613  2837  34D3               	retlw	211
  3614  2838  34BB               	retlw	187
  3615  2839                     __end_oflog@coeff:	
  3616  2839                     sin@coeff_a:	
  3617  2839  34F4               	retlw	244
  3618  283A  344A               	retlw	74
  3619  283B  3448               	retlw	72
  3620  283C  3495               	retlw	149
  3621  283D  3495               	retlw	149
  3622  283E  34C7               	retlw	199
  3623  283F  34C1               	retlw	193
  3624  2840  34DC               	retlw	220
  3625  2841  3445               	retlw	69
  3626  2842  34DC               	retlw	220
  3627  2843  346D               	retlw	109
  3628  2844  34C3               	retlw	195
  3629  2845  34B3               	retlw	179
  3630  2846  3433               	retlw	51
  3631  2847  3440               	retlw	64
  3632  2848                     __end_ofsin@coeff_a:	
  3633  2848                     sin@coeff_b:	
  3634  2848  3434               	retlw	52
  3635  2849  3401               	retlw	1
  3636  284A  3448               	retlw	72
  3637  284B  349D               	retlw	157
  3638  284C  34B0               	retlw	176
  3639  284D  3445               	retlw	69
  3640  284E  3400               	retlw	0
  3641  284F  34DA               	retlw	218
  3642  2850  3442               	retlw	66
  3643  2851  3400               	retlw	0
  3644  2852  3480               	retlw	128
  3645  2853  343F               	retlw	63
  3646  2854                     __end_ofsin@coeff_b:	
  3647  000B                     _INTCONbits	set	11
  3648  0011                     _PIR1bits	set	17
  3649  000C                     _PORTAbits	set	12
  3650  000E                     _PORTCbits	set	14
  3651  000F                     _PORTDbits	set	15
  3652  0010                     _PORTEbits	set	16
  3653  001B                     _PR2	set	27
  3654  001C                     _T2CONbits	set	28
  3655  005F                     _GIE	set	95
  3656  005E                     _PEIE	set	94
  3657  0069                     _RB1	set	105
  3658  009D                     _ADCON0bits	set	157
  3659  009E                     _ADCON1bits	set	158
  3660  009C                     _ADRESH	set	156
  3661  009B                     _ADRESL	set	155
  3662  0095                     _OPTION_REGbits	set	149
  3663  0099                     _OSCCONbits	set	153
  3664  008D                     _TRISBbits	set	141
  3665  008E                     _TRISCbits	set	142
  3666  008F                     _TRISDbits	set	143
  3667  0090                     _TRISEbits	set	144
  3668  048D                     _RCIE	set	1165
  3669  011D                     _APFCONbits	set	285
  3670  010D                     _LATBbits	set	269
  3671  010F                     _LATDbits	set	271
  3672  0190                     _ANSELEbits	set	400
  3673  0192                     _PMADRH	set	402
  3674  0191                     _PMADRL	set	401
  3675  0195                     _PMCON1bits	set	405
  3676  0196                     _PMCON2	set	406
  3677  0194                     _PMDATH	set	404
  3678  0193                     _PMDATL	set	403
  3679  0199                     _RCREG	set	409
  3680  019D                     _RCSTAbits	set	413
  3681  019B                     _SPBRG	set	411
  3682  019A                     _TXREG	set	410
  3683  019E                     _TXSTAbits	set	414
  3684  0291                     _CCPR1	set	657
  3685  0298                     _CCPR2	set	664
  3686  0293                     _CCP1CONbits	set	659
  3687  029A                     _CCP2CONbits	set	666
  3688  029D                     _CCPTMRS0	set	669
  3689  029E                     _CCPTMRS1	set	670
  3690  029F                     _CCPTMRS2	set	671
  3691  0311                     _CCPR3	set	785
  3692  0318                     _CCPR4	set	792
  3693  031C                     _CCPR5	set	796
  3694  0313                     _CCP3CONbits	set	787
  3695  031A                     _CCP4CONbits	set	794
  3696  031E                     _CCP5CONbits	set	798
  3697  030C                     _TRISFbits	set	780
  3698  030D                     _TRISGbits	set	781
  3699  038C                     _LATFbits	set	908
  3700  038D                     _LATGbits	set	909
  3701  040C                     _ANSELFbits	set	1036
  3702  061F                     _CCP10CONbits	set	1567
  3703  0613                     _CCP6CONbits	set	1555
  3704  0616                     _CCP7CONbits	set	1558
  3705  0619                     _CCP8CONbits	set	1561
  3706  061C                     _CCP9CONbits	set	1564
  3707                           
  3708                           ; #config settings
  3709  0000                     
  3710                           	psect	cinit
  3711  02E0                     start_initialization:	
  3712  02E0                     __initialization:		;BIGRAM
  3713                           
  3714                           ; Clear objects allocated to BIGRAM
  3715  02E0  308A               	movlw	low (0+9098)
  3716  02E1  0084               	movwf	4
  3717  02E2  3023               	movlw	high (0+9098)
  3718  02E3  0085               	movwf	5
  3719  02E4  3066               	movlw	102
  3720  02E5  00FE               	movwf	btemp
  3721  02E6  3002               	movlw	2
  3722  02E7  00FF               	movwf	btemp+1
  3723  02E8  31AD  25A9  3182   	fcall	clear_ram0
  3724                           
  3725                           ; Clear objects allocated to COMMON
  3726  02EB  01FD               	clrf	__pbssCOMMON& (0+127)
  3727                           
  3728                           ; Clear objects allocated to BANK0
  3729  02EC  3046               	movlw	low __pbssBANK0
  3730  02ED  0084               	movwf	4
  3731  02EE  3000               	movlw	high __pbssBANK0
  3732  02EF  0085               	movwf	5
  3733  02F0  3015               	movlw	21
  3734  02F1  00FE               	movwf	btemp
  3735  02F2  3000               	movlw	0
  3736  02F3  00FF               	movwf	btemp+1
  3737  02F4  31AD  25A9  3182   	fcall	clear_ram0
  3738                           
  3739                           ; Clear objects allocated to BANK3
  3740  02F7  30A0               	movlw	low __pbssBANK3
  3741  02F8  0084               	movwf	4
  3742  02F9  3001               	movlw	high __pbssBANK3
  3743  02FA  0085               	movwf	5
  3744  02FB  3027               	movlw	39
  3745  02FC  00FE               	movwf	btemp
  3746  02FD  3000               	movlw	0
  3747  02FE  00FF               	movwf	btemp+1
  3748  02FF  31AD  25A9  3182   	fcall	clear_ram0
  3749                           
  3750                           ; Clear objects allocated to BANK4
  3751  0302  3020               	movlw	low __pbssBANK4
  3752  0303  0084               	movwf	4
  3753  0304  3002               	movlw	high __pbssBANK4
  3754  0305  0085               	movwf	5
  3755  0306  3035               	movlw	53
  3756  0307  00FE               	movwf	btemp
  3757  0308  3000               	movlw	0
  3758  0309  00FF               	movwf	btemp+1
  3759  030A  31AD  25A9  3182   	fcall	clear_ram0
  3760                           
  3761                           ; Clear objects allocated to BANK5
  3762  030D  30A0               	movlw	low __pbssBANK5
  3763  030E  0084               	movwf	4
  3764  030F  3002               	movlw	high __pbssBANK5
  3765  0310  0085               	movwf	5
  3766  0311  302C               	movlw	44
  3767  0312  00FE               	movwf	btemp
  3768  0313  3000               	movlw	0
  3769  0314  00FF               	movwf	btemp+1
  3770  0315  31AD  25A9  3182   	fcall	clear_ram0
  3771                           
  3772                           ; Clear objects allocated to BANK6
  3773  0318  3020               	movlw	low __pbssBANK6
  3774  0319  0084               	movwf	4
  3775  031A  3003               	movlw	high __pbssBANK6
  3776  031B  0085               	movwf	5
  3777  031C  3040               	movlw	64
  3778  031D  00FE               	movwf	btemp
  3779  031E  3000               	movlw	0
  3780  031F  00FF               	movwf	btemp+1
  3781  0320  31AD  25A9  3182   	fcall	clear_ram0
  3782                           
  3783                           ; Clear objects allocated to BANK7
  3784  0323  30A0               	movlw	low __pbssBANK7
  3785  0324  0084               	movwf	4
  3786  0325  3003               	movlw	high __pbssBANK7
  3787  0326  0085               	movwf	5
  3788  0327  3040               	movlw	64
  3789  0328  00FE               	movwf	btemp
  3790  0329  3000               	movlw	0
  3791  032A  00FF               	movwf	btemp+1
  3792  032B  31AD  25A9  3182   	fcall	clear_ram0
  3793                           
  3794                           ; Initialize objects allocated to BANK0
  3795  032E  30B5               	movlw	low __pidataBANK0
  3796  032F  0084               	movwf	4
  3797  0330  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3798  0331  0085               	movwf	5
  3799  0332  305B               	movlw	low __pdataBANK0
  3800  0333  0086               	movwf	6
  3801  0334  3000               	movlw	high __pdataBANK0
  3802  0335  0087               	movwf	7
  3803  0336  3000               	movlw	0
  3804  0337  00FF               	movwf	btemp+1
  3805  0338  3011               	movlw	17
  3806  0339  31AD  259D  3182   	fcall	init_ram
  3807                           
  3808                           ; Initialize objects allocated to BANK2
  3809  033C  0022               	movlb	2	; select bank2
  3810  033D  3187  27FF  3182   	fcall	__pidataBANK2	;fetch initializer
  3811  0340  00EF               	movwf	__pdataBANK2& (0+127)
  3812                           
  3813                           ; Initialize objects allocated to BANK3
  3814  0341  3025               	movlw	low __pidataBANK3
  3815  0342  0084               	movwf	4
  3816  0343  30AE               	movlw	(high __pidataBANK3)| (0+128)
  3817  0344  0085               	movwf	5
  3818  0345  30C7               	movlw	low __pdataBANK3
  3819  0346  0086               	movwf	6
  3820  0347  3001               	movlw	high __pdataBANK3
  3821  0348  0087               	movwf	7
  3822  0349  3000               	movlw	0
  3823  034A  00FF               	movwf	btemp+1
  3824  034B  301B               	movlw	27
  3825  034C  31AD  259D  3182   	fcall	init_ram
  3826                           
  3827                           ; Initialize objects allocated to BANK4
  3828  034F  0024               	movlb	4	; select bank4
  3829  0350  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3830  0353  00DE               	movwf	__pdataBANK4& (0+127)
  3831  0354  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3832  0356  00DF               	movwf	(__pdataBANK4+1)& (0+127)
  3833  0357                     end_of_initialization:	
  3834                           ;End of C runtime variable initialization code
  3835                           
  3836  0357                     __end_of__initialization:	
  3837  0357  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3838  0358  0020               	movlb	0
  3839  0359  3183  2B5B         	ljmp	_main	;jump to C main() function
  3840                           
  3841                           	psect	bssCOMMON
  3842  007D                     __pbssCOMMON:	
  3843  007D                     _UQFront:	
  3844  007D                     	ds	1
  3845                           
  3846                           	psect	bssBANK0
  3847  0046                     __pbssBANK0:	
  3848  0046                     _tap_timer:	
  3849  0046                     	ds	4
  3850  004A                     _timer:	
  3851  004A                     	ds	4
  3852  004E                     _UQEnd:	
  3853  004E                     	ds	1
  3854  004F                     _bottomTactile_pressed:	
  3855  004F                     	ds	1
  3856  0050                     _doubleTap_state:	
  3857  0050                     	ds	1
  3858  0051                     _longBypass_down:	
  3859  0051                     	ds	1
  3860  0052                     _longBypass_start:	
  3861  0052                     	ds	1
  3862  0053                     _longBypass_state:	
  3863  0053                     	ds	1
  3864  0054                     _longTap_start:	
  3865  0054                     	ds	1
  3866  0055                     _mode2_state:	
  3867  0055                     	ds	1
  3868  0056                     _presetSaveMode:	
  3869  0056                     	ds	1
  3870  0057                     _preset_blink:	
  3871  0057                     	ds	1
  3872  0058                     _suspend_blink:	
  3873  0058                     	ds	1
  3874  0059                     _switchTap_pressed:	
  3875  0059                     	ds	1
  3876  005A                     _topTactile_pressed:	
  3877  005A                     	ds	1
  3878                           
  3879                           	psect	dataBANK0
  3880  005B                     __pdataBANK0:	
  3881  005B                     _delay_time:	
  3882  005B                     	ds	4
  3883  005F                     _bottom_push_state:	
  3884  005F                     	ds	2
  3885  0061                     _long_press_limit:	
  3886  0061                     	ds	2
  3887  0063                     _top_push_state:	
  3888  0063                     	ds	2
  3889  0065                     _blink_rate:	
  3890  0065                     	ds	1
  3891  0066                     _expressionChannel:	
  3892  0066                     	ds	1
  3893  0067                     _longTap_state:	
  3894  0067                     	ds	1
  3895  0068                     _mod_time_changed:	
  3896  0068                     	ds	1
  3897  0069                     _num_taps:	
  3898  0069                     	ds	1
  3899  006A                     _presetChannel:	
  3900  006A                     	ds	1
  3901  006B                     _switchBypass_state:	
  3902  006B                     	ds	1
  3903                           
  3904                           	psect	dataBANK2
  3905  016F                     __pdataBANK2:	
  3906  016F                     _switchTap_state:	
  3907  016F                     	ds	1
  3908                           
  3909                           	psect	bssBANK3
  3910  01A0                     __pbssBANK3:	
  3911  01A0                     _double_timer:	
  3912  01A0                     	ds	4
  3913  01A4                     _mod_timer:	
  3914  01A4                     	ds	4
  3915  01A8                     _sub_timer:	
  3916  01A8                     	ds	4
  3917  01AC                     _knob_1_pos:	
  3918  01AC                     	ds	2
  3919  01AE                     _knob_2_pos:	
  3920  01AE                     	ds	2
  3921  01B0                     _knob_3_pos:	
  3922  01B0                     	ds	2
  3923  01B2                     _knob_4_pos:	
  3924  01B2                     	ds	2
  3925  01B4                     _knob_5_pos:	
  3926  01B4                     	ds	2
  3927  01B6                     _longBypass_timer:	
  3928  01B6                     	ds	2
  3929  01B8                     _longTap_timer:	
  3930  01B8                     	ds	2
  3931  01BA                     _mod_value:	
  3932  01BA                     	ds	2
  3933  01BC                     _switchBypass_pressed:	
  3934  01BC                     	ds	2
  3935  01BE                     _adjust_mod_delay:	
  3936  01BE                     	ds	1
  3937  01BF                     _bypass_turning_on:	
  3938  01BF                     	ds	1
  3939  01C0                     _iCnt:	
  3940  01C0                     	ds	1
  3941  01C1                     _longBypass_save:	
  3942  01C1                     	ds	1
  3943  01C2                     _mode1_state:	
  3944  01C2                     	ds	1
  3945  01C3                     _modulation_changed:	
  3946  01C3                     	ds	1
  3947  01C4                     _preset_programmning_on:	
  3948  01C4                     	ds	1
  3949  01C5                     _reset_sub_delay:	
  3950  01C5                     	ds	1
  3951  01C6                     _switchTap_down:	
  3952  01C6                     	ds	1
  3953                           
  3954                           	psect	dataBANK3
  3955  01C7                     __pdataBANK3:	
  3956  01C7                     _baseline_mod_time:	
  3957  01C7                     	ds	4
  3958  01CB                     _blink_delay:	
  3959  01CB                     	ds	2
  3960  01CD                     _knob1_prev:	
  3961  01CD                     	ds	2
  3962  01CF                     _knob2_prev:	
  3963  01CF                     	ds	2
  3964  01D1                     _knob3_prev:	
  3965  01D1                     	ds	2
  3966  01D3                     _knob4_prev:	
  3967  01D3                     	ds	2
  3968  01D5                     _knob5_prev:	
  3969  01D5                     	ds	2
  3970  01D7                     _mod_delay_time:	
  3971  01D7                     	ds	2
  3972  01D9                     _symmetry:	
  3973  01D9                     	ds	2
  3974  01DB                     _tap_iteration:	
  3975  01DB                     	ds	2
  3976  01DD                     _blink_state:	
  3977  01DD                     	ds	1
  3978  01DE                     _currentBypassState:	
  3979  01DE                     	ds	1
  3980  01DF                     _expSwitchState:	
  3981  01DF                     	ds	1
  3982  01E0                     _expressModeCnst:	
  3983  01E0                     	ds	1
  3984  01E1                     _presetModeCnst:	
  3985  01E1                     	ds	1
  3986                           
  3987                           	psect	bssBANK4
  3988  0220                     __pbssBANK4:	
  3989  0220                     _tap_history:	
  3990  0220                     	ds	20
  3991  0234                     USARTWriteInt@F3536:	
  3992  0234                     	ds	5
  3993  0239                     _ledState:	
  3994  0239                     	ds	4
  3995  023D                     _tap_total:	
  3996  023D                     	ds	4
  3997  0241                     _adjusted_pot_value:	
  3998  0241                     	ds	2
  3999  0243                     _debounce_bypass:	
  4000  0243                     	ds	2
  4001  0245                     _debounce_count:	
  4002  0245                     	ds	2
  4003  0247                     _debounce_mode1:	
  4004  0247                     	ds	2
  4005  0249                     _debounce_mode2:	
  4006  0249                     	ds	2
  4007  024B                     _delayfound:	
  4008  024B                     	ds	2
  4009  024D                     _errno:	
  4010  024D                     	ds	2
  4011  024F                     _mod_counter:	
  4012  024F                     	ds	2
  4013  0251                     _switchBypass_toggle:	
  4014  0251                     	ds	2
  4015  0253                     _tmpVal:	
  4016  0253                     	ds	2
  4017                           
  4018                           	psect	dataBANK4
  4019  025E                     __pdataBANK4:	
  4020  025E                     _switchBypass_up:	
  4021  025E                     	ds	2
  4022                           
  4023                           	psect	bssBANK5
  4024  02A0                     __pbssBANK5:	
  4025  02A0                     _tap:	
  4026  02A0                     	ds	44
  4027                           
  4028                           	psect	bssBANK6
  4029  0320                     __pbssBANK6:	
  4030  0320                     _URBuff:	
  4031  0320                     	ds	64
  4032                           
  4033                           	psect	bssBANK7
  4034  03A0                     __pbssBANK7:	
  4035  03A0                     _myBuf:	
  4036  03A0                     	ds	64
  4037                           
  4038                           	psect	clrtext
  4039  2DA9                     clear_ram0:	
  4040                           ;	Called with FSR0 containing the base address, and
  4041                           ;	btemp/btemp+1 has the size to clear
  4042                           
  4043  2DA9  0064               	clrwdt	;clear the watchdog before getting into this loop
  4044  2DAA                     clrloop0:	
  4045  2DAA  0180               	clrf	0	;clear RAM location pointed to by FSR
  4046  2DAB  3101               	addfsr 0,1
  4047  2DAC  3001               	movlw	1
  4048  2DAD  02FE               	subwf	126,f
  4049  2DAE  3000               	movlw	0
  4050  2DAF  3BFF               	subwfb	127,f
  4051  2DB0  087F               	movf	127,w
  4052  2DB1  047E               	iorwf	126,w
  4053  2DB2  1903               	btfsc	3,2
  4054  2DB3  3400               	retlw	0	;all done for this memory range, return
  4055  2DB4  2DAA               	goto	clrloop0	;have we reached the end yet?
  4056                           
  4057                           	psect	inittext
  4058  2D9D                     init_ram:	
  4059  2D9D  00FE               	movwf	126
  4060  2D9E                     initloop:	
  4061  2D9E  0012               	moviw fsr0++
  4062  2D9F  001E               	movwi fsr1++
  4063  2DA0  3001               	movlw	1
  4064  2DA1  02FE               	subwf	126,f
  4065  2DA2  3000               	movlw	0
  4066  2DA3  3BFF               	subwfb	127,f
  4067  2DA4  087F               	movf	127,w
  4068  2DA5  047E               	iorwf	126,w
  4069  2DA6  1903               	btfsc	3,2
  4070  2DA7  3400               	retlw	0
  4071  2DA8  2D9E               	goto	initloop
  4072                           
  4073                           	psect	cstackBANK4
  4074  0255                     __pcstackBANK4:	
  4075  0255                     _main$2831:	
  4076                           
  4077                           ; 3 bytes @ 0x0
  4078  0255                     	ds	3
  4079  0258                     _main$2832:	
  4080                           
  4081                           ; 3 bytes @ 0x3
  4082  0258                     	ds	3
  4083  025B                     _main$2833:	
  4084                           
  4085                           ; 3 bytes @ 0x6
  4086  025B                     	ds	3
  4087                           
  4088                           	psect	cstackBANK3
  4089  01E2                     __pcstackBANK3:	
  4090  01E2                     scaleA100kPot@pwm:	
  4091  01E2                     scaleA10kPot@pwm:	
  4092                           ; 3 bytes @ 0x0
  4093                           
  4094  01E2                     scaleiA10kPot@pwm:	
  4095                           ; 3 bytes @ 0x0
  4096                           
  4097                           
  4098                           ; 3 bytes @ 0x0
  4099  01E2                     	ds	3
  4100  01E5                     _scaleA100kPot$2836:	
  4101  01E5                     _scaleA10kPot$2840:	
  4102                           ; 3 bytes @ 0x3
  4103                           
  4104  01E5                     _scaleiA10kPot$2842:	
  4105                           ; 3 bytes @ 0x3
  4106                           
  4107                           
  4108                           ; 3 bytes @ 0x3
  4109  01E5                     	ds	3
  4110  01E8                     _scaleA100kPot$2837:	
  4111  01E8                     _scaleA10kPot$2841:	
  4112                           ; 3 bytes @ 0x6
  4113                           
  4114  01E8                     _scaleiA10kPot$2843:	
  4115                           ; 3 bytes @ 0x6
  4116                           
  4117                           
  4118                           ; 3 bytes @ 0x6
  4119  01E8                     	ds	3
  4120                           
  4121                           	psect	cstackBANK2
  4122  0120                     __pcstackBANK2:	
  4123  0120                     ?___fttol:	
  4124  0120                     ___fttol@f1:	
  4125                           ; 4 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  0120                     	ds	4
  4130  0124                     ??___fttol:	
  4131                           
  4132                           ; 1 bytes @ 0x4
  4133  0124                     	ds	4
  4134  0128                     ___fttol@sign1:	
  4135                           
  4136                           ; 1 bytes @ 0x8
  4137  0128                     	ds	1
  4138  0129                     ___fttol@lval:	
  4139                           
  4140                           ; 4 bytes @ 0x9
  4141  0129                     	ds	4
  4142  012D                     ___fttol@exp1:	
  4143                           
  4144                           ; 1 bytes @ 0xD
  4145  012D                     	ds	1
  4146  012E                     ?_modTri:	
  4147  012E                     ?_modSaw:	
  4148                           ; 2 bytes @ 0xE
  4149                           
  4150  012E                     ?___wmul:	
  4151                           ; 2 bytes @ 0xE
  4152                           
  4153  012E                     ?___altoft:	
  4154                           ; 2 bytes @ 0xE
  4155                           
  4156  012E                     ___wmul@multiplier:	
  4157                           ; 3 bytes @ 0xE
  4158                           
  4159  012E                     modTri@angle:	
  4160                           ; 2 bytes @ 0xE
  4161                           
  4162  012E                     modSaw@angle:	
  4163                           ; 3 bytes @ 0xE
  4164                           
  4165  012E                     ___altoft@c:	
  4166                           ; 3 bytes @ 0xE
  4167                           
  4168                           
  4169                           ; 4 bytes @ 0xE
  4170  012E                     	ds	2
  4171  0130                     ___wmul@multiplicand:	
  4172                           
  4173                           ; 2 bytes @ 0x10
  4174  0130                     	ds	1
  4175  0131                     modTri@inflection:	
  4176  0131                     modSaw@inflection:	
  4177                           ; 3 bytes @ 0x11
  4178                           
  4179                           
  4180                           ; 3 bytes @ 0x11
  4181  0131                     	ds	1
  4182  0132                     ??___altoft:	
  4183  0132                     ___wmul@product:	
  4184                           ; 1 bytes @ 0x12
  4185                           
  4186                           
  4187                           ; 2 bytes @ 0x12
  4188  0132                     	ds	2
  4189  0134                     ?_modSin:	
  4190  0134                     ?_eval_poly:	
  4191                           ; 2 bytes @ 0x14
  4192                           
  4193  0134                     ___altoft@exp:	
  4194                           ; 3 bytes @ 0x14
  4195                           
  4196  0134                     modSin@angle:	
  4197                           ; 1 bytes @ 0x14
  4198                           
  4199  0134                     eval_poly@x:	
  4200                           ; 3 bytes @ 0x14
  4201                           
  4202  0134                     _modTri$2845:	
  4203                           ; 3 bytes @ 0x14
  4204                           
  4205  0134                     _modSaw$2846:	
  4206                           ; 3 bytes @ 0x14
  4207                           
  4208                           
  4209                           ; 3 bytes @ 0x14
  4210  0134                     	ds	1
  4211  0135                     ___altoft@sign:	
  4212                           
  4213                           ; 1 bytes @ 0x15
  4214  0135                     	ds	1
  4215  0136                     ??_getModulationDelayTime:	
  4216  0136                     ?_trunc:	
  4217                           ; 1 bytes @ 0x16
  4218                           
  4219  0136                     ?_floor:	
  4220                           ; 3 bytes @ 0x16
  4221                           
  4222  0136                     trunc@x:	
  4223                           ; 3 bytes @ 0x16
  4224                           
  4225  0136                     floor@x:	
  4226                           ; 3 bytes @ 0x16
  4227                           
  4228                           
  4229                           ; 3 bytes @ 0x16
  4230  0136                     	ds	1
  4231  0137                     eval_poly@d:	
  4232  0137                     modSin@inflection:	
  4233                           ; 2 bytes @ 0x17
  4234                           
  4235  0137                     modTri@shift:	
  4236                           ; 3 bytes @ 0x17
  4237                           
  4238  0137                     _modSaw$2847:	
  4239                           ; 3 bytes @ 0x17
  4240                           
  4241                           
  4242                           ; 3 bytes @ 0x17
  4243  0137                     	ds	2
  4244  0139                     ??_trunc:	
  4245  0139                     ??_floor:	
  4246                           ; 1 bytes @ 0x19
  4247                           
  4248  0139                     eval_poly@n:	
  4249                           ; 1 bytes @ 0x19
  4250                           
  4251                           
  4252                           ; 2 bytes @ 0x19
  4253  0139                     	ds	1
  4254  013A                     ??_modSin:	
  4255  013A                     getModulationDelayTime@subDiv:	
  4256                           ; 1 bytes @ 0x1A
  4257                           
  4258  013A                     modTri@period:	
  4259                           ; 2 bytes @ 0x1A
  4260                           
  4261  013A                     trunc@i:	
  4262                           ; 3 bytes @ 0x1A
  4263                           
  4264  013A                     floor@i:	
  4265                           ; 3 bytes @ 0x1A
  4266                           
  4267  013A                     _modSaw$2848:	
  4268                           ; 3 bytes @ 0x1A
  4269                           
  4270                           
  4271                           ; 3 bytes @ 0x1A
  4272  013A                     	ds	1
  4273  013B                     eval_poly@res:	
  4274                           
  4275                           ; 3 bytes @ 0x1B
  4276  013B                     	ds	1
  4277  013C                     _modSin$2844:	
  4278                           
  4279                           ; 3 bytes @ 0x1C
  4280  013C                     	ds	1
  4281  013D                     modSaw@mod:	
  4282  013D                     trunc@expon:	
  4283                           ; 2 bytes @ 0x1D
  4284                           
  4285  013D                     floor@expon:	
  4286                           ; 2 bytes @ 0x1D
  4287                           
  4288  013D                     modTri@tmpVal:	
  4289                           ; 2 bytes @ 0x1D
  4290                           
  4291                           
  4292                           ; 3 bytes @ 0x1D
  4293  013D                     	ds	1
  4294  013E                     ?_log:	
  4295  013E                     ?_ldexp:	
  4296                           ; 3 bytes @ 0x1E
  4297                           
  4298  013E                     ldexp@value:	
  4299                           ; 3 bytes @ 0x1E
  4300                           
  4301  013E                     log@x:	
  4302                           ; 3 bytes @ 0x1E
  4303                           
  4304                           
  4305                           ; 3 bytes @ 0x1E
  4306  013E                     	ds	1
  4307  013F                     ?_set_subdivision:	
  4308  013F                     ?___ftsub:	
  4309                           ; 2 bytes @ 0x1F
  4310                           
  4311  013F                     set_subdivision@x:	
  4312                           ; 3 bytes @ 0x1F
  4313                           
  4314  013F                     modSin@shift:	
  4315                           ; 2 bytes @ 0x1F
  4316                           
  4317  013F                     modSaw@shift:	
  4318                           ; 3 bytes @ 0x1F
  4319                           
  4320  013F                     ___ftsub@f2:	
  4321                           ; 3 bytes @ 0x1F
  4322                           
  4323                           
  4324                           ; 3 bytes @ 0x1F
  4325  013F                     	ds	2
  4326  0141                     ??_log:	
  4327  0141                     set_subdivision@y:	
  4328                           ; 1 bytes @ 0x21
  4329                           
  4330  0141                     ldexp@newexp:	
  4331                           ; 2 bytes @ 0x21
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x21
  4335  0141                     	ds	1
  4336  0142                     log@exponent:	
  4337  0142                     modSin@period:	
  4338                           ; 2 bytes @ 0x22
  4339                           
  4340  0142                     modSaw@period:	
  4341                           ; 3 bytes @ 0x22
  4342                           
  4343  0142                     ___ftsub@f1:	
  4344                           ; 3 bytes @ 0x22
  4345                           
  4346                           
  4347                           ; 3 bytes @ 0x22
  4348  0142                     	ds	1
  4349  0143                     ??_set_subdivision:	
  4350  0143                     ??_ldexp:	
  4351                           ; 1 bytes @ 0x23
  4352                           
  4353                           
  4354                           ; 1 bytes @ 0x23
  4355  0143                     	ds	2
  4356  0145                     ?_modSawRev:	
  4357  0145                     ?_sin:	
  4358                           ; 2 bytes @ 0x25
  4359                           
  4360  0145                     modSin@tmpVal:	
  4361                           ; 3 bytes @ 0x25
  4362                           
  4363  0145                     modSawRev@angle:	
  4364                           ; 3 bytes @ 0x25
  4365                           
  4366  0145                     sin@f:	
  4367                           ; 3 bytes @ 0x25
  4368                           
  4369  0145                     _ldexp$2640:	
  4370                           ; 3 bytes @ 0x25
  4371                           
  4372                           
  4373                           ; 3 bytes @ 0x25
  4374  0145                     	ds	1
  4375  0146                     set_subdivision@scalar:	
  4376                           
  4377                           ; 3 bytes @ 0x26
  4378  0146                     	ds	2
  4379  0148                     ??_sin:	
  4380  0148                     ?_modSquare:	
  4381                           ; 1 bytes @ 0x28
  4382                           
  4383  0148                     ?_exp:	
  4384                           ; 2 bytes @ 0x28
  4385                           
  4386  0148                     modSawRev@inflection:	
  4387                           ; 3 bytes @ 0x28
  4388                           
  4389  0148                     modSquare@angle:	
  4390                           ; 3 bytes @ 0x28
  4391                           
  4392  0148                     exp@x:	
  4393                           ; 3 bytes @ 0x28
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x28
  4397  0148                     	ds	1
  4398  0149                     set_subdivision@tmpX:	
  4399  0149                     sin@y:	
  4400                           ; 2 bytes @ 0x29
  4401                           
  4402                           
  4403                           ; 3 bytes @ 0x29
  4404  0149                     	ds	2
  4405  014B                     ??_modSawRev:	
  4406  014B                     ??_exp:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409  014B                     modSquare@inflection:	
  4410                           ; 1 bytes @ 0x2B
  4411                           
  4412                           
  4413                           ; 3 bytes @ 0x2B
  4414  014B                     	ds	1
  4415  014C                     _sin$2851:	
  4416  014C                     _exp$2852:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     sin@x2:	
  4427  014F                     _exp$2608:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     sin@sgn:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	1
  4444  0153                     ??_calcSinArray:	
  4445                           
  4446                           ; 1 bytes @ 0x33
  4447  0153                     	ds	1
  4448  0154                     exp@sign:	
  4449  0154                     updateModulationArray@angleFactor:	
  4450                           ; 1 bytes @ 0x34
  4451                           
  4452                           
  4453                           ; 2 bytes @ 0x34
  4454  0154                     	ds	1
  4455  0155                     ?_pow:	
  4456  0155                     pow@x:	
  4457                           ; 3 bytes @ 0x35
  4458                           
  4459                           
  4460                           ; 3 bytes @ 0x35
  4461  0155                     	ds	1
  4462  0156                     updateModulationArray@subDiv:	
  4463                           
  4464                           ; 2 bytes @ 0x36
  4465  0156                     	ds	1
  4466  0157                     calcSinArray@tmpVal:	
  4467                           
  4468                           ; 3 bytes @ 0x37
  4469  0157                     	ds	1
  4470  0158                     updateModulationArray@thisAngle:	
  4471  0158                     pow@y:	
  4472                           ; 2 bytes @ 0x38
  4473                           
  4474                           
  4475                           ; 3 bytes @ 0x38
  4476  0158                     	ds	2
  4477  015A                     calcSinArray@iAngle:	
  4478  015A                     updateModulationArray@iAngle:	
  4479                           ; 1 bytes @ 0x3A
  4480                           
  4481                           
  4482                           ; 1 bytes @ 0x3A
  4483  015A                     	ds	1
  4484  015B                     ??_pow:	
  4485                           
  4486                           ; 1 bytes @ 0x3B
  4487  015B                     	ds	1
  4488  015C                     _pow$2849:	
  4489                           
  4490                           ; 3 bytes @ 0x3C
  4491  015C                     	ds	3
  4492  015F                     _pow$2850:	
  4493                           
  4494                           ; 3 bytes @ 0x3F
  4495  015F                     	ds	3
  4496  0162                     pow@sign:	
  4497                           
  4498                           ; 1 bytes @ 0x42
  4499  0162                     	ds	1
  4500  0163                     pow@yi:	
  4501                           
  4502                           ; 4 bytes @ 0x43
  4503  0163                     	ds	4
  4504  0167                     ?_scaleA10kPot:	
  4505  0167                     ?_scaleiA10kPot:	
  4506                           ; 2 bytes @ 0x47
  4507                           
  4508  0167                     ?_scaleA100kPot:	
  4509                           ; 2 bytes @ 0x47
  4510                           
  4511  0167                     scaleA100kPot@input:	
  4512                           ; 2 bytes @ 0x47
  4513                           
  4514  0167                     scaleA10kPot@input:	
  4515                           ; 3 bytes @ 0x47
  4516                           
  4517  0167                     scaleiA10kPot@input:	
  4518                           ; 3 bytes @ 0x47
  4519                           
  4520                           
  4521                           ; 3 bytes @ 0x47
  4522  0167                     	ds	3
  4523  016A                     ??_main:	
  4524                           
  4525                           ; 1 bytes @ 0x4A
  4526  016A                     	ds	5
  4527                           
  4528                           	psect	cstackBANK1
  4529  00A0                     __pcstackBANK1:	
  4530  00A0                     ?___ftge:	
  4531  00A0                     ?_set_leds_top:	
  4532                           ; 1 bit 
  4533                           
  4534  00A0                     ?_USARTInit:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  00A0                     ??_ConfigureOscillator:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  00A0                     ??_InitApp:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  00A0                     ??_InitializeTaps:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  00A0                     ??_init_adc:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  00A0                     ??_init_pwm:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  00A0                     ??_init_timer2:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  00A0                     ??_init_timer0:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  00A0                     ?_set_leds_bottom:	
  4559                           ; 1 bytes @ 0x0
  4560                           
  4561  00A0                     ?_setLongBypassState:	
  4562                           ; 1 bytes @ 0x0
  4563                           
  4564  00A0                     ?_setLongTapState:	
  4565                           ; 1 bytes @ 0x0
  4566                           
  4567  00A0                     ?_updateSwitchBypassState:	
  4568                           ; 1 bytes @ 0x0
  4569                           
  4570  00A0                     ?_getModulationSubdivision:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  00A0                     ?_adc_convert:	
  4574                           ; 2 bytes @ 0x0
  4575                           
  4576  00A0                     ?_FLASH_ReadWord:	
  4577                           ; 2 bytes @ 0x0
  4578                           
  4579  00A0                     ?_getSwitchBypassState:	
  4580                           ; 2 bytes @ 0x0
  4581                           
  4582  00A0                     ?___awdiv:	
  4583                           ; 2 bytes @ 0x0
  4584                           
  4585  00A0                     ?___ftpack:	
  4586                           ; 2 bytes @ 0x0
  4587                           
  4588  00A0                     ?_frexp:	
  4589                           ; 3 bytes @ 0x0
  4590                           
  4591  00A0                     ?___lmul:	
  4592                           ; 3 bytes @ 0x0
  4593                           
  4594  00A0                     ?___aldiv:	
  4595                           ; 4 bytes @ 0x0
  4596                           
  4597  00A0                     FLASH_ReadWord@flashAddr:	
  4598                           ; 4 bytes @ 0x0
  4599                           
  4600  00A0                     set_leds_top@x:	
  4601                           ; 2 bytes @ 0x0
  4602                           
  4603  00A0                     set_leds_bottom@x:	
  4604                           ; 2 bytes @ 0x0
  4605                           
  4606  00A0                     updateSwitchBypassState@state:	
  4607                           ; 2 bytes @ 0x0
  4608                           
  4609  00A0                     setLongBypassState@f_state:	
  4610                           ; 2 bytes @ 0x0
  4611                           
  4612  00A0                     setLongTapState@f_state:	
  4613                           ; 2 bytes @ 0x0
  4614                           
  4615  00A0                     USARTInit@baud_rate:	
  4616                           ; 2 bytes @ 0x0
  4617                           
  4618  00A0                     ___awdiv@divisor:	
  4619                           ; 2 bytes @ 0x0
  4620                           
  4621  00A0                     ___ftpack@arg:	
  4622                           ; 2 bytes @ 0x0
  4623                           
  4624  00A0                     ___ftge@ff1:	
  4625                           ; 3 bytes @ 0x0
  4626                           
  4627  00A0                     frexp@value:	
  4628                           ; 3 bytes @ 0x0
  4629                           
  4630  00A0                     ___lmul@multiplier:	
  4631                           ; 3 bytes @ 0x0
  4632                           
  4633  00A0                     ___aldiv@divisor:	
  4634                           ; 4 bytes @ 0x0
  4635                           
  4636                           
  4637                           ; 4 bytes @ 0x0
  4638  00A0                     	ds	1
  4639  00A1                     InitializeTaps@itap:	
  4640                           
  4641                           ; 2 bytes @ 0x1
  4642  00A1                     	ds	1
  4643  00A2                     ??_getModulationSubdivision:	
  4644  00A2                     ??_USARTInit:	
  4645                           ; 1 bytes @ 0x2
  4646                           
  4647  00A2                     ??_adc_convert:	
  4648                           ; 1 bytes @ 0x2
  4649                           
  4650  00A2                     ??_FLASH_ReadWord:	
  4651                           ; 1 bytes @ 0x2
  4652                           
  4653  00A2                     ??_set_leds_bottom:	
  4654                           ; 1 bytes @ 0x2
  4655                           
  4656  00A2                     ??_setLongBypassState:	
  4657                           ; 1 bytes @ 0x2
  4658                           
  4659  00A2                     ??_setLongTapState:	
  4660                           ; 1 bytes @ 0x2
  4661                           
  4662  00A2                     ??_updateSwitchBypassState:	
  4663                           ; 1 bytes @ 0x2
  4664                           
  4665  00A2                     ??_getSwitchBypassState:	
  4666                           ; 1 bytes @ 0x2
  4667                           
  4668  00A2                     FLASH_ReadWord@GIEBitValue:	
  4669                           ; 1 bytes @ 0x2
  4670                           
  4671  00A2                     set_leds_top@ledState:	
  4672                           ; 1 bytes @ 0x2
  4673                           
  4674  00A2                     ___awdiv@dividend:	
  4675                           ; 2 bytes @ 0x2
  4676                           
  4677                           
  4678                           ; 2 bytes @ 0x2
  4679  00A2                     	ds	1
  4680  00A3                     adc_convert@channel:	
  4681  00A3                     ___ftpack@exp:	
  4682                           ; 1 bytes @ 0x3
  4683                           
  4684  00A3                     frexp@eptr:	
  4685                           ; 1 bytes @ 0x3
  4686                           
  4687  00A3                     ___ftge@ff2:	
  4688                           ; 1 bytes @ 0x3
  4689                           
  4690                           
  4691                           ; 3 bytes @ 0x3
  4692  00A3                     	ds	1
  4693  00A4                     ??_set_leds_top:	
  4694  00A4                     ??_ReadSavedSettings:	
  4695                           ; 1 bytes @ 0x4
  4696                           
  4697  00A4                     ??_resetRingLEDs:	
  4698                           ; 1 bytes @ 0x4
  4699                           
  4700  00A4                     ??_setPresetDisplay:	
  4701                           ; 1 bytes @ 0x4
  4702                           
  4703  00A4                     ??_setExpressionDisplay:	
  4704                           ; 1 bytes @ 0x4
  4705                           
  4706  00A4                     ??_frexp:	
  4707                           ; 1 bytes @ 0x4
  4708                           
  4709  00A4                     ??___awdiv:	
  4710                           ; 1 bytes @ 0x4
  4711                           
  4712  00A4                     ___ftpack@sign:	
  4713                           ; 1 bytes @ 0x4
  4714                           
  4715  00A4                     ___lmul@multiplicand:	
  4716                           ; 1 bytes @ 0x4
  4717                           
  4718  00A4                     ___aldiv@dividend:	
  4719                           ; 4 bytes @ 0x4
  4720                           
  4721                           
  4722                           ; 4 bytes @ 0x4
  4723  00A4                     	ds	1
  4724  00A5                     ??___ftpack:	
  4725  00A5                     ___awdiv@counter:	
  4726                           ; 1 bytes @ 0x5
  4727                           
  4728                           
  4729                           ; 1 bytes @ 0x5
  4730  00A5                     	ds	1
  4731  00A6                     ??___ftge:	
  4732  00A6                     setPresetDisplay@ledChannel:	
  4733                           ; 1 bytes @ 0x6
  4734                           
  4735  00A6                     setExpressionDisplay@ledChannel:	
  4736                           ; 1 bytes @ 0x6
  4737                           
  4738  00A6                     ___awdiv@sign:	
  4739                           ; 1 bytes @ 0x6
  4740                           
  4741                           
  4742                           ; 1 bytes @ 0x6
  4743  00A6                     	ds	1
  4744  00A7                     ??_update_mode:	
  4745  00A7                     ??_update_selectMode:	
  4746                           ; 1 bytes @ 0x7
  4747                           
  4748  00A7                     ??_setPedalMode:	
  4749                           ; 1 bytes @ 0x7
  4750                           
  4751  00A7                     ___awdiv@quotient:	
  4752                           ; 1 bytes @ 0x7
  4753                           
  4754                           
  4755                           ; 2 bytes @ 0x7
  4756  00A7                     	ds	1
  4757  00A8                     ??___lmul:	
  4758  00A8                     ??___aldiv:	
  4759                           ; 1 bytes @ 0x8
  4760                           
  4761  00A8                     ?___awtoft:	
  4762                           ; 1 bytes @ 0x8
  4763                           
  4764  00A8                     ?___lltoft:	
  4765                           ; 3 bytes @ 0x8
  4766                           
  4767  00A8                     ___awtoft@c:	
  4768                           ; 3 bytes @ 0x8
  4769                           
  4770  00A8                     ___lmul@product:	
  4771                           ; 2 bytes @ 0x8
  4772                           
  4773  00A8                     ___lltoft@c:	
  4774                           ; 4 bytes @ 0x8
  4775                           
  4776                           
  4777                           ; 4 bytes @ 0x8
  4778  00A8                     	ds	1
  4779  00A9                     ___aldiv@counter:	
  4780                           
  4781                           ; 1 bytes @ 0x9
  4782  00A9                     	ds	1
  4783  00AA                     ___aldiv@sign:	
  4784                           
  4785                           ; 1 bytes @ 0xA
  4786  00AA                     	ds	1
  4787  00AB                     ??___awtoft:	
  4788  00AB                     ___aldiv@quotient:	
  4789                           ; 1 bytes @ 0xB
  4790                           
  4791                           
  4792                           ; 4 bytes @ 0xB
  4793  00AB                     	ds	1
  4794  00AC                     ?_wait_ms:	
  4795  00AC                     ??___lltoft:	
  4796                           ; 1 bytes @ 0xC
  4797                           
  4798  00AC                     wait_ms@timeSec:	
  4799                           ; 1 bytes @ 0xC
  4800                           
  4801                           
  4802                           ; 2 bytes @ 0xC
  4803  00AC                     	ds	1
  4804  00AD                     ___awtoft@sign:	
  4805  00AD                     ___lltoft@exp:	
  4806                           ; 1 bytes @ 0xD
  4807                           
  4808                           
  4809                           ; 1 bytes @ 0xD
  4810  00AD                     	ds	1
  4811  00AE                     ??_wait_ms:	
  4812  00AE                     ?___ftmul:	
  4813                           ; 1 bytes @ 0xE
  4814                           
  4815  00AE                     ___ftmul@f1:	
  4816                           ; 3 bytes @ 0xE
  4817                           
  4818  00AE                     wait_ms@timemsl:	
  4819                           ; 3 bytes @ 0xE
  4820                           
  4821                           
  4822                           ; 4 bytes @ 0xE
  4823  00AE                     	ds	3
  4824  00B1                     ___ftmul@f2:	
  4825                           
  4826                           ; 3 bytes @ 0x11
  4827  00B1                     	ds	1
  4828  00B2                     ??_read_bottom_tactile:	
  4829  00B2                     ??_read_top_tactile:	
  4830                           ; 1 bytes @ 0x12
  4831                           
  4832  00B2                     ??_solidring_tactiles:	
  4833                           ; 1 bytes @ 0x12
  4834                           
  4835  00B2                     ??_ring_tactiles:	
  4836                           ; 1 bytes @ 0x12
  4837                           
  4838  00B2                     ?_setSwitchBypassRelays:	
  4839                           ; 1 bytes @ 0x12
  4840                           
  4841  00B2                     setSwitchBypassRelays@f_state:	
  4842                           ; 1 bytes @ 0x12
  4843                           
  4844                           
  4845                           ; 2 bytes @ 0x12
  4846  00B2                     	ds	1
  4847  00B3                     ring_tactiles@iLed:	
  4848                           
  4849                           ; 2 bytes @ 0x13
  4850  00B3                     	ds	1
  4851  00B4                     ??_setSwitchBypassRelays:	
  4852  00B4                     ??___ftmul:	
  4853                           ; 1 bytes @ 0x14
  4854                           
  4855  00B4                     solidring_tactiles@ring_delay:	
  4856                           ; 1 bytes @ 0x14
  4857                           
  4858                           
  4859                           ; 1 bytes @ 0x14
  4860  00B4                     	ds	1
  4861  00B5                     ring_tactiles@iLed_1532:	
  4862                           
  4863                           ; 2 bytes @ 0x15
  4864  00B5                     	ds	1
  4865  00B6                     ?_setSwitchBypassState:	
  4866  00B6                     setSwitchBypassState@f_state:	
  4867                           ; 1 bytes @ 0x16
  4868                           
  4869                           
  4870                           ; 2 bytes @ 0x16
  4871  00B6                     	ds	1
  4872  00B7                     ??_showSave:	
  4873                           
  4874                           ; 1 bytes @ 0x17
  4875  00B7                     	ds	1
  4876  00B8                     ??_setSwitchBypassState:	
  4877  00B8                     ?_setDoublePressState:	
  4878                           ; 1 bytes @ 0x18
  4879                           
  4880  00B8                     ___ftmul@exp:	
  4881                           ; 1 bytes @ 0x18
  4882                           
  4883  00B8                     setDoublePressState@f_state:	
  4884                           ; 1 bytes @ 0x18
  4885                           
  4886                           
  4887                           ; 2 bytes @ 0x18
  4888  00B8                     	ds	1
  4889  00B9                     ___ftmul@f3_as_product:	
  4890                           
  4891                           ; 3 bytes @ 0x19
  4892  00B9                     	ds	1
  4893  00BA                     ??_initSwitchBypass:	
  4894  00BA                     ??_setDoublePressState:	
  4895                           ; 1 bytes @ 0x1A
  4896                           
  4897  00BA                     initSwitchBypass@initState:	
  4898                           ; 1 bytes @ 0x1A
  4899                           
  4900                           
  4901                           ; 2 bytes @ 0x1A
  4902  00BA                     	ds	2
  4903  00BC                     ??_updateSwitchBypass:	
  4904  00BC                     ??_updateSwitchTap:	
  4905                           ; 1 bytes @ 0x1C
  4906                           
  4907  00BC                     ___ftmul@cntr:	
  4908                           ; 1 bytes @ 0x1C
  4909                           
  4910                           
  4911                           ; 1 bytes @ 0x1C
  4912  00BC                     	ds	1
  4913  00BD                     ___ftmul@sign:	
  4914                           
  4915                           ; 1 bytes @ 0x1D
  4916  00BD                     	ds	1
  4917  00BE                     ?___ftneg:	
  4918  00BE                     ___ftneg@f1:	
  4919                           ; 3 bytes @ 0x1E
  4920                           
  4921                           
  4922                           ; 3 bytes @ 0x1E
  4923  00BE                     	ds	3
  4924  00C1                     ??___ftneg:	
  4925  00C1                     ?___ftadd:	
  4926                           ; 1 bytes @ 0x21
  4927                           
  4928  00C1                     ___ftadd@f1:	
  4929                           ; 3 bytes @ 0x21
  4930                           
  4931                           
  4932                           ; 3 bytes @ 0x21
  4933  00C1                     	ds	1
  4934  00C2                     updateSwitchTap@tapCntDivisor:	
  4935                           
  4936                           ; 2 bytes @ 0x22
  4937  00C2                     	ds	2
  4938  00C4                     updateSwitchTap@iCnt:	
  4939  00C4                     ___ftadd@f2:	
  4940                           ; 1 bytes @ 0x24
  4941                           
  4942                           
  4943                           ; 3 bytes @ 0x24
  4944  00C4                     	ds	3
  4945  00C7                     ??___ftadd:	
  4946                           
  4947                           ; 1 bytes @ 0x27
  4948  00C7                     	ds	4
  4949  00CB                     ___ftadd@sign:	
  4950                           
  4951                           ; 1 bytes @ 0x2B
  4952  00CB                     	ds	1
  4953  00CC                     ___ftadd@exp2:	
  4954                           
  4955                           ; 1 bytes @ 0x2C
  4956  00CC                     	ds	1
  4957  00CD                     ___ftadd@exp1:	
  4958                           
  4959                           ; 1 bytes @ 0x2D
  4960  00CD                     	ds	1
  4961  00CE                     ?___ftdiv:	
  4962  00CE                     ___ftdiv@f2:	
  4963                           ; 3 bytes @ 0x2E
  4964                           
  4965                           
  4966                           ; 3 bytes @ 0x2E
  4967  00CE                     	ds	3
  4968  00D1                     ___ftdiv@f1:	
  4969                           
  4970                           ; 3 bytes @ 0x31
  4971  00D1                     	ds	3
  4972  00D4                     ??___ftdiv:	
  4973                           
  4974                           ; 1 bytes @ 0x34
  4975  00D4                     	ds	4
  4976  00D8                     ___ftdiv@cntr:	
  4977                           
  4978                           ; 1 bytes @ 0x38
  4979  00D8                     	ds	1
  4980  00D9                     ___ftdiv@f3:	
  4981                           
  4982                           ; 3 bytes @ 0x39
  4983  00D9                     	ds	3
  4984  00DC                     ___ftdiv@exp:	
  4985                           
  4986                           ; 1 bytes @ 0x3C
  4987  00DC                     	ds	1
  4988  00DD                     ___ftdiv@sign:	
  4989                           
  4990                           ; 1 bytes @ 0x3D
  4991  00DD                     	ds	1
  4992  00DE                     ?_map:	
  4993  00DE                     map@x:	
  4994                           ; 3 bytes @ 0x3E
  4995                           
  4996                           
  4997                           ; 3 bytes @ 0x3E
  4998  00DE                     	ds	3
  4999  00E1                     map@in_min:	
  5000                           
  5001                           ; 3 bytes @ 0x41
  5002  00E1                     	ds	3
  5003  00E4                     map@in_max:	
  5004                           
  5005                           ; 3 bytes @ 0x44
  5006  00E4                     	ds	3
  5007  00E7                     map@out_min:	
  5008                           
  5009                           ; 3 bytes @ 0x47
  5010  00E7                     	ds	3
  5011  00EA                     map@out_max:	
  5012                           
  5013                           ; 3 bytes @ 0x4A
  5014  00EA                     	ds	3
  5015  00ED                     ??_map:	
  5016  00ED                     _map$2834:	
  5017                           ; 1 bytes @ 0x4D
  5018                           
  5019                           
  5020                           ; 3 bytes @ 0x4D
  5021  00ED                     	ds	3
  5022  00F0                     ??_scaleA10kPot:	
  5023  00F0                     ??_scaleiA10kPot:	
  5024                           ; 1 bytes @ 0x50
  5025                           
  5026  00F0                     ??_scaleA100kPot:	
  5027                           ; 1 bytes @ 0x50
  5028                           
  5029  00F0                     ??_modTri:	
  5030                           ; 1 bytes @ 0x50
  5031                           
  5032  00F0                     ??_modSquare:	
  5033                           ; 1 bytes @ 0x50
  5034                           
  5035  00F0                     ??_modSaw:	
  5036                           ; 1 bytes @ 0x50
  5037                           
  5038  00F0                     ??_eval_poly:	
  5039                           ; 1 bytes @ 0x50
  5040                           
  5041  00F0                     ??___wmul:	
  5042                           ; 1 bytes @ 0x50
  5043                           
  5044  00F0                     ??___ftsub:	
  5045                           ; 1 bytes @ 0x50
  5046                           
  5047                           
  5048                           	psect	cstackCOMMON
  5049  0070                     __pcstackCOMMON:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  0070                     ?_calcSinArray:	
  5053  0070                     ?_ConfigureOscillator:	
  5054                           ; 1 bytes @ 0x0
  5055                           
  5056  0070                     ?_InitApp:	
  5057                           ; 1 bytes @ 0x0
  5058                           
  5059  0070                     ?_InitializeTaps:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_initSwitchBypass:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_ReadSavedSettings:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_updateModulationArray:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_update_mode:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_update_selectMode:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?_updateSwitchBypass:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?_updateSwitchTap:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?_read_bottom_tactile:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     ?_read_top_tactile:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     ?_getModulationDelayTime:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     ?_init_adc:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     ?_init_pwm:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     ?_init_timer2:	
  5099                           ; 1 bytes @ 0x0
  5100                           
  5101  0070                     ?_init_timer0:	
  5102                           ; 1 bytes @ 0x0
  5103                           
  5104  0070                     ?_solidring_tactiles:	
  5105                           ; 1 bytes @ 0x0
  5106                           
  5107  0070                     ?_ring_tactiles:	
  5108                           ; 1 bytes @ 0x0
  5109                           
  5110  0070                     ?_resetRingLEDs:	
  5111                           ; 1 bytes @ 0x0
  5112                           
  5113  0070                     ?_setPedalMode:	
  5114                           ; 1 bytes @ 0x0
  5115                           
  5116  0070                     ?_setPresetDisplay:	
  5117                           ; 1 bytes @ 0x0
  5118                           
  5119  0070                     ?_setExpressionDisplay:	
  5120                           ; 1 bytes @ 0x0
  5121                           
  5122  0070                     ?_isr:	
  5123                           ; 1 bytes @ 0x0
  5124                           
  5125  0070                     ?_main:	
  5126                           ; 1 bytes @ 0x0
  5127                           
  5128  0070                     ?_showSave:	
  5129                           ; 1 bytes @ 0x0
  5130                           
  5131  0070                     ?i1_set_leds_top:	
  5132                           ; 1 bytes @ 0x0
  5133                           
  5134  0070                     ?i1_getModulationSubdivision:	
  5135                           ; 1 bytes @ 0x0
  5136                           
  5137  0070                     ?i1___awdiv:	
  5138                           ; 2 bytes @ 0x0
  5139                           
  5140  0070                     ?i1___lmul:	
  5141                           ; 2 bytes @ 0x0
  5142                           
  5143  0070                     i1set_leds_top@x:	
  5144                           ; 4 bytes @ 0x0
  5145                           
  5146  0070                     i1___awdiv@divisor:	
  5147                           ; 2 bytes @ 0x0
  5148                           
  5149  0070                     i1___lmul@multiplier:	
  5150                           ; 2 bytes @ 0x0
  5151                           
  5152                           
  5153                           ; 4 bytes @ 0x0
  5154  0070                     	ds	2
  5155  0072                     ??i1_getModulationSubdivision:	
  5156  0072                     i1set_leds_top@ledState:	
  5157                           ; 1 bytes @ 0x2
  5158                           
  5159  0072                     i1___awdiv@dividend:	
  5160                           ; 2 bytes @ 0x2
  5161                           
  5162                           
  5163                           ; 2 bytes @ 0x2
  5164  0072                     	ds	2
  5165  0074                     ??i1_set_leds_top:	
  5166  0074                     ??i1___awdiv:	
  5167                           ; 1 bytes @ 0x4
  5168                           
  5169  0074                     i1___lmul@multiplicand:	
  5170                           ; 1 bytes @ 0x4
  5171                           
  5172                           
  5173                           ; 4 bytes @ 0x4
  5174  0074                     	ds	1
  5175  0075                     i1___awdiv@counter:	
  5176                           
  5177                           ; 1 bytes @ 0x5
  5178  0075                     	ds	1
  5179  0076                     i1___awdiv@sign:	
  5180                           
  5181                           ; 1 bytes @ 0x6
  5182  0076                     	ds	1
  5183  0077                     i1___awdiv@quotient:	
  5184                           
  5185                           ; 2 bytes @ 0x7
  5186  0077                     	ds	1
  5187  0078                     ??i1___lmul:	
  5188  0078                     i1___lmul@product:	
  5189                           ; 1 bytes @ 0x8
  5190                           
  5191                           
  5192                           ; 4 bytes @ 0x8
  5193  0078                     	ds	4
  5194  007C                     ??i1___aldiv:	
  5195                           
  5196                           ; 1 bytes @ 0xC
  5197  007C                     	ds	1
  5198                           
  5199                           	psect	cstackBANK0
  5200  0020                     __pcstackBANK0:	
  5201  0020                     ?i1___aldiv:	
  5202  0020                     i1___aldiv@divisor:	
  5203                           ; 4 bytes @ 0x0
  5204                           
  5205                           
  5206                           ; 4 bytes @ 0x0
  5207  0020                     	ds	4
  5208  0024                     i1___aldiv@dividend:	
  5209                           
  5210                           ; 4 bytes @ 0x4
  5211  0024                     	ds	4
  5212  0028                     i1___aldiv@counter:	
  5213                           
  5214                           ; 1 bytes @ 0x8
  5215  0028                     	ds	1
  5216  0029                     i1___aldiv@sign:	
  5217                           
  5218                           ; 1 bytes @ 0x9
  5219  0029                     	ds	1
  5220  002A                     i1___aldiv@quotient:	
  5221                           
  5222                           ; 4 bytes @ 0xA
  5223  002A                     	ds	4
  5224  002E                     ?_modulation:	
  5225  002E                     modulation@x:	
  5226                           ; 4 bytes @ 0xE
  5227                           
  5228                           
  5229                           ; 4 bytes @ 0xE
  5230  002E                     	ds	4
  5231  0032                     modulation@y:	
  5232                           
  5233                           ; 4 bytes @ 0x12
  5234  0032                     	ds	4
  5235  0036                     ??_modulation:	
  5236                           
  5237                           ; 1 bytes @ 0x16
  5238  0036                     	ds	4
  5239  003A                     ??_isr:	
  5240                           
  5241                           ; 1 bytes @ 0x1A
  5242  003A                     	ds	10
  5243  0044                     isr@tmpModDelay:	
  5244                           
  5245                           ; 2 bytes @ 0x24
  5246  0044                     	ds	2
  5247                           
  5248                           	psect	maintext
  5249  035B                     __pmaintext:	
  5250 ;;
  5251 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5252 ;;
  5253 ;; *************** function _main *****************
  5254 ;; Defined at:
  5255 ;;		line 68 in file "main.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : B1F/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5271 ;;      Temps:          0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5272 ;;      Totals:         0       0       0       5       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5273 ;;Total ram usage:       14 bytes
  5274 ;; Hardware stack levels required when called:    9
  5275 ;; This function calls:
  5276 ;;		_ConfigureOscillator
  5277 ;;		_InitApp
  5278 ;;		_InitializeTaps
  5279 ;;		_ReadSavedSettings
  5280 ;;		_USARTInit
  5281 ;;		___awtoft
  5282 ;;		___fttol
  5283 ;;		_adc_convert
  5284 ;;		_calcSinArray
  5285 ;;		_getModulationDelayTime
  5286 ;;		_initSwitchBypass
  5287 ;;		_map
  5288 ;;		_read_bottom_tactile
  5289 ;;		_read_top_tactile
  5290 ;;		_scaleA100kPot
  5291 ;;		_scaleA10kPot
  5292 ;;		_scaleiA10kPot
  5293 ;;		_set_subdivision
  5294 ;;		_updateModulationArray
  5295 ;;		_updateSwitchBypass
  5296 ;;		_updateSwitchTap
  5297 ;;		_update_mode
  5298 ;;		_update_selectMode
  5299 ;; This function is called by:
  5300 ;;		Startup code after reset
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _main
  5306  035B                     _main:	
  5307                           
  5308                           ;main.c: 70: calcSinArray();
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5312  035B  31A7  277F  3183   	fcall	_calcSinArray
  5313                           
  5314                           ;main.c: 82: USARTInit(31250);
  5315  035E  3012               	movlw	18
  5316  035F  0021               	movlb	1	; select bank1
  5317  0360  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5318  0361  307A               	movlw	122
  5319  0362  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5320  0363  31A2  22E3  3183   	fcall	_USARTInit
  5321                           
  5322                           ;main.c: 83: ConfigureOscillator();
  5323  0366  31AD  2572  3183   	fcall	_ConfigureOscillator
  5324                           
  5325                           ;main.c: 84: InitApp();
  5326  0369  31AF  27A0  3183   	fcall	_InitApp
  5327                           
  5328                           ;main.c: 86: PORTEbits.RE0 = 1;
  5329  036C  0020               	movlb	0	; select bank0
  5330  036D  1410               	bsf	16,0	;volatile
  5331                           
  5332                           ;main.c: 87: PORTEbits.RE1 = 1;
  5333  036E  1490               	bsf	16,1	;volatile
  5334                           
  5335                           ;main.c: 88: PORTDbits.RD6 = 1;
  5336  036F  170F               	bsf	15,6	;volatile
  5337                           
  5338                           ;main.c: 89: PORTDbits.RD5 = 1;
  5339  0370  168F               	bsf	15,5	;volatile
  5340                           
  5341                           ;main.c: 90: PORTCbits.RC0 = 1;
  5342  0371  140E               	bsf	14,0	;volatile
  5343                           
  5344                           ;main.c: 91: PORTDbits.RD7 = 1;
  5345  0372  178F               	bsf	15,7	;volatile
  5346                           
  5347                           ;main.c: 93: InitializeTaps();
  5348  0373  3190  2000  3183   	fcall	_InitializeTaps
  5349                           
  5350                           ;main.c: 94: initSwitchBypass();
  5351  0376  3187  27F0  3183   	fcall	_initSwitchBypass
  5352                           
  5353                           ;main.c: 97: ReadSavedSettings();
  5354  0379  31A7  2709  3183   	fcall	_ReadSavedSettings
  5355  037C                     L1:	
  5356                           
  5357                           ;main.c: 98: updateModulationArray();
  5358  037C  318D  25DD  3183   	fcall	_updateModulationArray
  5359  037F                     l9222:	
  5360                           ;main.c: 99: while (1) {
  5361                           
  5362                           
  5363                           ;main.c: 102: update_mode();
  5364  037F  31A0  207D  3183   	fcall	_update_mode
  5365                           
  5366                           ;main.c: 103: update_selectMode();
  5367  0382  31A5  25D9  3183   	fcall	_update_selectMode
  5368                           
  5369                           ;main.c: 106: updateSwitchBypass();
  5370  0385  3192  2232  3183   	fcall	_updateSwitchBypass
  5371                           
  5372                           ;main.c: 107: if (presetSaveMode != 1) {
  5373  0388  0020               	movlb	0	; select bank0
  5374  0389  0356               	decf	_presetSaveMode,w
  5375  038A  1903               	btfsc	3,2
  5376  038B  2B8F               	goto	l9232
  5377                           
  5378                           ;main.c: 108: updateSwitchTap();
  5379  038C  3189  21FD  3183   	fcall	_updateSwitchTap
  5380  038F                     l9232:	
  5381                           
  5382                           ;main.c: 109: }
  5383                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5384  038F  0020               	movlb	0	; select bank0
  5385  0390  0356               	decf	_presetSaveMode,w
  5386  0391  1903               	btfsc	3,2
  5387  0392  2B9E               	goto	l9238
  5388  0393  0855               	movf	_mode2_state,w
  5389  0394  0023               	movlb	3	; select bank3
  5390  0395  0661               	xorwf	_presetModeCnst^(0+384),w
  5391  0396  1903               	skipnz
  5392  0397  2B9E               	goto	l9238
  5393                           
  5394                           ;main.c: 112: read_bottom_tactile();
  5395  0398  31A3  2326  3183   	fcall	_read_bottom_tactile
  5396                           
  5397                           ;main.c: 113: read_top_tactile();
  5398  039B  31A3  23FD  3183   	fcall	_read_top_tactile
  5399  039E                     l9238:	
  5400                           
  5401                           ;main.c: 114: }
  5402                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5403  039E  3000               	movlw	0
  5404  039F  31AD  25C6  3183   	fcall	_adc_convert
  5405  03A2  0021               	movlb	1	; select bank1
  5406  03A3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5407  03A4  0023               	movlb	3	; select bank3
  5408  03A5  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5409  03A6  0021               	movlb	1	; select bank1
  5410  03A7  0820               	movf	?_adc_convert^(0+128),w
  5411  03A8  0023               	movlb	3	; select bank3
  5412  03A9  00AC               	movwf	_knob_1_pos^(0+384)
  5413                           
  5414                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5415  03AA  3001               	movlw	1
  5416  03AB  31AD  25C6  3183   	fcall	_adc_convert
  5417  03AE  0021               	movlb	1	; select bank1
  5418  03AF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5419  03B0  0023               	movlb	3	; select bank3
  5420  03B1  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5421  03B2  0021               	movlb	1	; select bank1
  5422  03B3  0820               	movf	?_adc_convert^(0+128),w
  5423  03B4  0023               	movlb	3	; select bank3
  5424  03B5  00AE               	movwf	_knob_2_pos^(0+384)
  5425                           
  5426                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5427  03B6  3002               	movlw	2
  5428  03B7  31AD  25C6  3183   	fcall	_adc_convert
  5429  03BA  0021               	movlb	1	; select bank1
  5430  03BB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5431  03BC  0023               	movlb	3	; select bank3
  5432  03BD  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5433  03BE  0021               	movlb	1	; select bank1
  5434  03BF  0820               	movf	?_adc_convert^(0+128),w
  5435  03C0  0023               	movlb	3	; select bank3
  5436  03C1  00B0               	movwf	_knob_3_pos^(0+384)
  5437                           
  5438                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5439  03C2  3003               	movlw	3
  5440  03C3  31AD  25C6  3183   	fcall	_adc_convert
  5441  03C6  0021               	movlb	1	; select bank1
  5442  03C7  0821               	movf	(?_adc_convert+1)^(0+128),w
  5443  03C8  0023               	movlb	3	; select bank3
  5444  03C9  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5445  03CA  0021               	movlb	1	; select bank1
  5446  03CB  0820               	movf	?_adc_convert^(0+128),w
  5447  03CC  0023               	movlb	3	; select bank3
  5448  03CD  00B2               	movwf	_knob_4_pos^(0+384)
  5449                           
  5450                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5451  03CE  3004               	movlw	4
  5452  03CF  31AD  25C6  3183   	fcall	_adc_convert
  5453  03D2  0021               	movlb	1	; select bank1
  5454  03D3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5455  03D4  0023               	movlb	3	; select bank3
  5456  03D5  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5457  03D6  0021               	movlb	1	; select bank1
  5458  03D7  0820               	movf	?_adc_convert^(0+128),w
  5459  03D8  0023               	movlb	3	; select bank3
  5460  03D9  00B4               	movwf	_knob_5_pos^(0+384)
  5461                           
  5462                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5463  03DA  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5464  03DB  0022               	movlb	2	; select bank2
  5465  03DC  00EA               	movwf	??_main^(0+256)
  5466  03DD  0023               	movlb	3	; select bank3
  5467  03DE  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5468  03DF  0022               	movlb	2	; select bank2
  5469  03E0  00EB               	movwf	(??_main^(0+256)+1)
  5470  03E1  0AEA               	incf	??_main^(0+256),f
  5471  03E2  1903               	skipnz
  5472  03E3  0AEB               	incf	(??_main^(0+256)+1),f
  5473  03E4  0023               	movlb	3	; select bank3
  5474  03E5  082C               	movf	_knob_1_pos^(0+384),w
  5475  03E6  0022               	movlb	2	; select bank2
  5476  03E7  076A               	addwf	??_main^(0+256),w
  5477  03E8  00EC               	movwf	(??_main+2)^(0+256)
  5478  03E9  0023               	movlb	3	; select bank3
  5479  03EA  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5480  03EB  0022               	movlb	2	; select bank2
  5481  03EC  3D6B               	addwfc	(??_main+1)^(0+256),w
  5482  03ED  00ED               	movwf	(??_main+3)^(0+256)
  5483  03EE  086D               	movf	(??_main+3)^(0+256),w
  5484  03EF  3A80               	xorlw	128
  5485  03F0  00EE               	movwf	(??_main+4)^(0+256)
  5486  03F1  3080               	movlw	128
  5487  03F2  026E               	subwf	(??_main+4)^(0+256),w
  5488  03F3  1D03               	skipz
  5489  03F4  2BF7               	goto	u10235
  5490  03F5  3004               	movlw	4
  5491  03F6  026C               	subwf	(??_main+2)^(0+256),w
  5492  03F7                     u10235:	
  5493  03F7  1803               	skipnc
  5494  03F8  2C19               	goto	l9252
  5495  03F9  0023               	movlb	3	; select bank3
  5496  03FA  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5497  03FB  0022               	movlb	2	; select bank2
  5498  03FC  00EA               	movwf	??_main^(0+256)
  5499  03FD  0023               	movlb	3	; select bank3
  5500  03FE  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5501  03FF  0022               	movlb	2	; select bank2
  5502  0400  00EB               	movwf	(??_main^(0+256)+1)
  5503  0401  0AEA               	incf	??_main^(0+256),f
  5504  0402  1903               	skipnz
  5505  0403  0AEB               	incf	(??_main^(0+256)+1),f
  5506  0404  0023               	movlb	3	; select bank3
  5507  0405  082C               	movf	_knob_1_pos^(0+384),w
  5508  0406  0022               	movlb	2	; select bank2
  5509  0407  076A               	addwf	??_main^(0+256),w
  5510  0408  00EC               	movwf	(??_main+2)^(0+256)
  5511  0409  0023               	movlb	3	; select bank3
  5512  040A  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5513  040B  0022               	movlb	2	; select bank2
  5514  040C  3D6B               	addwfc	(??_main+1)^(0+256),w
  5515  040D  00ED               	movwf	(??_main+3)^(0+256)
  5516  040E  086D               	movf	(??_main+3)^(0+256),w
  5517  040F  3A80               	xorlw	128
  5518  0410  00EE               	movwf	(??_main+4)^(0+256)
  5519  0411  307F               	movlw	127
  5520  0412  026E               	subwf	(??_main+4)^(0+256),w
  5521  0413  1D03               	skipz
  5522  0414  2C17               	goto	u10245
  5523  0415  30FD               	movlw	253
  5524  0416  026C               	subwf	(??_main+2)^(0+256),w
  5525  0417                     u10245:	
  5526  0417  1803               	skipnc
  5527  0418  2C77               	goto	l9262
  5528  0419                     l9252:	
  5529                           
  5530                           ;main.c: 126: knob1_prev = knob_1_pos;
  5531  0419  0023               	movlb	3	; select bank3
  5532  041A  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5533  041B  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5534  041C  082C               	movf	_knob_1_pos^(0+384),w
  5535  041D  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5536                           
  5537                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5538  041E  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5539  041F  0021               	movlb	1	; select bank1
  5540  0420  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5541  0421  0023               	movlb	3	; select bank3
  5542  0422  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5543  0423  0021               	movlb	1	; select bank1
  5544  0424  00A8               	movwf	___awtoft@c^(0+128)
  5545  0425  31AE  26D5  3183   	fcall	___awtoft
  5546  0428  0021               	movlb	1	; select bank1
  5547  0429  0828               	movf	?___awtoft^(0+128),w
  5548  042A  0024               	movlb	4	; select bank4
  5549  042B  00D5               	movwf	_main$2831^(0+512)
  5550  042C  0021               	movlb	1	; select bank1
  5551  042D  0829               	movf	(?___awtoft+1)^(0+128),w
  5552  042E  0024               	movlb	4	; select bank4
  5553  042F  00D6               	movwf	(_main$2831+1)^(0+512)
  5554  0430  0021               	movlb	1	; select bank1
  5555  0431  082A               	movf	(?___awtoft+2)^(0+128),w
  5556  0432  0024               	movlb	4	; select bank4
  5557  0433  00D7               	movwf	(_main$2831+2)^(0+512)
  5558                           
  5559                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5560  0434  0855               	movf	_main$2831^(0+512),w
  5561  0435  0022               	movlb	2	; select bank2
  5562  0436  00E7               	movwf	scaleA10kPot@input^(0+256)
  5563  0437  0024               	movlb	4	; select bank4
  5564  0438  0856               	movf	(_main$2831+1)^(0+512),w
  5565  0439  0022               	movlb	2	; select bank2
  5566  043A  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5567  043B  0024               	movlb	4	; select bank4
  5568  043C  0857               	movf	(_main$2831+2)^(0+512),w
  5569  043D  0022               	movlb	2	; select bank2
  5570  043E  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5571  043F  319B  2358  3183   	fcall	_scaleA10kPot
  5572  0442  0022               	movlb	2	; select bank2
  5573  0443  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5574  0444  0026               	movlb	6	; select bank6
  5575  0445  0099               	movwf	25	;volatile
  5576  0446  0022               	movlb	2	; select bank2
  5577  0447  0867               	movf	?_scaleA10kPot^(0+256),w
  5578  0448  0026               	movlb	6	; select bank6
  5579  0449  0098               	movwf	24	;volatile
  5580                           
  5581                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5582  044A  0023               	movlb	3	; select bank3
  5583  044B  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5584  044C  0021               	movlb	1	; select bank1
  5585  044D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5586  044E  0023               	movlb	3	; select bank3
  5587  044F  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5588  0450  0021               	movlb	1	; select bank1
  5589  0451  00A8               	movwf	___awtoft@c^(0+128)
  5590  0452  31AE  26D5  3183   	fcall	___awtoft
  5591  0455  0021               	movlb	1	; select bank1
  5592  0456  0828               	movf	?___awtoft^(0+128),w
  5593  0457  0024               	movlb	4	; select bank4
  5594  0458  00D8               	movwf	_main$2832^(0+512)
  5595  0459  0021               	movlb	1	; select bank1
  5596  045A  0829               	movf	(?___awtoft+1)^(0+128),w
  5597  045B  0024               	movlb	4	; select bank4
  5598  045C  00D9               	movwf	(_main$2832+1)^(0+512)
  5599  045D  0021               	movlb	1	; select bank1
  5600  045E  082A               	movf	(?___awtoft+2)^(0+128),w
  5601  045F  0024               	movlb	4	; select bank4
  5602  0460  00DA               	movwf	(_main$2832+2)^(0+512)
  5603                           
  5604                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5605  0461  0858               	movf	_main$2832^(0+512),w
  5606  0462  0022               	movlb	2	; select bank2
  5607  0463  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5608  0464  0024               	movlb	4	; select bank4
  5609  0465  0859               	movf	(_main$2832+1)^(0+512),w
  5610  0466  0022               	movlb	2	; select bank2
  5611  0467  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5612  0468  0024               	movlb	4	; select bank4
  5613  0469  085A               	movf	(_main$2832+2)^(0+512),w
  5614  046A  0022               	movlb	2	; select bank2
  5615  046B  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5616  046C  319D  25D0  3183   	fcall	_scaleiA10kPot
  5617  046F  0022               	movlb	2	; select bank2
  5618  0470  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5619  0471  0026               	movlb	6	; select bank6
  5620  0472  009D               	movwf	29	;volatile
  5621  0473  0022               	movlb	2	; select bank2
  5622  0474  0867               	movf	?_scaleiA10kPot^(0+256),w
  5623  0475  0026               	movlb	6	; select bank6
  5624  0476  009C               	movwf	28	;volatile
  5625  0477                     l9262:	
  5626                           
  5627                           ;main.c: 130: }
  5628                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5629  0477  0023               	movlb	3	; select bank3
  5630  0478  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5631  0479  0022               	movlb	2	; select bank2
  5632  047A  00EA               	movwf	??_main^(0+256)
  5633  047B  0023               	movlb	3	; select bank3
  5634  047C  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5635  047D  0022               	movlb	2	; select bank2
  5636  047E  00EB               	movwf	(??_main^(0+256)+1)
  5637  047F  0AEA               	incf	??_main^(0+256),f
  5638  0480  1903               	skipnz
  5639  0481  0AEB               	incf	(??_main^(0+256)+1),f
  5640  0482  0023               	movlb	3	; select bank3
  5641  0483  082E               	movf	_knob_2_pos^(0+384),w
  5642  0484  0022               	movlb	2	; select bank2
  5643  0485  076A               	addwf	??_main^(0+256),w
  5644  0486  00EC               	movwf	(??_main+2)^(0+256)
  5645  0487  0023               	movlb	3	; select bank3
  5646  0488  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5647  0489  0022               	movlb	2	; select bank2
  5648  048A  3D6B               	addwfc	(??_main+1)^(0+256),w
  5649  048B  00ED               	movwf	(??_main+3)^(0+256)
  5650  048C  086D               	movf	(??_main+3)^(0+256),w
  5651  048D  3A80               	xorlw	128
  5652  048E  00EE               	movwf	(??_main+4)^(0+256)
  5653  048F  3080               	movlw	128
  5654  0490  026E               	subwf	(??_main+4)^(0+256),w
  5655  0491  1D03               	skipz
  5656  0492  2C95               	goto	u10255
  5657  0493  3004               	movlw	4
  5658  0494  026C               	subwf	(??_main+2)^(0+256),w
  5659  0495                     u10255:	
  5660  0495  1803               	skipnc
  5661  0496  2CB7               	goto	l9266
  5662  0497  0023               	movlb	3	; select bank3
  5663  0498  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5664  0499  0022               	movlb	2	; select bank2
  5665  049A  00EA               	movwf	??_main^(0+256)
  5666  049B  0023               	movlb	3	; select bank3
  5667  049C  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5668  049D  0022               	movlb	2	; select bank2
  5669  049E  00EB               	movwf	(??_main^(0+256)+1)
  5670  049F  0AEA               	incf	??_main^(0+256),f
  5671  04A0  1903               	skipnz
  5672  04A1  0AEB               	incf	(??_main^(0+256)+1),f
  5673  04A2  0023               	movlb	3	; select bank3
  5674  04A3  082E               	movf	_knob_2_pos^(0+384),w
  5675  04A4  0022               	movlb	2	; select bank2
  5676  04A5  076A               	addwf	??_main^(0+256),w
  5677  04A6  00EC               	movwf	(??_main+2)^(0+256)
  5678  04A7  0023               	movlb	3	; select bank3
  5679  04A8  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5680  04A9  0022               	movlb	2	; select bank2
  5681  04AA  3D6B               	addwfc	(??_main+1)^(0+256),w
  5682  04AB  00ED               	movwf	(??_main+3)^(0+256)
  5683  04AC  086D               	movf	(??_main+3)^(0+256),w
  5684  04AD  3A80               	xorlw	128
  5685  04AE  00EE               	movwf	(??_main+4)^(0+256)
  5686  04AF  307F               	movlw	127
  5687  04B0  026E               	subwf	(??_main+4)^(0+256),w
  5688  04B1  1D03               	skipz
  5689  04B2  2CB5               	goto	u10265
  5690  04B3  30FD               	movlw	253
  5691  04B4  026C               	subwf	(??_main+2)^(0+256),w
  5692  04B5                     u10265:	
  5693  04B5  1803               	skipnc
  5694  04B6  2D2D               	goto	l9276
  5695  04B7                     l9266:	
  5696                           
  5697                           ;main.c: 135: knob2_prev = knob_2_pos;
  5698  04B7  0023               	movlb	3	; select bank3
  5699  04B8  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5700  04B9  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5701  04BA  082E               	movf	_knob_2_pos^(0+384),w
  5702  04BB  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5703                           
  5704                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5705  04BC  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5706  04BD  0022               	movlb	2	; select bank2
  5707  04BE  00EA               	movwf	??_main^(0+256)
  5708  04BF  0023               	movlb	3	; select bank3
  5709  04C0  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5710  04C1  0022               	movlb	2	; select bank2
  5711  04C2  00EB               	movwf	(??_main^(0+256)+1)
  5712  04C3  0AEA               	incf	??_main^(0+256),f
  5713  04C4  1903               	skipnz
  5714  04C5  0AEB               	incf	(??_main^(0+256)+1),f
  5715  04C6  086A               	movf	??_main^(0+256),w
  5716  04C7  3EFF               	addlw	255
  5717  04C8  0021               	movlb	1	; select bank1
  5718  04C9  00A8               	movwf	___awtoft@c^(0+128)
  5719  04CA  3003               	movlw	3
  5720  04CB  0022               	movlb	2	; select bank2
  5721  04CC  3D6B               	addwfc	(??_main+1)^(0+256),w
  5722  04CD  0021               	movlb	1	; select bank1
  5723  04CE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5724  04CF  31AE  26D5  3183   	fcall	___awtoft
  5725  04D2  0021               	movlb	1	; select bank1
  5726  04D3  0828               	movf	?___awtoft^(0+128),w
  5727  04D4  0024               	movlb	4	; select bank4
  5728  04D5  00DB               	movwf	_main$2833^(0+512)
  5729  04D6  0021               	movlb	1	; select bank1
  5730  04D7  0829               	movf	(?___awtoft+1)^(0+128),w
  5731  04D8  0024               	movlb	4	; select bank4
  5732  04D9  00DC               	movwf	(_main$2833+1)^(0+512)
  5733  04DA  0021               	movlb	1	; select bank1
  5734  04DB  082A               	movf	(?___awtoft+2)^(0+128),w
  5735  04DC  0024               	movlb	4	; select bank4
  5736  04DD  00DD               	movwf	(_main$2833+2)^(0+512)
  5737                           
  5738                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5739  04DE  085B               	movf	_main$2833^(0+512),w
  5740  04DF  0022               	movlb	2	; select bank2
  5741  04E0  00E7               	movwf	scaleA100kPot@input^(0+256)
  5742  04E1  0024               	movlb	4	; select bank4
  5743  04E2  085C               	movf	(_main$2833+1)^(0+512),w
  5744  04E3  0022               	movlb	2	; select bank2
  5745  04E4  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5746  04E5  0024               	movlb	4	; select bank4
  5747  04E6  085D               	movf	(_main$2833+2)^(0+512),w
  5748  04E7  0022               	movlb	2	; select bank2
  5749  04E8  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5750  04E9  3199  2135  3183   	fcall	_scaleA100kPot
  5751  04EC  0022               	movlb	2	; select bank2
  5752  04ED  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5753  04EE  0025               	movlb	5	; select bank5
  5754  04EF  0092               	movwf	18	;volatile
  5755  04F0  0022               	movlb	2	; select bank2
  5756  04F1  0867               	movf	?_scaleA100kPot^(0+256),w
  5757  04F2  0025               	movlb	5	; select bank5
  5758  04F3  0091               	movwf	17	;volatile
  5759                           
  5760                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5761  04F4  0023               	movlb	3	; select bank3
  5762  04F5  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5763  04F6  0022               	movlb	2	; select bank2
  5764  04F7  00EA               	movwf	??_main^(0+256)
  5765  04F8  0023               	movlb	3	; select bank3
  5766  04F9  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5767  04FA  0022               	movlb	2	; select bank2
  5768  04FB  00EB               	movwf	(??_main^(0+256)+1)
  5769  04FC  0AEA               	incf	??_main^(0+256),f
  5770  04FD  1903               	skipnz
  5771  04FE  0AEB               	incf	(??_main^(0+256)+1),f
  5772  04FF  086A               	movf	??_main^(0+256),w
  5773  0500  3EFF               	addlw	255
  5774  0501  0021               	movlb	1	; select bank1
  5775  0502  00A8               	movwf	___awtoft@c^(0+128)
  5776  0503  3003               	movlw	3
  5777  0504  0022               	movlb	2	; select bank2
  5778  0505  3D6B               	addwfc	(??_main+1)^(0+256),w
  5779  0506  0021               	movlb	1	; select bank1
  5780  0507  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5781  0508  31AE  26D5  3183   	fcall	___awtoft
  5782  050B  0021               	movlb	1	; select bank1
  5783  050C  0828               	movf	?___awtoft^(0+128),w
  5784  050D  0024               	movlb	4	; select bank4
  5785  050E  00DB               	movwf	_main$2833^(0+512)
  5786  050F  0021               	movlb	1	; select bank1
  5787  0510  0829               	movf	(?___awtoft+1)^(0+128),w
  5788  0511  0024               	movlb	4	; select bank4
  5789  0512  00DC               	movwf	(_main$2833+1)^(0+512)
  5790  0513  0021               	movlb	1	; select bank1
  5791  0514  082A               	movf	(?___awtoft+2)^(0+128),w
  5792  0515  0024               	movlb	4	; select bank4
  5793  0516  00DD               	movwf	(_main$2833+2)^(0+512)
  5794                           
  5795                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5796  0517  085B               	movf	_main$2833^(0+512),w
  5797  0518  0022               	movlb	2	; select bank2
  5798  0519  00E7               	movwf	scaleA100kPot@input^(0+256)
  5799  051A  0024               	movlb	4	; select bank4
  5800  051B  085C               	movf	(_main$2833+1)^(0+512),w
  5801  051C  0022               	movlb	2	; select bank2
  5802  051D  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5803  051E  0024               	movlb	4	; select bank4
  5804  051F  085D               	movf	(_main$2833+2)^(0+512),w
  5805  0520  0022               	movlb	2	; select bank2
  5806  0521  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5807  0522  3199  2135  3183   	fcall	_scaleA100kPot
  5808  0525  0022               	movlb	2	; select bank2
  5809  0526  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5810  0527  0025               	movlb	5	; select bank5
  5811  0528  0099               	movwf	25	;volatile
  5812  0529  0022               	movlb	2	; select bank2
  5813  052A  0867               	movf	?_scaleA100kPot^(0+256),w
  5814  052B  0025               	movlb	5	; select bank5
  5815  052C  0098               	movwf	24	;volatile
  5816  052D                     l9276:	
  5817                           
  5818                           ;main.c: 138: }
  5819                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5820  052D  0023               	movlb	3	; select bank3
  5821  052E  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5822  052F  0022               	movlb	2	; select bank2
  5823  0530  00EA               	movwf	??_main^(0+256)
  5824  0531  0023               	movlb	3	; select bank3
  5825  0532  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5826  0533  0022               	movlb	2	; select bank2
  5827  0534  00EB               	movwf	(??_main^(0+256)+1)
  5828  0535  0AEA               	incf	??_main^(0+256),f
  5829  0536  1903               	skipnz
  5830  0537  0AEB               	incf	(??_main^(0+256)+1),f
  5831  0538  0023               	movlb	3	; select bank3
  5832  0539  0830               	movf	_knob_3_pos^(0+384),w
  5833  053A  0022               	movlb	2	; select bank2
  5834  053B  076A               	addwf	??_main^(0+256),w
  5835  053C  00EC               	movwf	(??_main+2)^(0+256)
  5836  053D  0023               	movlb	3	; select bank3
  5837  053E  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5838  053F  0022               	movlb	2	; select bank2
  5839  0540  3D6B               	addwfc	(??_main+1)^(0+256),w
  5840  0541  00ED               	movwf	(??_main+3)^(0+256)
  5841  0542  086D               	movf	(??_main+3)^(0+256),w
  5842  0543  3A80               	xorlw	128
  5843  0544  00EE               	movwf	(??_main+4)^(0+256)
  5844  0545  3080               	movlw	128
  5845  0546  026E               	subwf	(??_main+4)^(0+256),w
  5846  0547  1D03               	skipz
  5847  0548  2D4B               	goto	u10275
  5848  0549  3004               	movlw	4
  5849  054A  026C               	subwf	(??_main+2)^(0+256),w
  5850  054B                     u10275:	
  5851  054B  1803               	skipnc
  5852  054C  2D6D               	goto	l9280
  5853  054D  0023               	movlb	3	; select bank3
  5854  054E  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5855  054F  0022               	movlb	2	; select bank2
  5856  0550  00EA               	movwf	??_main^(0+256)
  5857  0551  0023               	movlb	3	; select bank3
  5858  0552  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5859  0553  0022               	movlb	2	; select bank2
  5860  0554  00EB               	movwf	(??_main^(0+256)+1)
  5861  0555  0AEA               	incf	??_main^(0+256),f
  5862  0556  1903               	skipnz
  5863  0557  0AEB               	incf	(??_main^(0+256)+1),f
  5864  0558  0023               	movlb	3	; select bank3
  5865  0559  0830               	movf	_knob_3_pos^(0+384),w
  5866  055A  0022               	movlb	2	; select bank2
  5867  055B  076A               	addwf	??_main^(0+256),w
  5868  055C  00EC               	movwf	(??_main+2)^(0+256)
  5869  055D  0023               	movlb	3	; select bank3
  5870  055E  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5871  055F  0022               	movlb	2	; select bank2
  5872  0560  3D6B               	addwfc	(??_main+1)^(0+256),w
  5873  0561  00ED               	movwf	(??_main+3)^(0+256)
  5874  0562  086D               	movf	(??_main+3)^(0+256),w
  5875  0563  3A80               	xorlw	128
  5876  0564  00EE               	movwf	(??_main+4)^(0+256)
  5877  0565  307F               	movlw	127
  5878  0566  026E               	subwf	(??_main+4)^(0+256),w
  5879  0567  1D03               	skipz
  5880  0568  2D6B               	goto	u10285
  5881  0569  30FD               	movlw	253
  5882  056A  026C               	subwf	(??_main+2)^(0+256),w
  5883  056B                     u10285:	
  5884  056B  1803               	skipnc
  5885  056C  2DD9               	goto	l9292
  5886  056D                     l9280:	
  5887                           
  5888                           ;main.c: 149: knob3_prev = knob_3_pos;
  5889  056D  0023               	movlb	3	; select bank3
  5890  056E  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5891  056F  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5892  0570  0830               	movf	_knob_3_pos^(0+384),w
  5893  0571  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5894                           
  5895                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5896  0572  3080               	movlw	128
  5897  0573  0021               	movlb	1	; select bank1
  5898  0574  00EA               	movwf	map@out_max^(0+128)
  5899  0575  309D               	movlw	157
  5900  0576  00EB               	movwf	(map@out_max+1)^(0+128)
  5901  0577  3043               	movlw	67
  5902  0578  00EC               	movwf	(map@out_max+2)^(0+128)
  5903  0579  3000               	movlw	0
  5904  057A  00E7               	movwf	map@out_min^(0+128)
  5905  057B  3034               	movlw	52
  5906  057C  00E8               	movwf	(map@out_min+1)^(0+128)
  5907  057D  3042               	movlw	66
  5908  057E  00E9               	movwf	(map@out_min+2)^(0+128)
  5909  057F  30C0               	movlw	192
  5910  0580  00E4               	movwf	map@in_max^(0+128)
  5911  0581  307F               	movlw	127
  5912  0582  00E5               	movwf	(map@in_max+1)^(0+128)
  5913  0583  3044               	movlw	68
  5914  0584  00E6               	movwf	(map@in_max+2)^(0+128)
  5915  0585  3000               	movlw	0
  5916  0586  00E1               	movwf	map@in_min^(0+128)
  5917  0587  3000               	movlw	0
  5918  0588  00E2               	movwf	(map@in_min+1)^(0+128)
  5919  0589  3000               	movlw	0
  5920  058A  00E3               	movwf	(map@in_min+2)^(0+128)
  5921  058B  0023               	movlb	3	; select bank3
  5922  058C  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5923  058D  0021               	movlb	1	; select bank1
  5924  058E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5925  058F  0023               	movlb	3	; select bank3
  5926  0590  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5927  0591  0021               	movlb	1	; select bank1
  5928  0592  00A8               	movwf	___awtoft@c^(0+128)
  5929  0593  31AE  26D5  3183   	fcall	___awtoft
  5930  0596  0021               	movlb	1	; select bank1
  5931  0597  0828               	movf	?___awtoft^(0+128),w
  5932  0598  00DE               	movwf	map@x^(0+128)
  5933  0599  0829               	movf	(?___awtoft+1)^(0+128),w
  5934  059A  00DF               	movwf	(map@x+1)^(0+128)
  5935  059B  082A               	movf	(?___awtoft+2)^(0+128),w
  5936  059C  00E0               	movwf	(map@x+2)^(0+128)
  5937  059D  319A  2241  3183   	fcall	_map
  5938  05A0  0021               	movlb	1	; select bank1
  5939  05A1  085E               	movf	?_map^(0+128),w
  5940  05A2  0022               	movlb	2	; select bank2
  5941  05A3  00A0               	movwf	___fttol@f1^(0+256)
  5942  05A4  0021               	movlb	1	; select bank1
  5943  05A5  085F               	movf	(?_map+1)^(0+128),w
  5944  05A6  0022               	movlb	2	; select bank2
  5945  05A7  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5946  05A8  0021               	movlb	1	; select bank1
  5947  05A9  0860               	movf	(?_map+2)^(0+128),w
  5948  05AA  0022               	movlb	2	; select bank2
  5949  05AB  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5950  05AC  3199  21BA  3183   	fcall	___fttol
  5951  05AF  0022               	movlb	2	; select bank2
  5952  05B0  0821               	movf	(?___fttol^(0+256)+1),w
  5953  05B1  0023               	movlb	3	; select bank3
  5954  05B2  00DA               	movwf	(_symmetry+1)^(0+384)
  5955  05B3  0022               	movlb	2	; select bank2
  5956  05B4  0820               	movf	?___fttol^(0+256),w
  5957  05B5  0023               	movlb	3	; select bank3
  5958  05B6  00D9               	movwf	_symmetry^(0+384)
  5959                           
  5960                           ;main.c: 152: modulation_changed = 1;
  5961  05B7  01C3               	clrf	_modulation_changed^(0+384)
  5962  05B8  0AC3               	incf	_modulation_changed^(0+384),f
  5963                           
  5964                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5965  05B9  085A               	movf	(_symmetry+1)^(0+384),w
  5966  05BA  3A80               	xorlw	128
  5967  05BB  0022               	movlb	2	; select bank2
  5968  05BC  00EA               	movwf	??_main^(0+256)
  5969  05BD  3080               	movlw	128
  5970  05BE  026A               	subwf	??_main^(0+256),w
  5971  05BF  1D03               	skipz
  5972  05C0  2DC4               	goto	u10295
  5973  05C1  30AF               	movlw	175
  5974  05C2  0023               	movlb	3	; select bank3
  5975  05C3  0259               	subwf	_symmetry^(0+384),w
  5976  05C4                     u10295:	
  5977  05C4  1C03               	skipc
  5978  05C5  2DD7               	goto	l359
  5979  05C6  0023               	movlb	3	; select bank3
  5980  05C7  085A               	movf	(_symmetry+1)^(0+384),w
  5981  05C8  3A80               	xorlw	128
  5982  05C9  0022               	movlb	2	; select bank2
  5983  05CA  00EA               	movwf	??_main^(0+256)
  5984  05CB  3080               	movlw	128
  5985  05CC  026A               	subwf	??_main^(0+256),w
  5986  05CD  1D03               	skipz
  5987  05CE  2DD2               	goto	u10305
  5988  05CF  30B9               	movlw	185
  5989  05D0  0023               	movlb	3	; select bank3
  5990  05D1  0259               	subwf	_symmetry^(0+384),w
  5991  05D2                     u10305:	
  5992  05D2  1803               	skipnc
  5993  05D3  2DD7               	goto	l359
  5994                           
  5995                           ;main.c: 154: LATBbits.LATB1 = 1;
  5996  05D4  0022               	movlb	2	; select bank2
  5997  05D5  148D               	bsf	13,1	;volatile
  5998                           
  5999                           ;main.c: 155: } else {
  6000  05D6  2DD9               	goto	l9292
  6001  05D7                     l359:	
  6002                           
  6003                           ;main.c: 156: LATBbits.LATB1 = 0;
  6004  05D7  0022               	movlb	2	; select bank2
  6005  05D8  108D               	bcf	13,1	;volatile
  6006  05D9                     l9292:	
  6007                           
  6008                           ;main.c: 157: }
  6009                           ;main.c: 158: }
  6010                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6011  05D9  0023               	movlb	3	; select bank3
  6012  05DA  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6013  05DB  0022               	movlb	2	; select bank2
  6014  05DC  00EA               	movwf	??_main^(0+256)
  6015  05DD  0023               	movlb	3	; select bank3
  6016  05DE  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6017  05DF  0022               	movlb	2	; select bank2
  6018  05E0  00EB               	movwf	(??_main^(0+256)+1)
  6019  05E1  0AEA               	incf	??_main^(0+256),f
  6020  05E2  1903               	skipnz
  6021  05E3  0AEB               	incf	(??_main^(0+256)+1),f
  6022  05E4  0023               	movlb	3	; select bank3
  6023  05E5  0832               	movf	_knob_4_pos^(0+384),w
  6024  05E6  0022               	movlb	2	; select bank2
  6025  05E7  076A               	addwf	??_main^(0+256),w
  6026  05E8  00EC               	movwf	(??_main+2)^(0+256)
  6027  05E9  0023               	movlb	3	; select bank3
  6028  05EA  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6029  05EB  0022               	movlb	2	; select bank2
  6030  05EC  3D6B               	addwfc	(??_main+1)^(0+256),w
  6031  05ED  00ED               	movwf	(??_main+3)^(0+256)
  6032  05EE  086D               	movf	(??_main+3)^(0+256),w
  6033  05EF  3A80               	xorlw	128
  6034  05F0  00EE               	movwf	(??_main+4)^(0+256)
  6035  05F1  3080               	movlw	128
  6036  05F2  026E               	subwf	(??_main+4)^(0+256),w
  6037  05F3  1D03               	skipz
  6038  05F4  2DF7               	goto	u10315
  6039  05F5  3004               	movlw	4
  6040  05F6  026C               	subwf	(??_main+2)^(0+256),w
  6041  05F7                     u10315:	
  6042  05F7  1803               	skipnc
  6043  05F8  2E19               	goto	l9296
  6044  05F9  0023               	movlb	3	; select bank3
  6045  05FA  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6046  05FB  0022               	movlb	2	; select bank2
  6047  05FC  00EA               	movwf	??_main^(0+256)
  6048  05FD  0023               	movlb	3	; select bank3
  6049  05FE  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6050  05FF  0022               	movlb	2	; select bank2
  6051  0600  00EB               	movwf	(??_main^(0+256)+1)
  6052  0601  0AEA               	incf	??_main^(0+256),f
  6053  0602  1903               	skipnz
  6054  0603  0AEB               	incf	(??_main^(0+256)+1),f
  6055  0604  0023               	movlb	3	; select bank3
  6056  0605  0832               	movf	_knob_4_pos^(0+384),w
  6057  0606  0022               	movlb	2	; select bank2
  6058  0607  076A               	addwf	??_main^(0+256),w
  6059  0608  00EC               	movwf	(??_main+2)^(0+256)
  6060  0609  0023               	movlb	3	; select bank3
  6061  060A  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6062  060B  0022               	movlb	2	; select bank2
  6063  060C  3D6B               	addwfc	(??_main+1)^(0+256),w
  6064  060D  00ED               	movwf	(??_main+3)^(0+256)
  6065  060E  086D               	movf	(??_main+3)^(0+256),w
  6066  060F  3A80               	xorlw	128
  6067  0610  00EE               	movwf	(??_main+4)^(0+256)
  6068  0611  307F               	movlw	127
  6069  0612  026E               	subwf	(??_main+4)^(0+256),w
  6070  0613  1D03               	skipz
  6071  0614  2E17               	goto	u10325
  6072  0615  30FD               	movlw	253
  6073  0616  026C               	subwf	(??_main+2)^(0+256),w
  6074  0617                     u10325:	
  6075  0617  1803               	skipnc
  6076  0618  2E6B               	goto	l9302
  6077  0619                     l9296:	
  6078                           
  6079                           ;main.c: 170: knob4_prev = knob_4_pos;
  6080  0619  0023               	movlb	3	; select bank3
  6081  061A  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6082  061B  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6083  061C  0832               	movf	_knob_4_pos^(0+384),w
  6084  061D  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6085                           
  6086                           ;main.c: 171: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6087  061E  3040               	movlw	64
  6088  061F  0021               	movlb	1	; select bank1
  6089  0620  00EA               	movwf	map@out_max^(0+128)
  6090  0621  3030               	movlw	48
  6091  0622  00EB               	movwf	(map@out_max+1)^(0+128)
  6092  0623  3045               	movlw	69
  6093  0624  00EC               	movwf	(map@out_max+2)^(0+128)
  6094  0625  3000               	movlw	0
  6095  0626  00E7               	movwf	map@out_min^(0+128)
  6096  0627  3034               	movlw	52
  6097  0628  00E8               	movwf	(map@out_min+1)^(0+128)
  6098  0629  3043               	movlw	67
  6099  062A  00E9               	movwf	(map@out_min+2)^(0+128)
  6100  062B  30C0               	movlw	192
  6101  062C  00E4               	movwf	map@in_max^(0+128)
  6102  062D  307F               	movlw	127
  6103  062E  00E5               	movwf	(map@in_max+1)^(0+128)
  6104  062F  3044               	movlw	68
  6105  0630  00E6               	movwf	(map@in_max+2)^(0+128)
  6106  0631  3000               	movlw	0
  6107  0632  00E1               	movwf	map@in_min^(0+128)
  6108  0633  3000               	movlw	0
  6109  0634  00E2               	movwf	(map@in_min+1)^(0+128)
  6110  0635  3000               	movlw	0
  6111  0636  00E3               	movwf	(map@in_min+2)^(0+128)
  6112  0637  0023               	movlb	3	; select bank3
  6113  0638  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6114  0639  0021               	movlb	1	; select bank1
  6115  063A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6116  063B  0023               	movlb	3	; select bank3
  6117  063C  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6118  063D  0021               	movlb	1	; select bank1
  6119  063E  00A8               	movwf	___awtoft@c^(0+128)
  6120  063F  31AE  26D5  3183   	fcall	___awtoft
  6121  0642  0021               	movlb	1	; select bank1
  6122  0643  0828               	movf	?___awtoft^(0+128),w
  6123  0644  00DE               	movwf	map@x^(0+128)
  6124  0645  0829               	movf	(?___awtoft+1)^(0+128),w
  6125  0646  00DF               	movwf	(map@x+1)^(0+128)
  6126  0647  082A               	movf	(?___awtoft+2)^(0+128),w
  6127  0648  00E0               	movwf	(map@x+2)^(0+128)
  6128  0649  319A  2241  3183   	fcall	_map
  6129  064C  0021               	movlb	1	; select bank1
  6130  064D  085E               	movf	?_map^(0+128),w
  6131  064E  0022               	movlb	2	; select bank2
  6132  064F  00A0               	movwf	___fttol@f1^(0+256)
  6133  0650  0021               	movlb	1	; select bank1
  6134  0651  085F               	movf	(?_map+1)^(0+128),w
  6135  0652  0022               	movlb	2	; select bank2
  6136  0653  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6137  0654  0021               	movlb	1	; select bank1
  6138  0655  0860               	movf	(?_map+2)^(0+128),w
  6139  0656  0022               	movlb	2	; select bank2
  6140  0657  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6141  0658  3199  21BA  3183   	fcall	___fttol
  6142  065B  0022               	movlb	2	; select bank2
  6143  065C  0820               	movf	?___fttol^(0+256),w
  6144  065D  0023               	movlb	3	; select bank3
  6145  065E  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  6146  065F  0022               	movlb	2	; select bank2
  6147  0660  0821               	movf	(?___fttol^(0+256)+1),w
  6148  0661  0023               	movlb	3	; select bank3
  6149  0662  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6150  0663  0D89               	rlf	9,f
  6151  0664  3B89               	subwfb	9,f
  6152  0665  0989               	comf	9,f
  6153  0666  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6154  0667  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6155                           
  6156                           ;main.c: 172: mod_time_changed = 1;
  6157  0668  0020               	movlb	0	; select bank0
  6158  0669  01E8               	clrf	_mod_time_changed
  6159  066A  0AE8               	incf	_mod_time_changed,f
  6160  066B                     l9302:	
  6161                           
  6162                           ;main.c: 174: }
  6163                           ;main.c: 177: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6164  066B  0023               	movlb	3	; select bank3
  6165  066C  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6166  066D  0022               	movlb	2	; select bank2
  6167  066E  00EA               	movwf	??_main^(0+256)
  6168  066F  0023               	movlb	3	; select bank3
  6169  0670  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6170  0671  0022               	movlb	2	; select bank2
  6171  0672  00EB               	movwf	(??_main^(0+256)+1)
  6172  0673  0AEA               	incf	??_main^(0+256),f
  6173  0674  1903               	skipnz
  6174  0675  0AEB               	incf	(??_main^(0+256)+1),f
  6175  0676  0023               	movlb	3	; select bank3
  6176  0677  0834               	movf	_knob_5_pos^(0+384),w
  6177  0678  0022               	movlb	2	; select bank2
  6178  0679  076A               	addwf	??_main^(0+256),w
  6179  067A  00EC               	movwf	(??_main+2)^(0+256)
  6180  067B  0023               	movlb	3	; select bank3
  6181  067C  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6182  067D  0022               	movlb	2	; select bank2
  6183  067E  3D6B               	addwfc	(??_main+1)^(0+256),w
  6184  067F  00ED               	movwf	(??_main+3)^(0+256)
  6185  0680  086D               	movf	(??_main+3)^(0+256),w
  6186  0681  3A80               	xorlw	128
  6187  0682  00EE               	movwf	(??_main+4)^(0+256)
  6188  0683  3080               	movlw	128
  6189  0684  026E               	subwf	(??_main+4)^(0+256),w
  6190  0685  1D03               	skipz
  6191  0686  2E89               	goto	u10335
  6192  0687  3004               	movlw	4
  6193  0688  026C               	subwf	(??_main+2)^(0+256),w
  6194  0689                     u10335:	
  6195  0689  1803               	skipnc
  6196  068A  2EAB               	goto	l9306
  6197  068B  0023               	movlb	3	; select bank3
  6198  068C  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6199  068D  0022               	movlb	2	; select bank2
  6200  068E  00EA               	movwf	??_main^(0+256)
  6201  068F  0023               	movlb	3	; select bank3
  6202  0690  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6203  0691  0022               	movlb	2	; select bank2
  6204  0692  00EB               	movwf	(??_main^(0+256)+1)
  6205  0693  0AEA               	incf	??_main^(0+256),f
  6206  0694  1903               	skipnz
  6207  0695  0AEB               	incf	(??_main^(0+256)+1),f
  6208  0696  0023               	movlb	3	; select bank3
  6209  0697  0834               	movf	_knob_5_pos^(0+384),w
  6210  0698  0022               	movlb	2	; select bank2
  6211  0699  076A               	addwf	??_main^(0+256),w
  6212  069A  00EC               	movwf	(??_main+2)^(0+256)
  6213  069B  0023               	movlb	3	; select bank3
  6214  069C  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6215  069D  0022               	movlb	2	; select bank2
  6216  069E  3D6B               	addwfc	(??_main+1)^(0+256),w
  6217  069F  00ED               	movwf	(??_main+3)^(0+256)
  6218  06A0  086D               	movf	(??_main+3)^(0+256),w
  6219  06A1  3A80               	xorlw	128
  6220  06A2  00EE               	movwf	(??_main+4)^(0+256)
  6221  06A3  307F               	movlw	127
  6222  06A4  026E               	subwf	(??_main+4)^(0+256),w
  6223  06A5  1D03               	skipz
  6224  06A6  2EA9               	goto	u10345
  6225  06A7  30FD               	movlw	253
  6226  06A8  026C               	subwf	(??_main+2)^(0+256),w
  6227  06A9                     u10345:	
  6228  06A9  1803               	skipnc
  6229  06AA  2EF5               	goto	l9310
  6230  06AB                     l9306:	
  6231                           
  6232                           ;main.c: 178: knob5_prev = knob_5_pos;
  6233  06AB  0023               	movlb	3	; select bank3
  6234  06AC  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6235  06AD  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6236  06AE  0834               	movf	_knob_5_pos^(0+384),w
  6237  06AF  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6238                           
  6239                           ;main.c: 179: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6240  06B0  3000               	movlw	0
  6241  06B1  0021               	movlb	1	; select bank1
  6242  06B2  00EA               	movwf	map@out_max^(0+128)
  6243  06B3  3000               	movlw	0
  6244  06B4  00EB               	movwf	(map@out_max+1)^(0+128)
  6245  06B5  3000               	movlw	0
  6246  06B6  00EC               	movwf	(map@out_max+2)^(0+128)
  6247  06B7  3060               	movlw	96
  6248  06B8  00E7               	movwf	map@out_min^(0+128)
  6249  06B9  309F               	movlw	159
  6250  06BA  00E8               	movwf	(map@out_min+1)^(0+128)
  6251  06BB  3044               	movlw	68
  6252  06BC  00E9               	movwf	(map@out_min+2)^(0+128)
  6253  06BD  30C0               	movlw	192
  6254  06BE  00E4               	movwf	map@in_max^(0+128)
  6255  06BF  307F               	movlw	127
  6256  06C0  00E5               	movwf	(map@in_max+1)^(0+128)
  6257  06C1  3044               	movlw	68
  6258  06C2  00E6               	movwf	(map@in_max+2)^(0+128)
  6259  06C3  3000               	movlw	0
  6260  06C4  00E1               	movwf	map@in_min^(0+128)
  6261  06C5  3000               	movlw	0
  6262  06C6  00E2               	movwf	(map@in_min+1)^(0+128)
  6263  06C7  3000               	movlw	0
  6264  06C8  00E3               	movwf	(map@in_min+2)^(0+128)
  6265  06C9  0023               	movlb	3	; select bank3
  6266  06CA  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6267  06CB  0021               	movlb	1	; select bank1
  6268  06CC  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6269  06CD  0023               	movlb	3	; select bank3
  6270  06CE  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6271  06CF  0021               	movlb	1	; select bank1
  6272  06D0  00A8               	movwf	___awtoft@c^(0+128)
  6273  06D1  31AE  26D5  3183   	fcall	___awtoft
  6274  06D4  0021               	movlb	1	; select bank1
  6275  06D5  0828               	movf	?___awtoft^(0+128),w
  6276  06D6  00DE               	movwf	map@x^(0+128)
  6277  06D7  0829               	movf	(?___awtoft+1)^(0+128),w
  6278  06D8  00DF               	movwf	(map@x+1)^(0+128)
  6279  06D9  082A               	movf	(?___awtoft+2)^(0+128),w
  6280  06DA  00E0               	movwf	(map@x+2)^(0+128)
  6281  06DB  319A  2241  3183   	fcall	_map
  6282  06DE  0021               	movlb	1	; select bank1
  6283  06DF  085E               	movf	?_map^(0+128),w
  6284  06E0  0022               	movlb	2	; select bank2
  6285  06E1  00A0               	movwf	___fttol@f1^(0+256)
  6286  06E2  0021               	movlb	1	; select bank1
  6287  06E3  085F               	movf	(?_map+1)^(0+128),w
  6288  06E4  0022               	movlb	2	; select bank2
  6289  06E5  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6290  06E6  0021               	movlb	1	; select bank1
  6291  06E7  0860               	movf	(?_map+2)^(0+128),w
  6292  06E8  0022               	movlb	2	; select bank2
  6293  06E9  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6294  06EA  3199  21BA  3183   	fcall	___fttol
  6295  06ED  0022               	movlb	2	; select bank2
  6296  06EE  0821               	movf	(?___fttol^(0+256)+1),w
  6297  06EF  0024               	movlb	4	; select bank4
  6298  06F0  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6299  06F1  0022               	movlb	2	; select bank2
  6300  06F2  0820               	movf	?___fttol^(0+256),w
  6301  06F3  0024               	movlb	4	; select bank4
  6302  06F4  00C1               	movwf	_adjusted_pot_value^(0+512)
  6303  06F5                     l9310:	
  6304                           
  6305                           ;main.c: 180: }
  6306                           ;main.c: 184: if (mod_time_changed == 1) {
  6307  06F5  0020               	movlb	0	; select bank0
  6308  06F6  0368               	decf	_mod_time_changed,w
  6309  06F7  1D03               	btfss	3,2
  6310  06F8  2F2C               	goto	l9318
  6311                           
  6312                           ;main.c: 185: delay_time = baseline_mod_time;
  6313  06F9  0023               	movlb	3	; select bank3
  6314  06FA  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6315  06FB  0020               	movlb	0	; select bank0
  6316  06FC  00DE               	movwf	_delay_time+3	;volatile
  6317  06FD  0023               	movlb	3	; select bank3
  6318  06FE  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6319  06FF  0020               	movlb	0	; select bank0
  6320  0700  00DD               	movwf	_delay_time+2	;volatile
  6321  0701  0023               	movlb	3	; select bank3
  6322  0702  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6323  0703  0020               	movlb	0	; select bank0
  6324  0704  00DC               	movwf	_delay_time+1	;volatile
  6325  0705  0023               	movlb	3	; select bank3
  6326  0706  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6327  0707  0020               	movlb	0	; select bank0
  6328  0708  00DB               	movwf	_delay_time	;volatile
  6329                           
  6330                           ;main.c: 186: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6331  0709  0023               	movlb	3	; select bank3
  6332  070A  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6333  070B  0022               	movlb	2	; select bank2
  6334  070C  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6335  070D  0023               	movlb	3	; select bank3
  6336  070E  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6337  070F  0022               	movlb	2	; select bank2
  6338  0710  00BF               	movwf	set_subdivision@x^(0+256)
  6339  0711  0020               	movlb	0	; select bank0
  6340  0712  0864               	movf	_top_push_state+1,w
  6341  0713  0022               	movlb	2	; select bank2
  6342  0714  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6343  0715  0020               	movlb	0	; select bank0
  6344  0716  0863               	movf	_top_push_state,w
  6345  0717  0022               	movlb	2	; select bank2
  6346  0718  00C1               	movwf	set_subdivision@y^(0+256)
  6347  0719  3187  2735  3183   	fcall	_set_subdivision
  6348  071C  0022               	movlb	2	; select bank2
  6349  071D  083F               	movf	?_set_subdivision^(0+256),w
  6350  071E  0020               	movlb	0	; select bank0
  6351  071F  00DB               	movwf	_delay_time	;volatile
  6352  0720  0022               	movlb	2	; select bank2
  6353  0721  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6354  0722  0020               	movlb	0	; select bank0
  6355  0723  00DC               	movwf	_delay_time+1	;volatile
  6356  0724  0D89               	rlf	9,f
  6357  0725  3B89               	subwfb	9,f
  6358  0726  0989               	comf	9,f
  6359  0727  00DD               	movwf	_delay_time+2	;volatile
  6360  0728  00DE               	movwf	_delay_time+3	;volatile
  6361                           
  6362                           ;main.c: 187: getModulationDelayTime();
  6363  0729  319A  22CC  3183   	fcall	_getModulationDelayTime
  6364  072C                     l9318:	
  6365                           
  6366                           ;main.c: 190: }
  6367                           ;main.c: 192: if (modulation_changed == 1 || mod_time_changed == 1) {
  6368  072C  0023               	movlb	3	; select bank3
  6369  072D  0343               	decf	_modulation_changed^(0+384),w
  6370  072E  1903               	btfsc	3,2
  6371  072F  2B7C               	goto	L1
  6372  0730  0020               	movlb	0	; select bank0
  6373  0731  0368               	decf	_mod_time_changed,w
  6374  0732  1D03               	btfss	3,2
  6375  0733  2B7F               	goto	l9222
  6376  0734  2B7C               	goto	L1
  6377  0735                     __end_of_main:	
  6378                           ;main.c: 193: updateModulationArray();
  6379                           
  6380                           
  6381                           	psect	text1
  6382  25D9                     __ptext1:	
  6383 ;; *************** function _update_selectMode *****************
  6384 ;; Defined at:
  6385 ;;		line 139 in file "tactiles.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6401 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6402 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    5
  6406 ;; This function calls:
  6407 ;;		_setExpressionDisplay
  6408 ;;		_setPresetDisplay
  6409 ;; This function is called by:
  6410 ;;		_main
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _update_selectMode
  6416  25D9                     _update_selectMode:	
  6417                           
  6418                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6422  25D9  0020               	movlb	0	; select bank0
  6423  25DA  0855               	movf	_mode2_state,w
  6424  25DB  1D03               	btfss	3,2
  6425  25DC  2DE0               	goto	l997
  6426  25DD  0356               	decf	_presetSaveMode,w
  6427  25DE  1D03               	btfss	3,2
  6428  25DF  0008               	return
  6429  25E0                     l997:	
  6430                           ;tactiles.c: 142: return;
  6431                           
  6432                           
  6433                           ;tactiles.c: 143: }
  6434                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6435  25E0  1B8F               	btfsc	15,7	;volatile
  6436  25E1  2E2E               	goto	l8818
  6437                           
  6438                           ;tactiles.c: 145: debounce_mode1++;
  6439  25E2  3001               	movlw	1
  6440  25E3  0024               	movlb	4	; select bank4
  6441  25E4  07C7               	addwf	_debounce_mode1^(0+512),f
  6442  25E5  3000               	movlw	0
  6443  25E6  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6444                           
  6445                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6446  25E7  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6447  25E8  3A80               	xorlw	128
  6448  25E9  0021               	movlb	1	; select bank1
  6449  25EA  00A7               	movwf	??_update_selectMode^(0+128)
  6450  25EB  3080               	movlw	128
  6451  25EC  0227               	subwf	??_update_selectMode^(0+128),w
  6452  25ED  1D03               	skipz
  6453  25EE  2DF2               	goto	u9445
  6454  25EF  301A               	movlw	26
  6455  25F0  0024               	movlb	4	; select bank4
  6456  25F1  0247               	subwf	_debounce_mode1^(0+512),w
  6457  25F2                     u9445:	
  6458  25F2  1C03               	skipc
  6459  25F3  0008               	return
  6460                           
  6461                           ;tactiles.c: 147: debounce_mode1 = 25;
  6462  25F4  3019               	movlw	25
  6463  25F5  0024               	movlb	4	; select bank4
  6464  25F6  00C7               	movwf	_debounce_mode1^(0+512)
  6465  25F7  3000               	movlw	0
  6466  25F8  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6467                           
  6468                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6469  25F9  0020               	movlb	0	; select bank0
  6470  25FA  0855               	movf	_mode2_state,w
  6471  25FB  0023               	movlb	3	; select bank3
  6472  25FC  0661               	xorwf	_presetModeCnst^(0+384),w
  6473  25FD  1903               	skipnz
  6474  25FE  2E03               	goto	l8800
  6475  25FF  0020               	movlb	0	; select bank0
  6476  2600  0356               	decf	_presetSaveMode,w
  6477  2601  1D03               	btfss	3,2
  6478  2602  2E14               	goto	l8808
  6479  2603                     l8800:	
  6480                           
  6481                           ;tactiles.c: 149: presetChannel++;
  6482  2603  3001               	movlw	1
  6483  2604  0021               	movlb	1	; select bank1
  6484  2605  00A7               	movwf	??_update_selectMode^(0+128)
  6485  2606  0827               	movf	??_update_selectMode^(0+128),w
  6486  2607  0020               	movlb	0	; select bank0
  6487  2608  07EA               	addwf	_presetChannel,f
  6488                           
  6489                           ;tactiles.c: 150: if (presetChannel > 10) {
  6490  2609  300B               	movlw	11
  6491  260A  026A               	subwf	_presetChannel,w
  6492  260B  1C03               	skipc
  6493  260C  2E0F               	goto	l8806
  6494                           
  6495                           ;tactiles.c: 151: presetChannel = 1;
  6496  260D  01EA               	clrf	_presetChannel
  6497  260E  0AEA               	incf	_presetChannel,f
  6498  260F                     l8806:	
  6499                           
  6500                           ;tactiles.c: 152: }
  6501                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6502  260F  086A               	movf	_presetChannel,w
  6503  2610  31A0  20B5  31A5   	fcall	_setPresetDisplay
  6504                           
  6505                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6506  2613  2E2A               	goto	l1008
  6507  2614                     l8808:	
  6508  2614  0020               	movlb	0	; select bank0
  6509  2615  0855               	movf	_mode2_state,w
  6510  2616  0023               	movlb	3	; select bank3
  6511  2617  0660               	xorwf	_expressModeCnst^(0+384),w
  6512  2618  1D03               	skipz
  6513  2619  2E2A               	goto	l1008
  6514                           
  6515                           ;tactiles.c: 155: expressionChannel++;
  6516  261A  3001               	movlw	1
  6517  261B  0021               	movlb	1	; select bank1
  6518  261C  00A7               	movwf	??_update_selectMode^(0+128)
  6519  261D  0827               	movf	??_update_selectMode^(0+128),w
  6520  261E  0020               	movlb	0	; select bank0
  6521  261F  07E6               	addwf	_expressionChannel,f
  6522                           
  6523                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6524  2620  3006               	movlw	6
  6525  2621  0266               	subwf	_expressionChannel,w
  6526  2622  1C03               	skipc
  6527  2623  2E26               	goto	l8816
  6528                           
  6529                           ;tactiles.c: 157: expressionChannel = 1;
  6530  2624  01E6               	clrf	_expressionChannel
  6531  2625  0AE6               	incf	_expressionChannel,f
  6532  2626                     l8816:	
  6533                           
  6534                           ;tactiles.c: 158: }
  6535                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6536  2626  0866               	movf	_expressionChannel,w
  6537  2627  31AD  25D9  31A5   	fcall	_setExpressionDisplay
  6538  262A                     l1008:	
  6539                           ;tactiles.c: 160: }
  6540                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6541                           
  6542  262A  0020               	movlb	0	; select bank0
  6543  262B  1B8F               	btfsc	15,7	;volatile
  6544  262C  0008               	return
  6545  262D  2E2A               	goto	l1008
  6546  262E                     l8818:	
  6547                           ;tactiles.c: 168: }
  6548                           ;tactiles.c: 169: }
  6549                           ;tactiles.c: 170: } else {
  6550                           
  6551                           
  6552                           ;tactiles.c: 171: debounce_mode1 = 0;
  6553  262E  0024               	movlb	4	; select bank4
  6554  262F  01C7               	clrf	_debounce_mode1^(0+512)
  6555  2630  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6556  2631  0008               	return
  6557  2632                     __end_of_update_selectMode:	
  6558                           
  6559                           	psect	text2
  6560  207D                     __ptext2:	
  6561 ;; *************** function _update_mode *****************
  6562 ;; Defined at:
  6563 ;;		line 87 in file "tactiles.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6579 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6580 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6581 ;;Total ram usage:        1 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    6
  6584 ;; This function calls:
  6585 ;;		_resetRingLEDs
  6586 ;;		_setPedalMode
  6587 ;; This function is called by:
  6588 ;;		_main
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _update_mode
  6594  207D                     _update_mode:	
  6595                           
  6596                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6600  207D  0020               	movlb	0	; select bank0
  6601  207E  180E               	btfsc	14,0	;volatile
  6602  207F  28B1               	goto	l8786
  6603                           
  6604                           ;tactiles.c: 95: debounce_mode2++;
  6605  2080  3001               	movlw	1
  6606  2081  0024               	movlb	4	; select bank4
  6607  2082  07C9               	addwf	_debounce_mode2^(0+512),f
  6608  2083  3000               	movlw	0
  6609  2084  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6610                           
  6611                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6612  2085  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6613  2086  3A80               	xorlw	128
  6614  2087  0021               	movlb	1	; select bank1
  6615  2088  00A7               	movwf	??_update_mode^(0+128)
  6616  2089  3080               	movlw	128
  6617  208A  0227               	subwf	??_update_mode^(0+128),w
  6618  208B  1D03               	skipz
  6619  208C  2890               	goto	u9375
  6620  208D  301A               	movlw	26
  6621  208E  0024               	movlb	4	; select bank4
  6622  208F  0249               	subwf	_debounce_mode2^(0+512),w
  6623  2090                     u9375:	
  6624  2090  1C03               	skipc
  6625  2091  0008               	return
  6626                           
  6627                           ;tactiles.c: 97: debounce_mode2 = 25;
  6628  2092  3019               	movlw	25
  6629  2093  0024               	movlb	4	; select bank4
  6630  2094  00C9               	movwf	_debounce_mode2^(0+512)
  6631  2095  3000               	movlw	0
  6632  2096  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6633                           
  6634                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6635  2097  0020               	movlb	0	; select bank0
  6636  2098  0356               	decf	_presetSaveMode,w
  6637  2099  1D03               	btfss	3,2
  6638  209A  28A0               	goto	l8778
  6639                           
  6640                           ;tactiles.c: 100: presetSaveMode = 0;
  6641  209B  01D6               	clrf	_presetSaveMode
  6642                           
  6643                           ;tactiles.c: 101: resetRingLEDs();
  6644  209C  31AD  25F1  31A0   	fcall	_resetRingLEDs
  6645                           
  6646                           ;tactiles.c: 102: } else {
  6647  209F  28AA               	goto	l8784
  6648  20A0                     l8778:	
  6649                           
  6650                           ;tactiles.c: 103: mode2_state++;
  6651  20A0  3001               	movlw	1
  6652  20A1  0021               	movlb	1	; select bank1
  6653  20A2  00A7               	movwf	??_update_mode^(0+128)
  6654  20A3  0827               	movf	??_update_mode^(0+128),w
  6655  20A4  0020               	movlb	0	; select bank0
  6656  20A5  07D5               	addwf	_mode2_state,f
  6657                           
  6658                           ;tactiles.c: 104: if (mode2_state > 2) {
  6659  20A6  3003               	movlw	3
  6660  20A7  0255               	subwf	_mode2_state,w
  6661  20A8  1803               	btfsc	3,0
  6662                           
  6663                           ;tactiles.c: 105: mode2_state = 0;
  6664  20A9  01D5               	clrf	_mode2_state
  6665  20AA                     l8784:	
  6666                           
  6667                           ;tactiles.c: 106: }
  6668                           ;tactiles.c: 107: }
  6669                           ;tactiles.c: 109: setPedalMode();
  6670  20AA  31AE  26F7  31A0   	fcall	_setPedalMode
  6671  20AD                     l982:	
  6672                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6673                           
  6674  20AD  0020               	movlb	0	; select bank0
  6675  20AE  180E               	btfsc	14,0	;volatile
  6676  20AF  0008               	return
  6677  20B0  28AD               	goto	l982
  6678  20B1                     l8786:	
  6679                           ;tactiles.c: 111: }
  6680                           ;tactiles.c: 112: }
  6681                           ;tactiles.c: 113: } else {
  6682                           
  6683                           
  6684                           ;tactiles.c: 114: debounce_mode2 = 0;
  6685  20B1  0024               	movlb	4	; select bank4
  6686  20B2  01C9               	clrf	_debounce_mode2^(0+512)
  6687  20B3  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6688  20B4  0008               	return
  6689  20B5                     __end_of_update_mode:	
  6690                           
  6691                           	psect	text3
  6692  09FD                     __ptext3:	
  6693 ;; *************** function _updateSwitchTap *****************
  6694 ;; Defined at:
  6695 ;;		line 48 in file "SwitchTap.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6700 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6711 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6713 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6714 ;;Total ram usage:        9 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    8
  6717 ;; This function calls:
  6718 ;;		___aldiv
  6719 ;;		_setDoublePressState
  6720 ;;		_setLongTapState
  6721 ;; This function is called by:
  6722 ;;		_main
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _updateSwitchTap
  6728  09FD                     _updateSwitchTap:	
  6729                           
  6730                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6734  09FD  0021               	movlb	1	; select bank1
  6735  09FE  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6736                           
  6737                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6738  09FF  0020               	movlb	0	; select bank0
  6739  0A00  1810               	btfsc	16,0	;volatile
  6740  0A01  2A08               	goto	l8942
  6741                           
  6742                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6743  0A02  0859               	movf	_switchTap_pressed,w
  6744  0A03  1903               	btfsc	3,2
  6745  0A04  2A12               	goto	l1405
  6746                           
  6747                           ;SwitchTap.c: 59: switchTap_pressed--;
  6748  0A05  3001               	movlw	1
  6749  0A06  02D9               	subwf	_switchTap_pressed,f
  6750                           
  6751                           ;SwitchTap.c: 60: }
  6752                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6753  0A07  2A12               	goto	l1405
  6754  0A08                     l8942:	
  6755  0A08  3019               	movlw	25
  6756  0A09  0259               	subwf	_switchTap_pressed,w
  6757  0A0A  1803               	skipnc
  6758  0A0B  2A12               	goto	l1405
  6759                           
  6760                           ;SwitchTap.c: 62: switchTap_pressed++;
  6761  0A0C  3001               	movlw	1
  6762  0A0D  0021               	movlb	1	; select bank1
  6763  0A0E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6764  0A0F  083C               	movf	??_updateSwitchTap^(0+128),w
  6765  0A10  0020               	movlb	0	; select bank0
  6766  0A11  07D9               	addwf	_switchTap_pressed,f
  6767  0A12                     l1405:	
  6768                           
  6769                           ;SwitchTap.c: 63: }
  6770                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6771  0A12  0859               	movf	_switchTap_pressed,w
  6772  0A13  1D03               	btfss	3,2
  6773  0A14  2BC7               	goto	l9026
  6774                           
  6775                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6776  0A15  1BC9               	btfsc	_tap_timer+3,7	;volatile
  6777  0A16  2A9C               	goto	l8986
  6778  0A17  0849               	movf	_tap_timer+3,w	;volatile
  6779  0A18  1D03               	btfss	3,2
  6780  0A19  2A23               	goto	l8948
  6781  0A1A  0848               	movf	_tap_timer+2,w	;volatile
  6782  0A1B  1D03               	btfss	3,2
  6783  0A1C  2A23               	goto	l8948
  6784  0A1D  301B               	movlw	27
  6785  0A1E  0246               	subwf	_tap_timer,w	;volatile
  6786  0A1F  3006               	movlw	6
  6787  0A20  3B47               	subwfb	_tap_timer+1,w	;volatile
  6788  0A21  1C03               	btfss	3,0
  6789  0A22  2A9C               	goto	l8986
  6790  0A23                     l8948:	
  6791                           
  6792                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6793  0A23  0023               	movlb	3	; select bank3
  6794  0A24  0346               	decf	_switchTap_down^(0+384),w
  6795  0A25  1903               	btfsc	3,2
  6796  0A26  2A62               	goto	l8964
  6797                           
  6798                           ;SwitchTap.c: 78: switchTap_down = 1;
  6799  0A27  01C6               	clrf	_switchTap_down^(0+384)
  6800  0A28  0AC6               	incf	_switchTap_down^(0+384),f
  6801                           
  6802                           ;SwitchTap.c: 79: tap_timer = 0;
  6803  0A29  3000               	movlw	0
  6804  0A2A  0020               	movlb	0	; select bank0
  6805  0A2B  00C9               	movwf	_tap_timer+3	;volatile
  6806  0A2C  3000               	movlw	0
  6807  0A2D  00C8               	movwf	_tap_timer+2	;volatile
  6808  0A2E  3000               	movlw	0
  6809  0A2F  00C7               	movwf	_tap_timer+1	;volatile
  6810  0A30  3000               	movlw	0
  6811  0A31  00C6               	movwf	_tap_timer	;volatile
  6812                           
  6813                           ;SwitchTap.c: 80: tap_iteration = 1;
  6814  0A32  3001               	movlw	1
  6815  0A33  0023               	movlb	3	; select bank3
  6816  0A34  00DB               	movwf	_tap_iteration^(0+384)
  6817  0A35  3000               	movlw	0
  6818  0A36  00DC               	movwf	(_tap_iteration^(0+384)+1)
  6819                           
  6820                           ;SwitchTap.c: 81: tap_total = 0;
  6821  0A37  3000               	movlw	0
  6822  0A38  0024               	movlb	4	; select bank4
  6823  0A39  00C0               	movwf	(_tap_total+3)^(0+512)
  6824  0A3A  3000               	movlw	0
  6825  0A3B  00BF               	movwf	(_tap_total+2)^(0+512)
  6826  0A3C  3000               	movlw	0
  6827  0A3D  00BE               	movwf	(_tap_total+1)^(0+512)
  6828  0A3E  3000               	movlw	0
  6829  0A3F  00BD               	movwf	_tap_total^(0+512)
  6830                           
  6831                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6832  0A40  0020               	movlb	0	; select bank0
  6833  0A41  01E8               	clrf	_mod_time_changed
  6834                           
  6835                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6836  0A42  0021               	movlb	1	; select bank1
  6837  0A43  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6838  0A44  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6839  0A45                     l8962:	
  6840  0A45  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6841  0A46  0020               	movlb	0	; select bank0
  6842  0A47  0269               	subwf	_num_taps,w
  6843  0A48  1C03               	btfss	3,0
  6844  0A49  2A62               	goto	l8964
  6845                           
  6846                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6847  0A4A  0021               	movlb	1	; select bank1
  6848  0A4B  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6849  0A4C  00BC               	movwf	??_updateSwitchTap^(0+128)
  6850  0A4D  3001               	movlw	1
  6851  0A4E                     u9815:	
  6852  0A4E  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6853  0A4F  3EFF               	addlw	-1
  6854  0A50  1D03               	skipz
  6855  0A51  2A4E               	goto	u9815
  6856  0A52  353C               	lslf	??_updateSwitchTap^(0+128),w
  6857  0A53  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6858  0A54  0086               	movwf	6
  6859  0A55  3002               	movlw	2	; select bank4/5
  6860  0A56  0087               	movwf	7
  6861  0A57  3000               	movlw	0
  6862  0A58  3FC0               	movwi [0]fsr1
  6863  0A59  3000               	movlw	0
  6864  0A5A  3FC1               	movwi [1]fsr1
  6865  0A5B  3FC2               	movwi [2]fsr1
  6866  0A5C  3FC3               	movwi [3]fsr1
  6867  0A5D  3001               	movlw	1
  6868  0A5E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6869  0A5F  083C               	movf	??_updateSwitchTap^(0+128),w
  6870  0A60  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6871  0A61  2A45               	goto	l8962
  6872  0A62                     l8964:	
  6873                           
  6874                           ;SwitchTap.c: 86: }
  6875                           ;SwitchTap.c: 87: }
  6876                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6877  0A62  0020               	movlb	0	; select bank0
  6878  0A63  0854               	movf	_longTap_start,w
  6879  0A64  1D03               	btfss	3,2
  6880  0A65  2A6C               	goto	l8970
  6881                           
  6882                           ;SwitchTap.c: 91: longTap_start = 1;
  6883  0A66  01D4               	clrf	_longTap_start
  6884  0A67  0AD4               	incf	_longTap_start,f
  6885                           
  6886                           ;SwitchTap.c: 92: longTap_state = 0;
  6887  0A68  01E7               	clrf	_longTap_state	;volatile
  6888                           
  6889                           ;SwitchTap.c: 93: longTap_timer = 0;
  6890  0A69  0023               	movlb	3	; select bank3
  6891  0A6A  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  6892  0A6B  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6893  0A6C                     l8970:	
  6894                           
  6895                           ;SwitchTap.c: 94: }
  6896                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6897  0A6C  0020               	movlb	0	; select bank0
  6898  0A6D  0862               	movf	_long_press_limit+1,w
  6899  0A6E  0023               	movlb	3	; select bank3
  6900  0A6F  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6901  0A70  1D03               	skipz
  6902  0A71  2A76               	goto	u9845
  6903  0A72  0020               	movlb	0	; select bank0
  6904  0A73  0861               	movf	_long_press_limit,w
  6905  0A74  0023               	movlb	3	; select bank3
  6906  0A75  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  6907  0A76                     u9845:	
  6908  0A76  1C03               	skipc
  6909  0A77  0008               	return
  6910  0A78  0020               	movlb	0	; select bank0
  6911  0A79  0867               	movf	_longTap_state,w	;volatile
  6912  0A7A  1D03               	btfss	3,2
  6913  0A7B  0008               	return
  6914  0A7C  0850               	movf	_doubleTap_state,w	;volatile
  6915  0A7D  1D03               	btfss	3,2
  6916  0A7E  0008               	return
  6917                           
  6918                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6919  0A7F  0862               	movf	_long_press_limit+1,w
  6920  0A80  0023               	movlb	3	; select bank3
  6921  0A81  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6922  0A82  0020               	movlb	0	; select bank0
  6923  0A83  0861               	movf	_long_press_limit,w
  6924  0A84  0023               	movlb	3	; select bank3
  6925  0A85  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  6926                           
  6927                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6928  0A86  0022               	movlb	2	; select bank2
  6929  0A87  120D               	bcf	13,4	;volatile
  6930                           
  6931                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6932  0A88  0020               	movlb	0	; select bank0
  6933  0A89  0352               	decf	_longBypass_start,w
  6934  0A8A  1903               	btfsc	3,2
  6935  0A8B  2A94               	goto	l8984
  6936                           
  6937                           ;SwitchTap.c: 104: setLongTapState(1);
  6938  0A8C  3001               	movlw	1
  6939  0A8D  0021               	movlb	1	; select bank1
  6940  0A8E  00A0               	movwf	setLongTapState@f_state^(0+128)
  6941  0A8F  3000               	movlw	0
  6942  0A90  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6943  0A91  31AE  260B         	fcall	_setLongTapState
  6944                           
  6945                           ;SwitchTap.c: 105: } else {
  6946  0A93  0008               	return
  6947  0A94                     l8984:	
  6948                           
  6949                           ;SwitchTap.c: 106: setDoublePressState(1);
  6950  0A94  3001               	movlw	1
  6951  0A95  0021               	movlb	1	; select bank1
  6952  0A96  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6953  0A97  3000               	movlw	0
  6954  0A98  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6955  0A99  31A1  21A3         	fcall	_setDoublePressState
  6956                           
  6957                           ;SwitchTap.c: 107: }
  6958                           ;SwitchTap.c: 108: }
  6959                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6960  0A9B  0008               	return
  6961  0A9C                     l8986:	
  6962  0A9C  0020               	movlb	0	; select bank0
  6963  0A9D  1BC9               	btfsc	_tap_timer+3,7	;volatile
  6964  0A9E  2AAB               	goto	l8988
  6965  0A9F  0849               	movf	_tap_timer+3,w	;volatile
  6966  0AA0  1D03               	btfss	3,2
  6967  0AA1  0008               	return
  6968  0AA2  0848               	movf	_tap_timer+2,w	;volatile
  6969  0AA3  1D03               	btfss	3,2
  6970  0AA4  0008               	return
  6971  0AA5  301B               	movlw	27
  6972  0AA6  0246               	subwf	_tap_timer,w	;volatile
  6973  0AA7  3006               	movlw	6
  6974  0AA8  3B47               	subwfb	_tap_timer+1,w	;volatile
  6975  0AA9  1803               	btfsc	3,0
  6976  0AAA  0008               	return
  6977  0AAB                     l8988:	
  6978  0AAB  0867               	movf	_longTap_state,w	;volatile
  6979  0AAC  1D03               	btfss	3,2
  6980  0AAD  0008               	return
  6981  0AAE  0023               	movlb	3	; select bank3
  6982  0AAF  0346               	decf	_switchTap_down^(0+384),w
  6983  0AB0  1903               	btfsc	3,2
  6984  0AB1  0008               	return
  6985                           
  6986                           ;SwitchTap.c: 112: switchTap_down = 1;
  6987  0AB2  01C6               	clrf	_switchTap_down^(0+384)
  6988  0AB3  0AC6               	incf	_switchTap_down^(0+384),f
  6989                           
  6990                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6991  0AB4  0020               	movlb	0	; select bank0
  6992  0AB5  1BC9               	btfsc	_tap_timer+3,7	;volatile
  6993  0AB6  2ACB               	goto	l1419
  6994  0AB7  0849               	movf	_tap_timer+3,w	;volatile
  6995  0AB8  1D03               	btfss	3,2
  6996  0AB9  2AC3               	goto	l8996
  6997  0ABA  0848               	movf	_tap_timer+2,w	;volatile
  6998  0ABB  1D03               	btfss	3,2
  6999  0ABC  2AC3               	goto	l8996
  7000  0ABD  3094               	movlw	148
  7001  0ABE  0246               	subwf	_tap_timer,w	;volatile
  7002  0ABF  3004               	movlw	4
  7003  0AC0  3B47               	subwfb	_tap_timer+1,w	;volatile
  7004  0AC1  1C03               	btfss	3,0
  7005  0AC2  2ACB               	goto	l1419
  7006  0AC3                     l8996:	
  7007                           
  7008                           ;SwitchTap.c: 114: tap_timer = 1172;
  7009  0AC3  3000               	movlw	0
  7010  0AC4  00C9               	movwf	_tap_timer+3	;volatile
  7011  0AC5  3000               	movlw	0
  7012  0AC6  00C8               	movwf	_tap_timer+2	;volatile
  7013  0AC7  3004               	movlw	4
  7014  0AC8  00C7               	movwf	_tap_timer+1	;volatile
  7015  0AC9  3094               	movlw	148
  7016  0ACA  00C6               	movwf	_tap_timer	;volatile
  7017  0ACB                     l1419:	
  7018                           
  7019                           ;SwitchTap.c: 115: }
  7020                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7021  0ACB  0869               	movf	_num_taps,w
  7022  0ACC  0021               	movlb	1	; select bank1
  7023  0ACD  00BC               	movwf	??_updateSwitchTap^(0+128)
  7024  0ACE  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7025  0ACF  083C               	movf	??_updateSwitchTap^(0+128),w
  7026  0AD0  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7027  0AD1  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7028  0AD2  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7029                           
  7030                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7031  0AD3  0023               	movlb	3	; select bank3
  7032  0AD4  085C               	movf	(_tap_iteration+1)^(0+384),w
  7033  0AD5  3A80               	xorlw	128
  7034  0AD6  3C80               	sublw	128
  7035  0AD7  1D03               	skipz
  7036  0AD8  2ADC               	goto	u9925
  7037  0AD9  085B               	movf	_tap_iteration^(0+384),w
  7038  0ADA  0020               	movlb	0	; select bank0
  7039  0ADB  0269               	subwf	_num_taps,w
  7040  0ADC                     u9925:	
  7041  0ADC  1C03               	skipc
  7042  0ADD  2B0E               	goto	l9004
  7043                           
  7044                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7045  0ADE  0020               	movlb	0	; select bank0
  7046  0ADF  0846               	movf	_tap_timer,w	;volatile
  7047  0AE0  0024               	movlb	4	; select bank4
  7048  0AE1  07BD               	addwf	_tap_total^(0+512),f
  7049  0AE2  0020               	movlb	0	; select bank0
  7050  0AE3  0847               	movf	_tap_timer+1,w	;volatile
  7051  0AE4  0024               	movlb	4	; select bank4
  7052  0AE5  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7053  0AE6  0020               	movlb	0	; select bank0
  7054  0AE7  0848               	movf	_tap_timer+2,w	;volatile
  7055  0AE8  0024               	movlb	4	; select bank4
  7056  0AE9  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7057  0AEA  0020               	movlb	0	; select bank0
  7058  0AEB  0849               	movf	_tap_timer+3,w	;volatile
  7059  0AEC  0024               	movlb	4	; select bank4
  7060  0AED  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7061                           
  7062                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7063  0AEE  0023               	movlb	3	; select bank3
  7064  0AEF  085B               	movf	_tap_iteration^(0+384),w
  7065  0AF0  0021               	movlb	1	; select bank1
  7066  0AF1  00BC               	movwf	??_updateSwitchTap^(0+128)
  7067  0AF2  3001               	movlw	1
  7068  0AF3                     u9935:	
  7069  0AF3  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7070  0AF4  3EFF               	addlw	-1
  7071  0AF5  1D03               	skipz
  7072  0AF6  2AF3               	goto	u9935
  7073  0AF7  353C               	lslf	??_updateSwitchTap^(0+128),w
  7074  0AF8  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7075  0AF9  0086               	movwf	6
  7076  0AFA  3002               	movlw	2	; select bank4/5
  7077  0AFB  0087               	movwf	7
  7078  0AFC  0020               	movlb	0	; select bank0
  7079  0AFD  0846               	movf	_tap_timer,w	;volatile
  7080  0AFE  3FC0               	movwi [0]fsr1
  7081  0AFF  0847               	movf	_tap_timer+1,w	;volatile
  7082  0B00  3FC1               	movwi [1]fsr1
  7083  0B01  0848               	movf	_tap_timer+2,w	;volatile
  7084  0B02  3FC2               	movwi [2]fsr1
  7085  0B03  0849               	movf	_tap_timer+3,w	;volatile
  7086  0B04  3FC3               	movwi [3]fsr1
  7087                           
  7088                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7089  0B05  0023               	movlb	3	; select bank3
  7090  0B06  085C               	movf	(_tap_iteration+1)^(0+384),w
  7091  0B07  0021               	movlb	1	; select bank1
  7092  0B08  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7093  0B09  0023               	movlb	3	; select bank3
  7094  0B0A  085B               	movf	_tap_iteration^(0+384),w
  7095  0B0B  0021               	movlb	1	; select bank1
  7096  0B0C  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7097                           
  7098                           ;SwitchTap.c: 122: } else {
  7099  0B0D  2B8A               	goto	l9018
  7100  0B0E                     l9004:	
  7101                           
  7102                           ;SwitchTap.c: 123: tap_total = 0;
  7103  0B0E  3000               	movlw	0
  7104  0B0F  0024               	movlb	4	; select bank4
  7105  0B10  00C0               	movwf	(_tap_total+3)^(0+512)
  7106  0B11  3000               	movlw	0
  7107  0B12  00BF               	movwf	(_tap_total+2)^(0+512)
  7108  0B13  3000               	movlw	0
  7109  0B14  00BE               	movwf	(_tap_total+1)^(0+512)
  7110  0B15  3000               	movlw	0
  7111  0B16  00BD               	movwf	_tap_total^(0+512)
  7112                           
  7113                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7114  0B17  0021               	movlb	1	; select bank1
  7115  0B18  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7116  0B19  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7117  0B1A                     l9012:	
  7118  0B1A  0020               	movlb	0	; select bank0
  7119  0B1B  0869               	movf	_num_taps,w
  7120  0B1C  0021               	movlb	1	; select bank1
  7121  0B1D  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7122  0B1E  1803               	btfsc	3,0
  7123  0B1F  2B64               	goto	l9014
  7124                           
  7125                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7126  0B20  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7127  0B21  00BC               	movwf	??_updateSwitchTap^(0+128)
  7128  0B22  3001               	movlw	1
  7129  0B23                     u9945:	
  7130  0B23  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7131  0B24  3EFF               	addlw	-1
  7132  0B25  1D03               	skipz
  7133  0B26  2B23               	goto	u9945
  7134  0B27  353C               	lslf	??_updateSwitchTap^(0+128),w
  7135  0B28  3E04               	addlw	4
  7136  0B29  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7137  0B2A  0086               	movwf	6
  7138  0B2B  3002               	movlw	2	; select bank4/5
  7139  0B2C  0087               	movwf	7
  7140  0B2D  3F40               	moviw [0]fsr1
  7141  0B2E  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7142  0B2F  3F41               	moviw [1]fsr1
  7143  0B30  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7144  0B31  3F42               	moviw [2]fsr1
  7145  0B32  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7146  0B33  3F43               	moviw [3]fsr1
  7147  0B34  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7148  0B35  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7149  0B36  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7150  0B37  3001               	movlw	1
  7151  0B38                     u9955:	
  7152  0B38  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7153  0B39  3EFF               	addlw	-1
  7154  0B3A  1D03               	skipz
  7155  0B3B  2B38               	goto	u9955
  7156  0B3C  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7157  0B3D  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7158  0B3E  0086               	movwf	6
  7159  0B3F  3002               	movlw	2	; select bank4/5
  7160  0B40  0087               	movwf	7
  7161  0B41  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7162  0B42  3FC0               	movwi [0]fsr1
  7163  0B43  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7164  0B44  3FC1               	movwi [1]fsr1
  7165  0B45  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7166  0B46  3FC2               	movwi [2]fsr1
  7167  0B47  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7168  0B48  3FC3               	movwi [3]fsr1
  7169                           
  7170                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7171  0B49  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7172  0B4A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7173  0B4B  3001               	movlw	1
  7174  0B4C                     u9965:	
  7175  0B4C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7176  0B4D  3EFF               	addlw	-1
  7177  0B4E  1D03               	skipz
  7178  0B4F  2B4C               	goto	u9965
  7179  0B50  353C               	lslf	??_updateSwitchTap^(0+128),w
  7180  0B51  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7181  0B52  0086               	movwf	6
  7182  0B53  3002               	movlw	2	; select bank4/5
  7183  0B54  0087               	movwf	7
  7184  0B55  3F40               	moviw [0]fsr1
  7185  0B56  0024               	movlb	4	; select bank4
  7186  0B57  07BD               	addwf	_tap_total^(0+512),f
  7187  0B58  3F41               	moviw [1]fsr1
  7188  0B59  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7189  0B5A  3F42               	moviw [2]fsr1
  7190  0B5B  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7191  0B5C  3F43               	moviw [3]fsr1
  7192  0B5D  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7193  0B5E  3001               	movlw	1
  7194  0B5F  0021               	movlb	1	; select bank1
  7195  0B60  00BC               	movwf	??_updateSwitchTap^(0+128)
  7196  0B61  083C               	movf	??_updateSwitchTap^(0+128),w
  7197  0B62  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7198  0B63  2B1A               	goto	l9012
  7199  0B64                     l9014:	
  7200                           
  7201                           ;SwitchTap.c: 127: }
  7202                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7203  0B64  0020               	movlb	0	; select bank0
  7204  0B65  0869               	movf	_num_taps,w
  7205  0B66  0021               	movlb	1	; select bank1
  7206  0B67  00BC               	movwf	??_updateSwitchTap^(0+128)
  7207  0B68  3001               	movlw	1
  7208  0B69                     u9985:	
  7209  0B69  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7210  0B6A  3EFF               	addlw	-1
  7211  0B6B  1D03               	skipz
  7212  0B6C  2B69               	goto	u9985
  7213  0B6D  353C               	lslf	??_updateSwitchTap^(0+128),w
  7214  0B6E  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7215  0B6F  0086               	movwf	6
  7216  0B70  3002               	movlw	2	; select bank4/5
  7217  0B71  0087               	movwf	7
  7218  0B72  0020               	movlb	0	; select bank0
  7219  0B73  0846               	movf	_tap_timer,w	;volatile
  7220  0B74  3FC0               	movwi [0]fsr1
  7221  0B75  0847               	movf	_tap_timer+1,w	;volatile
  7222  0B76  3FC1               	movwi [1]fsr1
  7223  0B77  0848               	movf	_tap_timer+2,w	;volatile
  7224  0B78  3FC2               	movwi [2]fsr1
  7225  0B79  0849               	movf	_tap_timer+3,w	;volatile
  7226  0B7A  3FC3               	movwi [3]fsr1
  7227                           
  7228                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7229  0B7B  0846               	movf	_tap_timer,w	;volatile
  7230  0B7C  0024               	movlb	4	; select bank4
  7231  0B7D  07BD               	addwf	_tap_total^(0+512),f
  7232  0B7E  0020               	movlb	0	; select bank0
  7233  0B7F  0847               	movf	_tap_timer+1,w	;volatile
  7234  0B80  0024               	movlb	4	; select bank4
  7235  0B81  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7236  0B82  0020               	movlb	0	; select bank0
  7237  0B83  0848               	movf	_tap_timer+2,w	;volatile
  7238  0B84  0024               	movlb	4	; select bank4
  7239  0B85  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7240  0B86  0020               	movlb	0	; select bank0
  7241  0B87  0849               	movf	_tap_timer+3,w	;volatile
  7242  0B88  0024               	movlb	4	; select bank4
  7243  0B89  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7244  0B8A                     l9018:	
  7245                           
  7246                           ;SwitchTap.c: 130: }
  7247                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7248  0B8A  0021               	movlb	1	; select bank1
  7249  0B8B  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7250  0B8C  00A0               	movwf	___aldiv@divisor^(0+128)
  7251  0B8D  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7252  0B8E  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7253  0B8F  0D89               	rlf	9,f
  7254  0B90  3B89               	subwfb	9,f
  7255  0B91  0989               	comf	9,f
  7256  0B92  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7257  0B93  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7258  0B94  0024               	movlb	4	; select bank4
  7259  0B95  0840               	movf	(_tap_total+3)^(0+512),w
  7260  0B96  0021               	movlb	1	; select bank1
  7261  0B97  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7262  0B98  0024               	movlb	4	; select bank4
  7263  0B99  083F               	movf	(_tap_total+2)^(0+512),w
  7264  0B9A  0021               	movlb	1	; select bank1
  7265  0B9B  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7266  0B9C  0024               	movlb	4	; select bank4
  7267  0B9D  083E               	movf	(_tap_total+1)^(0+512),w
  7268  0B9E  0021               	movlb	1	; select bank1
  7269  0B9F  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7270  0BA0  0024               	movlb	4	; select bank4
  7271  0BA1  083D               	movf	_tap_total^(0+512),w
  7272  0BA2  0021               	movlb	1	; select bank1
  7273  0BA3  00A4               	movwf	___aldiv@dividend^(0+128)
  7274  0BA4  3198  20B3         	fcall	___aldiv
  7275  0BA6  0021               	movlb	1	; select bank1
  7276  0BA7  0823               	movf	(?___aldiv+3)^(0+128),w
  7277  0BA8  0023               	movlb	3	; select bank3
  7278  0BA9  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7279  0BAA  0021               	movlb	1	; select bank1
  7280  0BAB  0822               	movf	(?___aldiv+2)^(0+128),w
  7281  0BAC  0023               	movlb	3	; select bank3
  7282  0BAD  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7283  0BAE  0021               	movlb	1	; select bank1
  7284  0BAF  0821               	movf	(?___aldiv+1)^(0+128),w
  7285  0BB0  0023               	movlb	3	; select bank3
  7286  0BB1  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7287  0BB2  0021               	movlb	1	; select bank1
  7288  0BB3  0820               	movf	?___aldiv^(0+128),w
  7289  0BB4  0023               	movlb	3	; select bank3
  7290  0BB5  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  7291                           
  7292                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7293  0BB6  0020               	movlb	0	; select bank0
  7294  0BB7  01E8               	clrf	_mod_time_changed
  7295  0BB8  0AE8               	incf	_mod_time_changed,f
  7296                           
  7297                           ;SwitchTap.c: 134: tap_timer = 0;
  7298  0BB9  3000               	movlw	0
  7299  0BBA  00C9               	movwf	_tap_timer+3	;volatile
  7300  0BBB  3000               	movlw	0
  7301  0BBC  00C8               	movwf	_tap_timer+2	;volatile
  7302  0BBD  3000               	movlw	0
  7303  0BBE  00C7               	movwf	_tap_timer+1	;volatile
  7304  0BBF  3000               	movlw	0
  7305  0BC0  00C6               	movwf	_tap_timer	;volatile
  7306                           
  7307                           ;SwitchTap.c: 136: tap_iteration++;
  7308  0BC1  3001               	movlw	1
  7309  0BC2  0023               	movlb	3	; select bank3
  7310  0BC3  07DB               	addwf	_tap_iteration^(0+384),f
  7311  0BC4  3000               	movlw	0
  7312  0BC5  3DDC               	addwfc	(_tap_iteration+1)^(0+384),f
  7313                           
  7314                           ;SwitchTap.c: 137: }
  7315                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7316  0BC6  0008               	return
  7317  0BC7                     l9026:	
  7318  0BC7  3019               	movlw	25
  7319  0BC8  0020               	movlb	0	; select bank0
  7320  0BC9  0259               	subwf	_switchTap_pressed,w
  7321  0BCA  1C03               	skipc
  7322  0BCB  0008               	return
  7323                           
  7324                           ;SwitchTap.c: 140: switchTap_down = 0;
  7325  0BCC  0023               	movlb	3	; select bank3
  7326  0BCD  01C6               	clrf	_switchTap_down^(0+384)
  7327                           
  7328                           ;SwitchTap.c: 141: switchTap_state = 0;
  7329  0BCE  0022               	movlb	2	; select bank2
  7330  0BCF  01EF               	clrf	_switchTap_state^(0+256)
  7331                           
  7332                           ;SwitchTap.c: 147: setLongTapState(0);
  7333  0BD0  3000               	movlw	0
  7334  0BD1  0021               	movlb	1	; select bank1
  7335  0BD2  00A0               	movwf	setLongTapState@f_state^(0+128)
  7336  0BD3  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7337  0BD4  31AE  260B         	fcall	_setLongTapState
  7338                           
  7339                           ;SwitchTap.c: 149: longTap_timer = 0;
  7340  0BD6  0023               	movlb	3	; select bank3
  7341  0BD7  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7342  0BD8  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7343                           
  7344                           ;SwitchTap.c: 150: longTap_start = 0;
  7345  0BD9  0020               	movlb	0	; select bank0
  7346  0BDA  01D4               	clrf	_longTap_start
  7347                           
  7348                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7349  0BDB  3019               	movlw	25
  7350  0BDC  0021               	movlb	1	; select bank1
  7351  0BDD  00BC               	movwf	??_updateSwitchTap^(0+128)
  7352  0BDE  083C               	movf	??_updateSwitchTap^(0+128),w
  7353  0BDF  0020               	movlb	0	; select bank0
  7354  0BE0  00D9               	movwf	_switchTap_pressed
  7355  0BE1  0008               	return
  7356  0BE2                     __end_of_updateSwitchTap:	
  7357                           
  7358                           	psect	text4
  7359  2E0B                     __ptext4:	
  7360 ;; *************** function _setLongTapState *****************
  7361 ;; Defined at:
  7362 ;;		line 167 in file "SwitchTap.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;  f_state         2    0[BANK1 ] int 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;		None
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      void 
  7369 ;; Registers used:
  7370 ;;		wreg, status,0
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7376 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7378 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7379 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7380 ;;Total ram usage:        4 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    3
  7383 ;; This function calls:
  7384 ;;		Nothing
  7385 ;; This function is called by:
  7386 ;;		_updateSwitchTap
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _setLongTapState
  7392  2E0B                     _setLongTapState:	
  7393                           
  7394                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _setLongTapState: [wreg+status,0]
  7398  2E0B  0020               	movlb	0	; select bank0
  7399  2E0C  0867               	movf	_longTap_state,w	;volatile
  7400  2E0D  0021               	movlb	1	; select bank1
  7401  2E0E  00A2               	movwf	??_setLongTapState^(0+128)
  7402  2E0F  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7403  2E10  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7404  2E11  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7405  2E12  1D03               	skipz
  7406  2E13  2E16               	goto	u8925
  7407  2E14  0820               	movf	setLongTapState@f_state^(0+128),w
  7408  2E15  0622               	xorwf	??_setLongTapState^(0+128),w
  7409  2E16                     u8925:	
  7410  2E16  1903               	btfsc	3,2
  7411  2E17  0008               	return
  7412                           
  7413                           ;SwitchTap.c: 169: longTap_state = f_state;
  7414  2E18  0820               	movf	setLongTapState@f_state^(0+128),w
  7415  2E19  00A2               	movwf	??_setLongTapState^(0+128)
  7416  2E1A  0822               	movf	??_setLongTapState^(0+128),w
  7417  2E1B  0020               	movlb	0	; select bank0
  7418  2E1C  00E7               	movwf	_longTap_state	;volatile
  7419                           
  7420                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7421  2E1D  0021               	movlb	1	; select bank1
  7422  2E1E  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7423  2E1F  0022               	movlb	2	; select bank2
  7424  2E20  1C03               	skipc
  7425  2E21  128D               	bcf	13,5	;volatile
  7426  2E22  1803               	skipnc
  7427  2E23  168D               	bsf	13,5	;volatile
  7428  2E24  0008               	return
  7429  2E25                     __end_of_setLongTapState:	
  7430                           
  7431                           	psect	text5
  7432  18B3                     __ptext5:	
  7433 ;; *************** function ___aldiv *****************
  7434 ;; Defined at:
  7435 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  divisor         4    0[BANK1 ] long 
  7438 ;;  dividend        4    4[BANK1 ] long 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  quotient        4   11[BANK1 ] long 
  7441 ;;  sign            1   10[BANK1 ] unsigned char 
  7442 ;;  counter         1    9[BANK1 ] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  4    0[BANK1 ] long 
  7445 ;; Registers used:
  7446 ;;		wreg, status,2, status,0
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7452 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7453 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7454 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7455 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7456 ;;Total ram usage:       15 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    3
  7459 ;; This function calls:
  7460 ;;		Nothing
  7461 ;; This function is called by:
  7462 ;;		_updateSwitchTap
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function ___aldiv
  7468  18B3                     ___aldiv:	
  7469                           
  7470                           ;incstack = 0
  7471                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7472  18B3  0021               	movlb	1	; select bank1
  7473  18B4  01AA               	clrf	___aldiv@sign^(0+128)
  7474  18B5  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7475  18B6  28C4               	goto	l1996
  7476  18B7  09A0               	comf	___aldiv@divisor^(0+128),f
  7477  18B8  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7478  18B9  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7479  18BA  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7480  18BB  0AA0               	incf	___aldiv@divisor^(0+128),f
  7481  18BC  1903               	skipnz
  7482  18BD  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7483  18BE  1903               	skipnz
  7484  18BF  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7485  18C0  1903               	skipnz
  7486  18C1  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7487  18C2  01AA               	clrf	___aldiv@sign^(0+128)
  7488  18C3  0AAA               	incf	___aldiv@sign^(0+128),f
  7489  18C4                     l1996:	
  7490  18C4  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7491  18C5  28D5               	goto	l8548
  7492  18C6  09A4               	comf	___aldiv@dividend^(0+128),f
  7493  18C7  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7494  18C8  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7495  18C9  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7496  18CA  0AA4               	incf	___aldiv@dividend^(0+128),f
  7497  18CB  1903               	skipnz
  7498  18CC  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7499  18CD  1903               	skipnz
  7500  18CE  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7501  18CF  1903               	skipnz
  7502  18D0  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7503  18D1  3001               	movlw	1
  7504  18D2  00A8               	movwf	??___aldiv^(0+128)
  7505  18D3  0828               	movf	??___aldiv^(0+128),w
  7506  18D4  06AA               	xorwf	___aldiv@sign^(0+128),f
  7507  18D5                     l8548:	
  7508  18D5  3000               	movlw	0
  7509  18D6  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7510  18D7  3000               	movlw	0
  7511  18D8  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7512  18D9  3000               	movlw	0
  7513  18DA  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7514  18DB  3000               	movlw	0
  7515  18DC  00AB               	movwf	___aldiv@quotient^(0+128)
  7516  18DD  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7517  18DE  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7518  18DF  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7519  18E0  0420               	iorwf	___aldiv@divisor^(0+128),w
  7520  18E1  1903               	skipnz
  7521  18E2  291E               	goto	l8570
  7522  18E3  01A9               	clrf	___aldiv@counter^(0+128)
  7523  18E4  0AA9               	incf	___aldiv@counter^(0+128),f
  7524  18E5                     l8556:	
  7525  18E5  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7526  18E6  28F3               	goto	l8558
  7527  18E7  3001               	movlw	1
  7528  18E8                     u9065:	
  7529  18E8  35A0               	lslf	___aldiv@divisor^(0+128),f
  7530  18E9  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7531  18EA  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7532  18EB  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7533  18EC  0B89               	decfsz	9,f
  7534  18ED  28E8               	goto	u9065
  7535  18EE  3001               	movlw	1
  7536  18EF  00A8               	movwf	??___aldiv^(0+128)
  7537  18F0  0828               	movf	??___aldiv^(0+128),w
  7538  18F1  07A9               	addwf	___aldiv@counter^(0+128),f
  7539  18F2  28E5               	goto	l8556
  7540  18F3                     l8558:	
  7541  18F3  3001               	movlw	1
  7542  18F4                     u9085:	
  7543  18F4  35AB               	lslf	___aldiv@quotient^(0+128),f
  7544  18F5  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7545  18F6  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7546  18F7  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7547  18F8  0B89               	decfsz	9,f
  7548  18F9  28F4               	goto	u9085
  7549  18FA  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7550  18FB  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7551  18FC  1D03               	skipz
  7552  18FD  2908               	goto	u9095
  7553  18FE  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7554  18FF  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7555  1900  1D03               	skipz
  7556  1901  2908               	goto	u9095
  7557  1902  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7558  1903  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7559  1904  1D03               	skipz
  7560  1905  2908               	goto	u9095
  7561  1906  0820               	movf	___aldiv@divisor^(0+128),w
  7562  1907  0224               	subwf	___aldiv@dividend^(0+128),w
  7563  1908                     u9095:	
  7564  1908  1C03               	skipc
  7565  1909  2913               	goto	l8566
  7566  190A  0820               	movf	___aldiv@divisor^(0+128),w
  7567  190B  02A4               	subwf	___aldiv@dividend^(0+128),f
  7568  190C  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7569  190D  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7570  190E  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7571  190F  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7572  1910  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7573  1911  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7574  1912  142B               	bsf	___aldiv@quotient^(0+128),0
  7575  1913                     l8566:	
  7576  1913  3001               	movlw	1
  7577  1914                     u9105:	
  7578  1914  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7579  1915  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7580  1916  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7581  1917  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7582  1918  0B89               	decfsz	9,f
  7583  1919  2914               	goto	u9105
  7584  191A  3001               	movlw	1
  7585  191B  02A9               	subwf	___aldiv@counter^(0+128),f
  7586  191C  1D03               	btfss	3,2
  7587  191D  28F3               	goto	l8558
  7588  191E                     l8570:	
  7589  191E  082A               	movf	___aldiv@sign^(0+128),w
  7590  191F  1903               	btfsc	3,2
  7591  1920  292C               	goto	l8574
  7592  1921  09AB               	comf	___aldiv@quotient^(0+128),f
  7593  1922  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7594  1923  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7595  1924  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7596  1925  0AAB               	incf	___aldiv@quotient^(0+128),f
  7597  1926  1903               	skipnz
  7598  1927  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7599  1928  1903               	skipnz
  7600  1929  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7601  192A  1903               	skipnz
  7602  192B  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7603  192C                     l8574:	
  7604  192C  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7605  192D  00A3               	movwf	(?___aldiv+3)^(0+128)
  7606  192E  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7607  192F  00A2               	movwf	(?___aldiv+2)^(0+128)
  7608  1930  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7609  1931  00A1               	movwf	(?___aldiv+1)^(0+128)
  7610  1932  082B               	movf	___aldiv@quotient^(0+128),w
  7611  1933  00A0               	movwf	?___aldiv^(0+128)
  7612  1934  0008               	return
  7613  1935                     __end_of___aldiv:	
  7614                           
  7615                           	psect	text6
  7616  1232                     __ptext6:	
  7617 ;; *************** function _updateSwitchBypass *****************
  7618 ;; Defined at:
  7619 ;;		line 34 in file "SwitchBypass.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      void 
  7626 ;; Registers used:
  7627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7635 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7636 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7637 ;;Total ram usage:        2 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    8
  7640 ;; This function calls:
  7641 ;;		_setDoublePressState
  7642 ;;		_setLongBypassState
  7643 ;;		_setSwitchBypassRelays
  7644 ;;		_setSwitchBypassState
  7645 ;; This function is called by:
  7646 ;;		_main
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _updateSwitchBypass
  7652  1232                     _updateSwitchBypass:	
  7653                           
  7654                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7655                           
  7656                           ;incstack = 0
  7657                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7658  1232  0020               	movlb	0	; select bank0
  7659  1233  1890               	btfsc	16,1	;volatile
  7660  1234  2A48               	goto	l8826
  7661                           
  7662                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7663  1235  0023               	movlb	3	; select bank3
  7664  1236  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7665  1237  3A80               	xorlw	128
  7666  1238  0021               	movlb	1	; select bank1
  7667  1239  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7668  123A  3080               	movlw	128
  7669  123B  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7670  123C  1D03               	skipz
  7671  123D  2A41               	goto	u9525
  7672  123E  3001               	movlw	1
  7673  123F  0023               	movlb	3	; select bank3
  7674  1240  023C               	subwf	_switchBypass_pressed^(0+384),w
  7675  1241                     u9525:	
  7676  1241  1C03               	skipc
  7677  1242  2A5B               	goto	l8830
  7678                           
  7679                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7680  1243  30FF               	movlw	255
  7681  1244  0023               	movlb	3	; select bank3
  7682  1245  07BC               	addwf	_switchBypass_pressed^(0+384),f
  7683  1246  30FF               	movlw	255
  7684  1247  2A5A               	goto	L2
  7685  1248                     l8826:	
  7686                           ;SwitchBypass.c: 44: }
  7687                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7688                           
  7689  1248  0023               	movlb	3	; select bank3
  7690  1249  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7691  124A  3A80               	xorlw	128
  7692  124B  0021               	movlb	1	; select bank1
  7693  124C  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7694  124D  3080               	movlw	128
  7695  124E  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7696  124F  1D03               	skipz
  7697  1250  2A54               	goto	u9535
  7698  1251  3019               	movlw	25
  7699  1252  0023               	movlb	3	; select bank3
  7700  1253  023C               	subwf	_switchBypass_pressed^(0+384),w
  7701  1254                     u9535:	
  7702  1254  1803               	skipnc
  7703  1255  2A5B               	goto	l8830
  7704                           
  7705                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7706  1256  3001               	movlw	1
  7707  1257  0023               	movlb	3	; select bank3
  7708  1258  07BC               	addwf	_switchBypass_pressed^(0+384),f
  7709  1259  3000               	movlw	0
  7710  125A                     L2:	
  7711  125A  3DBD               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7712  125B                     l8830:	
  7713                           
  7714                           ;SwitchBypass.c: 47: }
  7715                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7716  125B  0023               	movlb	3	; select bank3
  7717  125C  083C               	movf	_switchBypass_pressed^(0+384),w
  7718  125D  043D               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7719  125E  1D03               	btfss	3,2
  7720  125F  2AE1               	goto	l8892
  7721                           
  7722                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7723  1260  0020               	movlb	0	; select bank0
  7724  1261  0852               	movf	_longBypass_start,w
  7725  1262  1D03               	btfss	3,2
  7726  1263  2A69               	goto	l8838
  7727                           
  7728                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7729  1264  01D2               	clrf	_longBypass_start
  7730  1265  0AD2               	incf	_longBypass_start,f
  7731                           
  7732                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7733  1266  0023               	movlb	3	; select bank3
  7734  1267  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7735  1268  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7736  1269                     l8838:	
  7737                           
  7738                           ;SwitchBypass.c: 59: }
  7739                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7740  1269  0020               	movlb	0	; select bank0
  7741  126A  0862               	movf	_long_press_limit+1,w
  7742  126B  0023               	movlb	3	; select bank3
  7743  126C  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7744  126D  1D03               	skipz
  7745  126E  2A73               	goto	u9565
  7746  126F  0020               	movlb	0	; select bank0
  7747  1270  0861               	movf	_long_press_limit,w
  7748  1271  0023               	movlb	3	; select bank3
  7749  1272  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7750  1273                     u9565:	
  7751  1273  1C03               	skipc
  7752  1274  2AAF               	goto	l8864
  7753  1275  0020               	movlb	0	; select bank0
  7754  1276  0851               	movf	_longBypass_down,w
  7755  1277  1D03               	btfss	3,2
  7756  1278  2AAF               	goto	l8864
  7757  1279  0850               	movf	_doubleTap_state,w	;volatile
  7758  127A  1D03               	btfss	3,2
  7759  127B  2AAF               	goto	l8864
  7760                           
  7761                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7762  127C  0022               	movlb	2	; select bank2
  7763  127D  110D               	bcf	13,2	;volatile
  7764                           
  7765                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7766  127E  0020               	movlb	0	; select bank0
  7767  127F  0354               	decf	_longTap_start,w
  7768  1280  1903               	btfsc	3,2
  7769  1281  2AA7               	goto	l8862
  7770                           
  7771                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7772  1282  036B               	decf	_switchBypass_state,w
  7773  1283  1D03               	btfss	3,2
  7774  1284  2AAF               	goto	l8864
  7775                           
  7776                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7777  1285  01D1               	clrf	_longBypass_down
  7778  1286  0AD1               	incf	_longBypass_down,f
  7779                           
  7780                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7781  1287  0853               	movf	_longBypass_state,w	;volatile
  7782  1288  1D03               	btfss	3,2
  7783  1289  2A95               	goto	l8858
  7784                           
  7785                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7786  128A  0022               	movlb	2	; select bank2
  7787  128B  110D               	bcf	13,2	;volatile
  7788                           
  7789                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7790  128C  3001               	movlw	1
  7791  128D  0021               	movlb	1	; select bank1
  7792  128E  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7793  128F  3000               	movlw	0
  7794  1290  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7795  1291  31AE  26B4  3192   	fcall	_setLongBypassState
  7796                           
  7797                           ;SwitchBypass.c: 71: } else {
  7798  1294  2AAF               	goto	l8864
  7799  1295                     l8858:	
  7800                           
  7801                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7802  1295  3001               	movlw	1
  7803  1296  0021               	movlb	1	; select bank1
  7804  1297  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7805  1298  3000               	movlw	0
  7806  1299  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7807  129A  31AE  265C  3192   	fcall	_setSwitchBypassState
  7808                           
  7809                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7810  129D  3000               	movlw	0
  7811  129E  0021               	movlb	1	; select bank1
  7812  129F  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7813  12A0  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7814  12A1  31AE  26B4  3192   	fcall	_setLongBypassState
  7815                           
  7816                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7817  12A4  0022               	movlb	2	; select bank2
  7818  12A5  150D               	bsf	13,2	;volatile
  7819                           
  7820                           ;SwitchBypass.c: 75: }
  7821                           ;SwitchBypass.c: 76: }
  7822                           ;SwitchBypass.c: 77: } else {
  7823  12A6  2AAF               	goto	l8864
  7824  12A7                     l8862:	
  7825                           
  7826                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7827  12A7  3001               	movlw	1
  7828  12A8  0021               	movlb	1	; select bank1
  7829  12A9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7830  12AA  3000               	movlw	0
  7831  12AB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7832  12AC  31A1  21A3  3192   	fcall	_setDoublePressState
  7833  12AF                     l8864:	
  7834                           
  7835                           ;SwitchBypass.c: 79: }
  7836                           ;SwitchBypass.c: 80: }
  7837                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7838  12AF  0022               	movlb	2	; select bank2
  7839  12B0  120F               	bcf	15,4	;volatile
  7840                           
  7841                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7842  12B1  0020               	movlb	0	; select bank0
  7843  12B2  0850               	movf	_doubleTap_state,w	;volatile
  7844  12B3  1D03               	btfss	3,2
  7845  12B4  2ADD               	goto	l8890
  7846  12B5  0851               	movf	_longBypass_down,w
  7847  12B6  1D03               	btfss	3,2
  7848  12B7  2ADD               	goto	l8890
  7849                           
  7850                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7851  12B8  036B               	decf	_switchBypass_state,w
  7852  12B9  1D03               	btfss	3,2
  7853  12BA  2AC9               	goto	l8878
  7854                           
  7855                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7856  12BB  0024               	movlb	4	; select bank4
  7857  12BC  035E               	decf	_switchBypass_up^(0+512),w
  7858  12BD  045F               	iorwf	(_switchBypass_up+1)^(0+512),w
  7859  12BE  1D03               	btfss	3,2
  7860  12BF  2ADD               	goto	l8890
  7861                           
  7862                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7863  12C0  0023               	movlb	3	; select bank3
  7864  12C1  01DE               	clrf	_currentBypassState^(0+384)
  7865  12C2  0ADE               	incf	_currentBypassState^(0+384),f
  7866                           
  7867                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7868  12C3  3001               	movlw	1
  7869  12C4  0024               	movlb	4	; select bank4
  7870  12C5  00D1               	movwf	_switchBypass_toggle^(0+512)
  7871  12C6  3000               	movlw	0
  7872  12C7  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7873                           
  7874                           ;SwitchBypass.c: 88: }
  7875                           ;SwitchBypass.c: 89: } else {
  7876  12C8  2ADD               	goto	l8890
  7877  12C9                     l8878:	
  7878                           
  7879                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7880  12C9  0023               	movlb	3	; select bank3
  7881  12CA  033F               	decf	_bypass_turning_on^(0+384),w
  7882  12CB  1903               	btfsc	3,2
  7883  12CC  2ADD               	goto	l8890
  7884                           
  7885                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7886  12CD  01DE               	clrf	_currentBypassState^(0+384)
  7887                           
  7888                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7889  12CE  01BF               	clrf	_bypass_turning_on^(0+384)
  7890  12CF  0ABF               	incf	_bypass_turning_on^(0+384),f
  7891                           
  7892                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7893  12D0  0024               	movlb	4	; select bank4
  7894  12D1  01D1               	clrf	_switchBypass_toggle^(0+512)
  7895  12D2  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7896                           
  7897                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7898  12D3  0020               	movlb	0	; select bank0
  7899  12D4  0853               	movf	_longBypass_state,w	;volatile
  7900  12D5  0021               	movlb	1	; select bank1
  7901  12D6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7902  12D7  083C               	movf	??_updateSwitchBypass^(0+128),w
  7903  12D8  0023               	movlb	3	; select bank3
  7904  12D9  00C1               	movwf	_longBypass_save^(0+384)
  7905                           
  7906                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7907  12DA  0020               	movlb	0	; select bank0
  7908  12DB  01D3               	clrf	_longBypass_state	;volatile
  7909                           
  7910                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7911  12DC  01D2               	clrf	_longBypass_start
  7912  12DD                     l8890:	
  7913                           
  7914                           ;SwitchBypass.c: 100: }
  7915                           ;SwitchBypass.c: 101: }
  7916                           ;SwitchBypass.c: 103: }
  7917                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7918  12DD  0024               	movlb	4	; select bank4
  7919  12DE  01DE               	clrf	_switchBypass_up^(0+512)
  7920  12DF  01DF               	clrf	(_switchBypass_up+1)^(0+512)
  7921                           
  7922                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7923  12E0  0008               	return
  7924  12E1                     l8892:	
  7925  12E1  0023               	movlb	3	; select bank3
  7926  12E2  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7927  12E3  3A80               	xorlw	128
  7928  12E4  0021               	movlb	1	; select bank1
  7929  12E5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7930  12E6  3080               	movlw	128
  7931  12E7  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7932  12E8  1D03               	skipz
  7933  12E9  2AED               	goto	u9675
  7934  12EA  3019               	movlw	25
  7935  12EB  0023               	movlb	3	; select bank3
  7936  12EC  023C               	subwf	_switchBypass_pressed^(0+384),w
  7937  12ED                     u9675:	
  7938  12ED  1C03               	skipc
  7939  12EE  0008               	return
  7940                           
  7941                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7942  12EF  0020               	movlb	0	; select bank0
  7943  12F0  0350               	decf	_doubleTap_state,w	;volatile
  7944  12F1  1D03               	btfss	3,2
  7945  12F2  2AFC               	goto	l8898
  7946                           
  7947                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7948  12F3  0023               	movlb	3	; select bank3
  7949  12F4  085E               	movf	_currentBypassState^(0+384),w
  7950  12F5  0021               	movlb	1	; select bank1
  7951  12F6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7952  12F7  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7953  12F8  083C               	movf	??_updateSwitchBypass^(0+128),w
  7954  12F9  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7955  12FA  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7956  12FB  2B2B               	goto	L3
  7957  12FC                     l8898:	
  7958                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7959                           
  7960  12FC  0023               	movlb	3	; select bank3
  7961  12FD  033F               	decf	_bypass_turning_on^(0+384),w
  7962  12FE  1D03               	btfss	3,2
  7963  12FF  2B1C               	goto	l8908
  7964                           
  7965                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7966  1300  0341               	decf	_longBypass_save^(0+384),w
  7967  1301  1D03               	btfss	3,2
  7968  1302  2B16               	goto	l8906
  7969                           
  7970                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7971  1303  0022               	movlb	2	; select bank2
  7972  1304  110D               	bcf	13,2	;volatile
  7973                           
  7974                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7975  1305  3001               	movlw	1
  7976  1306  0021               	movlb	1	; select bank1
  7977  1307  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7978  1308  3000               	movlw	0
  7979  1309  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7980  130A  31AE  26B4  3192   	fcall	_setLongBypassState
  7981                           
  7982                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  7983  130D  3001               	movlw	1
  7984  130E  0021               	movlb	1	; select bank1
  7985  130F  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  7986  1310  3000               	movlw	0
  7987  1311  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  7988  1312  31A0  2047  3192   	fcall	_setSwitchBypassRelays
  7989                           
  7990                           ;SwitchBypass.c: 114: } else {
  7991  1315  2B2F               	goto	l8916
  7992  1316                     l8906:	
  7993                           
  7994                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  7995  1316  3001               	movlw	1
  7996  1317  0021               	movlb	1	; select bank1
  7997  1318  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7998  1319  3000               	movlw	0
  7999  131A  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8000  131B  2B2C               	goto	L4
  8001  131C                     l8908:	
  8002                           ;SwitchBypass.c: 116: }
  8003                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8004                           
  8005  131C  0024               	movlb	4	; select bank4
  8006  131D  0351               	decf	_switchBypass_toggle^(0+512),w
  8007  131E  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8008  131F  1D03               	btfss	3,2
  8009  1320  2B2F               	goto	l8916
  8010  1321  0020               	movlb	0	; select bank0
  8011  1322  0851               	movf	_longBypass_down,w
  8012  1323  1D03               	btfss	3,2
  8013  1324  2B2F               	goto	l8916
  8014  1325  0850               	movf	_doubleTap_state,w	;volatile
  8015  1326  1D03               	btfss	3,2
  8016  1327  2B2F               	goto	l8916
  8017                           
  8018                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8019  1328  3000               	movlw	0
  8020  1329  0021               	movlb	1	; select bank1
  8021  132A  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8022  132B                     L3:	
  8023  132B  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8024  132C                     L4:	
  8025  132C  31AE  265C  3192   	fcall	_setSwitchBypassState
  8026  132F                     l8916:	
  8027                           
  8028                           ;SwitchBypass.c: 120: }
  8029                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8030  132F  0020               	movlb	0	; select bank0
  8031  1330  01D1               	clrf	_longBypass_down
  8032                           
  8033                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8034  1331  0853               	movf	_longBypass_state,w	;volatile
  8035  1332  1D03               	btfss	3,2
  8036  1333  2B3A               	goto	l8922
  8037                           
  8038                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8039  1334  0C6B               	rrf	_switchBypass_state,w
  8040  1335  0022               	movlb	2	; select bank2
  8041  1336  1C03               	skipc
  8042  1337  110D               	bcf	13,2	;volatile
  8043  1338  1803               	skipnc
  8044  1339  150D               	bsf	13,2	;volatile
  8045  133A                     l8922:	
  8046                           
  8047                           ;SwitchBypass.c: 125: }
  8048                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8049  133A  3000               	movlw	0
  8050  133B  0021               	movlb	1	; select bank1
  8051  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8052  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8053  133E  31A1  21A3         	fcall	_setDoublePressState
  8054                           
  8055                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8056  1340  0020               	movlb	0	; select bank0
  8057  1341  01D2               	clrf	_longBypass_start
  8058                           
  8059                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8060  1342  0023               	movlb	3	; select bank3
  8061  1343  01BF               	clrf	_bypass_turning_on^(0+384)
  8062                           
  8063                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8064  1344  0024               	movlb	4	; select bank4
  8065  1345  01D1               	clrf	_switchBypass_toggle^(0+512)
  8066  1346  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8067                           
  8068                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8069  1347  3001               	movlw	1
  8070  1348  00DE               	movwf	_switchBypass_up^(0+512)
  8071  1349  3000               	movlw	0
  8072  134A  00DF               	movwf	(_switchBypass_up^(0+512)+1)
  8073                           
  8074                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8075  134B  3019               	movlw	25
  8076  134C  0023               	movlb	3	; select bank3
  8077  134D  00BC               	movwf	_switchBypass_pressed^(0+384)
  8078  134E  3000               	movlw	0
  8079  134F  00BD               	movwf	(_switchBypass_pressed^(0+384)+1)
  8080  1350  0008               	return
  8081  1351                     __end_of_updateSwitchBypass:	
  8082                           
  8083                           	psect	text7
  8084  2EB4                     __ptext7:	
  8085 ;; *************** function _setLongBypassState *****************
  8086 ;; Defined at:
  8087 ;;		line 163 in file "SwitchBypass.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  f_state         2    0[BANK1 ] int 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;		None
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      void 
  8094 ;; Registers used:
  8095 ;;		wreg, status,0
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8101 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8103 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8104 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8105 ;;Total ram usage:        4 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    3
  8108 ;; This function calls:
  8109 ;;		Nothing
  8110 ;; This function is called by:
  8111 ;;		_updateSwitchBypass
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _setLongBypassState
  8117  2EB4                     _setLongBypassState:	
  8118                           
  8119                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8123  2EB4  0020               	movlb	0	; select bank0
  8124  2EB5  0853               	movf	_longBypass_state,w	;volatile
  8125  2EB6  0021               	movlb	1	; select bank1
  8126  2EB7  00A2               	movwf	??_setLongBypassState^(0+128)
  8127  2EB8  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8128  2EB9  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8129  2EBA  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8130  2EBB  1D03               	skipz
  8131  2EBC  2EBF               	goto	u8875
  8132  2EBD  0820               	movf	setLongBypassState@f_state^(0+128),w
  8133  2EBE  0622               	xorwf	??_setLongBypassState^(0+128),w
  8134  2EBF                     u8875:	
  8135  2EBF  1903               	btfsc	3,2
  8136  2EC0  0008               	return
  8137                           
  8138                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8139  2EC1  0820               	movf	setLongBypassState@f_state^(0+128),w
  8140  2EC2  00A2               	movwf	??_setLongBypassState^(0+128)
  8141  2EC3  0822               	movf	??_setLongBypassState^(0+128),w
  8142  2EC4  0020               	movlb	0	; select bank0
  8143  2EC5  00D3               	movwf	_longBypass_state	;volatile
  8144                           
  8145                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8146  2EC6  0021               	movlb	1	; select bank1
  8147  2EC7  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8148  2EC8  0022               	movlb	2	; select bank2
  8149  2EC9  1C03               	skipc
  8150  2ECA  118D               	bcf	13,3	;volatile
  8151  2ECB  1803               	skipnc
  8152  2ECC  158D               	bsf	13,3	;volatile
  8153                           
  8154                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8155  2ECD  0021               	movlb	1	; select bank1
  8156  2ECE  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8157  2ECF  0020               	movlb	0	; select bank0
  8158  2ED0  1C03               	skipc
  8159  2ED1  120E               	bcf	14,4	;volatile
  8160  2ED2  1803               	skipnc
  8161  2ED3  160E               	bsf	14,4	;volatile
  8162  2ED4  0008               	return
  8163  2ED5                     __end_of_setLongBypassState:	
  8164                           
  8165                           	psect	text8
  8166  21A3                     __ptext8:	
  8167 ;; *************** function _setDoublePressState *****************
  8168 ;; Defined at:
  8169 ;;		line 21 in file "preset_programming.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  f_state         2   24[BANK1 ] int 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;		None
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  1    wreg      void 
  8176 ;; Registers used:
  8177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8183 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8185 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8186 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8187 ;;Total ram usage:        4 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    7
  8190 ;; This function calls:
  8191 ;;		_resetRingLEDs
  8192 ;;		_setPedalMode
  8193 ;;		_setPresetDisplay
  8194 ;;		_showSave
  8195 ;;		_wait_ms
  8196 ;; This function is called by:
  8197 ;;		_updateSwitchBypass
  8198 ;;		_updateSwitchTap
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _setDoublePressState
  8204  21A3                     _setDoublePressState:	
  8205                           
  8206                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8210  21A3  0020               	movlb	0	; select bank0
  8211  21A4  0850               	movf	_doubleTap_state,w	;volatile
  8212  21A5  0021               	movlb	1	; select bank1
  8213  21A6  00BA               	movwf	??_setDoublePressState^(0+128)
  8214  21A7  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8215  21A8  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8216  21A9  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8217  21AA  1D03               	skipz
  8218  21AB  29AE               	goto	u8885
  8219  21AC  0838               	movf	setDoublePressState@f_state^(0+128),w
  8220  21AD  063A               	xorwf	??_setDoublePressState^(0+128),w
  8221  21AE                     u8885:	
  8222  21AE  1903               	btfsc	3,2
  8223  21AF  0008               	return
  8224                           
  8225                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8226  21B0  0838               	movf	setDoublePressState@f_state^(0+128),w
  8227  21B1  00BA               	movwf	??_setDoublePressState^(0+128)
  8228  21B2  083A               	movf	??_setDoublePressState^(0+128),w
  8229  21B3  0020               	movlb	0	; select bank0
  8230  21B4  00D0               	movwf	_doubleTap_state	;volatile
  8231                           
  8232                           ;preset_programming.c: 24: if (f_state == 1) {
  8233  21B5  0021               	movlb	1	; select bank1
  8234  21B6  0338               	decf	setDoublePressState@f_state^(0+128),w
  8235  21B7  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8236  21B8  1D03               	btfss	3,2
  8237  21B9  29BD               	goto	l8448
  8238                           
  8239                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8240  21BA  0022               	movlb	2	; select bank2
  8241  21BB  120D               	bcf	13,4	;volatile
  8242                           
  8243                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8244  21BC  128D               	bcf	13,5	;volatile
  8245  21BD                     l8448:	
  8246                           
  8247                           ;preset_programming.c: 30: }
  8248                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8249  21BD  0020               	movlb	0	; select bank0
  8250  21BE  0350               	decf	_doubleTap_state,w	;volatile
  8251  21BF  1D03               	btfss	3,2
  8252  21C0  29D9               	goto	l8464
  8253                           
  8254                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8255  21C1  0856               	movf	_presetSaveMode,w
  8256  21C2  1D03               	btfss	3,2
  8257  21C3  29CE               	goto	l8456
  8258                           
  8259                           ;preset_programming.c: 34: presetSaveMode = 1;
  8260  21C4  01D6               	clrf	_presetSaveMode
  8261  21C5  0AD6               	incf	_presetSaveMode,f
  8262                           
  8263                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8264  21C6  0022               	movlb	2	; select bank2
  8265  21C7  108D               	bcf	13,1	;volatile
  8266                           
  8267                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8268  21C8  0020               	movlb	0	; select bank0
  8269  21C9  086A               	movf	_presetChannel,w
  8270  21CA  31A0  20B5  31A1   	fcall	_setPresetDisplay
  8271                           
  8272                           ;preset_programming.c: 37: } else {
  8273  21CD  29D9               	goto	l8464
  8274  21CE                     l8456:	
  8275                           
  8276                           ;preset_programming.c: 39: presetSaveMode = 0;
  8277  21CE  0020               	movlb	0	; select bank0
  8278  21CF  01D6               	clrf	_presetSaveMode
  8279                           
  8280                           ;preset_programming.c: 40: setPedalMode();
  8281  21D0  31AE  26F7  31A1   	fcall	_setPedalMode
  8282                           
  8283                           ;preset_programming.c: 41: resetRingLEDs();
  8284  21D3  31AD  25F1  31A1   	fcall	_resetRingLEDs
  8285                           
  8286                           ;preset_programming.c: 42: showSave();
  8287  21D6  31A0  2001  31A1   	fcall	_showSave
  8288  21D9                     l8464:	
  8289                           
  8290                           ;preset_programming.c: 44: }
  8291                           ;preset_programming.c: 45: }
  8292                           ;preset_programming.c: 47: wait_ms(20);
  8293  21D9  3014               	movlw	20
  8294  21DA  0021               	movlb	1	; select bank1
  8295  21DB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8296  21DC  3000               	movlw	0
  8297  21DD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8298  21DE  31A0  2015         	fcall	_wait_ms
  8299  21E0  0008               	return
  8300  21E1                     __end_of_setDoublePressState:	
  8301                           
  8302                           	psect	text9
  8303  2001                     __ptext9:	
  8304 ;; *************** function _showSave *****************
  8305 ;; Defined at:
  8306 ;;		line 112 in file "LEDs.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;		None
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;		None
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      void 
  8313 ;; Registers used:
  8314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8322 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8323 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8324 ;;Total ram usage:        1 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    6
  8327 ;; This function calls:
  8328 ;;		_ring_tactiles
  8329 ;;		_solidring_tactiles
  8330 ;; This function is called by:
  8331 ;;		_setDoublePressState
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function _showSave
  8337  2001                     _showSave:	
  8338                           
  8339                           ;LEDs.c: 113: suspend_blink = 1;
  8340                           
  8341                           ;incstack = 0
  8342                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8343  2001  3001               	movlw	1
  8344  2002  0021               	movlb	1	; select bank1
  8345  2003  00B7               	movwf	??_showSave^(0+128)
  8346  2004  0837               	movf	??_showSave^(0+128),w
  8347  2005  0020               	movlb	0	; select bank0
  8348  2006  00D8               	movwf	_suspend_blink	;volatile
  8349                           
  8350                           ;LEDs.c: 114: ring_tactiles();
  8351  2007  31A4  2492  31A0   	fcall	_ring_tactiles
  8352                           
  8353                           ;LEDs.c: 115: ring_tactiles();
  8354  200A  31A4  2492  31A0   	fcall	_ring_tactiles
  8355                           
  8356                           ;LEDs.c: 116: solidring_tactiles();
  8357  200D  31A2  2221  31A0   	fcall	_solidring_tactiles
  8358                           
  8359                           ;LEDs.c: 117: solidring_tactiles();
  8360  2010  31A2  2221         	fcall	_solidring_tactiles
  8361                           
  8362                           ;LEDs.c: 118: suspend_blink = 0;
  8363  2012  0020               	movlb	0	; select bank0
  8364  2013  01D8               	clrf	_suspend_blink	;volatile
  8365  2014  0008               	return
  8366  2015                     __end_of_showSave:	
  8367                           
  8368                           	psect	text10
  8369  2221                     __ptext10:	
  8370 ;; *************** function _solidring_tactiles *****************
  8371 ;; Defined at:
  8372 ;;		line 208 in file "LEDs.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8387 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8388 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8389 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8390 ;;Total ram usage:        3 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    5
  8393 ;; This function calls:
  8394 ;;		_set_leds_bottom
  8395 ;;		_set_leds_top
  8396 ;;		_wait_ms
  8397 ;; This function is called by:
  8398 ;;		_showSave
  8399 ;;		_showBootSequence
  8400 ;; This function uses a non-reentrant model
  8401 ;;
  8402                           
  8403                           
  8404                           ;psect for function _solidring_tactiles
  8405  2221                     _solidring_tactiles:	
  8406                           
  8407                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8411  2221  301E               	movlw	30
  8412  2222  0021               	movlb	1	; select bank1
  8413  2223  00B2               	movwf	??_solidring_tactiles^(0+128)
  8414  2224  0832               	movf	??_solidring_tactiles^(0+128),w
  8415  2225  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8416                           
  8417                           ;LEDs.c: 210: set_leds_top(100, 1);
  8418  2226  3064               	movlw	100
  8419  2227  00A0               	movwf	set_leds_top@x^(0+128)
  8420  2228  3000               	movlw	0
  8421  2229  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8422  222A  3001               	movlw	1
  8423  222B  00A2               	movwf	set_leds_top@ledState^(0+128)
  8424  222C  3000               	movlw	0
  8425  222D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8426  222E  31A5  2585  31A2   	fcall	_set_leds_top
  8427                           
  8428                           ;LEDs.c: 211: set_leds_bottom(100);
  8429  2231  3064               	movlw	100
  8430  2232  0021               	movlb	1	; select bank1
  8431  2233  00A0               	movwf	set_leds_bottom@x^(0+128)
  8432  2234  3000               	movlw	0
  8433  2235  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8434  2236  31A0  20EF  31A2   	fcall	_set_leds_bottom
  8435                           
  8436                           ;LEDs.c: 212: wait_ms(ring_delay);
  8437  2239  0021               	movlb	1	; select bank1
  8438  223A  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8439  223B  00B2               	movwf	??_solidring_tactiles^(0+128)
  8440  223C  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8441  223D  0832               	movf	??_solidring_tactiles^(0+128),w
  8442  223E  00AC               	movwf	wait_ms@timeSec^(0+128)
  8443  223F  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8444  2240  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8445  2241  31A0  2015  31A2   	fcall	_wait_ms
  8446                           
  8447                           ;LEDs.c: 214: set_leds_top(0, 1);
  8448  2244  3000               	movlw	0
  8449  2245  0021               	movlb	1	; select bank1
  8450  2246  00A0               	movwf	set_leds_top@x^(0+128)
  8451  2247  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8452  2248  3001               	movlw	1
  8453  2249  00A2               	movwf	set_leds_top@ledState^(0+128)
  8454  224A  3000               	movlw	0
  8455  224B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8456  224C  31A5  2585  31A2   	fcall	_set_leds_top
  8457                           
  8458                           ;LEDs.c: 215: set_leds_bottom(0);
  8459  224F  3000               	movlw	0
  8460  2250  0021               	movlb	1	; select bank1
  8461  2251  00A0               	movwf	set_leds_bottom@x^(0+128)
  8462  2252  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8463  2253  31A0  20EF  31A2   	fcall	_set_leds_bottom
  8464                           
  8465                           ;LEDs.c: 216: wait_ms(ring_delay);
  8466  2256  0021               	movlb	1	; select bank1
  8467  2257  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8468  2258  00B2               	movwf	??_solidring_tactiles^(0+128)
  8469  2259  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8470  225A  0832               	movf	??_solidring_tactiles^(0+128),w
  8471  225B  00AC               	movwf	wait_ms@timeSec^(0+128)
  8472  225C  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8473  225D  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8474  225E  31A0  2015         	fcall	_wait_ms
  8475  2260  0008               	return
  8476  2261                     __end_of_solidring_tactiles:	
  8477                           
  8478                           	psect	text11
  8479  2492                     __ptext11:	
  8480 ;; *************** function _ring_tactiles *****************
  8481 ;; Defined at:
  8482 ;;		line 196 in file "LEDs.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;		None
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;  iLed            2   21[BANK1 ] int 
  8487 ;;  iLed            2   19[BANK1 ] int 
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  1    wreg      void 
  8490 ;; Registers used:
  8491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8498 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8499 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8500 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8501 ;;Total ram usage:        5 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; Hardware stack levels required when called:    5
  8504 ;; This function calls:
  8505 ;;		_set_leds_bottom
  8506 ;;		_set_leds_top
  8507 ;;		_wait_ms
  8508 ;; This function is called by:
  8509 ;;		_showSave
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           
  8514                           ;psect for function _ring_tactiles
  8515  2492                     _ring_tactiles:	
  8516                           
  8517                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8521  2492  3001               	movlw	1
  8522  2493  0021               	movlb	1	; select bank1
  8523  2494  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8524  2495  3000               	movlw	0
  8525  2496  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8526  2497  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8527  2498  3A80               	xorlw	128
  8528  2499  00B2               	movwf	??_ring_tactiles^(0+128)
  8529  249A  3080               	movlw	128
  8530  249B  0232               	subwf	??_ring_tactiles^(0+128),w
  8531  249C  1D03               	skipz
  8532  249D  2CA0               	goto	u8365
  8533  249E  3007               	movlw	7
  8534  249F  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8535  24A0                     u8365:	
  8536  24A0  1803               	btfsc	3,0
  8537  24A1  2CC6               	goto	l7956
  8538  24A2                     l7948:	
  8539                           
  8540                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8541  24A2  0021               	movlb	1	; select bank1
  8542  24A3  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8543  24A4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8544  24A5  0833               	movf	ring_tactiles@iLed^(0+128),w
  8545  24A6  00A0               	movwf	set_leds_top@x^(0+128)
  8546  24A7  3001               	movlw	1
  8547  24A8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8548  24A9  3000               	movlw	0
  8549  24AA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8550  24AB  31A5  2585  31A4   	fcall	_set_leds_top
  8551                           
  8552                           ;LEDs.c: 199: wait_ms(5);
  8553  24AE  3005               	movlw	5
  8554  24AF  0021               	movlb	1	; select bank1
  8555  24B0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8556  24B1  3000               	movlw	0
  8557  24B2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8558  24B3  31A0  2015  31A4   	fcall	_wait_ms
  8559  24B6  3001               	movlw	1
  8560  24B7  0021               	movlb	1	; select bank1
  8561  24B8  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8562  24B9  3000               	movlw	0
  8563  24BA  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8564  24BB  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8565  24BC  3A80               	xorlw	128
  8566  24BD  00B2               	movwf	??_ring_tactiles^(0+128)
  8567  24BE  3080               	movlw	128
  8568  24BF  0232               	subwf	??_ring_tactiles^(0+128),w
  8569  24C0  1D03               	skipz
  8570  24C1  2CC4               	goto	u8375
  8571  24C2  3007               	movlw	7
  8572  24C3  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8573  24C4                     u8375:	
  8574  24C4  1C03               	skipc
  8575  24C5  2CA2               	goto	l7948
  8576  24C6                     l7956:	
  8577                           
  8578                           ;LEDs.c: 200: }
  8579                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8580  24C6  3005               	movlw	5
  8581  24C7  0021               	movlb	1	; select bank1
  8582  24C8  00B5               	movwf	ring_tactiles@iLed_1532^(0+128)
  8583  24C9  3000               	movlw	0
  8584  24CA  00B6               	movwf	(ring_tactiles@iLed_1532^(0+128)+1)
  8585  24CB                     L5:	
  8586  24CB  1BB6               	btfsc	(ring_tactiles@iLed_1532+1)^(0+128),7
  8587  24CC  0008               	return
  8588                           
  8589                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8590  24CD  0836               	movf	(ring_tactiles@iLed_1532+1)^(0+128),w
  8591  24CE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8592  24CF  0835               	movf	ring_tactiles@iLed_1532^(0+128),w
  8593  24D0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8594  24D1  31A0  20EF  31A4   	fcall	_set_leds_bottom
  8595                           
  8596                           ;LEDs.c: 203: wait_ms(5);
  8597  24D4  3005               	movlw	5
  8598  24D5  0021               	movlb	1	; select bank1
  8599  24D6  00AC               	movwf	wait_ms@timeSec^(0+128)
  8600  24D7  3000               	movlw	0
  8601  24D8  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8602  24D9  31A0  2015  31A4   	fcall	_wait_ms
  8603  24DC  30FF               	movlw	255
  8604  24DD  0021               	movlb	1	; select bank1
  8605  24DE  07B5               	addwf	ring_tactiles@iLed_1532^(0+128),f
  8606  24DF  30FF               	movlw	255
  8607  24E0  3DB6               	addwfc	(ring_tactiles@iLed_1532+1)^(0+128),f
  8608  24E1  2CCB               	goto	L5
  8609  24E2                     __end_of_ring_tactiles:	
  8610                           
  8611                           	psect	text12
  8612  2EF7                     __ptext12:	
  8613 ;; *************** function _setPedalMode *****************
  8614 ;; Defined at:
  8615 ;;		line 119 in file "tactiles.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;		None
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;		None
  8620 ;; Return value:  Size  Location     Type
  8621 ;;                  1    wreg      void 
  8622 ;; Registers used:
  8623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8624 ;; Tracked objects:
  8625 ;;		On entry : 0/0
  8626 ;;		On exit  : 0/0
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8633 ;;Total ram usage:        0 bytes
  8634 ;; Hardware stack levels used:    1
  8635 ;; Hardware stack levels required when called:    5
  8636 ;; This function calls:
  8637 ;;		_resetRingLEDs
  8638 ;;		_setExpressionDisplay
  8639 ;;		_setPresetDisplay
  8640 ;; This function is called by:
  8641 ;;		_update_mode
  8642 ;;		_setDoublePressState
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function _setPedalMode
  8648  2EF7                     _setPedalMode:	
  8649                           
  8650                           ;tactiles.c: 120: switch (mode2_state) {
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8654  2EF7  2F0E               	goto	l8156
  8655  2EF8                     l990:	
  8656                           ;tactiles.c: 121: case 0:
  8657                           
  8658                           
  8659                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8660  2EF8  0022               	movlb	2	; select bank2
  8661  2EF9  108D               	bcf	13,1	;volatile
  8662                           
  8663                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8664  2EFA  100D               	bcf	13,0	;volatile
  8665                           
  8666                           ;tactiles.c: 124: resetRingLEDs();
  8667  2EFB  31AD  25F1         	fcall	_resetRingLEDs
  8668                           
  8669                           ;tactiles.c: 125: break;
  8670  2EFD  0008               	return
  8671  2EFE                     l992:	
  8672                           ;tactiles.c: 126: case 1:
  8673                           
  8674                           
  8675                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8676  2EFE  0022               	movlb	2	; select bank2
  8677  2EFF  108D               	bcf	13,1	;volatile
  8678                           
  8679                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8680  2F00  140D               	bsf	13,0	;volatile
  8681                           
  8682                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8683  2F01  0020               	movlb	0	; select bank0
  8684  2F02  086A               	movf	_presetChannel,w
  8685  2F03  31A0  20B5         	fcall	_setPresetDisplay
  8686                           
  8687                           ;tactiles.c: 130: break;
  8688  2F05  0008               	return
  8689  2F06                     l993:	
  8690                           ;tactiles.c: 131: case 2:
  8691                           
  8692                           
  8693                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8694  2F06  0022               	movlb	2	; select bank2
  8695  2F07  148D               	bsf	13,1	;volatile
  8696                           
  8697                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8698  2F08  100D               	bcf	13,0	;volatile
  8699                           
  8700                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8701  2F09  0020               	movlb	0	; select bank0
  8702  2F0A  0866               	movf	_expressionChannel,w
  8703  2F0B  31AD  25D9         	fcall	_setExpressionDisplay
  8704                           
  8705                           ;tactiles.c: 136: }
  8706                           
  8707                           ;tactiles.c: 135: break;
  8708  2F0D  0008               	return
  8709  2F0E                     l8156:	
  8710  2F0E  0020               	movlb	0	; select bank0
  8711  2F0F  0855               	movf	_mode2_state,w
  8712                           
  8713                           ; Switch size 1, requested type "space"
  8714                           ; Number of cases is 3, Range of values is 0 to 2
  8715                           ; switch strategies available:
  8716                           ; Name         Instructions Cycles
  8717                           ; simple_byte           10     6 (average)
  8718                           ; direct_byte           12     6 (fixed)
  8719                           ; jumptable            260     6 (fixed)
  8720                           ;	Chosen strategy is simple_byte
  8721  2F10  3A00               	xorlw	0	; case 0
  8722  2F11  1903               	skipnz
  8723  2F12  2EF8               	goto	l990
  8724  2F13  3A01               	xorlw	1	; case 1
  8725  2F14  1903               	skipnz
  8726  2F15  2EFE               	goto	l992
  8727  2F16  3A03               	xorlw	3	; case 2
  8728  2F17  1903               	skipnz
  8729  2F18  2F06               	goto	l993
  8730  2F19  2F1A               	goto	l994
  8731  2F1A                     l994:	
  8732  2F1A  0008               	return
  8733  2F1B                     __end_of_setPedalMode:	
  8734                           
  8735                           	psect	text13
  8736  20B5                     __ptext13:	
  8737 ;; *************** function _setPresetDisplay *****************
  8738 ;; Defined at:
  8739 ;;		line 51 in file "preset_programming.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  ledChannel      1    wreg     unsigned char 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8754 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8755 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8756 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8757 ;;Total ram usage:        3 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    4
  8760 ;; This function calls:
  8761 ;;		_set_leds_bottom
  8762 ;;		_set_leds_top
  8763 ;; This function is called by:
  8764 ;;		_setPedalMode
  8765 ;;		_update_selectMode
  8766 ;;		_setDoublePressState
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _setPresetDisplay
  8772  20B5                     _setPresetDisplay:	
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8776                           ;setPresetDisplay@ledChannel stored from wreg
  8777  20B5  0021               	movlb	1	; select bank1
  8778  20B6  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8779                           
  8780                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8781  20B7  3006               	movlw	6
  8782  20B8  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8783  20B9  1803               	skipnc
  8784  20BA  28D1               	goto	l7976
  8785                           
  8786                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8787  20BB  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8788  20BC  00A4               	movwf	??_setPresetDisplay^(0+128)
  8789  20BD  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8790  20BE  0824               	movf	??_setPresetDisplay^(0+128),w
  8791  20BF  00A0               	movwf	set_leds_top@x^(0+128)
  8792  20C0  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8793  20C1  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8794  20C2  3001               	movlw	1
  8795  20C3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8796  20C4  3000               	movlw	0
  8797  20C5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8798  20C6  31A5  2585  31A0   	fcall	_set_leds_top
  8799                           
  8800                           ;preset_programming.c: 54: set_leds_bottom(6);
  8801  20C9  3006               	movlw	6
  8802  20CA  0021               	movlb	1	; select bank1
  8803  20CB  00A0               	movwf	set_leds_bottom@x^(0+128)
  8804  20CC  3000               	movlw	0
  8805  20CD  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8806  20CE  31A0  20EF         	fcall	_set_leds_bottom
  8807                           
  8808                           ;preset_programming.c: 55: } else {
  8809  20D0  0008               	return
  8810  20D1                     l7976:	
  8811                           
  8812                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8813  20D1  3006               	movlw	6
  8814  20D2  0021               	movlb	1	; select bank1
  8815  20D3  00A0               	movwf	set_leds_top@x^(0+128)
  8816  20D4  3000               	movlw	0
  8817  20D5  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8818  20D6  3001               	movlw	1
  8819  20D7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8820  20D8  3000               	movlw	0
  8821  20D9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8822  20DA  31A5  2585  31A0   	fcall	_set_leds_top
  8823                           
  8824                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8825  20DD  0021               	movlb	1	; select bank1
  8826  20DE  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8827  20DF  00A4               	movwf	??_setPresetDisplay^(0+128)
  8828  20E0  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8829  20E1  09A4               	comf	??_setPresetDisplay^(0+128),f
  8830  20E2  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8831  20E3  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8832  20E4  1903               	skipnz
  8833  20E5  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8834  20E6  0824               	movf	??_setPresetDisplay^(0+128),w
  8835  20E7  3E0B               	addlw	11
  8836  20E8  00A0               	movwf	set_leds_bottom@x^(0+128)
  8837  20E9  3000               	movlw	0
  8838  20EA  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8839  20EB  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8840  20EC  31A0  20EF         	fcall	_set_leds_bottom
  8841  20EE  0008               	return
  8842  20EF                     __end_of_setPresetDisplay:	
  8843                           
  8844                           	psect	text14
  8845  2DD9                     __ptext14:	
  8846 ;; *************** function _setExpressionDisplay *****************
  8847 ;; Defined at:
  8848 ;;		line 66 in file "preset_programming.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;  ledChannel      1    wreg     unsigned char 
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      void 
  8855 ;; Registers used:
  8856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8863 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8864 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8865 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8866 ;;Total ram usage:        3 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    4
  8869 ;; This function calls:
  8870 ;;		_set_leds_bottom
  8871 ;;		_set_leds_top
  8872 ;; This function is called by:
  8873 ;;		_setPedalMode
  8874 ;;		_update_selectMode
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           
  8879                           ;psect for function _setExpressionDisplay
  8880  2DD9                     _setExpressionDisplay:	
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8884                           ;setExpressionDisplay@ledChannel stored from wreg
  8885  2DD9  0021               	movlb	1	; select bank1
  8886  2DDA  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8887                           
  8888                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8889  2DDB  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8890  2DDC  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8891  2DDD  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8892  2DDE  0824               	movf	??_setExpressionDisplay^(0+128),w
  8893  2DDF  00A0               	movwf	set_leds_top@x^(0+128)
  8894  2DE0  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8895  2DE1  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8896  2DE2  3001               	movlw	1
  8897  2DE3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8898  2DE4  3000               	movlw	0
  8899  2DE5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8900  2DE6  31A5  2585  31AD   	fcall	_set_leds_top
  8901                           
  8902                           ;preset_programming.c: 68: set_leds_bottom(6);
  8903  2DE9  3006               	movlw	6
  8904  2DEA  0021               	movlb	1	; select bank1
  8905  2DEB  00A0               	movwf	set_leds_bottom@x^(0+128)
  8906  2DEC  3000               	movlw	0
  8907  2DED  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8908  2DEE  31A0  20EF         	fcall	_set_leds_bottom
  8909  2DF0  0008               	return
  8910  2DF1                     __end_of_setExpressionDisplay:	
  8911                           
  8912                           	psect	text15
  8913  2DF1                     __ptext15:	
  8914 ;; *************** function _resetRingLEDs *****************
  8915 ;; Defined at:
  8916 ;;		line 61 in file "preset_programming.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;		None
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;		None
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8934 ;;Total ram usage:        0 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    4
  8937 ;; This function calls:
  8938 ;;		_set_leds_bottom
  8939 ;;		_set_leds_top
  8940 ;; This function is called by:
  8941 ;;		_update_mode
  8942 ;;		_setPedalMode
  8943 ;;		_setDoublePressState
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           
  8948                           ;psect for function _resetRingLEDs
  8949  2DF1                     _resetRingLEDs:	
  8950                           
  8951                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8952                           
  8953                           ;incstack = 0
  8954                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8955  2DF1  0020               	movlb	0	; select bank0
  8956  2DF2  0864               	movf	_top_push_state+1,w
  8957  2DF3  0021               	movlb	1	; select bank1
  8958  2DF4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8959  2DF5  0020               	movlb	0	; select bank0
  8960  2DF6  0863               	movf	_top_push_state,w
  8961  2DF7  0021               	movlb	1	; select bank1
  8962  2DF8  00A0               	movwf	set_leds_top@x^(0+128)
  8963  2DF9  3001               	movlw	1
  8964  2DFA  00A2               	movwf	set_leds_top@ledState^(0+128)
  8965  2DFB  3000               	movlw	0
  8966  2DFC  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8967  2DFD  31A5  2585  31AD   	fcall	_set_leds_top
  8968                           
  8969                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8970  2E00  0020               	movlb	0	; select bank0
  8971  2E01  0860               	movf	_bottom_push_state+1,w
  8972  2E02  0021               	movlb	1	; select bank1
  8973  2E03  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8974  2E04  0020               	movlb	0	; select bank0
  8975  2E05  085F               	movf	_bottom_push_state,w
  8976  2E06  0021               	movlb	1	; select bank1
  8977  2E07  00A0               	movwf	set_leds_bottom@x^(0+128)
  8978  2E08  31A0  20EF         	fcall	_set_leds_bottom
  8979  2E0A  0008               	return
  8980  2E0B                     __end_of_resetRingLEDs:	
  8981                           
  8982                           	psect	text16
  8983  0DDD                     __ptext16:	
  8984 ;; *************** function _updateModulationArray *****************
  8985 ;; Defined at:
  8986 ;;		line 44 in file "modulation.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;  thisAngle       2   56[BANK2 ] int 
  8991 ;;  iAngle          1   58[BANK2 ] unsigned char 
  8992 ;;  subDiv          2   54[BANK2 ] int 
  8993 ;;  angleFactor     2   52[BANK2 ] int 
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  1    wreg      void 
  8996 ;; Registers used:
  8997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9004 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9005 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9006 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9007 ;;Total ram usage:       11 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:    7
  9010 ;; This function calls:
  9011 ;;		___awdiv
  9012 ;;		___awtoft
  9013 ;;		___wmul
  9014 ;;		_getModulationSubdivision
  9015 ;;		_modSaw
  9016 ;;		_modSawRev
  9017 ;;		_modSin
  9018 ;;		_modSquare
  9019 ;;		_modTri
  9020 ;; This function is called by:
  9021 ;;		_main
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           
  9026                           ;psect for function _updateModulationArray
  9027  0DDD                     _updateModulationArray:	
  9028                           
  9029                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9033  0DDD  31AF  27D0  318D   	fcall	_getModulationSubdivision
  9034  0DE0  0021               	movlb	1	; select bank1
  9035  0DE1  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9036  0DE2  0022               	movlb	2	; select bank2
  9037  0DE3  00D7               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9038  0DE4  0021               	movlb	1	; select bank1
  9039  0DE5  0820               	movf	?_getModulationSubdivision^(0+128),w
  9040  0DE6  0022               	movlb	2	; select bank2
  9041  0DE7  00D6               	movwf	updateModulationArray@subDiv^(0+256)
  9042                           
  9043                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9044  0DE8  307A               	movlw	122
  9045  0DE9  0086               	movwf	6
  9046  0DEA  3024               	movlw	36
  9047  0DEB  0087               	movwf	7
  9048  0DEC  3F40               	moviw [0]fsr1
  9049  0DED  00D0               	movwf	??_updateModulationArray^(0+256)
  9050  0DEE  3F41               	moviw [1]fsr1
  9051  0DEF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9052  0DF0  0020               	movlb	0	; select bank0
  9053  0DF1  0860               	movf	_bottom_push_state+1,w
  9054  0DF2  0022               	movlb	2	; select bank2
  9055  0DF3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9056  0DF4  1D03               	skipz
  9057  0DF5  2DFA               	goto	u9325
  9058  0DF6  0020               	movlb	0	; select bank0
  9059  0DF7  085F               	movf	_bottom_push_state,w
  9060  0DF8  0022               	movlb	2	; select bank2
  9061  0DF9  0650               	xorwf	??_updateModulationArray^(0+256),w
  9062  0DFA                     u9325:	
  9063  0DFA  1D03               	skipz
  9064  0DFB  2E20               	goto	l8734
  9065  0DFC  307C               	movlw	124
  9066  0DFD  0086               	movwf	6
  9067  0DFE  3024               	movlw	36
  9068  0DFF  0087               	movwf	7
  9069  0E00  3F40               	moviw [0]fsr1
  9070  0E01  00D0               	movwf	??_updateModulationArray^(0+256)
  9071  0E02  3F41               	moviw [1]fsr1
  9072  0E03  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9073  0E04  0023               	movlb	3	; select bank3
  9074  0E05  085A               	movf	(_symmetry+1)^(0+384),w
  9075  0E06  0022               	movlb	2	; select bank2
  9076  0E07  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9077  0E08  1D03               	skipz
  9078  0E09  2E0E               	goto	u9335
  9079  0E0A  0023               	movlb	3	; select bank3
  9080  0E0B  0859               	movf	_symmetry^(0+384),w
  9081  0E0C  0022               	movlb	2	; select bank2
  9082  0E0D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9083  0E0E                     u9335:	
  9084  0E0E  1D03               	skipz
  9085  0E0F  2E20               	goto	l8734
  9086  0E10  307E               	movlw	126
  9087  0E11  0086               	movwf	6
  9088  0E12  3024               	movlw	36
  9089  0E13  0087               	movwf	7
  9090  0E14  3F40               	moviw [0]fsr1
  9091  0E15  00D0               	movwf	??_updateModulationArray^(0+256)
  9092  0E16  3F41               	moviw [1]fsr1
  9093  0E17  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9094  0E18  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9095  0E19  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9096  0E1A  1D03               	skipz
  9097  0E1B  2E1E               	goto	u9345
  9098  0E1C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9099  0E1D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9100  0E1E                     u9345:	
  9101  0E1E  1903               	btfsc	3,2
  9102  0E1F  0008               	return
  9103  0E20                     l8734:	
  9104                           ;modulation.c: 48: return;
  9105                           
  9106                           
  9107                           ;modulation.c: 49: }
  9108                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9109  0E20  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9110  0E21  0021               	movlb	1	; select bank1
  9111  0E22  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9112  0E23  0022               	movlb	2	; select bank2
  9113  0E24  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9114  0E25  0021               	movlb	1	; select bank1
  9115  0E26  00A0               	movwf	___awdiv@divisor^(0+128)
  9116  0E27  3068               	movlw	104
  9117  0E28  00A2               	movwf	___awdiv@dividend^(0+128)
  9118  0E29  3001               	movlw	1
  9119  0E2A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9120  0E2B  31A5  2533  318D   	fcall	___awdiv
  9121  0E2E  0021               	movlb	1	; select bank1
  9122  0E2F  0821               	movf	(?___awdiv+1)^(0+128),w
  9123  0E30  0022               	movlb	2	; select bank2
  9124  0E31  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9125  0E32  0021               	movlb	1	; select bank1
  9126  0E33  0820               	movf	?___awdiv^(0+128),w
  9127  0E34  0022               	movlb	2	; select bank2
  9128  0E35  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9129                           
  9130                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9131  0E36  01DA               	clrf	updateModulationArray@iAngle^(0+256)
  9132  0E37                     l8758:	
  9133  0E37  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9134  0E38  3A80               	xorlw	128
  9135  0E39  3C80               	sublw	128
  9136  0E3A  1D03               	skipz
  9137  0E3B  2E3E               	goto	u9355
  9138  0E3C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9139  0E3D  025A               	subwf	updateModulationArray@iAngle^(0+256),w
  9140  0E3E                     u9355:	
  9141  0E3E  1803               	btfsc	3,0
  9142  0E3F  2FE4               	goto	l8760
  9143                           
  9144                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9145  0E40  0022               	movlb	2	; select bank2
  9146  0E41  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9147  0E42  00D0               	movwf	??_updateModulationArray^(0+256)
  9148  0E43  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9149  0E44  0850               	movf	??_updateModulationArray^(0+256),w
  9150  0E45  00AE               	movwf	___wmul@multiplier^(0+256)
  9151  0E46  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9152  0E47  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9153  0E48  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9154  0E49  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9155  0E4A  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9156  0E4B  00B0               	movwf	___wmul@multiplicand^(0+256)
  9157  0E4C  31AE  2640  318D   	fcall	___wmul
  9158  0E4F  0022               	movlb	2	; select bank2
  9159  0E50  082F               	movf	(?___wmul+1)^(0+256),w
  9160  0E51  00D9               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9161  0E52  082E               	movf	?___wmul^(0+256),w
  9162  0E53  00D8               	movwf	updateModulationArray@thisAngle^(0+256)
  9163                           
  9164                           ;modulation.c: 54: switch (bottom_push_state) {
  9165  0E54  2FC7               	goto	l8754
  9166  0E55                     l8740:	
  9167                           ;modulation.c: 55: case 1:
  9168                           
  9169                           
  9170                           ;modulation.c: 56: modArray[iAngle] = modSin(thisAngle, symmetry);
  9171  0E55  0022               	movlb	2	; select bank2
  9172  0E56  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9173  0E57  0021               	movlb	1	; select bank1
  9174  0E58  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9175  0E59  0022               	movlb	2	; select bank2
  9176  0E5A  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9177  0E5B  0021               	movlb	1	; select bank1
  9178  0E5C  00A8               	movwf	___awtoft@c^(0+128)
  9179  0E5D  31AE  26D5  318D   	fcall	___awtoft
  9180  0E60  0021               	movlb	1	; select bank1
  9181  0E61  0828               	movf	?___awtoft^(0+128),w
  9182  0E62  0022               	movlb	2	; select bank2
  9183  0E63  00B4               	movwf	modSin@angle^(0+256)
  9184  0E64  0021               	movlb	1	; select bank1
  9185  0E65  0829               	movf	(?___awtoft+1)^(0+128),w
  9186  0E66  0022               	movlb	2	; select bank2
  9187  0E67  00B5               	movwf	(modSin@angle+1)^(0+256)
  9188  0E68  0021               	movlb	1	; select bank1
  9189  0E69  082A               	movf	(?___awtoft+2)^(0+128),w
  9190  0E6A  0022               	movlb	2	; select bank2
  9191  0E6B  00B6               	movwf	(modSin@angle+2)^(0+256)
  9192  0E6C  0023               	movlb	3	; select bank3
  9193  0E6D  085A               	movf	(_symmetry+1)^(0+384),w
  9194  0E6E  0021               	movlb	1	; select bank1
  9195  0E6F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9196  0E70  0023               	movlb	3	; select bank3
  9197  0E71  0859               	movf	_symmetry^(0+384),w
  9198  0E72  0021               	movlb	1	; select bank1
  9199  0E73  00A8               	movwf	___awtoft@c^(0+128)
  9200  0E74  31AE  26D5  318D   	fcall	___awtoft
  9201  0E77  0021               	movlb	1	; select bank1
  9202  0E78  0828               	movf	?___awtoft^(0+128),w
  9203  0E79  0022               	movlb	2	; select bank2
  9204  0E7A  00B7               	movwf	modSin@inflection^(0+256)
  9205  0E7B  0021               	movlb	1	; select bank1
  9206  0E7C  0829               	movf	(?___awtoft+1)^(0+128),w
  9207  0E7D  0022               	movlb	2	; select bank2
  9208  0E7E  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9209  0E7F  0021               	movlb	1	; select bank1
  9210  0E80  082A               	movf	(?___awtoft+2)^(0+128),w
  9211  0E81  0022               	movlb	2	; select bank2
  9212  0E82  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9213  0E83  3196  2654  318D   	fcall	_modSin
  9214  0E86  0022               	movlb	2	; select bank2
  9215  0E87  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9216  0E88  00D0               	movwf	??_updateModulationArray^(0+256)
  9217  0E89  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9218  0E8A  35D0               	lslf	??_updateModulationArray^(0+256),f
  9219  0E8B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9220  0E8C  308A               	movlw	138
  9221  0E8D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9222  0E8E  3023               	movlw	35
  9223  0E8F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9224  0E90  0850               	movf	??_updateModulationArray^(0+256),w
  9225  0E91  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9226  0E92  0086               	movwf	6
  9227  0E93  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9228  0E94  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9229  0E95  0087               	movwf	7
  9230  0E96  0834               	movf	?_modSin^(0+256),w
  9231  0E97  3FC0               	movwi [0]fsr1
  9232  0E98  0835               	movf	(?_modSin+1)^(0+256),w
  9233  0E99  3FC1               	movwi [1]fsr1
  9234                           
  9235                           ;modulation.c: 57: break;
  9236  0E9A  2FDE               	goto	l8756
  9237  0E9B                     l8742:	
  9238                           ;modulation.c: 58: case 2:
  9239                           
  9240                           
  9241                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9242  0E9B  0022               	movlb	2	; select bank2
  9243  0E9C  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9244  0E9D  0021               	movlb	1	; select bank1
  9245  0E9E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9246  0E9F  0022               	movlb	2	; select bank2
  9247  0EA0  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9248  0EA1  0021               	movlb	1	; select bank1
  9249  0EA2  00A8               	movwf	___awtoft@c^(0+128)
  9250  0EA3  31AE  26D5  318D   	fcall	___awtoft
  9251  0EA6  0021               	movlb	1	; select bank1
  9252  0EA7  0828               	movf	?___awtoft^(0+128),w
  9253  0EA8  0022               	movlb	2	; select bank2
  9254  0EA9  00AE               	movwf	modTri@angle^(0+256)
  9255  0EAA  0021               	movlb	1	; select bank1
  9256  0EAB  0829               	movf	(?___awtoft+1)^(0+128),w
  9257  0EAC  0022               	movlb	2	; select bank2
  9258  0EAD  00AF               	movwf	(modTri@angle+1)^(0+256)
  9259  0EAE  0021               	movlb	1	; select bank1
  9260  0EAF  082A               	movf	(?___awtoft+2)^(0+128),w
  9261  0EB0  0022               	movlb	2	; select bank2
  9262  0EB1  00B0               	movwf	(modTri@angle+2)^(0+256)
  9263  0EB2  0023               	movlb	3	; select bank3
  9264  0EB3  085A               	movf	(_symmetry+1)^(0+384),w
  9265  0EB4  0021               	movlb	1	; select bank1
  9266  0EB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9267  0EB6  0023               	movlb	3	; select bank3
  9268  0EB7  0859               	movf	_symmetry^(0+384),w
  9269  0EB8  0021               	movlb	1	; select bank1
  9270  0EB9  00A8               	movwf	___awtoft@c^(0+128)
  9271  0EBA  31AE  26D5  318D   	fcall	___awtoft
  9272  0EBD  0021               	movlb	1	; select bank1
  9273  0EBE  0828               	movf	?___awtoft^(0+128),w
  9274  0EBF  0022               	movlb	2	; select bank2
  9275  0EC0  00B1               	movwf	modTri@inflection^(0+256)
  9276  0EC1  0021               	movlb	1	; select bank1
  9277  0EC2  0829               	movf	(?___awtoft+1)^(0+128),w
  9278  0EC3  0022               	movlb	2	; select bank2
  9279  0EC4  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9280  0EC5  0021               	movlb	1	; select bank1
  9281  0EC6  082A               	movf	(?___awtoft+2)^(0+128),w
  9282  0EC7  0022               	movlb	2	; select bank2
  9283  0EC8  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9284  0EC9  318B  23E2  318D   	fcall	_modTri
  9285  0ECC  0022               	movlb	2	; select bank2
  9286  0ECD  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9287  0ECE  00D0               	movwf	??_updateModulationArray^(0+256)
  9288  0ECF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9289  0ED0  35D0               	lslf	??_updateModulationArray^(0+256),f
  9290  0ED1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9291  0ED2  308A               	movlw	138
  9292  0ED3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9293  0ED4  3023               	movlw	35
  9294  0ED5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9295  0ED6  0850               	movf	??_updateModulationArray^(0+256),w
  9296  0ED7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9297  0ED8  0086               	movwf	6
  9298  0ED9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9299  0EDA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9300  0EDB  0087               	movwf	7
  9301  0EDC  082E               	movf	?_modTri^(0+256),w
  9302  0EDD  3FC0               	movwi [0]fsr1
  9303  0EDE  082F               	movf	(?_modTri+1)^(0+256),w
  9304  0EDF  3FC1               	movwi [1]fsr1
  9305                           
  9306                           ;modulation.c: 60: break;
  9307  0EE0  2FDE               	goto	l8756
  9308  0EE1                     l8744:	
  9309                           ;modulation.c: 61: case 3:
  9310                           
  9311                           
  9312                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9313  0EE1  0022               	movlb	2	; select bank2
  9314  0EE2  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9315  0EE3  0021               	movlb	1	; select bank1
  9316  0EE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9317  0EE5  0022               	movlb	2	; select bank2
  9318  0EE6  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9319  0EE7  0021               	movlb	1	; select bank1
  9320  0EE8  00A8               	movwf	___awtoft@c^(0+128)
  9321  0EE9  31AE  26D5  318D   	fcall	___awtoft
  9322  0EEC  0021               	movlb	1	; select bank1
  9323  0EED  0828               	movf	?___awtoft^(0+128),w
  9324  0EEE  0022               	movlb	2	; select bank2
  9325  0EEF  00C8               	movwf	modSquare@angle^(0+256)
  9326  0EF0  0021               	movlb	1	; select bank1
  9327  0EF1  0829               	movf	(?___awtoft+1)^(0+128),w
  9328  0EF2  0022               	movlb	2	; select bank2
  9329  0EF3  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9330  0EF4  0021               	movlb	1	; select bank1
  9331  0EF5  082A               	movf	(?___awtoft+2)^(0+128),w
  9332  0EF6  0022               	movlb	2	; select bank2
  9333  0EF7  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9334  0EF8  0023               	movlb	3	; select bank3
  9335  0EF9  085A               	movf	(_symmetry+1)^(0+384),w
  9336  0EFA  0021               	movlb	1	; select bank1
  9337  0EFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9338  0EFC  0023               	movlb	3	; select bank3
  9339  0EFD  0859               	movf	_symmetry^(0+384),w
  9340  0EFE  0021               	movlb	1	; select bank1
  9341  0EFF  00A8               	movwf	___awtoft@c^(0+128)
  9342  0F00  31AE  26D5  318D   	fcall	___awtoft
  9343  0F03  0021               	movlb	1	; select bank1
  9344  0F04  0828               	movf	?___awtoft^(0+128),w
  9345  0F05  0022               	movlb	2	; select bank2
  9346  0F06  00CB               	movwf	modSquare@inflection^(0+256)
  9347  0F07  0021               	movlb	1	; select bank1
  9348  0F08  0829               	movf	(?___awtoft+1)^(0+128),w
  9349  0F09  0022               	movlb	2	; select bank2
  9350  0F0A  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9351  0F0B  0021               	movlb	1	; select bank1
  9352  0F0C  082A               	movf	(?___awtoft+2)^(0+128),w
  9353  0F0D  0022               	movlb	2	; select bank2
  9354  0F0E  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9355  0F0F  31A1  2166  318D   	fcall	_modSquare
  9356  0F12  0022               	movlb	2	; select bank2
  9357  0F13  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9358  0F14  00D0               	movwf	??_updateModulationArray^(0+256)
  9359  0F15  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9360  0F16  35D0               	lslf	??_updateModulationArray^(0+256),f
  9361  0F17  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9362  0F18  308A               	movlw	138
  9363  0F19  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9364  0F1A  3023               	movlw	35
  9365  0F1B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9366  0F1C  0850               	movf	??_updateModulationArray^(0+256),w
  9367  0F1D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9368  0F1E  0086               	movwf	6
  9369  0F1F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9370  0F20  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9371  0F21  0087               	movwf	7
  9372  0F22  0848               	movf	?_modSquare^(0+256),w
  9373  0F23  3FC0               	movwi [0]fsr1
  9374  0F24  0849               	movf	(?_modSquare+1)^(0+256),w
  9375  0F25  3FC1               	movwi [1]fsr1
  9376                           
  9377                           ;modulation.c: 63: break;
  9378  0F26  2FDE               	goto	l8756
  9379  0F27                     l8746:	
  9380                           ;modulation.c: 64: case 4:
  9381                           
  9382                           
  9383                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9384  0F27  0022               	movlb	2	; select bank2
  9385  0F28  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9386  0F29  0021               	movlb	1	; select bank1
  9387  0F2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9388  0F2B  0022               	movlb	2	; select bank2
  9389  0F2C  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9390  0F2D  0021               	movlb	1	; select bank1
  9391  0F2E  00A8               	movwf	___awtoft@c^(0+128)
  9392  0F2F  31AE  26D5  318D   	fcall	___awtoft
  9393  0F32  0021               	movlb	1	; select bank1
  9394  0F33  0828               	movf	?___awtoft^(0+128),w
  9395  0F34  0022               	movlb	2	; select bank2
  9396  0F35  00C5               	movwf	modSawRev@angle^(0+256)
  9397  0F36  0021               	movlb	1	; select bank1
  9398  0F37  0829               	movf	(?___awtoft+1)^(0+128),w
  9399  0F38  0022               	movlb	2	; select bank2
  9400  0F39  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9401  0F3A  0021               	movlb	1	; select bank1
  9402  0F3B  082A               	movf	(?___awtoft+2)^(0+128),w
  9403  0F3C  0022               	movlb	2	; select bank2
  9404  0F3D  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9405  0F3E  0023               	movlb	3	; select bank3
  9406  0F3F  085A               	movf	(_symmetry+1)^(0+384),w
  9407  0F40  0021               	movlb	1	; select bank1
  9408  0F41  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9409  0F42  0023               	movlb	3	; select bank3
  9410  0F43  0859               	movf	_symmetry^(0+384),w
  9411  0F44  0021               	movlb	1	; select bank1
  9412  0F45  00A8               	movwf	___awtoft@c^(0+128)
  9413  0F46  31AE  26D5  318D   	fcall	___awtoft
  9414  0F49  0021               	movlb	1	; select bank1
  9415  0F4A  0828               	movf	?___awtoft^(0+128),w
  9416  0F4B  0022               	movlb	2	; select bank2
  9417  0F4C  00C8               	movwf	modSawRev@inflection^(0+256)
  9418  0F4D  0021               	movlb	1	; select bank1
  9419  0F4E  0829               	movf	(?___awtoft+1)^(0+128),w
  9420  0F4F  0022               	movlb	2	; select bank2
  9421  0F50  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9422  0F51  0021               	movlb	1	; select bank1
  9423  0F52  082A               	movf	(?___awtoft+2)^(0+128),w
  9424  0F53  0022               	movlb	2	; select bank2
  9425  0F54  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9426  0F55  31AE  2678  318D   	fcall	_modSawRev
  9427  0F58  0022               	movlb	2	; select bank2
  9428  0F59  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9429  0F5A  00D0               	movwf	??_updateModulationArray^(0+256)
  9430  0F5B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9431  0F5C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9432  0F5D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9433  0F5E  308A               	movlw	138
  9434  0F5F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9435  0F60  3023               	movlw	35
  9436  0F61  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9437  0F62  0850               	movf	??_updateModulationArray^(0+256),w
  9438  0F63  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9439  0F64  0086               	movwf	6
  9440  0F65  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9441  0F66  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9442  0F67  0087               	movwf	7
  9443  0F68  0845               	movf	?_modSawRev^(0+256),w
  9444  0F69  3FC0               	movwi [0]fsr1
  9445  0F6A  0846               	movf	(?_modSawRev+1)^(0+256),w
  9446  0F6B  3FC1               	movwi [1]fsr1
  9447                           
  9448                           ;modulation.c: 66: break;
  9449  0F6C  2FDE               	goto	l8756
  9450  0F6D                     l8748:	
  9451                           ;modulation.c: 67: case 5:
  9452                           
  9453                           
  9454                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9455  0F6D  0022               	movlb	2	; select bank2
  9456  0F6E  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9457  0F6F  0021               	movlb	1	; select bank1
  9458  0F70  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9459  0F71  0022               	movlb	2	; select bank2
  9460  0F72  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9461  0F73  0021               	movlb	1	; select bank1
  9462  0F74  00A8               	movwf	___awtoft@c^(0+128)
  9463  0F75  31AE  26D5  318D   	fcall	___awtoft
  9464  0F78  0021               	movlb	1	; select bank1
  9465  0F79  0828               	movf	?___awtoft^(0+128),w
  9466  0F7A  0022               	movlb	2	; select bank2
  9467  0F7B  00AE               	movwf	modSaw@angle^(0+256)
  9468  0F7C  0021               	movlb	1	; select bank1
  9469  0F7D  0829               	movf	(?___awtoft+1)^(0+128),w
  9470  0F7E  0022               	movlb	2	; select bank2
  9471  0F7F  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9472  0F80  0021               	movlb	1	; select bank1
  9473  0F81  082A               	movf	(?___awtoft+2)^(0+128),w
  9474  0F82  0022               	movlb	2	; select bank2
  9475  0F83  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9476  0F84  0023               	movlb	3	; select bank3
  9477  0F85  085A               	movf	(_symmetry+1)^(0+384),w
  9478  0F86  0021               	movlb	1	; select bank1
  9479  0F87  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9480  0F88  0023               	movlb	3	; select bank3
  9481  0F89  0859               	movf	_symmetry^(0+384),w
  9482  0F8A  0021               	movlb	1	; select bank1
  9483  0F8B  00A8               	movwf	___awtoft@c^(0+128)
  9484  0F8C  31AE  26D5  318D   	fcall	___awtoft
  9485  0F8F  0021               	movlb	1	; select bank1
  9486  0F90  0828               	movf	?___awtoft^(0+128),w
  9487  0F91  0022               	movlb	2	; select bank2
  9488  0F92  00B1               	movwf	modSaw@inflection^(0+256)
  9489  0F93  0021               	movlb	1	; select bank1
  9490  0F94  0829               	movf	(?___awtoft+1)^(0+128),w
  9491  0F95  0022               	movlb	2	; select bank2
  9492  0F96  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9493  0F97  0021               	movlb	1	; select bank1
  9494  0F98  082A               	movf	(?___awtoft+2)^(0+128),w
  9495  0F99  0022               	movlb	2	; select bank2
  9496  0F9A  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9497  0F9B  3194  24AA  318D   	fcall	_modSaw
  9498  0F9E  0022               	movlb	2	; select bank2
  9499  0F9F  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9500  0FA0  00D0               	movwf	??_updateModulationArray^(0+256)
  9501  0FA1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9502  0FA2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9503  0FA3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9504  0FA4  308A               	movlw	138
  9505  0FA5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9506  0FA6  3023               	movlw	35
  9507  0FA7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9508  0FA8  0850               	movf	??_updateModulationArray^(0+256),w
  9509  0FA9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9510  0FAA  0086               	movwf	6
  9511  0FAB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9512  0FAC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9513  0FAD  0087               	movwf	7
  9514  0FAE  082E               	movf	?_modSaw^(0+256),w
  9515  0FAF  3FC0               	movwi [0]fsr1
  9516  0FB0  082F               	movf	(?_modSaw+1)^(0+256),w
  9517  0FB1  3FC1               	movwi [1]fsr1
  9518                           
  9519                           ;modulation.c: 69: break;
  9520  0FB2  2FDE               	goto	l8756
  9521  0FB3                     l8750:	
  9522                           ;modulation.c: 70: default:
  9523                           
  9524                           
  9525                           ;modulation.c: 71: modArray[iAngle] = 0;
  9526  0FB3  0022               	movlb	2	; select bank2
  9527  0FB4  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9528  0FB5  00D0               	movwf	??_updateModulationArray^(0+256)
  9529  0FB6  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9530  0FB7  35D0               	lslf	??_updateModulationArray^(0+256),f
  9531  0FB8  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9532  0FB9  308A               	movlw	138
  9533  0FBA  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9534  0FBB  3023               	movlw	35
  9535  0FBC  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9536  0FBD  0850               	movf	??_updateModulationArray^(0+256),w
  9537  0FBE  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9538  0FBF  0086               	movwf	6
  9539  0FC0  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9540  0FC1  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9541  0FC2  0087               	movwf	7
  9542  0FC3  3000               	movlw	0
  9543  0FC4  3FC0               	movwi [0]fsr1
  9544  0FC5  3FC1               	movwi [1]fsr1
  9545                           
  9546                           ;modulation.c: 73: }
  9547                           
  9548                           ;modulation.c: 72: break;
  9549  0FC6  2FDE               	goto	l8756
  9550  0FC7                     l8754:	
  9551                           
  9552                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9553                           ; Switch size 1, requested type "space"
  9554                           ; Number of cases is 1, Range of values is 0 to 0
  9555                           ; switch strategies available:
  9556                           ; Name         Instructions Cycles
  9557                           ; simple_byte            4     3 (average)
  9558                           ; direct_byte            8     6 (fixed)
  9559                           ; jumptable            260     6 (fixed)
  9560                           ;	Chosen strategy is simple_byte
  9561  0FC7  0020               	movlb	0	; select bank0
  9562  0FC8  0860               	movf	_bottom_push_state+1,w
  9563  0FC9  3A00               	xorlw	0	; case 0
  9564  0FCA  1903               	skipnz
  9565  0FCB  2FCD               	goto	l9748
  9566  0FCC  2FB3               	goto	l8750
  9567  0FCD                     l9748:	
  9568                           
  9569                           ; Switch size 1, requested type "space"
  9570                           ; Number of cases is 5, Range of values is 1 to 5
  9571                           ; switch strategies available:
  9572                           ; Name         Instructions Cycles
  9573                           ; simple_byte           16     9 (average)
  9574                           ; direct_byte           19     9 (fixed)
  9575                           ; jumptable            263     9 (fixed)
  9576                           ;	Chosen strategy is simple_byte
  9577  0FCD  085F               	movf	_bottom_push_state,w
  9578  0FCE  3A01               	xorlw	1	; case 1
  9579  0FCF  1903               	skipnz
  9580  0FD0  2E55               	goto	l8740
  9581  0FD1  3A03               	xorlw	3	; case 2
  9582  0FD2  1903               	skipnz
  9583  0FD3  2E9B               	goto	l8742
  9584  0FD4  3A01               	xorlw	1	; case 3
  9585  0FD5  1903               	skipnz
  9586  0FD6  2EE1               	goto	l8744
  9587  0FD7  3A07               	xorlw	7	; case 4
  9588  0FD8  1903               	skipnz
  9589  0FD9  2F27               	goto	l8746
  9590  0FDA  3A01               	xorlw	1	; case 5
  9591  0FDB  1903               	skipnz
  9592  0FDC  2F6D               	goto	l8748
  9593  0FDD  2FB3               	goto	l8750
  9594  0FDE                     l8756:	
  9595  0FDE  3001               	movlw	1
  9596  0FDF  0022               	movlb	2	; select bank2
  9597  0FE0  00D0               	movwf	??_updateModulationArray^(0+256)
  9598  0FE1  0850               	movf	??_updateModulationArray^(0+256),w
  9599  0FE2  07DA               	addwf	updateModulationArray@iAngle^(0+256),f
  9600  0FE3  2E37               	goto	l8758
  9601  0FE4                     l8760:	
  9602                           
  9603                           ;modulation.c: 74: }
  9604                           ;modulation.c: 75: modArray[120] = bottom_push_state;
  9605  0FE4  307A               	movlw	122
  9606  0FE5  0086               	movwf	6
  9607  0FE6  3024               	movlw	36
  9608  0FE7  0087               	movwf	7
  9609  0FE8  0020               	movlb	0	; select bank0
  9610  0FE9  085F               	movf	_bottom_push_state,w
  9611  0FEA  3FC0               	movwi [0]fsr1
  9612  0FEB  0860               	movf	_bottom_push_state+1,w
  9613  0FEC  3FC1               	movwi [1]fsr1
  9614                           
  9615                           ;modulation.c: 76: modArray[121] = symmetry;
  9616  0FED  307C               	movlw	124
  9617  0FEE  0086               	movwf	6
  9618  0FEF  3024               	movlw	36
  9619  0FF0  0087               	movwf	7
  9620  0FF1  0023               	movlb	3	; select bank3
  9621  0FF2  0859               	movf	_symmetry^(0+384),w
  9622  0FF3  3FC0               	movwi [0]fsr1
  9623  0FF4  085A               	movf	(_symmetry+1)^(0+384),w
  9624  0FF5  3FC1               	movwi [1]fsr1
  9625                           
  9626                           ;modulation.c: 77: modArray[122] = subDiv;
  9627  0FF6  307E               	movlw	126
  9628  0FF7  0086               	movwf	6
  9629  0FF8  3024               	movlw	36
  9630  0FF9  0087               	movwf	7
  9631  0FFA  0022               	movlb	2	; select bank2
  9632  0FFB  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9633  0FFC  3FC0               	movwi [0]fsr1
  9634  0FFD  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9635  0FFE  3FC1               	movwi [1]fsr1
  9636  0FFF  0008               	return
  9637  1000                     __end_of_updateModulationArray:	
  9638                           
  9639                           	psect	text17
  9640  0BE2                     __ptext17:	
  9641 ;; *************** function _modTri *****************
  9642 ;; Defined at:
  9643 ;;		line 96 in file "modulation.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  angle           3   14[BANK2 ] void 
  9646 ;;  inflection      3   17[BANK2 ] void 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  tmpVal          3   29[BANK2 ] void 
  9649 ;;  period          3   26[BANK2 ] void 
  9650 ;;  shift           3   23[BANK2 ] void 
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  2   14[BANK2 ] int 
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9660 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9661 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9663 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9664 ;;Total ram usage:       18 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    5
  9667 ;; This function calls:
  9668 ;;		___ftadd
  9669 ;;		___ftdiv
  9670 ;;		___ftge
  9671 ;;		___ftmul
  9672 ;;		___ftneg
  9673 ;;		___fttol
  9674 ;; This function is called by:
  9675 ;;		_updateModulationArray
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           
  9680                           ;psect for function _modTri
  9681  0BE2                     _modTri:	
  9682                           
  9683                           ;modulation.c: 97: double period = 1.0;
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9687  0BE2  3000               	movlw	0
  9688  0BE3  0022               	movlb	2	; select bank2
  9689  0BE4  00BA               	movwf	modTri@period^(0+256)
  9690  0BE5  3080               	movlw	128
  9691  0BE6  00BB               	movwf	(modTri@period+1)^(0+256)
  9692  0BE7  303F               	movlw	63
  9693  0BE8  00BC               	movwf	(modTri@period+2)^(0+256)
  9694                           
  9695                           ;modulation.c: 98: double shift = 0;
  9696  0BE9  3000               	movlw	0
  9697  0BEA  00B7               	movwf	modTri@shift^(0+256)
  9698  0BEB  3000               	movlw	0
  9699  0BEC  00B8               	movwf	(modTri@shift+1)^(0+256)
  9700  0BED  3000               	movlw	0
  9701  0BEE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9702                           
  9703                           ;modulation.c: 100: if(angle<=inflection) {
  9704  0BEF  0831               	movf	modTri@inflection^(0+256),w
  9705  0BF0  0021               	movlb	1	; select bank1
  9706  0BF1  00A0               	movwf	___ftge@ff1^(0+128)
  9707  0BF2  0022               	movlb	2	; select bank2
  9708  0BF3  0832               	movf	(modTri@inflection+1)^(0+256),w
  9709  0BF4  0021               	movlb	1	; select bank1
  9710  0BF5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9711  0BF6  0022               	movlb	2	; select bank2
  9712  0BF7  0833               	movf	(modTri@inflection+2)^(0+256),w
  9713  0BF8  0021               	movlb	1	; select bank1
  9714  0BF9  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9715  0BFA  0022               	movlb	2	; select bank2
  9716  0BFB  082E               	movf	modTri@angle^(0+256),w
  9717  0BFC  0021               	movlb	1	; select bank1
  9718  0BFD  00A3               	movwf	___ftge@ff2^(0+128)
  9719  0BFE  0022               	movlb	2	; select bank2
  9720  0BFF  082F               	movf	(modTri@angle+1)^(0+256),w
  9721  0C00  0021               	movlb	1	; select bank1
  9722  0C01  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9723  0C02  0022               	movlb	2	; select bank2
  9724  0C03  0830               	movf	(modTri@angle+2)^(0+256),w
  9725  0C04  0021               	movlb	1	; select bank1
  9726  0C05  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9727  0C06  31A1  212A  318B   	fcall	___ftge
  9728  0C09  1C03               	btfss	3,0
  9729  0C0A  2C17               	goto	l8514
  9730                           
  9731                           ;modulation.c: 101: period = 180.0/inflection;
  9732  0C0B  0022               	movlb	2	; select bank2
  9733  0C0C  0831               	movf	modTri@inflection^(0+256),w
  9734  0C0D  0021               	movlb	1	; select bank1
  9735  0C0E  00CE               	movwf	___ftdiv@f2^(0+128)
  9736  0C0F  0022               	movlb	2	; select bank2
  9737  0C10  0832               	movf	(modTri@inflection+1)^(0+256),w
  9738  0C11  0021               	movlb	1	; select bank1
  9739  0C12  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9740  0C13  0022               	movlb	2	; select bank2
  9741  0C14  0833               	movf	(modTri@inflection+2)^(0+256),w
  9742  0C15  0021               	movlb	1	; select bank1
  9743  0C16  2CD2               	goto	L6
  9744  0C17                     l8514:	
  9745                           ;modulation.c: 102: } else {
  9746                           
  9747                           
  9748                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9749  0C17  0022               	movlb	2	; select bank2
  9750  0C18  0831               	movf	modTri@inflection^(0+256),w
  9751  0C19  0021               	movlb	1	; select bank1
  9752  0C1A  00B1               	movwf	___ftmul@f2^(0+128)
  9753  0C1B  0022               	movlb	2	; select bank2
  9754  0C1C  0832               	movf	(modTri@inflection+1)^(0+256),w
  9755  0C1D  0021               	movlb	1	; select bank1
  9756  0C1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9757  0C1F  0022               	movlb	2	; select bank2
  9758  0C20  0833               	movf	(modTri@inflection+2)^(0+256),w
  9759  0C21  0021               	movlb	1	; select bank1
  9760  0C22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9761  0C23  3000               	movlw	0
  9762  0C24  00AE               	movwf	___ftmul@f1^(0+128)
  9763  0C25  3000               	movlw	0
  9764  0C26  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9765  0C27  3040               	movlw	64
  9766  0C28  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9767  0C29  319E  267B  318B   	fcall	___ftmul
  9768  0C2C  0021               	movlb	1	; select bank1
  9769  0C2D  082E               	movf	?___ftmul^(0+128),w
  9770  0C2E  00BE               	movwf	___ftneg@f1^(0+128)
  9771  0C2F  082F               	movf	(?___ftmul+1)^(0+128),w
  9772  0C30  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9773  0C31  0830               	movf	(?___ftmul+2)^(0+128),w
  9774  0C32  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9775  0C33  31AD  258A  318B   	fcall	___ftneg
  9776  0C36  0021               	movlb	1	; select bank1
  9777  0C37  083E               	movf	?___ftneg^(0+128),w
  9778  0C38  00C4               	movwf	___ftadd@f2^(0+128)
  9779  0C39  083F               	movf	(?___ftneg+1)^(0+128),w
  9780  0C3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9781  0C3B  0840               	movf	(?___ftneg+2)^(0+128),w
  9782  0C3C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9783  0C3D  3000               	movlw	0
  9784  0C3E  00C1               	movwf	___ftadd@f1^(0+128)
  9785  0C3F  30B4               	movlw	180
  9786  0C40  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9787  0C41  3043               	movlw	67
  9788  0C42  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9789  0C43  3190  2026  318B   	fcall	___ftadd
  9790  0C46  0021               	movlb	1	; select bank1
  9791  0C47  0841               	movf	?___ftadd^(0+128),w
  9792  0C48  0022               	movlb	2	; select bank2
  9793  0C49  00B4               	movwf	_modTri$2845^(0+256)
  9794  0C4A  0021               	movlb	1	; select bank1
  9795  0C4B  0842               	movf	(?___ftadd+1)^(0+128),w
  9796  0C4C  0022               	movlb	2	; select bank2
  9797  0C4D  00B5               	movwf	(_modTri$2845+1)^(0+256)
  9798  0C4E  0021               	movlb	1	; select bank1
  9799  0C4F  0843               	movf	(?___ftadd+2)^(0+128),w
  9800  0C50  0022               	movlb	2	; select bank2
  9801  0C51  00B6               	movwf	(_modTri$2845+2)^(0+256)
  9802                           
  9803                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9804  0C52  0834               	movf	_modTri$2845^(0+256),w
  9805  0C53  0021               	movlb	1	; select bank1
  9806  0C54  00BE               	movwf	___ftneg@f1^(0+128)
  9807  0C55  0022               	movlb	2	; select bank2
  9808  0C56  0835               	movf	(_modTri$2845+1)^(0+256),w
  9809  0C57  0021               	movlb	1	; select bank1
  9810  0C58  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9811  0C59  0022               	movlb	2	; select bank2
  9812  0C5A  0836               	movf	(_modTri$2845+2)^(0+256),w
  9813  0C5B  0021               	movlb	1	; select bank1
  9814  0C5C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9815  0C5D  31AD  258A  318B   	fcall	___ftneg
  9816  0C60  0021               	movlb	1	; select bank1
  9817  0C61  083E               	movf	?___ftneg^(0+128),w
  9818  0C62  00AE               	movwf	___ftmul@f1^(0+128)
  9819  0C63  083F               	movf	(?___ftneg+1)^(0+128),w
  9820  0C64  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9821  0C65  0840               	movf	(?___ftneg+2)^(0+128),w
  9822  0C66  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9823  0C67  3000               	movlw	0
  9824  0C68  00C1               	movwf	___ftadd@f1^(0+128)
  9825  0C69  30B4               	movlw	180
  9826  0C6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9827  0C6B  3043               	movlw	67
  9828  0C6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9829  0C6D  0022               	movlb	2	; select bank2
  9830  0C6E  0831               	movf	modTri@inflection^(0+256),w
  9831  0C6F  0021               	movlb	1	; select bank1
  9832  0C70  00BE               	movwf	___ftneg@f1^(0+128)
  9833  0C71  0022               	movlb	2	; select bank2
  9834  0C72  0832               	movf	(modTri@inflection+1)^(0+256),w
  9835  0C73  0021               	movlb	1	; select bank1
  9836  0C74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9837  0C75  0022               	movlb	2	; select bank2
  9838  0C76  0833               	movf	(modTri@inflection+2)^(0+256),w
  9839  0C77  0021               	movlb	1	; select bank1
  9840  0C78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9841  0C79  31AD  258A  318B   	fcall	___ftneg
  9842  0C7C  0021               	movlb	1	; select bank1
  9843  0C7D  083E               	movf	?___ftneg^(0+128),w
  9844  0C7E  00C4               	movwf	___ftadd@f2^(0+128)
  9845  0C7F  083F               	movf	(?___ftneg+1)^(0+128),w
  9846  0C80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9847  0C81  0840               	movf	(?___ftneg+2)^(0+128),w
  9848  0C82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9849  0C83  3190  2026  318B   	fcall	___ftadd
  9850  0C86  0021               	movlb	1	; select bank1
  9851  0C87  0841               	movf	?___ftadd^(0+128),w
  9852  0C88  00CE               	movwf	___ftdiv@f2^(0+128)
  9853  0C89  0842               	movf	(?___ftadd+1)^(0+128),w
  9854  0C8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9855  0C8B  0843               	movf	(?___ftadd+2)^(0+128),w
  9856  0C8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9857  0C8D  3000               	movlw	0
  9858  0C8E  00D1               	movwf	___ftdiv@f1^(0+128)
  9859  0C8F  3034               	movlw	52
  9860  0C90  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9861  0C91  3043               	movlw	67
  9862  0C92  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9863  0C93  319D  2527  318B   	fcall	___ftdiv
  9864  0C96  0021               	movlb	1	; select bank1
  9865  0C97  084E               	movf	?___ftdiv^(0+128),w
  9866  0C98  00B1               	movwf	___ftmul@f2^(0+128)
  9867  0C99  084F               	movf	(?___ftdiv+1)^(0+128),w
  9868  0C9A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9869  0C9B  0850               	movf	(?___ftdiv+2)^(0+128),w
  9870  0C9C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9871  0C9D  319E  267B  318B   	fcall	___ftmul
  9872  0CA0  0021               	movlb	1	; select bank1
  9873  0CA1  082E               	movf	?___ftmul^(0+128),w
  9874  0CA2  0022               	movlb	2	; select bank2
  9875  0CA3  00B7               	movwf	modTri@shift^(0+256)
  9876  0CA4  0021               	movlb	1	; select bank1
  9877  0CA5  082F               	movf	(?___ftmul+1)^(0+128),w
  9878  0CA6  0022               	movlb	2	; select bank2
  9879  0CA7  00B8               	movwf	(modTri@shift+1)^(0+256)
  9880  0CA8  0021               	movlb	1	; select bank1
  9881  0CA9  0830               	movf	(?___ftmul+2)^(0+128),w
  9882  0CAA  0022               	movlb	2	; select bank2
  9883  0CAB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9884                           
  9885                           ;modulation.c: 104: period = 180/(360-inflection);
  9886  0CAC  3000               	movlw	0
  9887  0CAD  0021               	movlb	1	; select bank1
  9888  0CAE  00C1               	movwf	___ftadd@f1^(0+128)
  9889  0CAF  30B4               	movlw	180
  9890  0CB0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9891  0CB1  3043               	movlw	67
  9892  0CB2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9893  0CB3  0022               	movlb	2	; select bank2
  9894  0CB4  0831               	movf	modTri@inflection^(0+256),w
  9895  0CB5  0021               	movlb	1	; select bank1
  9896  0CB6  00BE               	movwf	___ftneg@f1^(0+128)
  9897  0CB7  0022               	movlb	2	; select bank2
  9898  0CB8  0832               	movf	(modTri@inflection+1)^(0+256),w
  9899  0CB9  0021               	movlb	1	; select bank1
  9900  0CBA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9901  0CBB  0022               	movlb	2	; select bank2
  9902  0CBC  0833               	movf	(modTri@inflection+2)^(0+256),w
  9903  0CBD  0021               	movlb	1	; select bank1
  9904  0CBE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9905  0CBF  31AD  258A  318B   	fcall	___ftneg
  9906  0CC2  0021               	movlb	1	; select bank1
  9907  0CC3  083E               	movf	?___ftneg^(0+128),w
  9908  0CC4  00C4               	movwf	___ftadd@f2^(0+128)
  9909  0CC5  083F               	movf	(?___ftneg+1)^(0+128),w
  9910  0CC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9911  0CC7  0840               	movf	(?___ftneg+2)^(0+128),w
  9912  0CC8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9913  0CC9  3190  2026  318B   	fcall	___ftadd
  9914  0CCC  0021               	movlb	1	; select bank1
  9915  0CCD  0841               	movf	?___ftadd^(0+128),w
  9916  0CCE  00CE               	movwf	___ftdiv@f2^(0+128)
  9917  0CCF  0842               	movf	(?___ftadd+1)^(0+128),w
  9918  0CD0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9919  0CD1  0843               	movf	(?___ftadd+2)^(0+128),w
  9920  0CD2                     L6:	
  9921  0CD2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9922  0CD3  3000               	movlw	0
  9923  0CD4  00D1               	movwf	___ftdiv@f1^(0+128)
  9924  0CD5  3034               	movlw	52
  9925  0CD6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9926  0CD7  3043               	movlw	67
  9927  0CD8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9928  0CD9  319D  2527  318B   	fcall	___ftdiv
  9929  0CDC  0021               	movlb	1	; select bank1
  9930  0CDD  084E               	movf	?___ftdiv^(0+128),w
  9931  0CDE  0022               	movlb	2	; select bank2
  9932  0CDF  00BA               	movwf	modTri@period^(0+256)
  9933  0CE0  0021               	movlb	1	; select bank1
  9934  0CE1  084F               	movf	(?___ftdiv+1)^(0+128),w
  9935  0CE2  0022               	movlb	2	; select bank2
  9936  0CE3  00BB               	movwf	(modTri@period+1)^(0+256)
  9937  0CE4  0021               	movlb	1	; select bank1
  9938  0CE5  0850               	movf	(?___ftdiv+2)^(0+128),w
  9939  0CE6  0022               	movlb	2	; select bank2
  9940  0CE7  00BC               	movwf	(modTri@period+2)^(0+256)
  9941                           
  9942                           ;modulation.c: 106: }
  9943                           ;modulation.c: 107: double tmpVal = (period*angle-shift) ;
  9944  0CE8  0837               	movf	modTri@shift^(0+256),w
  9945  0CE9  0021               	movlb	1	; select bank1
  9946  0CEA  00BE               	movwf	___ftneg@f1^(0+128)
  9947  0CEB  0022               	movlb	2	; select bank2
  9948  0CEC  0838               	movf	(modTri@shift+1)^(0+256),w
  9949  0CED  0021               	movlb	1	; select bank1
  9950  0CEE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9951  0CEF  0022               	movlb	2	; select bank2
  9952  0CF0  0839               	movf	(modTri@shift+2)^(0+256),w
  9953  0CF1  0021               	movlb	1	; select bank1
  9954  0CF2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9955  0CF3  31AD  258A  318B   	fcall	___ftneg
  9956  0CF6  0021               	movlb	1	; select bank1
  9957  0CF7  083E               	movf	?___ftneg^(0+128),w
  9958  0CF8  00C1               	movwf	___ftadd@f1^(0+128)
  9959  0CF9  083F               	movf	(?___ftneg+1)^(0+128),w
  9960  0CFA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9961  0CFB  0840               	movf	(?___ftneg+2)^(0+128),w
  9962  0CFC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9963  0CFD  0022               	movlb	2	; select bank2
  9964  0CFE  082E               	movf	modTri@angle^(0+256),w
  9965  0CFF  0021               	movlb	1	; select bank1
  9966  0D00  00AE               	movwf	___ftmul@f1^(0+128)
  9967  0D01  0022               	movlb	2	; select bank2
  9968  0D02  082F               	movf	(modTri@angle+1)^(0+256),w
  9969  0D03  0021               	movlb	1	; select bank1
  9970  0D04  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9971  0D05  0022               	movlb	2	; select bank2
  9972  0D06  0830               	movf	(modTri@angle+2)^(0+256),w
  9973  0D07  0021               	movlb	1	; select bank1
  9974  0D08  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9975  0D09  0022               	movlb	2	; select bank2
  9976  0D0A  083A               	movf	modTri@period^(0+256),w
  9977  0D0B  0021               	movlb	1	; select bank1
  9978  0D0C  00B1               	movwf	___ftmul@f2^(0+128)
  9979  0D0D  0022               	movlb	2	; select bank2
  9980  0D0E  083B               	movf	(modTri@period+1)^(0+256),w
  9981  0D0F  0021               	movlb	1	; select bank1
  9982  0D10  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9983  0D11  0022               	movlb	2	; select bank2
  9984  0D12  083C               	movf	(modTri@period+2)^(0+256),w
  9985  0D13  0021               	movlb	1	; select bank1
  9986  0D14  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9987  0D15  319E  267B  318B   	fcall	___ftmul
  9988  0D18  0021               	movlb	1	; select bank1
  9989  0D19  082E               	movf	?___ftmul^(0+128),w
  9990  0D1A  00C4               	movwf	___ftadd@f2^(0+128)
  9991  0D1B  082F               	movf	(?___ftmul+1)^(0+128),w
  9992  0D1C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9993  0D1D  0830               	movf	(?___ftmul+2)^(0+128),w
  9994  0D1E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9995  0D1F  3190  2026  318B   	fcall	___ftadd
  9996  0D22  0021               	movlb	1	; select bank1
  9997  0D23  0841               	movf	?___ftadd^(0+128),w
  9998  0D24  0022               	movlb	2	; select bank2
  9999  0D25  00BD               	movwf	modTri@tmpVal^(0+256)
 10000  0D26  0021               	movlb	1	; select bank1
 10001  0D27  0842               	movf	(?___ftadd+1)^(0+128),w
 10002  0D28  0022               	movlb	2	; select bank2
 10003  0D29  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10004  0D2A  0021               	movlb	1	; select bank1
 10005  0D2B  0843               	movf	(?___ftadd+2)^(0+128),w
 10006  0D2C  0022               	movlb	2	; select bank2
 10007  0D2D  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10008                           
 10009                           ;modulation.c: 108: if (tmpVal > 270) {
 10010  0D2E  3000               	movlw	0
 10011  0D2F  0021               	movlb	1	; select bank1
 10012  0D30  00A0               	movwf	___ftge@ff1^(0+128)
 10013  0D31  3087               	movlw	135
 10014  0D32  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10015  0D33  3043               	movlw	67
 10016  0D34  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10017  0D35  0022               	movlb	2	; select bank2
 10018  0D36  083D               	movf	modTri@tmpVal^(0+256),w
 10019  0D37  0021               	movlb	1	; select bank1
 10020  0D38  00A3               	movwf	___ftge@ff2^(0+128)
 10021  0D39  0022               	movlb	2	; select bank2
 10022  0D3A  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10023  0D3B  0021               	movlb	1	; select bank1
 10024  0D3C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10025  0D3D  0022               	movlb	2	; select bank2
 10026  0D3E  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10027  0D3F  0021               	movlb	1	; select bank1
 10028  0D40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10029  0D41  31A1  212A  318B   	fcall	___ftge
 10030  0D44  1803               	btfsc	3,0
 10031  0D45  2D59               	goto	l8518
 10032                           
 10033                           ;modulation.c: 109: tmpVal = tmpVal - 360.0;
 10034  0D46  3000               	movlw	0
 10035  0D47  0021               	movlb	1	; select bank1
 10036  0D48  00C1               	movwf	___ftadd@f1^(0+128)
 10037  0D49  30B4               	movlw	180
 10038  0D4A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10039  0D4B  30C3               	movlw	195
 10040  0D4C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10041  0D4D  0022               	movlb	2	; select bank2
 10042  0D4E  083D               	movf	modTri@tmpVal^(0+256),w
 10043  0D4F  0021               	movlb	1	; select bank1
 10044  0D50  00C4               	movwf	___ftadd@f2^(0+128)
 10045  0D51  0022               	movlb	2	; select bank2
 10046  0D52  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10047  0D53  0021               	movlb	1	; select bank1
 10048  0D54  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10049  0D55  0022               	movlb	2	; select bank2
 10050  0D56  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10051  0D57  0021               	movlb	1	; select bank1
 10052  0D58  2D8D               	goto	L8
 10053  0D59                     l8518:	
 10054                           ;modulation.c: 110: } else if (tmpVal > 90) {
 10055                           
 10056  0D59  3000               	movlw	0
 10057  0D5A  0021               	movlb	1	; select bank1
 10058  0D5B  00A0               	movwf	___ftge@ff1^(0+128)
 10059  0D5C  30B4               	movlw	180
 10060  0D5D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10061  0D5E  3042               	movlw	66
 10062  0D5F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10063  0D60  0022               	movlb	2	; select bank2
 10064  0D61  083D               	movf	modTri@tmpVal^(0+256),w
 10065  0D62  0021               	movlb	1	; select bank1
 10066  0D63  00A3               	movwf	___ftge@ff2^(0+128)
 10067  0D64  0022               	movlb	2	; select bank2
 10068  0D65  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10069  0D66  0021               	movlb	1	; select bank1
 10070  0D67  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10071  0D68  0022               	movlb	2	; select bank2
 10072  0D69  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10073  0D6A  0021               	movlb	1	; select bank1
 10074  0D6B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10075  0D6C  31A1  212A  318B   	fcall	___ftge
 10076  0D6F  1803               	btfsc	3,0
 10077  0D70  2D9D               	goto	l1920
 10078                           
 10079                           ;modulation.c: 111: tmpVal = 180 - tmpVal;
 10080  0D71  3000               	movlw	0
 10081  0D72  0021               	movlb	1	; select bank1
 10082  0D73  00C1               	movwf	___ftadd@f1^(0+128)
 10083  0D74  3034               	movlw	52
 10084  0D75  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10085  0D76  3043               	movlw	67
 10086  0D77  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10087  0D78  0022               	movlb	2	; select bank2
 10088  0D79  083D               	movf	modTri@tmpVal^(0+256),w
 10089  0D7A  0021               	movlb	1	; select bank1
 10090  0D7B  00BE               	movwf	___ftneg@f1^(0+128)
 10091  0D7C  0022               	movlb	2	; select bank2
 10092  0D7D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10093  0D7E  0021               	movlb	1	; select bank1
 10094  0D7F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10095  0D80  0022               	movlb	2	; select bank2
 10096  0D81  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10097  0D82  0021               	movlb	1	; select bank1
 10098  0D83  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10099  0D84  31AD  258A  318B   	fcall	___ftneg
 10100  0D87  0021               	movlb	1	; select bank1
 10101  0D88  083E               	movf	?___ftneg^(0+128),w
 10102  0D89  00C4               	movwf	___ftadd@f2^(0+128)
 10103  0D8A  083F               	movf	(?___ftneg+1)^(0+128),w
 10104  0D8B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10105  0D8C  0840               	movf	(?___ftneg+2)^(0+128),w
 10106  0D8D                     L8:	
 10107  0D8D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10108  0D8E  3190  2026  318B   	fcall	___ftadd
 10109  0D91  0021               	movlb	1	; select bank1
 10110  0D92  0841               	movf	?___ftadd^(0+128),w
 10111  0D93  0022               	movlb	2	; select bank2
 10112  0D94  00BD               	movwf	modTri@tmpVal^(0+256)
 10113  0D95  0021               	movlb	1	; select bank1
 10114  0D96  0842               	movf	(?___ftadd+1)^(0+128),w
 10115  0D97  0022               	movlb	2	; select bank2
 10116  0D98  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10117  0D99  0021               	movlb	1	; select bank1
 10118  0D9A  0843               	movf	(?___ftadd+2)^(0+128),w
 10119  0D9B  0022               	movlb	2	; select bank2
 10120  0D9C  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10121  0D9D                     l1920:	
 10122                           
 10123                           ;modulation.c: 112: }
 10124                           ;modulation.c: 113: tmpVal = tmpVal * 10/9;
 10125  0D9D  3000               	movlw	0
 10126  0D9E  0021               	movlb	1	; select bank1
 10127  0D9F  00CE               	movwf	___ftdiv@f2^(0+128)
 10128  0DA0  3010               	movlw	16
 10129  0DA1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10130  0DA2  3041               	movlw	65
 10131  0DA3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10132  0DA4  3000               	movlw	0
 10133  0DA5  00AE               	movwf	___ftmul@f1^(0+128)
 10134  0DA6  3020               	movlw	32
 10135  0DA7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10136  0DA8  3041               	movlw	65
 10137  0DA9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10138  0DAA  0022               	movlb	2	; select bank2
 10139  0DAB  083D               	movf	modTri@tmpVal^(0+256),w
 10140  0DAC  0021               	movlb	1	; select bank1
 10141  0DAD  00B1               	movwf	___ftmul@f2^(0+128)
 10142  0DAE  0022               	movlb	2	; select bank2
 10143  0DAF  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10144  0DB0  0021               	movlb	1	; select bank1
 10145  0DB1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10146  0DB2  0022               	movlb	2	; select bank2
 10147  0DB3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10148  0DB4  0021               	movlb	1	; select bank1
 10149  0DB5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10150  0DB6  319E  267B  318B   	fcall	___ftmul
 10151  0DB9  0021               	movlb	1	; select bank1
 10152  0DBA  082E               	movf	?___ftmul^(0+128),w
 10153  0DBB  00D1               	movwf	___ftdiv@f1^(0+128)
 10154  0DBC  082F               	movf	(?___ftmul+1)^(0+128),w
 10155  0DBD  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10156  0DBE  0830               	movf	(?___ftmul+2)^(0+128),w
 10157  0DBF  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10158  0DC0  319D  2527  318B   	fcall	___ftdiv
 10159  0DC3  0021               	movlb	1	; select bank1
 10160  0DC4  084E               	movf	?___ftdiv^(0+128),w
 10161  0DC5  0022               	movlb	2	; select bank2
 10162  0DC6  00BD               	movwf	modTri@tmpVal^(0+256)
 10163  0DC7  0021               	movlb	1	; select bank1
 10164  0DC8  084F               	movf	(?___ftdiv+1)^(0+128),w
 10165  0DC9  0022               	movlb	2	; select bank2
 10166  0DCA  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10167  0DCB  0021               	movlb	1	; select bank1
 10168  0DCC  0850               	movf	(?___ftdiv+2)^(0+128),w
 10169  0DCD  0022               	movlb	2	; select bank2
 10170  0DCE  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10171                           
 10172                           ;modulation.c: 115: return (int)(tmpVal);
 10173  0DCF  083D               	movf	modTri@tmpVal^(0+256),w
 10174  0DD0  00A0               	movwf	___fttol@f1^(0+256)
 10175  0DD1  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10176  0DD2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10177  0DD3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10178  0DD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10179  0DD5  3199  21BA         	fcall	___fttol
 10180  0DD7  0022               	movlb	2	; select bank2
 10181  0DD8  0821               	movf	(?___fttol^(0+256)+1),w
 10182  0DD9  00AF               	movwf	(?_modTri+1)^(0+256)
 10183  0DDA  0820               	movf	?___fttol^(0+256),w
 10184  0DDB  00AE               	movwf	?_modTri^(0+256)
 10185  0DDC  0008               	return
 10186  0DDD                     __end_of_modTri:	
 10187                           
 10188                           	psect	text18
 10189  2166                     __ptext18:	
 10190 ;; *************** function _modSquare *****************
 10191 ;; Defined at:
 10192 ;;		line 141 in file "modulation.c"
 10193 ;; Parameters:    Size  Location     Type
 10194 ;;  angle           3   40[BANK2 ] int 
 10195 ;;  inflection      3   43[BANK2 ] int 
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  tmpVal          2   46[BANK2 ] int 
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  2   40[BANK2 ] int 
 10200 ;; Registers used:
 10201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10207 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10208 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10210 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10211 ;;Total ram usage:        8 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    6
 10214 ;; This function calls:
 10215 ;;		___ftge
 10216 ;;		_modSin
 10217 ;; This function is called by:
 10218 ;;		_updateModulationArray
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           
 10223                           ;psect for function _modSquare
 10224  2166                     _modSquare:	
 10225                           
 10226                           ;modulation.c: 142: int tmpVal = modSin(angle, inflection);
 10227                           
 10228                           ;incstack = 0
 10229                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10230  2166  0022               	movlb	2	; select bank2
 10231  2167  0848               	movf	modSquare@angle^(0+256),w
 10232  2168  00B4               	movwf	modSin@angle^(0+256)
 10233  2169  0849               	movf	(modSquare@angle+1)^(0+256),w
 10234  216A  00B5               	movwf	(modSin@angle+1)^(0+256)
 10235  216B  084A               	movf	(modSquare@angle+2)^(0+256),w
 10236  216C  00B6               	movwf	(modSin@angle+2)^(0+256)
 10237  216D  084B               	movf	modSquare@inflection^(0+256),w
 10238  216E  00B7               	movwf	modSin@inflection^(0+256)
 10239  216F  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10240  2170  00B8               	movwf	(modSin@inflection+1)^(0+256)
 10241  2171  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10242  2172  00B9               	movwf	(modSin@inflection+2)^(0+256)
 10243  2173  3196  2654  31A1   	fcall	_modSin
 10244  2176  0022               	movlb	2	; select bank2
 10245  2177  0835               	movf	(?_modSin+1)^(0+256),w
 10246  2178  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10247  2179  0834               	movf	?_modSin^(0+256),w
 10248  217A  00CE               	movwf	modSquare@tmpVal^(0+256)
 10249                           
 10250                           ;modulation.c: 144: return (angle <= inflection) ? 100 : -100;
 10251  217B  084B               	movf	modSquare@inflection^(0+256),w
 10252  217C  0021               	movlb	1	; select bank1
 10253  217D  00A0               	movwf	___ftge@ff1^(0+128)
 10254  217E  0022               	movlb	2	; select bank2
 10255  217F  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10256  2180  0021               	movlb	1	; select bank1
 10257  2181  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10258  2182  0022               	movlb	2	; select bank2
 10259  2183  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10260  2184  0021               	movlb	1	; select bank1
 10261  2185  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10262  2186  0022               	movlb	2	; select bank2
 10263  2187  0848               	movf	modSquare@angle^(0+256),w
 10264  2188  0021               	movlb	1	; select bank1
 10265  2189  00A3               	movwf	___ftge@ff2^(0+128)
 10266  218A  0022               	movlb	2	; select bank2
 10267  218B  0849               	movf	(modSquare@angle+1)^(0+256),w
 10268  218C  0021               	movlb	1	; select bank1
 10269  218D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10270  218E  0022               	movlb	2	; select bank2
 10271  218F  084A               	movf	(modSquare@angle+2)^(0+256),w
 10272  2190  0021               	movlb	1	; select bank1
 10273  2191  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10274  2192  31A1  212A  31A1   	fcall	___ftge
 10275  2195  1803               	btfsc	3,0
 10276  2196  299D               	goto	l8530
 10277  2197  309C               	movlw	156
 10278  2198  0022               	movlb	2	; select bank2
 10279  2199  00C8               	movwf	?_modSquare^(0+256)
 10280  219A  30FF               	movlw	255
 10281  219B  00C9               	movwf	(?_modSquare^(0+256)+1)
 10282  219C  0008               	return
 10283  219D                     l8530:	
 10284  219D  3064               	movlw	100
 10285  219E  0022               	movlb	2	; select bank2
 10286  219F  00C8               	movwf	?_modSquare^(0+256)
 10287  21A0  3000               	movlw	0
 10288  21A1  00C9               	movwf	(?_modSquare^(0+256)+1)
 10289  21A2  0008               	return
 10290  21A3                     __end_of_modSquare:	
 10291                           
 10292                           	psect	text19
 10293  1654                     __ptext19:	
 10294 ;; *************** function _modSin *****************
 10295 ;; Defined at:
 10296 ;;		line 80 in file "modulation.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;  angle           3   20[BANK2 ] int 
 10299 ;;  inflection      3   23[BANK2 ] int 
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;  tmpVal          3   37[BANK2 ] int 
 10302 ;;  period          3   34[BANK2 ] int 
 10303 ;;  shift           3   31[BANK2 ] int 
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  2   20[BANK2 ] int 
 10306 ;; Registers used:
 10307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10313 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10314 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10315 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10316 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10317 ;;Total ram usage:       20 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    5
 10320 ;; This function calls:
 10321 ;;		___ftadd
 10322 ;;		___ftdiv
 10323 ;;		___ftge
 10324 ;;		___ftmul
 10325 ;;		___ftneg
 10326 ;;		___fttol
 10327 ;;		___wmul
 10328 ;; This function is called by:
 10329 ;;		_updateModulationArray
 10330 ;;		_modSquare
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           
 10335                           ;psect for function _modSin
 10336  1654                     _modSin:	
 10337                           
 10338                           ;modulation.c: 81: double period = 1.0;
 10339                           
 10340                           ;incstack = 0
 10341                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10342  1654  3000               	movlw	0
 10343  1655  0022               	movlb	2	; select bank2
 10344  1656  00C2               	movwf	modSin@period^(0+256)
 10345  1657  3080               	movlw	128
 10346  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10347  1659  303F               	movlw	63
 10348  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10349                           
 10350                           ;modulation.c: 82: double shift = 0.0;
 10351  165B  3000               	movlw	0
 10352  165C  00BF               	movwf	modSin@shift^(0+256)
 10353  165D  3000               	movlw	0
 10354  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10355  165F  3000               	movlw	0
 10356  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10357                           
 10358                           ;modulation.c: 84: if(angle<=inflection) {
 10359  1661  0837               	movf	modSin@inflection^(0+256),w
 10360  1662  0021               	movlb	1	; select bank1
 10361  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10362  1664  0022               	movlb	2	; select bank2
 10363  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10364  1666  0021               	movlb	1	; select bank1
 10365  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10366  1668  0022               	movlb	2	; select bank2
 10367  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10368  166A  0021               	movlb	1	; select bank1
 10369  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10370  166C  0022               	movlb	2	; select bank2
 10371  166D  0834               	movf	modSin@angle^(0+256),w
 10372  166E  0021               	movlb	1	; select bank1
 10373  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10374  1670  0022               	movlb	2	; select bank2
 10375  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10376  1672  0021               	movlb	1	; select bank1
 10377  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10378  1674  0022               	movlb	2	; select bank2
 10379  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10380  1676  0021               	movlb	1	; select bank1
 10381  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10382  1678  31A1  212A  3196   	fcall	___ftge
 10383  167B  1C03               	btfss	3,0
 10384  167C  2E89               	goto	l8180
 10385                           
 10386                           ;modulation.c: 85: period = 180.0/inflection;
 10387  167D  0022               	movlb	2	; select bank2
 10388  167E  0837               	movf	modSin@inflection^(0+256),w
 10389  167F  0021               	movlb	1	; select bank1
 10390  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10391  1681  0022               	movlb	2	; select bank2
 10392  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10393  1683  0021               	movlb	1	; select bank1
 10394  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10395  1685  0022               	movlb	2	; select bank2
 10396  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10397  1687  0021               	movlb	1	; select bank1
 10398  1688  2F44               	goto	L9
 10399  1689                     l8180:	
 10400                           ;modulation.c: 86: } else {
 10401                           
 10402                           
 10403                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10404  1689  0022               	movlb	2	; select bank2
 10405  168A  0837               	movf	modSin@inflection^(0+256),w
 10406  168B  0021               	movlb	1	; select bank1
 10407  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10408  168D  0022               	movlb	2	; select bank2
 10409  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10410  168F  0021               	movlb	1	; select bank1
 10411  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10412  1691  0022               	movlb	2	; select bank2
 10413  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10414  1693  0021               	movlb	1	; select bank1
 10415  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10416  1695  3000               	movlw	0
 10417  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10418  1697  3000               	movlw	0
 10419  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10420  1699  3040               	movlw	64
 10421  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10422  169B  319E  267B  3196   	fcall	___ftmul
 10423  169E  0021               	movlb	1	; select bank1
 10424  169F  082E               	movf	?___ftmul^(0+128),w
 10425  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10426  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10427  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10428  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10429  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10430  16A5  31AD  258A  3196   	fcall	___ftneg
 10431  16A8  0021               	movlb	1	; select bank1
 10432  16A9  083E               	movf	?___ftneg^(0+128),w
 10433  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10434  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10435  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10436  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10437  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10438  16AF  3000               	movlw	0
 10439  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10440  16B1  30B4               	movlw	180
 10441  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10442  16B3  3043               	movlw	67
 10443  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10444  16B5  3190  2026  3196   	fcall	___ftadd
 10445  16B8  0021               	movlb	1	; select bank1
 10446  16B9  0841               	movf	?___ftadd^(0+128),w
 10447  16BA  0022               	movlb	2	; select bank2
 10448  16BB  00BC               	movwf	_modSin$2844^(0+256)
 10449  16BC  0021               	movlb	1	; select bank1
 10450  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10451  16BE  0022               	movlb	2	; select bank2
 10452  16BF  00BD               	movwf	(_modSin$2844+1)^(0+256)
 10453  16C0  0021               	movlb	1	; select bank1
 10454  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10455  16C2  0022               	movlb	2	; select bank2
 10456  16C3  00BE               	movwf	(_modSin$2844+2)^(0+256)
 10457                           
 10458                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10459  16C4  083C               	movf	_modSin$2844^(0+256),w
 10460  16C5  0021               	movlb	1	; select bank1
 10461  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10462  16C7  0022               	movlb	2	; select bank2
 10463  16C8  083D               	movf	(_modSin$2844+1)^(0+256),w
 10464  16C9  0021               	movlb	1	; select bank1
 10465  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10466  16CB  0022               	movlb	2	; select bank2
 10467  16CC  083E               	movf	(_modSin$2844+2)^(0+256),w
 10468  16CD  0021               	movlb	1	; select bank1
 10469  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10470  16CF  31AD  258A  3196   	fcall	___ftneg
 10471  16D2  0021               	movlb	1	; select bank1
 10472  16D3  083E               	movf	?___ftneg^(0+128),w
 10473  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10474  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10475  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10476  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10477  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10478  16D9  3000               	movlw	0
 10479  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10480  16DB  30B4               	movlw	180
 10481  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10482  16DD  3043               	movlw	67
 10483  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10484  16DF  0022               	movlb	2	; select bank2
 10485  16E0  0837               	movf	modSin@inflection^(0+256),w
 10486  16E1  0021               	movlb	1	; select bank1
 10487  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10488  16E3  0022               	movlb	2	; select bank2
 10489  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10490  16E5  0021               	movlb	1	; select bank1
 10491  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10492  16E7  0022               	movlb	2	; select bank2
 10493  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10494  16E9  0021               	movlb	1	; select bank1
 10495  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10496  16EB  31AD  258A  3196   	fcall	___ftneg
 10497  16EE  0021               	movlb	1	; select bank1
 10498  16EF  083E               	movf	?___ftneg^(0+128),w
 10499  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10500  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10501  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10502  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10503  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10504  16F5  3190  2026  3196   	fcall	___ftadd
 10505  16F8  0021               	movlb	1	; select bank1
 10506  16F9  0841               	movf	?___ftadd^(0+128),w
 10507  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10508  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10509  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10510  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10511  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10512  16FF  3000               	movlw	0
 10513  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10514  1701  3034               	movlw	52
 10515  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10516  1703  3043               	movlw	67
 10517  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10518  1705  319D  2527  3196   	fcall	___ftdiv
 10519  1708  0021               	movlb	1	; select bank1
 10520  1709  084E               	movf	?___ftdiv^(0+128),w
 10521  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10522  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10523  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10524  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10525  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10526  170F  319E  267B  3196   	fcall	___ftmul
 10527  1712  0021               	movlb	1	; select bank1
 10528  1713  082E               	movf	?___ftmul^(0+128),w
 10529  1714  0022               	movlb	2	; select bank2
 10530  1715  00BF               	movwf	modSin@shift^(0+256)
 10531  1716  0021               	movlb	1	; select bank1
 10532  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10533  1718  0022               	movlb	2	; select bank2
 10534  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10535  171A  0021               	movlb	1	; select bank1
 10536  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10537  171C  0022               	movlb	2	; select bank2
 10538  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10539                           
 10540                           ;modulation.c: 88: period = 180/(360-inflection);
 10541  171E  3000               	movlw	0
 10542  171F  0021               	movlb	1	; select bank1
 10543  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10544  1721  30B4               	movlw	180
 10545  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10546  1723  3043               	movlw	67
 10547  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10548  1725  0022               	movlb	2	; select bank2
 10549  1726  0837               	movf	modSin@inflection^(0+256),w
 10550  1727  0021               	movlb	1	; select bank1
 10551  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10552  1729  0022               	movlb	2	; select bank2
 10553  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10554  172B  0021               	movlb	1	; select bank1
 10555  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10556  172D  0022               	movlb	2	; select bank2
 10557  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10558  172F  0021               	movlb	1	; select bank1
 10559  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10560  1731  31AD  258A  3196   	fcall	___ftneg
 10561  1734  0021               	movlb	1	; select bank1
 10562  1735  083E               	movf	?___ftneg^(0+128),w
 10563  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10564  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10565  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10566  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10567  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10568  173B  3190  2026  3196   	fcall	___ftadd
 10569  173E  0021               	movlb	1	; select bank1
 10570  173F  0841               	movf	?___ftadd^(0+128),w
 10571  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10572  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10573  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10574  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10575  1744                     L9:	
 10576  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10577  1745  3000               	movlw	0
 10578  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10579  1747  3034               	movlw	52
 10580  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10581  1749  3043               	movlw	67
 10582  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10583  174B  319D  2527  3196   	fcall	___ftdiv
 10584  174E  0021               	movlb	1	; select bank1
 10585  174F  084E               	movf	?___ftdiv^(0+128),w
 10586  1750  0022               	movlb	2	; select bank2
 10587  1751  00C2               	movwf	modSin@period^(0+256)
 10588  1752  0021               	movlb	1	; select bank1
 10589  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10590  1754  0022               	movlb	2	; select bank2
 10591  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10592  1756  0021               	movlb	1	; select bank1
 10593  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10594  1758  0022               	movlb	2	; select bank2
 10595  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10596                           
 10597                           ;modulation.c: 90: }
 10598                           ;modulation.c: 91: double tmpVal = (period*angle-shift) /3;
 10599  175A  3000               	movlw	0
 10600  175B  0021               	movlb	1	; select bank1
 10601  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10602  175D  3040               	movlw	64
 10603  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10604  175F  3040               	movlw	64
 10605  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10606  1761  0022               	movlb	2	; select bank2
 10607  1762  083F               	movf	modSin@shift^(0+256),w
 10608  1763  0021               	movlb	1	; select bank1
 10609  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10610  1765  0022               	movlb	2	; select bank2
 10611  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10612  1767  0021               	movlb	1	; select bank1
 10613  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10614  1769  0022               	movlb	2	; select bank2
 10615  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10616  176B  0021               	movlb	1	; select bank1
 10617  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10618  176D  31AD  258A  3196   	fcall	___ftneg
 10619  1770  0021               	movlb	1	; select bank1
 10620  1771  083E               	movf	?___ftneg^(0+128),w
 10621  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10622  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10623  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10624  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10625  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10626  1777  0022               	movlb	2	; select bank2
 10627  1778  0834               	movf	modSin@angle^(0+256),w
 10628  1779  0021               	movlb	1	; select bank1
 10629  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10630  177B  0022               	movlb	2	; select bank2
 10631  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10632  177D  0021               	movlb	1	; select bank1
 10633  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10634  177F  0022               	movlb	2	; select bank2
 10635  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10636  1781  0021               	movlb	1	; select bank1
 10637  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10638  1783  0022               	movlb	2	; select bank2
 10639  1784  0842               	movf	modSin@period^(0+256),w
 10640  1785  0021               	movlb	1	; select bank1
 10641  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10642  1787  0022               	movlb	2	; select bank2
 10643  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10644  1789  0021               	movlb	1	; select bank1
 10645  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10646  178B  0022               	movlb	2	; select bank2
 10647  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10648  178D  0021               	movlb	1	; select bank1
 10649  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10650  178F  319E  267B  3196   	fcall	___ftmul
 10651  1792  0021               	movlb	1	; select bank1
 10652  1793  082E               	movf	?___ftmul^(0+128),w
 10653  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10654  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10655  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10656  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10657  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10658  1799  3190  2026  3196   	fcall	___ftadd
 10659  179C  0021               	movlb	1	; select bank1
 10660  179D  0841               	movf	?___ftadd^(0+128),w
 10661  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10662  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10663  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10664  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10665  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10666  17A3  319D  2527  3196   	fcall	___ftdiv
 10667  17A6  0021               	movlb	1	; select bank1
 10668  17A7  084E               	movf	?___ftdiv^(0+128),w
 10669  17A8  0022               	movlb	2	; select bank2
 10670  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10671  17AA  0021               	movlb	1	; select bank1
 10672  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10673  17AC  0022               	movlb	2	; select bank2
 10674  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10675  17AE  0021               	movlb	1	; select bank1
 10676  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10677  17B0  0022               	movlb	2	; select bank2
 10678  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10679                           
 10680                           ;modulation.c: 92: tmpVal = sinArray[(int)(tmpVal)];
 10681  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10682  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10683  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10684  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10685  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10686  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10687  17B8  3199  21BA  3196   	fcall	___fttol
 10688  17BB  0022               	movlb	2	; select bank2
 10689  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10690  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10691  17BE  0820               	movf	?___fttol^(0+256),w
 10692  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10693  17C0  3003               	movlw	3
 10694  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10695  17C2  3000               	movlw	0
 10696  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10697  17C4  31AE  2640  3196   	fcall	___wmul
 10698  17C7  3082               	movlw	130
 10699  17C8  0022               	movlb	2	; select bank2
 10700  17C9  00BA               	movwf	??_modSin^(0+256)
 10701  17CA  3024               	movlw	36
 10702  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10703  17CC  082E               	movf	?___wmul^(0+256),w
 10704  17CD  073A               	addwf	??_modSin^(0+256),w
 10705  17CE  0086               	movwf	6
 10706  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10707  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10708  17D1  0087               	movwf	7
 10709  17D2  3F40               	moviw [0]fsr1
 10710  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10711  17D4  3F41               	moviw [1]fsr1
 10712  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10713  17D6  3F42               	moviw [2]fsr1
 10714  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10715                           
 10716                           ;modulation.c: 93: return (int)(100.0 * tmpVal);
 10717  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10718  17D9  0021               	movlb	1	; select bank1
 10719  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10720  17DB  0022               	movlb	2	; select bank2
 10721  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10722  17DD  0021               	movlb	1	; select bank1
 10723  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10724  17DF  0022               	movlb	2	; select bank2
 10725  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10726  17E1  0021               	movlb	1	; select bank1
 10727  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10728  17E3  3000               	movlw	0
 10729  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10730  17E5  30C8               	movlw	200
 10731  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10732  17E7  3042               	movlw	66
 10733  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10734  17E9  319E  267B  3196   	fcall	___ftmul
 10735  17EC  0021               	movlb	1	; select bank1
 10736  17ED  082E               	movf	?___ftmul^(0+128),w
 10737  17EE  0022               	movlb	2	; select bank2
 10738  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10739  17F0  0021               	movlb	1	; select bank1
 10740  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10741  17F2  0022               	movlb	2	; select bank2
 10742  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10743  17F4  0021               	movlb	1	; select bank1
 10744  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10745  17F6  0022               	movlb	2	; select bank2
 10746  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10747  17F8  3199  21BA         	fcall	___fttol
 10748  17FA  0022               	movlb	2	; select bank2
 10749  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10750  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10751  17FD  0820               	movf	?___fttol^(0+256),w
 10752  17FE  00B4               	movwf	?_modSin^(0+256)
 10753  17FF  0008               	return
 10754  1800                     __end_of_modSin:	
 10755                           
 10756                           	psect	text20
 10757  2E78                     __ptext20:	
 10758 ;; *************** function _modSawRev *****************
 10759 ;; Defined at:
 10760 ;;		line 135 in file "modulation.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;  angle           3   37[BANK2 ] int 
 10763 ;;  inflection      3   40[BANK2 ] int 
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  2   37[BANK2 ] int 
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0, pclath, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10775 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10777 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10778 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10779 ;;Total ram usage:        8 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    6
 10782 ;; This function calls:
 10783 ;;		_modSaw
 10784 ;; This function is called by:
 10785 ;;		_updateModulationArray
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _modSawRev
 10791  2E78                     _modSawRev:	
 10792                           
 10793                           ;modulation.c: 136: return -1 * modSaw(angle, inflection);
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10797  2E78  0022               	movlb	2	; select bank2
 10798  2E79  0845               	movf	modSawRev@angle^(0+256),w
 10799  2E7A  00AE               	movwf	modSaw@angle^(0+256)
 10800  2E7B  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10801  2E7C  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10802  2E7D  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10803  2E7E  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10804  2E7F  0848               	movf	modSawRev@inflection^(0+256),w
 10805  2E80  00B1               	movwf	modSaw@inflection^(0+256)
 10806  2E81  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10807  2E82  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10808  2E83  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10809  2E84  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10810  2E85  3194  24AA         	fcall	_modSaw
 10811  2E87  0022               	movlb	2	; select bank2
 10812  2E88  092E               	comf	?_modSaw^(0+256),w
 10813  2E89  00CB               	movwf	??_modSawRev^(0+256)
 10814  2E8A  092F               	comf	(?_modSaw+1)^(0+256),w
 10815  2E8B  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10816  2E8C  0ACB               	incf	??_modSawRev^(0+256),f
 10817  2E8D  1903               	skipnz
 10818  2E8E  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10819  2E8F  084B               	movf	??_modSawRev^(0+256),w
 10820  2E90  00C5               	movwf	?_modSawRev^(0+256)
 10821  2E91  084C               	movf	(??_modSawRev+1)^(0+256),w
 10822  2E92  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10823  2E93  0008               	return
 10824  2E94                     __end_of_modSawRev:	
 10825                           
 10826                           	psect	text21
 10827  14AA                     __ptext21:	
 10828 ;; *************** function _modSaw *****************
 10829 ;; Defined at:
 10830 ;;		line 119 in file "modulation.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  angle           3   14[BANK2 ] int 
 10833 ;;  inflection      3   17[BANK2 ] int 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  period          3   34[BANK2 ] int 
 10836 ;;  shift           3   31[BANK2 ] int 
 10837 ;;  mod             2   29[BANK2 ] int 
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  2   14[BANK2 ] int 
 10840 ;; Registers used:
 10841 ;;		wreg, status,2, status,0, pclath, cstack
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10847 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10848 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10850 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10851 ;;Total ram usage:       23 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; Hardware stack levels required when called:    5
 10854 ;; This function calls:
 10855 ;;		___ftadd
 10856 ;;		___ftdiv
 10857 ;;		___ftge
 10858 ;;		___ftmul
 10859 ;;		___ftneg
 10860 ;;		___fttol
 10861 ;; This function is called by:
 10862 ;;		_updateModulationArray
 10863 ;;		_modSawRev
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           
 10868                           ;psect for function _modSaw
 10869  14AA                     _modSaw:	
 10870                           
 10871                           ;modulation.c: 120: double period = 1.0;
 10872                           
 10873                           ;incstack = 0
 10874                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10875  14AA  3000               	movlw	0
 10876  14AB  0022               	movlb	2	; select bank2
 10877  14AC  00C2               	movwf	modSaw@period^(0+256)
 10878  14AD  3080               	movlw	128
 10879  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10880  14AF  303F               	movlw	63
 10881  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10882                           
 10883                           ;modulation.c: 121: double shift = 0;
 10884  14B1  3000               	movlw	0
 10885  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10886  14B3  3000               	movlw	0
 10887  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10888  14B5  3000               	movlw	0
 10889  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10890                           
 10891                           ;modulation.c: 123: if(angle<=inflection) {
 10892  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10893  14B8  0021               	movlb	1	; select bank1
 10894  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10895  14BA  0022               	movlb	2	; select bank2
 10896  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10897  14BC  0021               	movlb	1	; select bank1
 10898  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10899  14BE  0022               	movlb	2	; select bank2
 10900  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10901  14C0  0021               	movlb	1	; select bank1
 10902  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10903  14C2  0022               	movlb	2	; select bank2
 10904  14C3  082E               	movf	modSaw@angle^(0+256),w
 10905  14C4  0021               	movlb	1	; select bank1
 10906  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10907  14C6  0022               	movlb	2	; select bank2
 10908  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10909  14C8  0021               	movlb	1	; select bank1
 10910  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10911  14CA  0022               	movlb	2	; select bank2
 10912  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10913  14CC  0021               	movlb	1	; select bank1
 10914  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10915  14CE  31A1  212A  3194   	fcall	___ftge
 10916  14D1  1C03               	btfss	3,0
 10917  14D2  2CDF               	goto	l8194
 10918                           
 10919                           ;modulation.c: 124: period = 180.0/inflection;
 10920  14D3  0022               	movlb	2	; select bank2
 10921  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10922  14D5  0021               	movlb	1	; select bank1
 10923  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10924  14D7  0022               	movlb	2	; select bank2
 10925  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10926  14D9  0021               	movlb	1	; select bank1
 10927  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10928  14DB  0022               	movlb	2	; select bank2
 10929  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10930  14DD  0021               	movlb	1	; select bank1
 10931  14DE  2DBC               	goto	L10
 10932  14DF                     l8194:	
 10933                           ;modulation.c: 125: } else {
 10934                           
 10935                           
 10936                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10937  14DF  0022               	movlb	2	; select bank2
 10938  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10939  14E1  0021               	movlb	1	; select bank1
 10940  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10941  14E3  0022               	movlb	2	; select bank2
 10942  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10943  14E5  0021               	movlb	1	; select bank1
 10944  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10945  14E7  0022               	movlb	2	; select bank2
 10946  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10947  14E9  0021               	movlb	1	; select bank1
 10948  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10949  14EB  3000               	movlw	0
 10950  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10951  14ED  3000               	movlw	0
 10952  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10953  14EF  3040               	movlw	64
 10954  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10955  14F1  319E  267B  3194   	fcall	___ftmul
 10956  14F4  0021               	movlb	1	; select bank1
 10957  14F5  082E               	movf	?___ftmul^(0+128),w
 10958  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10959  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10960  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10961  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10962  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10963  14FB  31AD  258A  3194   	fcall	___ftneg
 10964  14FE  0021               	movlb	1	; select bank1
 10965  14FF  083E               	movf	?___ftneg^(0+128),w
 10966  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10967  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10968  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10969  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10970  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10971  1505  3000               	movlw	0
 10972  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10973  1507  30B4               	movlw	180
 10974  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10975  1509  3043               	movlw	67
 10976  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10977  150B  3190  2026  3194   	fcall	___ftadd
 10978  150E  0021               	movlb	1	; select bank1
 10979  150F  0841               	movf	?___ftadd^(0+128),w
 10980  1510  0022               	movlb	2	; select bank2
 10981  1511  00B4               	movwf	_modSaw$2846^(0+256)
 10982  1512  0021               	movlb	1	; select bank1
 10983  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10984  1514  0022               	movlb	2	; select bank2
 10985  1515  00B5               	movwf	(_modSaw$2846+1)^(0+256)
 10986  1516  0021               	movlb	1	; select bank1
 10987  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10988  1518  0022               	movlb	2	; select bank2
 10989  1519  00B6               	movwf	(_modSaw$2846+2)^(0+256)
 10990                           
 10991                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10992  151A  0834               	movf	_modSaw$2846^(0+256),w
 10993  151B  0021               	movlb	1	; select bank1
 10994  151C  00BE               	movwf	___ftneg@f1^(0+128)
 10995  151D  0022               	movlb	2	; select bank2
 10996  151E  0835               	movf	(_modSaw$2846+1)^(0+256),w
 10997  151F  0021               	movlb	1	; select bank1
 10998  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10999  1521  0022               	movlb	2	; select bank2
 11000  1522  0836               	movf	(_modSaw$2846+2)^(0+256),w
 11001  1523  0021               	movlb	1	; select bank1
 11002  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11003  1525  31AD  258A  3194   	fcall	___ftneg
 11004  1528  0021               	movlb	1	; select bank1
 11005  1529  083E               	movf	?___ftneg^(0+128),w
 11006  152A  00AE               	movwf	___ftmul@f1^(0+128)
 11007  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 11008  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11009  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 11010  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11011  152F  3000               	movlw	0
 11012  1530  00C1               	movwf	___ftadd@f1^(0+128)
 11013  1531  30B4               	movlw	180
 11014  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11015  1533  3043               	movlw	67
 11016  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11017  1535  0022               	movlb	2	; select bank2
 11018  1536  0831               	movf	modSaw@inflection^(0+256),w
 11019  1537  0021               	movlb	1	; select bank1
 11020  1538  00BE               	movwf	___ftneg@f1^(0+128)
 11021  1539  0022               	movlb	2	; select bank2
 11022  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11023  153B  0021               	movlb	1	; select bank1
 11024  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11025  153D  0022               	movlb	2	; select bank2
 11026  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11027  153F  0021               	movlb	1	; select bank1
 11028  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11029  1541  31AD  258A  3194   	fcall	___ftneg
 11030  1544  0021               	movlb	1	; select bank1
 11031  1545  083E               	movf	?___ftneg^(0+128),w
 11032  1546  00C4               	movwf	___ftadd@f2^(0+128)
 11033  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 11034  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11035  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 11036  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11037  154B  3190  2026  3194   	fcall	___ftadd
 11038  154E  0021               	movlb	1	; select bank1
 11039  154F  0841               	movf	?___ftadd^(0+128),w
 11040  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 11041  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 11042  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11043  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 11044  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11045  1555  3000               	movlw	0
 11046  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 11047  1557  3034               	movlw	52
 11048  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11049  1559  3043               	movlw	67
 11050  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11051  155B  319D  2527  3194   	fcall	___ftdiv
 11052  155E  0021               	movlb	1	; select bank1
 11053  155F  084E               	movf	?___ftdiv^(0+128),w
 11054  1560  00B1               	movwf	___ftmul@f2^(0+128)
 11055  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 11056  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11057  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 11058  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11059  1565  319E  267B  3194   	fcall	___ftmul
 11060  1568  0021               	movlb	1	; select bank1
 11061  1569  082E               	movf	?___ftmul^(0+128),w
 11062  156A  0022               	movlb	2	; select bank2
 11063  156B  00B7               	movwf	_modSaw$2847^(0+256)
 11064  156C  0021               	movlb	1	; select bank1
 11065  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 11066  156E  0022               	movlb	2	; select bank2
 11067  156F  00B8               	movwf	(_modSaw$2847+1)^(0+256)
 11068  1570  0021               	movlb	1	; select bank1
 11069  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 11070  1572  0022               	movlb	2	; select bank2
 11071  1573  00B9               	movwf	(_modSaw$2847+2)^(0+256)
 11072                           
 11073                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 11074  1574  3000               	movlw	0
 11075  1575  0021               	movlb	1	; select bank1
 11076  1576  00C1               	movwf	___ftadd@f1^(0+128)
 11077  1577  30B4               	movlw	180
 11078  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11079  1579  3043               	movlw	67
 11080  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11081  157B  0022               	movlb	2	; select bank2
 11082  157C  0837               	movf	_modSaw$2847^(0+256),w
 11083  157D  0021               	movlb	1	; select bank1
 11084  157E  00C4               	movwf	___ftadd@f2^(0+128)
 11085  157F  0022               	movlb	2	; select bank2
 11086  1580  0838               	movf	(_modSaw$2847+1)^(0+256),w
 11087  1581  0021               	movlb	1	; select bank1
 11088  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11089  1583  0022               	movlb	2	; select bank2
 11090  1584  0839               	movf	(_modSaw$2847+2)^(0+256),w
 11091  1585  0021               	movlb	1	; select bank1
 11092  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11093  1587  3190  2026  3194   	fcall	___ftadd
 11094  158A  0021               	movlb	1	; select bank1
 11095  158B  0841               	movf	?___ftadd^(0+128),w
 11096  158C  0022               	movlb	2	; select bank2
 11097  158D  00BF               	movwf	modSaw@shift^(0+256)
 11098  158E  0021               	movlb	1	; select bank1
 11099  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 11100  1590  0022               	movlb	2	; select bank2
 11101  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 11102  1592  0021               	movlb	1	; select bank1
 11103  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 11104  1594  0022               	movlb	2	; select bank2
 11105  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 11106                           
 11107                           ;modulation.c: 127: period = 180/(360-inflection);
 11108  1596  3000               	movlw	0
 11109  1597  0021               	movlb	1	; select bank1
 11110  1598  00C1               	movwf	___ftadd@f1^(0+128)
 11111  1599  30B4               	movlw	180
 11112  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11113  159B  3043               	movlw	67
 11114  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11115  159D  0022               	movlb	2	; select bank2
 11116  159E  0831               	movf	modSaw@inflection^(0+256),w
 11117  159F  0021               	movlb	1	; select bank1
 11118  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 11119  15A1  0022               	movlb	2	; select bank2
 11120  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11121  15A3  0021               	movlb	1	; select bank1
 11122  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11123  15A5  0022               	movlb	2	; select bank2
 11124  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11125  15A7  0021               	movlb	1	; select bank1
 11126  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11127  15A9  31AD  258A  3194   	fcall	___ftneg
 11128  15AC  0021               	movlb	1	; select bank1
 11129  15AD  083E               	movf	?___ftneg^(0+128),w
 11130  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 11131  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 11132  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11133  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 11134  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11135  15B3  3190  2026  3194   	fcall	___ftadd
 11136  15B6  0021               	movlb	1	; select bank1
 11137  15B7  0841               	movf	?___ftadd^(0+128),w
 11138  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 11139  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 11140  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11141  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 11142  15BC                     L10:	
 11143  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11144  15BD  3000               	movlw	0
 11145  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 11146  15BF  3034               	movlw	52
 11147  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11148  15C1  3043               	movlw	67
 11149  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11150  15C3  319D  2527  3194   	fcall	___ftdiv
 11151  15C6  0021               	movlb	1	; select bank1
 11152  15C7  084E               	movf	?___ftdiv^(0+128),w
 11153  15C8  0022               	movlb	2	; select bank2
 11154  15C9  00C2               	movwf	modSaw@period^(0+256)
 11155  15CA  0021               	movlb	1	; select bank1
 11156  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11157  15CC  0022               	movlb	2	; select bank2
 11158  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 11159  15CE  0021               	movlb	1	; select bank1
 11160  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11161  15D0  0022               	movlb	2	; select bank2
 11162  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 11163                           
 11164                           ;modulation.c: 128: }
 11165                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11166  15D2  0842               	movf	modSaw@period^(0+256),w
 11167  15D3  0021               	movlb	1	; select bank1
 11168  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 11169  15D5  0022               	movlb	2	; select bank2
 11170  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 11171  15D7  0021               	movlb	1	; select bank1
 11172  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11173  15D9  0022               	movlb	2	; select bank2
 11174  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 11175  15DB  0021               	movlb	1	; select bank1
 11176  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11177  15DD  0022               	movlb	2	; select bank2
 11178  15DE  082E               	movf	modSaw@angle^(0+256),w
 11179  15DF  0021               	movlb	1	; select bank1
 11180  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 11181  15E1  0022               	movlb	2	; select bank2
 11182  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11183  15E3  0021               	movlb	1	; select bank1
 11184  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11185  15E5  0022               	movlb	2	; select bank2
 11186  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11187  15E7  0021               	movlb	1	; select bank1
 11188  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11189  15E9  319E  267B  3194   	fcall	___ftmul
 11190  15EC  0021               	movlb	1	; select bank1
 11191  15ED  082E               	movf	?___ftmul^(0+128),w
 11192  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 11193  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 11194  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11195  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 11196  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11197  15F3  0022               	movlb	2	; select bank2
 11198  15F4  083F               	movf	modSaw@shift^(0+256),w
 11199  15F5  0021               	movlb	1	; select bank1
 11200  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 11201  15F7  0022               	movlb	2	; select bank2
 11202  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 11203  15F9  0021               	movlb	1	; select bank1
 11204  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11205  15FB  0022               	movlb	2	; select bank2
 11206  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 11207  15FD  0021               	movlb	1	; select bank1
 11208  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11209  15FF  31AD  258A  3194   	fcall	___ftneg
 11210  1602  0021               	movlb	1	; select bank1
 11211  1603  083E               	movf	?___ftneg^(0+128),w
 11212  1604  00C1               	movwf	___ftadd@f1^(0+128)
 11213  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 11214  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11215  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 11216  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11217  1609  3190  2026  3194   	fcall	___ftadd
 11218  160C  0021               	movlb	1	; select bank1
 11219  160D  0841               	movf	?___ftadd^(0+128),w
 11220  160E  0022               	movlb	2	; select bank2
 11221  160F  00BA               	movwf	_modSaw$2848^(0+256)
 11222  1610  0021               	movlb	1	; select bank1
 11223  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 11224  1612  0022               	movlb	2	; select bank2
 11225  1613  00BB               	movwf	(_modSaw$2848+1)^(0+256)
 11226  1614  0021               	movlb	1	; select bank1
 11227  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 11228  1616  0022               	movlb	2	; select bank2
 11229  1617  00BC               	movwf	(_modSaw$2848+2)^(0+256)
 11230                           
 11231                           ;modulation.c: 128: }
 11232                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11233  1618  083A               	movf	_modSaw$2848^(0+256),w
 11234  1619  0021               	movlb	1	; select bank1
 11235  161A  00B1               	movwf	___ftmul@f2^(0+128)
 11236  161B  0022               	movlb	2	; select bank2
 11237  161C  083B               	movf	(_modSaw$2848+1)^(0+256),w
 11238  161D  0021               	movlb	1	; select bank1
 11239  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11240  161F  0022               	movlb	2	; select bank2
 11241  1620  083C               	movf	(_modSaw$2848+2)^(0+256),w
 11242  1621  0021               	movlb	1	; select bank1
 11243  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11244  1623  3000               	movlw	0
 11245  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11246  1625  30A0               	movlw	160
 11247  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11248  1627  3040               	movlw	64
 11249  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11250  1629  319E  267B  3194   	fcall	___ftmul
 11251  162C  0021               	movlb	1	; select bank1
 11252  162D  082E               	movf	?___ftmul^(0+128),w
 11253  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11254  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11255  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11256  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11257  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11258  1633  3000               	movlw	0
 11259  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11260  1635  3010               	movlw	16
 11261  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11262  1637  3041               	movlw	65
 11263  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11264  1639  319D  2527  3194   	fcall	___ftdiv
 11265  163C  0021               	movlb	1	; select bank1
 11266  163D  084E               	movf	?___ftdiv^(0+128),w
 11267  163E  0022               	movlb	2	; select bank2
 11268  163F  00A0               	movwf	___fttol@f1^(0+256)
 11269  1640  0021               	movlb	1	; select bank1
 11270  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11271  1642  0022               	movlb	2	; select bank2
 11272  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11273  1644  0021               	movlb	1	; select bank1
 11274  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11275  1646  0022               	movlb	2	; select bank2
 11276  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11277  1648  3199  21BA         	fcall	___fttol
 11278  164A  0022               	movlb	2	; select bank2
 11279  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11280  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11281  164D  0820               	movf	?___fttol^(0+256),w
 11282  164E  00BD               	movwf	modSaw@mod^(0+256)
 11283                           
 11284                           ;modulation.c: 132: return mod;
 11285  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 11286  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11287  1651  083D               	movf	modSaw@mod^(0+256),w
 11288  1652  00AE               	movwf	?_modSaw^(0+256)
 11289  1653  0008               	return
 11290  1654                     __end_of_modSaw:	
 11291                           
 11292                           	psect	text22
 11293  2533                     __ptext22:	
 11294 ;; *************** function ___awdiv *****************
 11295 ;; Defined at:
 11296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  divisor         2    0[BANK1 ] int 
 11299 ;;  dividend        2    2[BANK1 ] int 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  quotient        2    7[BANK1 ] int 
 11302 ;;  sign            1    6[BANK1 ] unsigned char 
 11303 ;;  counter         1    5[BANK1 ] unsigned char 
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  2    0[BANK1 ] int 
 11306 ;; Registers used:
 11307 ;;		wreg, status,2, status,0
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11313 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11314 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11315 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11316 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11317 ;;Total ram usage:        9 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    3
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_updateModulationArray
 11324 ;;		_USARTWriteInt
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           
 11329                           ;psect for function ___awdiv
 11330  2533                     ___awdiv:	
 11331                           
 11332                           ;incstack = 0
 11333                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11334  2533  0021               	movlb	1	; select bank1
 11335  2534  01A6               	clrf	___awdiv@sign^(0+128)
 11336  2535  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11337  2536  2D3E               	goto	l8586
 11338  2537  09A0               	comf	___awdiv@divisor^(0+128),f
 11339  2538  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11340  2539  0AA0               	incf	___awdiv@divisor^(0+128),f
 11341  253A  1903               	skipnz
 11342  253B  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11343  253C  01A6               	clrf	___awdiv@sign^(0+128)
 11344  253D  0AA6               	incf	___awdiv@sign^(0+128),f
 11345  253E                     l8586:	
 11346  253E  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11347  253F  2D49               	goto	l8592
 11348  2540  09A2               	comf	___awdiv@dividend^(0+128),f
 11349  2541  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11350  2542  0AA2               	incf	___awdiv@dividend^(0+128),f
 11351  2543  1903               	skipnz
 11352  2544  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11353  2545  3001               	movlw	1
 11354  2546  00A4               	movwf	??___awdiv^(0+128)
 11355  2547  0824               	movf	??___awdiv^(0+128),w
 11356  2548  06A6               	xorwf	___awdiv@sign^(0+128),f
 11357  2549                     l8592:	
 11358  2549  01A7               	clrf	___awdiv@quotient^(0+128)
 11359  254A  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11360  254B  0820               	movf	___awdiv@divisor^(0+128),w
 11361  254C  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11362  254D  1903               	btfsc	3,2
 11363  254E  2D78               	goto	l8614
 11364  254F  01A5               	clrf	___awdiv@counter^(0+128)
 11365  2550  0AA5               	incf	___awdiv@counter^(0+128),f
 11366  2551                     l8602:	
 11367  2551  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11368  2552  2D5D               	goto	l8604
 11369  2553  3001               	movlw	1
 11370  2554                     u9165:	
 11371  2554  35A0               	lslf	___awdiv@divisor^(0+128),f
 11372  2555  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11373  2556  0B89               	decfsz	9,f
 11374  2557  2D54               	goto	u9165
 11375  2558  3001               	movlw	1
 11376  2559  00A4               	movwf	??___awdiv^(0+128)
 11377  255A  0824               	movf	??___awdiv^(0+128),w
 11378  255B  07A5               	addwf	___awdiv@counter^(0+128),f
 11379  255C  2D51               	goto	l8602
 11380  255D                     l8604:	
 11381  255D  3001               	movlw	1
 11382  255E                     u9185:	
 11383  255E  35A7               	lslf	___awdiv@quotient^(0+128),f
 11384  255F  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11385  2560  0B89               	decfsz	9,f
 11386  2561  2D5E               	goto	u9185
 11387  2562  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11388  2563  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11389  2564  1D03               	skipz
 11390  2565  2D68               	goto	u9195
 11391  2566  0820               	movf	___awdiv@divisor^(0+128),w
 11392  2567  0222               	subwf	___awdiv@dividend^(0+128),w
 11393  2568                     u9195:	
 11394  2568  1C03               	skipc
 11395  2569  2D6F               	goto	l8610
 11396  256A  0820               	movf	___awdiv@divisor^(0+128),w
 11397  256B  02A2               	subwf	___awdiv@dividend^(0+128),f
 11398  256C  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11399  256D  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11400  256E  1427               	bsf	___awdiv@quotient^(0+128),0
 11401  256F                     l8610:	
 11402  256F  3001               	movlw	1
 11403  2570                     u9205:	
 11404  2570  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11405  2571  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11406  2572  0B89               	decfsz	9,f
 11407  2573  2D70               	goto	u9205
 11408  2574  3001               	movlw	1
 11409  2575  02A5               	subwf	___awdiv@counter^(0+128),f
 11410  2576  1D03               	btfss	3,2
 11411  2577  2D5D               	goto	l8604
 11412  2578                     l8614:	
 11413  2578  0826               	movf	___awdiv@sign^(0+128),w
 11414  2579  1903               	btfsc	3,2
 11415  257A  2D80               	goto	l8618
 11416  257B  09A7               	comf	___awdiv@quotient^(0+128),f
 11417  257C  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11418  257D  0AA7               	incf	___awdiv@quotient^(0+128),f
 11419  257E  1903               	skipnz
 11420  257F  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11421  2580                     l8618:	
 11422  2580  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11423  2581  00A1               	movwf	(?___awdiv+1)^(0+128)
 11424  2582  0827               	movf	___awdiv@quotient^(0+128),w
 11425  2583  00A0               	movwf	?___awdiv^(0+128)
 11426  2584  0008               	return
 11427  2585                     __end_of___awdiv:	
 11428                           
 11429                           	psect	text23
 11430  0735                     __ptext23:	
 11431 ;; *************** function _set_subdivision *****************
 11432 ;; Defined at:
 11433 ;;		line 77 in file "user.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;  x               2   31[BANK2 ] int 
 11436 ;;  y               2   33[BANK2 ] int 
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  scalar          3   38[BANK2 ] float 
 11439 ;;  tmpX            2   41[BANK2 ] int 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  2   31[BANK2 ] int 
 11442 ;; Registers used:
 11443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11449 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11450 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11451 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11452 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11453 ;;Total ram usage:       12 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    6
 11456 ;; This function calls:
 11457 ;;		___awtoft
 11458 ;;		___ftmul
 11459 ;;		___fttol
 11460 ;;		_trunc
 11461 ;; This function is called by:
 11462 ;;		_main
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           
 11467                           ;psect for function _set_subdivision
 11468  0735                     _set_subdivision:	
 11469                           
 11470                           ;user.c: 81: adjust_mod_delay = 0;
 11471                           
 11472                           ;incstack = 0
 11473                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11474  0735  0023               	movlb	3	; select bank3
 11475  0736  01BE               	clrf	_adjust_mod_delay^(0+384)
 11476                           
 11477                           ;user.c: 82: int tmpX = x;
 11478  0737  0022               	movlb	2	; select bank2
 11479  0738  0840               	movf	(set_subdivision@x+1)^(0+256),w
 11480  0739  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11481  073A  083F               	movf	set_subdivision@x^(0+256),w
 11482  073B  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11483                           
 11484                           ;user.c: 83: float scalar = 1.0;
 11485  073C  3000               	movlw	0
 11486  073D  00C6               	movwf	set_subdivision@scalar^(0+256)
 11487  073E  3080               	movlw	128
 11488  073F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11489  0740  303F               	movlw	63
 11490  0741  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11491                           
 11492                           ;user.c: 85: switch (y) {
 11493  0742  2F5E               	goto	l9170
 11494  0743                     l9158:	
 11495                           ;user.c: 86: case 1:
 11496                           
 11497                           
 11498                           ;user.c: 87: scalar = 2.0;
 11499  0743  3000               	movlw	0
 11500  0744  00C6               	movwf	set_subdivision@scalar^(0+256)
 11501  0745  3000               	movlw	0
 11502  0746  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11503  0747  3040               	movlw	64
 11504  0748  2F5C               	goto	L14
 11505  0749                     l9160:	
 11506                           ;user.c: 89: case 2:
 11507                           
 11508                           ;user.c: 88: break;
 11509                           
 11510                           
 11511                           ;user.c: 90: scalar = 0.6666;
 11512  0749  30A6               	movlw	166
 11513  074A  00C6               	movwf	set_subdivision@scalar^(0+256)
 11514  074B  302A               	movlw	42
 11515  074C  2F50               	goto	L16
 11516  074D                     l9162:	
 11517                           ;user.c: 92: case 3:
 11518                           
 11519                           ;user.c: 91: break;
 11520                           
 11521                           
 11522                           ;user.c: 93: scalar = .5;
 11523  074D  3000               	movlw	0
 11524  074E  00C6               	movwf	set_subdivision@scalar^(0+256)
 11525  074F  3000               	movlw	0
 11526  0750                     L16:	
 11527  0750  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11528  0751  303F               	movlw	63
 11529  0752  2F5C               	goto	L14
 11530  0753                     l9164:	
 11531                           ;user.c: 95: case 4:
 11532                           
 11533                           ;user.c: 94: break;
 11534                           
 11535                           
 11536                           ;user.c: 96: scalar = 0.3333;
 11537  0753  30A6               	movlw	166
 11538  0754  00C6               	movwf	set_subdivision@scalar^(0+256)
 11539  0755  30AA               	movlw	170
 11540  0756  2F5A               	goto	L15
 11541  0757                     l9166:	
 11542                           ;user.c: 98: case 5:
 11543                           
 11544                           ;user.c: 97: break;
 11545                           
 11546                           
 11547                           ;user.c: 99: scalar = 0.25;
 11548  0757  3000               	movlw	0
 11549  0758  00C6               	movwf	set_subdivision@scalar^(0+256)
 11550  0759  3080               	movlw	128
 11551  075A                     L15:	
 11552  075A  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11553  075B  303E               	movlw	62
 11554  075C                     L14:	
 11555  075C  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11556                           
 11557                           ;user.c: 104: }
 11558                           
 11559                           ;user.c: 103: break;
 11560                           
 11561                           ;user.c: 101: case 6:
 11562                           
 11563                           ;user.c: 100: break;
 11564  075D  2F77               	goto	l9172
 11565  075E                     l9170:	
 11566                           
 11567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11568                           ; Switch size 1, requested type "space"
 11569                           ; Number of cases is 1, Range of values is 0 to 0
 11570                           ; switch strategies available:
 11571                           ; Name         Instructions Cycles
 11572                           ; simple_byte            4     3 (average)
 11573                           ; direct_byte            8     6 (fixed)
 11574                           ; jumptable            260     6 (fixed)
 11575                           ;	Chosen strategy is simple_byte
 11576  075E  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11577  075F  3A00               	xorlw	0	; case 0
 11578  0760  1903               	skipnz
 11579  0761  2F63               	goto	l9750
 11580  0762  2F77               	goto	l9172
 11581  0763                     l9750:	
 11582                           
 11583                           ; Switch size 1, requested type "space"
 11584                           ; Number of cases is 6, Range of values is 1 to 6
 11585                           ; switch strategies available:
 11586                           ; Name         Instructions Cycles
 11587                           ; simple_byte           19    10 (average)
 11588                           ; direct_byte           21     9 (fixed)
 11589                           ; jumptable            263     9 (fixed)
 11590                           ;	Chosen strategy is simple_byte
 11591  0763  0841               	movf	set_subdivision@y^(0+256),w
 11592  0764  3A01               	xorlw	1	; case 1
 11593  0765  1903               	skipnz
 11594  0766  2F43               	goto	l9158
 11595  0767  3A03               	xorlw	3	; case 2
 11596  0768  1903               	skipnz
 11597  0769  2F49               	goto	l9160
 11598  076A  3A01               	xorlw	1	; case 3
 11599  076B  1903               	skipnz
 11600  076C  2F4D               	goto	l9162
 11601  076D  3A07               	xorlw	7	; case 4
 11602  076E  1903               	skipnz
 11603  076F  2F53               	goto	l9164
 11604  0770  3A01               	xorlw	1	; case 5
 11605  0771  1903               	skipnz
 11606  0772  2F57               	goto	l9166
 11607  0773  3A03               	xorlw	3	; case 6
 11608  0774  1903               	skipnz
 11609  0775  2F77               	goto	l9172
 11610  0776  2F77               	goto	l9172
 11611  0777                     l9172:	
 11612                           
 11613                           ;user.c: 106: tmpX = tmpX * scalar;
 11614  0777  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11615  0778  0021               	movlb	1	; select bank1
 11616  0779  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11617  077A  0022               	movlb	2	; select bank2
 11618  077B  0849               	movf	set_subdivision@tmpX^(0+256),w
 11619  077C  0021               	movlb	1	; select bank1
 11620  077D  00A8               	movwf	___awtoft@c^(0+128)
 11621  077E  31AE  26D5  3187   	fcall	___awtoft
 11622  0781  0021               	movlb	1	; select bank1
 11623  0782  0828               	movf	?___awtoft^(0+128),w
 11624  0783  00B1               	movwf	___ftmul@f2^(0+128)
 11625  0784  0829               	movf	(?___awtoft+1)^(0+128),w
 11626  0785  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11627  0786  082A               	movf	(?___awtoft+2)^(0+128),w
 11628  0787  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11629  0788  0022               	movlb	2	; select bank2
 11630  0789  0846               	movf	set_subdivision@scalar^(0+256),w
 11631  078A  0021               	movlb	1	; select bank1
 11632  078B  00AE               	movwf	___ftmul@f1^(0+128)
 11633  078C  0022               	movlb	2	; select bank2
 11634  078D  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11635  078E  0021               	movlb	1	; select bank1
 11636  078F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11637  0790  0022               	movlb	2	; select bank2
 11638  0791  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11639  0792  0021               	movlb	1	; select bank1
 11640  0793  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11641  0794  319E  267B  3187   	fcall	___ftmul
 11642  0797  0021               	movlb	1	; select bank1
 11643  0798  082E               	movf	?___ftmul^(0+128),w
 11644  0799  0022               	movlb	2	; select bank2
 11645  079A  00A0               	movwf	___fttol@f1^(0+256)
 11646  079B  0021               	movlb	1	; select bank1
 11647  079C  082F               	movf	(?___ftmul+1)^(0+128),w
 11648  079D  0022               	movlb	2	; select bank2
 11649  079E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11650  079F  0021               	movlb	1	; select bank1
 11651  07A0  0830               	movf	(?___ftmul+2)^(0+128),w
 11652  07A1  0022               	movlb	2	; select bank2
 11653  07A2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11654  07A3  3199  21BA  3187   	fcall	___fttol
 11655  07A6  0022               	movlb	2	; select bank2
 11656  07A7  0821               	movf	(?___fttol^(0+256)+1),w
 11657  07A8  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11658  07A9  0820               	movf	?___fttol^(0+256),w
 11659  07AA  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11660                           
 11661                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11662  07AB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11663  07AC  0021               	movlb	1	; select bank1
 11664  07AD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11665  07AE  0022               	movlb	2	; select bank2
 11666  07AF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11667  07B0  0021               	movlb	1	; select bank1
 11668  07B1  00A8               	movwf	___awtoft@c^(0+128)
 11669  07B2  31AE  26D5  3187   	fcall	___awtoft
 11670  07B5  0021               	movlb	1	; select bank1
 11671  07B6  0828               	movf	?___awtoft^(0+128),w
 11672  07B7  0022               	movlb	2	; select bank2
 11673  07B8  00B6               	movwf	trunc@x^(0+256)
 11674  07B9  0021               	movlb	1	; select bank1
 11675  07BA  0829               	movf	(?___awtoft+1)^(0+128),w
 11676  07BB  0022               	movlb	2	; select bank2
 11677  07BC  00B7               	movwf	(trunc@x+1)^(0+256)
 11678  07BD  0021               	movlb	1	; select bank1
 11679  07BE  082A               	movf	(?___awtoft+2)^(0+128),w
 11680  07BF  0022               	movlb	2	; select bank2
 11681  07C0  00B8               	movwf	(trunc@x+2)^(0+256)
 11682  07C1  31A3  23B5  3187   	fcall	_trunc
 11683  07C4  0022               	movlb	2	; select bank2
 11684  07C5  0836               	movf	?_trunc^(0+256),w
 11685  07C6  00C3               	movwf	??_set_subdivision^(0+256)
 11686  07C7  0837               	movf	(?_trunc+1)^(0+256),w
 11687  07C8  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11688  07C9  0838               	movf	(?_trunc+2)^(0+256),w
 11689  07CA  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11690  07CB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11691  07CC  0021               	movlb	1	; select bank1
 11692  07CD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11693  07CE  0022               	movlb	2	; select bank2
 11694  07CF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11695  07D0  0021               	movlb	1	; select bank1
 11696  07D1  00A8               	movwf	___awtoft@c^(0+128)
 11697  07D2  31AE  26D5  3187   	fcall	___awtoft
 11698  07D5  0021               	movlb	1	; select bank1
 11699  07D6  082A               	movf	(?___awtoft+2)^(0+128),w
 11700  07D7  0022               	movlb	2	; select bank2
 11701  07D8  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11702  07D9  1D03               	skipz
 11703  07DA  2FE5               	goto	u10185
 11704  07DB  0021               	movlb	1	; select bank1
 11705  07DC  0829               	movf	(?___awtoft+1)^(0+128),w
 11706  07DD  0022               	movlb	2	; select bank2
 11707  07DE  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11708  07DF  1D03               	skipz
 11709  07E0  2FE5               	goto	u10185
 11710  07E1  0021               	movlb	1	; select bank1
 11711  07E2  0828               	movf	?___awtoft^(0+128),w
 11712  07E3  0022               	movlb	2	; select bank2
 11713  07E4  0643               	xorwf	??_set_subdivision^(0+256),w
 11714  07E5                     u10185:	
 11715  07E5  1903               	skipnz
 11716  07E6  2FEA               	goto	l9178
 11717                           
 11718                           ;user.c: 109: adjust_mod_delay = 1;
 11719  07E7  0023               	movlb	3	; select bank3
 11720  07E8  01BE               	clrf	_adjust_mod_delay^(0+384)
 11721  07E9  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11722  07EA                     l9178:	
 11723                           
 11724                           ;user.c: 110: }
 11725                           ;user.c: 112: return tmpX;
 11726  07EA  0022               	movlb	2	; select bank2
 11727  07EB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11728  07EC  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11729  07ED  0849               	movf	set_subdivision@tmpX^(0+256),w
 11730  07EE  00BF               	movwf	?_set_subdivision^(0+256)
 11731  07EF  0008               	return
 11732  07F0                     __end_of_set_subdivision:	
 11733                           
 11734                           	psect	text24
 11735  23B5                     __ptext24:	
 11736 ;; *************** function _trunc *****************
 11737 ;; Defined at:
 11738 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  x               3   22[BANK2 ] int 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;  i               3   26[BANK2 ] int 
 11743 ;;  expon           2   29[BANK2 ] int 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  3   22[BANK2 ] int 
 11746 ;; Registers used:
 11747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11753 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11754 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11755 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11756 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11757 ;;Total ram usage:        9 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    5
 11760 ;; This function calls:
 11761 ;;		___altoft
 11762 ;;		___fttol
 11763 ;;		_frexp
 11764 ;; This function is called by:
 11765 ;;		_set_subdivision
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           
 11770                           ;psect for function _trunc
 11771  23B5                     _trunc:	
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11775  23B5  0022               	movlb	2	; select bank2
 11776  23B6  0836               	movf	trunc@x^(0+256),w
 11777  23B7  0021               	movlb	1	; select bank1
 11778  23B8  00A0               	movwf	frexp@value^(0+128)
 11779  23B9  0022               	movlb	2	; select bank2
 11780  23BA  0837               	movf	(trunc@x+1)^(0+256),w
 11781  23BB  0021               	movlb	1	; select bank1
 11782  23BC  00A1               	movwf	(frexp@value+1)^(0+128)
 11783  23BD  0022               	movlb	2	; select bank2
 11784  23BE  0838               	movf	(trunc@x+2)^(0+256),w
 11785  23BF  0021               	movlb	1	; select bank1
 11786  23C0  00A2               	movwf	(frexp@value+2)^(0+128)
 11787  23C1  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11788  23C2  0022               	movlb	2	; select bank2
 11789  23C3  00B9               	movwf	??_trunc^(0+256)
 11790  23C4  0839               	movf	??_trunc^(0+256),w
 11791  23C5  0021               	movlb	1	; select bank1
 11792  23C6  00A3               	movwf	frexp@eptr^(0+128)
 11793  23C7  31A1  21E1  31A3   	fcall	_frexp
 11794  23CA  0022               	movlb	2	; select bank2
 11795  23CB  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11796  23CC  2BD4               	goto	l8342
 11797  23CD  3000               	movlw	0
 11798  23CE  00B6               	movwf	?_trunc^(0+256)
 11799  23CF  3000               	movlw	0
 11800  23D0  00B7               	movwf	(?_trunc+1)^(0+256)
 11801  23D1  3000               	movlw	0
 11802  23D2  00B8               	movwf	(?_trunc+2)^(0+256)
 11803  23D3  0008               	return
 11804  23D4                     l8342:	
 11805  23D4  3000               	movlw	0
 11806  23D5  023E               	subwf	(trunc@expon+1)^(0+256),w
 11807  23D6  3015               	movlw	21
 11808  23D7  1903               	skipnz
 11809  23D8  023D               	subwf	trunc@expon^(0+256),w
 11810  23D9  1803               	btfsc	3,0
 11811  23DA  0008               	return
 11812  23DB  0836               	movf	trunc@x^(0+256),w
 11813  23DC  00A0               	movwf	___fttol@f1^(0+256)
 11814  23DD  0837               	movf	(trunc@x+1)^(0+256),w
 11815  23DE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11816  23DF  0838               	movf	(trunc@x+2)^(0+256),w
 11817  23E0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11818  23E1  3199  21BA  31A3   	fcall	___fttol
 11819  23E4  0022               	movlb	2	; select bank2
 11820  23E5  0823               	movf	(?___fttol+3)^(0+256),w
 11821  23E6  00B1               	movwf	(___altoft@c+3)^(0+256)
 11822  23E7  0822               	movf	(?___fttol+2)^(0+256),w
 11823  23E8  00B0               	movwf	(___altoft@c+2)^(0+256)
 11824  23E9  0821               	movf	(?___fttol+1)^(0+256),w
 11825  23EA  00AF               	movwf	(___altoft@c+1)^(0+256)
 11826  23EB  0820               	movf	?___fttol^(0+256),w
 11827  23EC  00AE               	movwf	___altoft@c^(0+256)
 11828  23ED  31A4  2447         	fcall	___altoft
 11829  23EF  0022               	movlb	2	; select bank2
 11830  23F0  082E               	movf	?___altoft^(0+256),w
 11831  23F1  00BA               	movwf	trunc@i^(0+256)
 11832  23F2  082F               	movf	(?___altoft+1)^(0+256),w
 11833  23F3  00BB               	movwf	(trunc@i+1)^(0+256)
 11834  23F4  0830               	movf	(?___altoft+2)^(0+256),w
 11835  23F5  00BC               	movwf	(trunc@i+2)^(0+256)
 11836  23F6  083A               	movf	trunc@i^(0+256),w
 11837  23F7  00B6               	movwf	?_trunc^(0+256)
 11838  23F8  083B               	movf	(trunc@i+1)^(0+256),w
 11839  23F9  00B7               	movwf	(?_trunc+1)^(0+256)
 11840  23FA  083C               	movf	(trunc@i+2)^(0+256),w
 11841  23FB  00B8               	movwf	(?_trunc+2)^(0+256)
 11842  23FC  0008               	return
 11843  23FD                     __end_of_trunc:	
 11844                           
 11845                           	psect	text25
 11846  1DD0                     __ptext25:	
 11847 ;; *************** function _scaleiA10kPot *****************
 11848 ;; Defined at:
 11849 ;;		line 211 in file "user.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;  input           3   71[BANK2 ] int 
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;  pwm             3    0[BANK3 ] float 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  2   71[BANK2 ] int 
 11856 ;; Registers used:
 11857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11863 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11864 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11866 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11867 ;;Total ram usage:       12 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    8
 11870 ;; This function calls:
 11871 ;;		___ftadd
 11872 ;;		___ftdiv
 11873 ;;		___ftmul
 11874 ;;		___ftneg
 11875 ;;		___fttol
 11876 ;;		_pow
 11877 ;; This function is called by:
 11878 ;;		_main
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           
 11883                           ;psect for function _scaleiA10kPot
 11884  1DD0                     _scaleiA10kPot:	
 11885                           
 11886                           ;user.c: 214: if (input == 0.0) {return 0;}
 11887                           
 11888                           ;incstack = 0
 11889                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11890  1DD0  0022               	movlb	2	; select bank2
 11891  1DD1  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11892  1DD2  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11893  1DD3  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11894  1DD4  1D03               	skipz
 11895  1DD5  2DD9               	goto	l9118
 11896  1DD6  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11897  1DD7  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11898  1DD8  0008               	return
 11899  1DD9                     l9118:	
 11900                           
 11901                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11902  1DD9  30C0               	movlw	192
 11903  1DDA  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11904  1DDB  307F               	movlw	127
 11905  1DDC  1903               	skipnz
 11906  1DDD  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11907  1DDE  3044               	movlw	68
 11908  1DDF  1903               	skipnz
 11909  1DE0  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11910  1DE1  1D03               	btfss	3,2
 11911  1DE2  2DE8               	goto	l9124
 11912  1DE3  30FF               	movlw	255
 11913  1DE4  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11914  1DE5  3000               	movlw	0
 11915  1DE6  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11916  1DE7  0008               	return
 11917  1DE8                     l9124:	
 11918                           
 11919                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11920  1DE8  3000               	movlw	0
 11921  1DE9  0021               	movlb	1	; select bank1
 11922  1DEA  00C1               	movwf	___ftadd@f1^(0+128)
 11923  1DEB  3080               	movlw	128
 11924  1DEC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11925  1DED  303F               	movlw	63
 11926  1DEE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11927  1DEF  0022               	movlb	2	; select bank2
 11928  1DF0  0867               	movf	scaleiA10kPot@input^(0+256),w
 11929  1DF1  0021               	movlb	1	; select bank1
 11930  1DF2  00D1               	movwf	___ftdiv@f1^(0+128)
 11931  1DF3  0022               	movlb	2	; select bank2
 11932  1DF4  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11933  1DF5  0021               	movlb	1	; select bank1
 11934  1DF6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11935  1DF7  0022               	movlb	2	; select bank2
 11936  1DF8  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11937  1DF9  0021               	movlb	1	; select bank1
 11938  1DFA  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11939  1DFB  30C0               	movlw	192
 11940  1DFC  00CE               	movwf	___ftdiv@f2^(0+128)
 11941  1DFD  307F               	movlw	127
 11942  1DFE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11943  1DFF  3044               	movlw	68
 11944  1E00  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11945  1E01  319D  2527  319D   	fcall	___ftdiv
 11946  1E04  0021               	movlb	1	; select bank1
 11947  1E05  084E               	movf	?___ftdiv^(0+128),w
 11948  1E06  00BE               	movwf	___ftneg@f1^(0+128)
 11949  1E07  084F               	movf	(?___ftdiv+1)^(0+128),w
 11950  1E08  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11951  1E09  0850               	movf	(?___ftdiv+2)^(0+128),w
 11952  1E0A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11953  1E0B  31AD  258A  319D   	fcall	___ftneg
 11954  1E0E  0021               	movlb	1	; select bank1
 11955  1E0F  083E               	movf	?___ftneg^(0+128),w
 11956  1E10  00C4               	movwf	___ftadd@f2^(0+128)
 11957  1E11  083F               	movf	(?___ftneg+1)^(0+128),w
 11958  1E12  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11959  1E13  0840               	movf	(?___ftneg+2)^(0+128),w
 11960  1E14  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11961  1E15  3190  2026  319D   	fcall	___ftadd
 11962  1E18  0021               	movlb	1	; select bank1
 11963  1E19  0841               	movf	?___ftadd^(0+128),w
 11964  1E1A  0023               	movlb	3	; select bank3
 11965  1E1B  00E5               	movwf	_scaleiA10kPot$2842^(0+384)
 11966  1E1C  0021               	movlb	1	; select bank1
 11967  1E1D  0842               	movf	(?___ftadd+1)^(0+128),w
 11968  1E1E  0023               	movlb	3	; select bank3
 11969  1E1F  00E6               	movwf	(_scaleiA10kPot$2842+1)^(0+384)
 11970  1E20  0021               	movlb	1	; select bank1
 11971  1E21  0843               	movf	(?___ftadd+2)^(0+128),w
 11972  1E22  0023               	movlb	3	; select bank3
 11973  1E23  00E7               	movwf	(_scaleiA10kPot$2842+2)^(0+384)
 11974                           
 11975                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11976  1E24  306A               	movlw	106
 11977  1E25  0022               	movlb	2	; select bank2
 11978  1E26  00D8               	movwf	pow@y^(0+256)
 11979  1E27  309C               	movlw	156
 11980  1E28  00D9               	movwf	(pow@y+1)^(0+256)
 11981  1E29  30BF               	movlw	191
 11982  1E2A  00DA               	movwf	(pow@y+2)^(0+256)
 11983  1E2B  0023               	movlb	3	; select bank3
 11984  1E2C  0865               	movf	_scaleiA10kPot$2842^(0+384),w
 11985  1E2D  0022               	movlb	2	; select bank2
 11986  1E2E  00D5               	movwf	pow@x^(0+256)
 11987  1E2F  0023               	movlb	3	; select bank3
 11988  1E30  0866               	movf	(_scaleiA10kPot$2842+1)^(0+384),w
 11989  1E31  0022               	movlb	2	; select bank2
 11990  1E32  00D6               	movwf	(pow@x+1)^(0+256)
 11991  1E33  0023               	movlb	3	; select bank3
 11992  1E34  0867               	movf	(_scaleiA10kPot$2842+2)^(0+384),w
 11993  1E35  0022               	movlb	2	; select bank2
 11994  1E36  00D7               	movwf	(pow@x+2)^(0+256)
 11995  1E37  3191  211C  319D   	fcall	_pow
 11996  1E3A  0022               	movlb	2	; select bank2
 11997  1E3B  0855               	movf	?_pow^(0+256),w
 11998  1E3C  0023               	movlb	3	; select bank3
 11999  1E3D  00E8               	movwf	_scaleiA10kPot$2843^(0+384)
 12000  1E3E  0022               	movlb	2	; select bank2
 12001  1E3F  0856               	movf	(?_pow+1)^(0+256),w
 12002  1E40  0023               	movlb	3	; select bank3
 12003  1E41  00E9               	movwf	(_scaleiA10kPot$2843+1)^(0+384)
 12004  1E42  0022               	movlb	2	; select bank2
 12005  1E43  0857               	movf	(?_pow+2)^(0+256),w
 12006  1E44  0023               	movlb	3	; select bank3
 12007  1E45  00EA               	movwf	(_scaleiA10kPot$2843+2)^(0+384)
 12008                           
 12009                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12010  1E46  30E3               	movlw	227
 12011  1E47  0021               	movlb	1	; select bank1
 12012  1E48  00AE               	movwf	___ftmul@f1^(0+128)
 12013  1E49  300B               	movlw	11
 12014  1E4A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12015  1E4B  3041               	movlw	65
 12016  1E4C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12017  1E4D  0023               	movlb	3	; select bank3
 12018  1E4E  0868               	movf	_scaleiA10kPot$2843^(0+384),w
 12019  1E4F  0021               	movlb	1	; select bank1
 12020  1E50  00B1               	movwf	___ftmul@f2^(0+128)
 12021  1E51  0023               	movlb	3	; select bank3
 12022  1E52  0869               	movf	(_scaleiA10kPot$2843+1)^(0+384),w
 12023  1E53  0021               	movlb	1	; select bank1
 12024  1E54  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12025  1E55  0023               	movlb	3	; select bank3
 12026  1E56  086A               	movf	(_scaleiA10kPot$2843+2)^(0+384),w
 12027  1E57  0021               	movlb	1	; select bank1
 12028  1E58  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12029  1E59  319E  267B  319D   	fcall	___ftmul
 12030  1E5C  0021               	movlb	1	; select bank1
 12031  1E5D  082E               	movf	?___ftmul^(0+128),w
 12032  1E5E  0023               	movlb	3	; select bank3
 12033  1E5F  00E2               	movwf	scaleiA10kPot@pwm^(0+384)
 12034  1E60  0021               	movlb	1	; select bank1
 12035  1E61  082F               	movf	(?___ftmul+1)^(0+128),w
 12036  1E62  0023               	movlb	3	; select bank3
 12037  1E63  00E3               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12038  1E64  0021               	movlb	1	; select bank1
 12039  1E65  0830               	movf	(?___ftmul+2)^(0+128),w
 12040  1E66  0023               	movlb	3	; select bank3
 12041  1E67  00E4               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12042                           
 12043                           ;user.c: 219: return (int)(pwm);
 12044  1E68  0862               	movf	scaleiA10kPot@pwm^(0+384),w
 12045  1E69  0022               	movlb	2	; select bank2
 12046  1E6A  00A0               	movwf	___fttol@f1^(0+256)
 12047  1E6B  0023               	movlb	3	; select bank3
 12048  1E6C  0863               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12049  1E6D  0022               	movlb	2	; select bank2
 12050  1E6E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12051  1E6F  0023               	movlb	3	; select bank3
 12052  1E70  0864               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12053  1E71  0022               	movlb	2	; select bank2
 12054  1E72  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12055  1E73  3199  21BA         	fcall	___fttol
 12056  1E75  0022               	movlb	2	; select bank2
 12057  1E76  0821               	movf	(?___fttol^(0+256)+1),w
 12058  1E77  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12059  1E78  0820               	movf	?___fttol^(0+256),w
 12060  1E79  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12061  1E7A  0008               	return
 12062  1E7B                     __end_of_scaleiA10kPot:	
 12063                           
 12064                           	psect	text26
 12065  1B58                     __ptext26:	
 12066 ;; *************** function _scaleA10kPot *****************
 12067 ;; Defined at:
 12068 ;;		line 202 in file "user.c"
 12069 ;; Parameters:    Size  Location     Type
 12070 ;;  input           3   71[BANK2 ] int 
 12071 ;; Auto vars:     Size  Location     Type
 12072 ;;  pwm             3    0[BANK3 ] float 
 12073 ;; Return value:  Size  Location     Type
 12074 ;;                  2   71[BANK2 ] int 
 12075 ;; Registers used:
 12076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12077 ;; Tracked objects:
 12078 ;;		On entry : 0/0
 12079 ;;		On exit  : 0/0
 12080 ;;		Unchanged: 0/0
 12081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12082 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12083 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12085 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12086 ;;Total ram usage:       12 bytes
 12087 ;; Hardware stack levels used:    1
 12088 ;; Hardware stack levels required when called:    8
 12089 ;; This function calls:
 12090 ;;		___ftdiv
 12091 ;;		___ftmul
 12092 ;;		___fttol
 12093 ;;		_pow
 12094 ;; This function is called by:
 12095 ;;		_main
 12096 ;; This function uses a non-reentrant model
 12097 ;;
 12098                           
 12099                           
 12100                           ;psect for function _scaleA10kPot
 12101  1B58                     _scaleA10kPot:	
 12102                           
 12103                           ;user.c: 204: if (input == 0.0) {return 255;}
 12104                           
 12105                           ;incstack = 0
 12106                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12107  1B58  0022               	movlb	2	; select bank2
 12108  1B59  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12109  1B5A  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12110  1B5B  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12111  1B5C  1D03               	skipz
 12112  1B5D  2B63               	goto	l9096
 12113  1B5E  30FF               	movlw	255
 12114  1B5F  00E7               	movwf	?_scaleA10kPot^(0+256)
 12115  1B60  3000               	movlw	0
 12116  1B61  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12117  1B62  0008               	return
 12118  1B63                     l9096:	
 12119                           
 12120                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12121  1B63  30C0               	movlw	192
 12122  1B64  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12123  1B65  307F               	movlw	127
 12124  1B66  1903               	skipnz
 12125  1B67  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12126  1B68  3044               	movlw	68
 12127  1B69  1903               	skipnz
 12128  1B6A  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12129  1B6B  1D03               	btfss	3,2
 12130  1B6C  2B70               	goto	l9102
 12131  1B6D  01E7               	clrf	?_scaleA10kPot^(0+256)
 12132  1B6E  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12133  1B6F  0008               	return
 12134  1B70                     l9102:	
 12135                           
 12136                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12137  1B70  30C0               	movlw	192
 12138  1B71  0021               	movlb	1	; select bank1
 12139  1B72  00CE               	movwf	___ftdiv@f2^(0+128)
 12140  1B73  307F               	movlw	127
 12141  1B74  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12142  1B75  3044               	movlw	68
 12143  1B76  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12144  1B77  0022               	movlb	2	; select bank2
 12145  1B78  0867               	movf	scaleA10kPot@input^(0+256),w
 12146  1B79  0021               	movlb	1	; select bank1
 12147  1B7A  00D1               	movwf	___ftdiv@f1^(0+128)
 12148  1B7B  0022               	movlb	2	; select bank2
 12149  1B7C  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12150  1B7D  0021               	movlb	1	; select bank1
 12151  1B7E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12152  1B7F  0022               	movlb	2	; select bank2
 12153  1B80  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12154  1B81  0021               	movlb	1	; select bank1
 12155  1B82  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12156  1B83  319D  2527  319B   	fcall	___ftdiv
 12157  1B86  0021               	movlb	1	; select bank1
 12158  1B87  084E               	movf	?___ftdiv^(0+128),w
 12159  1B88  0023               	movlb	3	; select bank3
 12160  1B89  00E5               	movwf	_scaleA10kPot$2840^(0+384)
 12161  1B8A  0021               	movlb	1	; select bank1
 12162  1B8B  084F               	movf	(?___ftdiv+1)^(0+128),w
 12163  1B8C  0023               	movlb	3	; select bank3
 12164  1B8D  00E6               	movwf	(_scaleA10kPot$2840+1)^(0+384)
 12165  1B8E  0021               	movlb	1	; select bank1
 12166  1B8F  0850               	movf	(?___ftdiv+2)^(0+128),w
 12167  1B90  0023               	movlb	3	; select bank3
 12168  1B91  00E7               	movwf	(_scaleA10kPot$2840+2)^(0+384)
 12169                           
 12170                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12171  1B92  306A               	movlw	106
 12172  1B93  0022               	movlb	2	; select bank2
 12173  1B94  00D8               	movwf	pow@y^(0+256)
 12174  1B95  309C               	movlw	156
 12175  1B96  00D9               	movwf	(pow@y+1)^(0+256)
 12176  1B97  30BF               	movlw	191
 12177  1B98  00DA               	movwf	(pow@y+2)^(0+256)
 12178  1B99  0023               	movlb	3	; select bank3
 12179  1B9A  0865               	movf	_scaleA10kPot$2840^(0+384),w
 12180  1B9B  0022               	movlb	2	; select bank2
 12181  1B9C  00D5               	movwf	pow@x^(0+256)
 12182  1B9D  0023               	movlb	3	; select bank3
 12183  1B9E  0866               	movf	(_scaleA10kPot$2840+1)^(0+384),w
 12184  1B9F  0022               	movlb	2	; select bank2
 12185  1BA0  00D6               	movwf	(pow@x+1)^(0+256)
 12186  1BA1  0023               	movlb	3	; select bank3
 12187  1BA2  0867               	movf	(_scaleA10kPot$2840+2)^(0+384),w
 12188  1BA3  0022               	movlb	2	; select bank2
 12189  1BA4  00D7               	movwf	(pow@x+2)^(0+256)
 12190  1BA5  3191  211C  319B   	fcall	_pow
 12191  1BA8  0022               	movlb	2	; select bank2
 12192  1BA9  0855               	movf	?_pow^(0+256),w
 12193  1BAA  0023               	movlb	3	; select bank3
 12194  1BAB  00E8               	movwf	_scaleA10kPot$2841^(0+384)
 12195  1BAC  0022               	movlb	2	; select bank2
 12196  1BAD  0856               	movf	(?_pow+1)^(0+256),w
 12197  1BAE  0023               	movlb	3	; select bank3
 12198  1BAF  00E9               	movwf	(_scaleA10kPot$2841+1)^(0+384)
 12199  1BB0  0022               	movlb	2	; select bank2
 12200  1BB1  0857               	movf	(?_pow+2)^(0+256),w
 12201  1BB2  0023               	movlb	3	; select bank3
 12202  1BB3  00EA               	movwf	(_scaleA10kPot$2841+2)^(0+384)
 12203                           
 12204                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12205  1BB4  30E3               	movlw	227
 12206  1BB5  0021               	movlb	1	; select bank1
 12207  1BB6  00AE               	movwf	___ftmul@f1^(0+128)
 12208  1BB7  300B               	movlw	11
 12209  1BB8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12210  1BB9  3041               	movlw	65
 12211  1BBA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12212  1BBB  0023               	movlb	3	; select bank3
 12213  1BBC  0868               	movf	_scaleA10kPot$2841^(0+384),w
 12214  1BBD  0021               	movlb	1	; select bank1
 12215  1BBE  00B1               	movwf	___ftmul@f2^(0+128)
 12216  1BBF  0023               	movlb	3	; select bank3
 12217  1BC0  0869               	movf	(_scaleA10kPot$2841+1)^(0+384),w
 12218  1BC1  0021               	movlb	1	; select bank1
 12219  1BC2  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12220  1BC3  0023               	movlb	3	; select bank3
 12221  1BC4  086A               	movf	(_scaleA10kPot$2841+2)^(0+384),w
 12222  1BC5  0021               	movlb	1	; select bank1
 12223  1BC6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12224  1BC7  319E  267B  319B   	fcall	___ftmul
 12225  1BCA  0021               	movlb	1	; select bank1
 12226  1BCB  082E               	movf	?___ftmul^(0+128),w
 12227  1BCC  0023               	movlb	3	; select bank3
 12228  1BCD  00E2               	movwf	scaleA10kPot@pwm^(0+384)
 12229  1BCE  0021               	movlb	1	; select bank1
 12230  1BCF  082F               	movf	(?___ftmul+1)^(0+128),w
 12231  1BD0  0023               	movlb	3	; select bank3
 12232  1BD1  00E3               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12233  1BD2  0021               	movlb	1	; select bank1
 12234  1BD3  0830               	movf	(?___ftmul+2)^(0+128),w
 12235  1BD4  0023               	movlb	3	; select bank3
 12236  1BD5  00E4               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12237                           
 12238                           ;user.c: 207: return (int)(pwm);
 12239  1BD6  0862               	movf	scaleA10kPot@pwm^(0+384),w
 12240  1BD7  0022               	movlb	2	; select bank2
 12241  1BD8  00A0               	movwf	___fttol@f1^(0+256)
 12242  1BD9  0023               	movlb	3	; select bank3
 12243  1BDA  0863               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12244  1BDB  0022               	movlb	2	; select bank2
 12245  1BDC  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12246  1BDD  0023               	movlb	3	; select bank3
 12247  1BDE  0864               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12248  1BDF  0022               	movlb	2	; select bank2
 12249  1BE0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12250  1BE1  3199  21BA         	fcall	___fttol
 12251  1BE3  0022               	movlb	2	; select bank2
 12252  1BE4  0821               	movf	(?___fttol^(0+256)+1),w
 12253  1BE5  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12254  1BE6  0820               	movf	?___fttol^(0+256),w
 12255  1BE7  00E7               	movwf	?_scaleA10kPot^(0+256)
 12256  1BE8  0008               	return
 12257  1BE9                     __end_of_scaleA10kPot:	
 12258                           
 12259                           	psect	text27
 12260  1935                     __ptext27:	
 12261 ;; *************** function _scaleA100kPot *****************
 12262 ;; Defined at:
 12263 ;;		line 188 in file "user.c"
 12264 ;; Parameters:    Size  Location     Type
 12265 ;;  input           3   71[BANK2 ] int 
 12266 ;; Auto vars:     Size  Location     Type
 12267 ;;  pwm             3    0[BANK3 ] float 
 12268 ;; Return value:  Size  Location     Type
 12269 ;;                  2   71[BANK2 ] int 
 12270 ;; Registers used:
 12271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12272 ;; Tracked objects:
 12273 ;;		On entry : 0/0
 12274 ;;		On exit  : 0/0
 12275 ;;		Unchanged: 0/0
 12276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12277 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12278 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12280 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12281 ;;Total ram usage:       12 bytes
 12282 ;; Hardware stack levels used:    1
 12283 ;; Hardware stack levels required when called:    8
 12284 ;; This function calls:
 12285 ;;		___ftdiv
 12286 ;;		___ftmul
 12287 ;;		___fttol
 12288 ;;		_pow
 12289 ;; This function is called by:
 12290 ;;		_main
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           
 12295                           ;psect for function _scaleA100kPot
 12296  1935                     _scaleA100kPot:	
 12297                           
 12298                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12299                           
 12300                           ;incstack = 0
 12301                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12302  1935  0022               	movlb	2	; select bank2
 12303  1936  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12304  1937  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12305  1938  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12306  1939  1D03               	skipz
 12307  193A  2941               	goto	l9138
 12308  193B  3000               	movlw	0
 12309  193C  00E7               	movwf	scaleA100kPot@input^(0+256)
 12310  193D  3080               	movlw	128
 12311  193E  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12312  193F  303F               	movlw	63
 12313  1940  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12314  1941                     l9138:	
 12315                           
 12316                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12317  1941  30C0               	movlw	192
 12318  1942  0021               	movlb	1	; select bank1
 12319  1943  00CE               	movwf	___ftdiv@f2^(0+128)
 12320  1944  307F               	movlw	127
 12321  1945  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12322  1946  3044               	movlw	68
 12323  1947  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12324  1948  0022               	movlb	2	; select bank2
 12325  1949  0867               	movf	scaleA100kPot@input^(0+256),w
 12326  194A  0021               	movlb	1	; select bank1
 12327  194B  00D1               	movwf	___ftdiv@f1^(0+128)
 12328  194C  0022               	movlb	2	; select bank2
 12329  194D  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12330  194E  0021               	movlb	1	; select bank1
 12331  194F  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12332  1950  0022               	movlb	2	; select bank2
 12333  1951  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12334  1952  0021               	movlb	1	; select bank1
 12335  1953  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12336  1954  319D  2527  3199   	fcall	___ftdiv
 12337  1957  0021               	movlb	1	; select bank1
 12338  1958  084E               	movf	?___ftdiv^(0+128),w
 12339  1959  0023               	movlb	3	; select bank3
 12340  195A  00E5               	movwf	_scaleA100kPot$2836^(0+384)
 12341  195B  0021               	movlb	1	; select bank1
 12342  195C  084F               	movf	(?___ftdiv+1)^(0+128),w
 12343  195D  0023               	movlb	3	; select bank3
 12344  195E  00E6               	movwf	(_scaleA100kPot$2836+1)^(0+384)
 12345  195F  0021               	movlb	1	; select bank1
 12346  1960  0850               	movf	(?___ftdiv+2)^(0+128),w
 12347  1961  0023               	movlb	3	; select bank3
 12348  1962  00E7               	movwf	(_scaleA100kPot$2836+2)^(0+384)
 12349                           
 12350                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12351  1963  3056               	movlw	86
 12352  1964  0022               	movlb	2	; select bank2
 12353  1965  00D8               	movwf	pow@y^(0+256)
 12354  1966  308E               	movlw	142
 12355  1967  00D9               	movwf	(pow@y+1)^(0+256)
 12356  1968  30BF               	movlw	191
 12357  1969  00DA               	movwf	(pow@y+2)^(0+256)
 12358  196A  0023               	movlb	3	; select bank3
 12359  196B  0865               	movf	_scaleA100kPot$2836^(0+384),w
 12360  196C  0022               	movlb	2	; select bank2
 12361  196D  00D5               	movwf	pow@x^(0+256)
 12362  196E  0023               	movlb	3	; select bank3
 12363  196F  0866               	movf	(_scaleA100kPot$2836+1)^(0+384),w
 12364  1970  0022               	movlb	2	; select bank2
 12365  1971  00D6               	movwf	(pow@x+1)^(0+256)
 12366  1972  0023               	movlb	3	; select bank3
 12367  1973  0867               	movf	(_scaleA100kPot$2836+2)^(0+384),w
 12368  1974  0022               	movlb	2	; select bank2
 12369  1975  00D7               	movwf	(pow@x+2)^(0+256)
 12370  1976  3191  211C  3199   	fcall	_pow
 12371  1979  0022               	movlb	2	; select bank2
 12372  197A  0855               	movf	?_pow^(0+256),w
 12373  197B  0023               	movlb	3	; select bank3
 12374  197C  00E8               	movwf	_scaleA100kPot$2837^(0+384)
 12375  197D  0022               	movlb	2	; select bank2
 12376  197E  0856               	movf	(?_pow+1)^(0+256),w
 12377  197F  0023               	movlb	3	; select bank3
 12378  1980  00E9               	movwf	(_scaleA100kPot$2837+1)^(0+384)
 12379  1981  0022               	movlb	2	; select bank2
 12380  1982  0857               	movf	(?_pow+2)^(0+256),w
 12381  1983  0023               	movlb	3	; select bank3
 12382  1984  00EA               	movwf	(_scaleA100kPot$2837+2)^(0+384)
 12383                           
 12384                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12385  1985  309F               	movlw	159
 12386  1986  0021               	movlb	1	; select bank1
 12387  1987  00AE               	movwf	___ftmul@f1^(0+128)
 12388  1988  3068               	movlw	104
 12389  1989  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12390  198A  3040               	movlw	64
 12391  198B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12392  198C  0023               	movlb	3	; select bank3
 12393  198D  0868               	movf	_scaleA100kPot$2837^(0+384),w
 12394  198E  0021               	movlb	1	; select bank1
 12395  198F  00B1               	movwf	___ftmul@f2^(0+128)
 12396  1990  0023               	movlb	3	; select bank3
 12397  1991  0869               	movf	(_scaleA100kPot$2837+1)^(0+384),w
 12398  1992  0021               	movlb	1	; select bank1
 12399  1993  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12400  1994  0023               	movlb	3	; select bank3
 12401  1995  086A               	movf	(_scaleA100kPot$2837+2)^(0+384),w
 12402  1996  0021               	movlb	1	; select bank1
 12403  1997  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12404  1998  319E  267B  3199   	fcall	___ftmul
 12405  199B  0021               	movlb	1	; select bank1
 12406  199C  082E               	movf	?___ftmul^(0+128),w
 12407  199D  0023               	movlb	3	; select bank3
 12408  199E  00E2               	movwf	scaleA100kPot@pwm^(0+384)
 12409  199F  0021               	movlb	1	; select bank1
 12410  19A0  082F               	movf	(?___ftmul+1)^(0+128),w
 12411  19A1  0023               	movlb	3	; select bank3
 12412  19A2  00E3               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12413  19A3  0021               	movlb	1	; select bank1
 12414  19A4  0830               	movf	(?___ftmul+2)^(0+128),w
 12415  19A5  0023               	movlb	3	; select bank3
 12416  19A6  00E4               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12417                           
 12418                           ;user.c: 192: return (int)(pwm);
 12419  19A7  0862               	movf	scaleA100kPot@pwm^(0+384),w
 12420  19A8  0022               	movlb	2	; select bank2
 12421  19A9  00A0               	movwf	___fttol@f1^(0+256)
 12422  19AA  0023               	movlb	3	; select bank3
 12423  19AB  0863               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12424  19AC  0022               	movlb	2	; select bank2
 12425  19AD  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12426  19AE  0023               	movlb	3	; select bank3
 12427  19AF  0864               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12428  19B0  0022               	movlb	2	; select bank2
 12429  19B1  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12430  19B2  3199  21BA         	fcall	___fttol
 12431  19B4  0022               	movlb	2	; select bank2
 12432  19B5  0821               	movf	(?___fttol^(0+256)+1),w
 12433  19B6  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12434  19B7  0820               	movf	?___fttol^(0+256),w
 12435  19B8  00E7               	movwf	?_scaleA100kPot^(0+256)
 12436  19B9  0008               	return
 12437  19BA                     __end_of_scaleA100kPot:	
 12438                           
 12439                           	psect	text28
 12440  111C                     __ptext28:	
 12441 ;; *************** function _pow *****************
 12442 ;; Defined at:
 12443 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;  x               3   53[BANK2 ] int 
 12446 ;;  y               3   56[BANK2 ] int 
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;  yi              4   67[BANK2 ] unsigned long 
 12449 ;;  sign            1   66[BANK2 ] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  3   53[BANK2 ] unsigned char 
 12452 ;; Registers used:
 12453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12459 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12460 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12461 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12462 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12463 ;;Total ram usage:       18 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    7
 12466 ;; This function calls:
 12467 ;;		___ftge
 12468 ;;		___ftmul
 12469 ;;		___ftneg
 12470 ;;		___fttol
 12471 ;;		___lltoft
 12472 ;;		_exp
 12473 ;;		_log
 12474 ;; This function is called by:
 12475 ;;		_scaleA100kPot
 12476 ;;		_scaleA10kPot
 12477 ;;		_scaleiA10kPot
 12478 ;;		_scaleiA100kPot
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           
 12483                           ;psect for function _pow
 12484  111C                     _pow:	
 12485                           
 12486                           ;incstack = 0
 12487                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12488  111C  0022               	movlb	2	; select bank2
 12489  111D  01E2               	clrf	pow@sign^(0+256)
 12490  111E  0857               	movf	(pow@x+2)^(0+256),w
 12491  111F  0456               	iorwf	(pow@x+1)^(0+256),w
 12492  1120  0455               	iorwf	pow@x^(0+256),w
 12493  1121  1D03               	skipz
 12494  1122  2948               	goto	l8362
 12495  1123  3000               	movlw	0
 12496  1124  0021               	movlb	1	; select bank1
 12497  1125  00A0               	movwf	___ftge@ff1^(0+128)
 12498  1126  3000               	movlw	0
 12499  1127  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12500  1128  3000               	movlw	0
 12501  1129  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12502  112A  0022               	movlb	2	; select bank2
 12503  112B  0858               	movf	pow@y^(0+256),w
 12504  112C  0021               	movlb	1	; select bank1
 12505  112D  00A3               	movwf	___ftge@ff2^(0+128)
 12506  112E  0022               	movlb	2	; select bank2
 12507  112F  0859               	movf	(pow@y+1)^(0+256),w
 12508  1130  0021               	movlb	1	; select bank1
 12509  1131  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12510  1132  0022               	movlb	2	; select bank2
 12511  1133  085A               	movf	(pow@y+2)^(0+256),w
 12512  1134  0021               	movlb	1	; select bank1
 12513  1135  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12514  1136  31A1  212A  3191   	fcall	___ftge
 12515  1139  1C03               	btfss	3,0
 12516  113A  2940               	goto	l2305
 12517  113B  3021               	movlw	33
 12518  113C  0024               	movlb	4	; select bank4
 12519  113D  00CD               	movwf	_errno^(0+512)
 12520  113E  3000               	movlw	0
 12521  113F  00CE               	movwf	(_errno^(0+512)+1)
 12522  1140                     l2305:	
 12523  1140  3000               	movlw	0
 12524  1141  0022               	movlb	2	; select bank2
 12525  1142  00D5               	movwf	?_pow^(0+256)
 12526  1143  3000               	movlw	0
 12527  1144  00D6               	movwf	(?_pow+1)^(0+256)
 12528  1145  3000               	movlw	0
 12529  1146  00D7               	movwf	(?_pow+2)^(0+256)
 12530  1147  0008               	return
 12531  1148                     l8362:	
 12532  1148  085A               	movf	(pow@y+2)^(0+256),w
 12533  1149  0459               	iorwf	(pow@y+1)^(0+256),w
 12534  114A  0458               	iorwf	pow@y^(0+256),w
 12535  114B  1D03               	skipz
 12536  114C  2954               	goto	l8368
 12537  114D  3000               	movlw	0
 12538  114E  00D5               	movwf	?_pow^(0+256)
 12539  114F  3080               	movlw	128
 12540  1150  00D6               	movwf	(?_pow+1)^(0+256)
 12541  1151  303F               	movlw	63
 12542  1152  00D7               	movwf	(?_pow+2)^(0+256)
 12543  1153  0008               	return
 12544  1154                     l8368:	
 12545  1154  0855               	movf	pow@x^(0+256),w
 12546  1155  0021               	movlb	1	; select bank1
 12547  1156  00A0               	movwf	___ftge@ff1^(0+128)
 12548  1157  0022               	movlb	2	; select bank2
 12549  1158  0856               	movf	(pow@x+1)^(0+256),w
 12550  1159  0021               	movlb	1	; select bank1
 12551  115A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12552  115B  0022               	movlb	2	; select bank2
 12553  115C  0857               	movf	(pow@x+2)^(0+256),w
 12554  115D  0021               	movlb	1	; select bank1
 12555  115E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12556  115F  3000               	movlw	0
 12557  1160  00A3               	movwf	___ftge@ff2^(0+128)
 12558  1161  3000               	movlw	0
 12559  1162  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12560  1163  3000               	movlw	0
 12561  1164  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12562  1165  31A1  212A  3191   	fcall	___ftge
 12563  1168  1803               	btfsc	3,0
 12564  1169  29CE               	goto	l8380
 12565  116A  0022               	movlb	2	; select bank2
 12566  116B  0858               	movf	pow@y^(0+256),w
 12567  116C  00A0               	movwf	___fttol@f1^(0+256)
 12568  116D  0859               	movf	(pow@y+1)^(0+256),w
 12569  116E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12570  116F  085A               	movf	(pow@y+2)^(0+256),w
 12571  1170  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12572  1171  3199  21BA  3191   	fcall	___fttol
 12573  1174  0022               	movlb	2	; select bank2
 12574  1175  0823               	movf	(?___fttol+3)^(0+256),w
 12575  1176  00E6               	movwf	(pow@yi+3)^(0+256)
 12576  1177  0822               	movf	(?___fttol+2)^(0+256),w
 12577  1178  00E5               	movwf	(pow@yi+2)^(0+256)
 12578  1179  0821               	movf	(?___fttol+1)^(0+256),w
 12579  117A  00E4               	movwf	(pow@yi+1)^(0+256)
 12580  117B  0820               	movf	?___fttol^(0+256),w
 12581  117C  00E3               	movwf	pow@yi^(0+256)
 12582  117D  0866               	movf	(pow@yi+3)^(0+256),w
 12583  117E  0021               	movlb	1	; select bank1
 12584  117F  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12585  1180  0022               	movlb	2	; select bank2
 12586  1181  0865               	movf	(pow@yi+2)^(0+256),w
 12587  1182  0021               	movlb	1	; select bank1
 12588  1183  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12589  1184  0022               	movlb	2	; select bank2
 12590  1185  0864               	movf	(pow@yi+1)^(0+256),w
 12591  1186  0021               	movlb	1	; select bank1
 12592  1187  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12593  1188  0022               	movlb	2	; select bank2
 12594  1189  0863               	movf	pow@yi^(0+256),w
 12595  118A  0021               	movlb	1	; select bank1
 12596  118B  00A8               	movwf	___lltoft@c^(0+128)
 12597  118C  31AF  271B  3191   	fcall	___lltoft
 12598  118F  0022               	movlb	2	; select bank2
 12599  1190  085A               	movf	(pow@y+2)^(0+256),w
 12600  1191  0021               	movlb	1	; select bank1
 12601  1192  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12602  1193  1D03               	skipz
 12603  1194  299F               	goto	u8845
 12604  1195  0022               	movlb	2	; select bank2
 12605  1196  0859               	movf	(pow@y+1)^(0+256),w
 12606  1197  0021               	movlb	1	; select bank1
 12607  1198  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12608  1199  1D03               	skipz
 12609  119A  299F               	goto	u8845
 12610  119B  0022               	movlb	2	; select bank2
 12611  119C  0858               	movf	pow@y^(0+256),w
 12612  119D  0021               	movlb	1	; select bank1
 12613  119E  0628               	xorwf	?___lltoft^(0+128),w
 12614  119F                     u8845:	
 12615  119F  1903               	skipnz
 12616  11A0  29AE               	goto	l8376
 12617  11A1  3021               	movlw	33
 12618  11A2  0024               	movlb	4	; select bank4
 12619  11A3  00CD               	movwf	_errno^(0+512)
 12620  11A4  3000               	movlw	0
 12621  11A5  00CE               	movwf	(_errno^(0+512)+1)
 12622  11A6  3000               	movlw	0
 12623  11A7  0022               	movlb	2	; select bank2
 12624  11A8  00D5               	movwf	?_pow^(0+256)
 12625  11A9  3000               	movlw	0
 12626  11AA  00D6               	movwf	(?_pow+1)^(0+256)
 12627  11AB  3000               	movlw	0
 12628  11AC  00D7               	movwf	(?_pow+2)^(0+256)
 12629  11AD  0008               	return
 12630  11AE                     l8376:	
 12631  11AE  0022               	movlb	2	; select bank2
 12632  11AF  0863               	movf	pow@yi^(0+256),w
 12633  11B0  3901               	andlw	1
 12634  11B1  00DB               	movwf	??_pow^(0+256)
 12635  11B2  085B               	movf	??_pow^(0+256),w
 12636  11B3  00E2               	movwf	pow@sign^(0+256)
 12637  11B4  0855               	movf	pow@x^(0+256),w
 12638  11B5  0021               	movlb	1	; select bank1
 12639  11B6  00BE               	movwf	___ftneg@f1^(0+128)
 12640  11B7  0022               	movlb	2	; select bank2
 12641  11B8  0856               	movf	(pow@x+1)^(0+256),w
 12642  11B9  0021               	movlb	1	; select bank1
 12643  11BA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12644  11BB  0022               	movlb	2	; select bank2
 12645  11BC  0857               	movf	(pow@x+2)^(0+256),w
 12646  11BD  0021               	movlb	1	; select bank1
 12647  11BE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12648  11BF  31AD  258A  3191   	fcall	___ftneg
 12649  11C2  0021               	movlb	1	; select bank1
 12650  11C3  083E               	movf	?___ftneg^(0+128),w
 12651  11C4  0022               	movlb	2	; select bank2
 12652  11C5  00D5               	movwf	pow@x^(0+256)
 12653  11C6  0021               	movlb	1	; select bank1
 12654  11C7  083F               	movf	(?___ftneg+1)^(0+128),w
 12655  11C8  0022               	movlb	2	; select bank2
 12656  11C9  00D6               	movwf	(pow@x+1)^(0+256)
 12657  11CA  0021               	movlb	1	; select bank1
 12658  11CB  0840               	movf	(?___ftneg+2)^(0+128),w
 12659  11CC  0022               	movlb	2	; select bank2
 12660  11CD  00D7               	movwf	(pow@x+2)^(0+256)
 12661  11CE                     l8380:	
 12662  11CE  0022               	movlb	2	; select bank2
 12663  11CF  0855               	movf	pow@x^(0+256),w
 12664  11D0  00BE               	movwf	log@x^(0+256)
 12665  11D1  0856               	movf	(pow@x+1)^(0+256),w
 12666  11D2  00BF               	movwf	(log@x+1)^(0+256)
 12667  11D3  0857               	movf	(pow@x+2)^(0+256),w
 12668  11D4  00C0               	movwf	(log@x+2)^(0+256)
 12669  11D5  319F  272F  3191   	fcall	_log
 12670  11D8  0022               	movlb	2	; select bank2
 12671  11D9  083E               	movf	?_log^(0+256),w
 12672  11DA  00DC               	movwf	_pow$2849^(0+256)
 12673  11DB  083F               	movf	(?_log+1)^(0+256),w
 12674  11DC  00DD               	movwf	(_pow$2849+1)^(0+256)
 12675  11DD  0840               	movf	(?_log+2)^(0+256),w
 12676  11DE  00DE               	movwf	(_pow$2849+2)^(0+256)
 12677  11DF  0858               	movf	pow@y^(0+256),w
 12678  11E0  0021               	movlb	1	; select bank1
 12679  11E1  00AE               	movwf	___ftmul@f1^(0+128)
 12680  11E2  0022               	movlb	2	; select bank2
 12681  11E3  0859               	movf	(pow@y+1)^(0+256),w
 12682  11E4  0021               	movlb	1	; select bank1
 12683  11E5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12684  11E6  0022               	movlb	2	; select bank2
 12685  11E7  085A               	movf	(pow@y+2)^(0+256),w
 12686  11E8  0021               	movlb	1	; select bank1
 12687  11E9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12688  11EA  0022               	movlb	2	; select bank2
 12689  11EB  085C               	movf	_pow$2849^(0+256),w
 12690  11EC  0021               	movlb	1	; select bank1
 12691  11ED  00B1               	movwf	___ftmul@f2^(0+128)
 12692  11EE  0022               	movlb	2	; select bank2
 12693  11EF  085D               	movf	(_pow$2849+1)^(0+256),w
 12694  11F0  0021               	movlb	1	; select bank1
 12695  11F1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12696  11F2  0022               	movlb	2	; select bank2
 12697  11F3  085E               	movf	(_pow$2849+2)^(0+256),w
 12698  11F4  0021               	movlb	1	; select bank1
 12699  11F5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12700  11F6  319E  267B  3191   	fcall	___ftmul
 12701  11F9  0021               	movlb	1	; select bank1
 12702  11FA  082E               	movf	?___ftmul^(0+128),w
 12703  11FB  0022               	movlb	2	; select bank2
 12704  11FC  00DF               	movwf	_pow$2850^(0+256)
 12705  11FD  0021               	movlb	1	; select bank1
 12706  11FE  082F               	movf	(?___ftmul+1)^(0+128),w
 12707  11FF  0022               	movlb	2	; select bank2
 12708  1200  00E0               	movwf	(_pow$2850+1)^(0+256)
 12709  1201  0021               	movlb	1	; select bank1
 12710  1202  0830               	movf	(?___ftmul+2)^(0+128),w
 12711  1203  0022               	movlb	2	; select bank2
 12712  1204  00E1               	movwf	(_pow$2850+2)^(0+256)
 12713  1205  085F               	movf	_pow$2850^(0+256),w
 12714  1206  00C8               	movwf	exp@x^(0+256)
 12715  1207  0860               	movf	(_pow$2850+1)^(0+256),w
 12716  1208  00C9               	movwf	(exp@x+1)^(0+256)
 12717  1209  0861               	movf	(_pow$2850+2)^(0+256),w
 12718  120A  00CA               	movwf	(exp@x+2)^(0+256)
 12719  120B  3193  2351  3191   	fcall	_exp
 12720  120E  0022               	movlb	2	; select bank2
 12721  120F  0848               	movf	?_exp^(0+256),w
 12722  1210  00D5               	movwf	pow@x^(0+256)
 12723  1211  0849               	movf	(?_exp+1)^(0+256),w
 12724  1212  00D6               	movwf	(pow@x+1)^(0+256)
 12725  1213  084A               	movf	(?_exp+2)^(0+256),w
 12726  1214  00D7               	movwf	(pow@x+2)^(0+256)
 12727  1215  0862               	movf	pow@sign^(0+256),w
 12728  1216  1903               	btfsc	3,2
 12729  1217  0008               	return
 12730  1218  0855               	movf	pow@x^(0+256),w
 12731  1219  0021               	movlb	1	; select bank1
 12732  121A  00BE               	movwf	___ftneg@f1^(0+128)
 12733  121B  0022               	movlb	2	; select bank2
 12734  121C  0856               	movf	(pow@x+1)^(0+256),w
 12735  121D  0021               	movlb	1	; select bank1
 12736  121E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12737  121F  0022               	movlb	2	; select bank2
 12738  1220  0857               	movf	(pow@x+2)^(0+256),w
 12739  1221  0021               	movlb	1	; select bank1
 12740  1222  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12741  1223  31AD  258A         	fcall	___ftneg
 12742  1225  0021               	movlb	1	; select bank1
 12743  1226  083E               	movf	?___ftneg^(0+128),w
 12744  1227  0022               	movlb	2	; select bank2
 12745  1228  00D5               	movwf	?_pow^(0+256)
 12746  1229  0021               	movlb	1	; select bank1
 12747  122A  083F               	movf	(?___ftneg+1)^(0+128),w
 12748  122B  0022               	movlb	2	; select bank2
 12749  122C  00D6               	movwf	(?_pow+1)^(0+256)
 12750  122D  0021               	movlb	1	; select bank1
 12751  122E  0840               	movf	(?___ftneg+2)^(0+128),w
 12752  122F  0022               	movlb	2	; select bank2
 12753  1230  00D7               	movwf	(?_pow+2)^(0+256)
 12754  1231  0008               	return
 12755  1232                     __end_of_pow:	
 12756                           
 12757                           	psect	text29
 12758  1F2F                     __ptext29:	
 12759 ;; *************** function _log *****************
 12760 ;; Defined at:
 12761 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;  x               3   30[BANK2 ] unsigned char 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  exponent        2   34[BANK2 ] int 
 12766 ;; Return value:  Size  Location     Type
 12767 ;;                  3   30[BANK2 ] int 
 12768 ;; Registers used:
 12769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12770 ;; Tracked objects:
 12771 ;;		On entry : 0/0
 12772 ;;		On exit  : 0/0
 12773 ;;		Unchanged: 0/0
 12774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12775 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12776 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12777 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12778 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12779 ;;Total ram usage:        6 bytes
 12780 ;; Hardware stack levels used:    1
 12781 ;; Hardware stack levels required when called:    6
 12782 ;; This function calls:
 12783 ;;		___awtoft
 12784 ;;		___ftadd
 12785 ;;		___ftge
 12786 ;;		___ftmul
 12787 ;;		_eval_poly
 12788 ;;		_frexp
 12789 ;; This function is called by:
 12790 ;;		_pow
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           
 12795                           ;psect for function _log
 12796  1F2F                     _log:	
 12797                           
 12798                           ;incstack = 0
 12799                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12800  1F2F  0022               	movlb	2	; select bank2
 12801  1F30  083E               	movf	log@x^(0+256),w
 12802  1F31  0021               	movlb	1	; select bank1
 12803  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12804  1F33  0022               	movlb	2	; select bank2
 12805  1F34  083F               	movf	(log@x+1)^(0+256),w
 12806  1F35  0021               	movlb	1	; select bank1
 12807  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12808  1F37  0022               	movlb	2	; select bank2
 12809  1F38  0840               	movf	(log@x+2)^(0+256),w
 12810  1F39  0021               	movlb	1	; select bank1
 12811  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12812  1F3B  3000               	movlw	0
 12813  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12814  1F3D  3000               	movlw	0
 12815  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12816  1F3F  3000               	movlw	0
 12817  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12818  1F41  31A1  212A  319F   	fcall	___ftge
 12819  1F44  1803               	btfsc	3,0
 12820  1F45  2F53               	goto	l8216
 12821  1F46  3021               	movlw	33
 12822  1F47  0024               	movlb	4	; select bank4
 12823  1F48  00CD               	movwf	_errno^(0+512)
 12824  1F49  3000               	movlw	0
 12825  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12826  1F4B  3000               	movlw	0
 12827  1F4C  0022               	movlb	2	; select bank2
 12828  1F4D  00BE               	movwf	?_log^(0+256)
 12829  1F4E  3000               	movlw	0
 12830  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12831  1F50  3000               	movlw	0
 12832  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12833  1F52  0008               	return
 12834  1F53                     l8216:	
 12835  1F53  0022               	movlb	2	; select bank2
 12836  1F54  0840               	movf	(log@x+2)^(0+256),w
 12837  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12838  1F56  043E               	iorwf	log@x^(0+256),w
 12839  1F57  1D03               	skipz
 12840  1F58  2F66               	goto	l8222
 12841  1F59  3022               	movlw	34
 12842  1F5A  0024               	movlb	4	; select bank4
 12843  1F5B  00CD               	movwf	_errno^(0+512)
 12844  1F5C  3000               	movlw	0
 12845  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12846  1F5E  3000               	movlw	0
 12847  1F5F  0022               	movlb	2	; select bank2
 12848  1F60  00BE               	movwf	?_log^(0+256)
 12849  1F61  3000               	movlw	0
 12850  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12851  1F63  3000               	movlw	0
 12852  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12853  1F65  0008               	return
 12854  1F66                     l8222:	
 12855  1F66  3000               	movlw	0
 12856  1F67  0021               	movlb	1	; select bank1
 12857  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12858  1F69  3080               	movlw	128
 12859  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12860  1F6B  30BF               	movlw	191
 12861  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12862  1F6D  3000               	movlw	0
 12863  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12864  1F6F  3000               	movlw	0
 12865  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12866  1F71  3040               	movlw	64
 12867  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12868  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12869  1F74  0022               	movlb	2	; select bank2
 12870  1F75  00C1               	movwf	??_log^(0+256)
 12871  1F76  0841               	movf	??_log^(0+256),w
 12872  1F77  0021               	movlb	1	; select bank1
 12873  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12874  1F79  0022               	movlb	2	; select bank2
 12875  1F7A  083E               	movf	log@x^(0+256),w
 12876  1F7B  0021               	movlb	1	; select bank1
 12877  1F7C  00A0               	movwf	frexp@value^(0+128)
 12878  1F7D  0022               	movlb	2	; select bank2
 12879  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12880  1F7F  0021               	movlb	1	; select bank1
 12881  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12882  1F81  0022               	movlb	2	; select bank2
 12883  1F82  0840               	movf	(log@x+2)^(0+256),w
 12884  1F83  0021               	movlb	1	; select bank1
 12885  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12886  1F85  31A1  21E1  319F   	fcall	_frexp
 12887  1F88  0021               	movlb	1	; select bank1
 12888  1F89  0820               	movf	?_frexp^(0+128),w
 12889  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12890  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12891  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12892  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12893  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12894  1F8F  319E  267B  319F   	fcall	___ftmul
 12895  1F92  0021               	movlb	1	; select bank1
 12896  1F93  082E               	movf	?___ftmul^(0+128),w
 12897  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12898  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12899  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12900  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12901  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12902  1F99  3190  2026  319F   	fcall	___ftadd
 12903  1F9C  0021               	movlb	1	; select bank1
 12904  1F9D  0841               	movf	?___ftadd^(0+128),w
 12905  1F9E  0022               	movlb	2	; select bank2
 12906  1F9F  00BE               	movwf	log@x^(0+256)
 12907  1FA0  0021               	movlb	1	; select bank1
 12908  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12909  1FA2  0022               	movlb	2	; select bank2
 12910  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12911  1FA4  0021               	movlb	1	; select bank1
 12912  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12913  1FA6  0022               	movlb	2	; select bank2
 12914  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12915  1FA8  30FF               	movlw	255
 12916  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12917  1FAA  30FF               	movlw	255
 12918  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12919  1FAC  083E               	movf	log@x^(0+256),w
 12920  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12921  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12922  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12923  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12924  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12925  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12926  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12927  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12928  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12929  1FB6  3008               	movlw	8
 12930  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12931  1FB8  3000               	movlw	0
 12932  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12933  1FBA  31A6  2697  319F   	fcall	_eval_poly
 12934  1FBD  0022               	movlb	2	; select bank2
 12935  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12936  1FBF  00BE               	movwf	log@x^(0+256)
 12937  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12938  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12939  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12940  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12941  1FC4  083E               	movf	log@x^(0+256),w
 12942  1FC5  0021               	movlb	1	; select bank1
 12943  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12944  1FC7  0022               	movlb	2	; select bank2
 12945  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12946  1FC9  0021               	movlb	1	; select bank1
 12947  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12948  1FCB  0022               	movlb	2	; select bank2
 12949  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12950  1FCD  0021               	movlb	1	; select bank1
 12951  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12952  1FCF  3072               	movlw	114
 12953  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12954  1FD1  3031               	movlw	49
 12955  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12956  1FD3  303F               	movlw	63
 12957  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12958  1FD5  0022               	movlb	2	; select bank2
 12959  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12960  1FD7  0021               	movlb	1	; select bank1
 12961  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12962  1FD9  0022               	movlb	2	; select bank2
 12963  1FDA  0842               	movf	log@exponent^(0+256),w
 12964  1FDB  0021               	movlb	1	; select bank1
 12965  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12966  1FDD  31AE  26D5  319F   	fcall	___awtoft
 12967  1FE0  0021               	movlb	1	; select bank1
 12968  1FE1  0828               	movf	?___awtoft^(0+128),w
 12969  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12970  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12971  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12972  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12973  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12974  1FE7  319E  267B  319F   	fcall	___ftmul
 12975  1FEA  0021               	movlb	1	; select bank1
 12976  1FEB  082E               	movf	?___ftmul^(0+128),w
 12977  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12978  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 12979  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12980  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 12981  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12982  1FF1  3190  2026         	fcall	___ftadd
 12983  1FF3  0021               	movlb	1	; select bank1
 12984  1FF4  0841               	movf	?___ftadd^(0+128),w
 12985  1FF5  0022               	movlb	2	; select bank2
 12986  1FF6  00BE               	movwf	?_log^(0+256)
 12987  1FF7  0021               	movlb	1	; select bank1
 12988  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 12989  1FF9  0022               	movlb	2	; select bank2
 12990  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 12991  1FFB  0021               	movlb	1	; select bank1
 12992  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 12993  1FFD  0022               	movlb	2	; select bank2
 12994  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 12995  1FFF  0008               	return
 12996  2000                     __end_of_log:	
 12997                           
 12998                           	psect	text30
 12999  1351                     __ptext30:	
 13000 ;; *************** function _exp *****************
 13001 ;; Defined at:
 13002 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13003 ;; Parameters:    Size  Location     Type
 13004 ;;  x               3   40[BANK2 ] int 
 13005 ;; Auto vars:     Size  Location     Type
 13006 ;;  exponent        2   50[BANK2 ] int 
 13007 ;;  sign            1   52[BANK2 ] unsigned char 
 13008 ;; Return value:  Size  Location     Type
 13009 ;;                  3   40[BANK2 ] unsigned char 
 13010 ;; Registers used:
 13011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : 0/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13017 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13018 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13019 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13020 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13021 ;;Total ram usage:       13 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    6
 13024 ;; This function calls:
 13025 ;;		___awtoft
 13026 ;;		___ftdiv
 13027 ;;		___ftge
 13028 ;;		___ftmul
 13029 ;;		___ftneg
 13030 ;;		___ftsub
 13031 ;;		___fttol
 13032 ;;		_eval_poly
 13033 ;;		_floor
 13034 ;;		_ldexp
 13035 ;; This function is called by:
 13036 ;;		_pow
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           
 13041                           ;psect for function _exp
 13042  1351                     _exp:	
 13043                           
 13044                           ;incstack = 0
 13045                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13046  1351  0022               	movlb	2	; select bank2
 13047  1352  084A               	movf	(exp@x+2)^(0+256),w
 13048  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 13049  1354  0448               	iorwf	exp@x^(0+256),w
 13050  1355  1D03               	skipz
 13051  1356  2B5E               	goto	l8238
 13052  1357  3000               	movlw	0
 13053  1358  00C8               	movwf	?_exp^(0+256)
 13054  1359  3080               	movlw	128
 13055  135A  00C9               	movwf	(?_exp+1)^(0+256)
 13056  135B  303F               	movlw	63
 13057  135C  00CA               	movwf	(?_exp+2)^(0+256)
 13058  135D  0008               	return
 13059  135E                     l8238:	
 13060  135E  3072               	movlw	114
 13061  135F  0021               	movlb	1	; select bank1
 13062  1360  00A0               	movwf	___ftge@ff1^(0+128)
 13063  1361  3031               	movlw	49
 13064  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13065  1363  3044               	movlw	68
 13066  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13067  1365  0022               	movlb	2	; select bank2
 13068  1366  0848               	movf	exp@x^(0+256),w
 13069  1367  0021               	movlb	1	; select bank1
 13070  1368  00A3               	movwf	___ftge@ff2^(0+128)
 13071  1369  0022               	movlb	2	; select bank2
 13072  136A  0849               	movf	(exp@x+1)^(0+256),w
 13073  136B  0021               	movlb	1	; select bank1
 13074  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13075  136D  0022               	movlb	2	; select bank2
 13076  136E  084A               	movf	(exp@x+2)^(0+256),w
 13077  136F  0021               	movlb	1	; select bank1
 13078  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13079  1371  31A1  212A  3193   	fcall	___ftge
 13080  1374  1803               	btfsc	3,0
 13081  1375  2B83               	goto	l8248
 13082  1376  3022               	movlw	34
 13083  1377  0024               	movlb	4	; select bank4
 13084  1378  00CD               	movwf	_errno^(0+512)
 13085  1379  3000               	movlw	0
 13086  137A  00CE               	movwf	(_errno^(0+512)+1)
 13087  137B  30FF               	movlw	255
 13088  137C  0022               	movlb	2	; select bank2
 13089  137D  00C8               	movwf	?_exp^(0+256)
 13090  137E  307F               	movlw	127
 13091  137F  00C9               	movwf	(?_exp+1)^(0+256)
 13092  1380  307F               	movlw	127
 13093  1381  00CA               	movwf	(?_exp+2)^(0+256)
 13094  1382  0008               	return
 13095  1383                     l8248:	
 13096  1383  0022               	movlb	2	; select bank2
 13097  1384  0848               	movf	exp@x^(0+256),w
 13098  1385  0021               	movlb	1	; select bank1
 13099  1386  00A0               	movwf	___ftge@ff1^(0+128)
 13100  1387  0022               	movlb	2	; select bank2
 13101  1388  0849               	movf	(exp@x+1)^(0+256),w
 13102  1389  0021               	movlb	1	; select bank1
 13103  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13104  138B  0022               	movlb	2	; select bank2
 13105  138C  084A               	movf	(exp@x+2)^(0+256),w
 13106  138D  0021               	movlb	1	; select bank1
 13107  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13108  138F  3049               	movlw	73
 13109  1390  00A3               	movwf	___ftge@ff2^(0+128)
 13110  1391  303A               	movlw	58
 13111  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13112  1393  30C4               	movlw	196
 13113  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13114  1395  31A1  212A  3193   	fcall	___ftge
 13115  1398  1803               	btfsc	3,0
 13116  1399  2BA7               	goto	l8254
 13117  139A  3022               	movlw	34
 13118  139B  0024               	movlb	4	; select bank4
 13119  139C  00CD               	movwf	_errno^(0+512)
 13120  139D  3000               	movlw	0
 13121  139E  00CE               	movwf	(_errno^(0+512)+1)
 13122  139F  3000               	movlw	0
 13123  13A0  0022               	movlb	2	; select bank2
 13124  13A1  00C8               	movwf	?_exp^(0+256)
 13125  13A2  3000               	movlw	0
 13126  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 13127  13A4  3000               	movlw	0
 13128  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 13129  13A6  0008               	return
 13130  13A7                     l8254:	
 13131  13A7  0022               	movlb	2	; select bank2
 13132  13A8  0848               	movf	exp@x^(0+256),w
 13133  13A9  0021               	movlb	1	; select bank1
 13134  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 13135  13AB  0022               	movlb	2	; select bank2
 13136  13AC  0849               	movf	(exp@x+1)^(0+256),w
 13137  13AD  0021               	movlb	1	; select bank1
 13138  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13139  13AF  0022               	movlb	2	; select bank2
 13140  13B0  084A               	movf	(exp@x+2)^(0+256),w
 13141  13B1  0021               	movlb	1	; select bank1
 13142  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13143  13B3  3000               	movlw	0
 13144  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 13145  13B5  3000               	movlw	0
 13146  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13147  13B7  3000               	movlw	0
 13148  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13149  13B9  31A1  212A  3193   	fcall	___ftge
 13150  13BC  1803               	btfsc	3,0
 13151  13BD  2BC0               	goto	u8710
 13152  13BE  3001               	movlw	1
 13153  13BF  2BC1               	goto	u8720
 13154  13C0                     u8710:	
 13155  13C0  3000               	movlw	0
 13156  13C1                     u8720:	
 13157  13C1  0022               	movlb	2	; select bank2
 13158  13C2  00CB               	movwf	??_exp^(0+256)
 13159  13C3  084B               	movf	??_exp^(0+256),w
 13160  13C4  00D4               	movwf	exp@sign^(0+256)
 13161  13C5  0854               	movf	exp@sign^(0+256),w
 13162  13C6  1903               	btfsc	3,2
 13163  13C7  2BE2               	goto	l8260
 13164  13C8  0848               	movf	exp@x^(0+256),w
 13165  13C9  0021               	movlb	1	; select bank1
 13166  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 13167  13CB  0022               	movlb	2	; select bank2
 13168  13CC  0849               	movf	(exp@x+1)^(0+256),w
 13169  13CD  0021               	movlb	1	; select bank1
 13170  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13171  13CF  0022               	movlb	2	; select bank2
 13172  13D0  084A               	movf	(exp@x+2)^(0+256),w
 13173  13D1  0021               	movlb	1	; select bank1
 13174  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13175  13D3  31AD  258A  3193   	fcall	___ftneg
 13176  13D6  0021               	movlb	1	; select bank1
 13177  13D7  083E               	movf	?___ftneg^(0+128),w
 13178  13D8  0022               	movlb	2	; select bank2
 13179  13D9  00C8               	movwf	exp@x^(0+256)
 13180  13DA  0021               	movlb	1	; select bank1
 13181  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 13182  13DC  0022               	movlb	2	; select bank2
 13183  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 13184  13DE  0021               	movlb	1	; select bank1
 13185  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 13186  13E0  0022               	movlb	2	; select bank2
 13187  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 13188  13E2                     l8260:	
 13189  13E2  30AA               	movlw	170
 13190  13E3  0021               	movlb	1	; select bank1
 13191  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 13192  13E5  30B8               	movlw	184
 13193  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13194  13E7  303F               	movlw	63
 13195  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13196  13E9  0022               	movlb	2	; select bank2
 13197  13EA  0848               	movf	exp@x^(0+256),w
 13198  13EB  0021               	movlb	1	; select bank1
 13199  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 13200  13ED  0022               	movlb	2	; select bank2
 13201  13EE  0849               	movf	(exp@x+1)^(0+256),w
 13202  13EF  0021               	movlb	1	; select bank1
 13203  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13204  13F1  0022               	movlb	2	; select bank2
 13205  13F2  084A               	movf	(exp@x+2)^(0+256),w
 13206  13F3  0021               	movlb	1	; select bank1
 13207  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13208  13F5  319E  267B  3193   	fcall	___ftmul
 13209  13F8  0021               	movlb	1	; select bank1
 13210  13F9  082E               	movf	?___ftmul^(0+128),w
 13211  13FA  0022               	movlb	2	; select bank2
 13212  13FB  00C8               	movwf	exp@x^(0+256)
 13213  13FC  0021               	movlb	1	; select bank1
 13214  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 13215  13FE  0022               	movlb	2	; select bank2
 13216  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 13217  1400  0021               	movlb	1	; select bank1
 13218  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 13219  1402  0022               	movlb	2	; select bank2
 13220  1403  00CA               	movwf	(exp@x+2)^(0+256)
 13221  1404  0848               	movf	exp@x^(0+256),w
 13222  1405  00B6               	movwf	floor@x^(0+256)
 13223  1406  0849               	movf	(exp@x+1)^(0+256),w
 13224  1407  00B7               	movwf	(floor@x+1)^(0+256)
 13225  1408  084A               	movf	(exp@x+2)^(0+256),w
 13226  1409  00B8               	movwf	(floor@x+2)^(0+256)
 13227  140A  319C  2480  3193   	fcall	_floor
 13228  140D  0022               	movlb	2	; select bank2
 13229  140E  0836               	movf	?_floor^(0+256),w
 13230  140F  00CC               	movwf	_exp$2852^(0+256)
 13231  1410  0837               	movf	(?_floor+1)^(0+256),w
 13232  1411  00CD               	movwf	(_exp$2852+1)^(0+256)
 13233  1412  0838               	movf	(?_floor+2)^(0+256),w
 13234  1413  00CE               	movwf	(_exp$2852+2)^(0+256)
 13235  1414  084C               	movf	_exp$2852^(0+256),w
 13236  1415  00A0               	movwf	___fttol@f1^(0+256)
 13237  1416  084D               	movf	(_exp$2852+1)^(0+256),w
 13238  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13239  1418  084E               	movf	(_exp$2852+2)^(0+256),w
 13240  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13241  141A  3199  21BA  3193   	fcall	___fttol
 13242  141D  0022               	movlb	2	; select bank2
 13243  141E  0821               	movf	(?___fttol^(0+256)+1),w
 13244  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 13245  1420  0820               	movf	?___fttol^(0+256),w
 13246  1421  00D2               	movwf	exp@exponent^(0+256)
 13247  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 13248  1423  0021               	movlb	1	; select bank1
 13249  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13250  1425  0022               	movlb	2	; select bank2
 13251  1426  0852               	movf	exp@exponent^(0+256),w
 13252  1427  0021               	movlb	1	; select bank1
 13253  1428  00A8               	movwf	___awtoft@c^(0+128)
 13254  1429  31AE  26D5  3193   	fcall	___awtoft
 13255  142C  0021               	movlb	1	; select bank1
 13256  142D  0828               	movf	?___awtoft^(0+128),w
 13257  142E  0022               	movlb	2	; select bank2
 13258  142F  00BF               	movwf	___ftsub@f2^(0+256)
 13259  1430  0021               	movlb	1	; select bank1
 13260  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 13261  1432  0022               	movlb	2	; select bank2
 13262  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 13263  1434  0021               	movlb	1	; select bank1
 13264  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 13265  1436  0022               	movlb	2	; select bank2
 13266  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 13267  1438  0848               	movf	exp@x^(0+256),w
 13268  1439  00C2               	movwf	___ftsub@f1^(0+256)
 13269  143A  0849               	movf	(exp@x+1)^(0+256),w
 13270  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 13271  143C  084A               	movf	(exp@x+2)^(0+256),w
 13272  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 13273  143E  3188  2000  3193   	fcall	___ftsub
 13274  1441  0022               	movlb	2	; select bank2
 13275  1442  083F               	movf	?___ftsub^(0+256),w
 13276  1443  00C8               	movwf	exp@x^(0+256)
 13277  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 13278  1445  00C9               	movwf	(exp@x+1)^(0+256)
 13279  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 13280  1447  00CA               	movwf	(exp@x+2)^(0+256)
 13281  1448  0848               	movf	exp@x^(0+256),w
 13282  1449  00B4               	movwf	eval_poly@x^(0+256)
 13283  144A  0849               	movf	(exp@x+1)^(0+256),w
 13284  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13285  144C  084A               	movf	(exp@x+2)^(0+256),w
 13286  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13287  144E  3000               	movlw	low (exp@coeff| (0+32768))
 13288  144F  00B7               	movwf	eval_poly@d^(0+256)
 13289  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 13290  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13291  1452  3009               	movlw	9
 13292  1453  00B9               	movwf	eval_poly@n^(0+256)
 13293  1454  3000               	movlw	0
 13294  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13295  1456  31A6  2697  3193   	fcall	_eval_poly
 13296  1459  0022               	movlb	2	; select bank2
 13297  145A  0834               	movf	?_eval_poly^(0+256),w
 13298  145B  00BE               	movwf	ldexp@value^(0+256)
 13299  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 13300  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 13301  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 13302  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 13303  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 13304  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13305  1462  0852               	movf	exp@exponent^(0+256),w
 13306  1463  00C1               	movwf	ldexp@newexp^(0+256)
 13307  1464  319B  23E9  3193   	fcall	_ldexp
 13308  1467  0022               	movlb	2	; select bank2
 13309  1468  083E               	movf	?_ldexp^(0+256),w
 13310  1469  00C8               	movwf	exp@x^(0+256)
 13311  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 13312  146B  00C9               	movwf	(exp@x+1)^(0+256)
 13313  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 13314  146D  00CA               	movwf	(exp@x+2)^(0+256)
 13315  146E  0854               	movf	exp@sign^(0+256),w
 13316  146F  1903               	btfsc	3,2
 13317  1470  0008               	return
 13318  1471  30FF               	movlw	255
 13319  1472  00CF               	movwf	_exp$2608^(0+256)
 13320  1473  307F               	movlw	127
 13321  1474  00D0               	movwf	(_exp$2608+1)^(0+256)
 13322  1475  307F               	movlw	127
 13323  1476  00D1               	movwf	(_exp$2608+2)^(0+256)
 13324  1477  084A               	movf	(exp@x+2)^(0+256),w
 13325  1478  0651               	xorwf	(_exp$2608+2)^(0+256),w
 13326  1479  1D03               	skipz
 13327  147A  2C81               	goto	u8755
 13328  147B  0849               	movf	(exp@x+1)^(0+256),w
 13329  147C  0650               	xorwf	(_exp$2608+1)^(0+256),w
 13330  147D  1D03               	skipz
 13331  147E  2C81               	goto	u8755
 13332  147F  0848               	movf	exp@x^(0+256),w
 13333  1480  064F               	xorwf	_exp$2608^(0+256),w
 13334  1481                     u8755:	
 13335  1481  1D03               	skipz
 13336  1482  2C8A               	goto	l8282
 13337  1483  3000               	movlw	0
 13338  1484  00C8               	movwf	?_exp^(0+256)
 13339  1485  3000               	movlw	0
 13340  1486  00C9               	movwf	(?_exp+1)^(0+256)
 13341  1487  3000               	movlw	0
 13342  1488  00CA               	movwf	(?_exp+2)^(0+256)
 13343  1489  0008               	return
 13344  148A                     l8282:	
 13345  148A  0848               	movf	exp@x^(0+256),w
 13346  148B  0021               	movlb	1	; select bank1
 13347  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 13348  148D  0022               	movlb	2	; select bank2
 13349  148E  0849               	movf	(exp@x+1)^(0+256),w
 13350  148F  0021               	movlb	1	; select bank1
 13351  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13352  1491  0022               	movlb	2	; select bank2
 13353  1492  084A               	movf	(exp@x+2)^(0+256),w
 13354  1493  0021               	movlb	1	; select bank1
 13355  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13356  1495  3000               	movlw	0
 13357  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 13358  1497  3080               	movlw	128
 13359  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13360  1499  303F               	movlw	63
 13361  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13362  149B  319D  2527         	fcall	___ftdiv
 13363  149D  0021               	movlb	1	; select bank1
 13364  149E  084E               	movf	?___ftdiv^(0+128),w
 13365  149F  0022               	movlb	2	; select bank2
 13366  14A0  00C8               	movwf	?_exp^(0+256)
 13367  14A1  0021               	movlb	1	; select bank1
 13368  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 13369  14A3  0022               	movlb	2	; select bank2
 13370  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 13371  14A5  0021               	movlb	1	; select bank1
 13372  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 13373  14A7  0022               	movlb	2	; select bank2
 13374  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 13375  14A9  0008               	return
 13376  14AA                     __end_of_exp:	
 13377                           
 13378                           	psect	text31
 13379  1BE9                     __ptext31:	
 13380 ;; *************** function _ldexp *****************
 13381 ;; Defined at:
 13382 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;  value           3   30[BANK2 ] unsigned char 
 13385 ;;  newexp          2   33[BANK2 ] int 
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;		None
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  3   30[BANK2 ] int 
 13390 ;; Registers used:
 13391 ;;		wreg, status,2, status,0, pclath, cstack
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13397 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13398 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13399 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13400 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13401 ;;Total ram usage:       10 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    4
 13404 ;; This function calls:
 13405 ;;		___ftge
 13406 ;;		___ftneg
 13407 ;; This function is called by:
 13408 ;;		_exp
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _ldexp
 13414  1BE9                     _ldexp:	
 13415                           
 13416                           ;incstack = 0
 13417                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13418  1BE9  0022               	movlb	2	; select bank2
 13419  1BEA  0840               	movf	(ldexp@value+2)^(0+256),w
 13420  1BEB  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13421  1BEC  043E               	iorwf	ldexp@value^(0+256),w
 13422  1BED  1D03               	skipz
 13423  1BEE  2BF6               	goto	l8086
 13424  1BEF  3000               	movlw	0
 13425  1BF0  00BE               	movwf	?_ldexp^(0+256)
 13426  1BF1  3000               	movlw	0
 13427  1BF2  00BF               	movwf	(?_ldexp+1)^(0+256)
 13428  1BF3  3000               	movlw	0
 13429  1BF4  00C0               	movwf	(?_ldexp+2)^(0+256)
 13430  1BF5  0008               	return
 13431  1BF6                     l8086:	
 13432  1BF6  0840               	movf	(ldexp@value^(0+256)+2),w
 13433  1BF7  397F               	andlw	127
 13434  1BF8  00C3               	movwf	??_ldexp^(0+256)
 13435  1BF9  01C4               	clrf	(??_ldexp^(0+256)+1)
 13436  1BFA  35C3               	lslf	??_ldexp^(0+256),f
 13437  1BFB  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13438  1BFC  0843               	movf	??_ldexp^(0+256),w
 13439  1BFD  07C1               	addwf	ldexp@newexp^(0+256),f
 13440  1BFE  0844               	movf	(??_ldexp+1)^(0+256),w
 13441  1BFF  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13442  1C00  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13443  1C01  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13444  1C02  3901               	andlw	1
 13445  1C03  00C3               	movwf	??_ldexp^(0+256)
 13446  1C04  01C4               	clrf	(??_ldexp^(0+256)+1)
 13447  1C05  0843               	movf	??_ldexp^(0+256),w
 13448  1C06  07C1               	addwf	ldexp@newexp^(0+256),f
 13449  1C07  0844               	movf	(??_ldexp+1)^(0+256),w
 13450  1C08  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13451  1C09  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13452  1C0A  2C18               	goto	l8096
 13453  1C0B  3022               	movlw	34
 13454  1C0C  0024               	movlb	4	; select bank4
 13455  1C0D  00CD               	movwf	_errno^(0+512)
 13456  1C0E  3000               	movlw	0
 13457  1C0F  00CE               	movwf	(_errno^(0+512)+1)
 13458  1C10  3000               	movlw	0
 13459  1C11  0022               	movlb	2	; select bank2
 13460  1C12  00BE               	movwf	?_ldexp^(0+256)
 13461  1C13  3000               	movlw	0
 13462  1C14  00BF               	movwf	(?_ldexp+1)^(0+256)
 13463  1C15  3000               	movlw	0
 13464  1C16  00C0               	movwf	(?_ldexp+2)^(0+256)
 13465  1C17  0008               	return
 13466  1C18                     l8096:	
 13467  1C18  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13468  1C19  3A80               	xorlw	128
 13469  1C1A  00C3               	movwf	??_ldexp^(0+256)
 13470  1C1B  3081               	movlw	129
 13471  1C1C  0243               	subwf	??_ldexp^(0+256),w
 13472  1C1D  1D03               	skipz
 13473  1C1E  2C21               	goto	u8585
 13474  1C1F  3000               	movlw	0
 13475  1C20  0241               	subwf	ldexp@newexp^(0+256),w
 13476  1C21                     u8585:	
 13477  1C21  1C03               	skipc
 13478  1C22  2C68               	goto	l8120
 13479  1C23  3022               	movlw	34
 13480  1C24  0024               	movlb	4	; select bank4
 13481  1C25  00CD               	movwf	_errno^(0+512)
 13482  1C26  3000               	movlw	0
 13483  1C27  00CE               	movwf	(_errno^(0+512)+1)
 13484  1C28  0022               	movlb	2	; select bank2
 13485  1C29  083E               	movf	ldexp@value^(0+256),w
 13486  1C2A  0021               	movlb	1	; select bank1
 13487  1C2B  00A0               	movwf	___ftge@ff1^(0+128)
 13488  1C2C  0022               	movlb	2	; select bank2
 13489  1C2D  083F               	movf	(ldexp@value+1)^(0+256),w
 13490  1C2E  0021               	movlb	1	; select bank1
 13491  1C2F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13492  1C30  0022               	movlb	2	; select bank2
 13493  1C31  0840               	movf	(ldexp@value+2)^(0+256),w
 13494  1C32  0021               	movlb	1	; select bank1
 13495  1C33  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13496  1C34  3000               	movlw	0
 13497  1C35  00A3               	movwf	___ftge@ff2^(0+128)
 13498  1C36  3000               	movlw	0
 13499  1C37  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13500  1C38  3000               	movlw	0
 13501  1C39  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13502  1C3A  31A1  212A  319B   	fcall	___ftge
 13503  1C3D  1803               	btfsc	3,0
 13504  1C3E  2C60               	goto	l8116
 13505  1C3F  30FF               	movlw	255
 13506  1C40  0022               	movlb	2	; select bank2
 13507  1C41  00C5               	movwf	_ldexp$2640^(0+256)
 13508  1C42  307F               	movlw	127
 13509  1C43  00C6               	movwf	(_ldexp$2640+1)^(0+256)
 13510  1C44  307F               	movlw	127
 13511  1C45  00C7               	movwf	(_ldexp$2640+2)^(0+256)
 13512  1C46  0845               	movf	_ldexp$2640^(0+256),w
 13513  1C47  0021               	movlb	1	; select bank1
 13514  1C48  00BE               	movwf	___ftneg@f1^(0+128)
 13515  1C49  0022               	movlb	2	; select bank2
 13516  1C4A  0846               	movf	(_ldexp$2640+1)^(0+256),w
 13517  1C4B  0021               	movlb	1	; select bank1
 13518  1C4C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13519  1C4D  0022               	movlb	2	; select bank2
 13520  1C4E  0847               	movf	(_ldexp$2640+2)^(0+256),w
 13521  1C4F  0021               	movlb	1	; select bank1
 13522  1C50  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13523  1C51  31AD  258A         	fcall	___ftneg
 13524  1C53  0021               	movlb	1	; select bank1
 13525  1C54  083E               	movf	?___ftneg^(0+128),w
 13526  1C55  0022               	movlb	2	; select bank2
 13527  1C56  00BE               	movwf	?_ldexp^(0+256)
 13528  1C57  0021               	movlb	1	; select bank1
 13529  1C58  083F               	movf	(?___ftneg+1)^(0+128),w
 13530  1C59  0022               	movlb	2	; select bank2
 13531  1C5A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13532  1C5B  0021               	movlb	1	; select bank1
 13533  1C5C  0840               	movf	(?___ftneg+2)^(0+128),w
 13534  1C5D  0022               	movlb	2	; select bank2
 13535  1C5E  00C0               	movwf	(?_ldexp+2)^(0+256)
 13536  1C5F  0008               	return
 13537  1C60                     l8116:	
 13538  1C60  30FF               	movlw	255
 13539  1C61  0022               	movlb	2	; select bank2
 13540  1C62  00BE               	movwf	?_ldexp^(0+256)
 13541  1C63  307F               	movlw	127
 13542  1C64  00BF               	movwf	(?_ldexp+1)^(0+256)
 13543  1C65  307F               	movlw	127
 13544  1C66  00C0               	movwf	(?_ldexp+2)^(0+256)
 13545  1C67  0008               	return
 13546  1C68                     l8120:	
 13547  1C68  0022               	movlb	2	; select bank2
 13548  1C69  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13549  1C6A  00C4               	movwf	(??_ldexp^(0+256)+1)
 13550  1C6B  0841               	movf	ldexp@newexp^(0+256),w
 13551  1C6C  00C3               	movwf	??_ldexp^(0+256)
 13552  1C6D  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13553  1C6E  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13554  1C6F  0CC3               	rrf	??_ldexp^(0+256),f
 13555  1C70  0840               	movf	(ldexp@value^(0+256)+2),w
 13556  1C71  0643               	xorwf	??_ldexp^(0+256),w
 13557  1C72  3980               	andlw	-128
 13558  1C73  0643               	xorwf	??_ldexp^(0+256),w
 13559  1C74  00C0               	movwf	(ldexp@value^(0+256)+2)
 13560  1C75  0841               	movf	ldexp@newexp^(0+256),w
 13561  1C76  3901               	andlw	1
 13562  1C77  00C3               	movwf	??_ldexp^(0+256)
 13563  1C78  0CC3               	rrf	??_ldexp^(0+256),f
 13564  1C79  0CC3               	rrf	??_ldexp^(0+256),f
 13565  1C7A  083F               	movf	(ldexp@value^(0+256)+1),w
 13566  1C7B  0643               	xorwf	??_ldexp^(0+256),w
 13567  1C7C  397F               	andlw	-129
 13568  1C7D  0643               	xorwf	??_ldexp^(0+256),w
 13569  1C7E  00BF               	movwf	(ldexp@value^(0+256)+1)
 13570  1C7F  0008               	return
 13571  1C80                     __end_of_ldexp:	
 13572                           
 13573                           	psect	text32
 13574  2F1B                     __ptext32:	
 13575 ;; *************** function ___lltoft *****************
 13576 ;; Defined at:
 13577 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;  c               4    8[BANK1 ] unsigned long 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  exp             1   13[BANK1 ] unsigned char 
 13582 ;; Return value:  Size  Location     Type
 13583 ;;                  3    8[BANK1 ] float 
 13584 ;; Registers used:
 13585 ;;		wreg, status,2, status,0, pclath, cstack
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13591 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13592 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13593 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13594 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13595 ;;Total ram usage:        6 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    4
 13598 ;; This function calls:
 13599 ;;		___ftpack
 13600 ;; This function is called by:
 13601 ;;		_pow
 13602 ;; This function uses a non-reentrant model
 13603 ;;
 13604                           
 13605                           
 13606                           ;psect for function ___lltoft
 13607  2F1B                     ___lltoft:	
 13608                           
 13609                           ;incstack = 0
 13610                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13611  2F1B  308E               	movlw	142
 13612  2F1C  0021               	movlb	1	; select bank1
 13613  2F1D  00AC               	movwf	??___lltoft^(0+128)
 13614  2F1E  082C               	movf	??___lltoft^(0+128),w
 13615  2F1F  00AD               	movwf	___lltoft@exp^(0+128)
 13616  2F20                     l8204:	
 13617  2F20  30FF               	movlw	255
 13618  2F21  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13619  2F22  1903               	btfsc	3,2
 13620  2F23  2F30               	goto	l8206
 13621  2F24  3001               	movlw	1
 13622  2F25                     u8645:	
 13623  2F25  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13624  2F26  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13625  2F27  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13626  2F28  0CA8               	rrf	___lltoft@c^(0+128),f
 13627  2F29  0B89               	decfsz	9,f
 13628  2F2A  2F25               	goto	u8645
 13629  2F2B  3001               	movlw	1
 13630  2F2C  00AC               	movwf	??___lltoft^(0+128)
 13631  2F2D  082C               	movf	??___lltoft^(0+128),w
 13632  2F2E  07AD               	addwf	___lltoft@exp^(0+128),f
 13633  2F2F  2F20               	goto	l8204
 13634  2F30                     l8206:	
 13635  2F30  0828               	movf	___lltoft@c^(0+128),w
 13636  2F31  00A0               	movwf	___ftpack@arg^(0+128)
 13637  2F32  0829               	movf	(___lltoft@c+1)^(0+128),w
 13638  2F33  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13639  2F34  082A               	movf	(___lltoft@c+2)^(0+128),w
 13640  2F35  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13641  2F36  082D               	movf	___lltoft@exp^(0+128),w
 13642  2F37  00AC               	movwf	??___lltoft^(0+128)
 13643  2F38  082C               	movf	??___lltoft^(0+128),w
 13644  2F39  00A3               	movwf	___ftpack@exp^(0+128)
 13645  2F3A  01A4               	clrf	___ftpack@sign^(0+128)
 13646  2F3B  31A6  2632         	fcall	___ftpack
 13647  2F3D  0021               	movlb	1	; select bank1
 13648  2F3E  0820               	movf	?___ftpack^(0+128),w
 13649  2F3F  00A8               	movwf	?___lltoft^(0+128)
 13650  2F40  0821               	movf	(?___ftpack+1)^(0+128),w
 13651  2F41  00A9               	movwf	(?___lltoft+1)^(0+128)
 13652  2F42  0822               	movf	(?___ftpack+2)^(0+128),w
 13653  2F43  00AA               	movwf	(?___lltoft+2)^(0+128)
 13654  2F44  0008               	return
 13655  2F45                     __end_of___lltoft:	
 13656                           
 13657                           	psect	text33
 13658  23FD                     __ptext33:	
 13659 ;; *************** function _read_top_tactile *****************
 13660 ;; Defined at:
 13661 ;;		line 50 in file "tactiles.c"
 13662 ;; Parameters:    Size  Location     Type
 13663 ;;		None
 13664 ;; Auto vars:     Size  Location     Type
 13665 ;;		None
 13666 ;; Return value:  Size  Location     Type
 13667 ;;                  1    wreg      void 
 13668 ;; Registers used:
 13669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13670 ;; Tracked objects:
 13671 ;;		On entry : 0/0
 13672 ;;		On exit  : 0/0
 13673 ;;		Unchanged: 0/0
 13674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13677 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13678 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13679 ;;Total ram usage:        1 bytes
 13680 ;; Hardware stack levels used:    1
 13681 ;; Hardware stack levels required when called:    5
 13682 ;; This function calls:
 13683 ;;		_set_leds_top
 13684 ;;		_wait_ms
 13685 ;; This function is called by:
 13686 ;;		_main
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           
 13691                           ;psect for function _read_top_tactile
 13692  23FD                     _read_top_tactile:	
 13693                           
 13694                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13695                           
 13696                           ;incstack = 0
 13697                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13698  23FD  0020               	movlb	0	; select bank0
 13699  23FE  1A8F               	btfsc	15,5	;volatile
 13700  23FF  2C06               	goto	l9066
 13701                           
 13702                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13703  2400  085A               	movf	_topTactile_pressed,w
 13704  2401  1903               	btfsc	3,2
 13705  2402  2C10               	goto	l967
 13706                           
 13707                           ;tactiles.c: 62: topTactile_pressed--;
 13708  2403  3001               	movlw	1
 13709  2404  02DA               	subwf	_topTactile_pressed,f
 13710                           
 13711                           ;tactiles.c: 63: }
 13712                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13713  2405  2C10               	goto	l967
 13714  2406                     l9066:	
 13715  2406  3019               	movlw	25
 13716  2407  025A               	subwf	_topTactile_pressed,w
 13717  2408  1803               	skipnc
 13718  2409  2C10               	goto	l967
 13719                           
 13720                           ;tactiles.c: 65: topTactile_pressed++;
 13721  240A  3001               	movlw	1
 13722  240B  0021               	movlb	1	; select bank1
 13723  240C  00B2               	movwf	??_read_top_tactile^(0+128)
 13724  240D  0832               	movf	??_read_top_tactile^(0+128),w
 13725  240E  0020               	movlb	0	; select bank0
 13726  240F  07DA               	addwf	_topTactile_pressed,f
 13727  2410                     l967:	
 13728                           
 13729                           ;tactiles.c: 66: }
 13730                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13731  2410  085A               	movf	_topTactile_pressed,w
 13732  2411  1D03               	btfss	3,2
 13733  2412  0008               	return
 13734                           
 13735                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13736  2413  0863               	movf	_top_push_state,w
 13737  2414  3E01               	addlw	1
 13738  2415  00E3               	movwf	_top_push_state
 13739  2416  3000               	movlw	0
 13740  2417  3D64               	addwfc	_top_push_state+1,w
 13741  2418  00E4               	movwf	_top_push_state+1
 13742                           
 13743                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13744  2419  0864               	movf	_top_push_state+1,w
 13745  241A  3A80               	xorlw	128
 13746  241B  0021               	movlb	1	; select bank1
 13747  241C  00B2               	movwf	??_read_top_tactile^(0+128)
 13748  241D  3080               	movlw	128
 13749  241E  0232               	subwf	??_read_top_tactile^(0+128),w
 13750  241F  1D03               	skipz
 13751  2420  2C24               	goto	u10105
 13752  2421  3007               	movlw	7
 13753  2422  0020               	movlb	0	; select bank0
 13754  2423  0263               	subwf	_top_push_state,w
 13755  2424                     u10105:	
 13756  2424  1C03               	skipc
 13757  2425  2C2B               	goto	l9076
 13758                           
 13759                           ;tactiles.c: 75: top_push_state = 1;
 13760  2426  3001               	movlw	1
 13761  2427  0020               	movlb	0	; select bank0
 13762  2428  00E3               	movwf	_top_push_state
 13763  2429  3000               	movlw	0
 13764  242A  00E4               	movwf	_top_push_state+1
 13765  242B                     l9076:	
 13766                           
 13767                           ;tactiles.c: 76: }
 13768                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13769  242B  0020               	movlb	0	; select bank0
 13770  242C  0864               	movf	_top_push_state+1,w
 13771  242D  0021               	movlb	1	; select bank1
 13772  242E  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13773  242F  0020               	movlb	0	; select bank0
 13774  2430  0863               	movf	_top_push_state,w
 13775  2431  0021               	movlb	1	; select bank1
 13776  2432  00A0               	movwf	set_leds_top@x^(0+128)
 13777  2433  3001               	movlw	1
 13778  2434  00A2               	movwf	set_leds_top@ledState^(0+128)
 13779  2435  3000               	movlw	0
 13780  2436  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13781  2437  31A5  2585  31A3   	fcall	_set_leds_top
 13782                           
 13783                           ;tactiles.c: 78: mod_time_changed = 1;
 13784  243A  0020               	movlb	0	; select bank0
 13785  243B  01E8               	clrf	_mod_time_changed
 13786  243C  0AE8               	incf	_mod_time_changed,f
 13787  243D                     l971:	
 13788                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13789                           
 13790  243D  1E8F               	btfss	15,5	;volatile
 13791  243E  2C3D               	goto	l971
 13792                           
 13793                           ;tactiles.c: 82: }
 13794                           ;tactiles.c: 83: wait_ms(20);
 13795  243F  3014               	movlw	20
 13796  2440  0021               	movlb	1	; select bank1
 13797  2441  00AC               	movwf	wait_ms@timeSec^(0+128)
 13798  2442  3000               	movlw	0
 13799  2443  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13800  2444  31A0  2015         	fcall	_wait_ms
 13801  2446  0008               	return
 13802  2447                     __end_of_read_top_tactile:	
 13803                           
 13804                           	psect	text34
 13805  2326                     __ptext34:	
 13806 ;; *************** function _read_bottom_tactile *****************
 13807 ;; Defined at:
 13808 ;;		line 18 in file "tactiles.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;		None
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;		None
 13813 ;; Return value:  Size  Location     Type
 13814 ;;                  1    wreg      void 
 13815 ;; Registers used:
 13816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13824 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13825 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13826 ;;Total ram usage:        1 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; Hardware stack levels required when called:    5
 13829 ;; This function calls:
 13830 ;;		_set_leds_bottom
 13831 ;;		_wait_ms
 13832 ;; This function is called by:
 13833 ;;		_main
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function _read_bottom_tactile
 13839  2326                     _read_bottom_tactile:	
 13840                           
 13841                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13845  2326  0020               	movlb	0	; select bank0
 13846  2327  1B0F               	btfsc	15,6	;volatile
 13847  2328  2B2F               	goto	l9044
 13848                           
 13849                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13850  2329  084F               	movf	_bottomTactile_pressed,w
 13851  232A  1903               	btfsc	3,2
 13852  232B  2B39               	goto	l955
 13853                           
 13854                           ;tactiles.c: 29: bottomTactile_pressed--;
 13855  232C  3001               	movlw	1
 13856  232D  02CF               	subwf	_bottomTactile_pressed,f
 13857                           
 13858                           ;tactiles.c: 30: }
 13859                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13860  232E  2B39               	goto	l955
 13861  232F                     l9044:	
 13862  232F  3019               	movlw	25
 13863  2330  024F               	subwf	_bottomTactile_pressed,w
 13864  2331  1803               	skipnc
 13865  2332  2B39               	goto	l955
 13866                           
 13867                           ;tactiles.c: 32: bottomTactile_pressed++;
 13868  2333  3001               	movlw	1
 13869  2334  0021               	movlb	1	; select bank1
 13870  2335  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13871  2336  0832               	movf	??_read_bottom_tactile^(0+128),w
 13872  2337  0020               	movlb	0	; select bank0
 13873  2338  07CF               	addwf	_bottomTactile_pressed,f
 13874  2339                     l955:	
 13875                           
 13876                           ;tactiles.c: 33: }
 13877                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13878  2339  084F               	movf	_bottomTactile_pressed,w
 13879  233A  1D03               	btfss	3,2
 13880  233B  0008               	return
 13881                           
 13882                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13883  233C  085F               	movf	_bottom_push_state,w
 13884  233D  3E01               	addlw	1
 13885  233E  00DF               	movwf	_bottom_push_state
 13886  233F  3000               	movlw	0
 13887  2340  3D60               	addwfc	_bottom_push_state+1,w
 13888  2341  00E0               	movwf	_bottom_push_state+1
 13889                           
 13890                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13891  2342  0860               	movf	_bottom_push_state+1,w
 13892  2343  3A80               	xorlw	128
 13893  2344  0021               	movlb	1	; select bank1
 13894  2345  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13895  2346  3080               	movlw	128
 13896  2347  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13897  2348  1D03               	skipz
 13898  2349  2B4D               	goto	u10045
 13899  234A  3006               	movlw	6
 13900  234B  0020               	movlb	0	; select bank0
 13901  234C  025F               	subwf	_bottom_push_state,w
 13902  234D                     u10045:	
 13903  234D  1C03               	skipc
 13904  234E  2B54               	goto	l9054
 13905                           
 13906                           ;tactiles.c: 39: bottom_push_state = 1;
 13907  234F  3001               	movlw	1
 13908  2350  0020               	movlb	0	; select bank0
 13909  2351  00DF               	movwf	_bottom_push_state
 13910  2352  3000               	movlw	0
 13911  2353  00E0               	movwf	_bottom_push_state+1
 13912  2354                     l9054:	
 13913                           
 13914                           ;tactiles.c: 40: }
 13915                           ;tactiles.c: 41: modulation_changed = 1;
 13916  2354  0023               	movlb	3	; select bank3
 13917  2355  01C3               	clrf	_modulation_changed^(0+384)
 13918  2356  0AC3               	incf	_modulation_changed^(0+384),f
 13919                           
 13920                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13921  2357  0020               	movlb	0	; select bank0
 13922  2358  0860               	movf	_bottom_push_state+1,w
 13923  2359  0021               	movlb	1	; select bank1
 13924  235A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13925  235B  0020               	movlb	0	; select bank0
 13926  235C  085F               	movf	_bottom_push_state,w
 13927  235D  0021               	movlb	1	; select bank1
 13928  235E  00A0               	movwf	set_leds_bottom@x^(0+128)
 13929  235F  31A0  20EF  31A3   	fcall	_set_leds_bottom
 13930  2362                     l959:	
 13931                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13932                           
 13933  2362  0020               	movlb	0	; select bank0
 13934  2363  1F0F               	btfss	15,6	;volatile
 13935  2364  2B62               	goto	l959
 13936                           
 13937                           ;tactiles.c: 45: }
 13938                           ;tactiles.c: 46: wait_ms(20);
 13939  2365  3014               	movlw	20
 13940  2366  0021               	movlb	1	; select bank1
 13941  2367  00AC               	movwf	wait_ms@timeSec^(0+128)
 13942  2368  3000               	movlw	0
 13943  2369  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13944  236A  31A0  2015         	fcall	_wait_ms
 13945  236C  0008               	return
 13946  236D                     __end_of_read_bottom_tactile:	
 13947                           
 13948                           	psect	text35
 13949  1A41                     __ptext35:	
 13950 ;; *************** function _map *****************
 13951 ;; Defined at:
 13952 ;;		line 177 in file "user.c"
 13953 ;; Parameters:    Size  Location     Type
 13954 ;;  x               3   62[BANK1 ] float 
 13955 ;;  in_min          3   65[BANK1 ] float 
 13956 ;;  in_max          3   68[BANK1 ] float 
 13957 ;;  out_min         3   71[BANK1 ] float 
 13958 ;;  out_max         3   74[BANK1 ] float 
 13959 ;; Auto vars:     Size  Location     Type
 13960 ;;		None
 13961 ;; Return value:  Size  Location     Type
 13962 ;;                  3   62[BANK1 ] float 
 13963 ;; Registers used:
 13964 ;;		wreg, status,2, status,0, pclath, cstack
 13965 ;; Tracked objects:
 13966 ;;		On entry : 0/0
 13967 ;;		On exit  : 0/0
 13968 ;;		Unchanged: 0/0
 13969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13970 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13971 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13973 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13974 ;;Total ram usage:       18 bytes
 13975 ;; Hardware stack levels used:    1
 13976 ;; Hardware stack levels required when called:    5
 13977 ;; This function calls:
 13978 ;;		___ftadd
 13979 ;;		___ftdiv
 13980 ;;		___ftmul
 13981 ;;		___ftneg
 13982 ;; This function is called by:
 13983 ;;		_main
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           
 13988                           ;psect for function _map
 13989  1A41                     _map:	
 13990                           
 13991                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13992                           
 13993                           ;incstack = 0
 13994                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13995  1A41  0021               	movlb	1	; select bank1
 13996  1A42  0864               	movf	map@in_max^(0+128),w
 13997  1A43  00C1               	movwf	___ftadd@f1^(0+128)
 13998  1A44  0865               	movf	(map@in_max+1)^(0+128),w
 13999  1A45  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14000  1A46  0866               	movf	(map@in_max+2)^(0+128),w
 14001  1A47  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14002  1A48  0861               	movf	map@in_min^(0+128),w
 14003  1A49  00BE               	movwf	___ftneg@f1^(0+128)
 14004  1A4A  0862               	movf	(map@in_min+1)^(0+128),w
 14005  1A4B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14006  1A4C  0863               	movf	(map@in_min+2)^(0+128),w
 14007  1A4D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14008  1A4E  31AD  258A  319A   	fcall	___ftneg
 14009  1A51  0021               	movlb	1	; select bank1
 14010  1A52  083E               	movf	?___ftneg^(0+128),w
 14011  1A53  00C4               	movwf	___ftadd@f2^(0+128)
 14012  1A54  083F               	movf	(?___ftneg+1)^(0+128),w
 14013  1A55  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14014  1A56  0840               	movf	(?___ftneg+2)^(0+128),w
 14015  1A57  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14016  1A58  3190  2026  319A   	fcall	___ftadd
 14017  1A5B  0021               	movlb	1	; select bank1
 14018  1A5C  0841               	movf	?___ftadd^(0+128),w
 14019  1A5D  00CE               	movwf	___ftdiv@f2^(0+128)
 14020  1A5E  0842               	movf	(?___ftadd+1)^(0+128),w
 14021  1A5F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14022  1A60  0843               	movf	(?___ftadd+2)^(0+128),w
 14023  1A61  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14024  1A62  086A               	movf	map@out_max^(0+128),w
 14025  1A63  00C1               	movwf	___ftadd@f1^(0+128)
 14026  1A64  086B               	movf	(map@out_max+1)^(0+128),w
 14027  1A65  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14028  1A66  086C               	movf	(map@out_max+2)^(0+128),w
 14029  1A67  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14030  1A68  0867               	movf	map@out_min^(0+128),w
 14031  1A69  00BE               	movwf	___ftneg@f1^(0+128)
 14032  1A6A  0868               	movf	(map@out_min+1)^(0+128),w
 14033  1A6B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14034  1A6C  0869               	movf	(map@out_min+2)^(0+128),w
 14035  1A6D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14036  1A6E  31AD  258A  319A   	fcall	___ftneg
 14037  1A71  0021               	movlb	1	; select bank1
 14038  1A72  083E               	movf	?___ftneg^(0+128),w
 14039  1A73  00C4               	movwf	___ftadd@f2^(0+128)
 14040  1A74  083F               	movf	(?___ftneg+1)^(0+128),w
 14041  1A75  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14042  1A76  0840               	movf	(?___ftneg+2)^(0+128),w
 14043  1A77  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14044  1A78  3190  2026  319A   	fcall	___ftadd
 14045  1A7B  0021               	movlb	1	; select bank1
 14046  1A7C  0841               	movf	?___ftadd^(0+128),w
 14047  1A7D  00AE               	movwf	___ftmul@f1^(0+128)
 14048  1A7E  0842               	movf	(?___ftadd+1)^(0+128),w
 14049  1A7F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14050  1A80  0843               	movf	(?___ftadd+2)^(0+128),w
 14051  1A81  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14052  1A82  085E               	movf	map@x^(0+128),w
 14053  1A83  00C1               	movwf	___ftadd@f1^(0+128)
 14054  1A84  085F               	movf	(map@x+1)^(0+128),w
 14055  1A85  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14056  1A86  0860               	movf	(map@x+2)^(0+128),w
 14057  1A87  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14058  1A88  0861               	movf	map@in_min^(0+128),w
 14059  1A89  00BE               	movwf	___ftneg@f1^(0+128)
 14060  1A8A  0862               	movf	(map@in_min+1)^(0+128),w
 14061  1A8B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14062  1A8C  0863               	movf	(map@in_min+2)^(0+128),w
 14063  1A8D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14064  1A8E  31AD  258A  319A   	fcall	___ftneg
 14065  1A91  0021               	movlb	1	; select bank1
 14066  1A92  083E               	movf	?___ftneg^(0+128),w
 14067  1A93  00C4               	movwf	___ftadd@f2^(0+128)
 14068  1A94  083F               	movf	(?___ftneg+1)^(0+128),w
 14069  1A95  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14070  1A96  0840               	movf	(?___ftneg+2)^(0+128),w
 14071  1A97  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14072  1A98  3190  2026  319A   	fcall	___ftadd
 14073  1A9B  0021               	movlb	1	; select bank1
 14074  1A9C  0841               	movf	?___ftadd^(0+128),w
 14075  1A9D  00B1               	movwf	___ftmul@f2^(0+128)
 14076  1A9E  0842               	movf	(?___ftadd+1)^(0+128),w
 14077  1A9F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14078  1AA0  0843               	movf	(?___ftadd+2)^(0+128),w
 14079  1AA1  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14080  1AA2  319E  267B  319A   	fcall	___ftmul
 14081  1AA5  0021               	movlb	1	; select bank1
 14082  1AA6  082E               	movf	?___ftmul^(0+128),w
 14083  1AA7  00D1               	movwf	___ftdiv@f1^(0+128)
 14084  1AA8  082F               	movf	(?___ftmul+1)^(0+128),w
 14085  1AA9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14086  1AAA  0830               	movf	(?___ftmul+2)^(0+128),w
 14087  1AAB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14088  1AAC  319D  2527  319A   	fcall	___ftdiv
 14089  1AAF  0021               	movlb	1	; select bank1
 14090  1AB0  084E               	movf	?___ftdiv^(0+128),w
 14091  1AB1  00ED               	movwf	_map$2834^(0+128)
 14092  1AB2  084F               	movf	(?___ftdiv+1)^(0+128),w
 14093  1AB3  00EE               	movwf	(_map$2834+1)^(0+128)
 14094  1AB4  0850               	movf	(?___ftdiv+2)^(0+128),w
 14095  1AB5  00EF               	movwf	(_map$2834+2)^(0+128)
 14096                           
 14097                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14098  1AB6  0867               	movf	map@out_min^(0+128),w
 14099  1AB7  00C1               	movwf	___ftadd@f1^(0+128)
 14100  1AB8  0868               	movf	(map@out_min+1)^(0+128),w
 14101  1AB9  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14102  1ABA  0869               	movf	(map@out_min+2)^(0+128),w
 14103  1ABB  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14104  1ABC  086D               	movf	_map$2834^(0+128),w
 14105  1ABD  00C4               	movwf	___ftadd@f2^(0+128)
 14106  1ABE  086E               	movf	(_map$2834+1)^(0+128),w
 14107  1ABF  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14108  1AC0  086F               	movf	(_map$2834+2)^(0+128),w
 14109  1AC1  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14110  1AC2  3190  2026         	fcall	___ftadd
 14111  1AC4  0021               	movlb	1	; select bank1
 14112  1AC5  0841               	movf	?___ftadd^(0+128),w
 14113  1AC6  00DE               	movwf	?_map^(0+128)
 14114  1AC7  0842               	movf	(?___ftadd+1)^(0+128),w
 14115  1AC8  00DF               	movwf	(?_map+1)^(0+128)
 14116  1AC9  0843               	movf	(?___ftadd+2)^(0+128),w
 14117  1ACA  00E0               	movwf	(?_map+2)^(0+128)
 14118  1ACB  0008               	return
 14119  1ACC                     __end_of_map:	
 14120                           
 14121                           	psect	text36
 14122  07F0                     __ptext36:	
 14123 ;; *************** function _initSwitchBypass *****************
 14124 ;; Defined at:
 14125 ;;		line 29 in file "SwitchBypass.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;		None
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;  initState       2   26[BANK1 ] int 
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  1    wreg      void 
 14132 ;; Registers used:
 14133 ;;		wreg, status,2, status,0, pclath, cstack
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14140 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14142 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14143 ;;Total ram usage:        2 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; Hardware stack levels required when called:    7
 14146 ;; This function calls:
 14147 ;;		_getSwitchBypassState
 14148 ;;		_setSwitchBypassState
 14149 ;; This function is called by:
 14150 ;;		_main
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           
 14155                           ;psect for function _initSwitchBypass
 14156  07F0                     _initSwitchBypass:	
 14157                           
 14158                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14159                           
 14160                           ;incstack = 0
 14161                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14162  07F0  31AD  2576  3187   	fcall	_getSwitchBypassState
 14163  07F3  0021               	movlb	1	; select bank1
 14164  07F4  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14165  07F5  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14166  07F6  0820               	movf	?_getSwitchBypassState^(0+128),w
 14167  07F7  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14168                           
 14169                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14170  07F8  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14171  07F9  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14172  07FA  083A               	movf	initSwitchBypass@initState^(0+128),w
 14173  07FB  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14174  07FC  31AE  265C         	fcall	_setSwitchBypassState
 14175  07FE  0008               	return
 14176  07FF                     __end_of_initSwitchBypass:	
 14177                           
 14178                           	psect	text37
 14179  2E5C                     __ptext37:	
 14180 ;; *************** function _setSwitchBypassState *****************
 14181 ;; Defined at:
 14182 ;;		line 140 in file "SwitchBypass.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  f_state         2   22[BANK1 ] int 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;		None
 14187 ;; Return value:  Size  Location     Type
 14188 ;;                  1    wreg      void 
 14189 ;; Registers used:
 14190 ;;		wreg, status,2, status,0, pclath, cstack
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14196 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14198 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14199 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14200 ;;Total ram usage:        4 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    6
 14203 ;; This function calls:
 14204 ;;		_setSwitchBypassRelays
 14205 ;; This function is called by:
 14206 ;;		_initSwitchBypass
 14207 ;;		_updateSwitchBypass
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211                           
 14212                           ;psect for function _setSwitchBypassState
 14213  2E5C                     _setSwitchBypassState:	
 14214                           
 14215                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14216                           
 14217                           ;incstack = 0
 14218                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14219  2E5C  0020               	movlb	0	; select bank0
 14220  2E5D  086B               	movf	_switchBypass_state,w
 14221  2E5E  0021               	movlb	1	; select bank1
 14222  2E5F  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14223  2E60  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14224  2E61  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14225  2E62  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14226  2E63  1D03               	skipz
 14227  2E64  2E67               	goto	u8865
 14228  2E65  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14229  2E66  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14230  2E67                     u8865:	
 14231  2E67  1903               	btfsc	3,2
 14232  2E68  0008               	return
 14233                           
 14234                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14235  2E69  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14236  2E6A  0022               	movlb	2	; select bank2
 14237  2E6B  1C03               	skipc
 14238  2E6C  110D               	bcf	13,2	;volatile
 14239  2E6D  1803               	skipnc
 14240  2E6E  150D               	bsf	13,2	;volatile
 14241                           
 14242                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14243  2E6F  118D               	bcf	13,3	;volatile
 14244                           
 14245                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14246  2E70  0021               	movlb	1	; select bank1
 14247  2E71  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14248  2E72  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14249  2E73  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14250  2E74  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14251  2E75  31A0  2047         	fcall	_setSwitchBypassRelays
 14252  2E77  0008               	return
 14253  2E78                     __end_of_setSwitchBypassState:	
 14254                           
 14255                           	psect	text38
 14256  2047                     __ptext38:	
 14257 ;; *************** function _setSwitchBypassRelays *****************
 14258 ;; Defined at:
 14259 ;;		line 148 in file "SwitchBypass.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;  f_state         2   18[BANK1 ] int 
 14262 ;; Auto vars:     Size  Location     Type
 14263 ;;		None
 14264 ;; Return value:  Size  Location     Type
 14265 ;;                  1    wreg      void 
 14266 ;; Registers used:
 14267 ;;		wreg, status,2, status,0, pclath, cstack
 14268 ;; Tracked objects:
 14269 ;;		On entry : 0/0
 14270 ;;		On exit  : 0/0
 14271 ;;		Unchanged: 0/0
 14272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14273 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14275 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14276 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14277 ;;Total ram usage:        4 bytes
 14278 ;; Hardware stack levels used:    1
 14279 ;; Hardware stack levels required when called:    5
 14280 ;; This function calls:
 14281 ;;		_updateSwitchBypassState
 14282 ;;		_wait_ms
 14283 ;; This function is called by:
 14284 ;;		_updateSwitchBypass
 14285 ;;		_setSwitchBypassState
 14286 ;; This function uses a non-reentrant model
 14287 ;;
 14288                           
 14289                           
 14290                           ;psect for function _setSwitchBypassRelays
 14291  2047                     _setSwitchBypassRelays:	
 14292                           
 14293                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14294                           
 14295                           ;incstack = 0
 14296                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14297  2047  0021               	movlb	1	; select bank1
 14298  2048  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14299  2049  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14300  204A  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14301  204B  0020               	movlb	0	; select bank0
 14302  204C  00EB               	movwf	_switchBypass_state
 14303                           
 14304                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14305  204D  0021               	movlb	1	; select bank1
 14306  204E  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14307  204F  0027               	movlb	7	; select bank7
 14308  2050  1C03               	skipc
 14309  2051  110D               	bcf	13,2	;volatile
 14310  2052  1803               	skipnc
 14311  2053  150D               	bsf	13,2	;volatile
 14312                           
 14313                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14314  2054  0021               	movlb	1	; select bank1
 14315  2055  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14316  2056  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14317  2057  1D03               	btfss	3,2
 14318  2058  285C               	goto	u8600
 14319  2059  0027               	movlb	7	; select bank7
 14320  205A  148D               	bsf	13,1	;volatile
 14321  205B  285E               	goto	l8164
 14322  205C                     u8600:	
 14323  205C  0027               	movlb	7	; select bank7
 14324  205D  108D               	bcf	13,1	;volatile
 14325  205E                     l8164:	
 14326                           
 14327                           ;SwitchBypass.c: 153: wait_ms(20);
 14328  205E  3014               	movlw	20
 14329  205F  0021               	movlb	1	; select bank1
 14330  2060  00AC               	movwf	wait_ms@timeSec^(0+128)
 14331  2061  3000               	movlw	0
 14332  2062  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14333  2063  31A0  2015  31A0   	fcall	_wait_ms
 14334                           
 14335                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14336  2066  0027               	movlb	7	; select bank7
 14337  2067  110D               	bcf	13,2	;volatile
 14338                           
 14339                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14340  2068  108D               	bcf	13,1	;volatile
 14341                           
 14342                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14343  2069  0020               	movlb	0	; select bank0
 14344  206A  086B               	movf	_switchBypass_state,w
 14345  206B  0021               	movlb	1	; select bank1
 14346  206C  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14347  206D  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14348  206E  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14349  206F  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14350  2070  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14351  2071  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14352  2072  3198  2000  31A0   	fcall	_updateSwitchBypassState
 14353                           
 14354                           ;SwitchBypass.c: 159: wait_ms(20);
 14355  2075  3014               	movlw	20
 14356  2076  0021               	movlb	1	; select bank1
 14357  2077  00AC               	movwf	wait_ms@timeSec^(0+128)
 14358  2078  3000               	movlw	0
 14359  2079  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14360  207A  31A0  2015         	fcall	_wait_ms
 14361  207C  0008               	return
 14362  207D                     __end_of_setSwitchBypassRelays:	
 14363                           
 14364                           	psect	text39
 14365  2015                     __ptext39:	
 14366 ;; *************** function _wait_ms *****************
 14367 ;; Defined at:
 14368 ;;		line 23 in file "system.c"
 14369 ;; Parameters:    Size  Location     Type
 14370 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  timemsl         4   14[BANK1 ] long 
 14373 ;; Return value:  Size  Location     Type
 14374 ;;                  1    wreg      void 
 14375 ;; Registers used:
 14376 ;;		wreg, status,2, status,0, pclath, cstack
 14377 ;; Tracked objects:
 14378 ;;		On entry : 0/0
 14379 ;;		On exit  : 0/0
 14380 ;;		Unchanged: 0/0
 14381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14382 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14383 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14385 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14386 ;;Total ram usage:        6 bytes
 14387 ;; Hardware stack levels used:    1
 14388 ;; Hardware stack levels required when called:    4
 14389 ;; This function calls:
 14390 ;;		___lmul
 14391 ;; This function is called by:
 14392 ;;		_ring_tactiles
 14393 ;;		_solidring_tactiles
 14394 ;;		_read_bottom_tactile
 14395 ;;		_read_top_tactile
 14396 ;;		_setSwitchBypassRelays
 14397 ;;		_setDoublePressState
 14398 ;;		_showError_Alternating
 14399 ;;		_show_error
 14400 ;;		_show_cancel
 14401 ;;		_star_tactiles
 14402 ;;		_initExpModeState
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           
 14407                           ;psect for function _wait_ms
 14408  2015                     _wait_ms:	
 14409                           
 14410                           ;system.c: 25: long timemsl = 0;
 14411                           
 14412                           ;incstack = 0
 14413                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14414  2015  3000               	movlw	0
 14415  2016  0021               	movlb	1	; select bank1
 14416  2017  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14417  2018  3000               	movlw	0
 14418  2019  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14419  201A  3000               	movlw	0
 14420  201B  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14421  201C  3000               	movlw	0
 14422  201D  00AE               	movwf	wait_ms@timemsl^(0+128)
 14423                           
 14424                           ;system.c: 26: timemsl = timeSec * 1000l;
 14425  201E  082C               	movf	wait_ms@timeSec^(0+128),w
 14426  201F  00A0               	movwf	___lmul@multiplier^(0+128)
 14427  2020  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14428  2021  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14429  2022  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14430  2023  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14431  2024  3000               	movlw	0
 14432  2025  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14433  2026  3000               	movlw	0
 14434  2027  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14435  2028  3003               	movlw	3
 14436  2029  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14437  202A  30E8               	movlw	232
 14438  202B  00A4               	movwf	___lmul@multiplicand^(0+128)
 14439  202C  3198  2001  31A0   	fcall	___lmul
 14440  202F  0021               	movlb	1	; select bank1
 14441  2030  0823               	movf	(?___lmul+3)^(0+128),w
 14442  2031  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14443  2032  0822               	movf	(?___lmul+2)^(0+128),w
 14444  2033  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14445  2034  0821               	movf	(?___lmul+1)^(0+128),w
 14446  2035  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14447  2036  0820               	movf	?___lmul^(0+128),w
 14448  2037  00AE               	movwf	wait_ms@timemsl^(0+128)
 14449  2038                     l381:	
 14450                           ;system.c: 27: for( ; timemsl; timemsl--);
 14451                           
 14452  2038  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14453  2039  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14454  203A  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14455  203B  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14456  203C  1903               	btfsc	3,2
 14457  203D  0008               	return
 14458  203E  30FF               	movlw	255
 14459  203F  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14460  2040  30FF               	movlw	255
 14461  2041  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14462  2042  30FF               	movlw	255
 14463  2043  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14464  2044  30FF               	movlw	255
 14465  2045  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14466  2046  2838               	goto	l381
 14467  2047                     __end_of_wait_ms:	
 14468                           
 14469                           	psect	text40
 14470  1801                     __ptext40:	
 14471 ;; *************** function ___lmul *****************
 14472 ;; Defined at:
 14473 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14476 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14477 ;; Auto vars:     Size  Location     Type
 14478 ;;  product         4    8[BANK1 ] unsigned long 
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  4    0[BANK1 ] unsigned long 
 14481 ;; Registers used:
 14482 ;;		wreg, status,2, status,0
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14488 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14489 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14491 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14492 ;;Total ram usage:       12 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    3
 14495 ;; This function calls:
 14496 ;;		Nothing
 14497 ;; This function is called by:
 14498 ;;		_wait_ms
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           
 14503                           ;psect for function ___lmul
 14504  1801                     ___lmul:	
 14505                           
 14506                           ;incstack = 0
 14507                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14508  1801  3000               	movlw	0
 14509  1802  0021               	movlb	1	; select bank1
 14510  1803  00AB               	movwf	(___lmul@product+3)^(0+128)
 14511  1804  3000               	movlw	0
 14512  1805  00AA               	movwf	(___lmul@product+2)^(0+128)
 14513  1806  3000               	movlw	0
 14514  1807  00A9               	movwf	(___lmul@product+1)^(0+128)
 14515  1808  3000               	movlw	0
 14516  1809  00A8               	movwf	___lmul@product^(0+128)
 14517  180A                     l7610:	
 14518  180A  1C20               	btfss	___lmul@multiplier^(0+128),0
 14519  180B  2814               	goto	l7614
 14520  180C  0824               	movf	___lmul@multiplicand^(0+128),w
 14521  180D  07A8               	addwf	___lmul@product^(0+128),f
 14522  180E  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14523  180F  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14524  1810  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14525  1811  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14526  1812  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14527  1813  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14528  1814                     l7614:	
 14529  1814  3001               	movlw	1
 14530  1815                     u7635:	
 14531  1815  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14532  1816  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14533  1817  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14534  1818  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14535  1819  0B89               	decfsz	9,f
 14536  181A  2815               	goto	u7635
 14537  181B  3001               	movlw	1
 14538  181C                     u7645:	
 14539  181C  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14540  181D  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14541  181E  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14542  181F  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14543  1820  0B89               	decfsz	9,f
 14544  1821  281C               	goto	u7645
 14545  1822  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14546  1823  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14547  1824  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14548  1825  0420               	iorwf	___lmul@multiplier^(0+128),w
 14549  1826  1D03               	skipz
 14550  1827  280A               	goto	l7610
 14551  1828  082B               	movf	(___lmul@product+3)^(0+128),w
 14552  1829  00A3               	movwf	(?___lmul+3)^(0+128)
 14553  182A  082A               	movf	(___lmul@product+2)^(0+128),w
 14554  182B  00A2               	movwf	(?___lmul+2)^(0+128)
 14555  182C  0829               	movf	(___lmul@product+1)^(0+128),w
 14556  182D  00A1               	movwf	(?___lmul+1)^(0+128)
 14557  182E  0828               	movf	___lmul@product^(0+128),w
 14558  182F  00A0               	movwf	?___lmul^(0+128)
 14559  1830  0008               	return
 14560  1831                     __end_of___lmul:	
 14561                           
 14562                           	psect	text41
 14563  1800                     __ptext41:	
 14564 ;; *************** function _updateSwitchBypassState *****************
 14565 ;; Defined at:
 14566 ;;		line 96 in file "state_manager.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;  state           2    0[BANK1 ] int 
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;		None
 14571 ;; Return value:  Size  Location     Type
 14572 ;;                  1    wreg      void 
 14573 ;; Registers used:
 14574 ;;		None
 14575 ;; Tracked objects:
 14576 ;;		On entry : 0/0
 14577 ;;		On exit  : 0/0
 14578 ;;		Unchanged: 0/0
 14579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14580 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14583 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14584 ;;Total ram usage:        2 bytes
 14585 ;; Hardware stack levels used:    1
 14586 ;; Hardware stack levels required when called:    3
 14587 ;; This function calls:
 14588 ;;		Nothing
 14589 ;; This function is called by:
 14590 ;;		_setSwitchBypassRelays
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           
 14595                           ;psect for function _updateSwitchBypassState
 14596  1800                     _updateSwitchBypassState:	
 14597                           
 14598                           ;incstack = 0
 14599                           ; Regs used in _updateSwitchBypassState: []
 14600  1800  0008               	return
 14601  1801                     __end_of_updateSwitchBypassState:	
 14602                           
 14603                           	psect	text42
 14604  2D76                     __ptext42:	
 14605 ;; *************** function _getSwitchBypassState *****************
 14606 ;; Defined at:
 14607 ;;		line 103 in file "state_manager.c"
 14608 ;; Parameters:    Size  Location     Type
 14609 ;;		None
 14610 ;; Auto vars:     Size  Location     Type
 14611 ;;		None
 14612 ;; Return value:  Size  Location     Type
 14613 ;;                  2    0[BANK1 ] int 
 14614 ;; Registers used:
 14615 ;;		status,2
 14616 ;; Tracked objects:
 14617 ;;		On entry : 0/0
 14618 ;;		On exit  : 0/0
 14619 ;;		Unchanged: 0/0
 14620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14621 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14624 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14625 ;;Total ram usage:        2 bytes
 14626 ;; Hardware stack levels used:    1
 14627 ;; Hardware stack levels required when called:    3
 14628 ;; This function calls:
 14629 ;;		Nothing
 14630 ;; This function is called by:
 14631 ;;		_initSwitchBypass
 14632 ;; This function uses a non-reentrant model
 14633 ;;
 14634                           
 14635                           
 14636                           ;psect for function _getSwitchBypassState
 14637  2D76                     _getSwitchBypassState:	
 14638                           
 14639                           ;state_manager.c: 108: return 0;
 14640                           
 14641                           ;incstack = 0
 14642                           ; Regs used in _getSwitchBypassState: [status,2]
 14643  2D76  0021               	movlb	1	; select bank1
 14644  2D77  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14645  2D78  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14646  2D79  0008               	return
 14647  2D7A                     __end_of_getSwitchBypassState:	
 14648                           
 14649                           	psect	text43
 14650  1ACC                     __ptext43:	
 14651 ;; *************** function _getModulationDelayTime *****************
 14652 ;; Defined at:
 14653 ;;		line 35 in file "modulation.c"
 14654 ;; Parameters:    Size  Location     Type
 14655 ;;		None
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;  subDiv          2   26[BANK2 ] int 
 14658 ;; Return value:  Size  Location     Type
 14659 ;;                  1    wreg      void 
 14660 ;; Registers used:
 14661 ;;		wreg, status,2, status,0, pclath, cstack
 14662 ;; Tracked objects:
 14663 ;;		On entry : 0/0
 14664 ;;		On exit  : 0/0
 14665 ;;		Unchanged: 0/0
 14666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14668 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14669 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14670 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14671 ;;Total ram usage:        6 bytes
 14672 ;; Hardware stack levels used:    1
 14673 ;; Hardware stack levels required when called:    5
 14674 ;; This function calls:
 14675 ;;		___altoft
 14676 ;;		___awtoft
 14677 ;;		___ftdiv
 14678 ;;		___fttol
 14679 ;;		___wmul
 14680 ;;		_getModulationSubdivision
 14681 ;; This function is called by:
 14682 ;;		_main
 14683 ;; This function uses a non-reentrant model
 14684 ;;
 14685                           
 14686                           
 14687                           ;psect for function _getModulationDelayTime
 14688  1ACC                     _getModulationDelayTime:	
 14689                           
 14690                           ;modulation.c: 36: adjust_mod_delay = 0;
 14691                           
 14692                           ;incstack = 0
 14693                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14694  1ACC  0023               	movlb	3	; select bank3
 14695  1ACD  01BE               	clrf	_adjust_mod_delay^(0+384)
 14696                           
 14697                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14698  1ACE  31AF  27D0  319A   	fcall	_getModulationSubdivision
 14699  1AD1  0021               	movlb	1	; select bank1
 14700  1AD2  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14701  1AD3  0022               	movlb	2	; select bank2
 14702  1AD4  00BB               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14703  1AD5  0021               	movlb	1	; select bank1
 14704  1AD6  0820               	movf	?_getModulationSubdivision^(0+128),w
 14705  1AD7  0022               	movlb	2	; select bank2
 14706  1AD8  00BA               	movwf	getModulationDelayTime@subDiv^(0+256)
 14707                           
 14708                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14709  1AD9  0020               	movlb	0	; select bank0
 14710  1ADA  085E               	movf	_delay_time+3,w	;volatile
 14711  1ADB  0022               	movlb	2	; select bank2
 14712  1ADC  00B1               	movwf	(___altoft@c+3)^(0+256)
 14713  1ADD  0020               	movlb	0	; select bank0
 14714  1ADE  085D               	movf	_delay_time+2,w	;volatile
 14715  1ADF  0022               	movlb	2	; select bank2
 14716  1AE0  00B0               	movwf	(___altoft@c+2)^(0+256)
 14717  1AE1  0020               	movlb	0	; select bank0
 14718  1AE2  085C               	movf	_delay_time+1,w	;volatile
 14719  1AE3  0022               	movlb	2	; select bank2
 14720  1AE4  00AF               	movwf	(___altoft@c+1)^(0+256)
 14721  1AE5  0020               	movlb	0	; select bank0
 14722  1AE6  085B               	movf	_delay_time,w	;volatile
 14723  1AE7  0022               	movlb	2	; select bank2
 14724  1AE8  00AE               	movwf	___altoft@c^(0+256)
 14725  1AE9  31A4  2447  319A   	fcall	___altoft
 14726  1AEC  0022               	movlb	2	; select bank2
 14727  1AED  082E               	movf	?___altoft^(0+256),w
 14728  1AEE  0021               	movlb	1	; select bank1
 14729  1AEF  00D1               	movwf	___ftdiv@f1^(0+128)
 14730  1AF0  0022               	movlb	2	; select bank2
 14731  1AF1  082F               	movf	(?___altoft+1)^(0+256),w
 14732  1AF2  0021               	movlb	1	; select bank1
 14733  1AF3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14734  1AF4  0022               	movlb	2	; select bank2
 14735  1AF5  0830               	movf	(?___altoft+2)^(0+256),w
 14736  1AF6  0021               	movlb	1	; select bank1
 14737  1AF7  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14738  1AF8  0022               	movlb	2	; select bank2
 14739  1AF9  083B               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14740  1AFA  0021               	movlb	1	; select bank1
 14741  1AFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14742  1AFC  0022               	movlb	2	; select bank2
 14743  1AFD  083A               	movf	getModulationDelayTime@subDiv^(0+256),w
 14744  1AFE  0021               	movlb	1	; select bank1
 14745  1AFF  00A8               	movwf	___awtoft@c^(0+128)
 14746  1B00  31AE  26D5  319A   	fcall	___awtoft
 14747  1B03  0021               	movlb	1	; select bank1
 14748  1B04  0828               	movf	?___awtoft^(0+128),w
 14749  1B05  00CE               	movwf	___ftdiv@f2^(0+128)
 14750  1B06  0829               	movf	(?___awtoft+1)^(0+128),w
 14751  1B07  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14752  1B08  082A               	movf	(?___awtoft+2)^(0+128),w
 14753  1B09  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14754  1B0A  319D  2527  319A   	fcall	___ftdiv
 14755  1B0D  0021               	movlb	1	; select bank1
 14756  1B0E  084E               	movf	?___ftdiv^(0+128),w
 14757  1B0F  0022               	movlb	2	; select bank2
 14758  1B10  00A0               	movwf	___fttol@f1^(0+256)
 14759  1B11  0021               	movlb	1	; select bank1
 14760  1B12  084F               	movf	(?___ftdiv+1)^(0+128),w
 14761  1B13  0022               	movlb	2	; select bank2
 14762  1B14  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14763  1B15  0021               	movlb	1	; select bank1
 14764  1B16  0850               	movf	(?___ftdiv+2)^(0+128),w
 14765  1B17  0022               	movlb	2	; select bank2
 14766  1B18  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14767  1B19  3199  21BA  319A   	fcall	___fttol
 14768  1B1C  0022               	movlb	2	; select bank2
 14769  1B1D  0821               	movf	(?___fttol^(0+256)+1),w
 14770  1B1E  0023               	movlb	3	; select bank3
 14771  1B1F  00D8               	movwf	(_mod_delay_time+1)^(0+384)
 14772  1B20  0022               	movlb	2	; select bank2
 14773  1B21  0820               	movf	?___fttol^(0+256),w
 14774  1B22  0023               	movlb	3	; select bank3
 14775  1B23  00D7               	movwf	_mod_delay_time^(0+384)
 14776                           
 14777                           ;modulation.c: 39: if (mod_delay_time * subDiv != delay_time) {
 14778  1B24  0858               	movf	(_mod_delay_time+1)^(0+384),w
 14779  1B25  0022               	movlb	2	; select bank2
 14780  1B26  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14781  1B27  0023               	movlb	3	; select bank3
 14782  1B28  0857               	movf	_mod_delay_time^(0+384),w
 14783  1B29  0022               	movlb	2	; select bank2
 14784  1B2A  00AE               	movwf	___wmul@multiplier^(0+256)
 14785  1B2B  083B               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14786  1B2C  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
 14787  1B2D  083A               	movf	getModulationDelayTime@subDiv^(0+256),w
 14788  1B2E  00B0               	movwf	___wmul@multiplicand^(0+256)
 14789  1B2F  31AE  2640  319A   	fcall	___wmul
 14790  1B32  0022               	movlb	2	; select bank2
 14791  1B33  082E               	movf	?___wmul^(0+256),w
 14792  1B34  00B6               	movwf	??_getModulationDelayTime^(0+256)
 14793  1B35  082F               	movf	(?___wmul+1)^(0+256),w
 14794  1B36  00B7               	movwf	(??_getModulationDelayTime^(0+256)+1)
 14795  1B37  3000               	movlw	0
 14796  1B38  1BB7               	btfsc	(??_getModulationDelayTime^(0+256)+1),7
 14797  1B39  30FF               	movlw	255
 14798  1B3A  00B8               	movwf	(??_getModulationDelayTime^(0+256)+2)
 14799  1B3B  00B9               	movwf	(??_getModulationDelayTime^(0+256)+3)
 14800  1B3C  0020               	movlb	0	; select bank0
 14801  1B3D  085E               	movf	_delay_time+3,w	;volatile
 14802  1B3E  0022               	movlb	2	; select bank2
 14803  1B3F  0639               	xorwf	(??_getModulationDelayTime+3)^(0+256),w
 14804  1B40  1D03               	skipz
 14805  1B41  2B52               	goto	u10195
 14806  1B42  0020               	movlb	0	; select bank0
 14807  1B43  085D               	movf	_delay_time+2,w	;volatile
 14808  1B44  0022               	movlb	2	; select bank2
 14809  1B45  0638               	xorwf	(??_getModulationDelayTime+2)^(0+256),w
 14810  1B46  1D03               	skipz
 14811  1B47  2B52               	goto	u10195
 14812  1B48  0020               	movlb	0	; select bank0
 14813  1B49  085C               	movf	_delay_time+1,w	;volatile
 14814  1B4A  0022               	movlb	2	; select bank2
 14815  1B4B  0637               	xorwf	(??_getModulationDelayTime+1)^(0+256),w
 14816  1B4C  1D03               	skipz
 14817  1B4D  2B52               	goto	u10195
 14818  1B4E  0020               	movlb	0	; select bank0
 14819  1B4F  085B               	movf	_delay_time,w	;volatile
 14820  1B50  0022               	movlb	2	; select bank2
 14821  1B51  0636               	xorwf	??_getModulationDelayTime^(0+256),w
 14822  1B52                     u10195:	
 14823  1B52  1903               	skipnz
 14824  1B53  0008               	return
 14825                           
 14826                           ;modulation.c: 40: adjust_mod_delay = 1;
 14827  1B54  0023               	movlb	3	; select bank3
 14828  1B55  01BE               	clrf	_adjust_mod_delay^(0+384)
 14829  1B56  0ABE               	incf	_adjust_mod_delay^(0+384),f
 14830  1B57  0008               	return
 14831  1B58                     __end_of_getModulationDelayTime:	
 14832                           
 14833                           	psect	text44
 14834  2FD0                     __ptext44:	
 14835 ;; *************** function _getModulationSubdivision *****************
 14836 ;; Defined at:
 14837 ;;		line 26 in file "modulation.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;		None
 14840 ;; Auto vars:     Size  Location     Type
 14841 ;;		None
 14842 ;; Return value:  Size  Location     Type
 14843 ;;                  2    0[BANK1 ] int 
 14844 ;; Registers used:
 14845 ;;		wreg, status,2, status,0
 14846 ;; Tracked objects:
 14847 ;;		On entry : 0/0
 14848 ;;		On exit  : 0/0
 14849 ;;		Unchanged: 0/0
 14850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14851 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14854 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14855 ;;Total ram usage:        2 bytes
 14856 ;; Hardware stack levels used:    1
 14857 ;; Hardware stack levels required when called:    3
 14858 ;; This function calls:
 14859 ;;		Nothing
 14860 ;; This function is called by:
 14861 ;;		_getModulationDelayTime
 14862 ;;		_updateModulationArray
 14863 ;; This function uses a non-reentrant model
 14864 ;;
 14865                           
 14866                           
 14867                           ;psect for function _getModulationSubdivision
 14868  2FD0                     _getModulationSubdivision:	
 14869                           
 14870                           ;modulation.c: 27: if (delay_time >= 2400) {
 14871                           
 14872                           ;incstack = 0
 14873                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14874  2FD0  0020               	movlb	0	; select bank0
 14875  2FD1  1BDE               	btfsc	_delay_time+3,7	;volatile
 14876  2FD2  2FE5               	goto	l8294
 14877  2FD3  085E               	movf	_delay_time+3,w	;volatile
 14878  2FD4  1D03               	btfss	3,2
 14879  2FD5  2FDF               	goto	l8288
 14880  2FD6  085D               	movf	_delay_time+2,w	;volatile
 14881  2FD7  1D03               	btfss	3,2
 14882  2FD8  2FDF               	goto	l8288
 14883  2FD9  3060               	movlw	96
 14884  2FDA  025B               	subwf	_delay_time,w	;volatile
 14885  2FDB  3009               	movlw	9
 14886  2FDC  3B5C               	subwfb	_delay_time+1,w	;volatile
 14887  2FDD  1C03               	btfss	3,0
 14888  2FDE  2FE5               	goto	l8294
 14889  2FDF                     l8288:	
 14890                           
 14891                           ;modulation.c: 28: return 120;
 14892  2FDF  3078               	movlw	120
 14893  2FE0  0021               	movlb	1	; select bank1
 14894  2FE1  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14895  2FE2  3000               	movlw	0
 14896  2FE3  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14897                           
 14898                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14899  2FE4  0008               	return
 14900  2FE5                     l8294:	
 14901  2FE5  0020               	movlb	0	; select bank0
 14902  2FE6  1BDE               	btfsc	_delay_time+3,7	;volatile
 14903  2FE7  2FFA               	goto	l8302
 14904  2FE8  085E               	movf	_delay_time+3,w	;volatile
 14905  2FE9  1D03               	btfss	3,2
 14906  2FEA  2FF4               	goto	l8296
 14907  2FEB  085D               	movf	_delay_time+2,w	;volatile
 14908  2FEC  1D03               	btfss	3,2
 14909  2FED  2FF4               	goto	l8296
 14910  2FEE  3058               	movlw	88
 14911  2FEF  025B               	subwf	_delay_time,w	;volatile
 14912  2FF0  3002               	movlw	2
 14913  2FF1  3B5C               	subwfb	_delay_time+1,w	;volatile
 14914  2FF2  1C03               	btfss	3,0
 14915  2FF3  2FFA               	goto	l8302
 14916  2FF4                     l8296:	
 14917                           
 14918                           ;modulation.c: 30: return 60;
 14919  2FF4  303C               	movlw	60
 14920  2FF5  0021               	movlb	1	; select bank1
 14921  2FF6  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14922  2FF7  3000               	movlw	0
 14923  2FF8  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14924                           
 14925                           ;modulation.c: 31: } else {
 14926  2FF9  0008               	return
 14927  2FFA                     l8302:	
 14928                           
 14929                           ;modulation.c: 32: return 30;
 14930  2FFA  301E               	movlw	30
 14931  2FFB  0021               	movlb	1	; select bank1
 14932  2FFC  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14933  2FFD  3000               	movlw	0
 14934  2FFE  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14935  2FFF  0008               	return
 14936  3000                     __end_of_getModulationSubdivision:	
 14937                           
 14938                           	psect	text45
 14939  277F                     __ptext45:	
 14940 ;; *************** function _calcSinArray *****************
 14941 ;; Defined at:
 14942 ;;		line 18 in file "modulation.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;		None
 14945 ;; Auto vars:     Size  Location     Type
 14946 ;;  tmpVal          3   55[BANK2 ] int 
 14947 ;;  iAngle          1   58[BANK2 ] unsigned char 
 14948 ;; Return value:  Size  Location     Type
 14949 ;;                  1    wreg      void 
 14950 ;; Registers used:
 14951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14952 ;; Tracked objects:
 14953 ;;		On entry : 0/0
 14954 ;;		On exit  : 0/0
 14955 ;;		Unchanged: 0/0
 14956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14958 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14959 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14960 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14961 ;;Total ram usage:        8 bytes
 14962 ;; Hardware stack levels used:    1
 14963 ;; Hardware stack levels required when called:    7
 14964 ;; This function calls:
 14965 ;;		___awtoft
 14966 ;;		___ftdiv
 14967 ;;		___ftmul
 14968 ;;		___wmul
 14969 ;;		_sin
 14970 ;; This function is called by:
 14971 ;;		_main
 14972 ;; This function uses a non-reentrant model
 14973 ;;
 14974                           
 14975                           
 14976                           ;psect for function _calcSinArray
 14977  277F                     _calcSinArray:	
 14978                           
 14979                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14980                           
 14981                           ;incstack = 0
 14982                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14983  277F  0022               	movlb	2	; select bank2
 14984  2780  01DA               	clrf	calcSinArray@iAngle^(0+256)
 14985  2781                     L18:	
 14986  2781  3078               	movlw	120
 14987  2782  025A               	subwf	calcSinArray@iAngle^(0+256),w
 14988  2783  1803               	btfsc	3,0
 14989  2784  0008               	return
 14990                           
 14991                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14992  2785  3000               	movlw	0
 14993  2786  0021               	movlb	1	; select bank1
 14994  2787  00CE               	movwf	___ftdiv@f2^(0+128)
 14995  2788  3034               	movlw	52
 14996  2789  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14997  278A  3043               	movlw	67
 14998  278B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14999  278C  3010               	movlw	16
 15000  278D  00AE               	movwf	___ftmul@f1^(0+128)
 15001  278E  3049               	movlw	73
 15002  278F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15003  2790  3040               	movlw	64
 15004  2791  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15005  2792  0022               	movlb	2	; select bank2
 15006  2793  085A               	movf	calcSinArray@iAngle^(0+256),w
 15007  2794  00D3               	movwf	??_calcSinArray^(0+256)
 15008  2795  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 15009  2796  0853               	movf	??_calcSinArray^(0+256),w
 15010  2797  00AE               	movwf	___wmul@multiplier^(0+256)
 15011  2798  0854               	movf	(??_calcSinArray+1)^(0+256),w
 15012  2799  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15013  279A  3003               	movlw	3
 15014  279B  00B0               	movwf	___wmul@multiplicand^(0+256)
 15015  279C  3000               	movlw	0
 15016  279D  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15017  279E  31AE  2640  31A7   	fcall	___wmul
 15018  27A1  0022               	movlb	2	; select bank2
 15019  27A2  082F               	movf	(?___wmul+1)^(0+256),w
 15020  27A3  0021               	movlb	1	; select bank1
 15021  27A4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15022  27A5  0022               	movlb	2	; select bank2
 15023  27A6  082E               	movf	?___wmul^(0+256),w
 15024  27A7  0021               	movlb	1	; select bank1
 15025  27A8  00A8               	movwf	___awtoft@c^(0+128)
 15026  27A9  31AE  26D5  31A7   	fcall	___awtoft
 15027  27AC  0021               	movlb	1	; select bank1
 15028  27AD  0828               	movf	?___awtoft^(0+128),w
 15029  27AE  00B1               	movwf	___ftmul@f2^(0+128)
 15030  27AF  0829               	movf	(?___awtoft+1)^(0+128),w
 15031  27B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15032  27B1  082A               	movf	(?___awtoft+2)^(0+128),w
 15033  27B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15034  27B3  319E  267B  31A7   	fcall	___ftmul
 15035  27B6  0021               	movlb	1	; select bank1
 15036  27B7  082E               	movf	?___ftmul^(0+128),w
 15037  27B8  00D1               	movwf	___ftdiv@f1^(0+128)
 15038  27B9  082F               	movf	(?___ftmul+1)^(0+128),w
 15039  27BA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15040  27BB  0830               	movf	(?___ftmul+2)^(0+128),w
 15041  27BC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15042  27BD  319D  2527  31A7   	fcall	___ftdiv
 15043  27C0  0021               	movlb	1	; select bank1
 15044  27C1  084E               	movf	?___ftdiv^(0+128),w
 15045  27C2  0022               	movlb	2	; select bank2
 15046  27C3  00D7               	movwf	calcSinArray@tmpVal^(0+256)
 15047  27C4  0021               	movlb	1	; select bank1
 15048  27C5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15049  27C6  0022               	movlb	2	; select bank2
 15050  27C7  00D8               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 15051  27C8  0021               	movlb	1	; select bank1
 15052  27C9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15053  27CA  0022               	movlb	2	; select bank2
 15054  27CB  00D9               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 15055                           
 15056                           ;modulation.c: 21: tmpVal = sin(tmpVal);
 15057  27CC  0857               	movf	calcSinArray@tmpVal^(0+256),w
 15058  27CD  00C5               	movwf	sin@f^(0+256)
 15059  27CE  0858               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 15060  27CF  00C6               	movwf	(sin@f+1)^(0+256)
 15061  27D0  0859               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 15062  27D1  00C7               	movwf	(sin@f+2)^(0+256)
 15063  27D2  3188  202E  31A7   	fcall	_sin
 15064  27D5  0022               	movlb	2	; select bank2
 15065  27D6  0845               	movf	?_sin^(0+256),w
 15066  27D7  00D7               	movwf	calcSinArray@tmpVal^(0+256)
 15067  27D8  0846               	movf	(?_sin+1)^(0+256),w
 15068  27D9  00D8               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 15069  27DA  0847               	movf	(?_sin+2)^(0+256),w
 15070  27DB  00D9               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 15071                           
 15072                           ;modulation.c: 22: sinArray[iAngle] = tmpVal;
 15073  27DC  085A               	movf	calcSinArray@iAngle^(0+256),w
 15074  27DD  00D3               	movwf	??_calcSinArray^(0+256)
 15075  27DE  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 15076  27DF  0853               	movf	??_calcSinArray^(0+256),w
 15077  27E0  00AE               	movwf	___wmul@multiplier^(0+256)
 15078  27E1  0854               	movf	(??_calcSinArray+1)^(0+256),w
 15079  27E2  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15080  27E3  3003               	movlw	3
 15081  27E4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15082  27E5  3000               	movlw	0
 15083  27E6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15084  27E7  31AE  2640  31A7   	fcall	___wmul
 15085  27EA  3082               	movlw	130
 15086  27EB  0022               	movlb	2	; select bank2
 15087  27EC  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 15088  27ED  3024               	movlw	36
 15089  27EE  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 15090  27EF  082E               	movf	?___wmul^(0+256),w
 15091  27F0  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 15092  27F1  0086               	movwf	6
 15093  27F2  082F               	movf	(?___wmul+1)^(0+256),w
 15094  27F3  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 15095  27F4  0087               	movwf	7
 15096  27F5  0857               	movf	calcSinArray@tmpVal^(0+256),w
 15097  27F6  3FC0               	movwi [0]fsr1
 15098  27F7  0858               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 15099  27F8  3FC1               	movwi [1]fsr1
 15100  27F9  0859               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 15101  27FA  3FC2               	movwi [2]fsr1
 15102  27FB  3001               	movlw	1
 15103  27FC  00D3               	movwf	??_calcSinArray^(0+256)
 15104  27FD  0853               	movf	??_calcSinArray^(0+256),w
 15105  27FE  07DA               	addwf	calcSinArray@iAngle^(0+256),f
 15106  27FF  2F81               	goto	L18
 15107  2800                     __end_of_calcSinArray:	
 15108                           
 15109                           	psect	text46
 15110  082E                     __ptext46:	
 15111 ;; *************** function _sin *****************
 15112 ;; Defined at:
 15113 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15114 ;; Parameters:    Size  Location     Type
 15115 ;;  f               3   37[BANK2 ] void 
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;  x2              3   47[BANK2 ] void 
 15118 ;;  y               3   41[BANK2 ] void 
 15119 ;;  sgn             1   50[BANK2 ] unsigned char 
 15120 ;; Return value:  Size  Location     Type
 15121 ;;                  3   37[BANK2 ] unsigned char 
 15122 ;; Registers used:
 15123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15124 ;; Tracked objects:
 15125 ;;		On entry : 0/0
 15126 ;;		On exit  : 0/0
 15127 ;;		Unchanged: 0/0
 15128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15129 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15130 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15131 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15132 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15133 ;;Total ram usage:       14 bytes
 15134 ;; Hardware stack levels used:    1
 15135 ;; Hardware stack levels required when called:    6
 15136 ;; This function calls:
 15137 ;;		___ftadd
 15138 ;;		___ftdiv
 15139 ;;		___ftge
 15140 ;;		___ftmul
 15141 ;;		___ftneg
 15142 ;;		___ftsub
 15143 ;;		_eval_poly
 15144 ;;		_floor
 15145 ;; This function is called by:
 15146 ;;		_calcSinArray
 15147 ;; This function uses a non-reentrant model
 15148 ;;
 15149                           
 15150                           
 15151                           ;psect for function _sin
 15152  082E                     _sin:	
 15153                           
 15154                           ;incstack = 0
 15155                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15156  082E  0022               	movlb	2	; select bank2
 15157  082F  01D2               	clrf	sin@sgn^(0+256)
 15158  0830  0845               	movf	sin@f^(0+256),w
 15159  0831  0021               	movlb	1	; select bank1
 15160  0832  00A0               	movwf	___ftge@ff1^(0+128)
 15161  0833  0022               	movlb	2	; select bank2
 15162  0834  0846               	movf	(sin@f+1)^(0+256),w
 15163  0835  0021               	movlb	1	; select bank1
 15164  0836  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15165  0837  0022               	movlb	2	; select bank2
 15166  0838  0847               	movf	(sin@f+2)^(0+256),w
 15167  0839  0021               	movlb	1	; select bank1
 15168  083A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15169  083B  3000               	movlw	0
 15170  083C  00A3               	movwf	___ftge@ff2^(0+128)
 15171  083D  3000               	movlw	0
 15172  083E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15173  083F  3000               	movlw	0
 15174  0840  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15175  0841  31A1  212A  3188   	fcall	___ftge
 15176  0844  1803               	btfsc	3,0
 15177  0845  2863               	goto	l8482
 15178  0846  0022               	movlb	2	; select bank2
 15179  0847  0845               	movf	sin@f^(0+256),w
 15180  0848  0021               	movlb	1	; select bank1
 15181  0849  00BE               	movwf	___ftneg@f1^(0+128)
 15182  084A  0022               	movlb	2	; select bank2
 15183  084B  0846               	movf	(sin@f+1)^(0+256),w
 15184  084C  0021               	movlb	1	; select bank1
 15185  084D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15186  084E  0022               	movlb	2	; select bank2
 15187  084F  0847               	movf	(sin@f+2)^(0+256),w
 15188  0850  0021               	movlb	1	; select bank1
 15189  0851  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15190  0852  31AD  258A  3188   	fcall	___ftneg
 15191  0855  0021               	movlb	1	; select bank1
 15192  0856  083E               	movf	?___ftneg^(0+128),w
 15193  0857  0022               	movlb	2	; select bank2
 15194  0858  00C5               	movwf	sin@f^(0+256)
 15195  0859  0021               	movlb	1	; select bank1
 15196  085A  083F               	movf	(?___ftneg+1)^(0+128),w
 15197  085B  0022               	movlb	2	; select bank2
 15198  085C  00C6               	movwf	(sin@f+1)^(0+256)
 15199  085D  0021               	movlb	1	; select bank1
 15200  085E  0840               	movf	(?___ftneg+2)^(0+128),w
 15201  085F  0022               	movlb	2	; select bank2
 15202  0860  00C7               	movwf	(sin@f+2)^(0+256)
 15203  0861  01D2               	clrf	sin@sgn^(0+256)
 15204  0862  0AD2               	incf	sin@sgn^(0+256),f
 15205  0863                     l8482:	
 15206  0863  30FA               	movlw	250
 15207  0864  0021               	movlb	1	; select bank1
 15208  0865  00AE               	movwf	___ftmul@f1^(0+128)
 15209  0866  3022               	movlw	34
 15210  0867  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15211  0868  303E               	movlw	62
 15212  0869  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15213  086A  0022               	movlb	2	; select bank2
 15214  086B  0845               	movf	sin@f^(0+256),w
 15215  086C  0021               	movlb	1	; select bank1
 15216  086D  00B1               	movwf	___ftmul@f2^(0+128)
 15217  086E  0022               	movlb	2	; select bank2
 15218  086F  0846               	movf	(sin@f+1)^(0+256),w
 15219  0870  0021               	movlb	1	; select bank1
 15220  0871  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15221  0872  0022               	movlb	2	; select bank2
 15222  0873  0847               	movf	(sin@f+2)^(0+256),w
 15223  0874  0021               	movlb	1	; select bank1
 15224  0875  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15225  0876  319E  267B  3188   	fcall	___ftmul
 15226  0879  0021               	movlb	1	; select bank1
 15227  087A  082E               	movf	?___ftmul^(0+128),w
 15228  087B  0022               	movlb	2	; select bank2
 15229  087C  00C5               	movwf	sin@f^(0+256)
 15230  087D  0021               	movlb	1	; select bank1
 15231  087E  082F               	movf	(?___ftmul+1)^(0+128),w
 15232  087F  0022               	movlb	2	; select bank2
 15233  0880  00C6               	movwf	(sin@f+1)^(0+256)
 15234  0881  0021               	movlb	1	; select bank1
 15235  0882  0830               	movf	(?___ftmul+2)^(0+128),w
 15236  0883  0022               	movlb	2	; select bank2
 15237  0884  00C7               	movwf	(sin@f+2)^(0+256)
 15238  0885  0845               	movf	sin@f^(0+256),w
 15239  0886  00B6               	movwf	floor@x^(0+256)
 15240  0887  0846               	movf	(sin@f+1)^(0+256),w
 15241  0888  00B7               	movwf	(floor@x+1)^(0+256)
 15242  0889  0847               	movf	(sin@f+2)^(0+256),w
 15243  088A  00B8               	movwf	(floor@x+2)^(0+256)
 15244  088B  319C  2480  3188   	fcall	_floor
 15245  088E  0022               	movlb	2	; select bank2
 15246  088F  0836               	movf	?_floor^(0+256),w
 15247  0890  00BF               	movwf	___ftsub@f2^(0+256)
 15248  0891  0837               	movf	(?_floor+1)^(0+256),w
 15249  0892  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 15250  0893  0838               	movf	(?_floor+2)^(0+256),w
 15251  0894  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 15252  0895  0845               	movf	sin@f^(0+256),w
 15253  0896  00C2               	movwf	___ftsub@f1^(0+256)
 15254  0897  0846               	movf	(sin@f+1)^(0+256),w
 15255  0898  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 15256  0899  0847               	movf	(sin@f+2)^(0+256),w
 15257  089A  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 15258  089B  3188  2000  3188   	fcall	___ftsub
 15259  089E  0022               	movlb	2	; select bank2
 15260  089F  083F               	movf	?___ftsub^(0+256),w
 15261  08A0  00C5               	movwf	sin@f^(0+256)
 15262  08A1  0840               	movf	(?___ftsub+1)^(0+256),w
 15263  08A2  00C6               	movwf	(sin@f+1)^(0+256)
 15264  08A3  0841               	movf	(?___ftsub+2)^(0+256),w
 15265  08A4  00C7               	movwf	(sin@f+2)^(0+256)
 15266  08A5  3000               	movlw	0
 15267  08A6  0021               	movlb	1	; select bank1
 15268  08A7  00AE               	movwf	___ftmul@f1^(0+128)
 15269  08A8  3080               	movlw	128
 15270  08A9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15271  08AA  3040               	movlw	64
 15272  08AB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15273  08AC  0022               	movlb	2	; select bank2
 15274  08AD  0845               	movf	sin@f^(0+256),w
 15275  08AE  0021               	movlb	1	; select bank1
 15276  08AF  00B1               	movwf	___ftmul@f2^(0+128)
 15277  08B0  0022               	movlb	2	; select bank2
 15278  08B1  0846               	movf	(sin@f+1)^(0+256),w
 15279  08B2  0021               	movlb	1	; select bank1
 15280  08B3  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15281  08B4  0022               	movlb	2	; select bank2
 15282  08B5  0847               	movf	(sin@f+2)^(0+256),w
 15283  08B6  0021               	movlb	1	; select bank1
 15284  08B7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15285  08B8  319E  267B  3188   	fcall	___ftmul
 15286  08BB  0021               	movlb	1	; select bank1
 15287  08BC  082E               	movf	?___ftmul^(0+128),w
 15288  08BD  0022               	movlb	2	; select bank2
 15289  08BE  00C5               	movwf	sin@f^(0+256)
 15290  08BF  0021               	movlb	1	; select bank1
 15291  08C0  082F               	movf	(?___ftmul+1)^(0+128),w
 15292  08C1  0022               	movlb	2	; select bank2
 15293  08C2  00C6               	movwf	(sin@f+1)^(0+256)
 15294  08C3  0021               	movlb	1	; select bank1
 15295  08C4  0830               	movf	(?___ftmul+2)^(0+128),w
 15296  08C5  0022               	movlb	2	; select bank2
 15297  08C6  00C7               	movwf	(sin@f+2)^(0+256)
 15298  08C7  3000               	movlw	0
 15299  08C8  0021               	movlb	1	; select bank1
 15300  08C9  00A0               	movwf	___ftge@ff1^(0+128)
 15301  08CA  3000               	movlw	0
 15302  08CB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15303  08CC  3040               	movlw	64
 15304  08CD  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15305  08CE  0022               	movlb	2	; select bank2
 15306  08CF  0845               	movf	sin@f^(0+256),w
 15307  08D0  0021               	movlb	1	; select bank1
 15308  08D1  00A3               	movwf	___ftge@ff2^(0+128)
 15309  08D2  0022               	movlb	2	; select bank2
 15310  08D3  0846               	movf	(sin@f+1)^(0+256),w
 15311  08D4  0021               	movlb	1	; select bank1
 15312  08D5  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15313  08D6  0022               	movlb	2	; select bank2
 15314  08D7  0847               	movf	(sin@f+2)^(0+256),w
 15315  08D8  0021               	movlb	1	; select bank1
 15316  08D9  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15317  08DA  31A1  212A  3188   	fcall	___ftge
 15318  08DD  1803               	btfsc	3,0
 15319  08DE  28FF               	goto	l8494
 15320  08DF  3000               	movlw	0
 15321  08E0  0022               	movlb	2	; select bank2
 15322  08E1  00BF               	movwf	___ftsub@f2^(0+256)
 15323  08E2  3000               	movlw	0
 15324  08E3  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 15325  08E4  3040               	movlw	64
 15326  08E5  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 15327  08E6  0845               	movf	sin@f^(0+256),w
 15328  08E7  00C2               	movwf	___ftsub@f1^(0+256)
 15329  08E8  0846               	movf	(sin@f+1)^(0+256),w
 15330  08E9  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 15331  08EA  0847               	movf	(sin@f+2)^(0+256),w
 15332  08EB  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 15333  08EC  3188  2000  3188   	fcall	___ftsub
 15334  08EF  0022               	movlb	2	; select bank2
 15335  08F0  083F               	movf	?___ftsub^(0+256),w
 15336  08F1  00C5               	movwf	sin@f^(0+256)
 15337  08F2  0840               	movf	(?___ftsub+1)^(0+256),w
 15338  08F3  00C6               	movwf	(sin@f+1)^(0+256)
 15339  08F4  0841               	movf	(?___ftsub+2)^(0+256),w
 15340  08F5  00C7               	movwf	(sin@f+2)^(0+256)
 15341  08F6  0852               	movf	sin@sgn^(0+256),w
 15342  08F7  1D03               	btfss	3,2
 15343  08F8  28FB               	goto	u8950
 15344  08F9  3001               	movlw	1
 15345  08FA  28FC               	goto	u8960
 15346  08FB                     u8950:	
 15347  08FB  3000               	movlw	0
 15348  08FC                     u8960:	
 15349  08FC  00C8               	movwf	??_sin^(0+256)
 15350  08FD  0848               	movf	??_sin^(0+256),w
 15351  08FE  00D2               	movwf	sin@sgn^(0+256)
 15352  08FF                     l8494:	
 15353  08FF  3000               	movlw	0
 15354  0900  0021               	movlb	1	; select bank1
 15355  0901  00A0               	movwf	___ftge@ff1^(0+128)
 15356  0902  3080               	movlw	128
 15357  0903  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15358  0904  303F               	movlw	63
 15359  0905  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15360  0906  0022               	movlb	2	; select bank2
 15361  0907  0845               	movf	sin@f^(0+256),w
 15362  0908  0021               	movlb	1	; select bank1
 15363  0909  00A3               	movwf	___ftge@ff2^(0+128)
 15364  090A  0022               	movlb	2	; select bank2
 15365  090B  0846               	movf	(sin@f+1)^(0+256),w
 15366  090C  0021               	movlb	1	; select bank1
 15367  090D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15368  090E  0022               	movlb	2	; select bank2
 15369  090F  0847               	movf	(sin@f+2)^(0+256),w
 15370  0910  0021               	movlb	1	; select bank1
 15371  0911  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15372  0912  31A1  212A  3188   	fcall	___ftge
 15373  0915  1803               	btfsc	3,0
 15374  0916  2943               	goto	l2323
 15375  0917  3000               	movlw	0
 15376  0918  0021               	movlb	1	; select bank1
 15377  0919  00C1               	movwf	___ftadd@f1^(0+128)
 15378  091A  3000               	movlw	0
 15379  091B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15380  091C  3040               	movlw	64
 15381  091D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15382  091E  0022               	movlb	2	; select bank2
 15383  091F  0845               	movf	sin@f^(0+256),w
 15384  0920  0021               	movlb	1	; select bank1
 15385  0921  00BE               	movwf	___ftneg@f1^(0+128)
 15386  0922  0022               	movlb	2	; select bank2
 15387  0923  0846               	movf	(sin@f+1)^(0+256),w
 15388  0924  0021               	movlb	1	; select bank1
 15389  0925  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15390  0926  0022               	movlb	2	; select bank2
 15391  0927  0847               	movf	(sin@f+2)^(0+256),w
 15392  0928  0021               	movlb	1	; select bank1
 15393  0929  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15394  092A  31AD  258A  3188   	fcall	___ftneg
 15395  092D  0021               	movlb	1	; select bank1
 15396  092E  083E               	movf	?___ftneg^(0+128),w
 15397  092F  00C4               	movwf	___ftadd@f2^(0+128)
 15398  0930  083F               	movf	(?___ftneg+1)^(0+128),w
 15399  0931  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15400  0932  0840               	movf	(?___ftneg+2)^(0+128),w
 15401  0933  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15402  0934  3190  2026  3188   	fcall	___ftadd
 15403  0937  0021               	movlb	1	; select bank1
 15404  0938  0841               	movf	?___ftadd^(0+128),w
 15405  0939  0022               	movlb	2	; select bank2
 15406  093A  00C5               	movwf	sin@f^(0+256)
 15407  093B  0021               	movlb	1	; select bank1
 15408  093C  0842               	movf	(?___ftadd+1)^(0+128),w
 15409  093D  0022               	movlb	2	; select bank2
 15410  093E  00C6               	movwf	(sin@f+1)^(0+256)
 15411  093F  0021               	movlb	1	; select bank1
 15412  0940  0843               	movf	(?___ftadd+2)^(0+128),w
 15413  0941  0022               	movlb	2	; select bank2
 15414  0942  00C7               	movwf	(sin@f+2)^(0+256)
 15415  0943                     l2323:	
 15416  0943  0022               	movlb	2	; select bank2
 15417  0944  0845               	movf	sin@f^(0+256),w
 15418  0945  0021               	movlb	1	; select bank1
 15419  0946  00AE               	movwf	___ftmul@f1^(0+128)
 15420  0947  0022               	movlb	2	; select bank2
 15421  0948  0846               	movf	(sin@f+1)^(0+256),w
 15422  0949  0021               	movlb	1	; select bank1
 15423  094A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15424  094B  0022               	movlb	2	; select bank2
 15425  094C  0847               	movf	(sin@f+2)^(0+256),w
 15426  094D  0021               	movlb	1	; select bank1
 15427  094E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15428  094F  0022               	movlb	2	; select bank2
 15429  0950  0845               	movf	sin@f^(0+256),w
 15430  0951  0021               	movlb	1	; select bank1
 15431  0952  00B1               	movwf	___ftmul@f2^(0+128)
 15432  0953  0022               	movlb	2	; select bank2
 15433  0954  0846               	movf	(sin@f+1)^(0+256),w
 15434  0955  0021               	movlb	1	; select bank1
 15435  0956  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15436  0957  0022               	movlb	2	; select bank2
 15437  0958  0847               	movf	(sin@f+2)^(0+256),w
 15438  0959  0021               	movlb	1	; select bank1
 15439  095A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15440  095B  319E  267B  3188   	fcall	___ftmul
 15441  095E  0021               	movlb	1	; select bank1
 15442  095F  082E               	movf	?___ftmul^(0+128),w
 15443  0960  0022               	movlb	2	; select bank2
 15444  0961  00CF               	movwf	sin@x2^(0+256)
 15445  0962  0021               	movlb	1	; select bank1
 15446  0963  082F               	movf	(?___ftmul+1)^(0+128),w
 15447  0964  0022               	movlb	2	; select bank2
 15448  0965  00D0               	movwf	(sin@x2+1)^(0+256)
 15449  0966  0021               	movlb	1	; select bank1
 15450  0967  0830               	movf	(?___ftmul+2)^(0+128),w
 15451  0968  0022               	movlb	2	; select bank2
 15452  0969  00D1               	movwf	(sin@x2+2)^(0+256)
 15453  096A  084F               	movf	sin@x2^(0+256),w
 15454  096B  00B4               	movwf	eval_poly@x^(0+256)
 15455  096C  0850               	movf	(sin@x2+1)^(0+256),w
 15456  096D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15457  096E  0851               	movf	(sin@x2+2)^(0+256),w
 15458  096F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15459  0970  3048               	movlw	low (sin@coeff_b| (0+32768))
 15460  0971  00B7               	movwf	eval_poly@d^(0+256)
 15461  0972  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15462  0973  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15463  0974  3003               	movlw	3
 15464  0975  00B9               	movwf	eval_poly@n^(0+256)
 15465  0976  3000               	movlw	0
 15466  0977  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15467  0978  31A6  2697  3188   	fcall	_eval_poly
 15468  097B  0022               	movlb	2	; select bank2
 15469  097C  0834               	movf	?_eval_poly^(0+256),w
 15470  097D  00C9               	movwf	sin@y^(0+256)
 15471  097E  0835               	movf	(?_eval_poly+1)^(0+256),w
 15472  097F  00CA               	movwf	(sin@y+1)^(0+256)
 15473  0980  0836               	movf	(?_eval_poly+2)^(0+256),w
 15474  0981  00CB               	movwf	(sin@y+2)^(0+256)
 15475  0982  3004               	movlw	4
 15476  0983  00B9               	movwf	eval_poly@n^(0+256)
 15477  0984  3000               	movlw	0
 15478  0985  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15479  0986  3039               	movlw	low (sin@coeff_a| (0+32768))
 15480  0987  00B7               	movwf	eval_poly@d^(0+256)
 15481  0988  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15482  0989  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15483  098A  084F               	movf	sin@x2^(0+256),w
 15484  098B  00B4               	movwf	eval_poly@x^(0+256)
 15485  098C  0850               	movf	(sin@x2+1)^(0+256),w
 15486  098D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15487  098E  0851               	movf	(sin@x2+2)^(0+256),w
 15488  098F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15489  0990  31A6  2697  3188   	fcall	_eval_poly
 15490  0993  0022               	movlb	2	; select bank2
 15491  0994  0834               	movf	?_eval_poly^(0+256),w
 15492  0995  0021               	movlb	1	; select bank1
 15493  0996  00D1               	movwf	___ftdiv@f1^(0+128)
 15494  0997  0022               	movlb	2	; select bank2
 15495  0998  0835               	movf	(?_eval_poly+1)^(0+256),w
 15496  0999  0021               	movlb	1	; select bank1
 15497  099A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15498  099B  0022               	movlb	2	; select bank2
 15499  099C  0836               	movf	(?_eval_poly+2)^(0+256),w
 15500  099D  0021               	movlb	1	; select bank1
 15501  099E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15502  099F  0022               	movlb	2	; select bank2
 15503  09A0  0849               	movf	sin@y^(0+256),w
 15504  09A1  0021               	movlb	1	; select bank1
 15505  09A2  00CE               	movwf	___ftdiv@f2^(0+128)
 15506  09A3  0022               	movlb	2	; select bank2
 15507  09A4  084A               	movf	(sin@y+1)^(0+256),w
 15508  09A5  0021               	movlb	1	; select bank1
 15509  09A6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15510  09A7  0022               	movlb	2	; select bank2
 15511  09A8  084B               	movf	(sin@y+2)^(0+256),w
 15512  09A9  0021               	movlb	1	; select bank1
 15513  09AA  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15514  09AB  319D  2527  3188   	fcall	___ftdiv
 15515  09AE  0021               	movlb	1	; select bank1
 15516  09AF  084E               	movf	?___ftdiv^(0+128),w
 15517  09B0  0022               	movlb	2	; select bank2
 15518  09B1  00CC               	movwf	_sin$2851^(0+256)
 15519  09B2  0021               	movlb	1	; select bank1
 15520  09B3  084F               	movf	(?___ftdiv+1)^(0+128),w
 15521  09B4  0022               	movlb	2	; select bank2
 15522  09B5  00CD               	movwf	(_sin$2851+1)^(0+256)
 15523  09B6  0021               	movlb	1	; select bank1
 15524  09B7  0850               	movf	(?___ftdiv+2)^(0+128),w
 15525  09B8  0022               	movlb	2	; select bank2
 15526  09B9  00CE               	movwf	(_sin$2851+2)^(0+256)
 15527  09BA  084C               	movf	_sin$2851^(0+256),w
 15528  09BB  0021               	movlb	1	; select bank1
 15529  09BC  00AE               	movwf	___ftmul@f1^(0+128)
 15530  09BD  0022               	movlb	2	; select bank2
 15531  09BE  084D               	movf	(_sin$2851+1)^(0+256),w
 15532  09BF  0021               	movlb	1	; select bank1
 15533  09C0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15534  09C1  0022               	movlb	2	; select bank2
 15535  09C2  084E               	movf	(_sin$2851+2)^(0+256),w
 15536  09C3  0021               	movlb	1	; select bank1
 15537  09C4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15538  09C5  0022               	movlb	2	; select bank2
 15539  09C6  0845               	movf	sin@f^(0+256),w
 15540  09C7  0021               	movlb	1	; select bank1
 15541  09C8  00B1               	movwf	___ftmul@f2^(0+128)
 15542  09C9  0022               	movlb	2	; select bank2
 15543  09CA  0846               	movf	(sin@f+1)^(0+256),w
 15544  09CB  0021               	movlb	1	; select bank1
 15545  09CC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15546  09CD  0022               	movlb	2	; select bank2
 15547  09CE  0847               	movf	(sin@f+2)^(0+256),w
 15548  09CF  0021               	movlb	1	; select bank1
 15549  09D0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15550  09D1  319E  267B  3188   	fcall	___ftmul
 15551  09D4  0021               	movlb	1	; select bank1
 15552  09D5  082E               	movf	?___ftmul^(0+128),w
 15553  09D6  0022               	movlb	2	; select bank2
 15554  09D7  00C5               	movwf	sin@f^(0+256)
 15555  09D8  0021               	movlb	1	; select bank1
 15556  09D9  082F               	movf	(?___ftmul+1)^(0+128),w
 15557  09DA  0022               	movlb	2	; select bank2
 15558  09DB  00C6               	movwf	(sin@f+1)^(0+256)
 15559  09DC  0021               	movlb	1	; select bank1
 15560  09DD  0830               	movf	(?___ftmul+2)^(0+128),w
 15561  09DE  0022               	movlb	2	; select bank2
 15562  09DF  00C7               	movwf	(sin@f+2)^(0+256)
 15563  09E0  0852               	movf	sin@sgn^(0+256),w
 15564  09E1  1903               	btfsc	3,2
 15565  09E2  0008               	return
 15566  09E3  0845               	movf	sin@f^(0+256),w
 15567  09E4  0021               	movlb	1	; select bank1
 15568  09E5  00BE               	movwf	___ftneg@f1^(0+128)
 15569  09E6  0022               	movlb	2	; select bank2
 15570  09E7  0846               	movf	(sin@f+1)^(0+256),w
 15571  09E8  0021               	movlb	1	; select bank1
 15572  09E9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15573  09EA  0022               	movlb	2	; select bank2
 15574  09EB  0847               	movf	(sin@f+2)^(0+256),w
 15575  09EC  0021               	movlb	1	; select bank1
 15576  09ED  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15577  09EE  31AD  258A         	fcall	___ftneg
 15578  09F0  0021               	movlb	1	; select bank1
 15579  09F1  083E               	movf	?___ftneg^(0+128),w
 15580  09F2  0022               	movlb	2	; select bank2
 15581  09F3  00C5               	movwf	?_sin^(0+256)
 15582  09F4  0021               	movlb	1	; select bank1
 15583  09F5  083F               	movf	(?___ftneg+1)^(0+128),w
 15584  09F6  0022               	movlb	2	; select bank2
 15585  09F7  00C6               	movwf	(?_sin+1)^(0+256)
 15586  09F8  0021               	movlb	1	; select bank1
 15587  09F9  0840               	movf	(?___ftneg+2)^(0+128),w
 15588  09FA  0022               	movlb	2	; select bank2
 15589  09FB  00C7               	movwf	(?_sin+2)^(0+256)
 15590  09FC  0008               	return
 15591  09FD                     __end_of_sin:	
 15592                           
 15593                           	psect	text47
 15594  1C80                     __ptext47:	
 15595 ;; *************** function _floor *****************
 15596 ;; Defined at:
 15597 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15598 ;; Parameters:    Size  Location     Type
 15599 ;;  x               3   22[BANK2 ] unsigned char 
 15600 ;; Auto vars:     Size  Location     Type
 15601 ;;  i               3   26[BANK2 ] unsigned char 
 15602 ;;  expon           2   29[BANK2 ] int 
 15603 ;; Return value:  Size  Location     Type
 15604 ;;                  3   22[BANK2 ] int 
 15605 ;; Registers used:
 15606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15612 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15613 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15614 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15615 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15616 ;;Total ram usage:        9 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:    5
 15619 ;; This function calls:
 15620 ;;		___altoft
 15621 ;;		___ftadd
 15622 ;;		___ftge
 15623 ;;		___fttol
 15624 ;;		_frexp
 15625 ;; This function is called by:
 15626 ;;		_sin
 15627 ;;		_exp
 15628 ;; This function uses a non-reentrant model
 15629 ;;
 15630                           
 15631                           
 15632                           ;psect for function _floor
 15633  1C80                     _floor:	
 15634                           
 15635                           ;incstack = 0
 15636                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15637  1C80  0022               	movlb	2	; select bank2
 15638  1C81  0836               	movf	floor@x^(0+256),w
 15639  1C82  0021               	movlb	1	; select bank1
 15640  1C83  00A0               	movwf	frexp@value^(0+128)
 15641  1C84  0022               	movlb	2	; select bank2
 15642  1C85  0837               	movf	(floor@x+1)^(0+256),w
 15643  1C86  0021               	movlb	1	; select bank1
 15644  1C87  00A1               	movwf	(frexp@value+1)^(0+128)
 15645  1C88  0022               	movlb	2	; select bank2
 15646  1C89  0838               	movf	(floor@x+2)^(0+256),w
 15647  1C8A  0021               	movlb	1	; select bank1
 15648  1C8B  00A2               	movwf	(frexp@value+2)^(0+128)
 15649  1C8C  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15650  1C8D  0022               	movlb	2	; select bank2
 15651  1C8E  00B9               	movwf	??_floor^(0+256)
 15652  1C8F  0839               	movf	??_floor^(0+256),w
 15653  1C90  0021               	movlb	1	; select bank1
 15654  1C91  00A3               	movwf	frexp@eptr^(0+128)
 15655  1C92  31A1  21E1  319C   	fcall	_frexp
 15656  1C95  0022               	movlb	2	; select bank2
 15657  1C96  1FBE               	btfss	(floor@expon+1)^(0+256),7
 15658  1C97  2CBE               	goto	l8056
 15659  1C98  0836               	movf	floor@x^(0+256),w
 15660  1C99  0021               	movlb	1	; select bank1
 15661  1C9A  00A0               	movwf	___ftge@ff1^(0+128)
 15662  1C9B  0022               	movlb	2	; select bank2
 15663  1C9C  0837               	movf	(floor@x+1)^(0+256),w
 15664  1C9D  0021               	movlb	1	; select bank1
 15665  1C9E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15666  1C9F  0022               	movlb	2	; select bank2
 15667  1CA0  0838               	movf	(floor@x+2)^(0+256),w
 15668  1CA1  0021               	movlb	1	; select bank1
 15669  1CA2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15670  1CA3  3000               	movlw	0
 15671  1CA4  00A3               	movwf	___ftge@ff2^(0+128)
 15672  1CA5  3000               	movlw	0
 15673  1CA6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15674  1CA7  3000               	movlw	0
 15675  1CA8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15676  1CA9  31A1  212A  319C   	fcall	___ftge
 15677  1CAC  1803               	btfsc	3,0
 15678  1CAD  2CB6               	goto	l8052
 15679  1CAE  3000               	movlw	0
 15680  1CAF  0022               	movlb	2	; select bank2
 15681  1CB0  00B6               	movwf	?_floor^(0+256)
 15682  1CB1  3080               	movlw	128
 15683  1CB2  00B7               	movwf	(?_floor+1)^(0+256)
 15684  1CB3  30BF               	movlw	191
 15685  1CB4  00B8               	movwf	(?_floor+2)^(0+256)
 15686  1CB5  0008               	return
 15687  1CB6                     l8052:	
 15688  1CB6  3000               	movlw	0
 15689  1CB7  0022               	movlb	2	; select bank2
 15690  1CB8  00B6               	movwf	?_floor^(0+256)
 15691  1CB9  3000               	movlw	0
 15692  1CBA  00B7               	movwf	(?_floor+1)^(0+256)
 15693  1CBB  3000               	movlw	0
 15694  1CBC  00B8               	movwf	(?_floor+2)^(0+256)
 15695  1CBD  0008               	return
 15696  1CBE                     l8056:	
 15697  1CBE  3000               	movlw	0
 15698  1CBF  023E               	subwf	(floor@expon+1)^(0+256),w
 15699  1CC0  3015               	movlw	21
 15700  1CC1  1903               	skipnz
 15701  1CC2  023D               	subwf	floor@expon^(0+256),w
 15702  1CC3  1803               	btfsc	3,0
 15703  1CC4  0008               	return
 15704  1CC5  0836               	movf	floor@x^(0+256),w
 15705  1CC6  00A0               	movwf	___fttol@f1^(0+256)
 15706  1CC7  0837               	movf	(floor@x+1)^(0+256),w
 15707  1CC8  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15708  1CC9  0838               	movf	(floor@x+2)^(0+256),w
 15709  1CCA  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15710  1CCB  3199  21BA  319C   	fcall	___fttol
 15711  1CCE  0022               	movlb	2	; select bank2
 15712  1CCF  0823               	movf	(?___fttol+3)^(0+256),w
 15713  1CD0  00B1               	movwf	(___altoft@c+3)^(0+256)
 15714  1CD1  0822               	movf	(?___fttol+2)^(0+256),w
 15715  1CD2  00B0               	movwf	(___altoft@c+2)^(0+256)
 15716  1CD3  0821               	movf	(?___fttol+1)^(0+256),w
 15717  1CD4  00AF               	movwf	(___altoft@c+1)^(0+256)
 15718  1CD5  0820               	movf	?___fttol^(0+256),w
 15719  1CD6  00AE               	movwf	___altoft@c^(0+256)
 15720  1CD7  31A4  2447  319C   	fcall	___altoft
 15721  1CDA  0022               	movlb	2	; select bank2
 15722  1CDB  082E               	movf	?___altoft^(0+256),w
 15723  1CDC  00BA               	movwf	floor@i^(0+256)
 15724  1CDD  082F               	movf	(?___altoft+1)^(0+256),w
 15725  1CDE  00BB               	movwf	(floor@i+1)^(0+256)
 15726  1CDF  0830               	movf	(?___altoft+2)^(0+256),w
 15727  1CE0  00BC               	movwf	(floor@i+2)^(0+256)
 15728  1CE1  0836               	movf	floor@x^(0+256),w
 15729  1CE2  0021               	movlb	1	; select bank1
 15730  1CE3  00A0               	movwf	___ftge@ff1^(0+128)
 15731  1CE4  0022               	movlb	2	; select bank2
 15732  1CE5  0837               	movf	(floor@x+1)^(0+256),w
 15733  1CE6  0021               	movlb	1	; select bank1
 15734  1CE7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15735  1CE8  0022               	movlb	2	; select bank2
 15736  1CE9  0838               	movf	(floor@x+2)^(0+256),w
 15737  1CEA  0021               	movlb	1	; select bank1
 15738  1CEB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15739  1CEC  0022               	movlb	2	; select bank2
 15740  1CED  083A               	movf	floor@i^(0+256),w
 15741  1CEE  0021               	movlb	1	; select bank1
 15742  1CEF  00A3               	movwf	___ftge@ff2^(0+128)
 15743  1CF0  0022               	movlb	2	; select bank2
 15744  1CF1  083B               	movf	(floor@i+1)^(0+256),w
 15745  1CF2  0021               	movlb	1	; select bank1
 15746  1CF3  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15747  1CF4  0022               	movlb	2	; select bank2
 15748  1CF5  083C               	movf	(floor@i+2)^(0+256),w
 15749  1CF6  0021               	movlb	1	; select bank1
 15750  1CF7  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15751  1CF8  31A1  212A  319C   	fcall	___ftge
 15752  1CFB  1803               	btfsc	3,0
 15753  1CFC  2D1F               	goto	l8066
 15754  1CFD  3000               	movlw	0
 15755  1CFE  0021               	movlb	1	; select bank1
 15756  1CFF  00C1               	movwf	___ftadd@f1^(0+128)
 15757  1D00  3080               	movlw	128
 15758  1D01  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15759  1D02  30BF               	movlw	191
 15760  1D03  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15761  1D04  0022               	movlb	2	; select bank2
 15762  1D05  083A               	movf	floor@i^(0+256),w
 15763  1D06  0021               	movlb	1	; select bank1
 15764  1D07  00C4               	movwf	___ftadd@f2^(0+128)
 15765  1D08  0022               	movlb	2	; select bank2
 15766  1D09  083B               	movf	(floor@i+1)^(0+256),w
 15767  1D0A  0021               	movlb	1	; select bank1
 15768  1D0B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15769  1D0C  0022               	movlb	2	; select bank2
 15770  1D0D  083C               	movf	(floor@i+2)^(0+256),w
 15771  1D0E  0021               	movlb	1	; select bank1
 15772  1D0F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15773  1D10  3190  2026         	fcall	___ftadd
 15774  1D12  0021               	movlb	1	; select bank1
 15775  1D13  0841               	movf	?___ftadd^(0+128),w
 15776  1D14  0022               	movlb	2	; select bank2
 15777  1D15  00B6               	movwf	?_floor^(0+256)
 15778  1D16  0021               	movlb	1	; select bank1
 15779  1D17  0842               	movf	(?___ftadd+1)^(0+128),w
 15780  1D18  0022               	movlb	2	; select bank2
 15781  1D19  00B7               	movwf	(?_floor+1)^(0+256)
 15782  1D1A  0021               	movlb	1	; select bank1
 15783  1D1B  0843               	movf	(?___ftadd+2)^(0+128),w
 15784  1D1C  0022               	movlb	2	; select bank2
 15785  1D1D  00B8               	movwf	(?_floor+2)^(0+256)
 15786  1D1E  0008               	return
 15787  1D1F                     l8066:	
 15788  1D1F  0022               	movlb	2	; select bank2
 15789  1D20  083A               	movf	floor@i^(0+256),w
 15790  1D21  00B6               	movwf	?_floor^(0+256)
 15791  1D22  083B               	movf	(floor@i+1)^(0+256),w
 15792  1D23  00B7               	movwf	(?_floor+1)^(0+256)
 15793  1D24  083C               	movf	(floor@i+2)^(0+256),w
 15794  1D25  00B8               	movwf	(?_floor+2)^(0+256)
 15795  1D26  0008               	return
 15796  1D27                     __end_of_floor:	
 15797                           
 15798                           	psect	text48
 15799  21E1                     __ptext48:	
 15800 ;; *************** function _frexp *****************
 15801 ;; Defined at:
 15802 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15803 ;; Parameters:    Size  Location     Type
 15804 ;;  value           3    0[BANK1 ] int 
 15805 ;;  eptr            1    3[BANK1 ] PTR int 
 15806 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;		None
 15809 ;; Return value:  Size  Location     Type
 15810 ;;                  3    0[BANK1 ] PTR int 
 15811 ;; Registers used:
 15812 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15813 ;; Tracked objects:
 15814 ;;		On entry : 0/0
 15815 ;;		On exit  : 0/0
 15816 ;;		Unchanged: 0/0
 15817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15818 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15820 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15821 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15822 ;;Total ram usage:        6 bytes
 15823 ;; Hardware stack levels used:    1
 15824 ;; Hardware stack levels required when called:    3
 15825 ;; This function calls:
 15826 ;;		Nothing
 15827 ;; This function is called by:
 15828 ;;		_trunc
 15829 ;;		_floor
 15830 ;;		_log
 15831 ;; This function uses a non-reentrant model
 15832 ;;
 15833                           
 15834                           
 15835                           ;psect for function _frexp
 15836  21E1                     _frexp:	
 15837                           
 15838                           ;incstack = 0
 15839                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15840  21E1  0021               	movlb	1	; select bank1
 15841  21E2  0822               	movf	(frexp@value+2)^(0+128),w
 15842  21E3  0421               	iorwf	(frexp@value+1)^(0+128),w
 15843  21E4  0420               	iorwf	frexp@value^(0+128),w
 15844  21E5  1D03               	skipz
 15845  21E6  29F5               	goto	l7918
 15846  21E7  0823               	movf	frexp@eptr^(0+128),w
 15847  21E8  0086               	movwf	6
 15848  21E9  3001               	movlw	1	; select bank2/3
 15849  21EA  0087               	movwf	7
 15850  21EB  3000               	movlw	0
 15851  21EC  3FC0               	movwi [0]fsr1
 15852  21ED  3FC1               	movwi [1]fsr1
 15853  21EE  3000               	movlw	0
 15854  21EF  00A0               	movwf	?_frexp^(0+128)
 15855  21F0  3000               	movlw	0
 15856  21F1  00A1               	movwf	(?_frexp+1)^(0+128)
 15857  21F2  3000               	movlw	0
 15858  21F3  00A2               	movwf	(?_frexp+2)^(0+128)
 15859  21F4  0008               	return
 15860  21F5                     l7918:	
 15861  21F5  0822               	movf	(frexp@value^(0+128)+2),w
 15862  21F6  397F               	andlw	127
 15863  21F7  00A4               	movwf	??_frexp^(0+128)
 15864  21F8  01A5               	clrf	(??_frexp^(0+128)+1)
 15865  21F9  35A4               	lslf	??_frexp^(0+128),f
 15866  21FA  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15867  21FB  0823               	movf	frexp@eptr^(0+128),w
 15868  21FC  0086               	movwf	6
 15869  21FD  3001               	movlw	1	; select bank2/3
 15870  21FE  0087               	movwf	7
 15871  21FF  0824               	movf	??_frexp^(0+128),w
 15872  2200  3FC0               	movwi [0]fsr1
 15873  2201  0825               	movf	(??_frexp+1)^(0+128),w
 15874  2202  3FC1               	movwi [1]fsr1
 15875  2203  0D21               	rlf	(frexp@value^(0+128)+1),w
 15876  2204  0D21               	rlf	(frexp@value^(0+128)+1),w
 15877  2205  3901               	andlw	1
 15878  2206  00A4               	movwf	??_frexp^(0+128)
 15879  2207  01A5               	clrf	(??_frexp^(0+128)+1)
 15880  2208  0823               	movf	frexp@eptr^(0+128),w
 15881  2209  0086               	movwf	6
 15882  220A  3001               	movlw	1	; select bank2/3
 15883  220B  0087               	movwf	7
 15884  220C  0824               	movf	??_frexp^(0+128),w
 15885  220D  0481               	iorwf	1,f
 15886  220E  3141               	addfsr 1,1
 15887  220F  0825               	movf	(??_frexp+1)^(0+128),w
 15888  2210  0481               	iorwf	1,f
 15889  2211  0823               	movf	frexp@eptr^(0+128),w
 15890  2212  0086               	movwf	6
 15891  2213  3001               	movlw	1	; select bank2/3
 15892  2214  0087               	movwf	7
 15893  2215  3082               	movlw	130
 15894  2216  0781               	addwf	1,f
 15895  2217  3141               	addfsr 1,1
 15896  2218  30FF               	movlw	255
 15897  2219  3D81               	addwfc	1,f
 15898  221A  317F               	addfsr 1,-1
 15899  221B  0822               	movf	(frexp@value^(0+128)+2),w
 15900  221C  3980               	andlw	-128
 15901  221D  383F               	iorlw	63
 15902  221E  00A2               	movwf	(frexp@value^(0+128)+2)
 15903  221F  13A1               	bcf	(frexp@value^(0+128)+1),7
 15904  2220  0008               	return
 15905  2221                     __end_of_frexp:	
 15906                           
 15907                           	psect	text49
 15908  19BA                     __ptext49:	
 15909 ;; *************** function ___fttol *****************
 15910 ;; Defined at:
 15911 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;  f1              3    0[BANK2 ] float 
 15914 ;; Auto vars:     Size  Location     Type
 15915 ;;  lval            4    9[BANK2 ] unsigned long 
 15916 ;;  exp1            1   13[BANK2 ] unsigned char 
 15917 ;;  sign1           1    8[BANK2 ] unsigned char 
 15918 ;; Return value:  Size  Location     Type
 15919 ;;                  4    0[BANK2 ] long 
 15920 ;; Registers used:
 15921 ;;		wreg, status,2, status,0
 15922 ;; Tracked objects:
 15923 ;;		On entry : 0/0
 15924 ;;		On exit  : 0/0
 15925 ;;		Unchanged: 0/0
 15926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15927 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15928 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15929 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15930 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15931 ;;Total ram usage:       14 bytes
 15932 ;; Hardware stack levels used:    1
 15933 ;; Hardware stack levels required when called:    3
 15934 ;; This function calls:
 15935 ;;		Nothing
 15936 ;; This function is called by:
 15937 ;;		_main
 15938 ;;		_set_subdivision
 15939 ;;		_scaleA100kPot
 15940 ;;		_scaleA10kPot
 15941 ;;		_scaleiA10kPot
 15942 ;;		_getModulationDelayTime
 15943 ;;		_modSin
 15944 ;;		_modTri
 15945 ;;		_modSaw
 15946 ;;		_pow
 15947 ;;		_trunc
 15948 ;;		_exp
 15949 ;;		_floor
 15950 ;;		_scaleiA100kPot
 15951 ;; This function uses a non-reentrant model
 15952 ;;
 15953                           
 15954                           
 15955                           ;psect for function ___fttol
 15956  19BA                     ___fttol:	
 15957                           
 15958                           ;incstack = 0
 15959                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15960  19BA  0022               	movlb	2	; select bank2
 15961  19BB  0820               	movf	___fttol@f1^(0+256),w
 15962  19BC  00A4               	movwf	??___fttol^(0+256)
 15963  19BD  0821               	movf	(___fttol@f1+1)^(0+256),w
 15964  19BE  00A5               	movwf	(??___fttol^(0+256)+1)
 15965  19BF  0822               	movf	(___fttol@f1+2)^(0+256),w
 15966  19C0  00A6               	movwf	(??___fttol^(0+256)+2)
 15967  19C1  1003               	clrc
 15968  19C2  0D25               	rlf	(??___fttol^(0+256)+1),w
 15969  19C3  0D26               	rlf	(??___fttol^(0+256)+2),w
 15970  19C4  00A7               	movwf	(??___fttol+3)^(0+256)
 15971  19C5  0827               	movf	(??___fttol+3)^(0+256),w
 15972  19C6  00AD               	movwf	___fttol@exp1^(0+256)
 15973  19C7  082D               	movf	___fttol@exp1^(0+256),w
 15974  19C8  1D03               	btfss	3,2
 15975  19C9  29D3               	goto	l7874
 15976  19CA  3000               	movlw	0
 15977  19CB  00A3               	movwf	(?___fttol+3)^(0+256)
 15978  19CC  3000               	movlw	0
 15979  19CD  00A2               	movwf	(?___fttol+2)^(0+256)
 15980  19CE  3000               	movlw	0
 15981  19CF  00A1               	movwf	(?___fttol+1)^(0+256)
 15982  19D0  3000               	movlw	0
 15983  19D1  00A0               	movwf	?___fttol^(0+256)
 15984  19D2  0008               	return
 15985  19D3                     l7874:	
 15986  19D3  0820               	movf	___fttol@f1^(0+256),w
 15987  19D4  00A4               	movwf	??___fttol^(0+256)
 15988  19D5  0821               	movf	(___fttol@f1+1)^(0+256),w
 15989  19D6  00A5               	movwf	(??___fttol^(0+256)+1)
 15990  19D7  0822               	movf	(___fttol@f1+2)^(0+256),w
 15991  19D8  00A6               	movwf	(??___fttol^(0+256)+2)
 15992  19D9  3017               	movlw	23
 15993  19DA                     u8265:	
 15994  19DA  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15995  19DB  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15996  19DC  0CA4               	rrf	??___fttol^(0+256),f
 15997  19DD  0B89               	decfsz	9,f
 15998  19DE  29DA               	goto	u8265
 15999  19DF  0824               	movf	??___fttol^(0+256),w
 16000  19E0  00A7               	movwf	(??___fttol+3)^(0+256)
 16001  19E1  0827               	movf	(??___fttol+3)^(0+256),w
 16002  19E2  00A8               	movwf	___fttol@sign1^(0+256)
 16003  19E3  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16004  19E4  30FF               	movlw	255
 16005  19E5  05A0               	andwf	___fttol@f1^(0+256),f
 16006  19E6  30FF               	movlw	255
 16007  19E7  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16008  19E8  3000               	movlw	0
 16009  19E9  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16010  19EA  0820               	movf	___fttol@f1^(0+256),w
 16011  19EB  00A9               	movwf	___fttol@lval^(0+256)
 16012  19EC  0821               	movf	(___fttol@f1+1)^(0+256),w
 16013  19ED  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16014  19EE  0822               	movf	(___fttol@f1+2)^(0+256),w
 16015  19EF  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16016  19F0  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16017  19F1  308E               	movlw	142
 16018  19F2  02AD               	subwf	___fttol@exp1^(0+256),f
 16019  19F3  1FAD               	btfss	___fttol@exp1^(0+256),7
 16020  19F4  2A11               	goto	l7894
 16021  19F5  082D               	movf	___fttol@exp1^(0+256),w
 16022  19F6  3A80               	xorlw	128
 16023  19F7  3E8F               	addlw	143
 16024  19F8  1803               	skipnc
 16025  19F9  2A03               	goto	l7892
 16026  19FA  3000               	movlw	0
 16027  19FB  00A3               	movwf	(?___fttol+3)^(0+256)
 16028  19FC  3000               	movlw	0
 16029  19FD  00A2               	movwf	(?___fttol+2)^(0+256)
 16030  19FE  3000               	movlw	0
 16031  19FF  00A1               	movwf	(?___fttol+1)^(0+256)
 16032  1A00  3000               	movlw	0
 16033  1A01  00A0               	movwf	?___fttol^(0+256)
 16034  1A02  0008               	return
 16035  1A03                     l7892:	
 16036  1A03  3001               	movlw	1
 16037  1A04                     u8295:	
 16038  1A04  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16039  1A05  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16040  1A06  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16041  1A07  0CA9               	rrf	___fttol@lval^(0+256),f
 16042  1A08  0B89               	decfsz	9,f
 16043  1A09  2A04               	goto	u8295
 16044  1A0A  3001               	movlw	1
 16045  1A0B  00A4               	movwf	??___fttol^(0+256)
 16046  1A0C  0824               	movf	??___fttol^(0+256),w
 16047  1A0D  07AD               	addwf	___fttol@exp1^(0+256),f
 16048  1A0E  1903               	btfsc	3,2
 16049  1A0F  2A2A               	goto	l7902
 16050  1A10  2A03               	goto	l7892
 16051  1A11                     l7894:	
 16052  1A11  3018               	movlw	24
 16053  1A12  022D               	subwf	___fttol@exp1^(0+256),w
 16054  1A13  1C03               	skipc
 16055  1A14  2A27               	goto	l2193
 16056  1A15  3000               	movlw	0
 16057  1A16  00A3               	movwf	(?___fttol+3)^(0+256)
 16058  1A17  3000               	movlw	0
 16059  1A18  00A2               	movwf	(?___fttol+2)^(0+256)
 16060  1A19  3000               	movlw	0
 16061  1A1A  00A1               	movwf	(?___fttol+1)^(0+256)
 16062  1A1B  3000               	movlw	0
 16063  1A1C  00A0               	movwf	?___fttol^(0+256)
 16064  1A1D  0008               	return
 16065  1A1E                     l7900:	
 16066  1A1E  3001               	movlw	1
 16067  1A1F                     u8325:	
 16068  1A1F  35A9               	lslf	___fttol@lval^(0+256),f
 16069  1A20  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16070  1A21  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16071  1A22  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16072  1A23  0B89               	decfsz	9,f
 16073  1A24  2A1F               	goto	u8325
 16074  1A25  3001               	movlw	1
 16075  1A26  02AD               	subwf	___fttol@exp1^(0+256),f
 16076  1A27                     l2193:	
 16077  1A27  082D               	movf	___fttol@exp1^(0+256),w
 16078  1A28  1D03               	btfss	3,2
 16079  1A29  2A1E               	goto	l7900
 16080  1A2A                     l7902:	
 16081  1A2A  0828               	movf	___fttol@sign1^(0+256),w
 16082  1A2B  1903               	btfsc	3,2
 16083  1A2C  2A38               	goto	l7906
 16084  1A2D  09A9               	comf	___fttol@lval^(0+256),f
 16085  1A2E  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16086  1A2F  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16087  1A30  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16088  1A31  0AA9               	incf	___fttol@lval^(0+256),f
 16089  1A32  1903               	skipnz
 16090  1A33  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16091  1A34  1903               	skipnz
 16092  1A35  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16093  1A36  1903               	skipnz
 16094  1A37  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16095  1A38                     l7906:	
 16096  1A38  082C               	movf	(___fttol@lval+3)^(0+256),w
 16097  1A39  00A3               	movwf	(?___fttol+3)^(0+256)
 16098  1A3A  082B               	movf	(___fttol@lval+2)^(0+256),w
 16099  1A3B  00A2               	movwf	(?___fttol+2)^(0+256)
 16100  1A3C  082A               	movf	(___fttol@lval+1)^(0+256),w
 16101  1A3D  00A1               	movwf	(?___fttol+1)^(0+256)
 16102  1A3E  0829               	movf	___fttol@lval^(0+256),w
 16103  1A3F  00A0               	movwf	?___fttol^(0+256)
 16104  1A40  0008               	return
 16105  1A41                     __end_of___fttol:	
 16106                           
 16107                           	psect	text50
 16108  212A                     __ptext50:	
 16109 ;; *************** function ___ftge *****************
 16110 ;; Defined at:
 16111 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16112 ;; Parameters:    Size  Location     Type
 16113 ;;  ff1             3    0[BANK1 ] float 
 16114 ;;  ff2             3    3[BANK1 ] float 
 16115 ;; Auto vars:     Size  Location     Type
 16116 ;;		None
 16117 ;; Return value:  Size  Location     Type
 16118 ;;		None               void
 16119 ;; Registers used:
 16120 ;;		wreg, status,2, status,0
 16121 ;; Tracked objects:
 16122 ;;		On entry : 0/0
 16123 ;;		On exit  : 0/0
 16124 ;;		Unchanged: 0/0
 16125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16126 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16128 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16129 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16130 ;;Total ram usage:        9 bytes
 16131 ;; Hardware stack levels used:    1
 16132 ;; Hardware stack levels required when called:    3
 16133 ;; This function calls:
 16134 ;;		Nothing
 16135 ;; This function is called by:
 16136 ;;		_modSin
 16137 ;;		_modTri
 16138 ;;		_modSaw
 16139 ;;		_modSquare
 16140 ;;		_pow
 16141 ;;		_sin
 16142 ;;		_exp
 16143 ;;		_floor
 16144 ;;		_ldexp
 16145 ;;		_log
 16146 ;; This function uses a non-reentrant model
 16147 ;;
 16148                           
 16149                           
 16150                           ;psect for function ___ftge
 16151  212A                     ___ftge:	
 16152                           
 16153                           ;incstack = 0
 16154                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16155  212A  0021               	movlb	1	; select bank1
 16156  212B  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16157  212C  2941               	goto	l7794
 16158  212D  0920               	comf	___ftge@ff1^(0+128),w
 16159  212E  00A6               	movwf	??___ftge^(0+128)
 16160  212F  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16161  2130  00A7               	movwf	(??___ftge^(0+128)+1)
 16162  2131  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16163  2132  00A8               	movwf	(??___ftge^(0+128)+2)
 16164  2133  0AA6               	incf	??___ftge^(0+128),f
 16165  2134  1903               	skipnz
 16166  2135  0AA7               	incf	(??___ftge^(0+128)+1),f
 16167  2136  1903               	skipnz
 16168  2137  0AA8               	incf	(??___ftge^(0+128)+2),f
 16169  2138  3000               	movlw	0
 16170  2139  0726               	addwf	??___ftge^(0+128),w
 16171  213A  00A0               	movwf	___ftge@ff1^(0+128)
 16172  213B  3000               	movlw	0
 16173  213C  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16174  213D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16175  213E  3080               	movlw	128
 16176  213F  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16177  2140  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16178  2141                     l7794:	
 16179  2141  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16180  2142  2957               	goto	l7798
 16181  2143  0923               	comf	___ftge@ff2^(0+128),w
 16182  2144  00A6               	movwf	??___ftge^(0+128)
 16183  2145  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16184  2146  00A7               	movwf	(??___ftge^(0+128)+1)
 16185  2147  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16186  2148  00A8               	movwf	(??___ftge^(0+128)+2)
 16187  2149  0AA6               	incf	??___ftge^(0+128),f
 16188  214A  1903               	skipnz
 16189  214B  0AA7               	incf	(??___ftge^(0+128)+1),f
 16190  214C  1903               	skipnz
 16191  214D  0AA8               	incf	(??___ftge^(0+128)+2),f
 16192  214E  3000               	movlw	0
 16193  214F  0726               	addwf	??___ftge^(0+128),w
 16194  2150  00A3               	movwf	___ftge@ff2^(0+128)
 16195  2151  3000               	movlw	0
 16196  2152  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16197  2153  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16198  2154  3080               	movlw	128
 16199  2155  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16200  2156  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16201  2157                     l7798:	
 16202  2157  3080               	movlw	128
 16203  2158  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16204  2159  3080               	movlw	128
 16205  215A  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16206  215B  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16207  215C  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16208  215D  1D03               	skipz
 16209  215E  0008               	return
 16210  215F  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16211  2160  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16212  2161  1D03               	skipz
 16213  2162  0008               	return
 16214  2163  0823               	movf	___ftge@ff2^(0+128),w
 16215  2164  0220               	subwf	___ftge@ff1^(0+128),w
 16216  2165  0008               	return
 16217  2166                     __end_of___ftge:	
 16218                           
 16219                           	psect	text51
 16220  2447                     __ptext51:	
 16221 ;; *************** function ___altoft *****************
 16222 ;; Defined at:
 16223 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16224 ;; Parameters:    Size  Location     Type
 16225 ;;  c               4   14[BANK2 ] long 
 16226 ;; Auto vars:     Size  Location     Type
 16227 ;;  sign            1   21[BANK2 ] unsigned char 
 16228 ;;  exp             1   20[BANK2 ] unsigned char 
 16229 ;; Return value:  Size  Location     Type
 16230 ;;                  3   14[BANK2 ] float 
 16231 ;; Registers used:
 16232 ;;		wreg, status,2, status,0, pclath, cstack
 16233 ;; Tracked objects:
 16234 ;;		On entry : 0/0
 16235 ;;		On exit  : 0/0
 16236 ;;		Unchanged: 0/0
 16237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16238 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16239 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16240 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16241 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16242 ;;Total ram usage:        8 bytes
 16243 ;; Hardware stack levels used:    1
 16244 ;; Hardware stack levels required when called:    4
 16245 ;; This function calls:
 16246 ;;		___ftpack
 16247 ;; This function is called by:
 16248 ;;		_getModulationDelayTime
 16249 ;;		_trunc
 16250 ;;		_floor
 16251 ;; This function uses a non-reentrant model
 16252 ;;
 16253                           
 16254                           
 16255                           ;psect for function ___altoft
 16256  2447                     ___altoft:	
 16257                           
 16258                           ;incstack = 0
 16259                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16260  2447  0022               	movlb	2	; select bank2
 16261  2448  01B5               	clrf	___altoft@sign^(0+256)
 16262  2449  308E               	movlw	142
 16263  244A  00B2               	movwf	??___altoft^(0+256)
 16264  244B  0832               	movf	??___altoft^(0+256),w
 16265  244C  00B4               	movwf	___altoft@exp^(0+256)
 16266  244D  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 16267  244E  2C5C               	goto	l7714
 16268  244F  09AE               	comf	___altoft@c^(0+256),f
 16269  2450  09AF               	comf	(___altoft@c+1)^(0+256),f
 16270  2451  09B0               	comf	(___altoft@c+2)^(0+256),f
 16271  2452  09B1               	comf	(___altoft@c+3)^(0+256),f
 16272  2453  0AAE               	incf	___altoft@c^(0+256),f
 16273  2454  1903               	skipnz
 16274  2455  0AAF               	incf	(___altoft@c+1)^(0+256),f
 16275  2456  1903               	skipnz
 16276  2457  0AB0               	incf	(___altoft@c+2)^(0+256),f
 16277  2458  1903               	skipnz
 16278  2459  0AB1               	incf	(___altoft@c+3)^(0+256),f
 16279  245A  01B5               	clrf	___altoft@sign^(0+256)
 16280  245B  0AB5               	incf	___altoft@sign^(0+256),f
 16281  245C                     l7714:	
 16282  245C  30FF               	movlw	255
 16283  245D  0531               	andwf	(___altoft@c+3)^(0+256),w
 16284  245E  1903               	btfsc	3,2
 16285  245F  2C6C               	goto	l7716
 16286  2460  3001               	movlw	1
 16287  2461                     u7845:	
 16288  2461  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 16289  2462  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 16290  2463  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 16291  2464  0CAE               	rrf	___altoft@c^(0+256),f
 16292  2465  0B89               	decfsz	9,f
 16293  2466  2C61               	goto	u7845
 16294  2467  3001               	movlw	1
 16295  2468  00B2               	movwf	??___altoft^(0+256)
 16296  2469  0832               	movf	??___altoft^(0+256),w
 16297  246A  07B4               	addwf	___altoft@exp^(0+256),f
 16298  246B  2C5C               	goto	l7714
 16299  246C                     l7716:	
 16300  246C  082E               	movf	___altoft@c^(0+256),w
 16301  246D  0021               	movlb	1	; select bank1
 16302  246E  00A0               	movwf	___ftpack@arg^(0+128)
 16303  246F  0022               	movlb	2	; select bank2
 16304  2470  082F               	movf	(___altoft@c+1)^(0+256),w
 16305  2471  0021               	movlb	1	; select bank1
 16306  2472  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16307  2473  0022               	movlb	2	; select bank2
 16308  2474  0830               	movf	(___altoft@c+2)^(0+256),w
 16309  2475  0021               	movlb	1	; select bank1
 16310  2476  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16311  2477  0022               	movlb	2	; select bank2
 16312  2478  0834               	movf	___altoft@exp^(0+256),w
 16313  2479  00B2               	movwf	??___altoft^(0+256)
 16314  247A  0832               	movf	??___altoft^(0+256),w
 16315  247B  0021               	movlb	1	; select bank1
 16316  247C  00A3               	movwf	___ftpack@exp^(0+128)
 16317  247D  0022               	movlb	2	; select bank2
 16318  247E  0835               	movf	___altoft@sign^(0+256),w
 16319  247F  00B3               	movwf	(??___altoft+1)^(0+256)
 16320  2480  0833               	movf	(??___altoft+1)^(0+256),w
 16321  2481  0021               	movlb	1	; select bank1
 16322  2482  00A4               	movwf	___ftpack@sign^(0+128)
 16323  2483  31A6  2632         	fcall	___ftpack
 16324  2485  0021               	movlb	1	; select bank1
 16325  2486  0820               	movf	?___ftpack^(0+128),w
 16326  2487  0022               	movlb	2	; select bank2
 16327  2488  00AE               	movwf	?___altoft^(0+256)
 16328  2489  0021               	movlb	1	; select bank1
 16329  248A  0821               	movf	(?___ftpack+1)^(0+128),w
 16330  248B  0022               	movlb	2	; select bank2
 16331  248C  00AF               	movwf	(?___altoft+1)^(0+256)
 16332  248D  0021               	movlb	1	; select bank1
 16333  248E  0822               	movf	(?___ftpack+2)^(0+128),w
 16334  248F  0022               	movlb	2	; select bank2
 16335  2490  00B0               	movwf	(?___altoft+2)^(0+256)
 16336  2491  0008               	return
 16337  2492                     __end_of___altoft:	
 16338                           
 16339                           	psect	text52
 16340  2697                     __ptext52:	
 16341 ;; *************** function _eval_poly *****************
 16342 ;; Defined at:
 16343 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16344 ;; Parameters:    Size  Location     Type
 16345 ;;  x               3   20[BANK2 ] float 
 16346 ;;  d               2   23[BANK2 ] PTR const 
 16347 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16348 ;;  n               2   25[BANK2 ] int 
 16349 ;; Auto vars:     Size  Location     Type
 16350 ;;  res             3   27[BANK2 ] int 
 16351 ;; Return value:  Size  Location     Type
 16352 ;;                  3   20[BANK2 ] int 
 16353 ;; Registers used:
 16354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16355 ;; Tracked objects:
 16356 ;;		On entry : 0/0
 16357 ;;		On exit  : 0/0
 16358 ;;		Unchanged: 0/0
 16359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16360 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16361 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16363 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16364 ;;Total ram usage:       10 bytes
 16365 ;; Hardware stack levels used:    1
 16366 ;; Hardware stack levels required when called:    5
 16367 ;; This function calls:
 16368 ;;		___ftadd
 16369 ;;		___ftmul
 16370 ;;		___wmul
 16371 ;; This function is called by:
 16372 ;;		_sin
 16373 ;;		_exp
 16374 ;;		_log
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           
 16379                           ;psect for function _eval_poly
 16380  2697                     _eval_poly:	
 16381                           
 16382                           ;incstack = 0
 16383                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16384  2697  0022               	movlb	2	; select bank2
 16385  2698  083A               	movf	(eval_poly@n+1)^(0+256),w
 16386  2699  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16387  269A  0839               	movf	eval_poly@n^(0+256),w
 16388  269B  00AE               	movwf	___wmul@multiplier^(0+256)
 16389  269C  3003               	movlw	3
 16390  269D  00B0               	movwf	___wmul@multiplicand^(0+256)
 16391  269E  3000               	movlw	0
 16392  269F  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16393  26A0  31AE  2640  31A6   	fcall	___wmul
 16394  26A3  0022               	movlb	2	; select bank2
 16395  26A4  0837               	movf	eval_poly@d^(0+256),w
 16396  26A5  072E               	addwf	?___wmul^(0+256),w
 16397  26A6  0084               	movwf	4
 16398  26A7  0838               	movf	(eval_poly@d+1)^(0+256),w
 16399  26A8  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16400  26A9  0085               	movwf	5
 16401  26AA  3F00               	moviw [0]fsr0
 16402  26AB  00BB               	movwf	eval_poly@res^(0+256)
 16403  26AC  3F01               	moviw [1]fsr0
 16404  26AD  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16405  26AE  3F02               	moviw [2]fsr0
 16406  26AF                     L20:	
 16407  26AF  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16408  26B0  0839               	movf	eval_poly@n^(0+256),w
 16409  26B1  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16410  26B2  1903               	btfsc	3,2
 16411  26B3  2F02               	goto	l8076
 16412  26B4  30FF               	movlw	255
 16413  26B5  07B9               	addwf	eval_poly@n^(0+256),f
 16414  26B6  30FF               	movlw	255
 16415  26B7  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16416  26B8  083A               	movf	(eval_poly@n+1)^(0+256),w
 16417  26B9  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16418  26BA  0839               	movf	eval_poly@n^(0+256),w
 16419  26BB  00AE               	movwf	___wmul@multiplier^(0+256)
 16420  26BC  3003               	movlw	3
 16421  26BD  00B0               	movwf	___wmul@multiplicand^(0+256)
 16422  26BE  3000               	movlw	0
 16423  26BF  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16424  26C0  31AE  2640  31A6   	fcall	___wmul
 16425  26C3  0022               	movlb	2	; select bank2
 16426  26C4  0837               	movf	eval_poly@d^(0+256),w
 16427  26C5  072E               	addwf	?___wmul^(0+256),w
 16428  26C6  0084               	movwf	4
 16429  26C7  0838               	movf	(eval_poly@d+1)^(0+256),w
 16430  26C8  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16431  26C9  0085               	movwf	5
 16432  26CA  3F00               	moviw [0]fsr0
 16433  26CB  0021               	movlb	1	; select bank1
 16434  26CC  00C1               	movwf	___ftadd@f1^(0+128)
 16435  26CD  3F01               	moviw [1]fsr0
 16436  26CE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16437  26CF  3F02               	moviw [2]fsr0
 16438  26D0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16439  26D1  0022               	movlb	2	; select bank2
 16440  26D2  083B               	movf	eval_poly@res^(0+256),w
 16441  26D3  0021               	movlb	1	; select bank1
 16442  26D4  00AE               	movwf	___ftmul@f1^(0+128)
 16443  26D5  0022               	movlb	2	; select bank2
 16444  26D6  083C               	movf	(eval_poly@res+1)^(0+256),w
 16445  26D7  0021               	movlb	1	; select bank1
 16446  26D8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16447  26D9  0022               	movlb	2	; select bank2
 16448  26DA  083D               	movf	(eval_poly@res+2)^(0+256),w
 16449  26DB  0021               	movlb	1	; select bank1
 16450  26DC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16451  26DD  0022               	movlb	2	; select bank2
 16452  26DE  0834               	movf	eval_poly@x^(0+256),w
 16453  26DF  0021               	movlb	1	; select bank1
 16454  26E0  00B1               	movwf	___ftmul@f2^(0+128)
 16455  26E1  0022               	movlb	2	; select bank2
 16456  26E2  0835               	movf	(eval_poly@x+1)^(0+256),w
 16457  26E3  0021               	movlb	1	; select bank1
 16458  26E4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16459  26E5  0022               	movlb	2	; select bank2
 16460  26E6  0836               	movf	(eval_poly@x+2)^(0+256),w
 16461  26E7  0021               	movlb	1	; select bank1
 16462  26E8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16463  26E9  319E  267B  31A6   	fcall	___ftmul
 16464  26EC  0021               	movlb	1	; select bank1
 16465  26ED  082E               	movf	?___ftmul^(0+128),w
 16466  26EE  00C4               	movwf	___ftadd@f2^(0+128)
 16467  26EF  082F               	movf	(?___ftmul+1)^(0+128),w
 16468  26F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16469  26F1  0830               	movf	(?___ftmul+2)^(0+128),w
 16470  26F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16471  26F3  3190  2026  31A6   	fcall	___ftadd
 16472  26F6  0021               	movlb	1	; select bank1
 16473  26F7  0841               	movf	?___ftadd^(0+128),w
 16474  26F8  0022               	movlb	2	; select bank2
 16475  26F9  00BB               	movwf	eval_poly@res^(0+256)
 16476  26FA  0021               	movlb	1	; select bank1
 16477  26FB  0842               	movf	(?___ftadd+1)^(0+128),w
 16478  26FC  0022               	movlb	2	; select bank2
 16479  26FD  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16480  26FE  0021               	movlb	1	; select bank1
 16481  26FF  0843               	movf	(?___ftadd+2)^(0+128),w
 16482  2700  0022               	movlb	2	; select bank2
 16483  2701  2EAF               	goto	L20
 16484  2702                     l8076:	
 16485  2702  083B               	movf	eval_poly@res^(0+256),w
 16486  2703  00B4               	movwf	?_eval_poly^(0+256)
 16487  2704  083C               	movf	(eval_poly@res+1)^(0+256),w
 16488  2705  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16489  2706  083D               	movf	(eval_poly@res+2)^(0+256),w
 16490  2707  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16491  2708  0008               	return
 16492  2709                     __end_of_eval_poly:	
 16493                           
 16494                           	psect	text53
 16495  2E40                     __ptext53:	
 16496 ;; *************** function ___wmul *****************
 16497 ;; Defined at:
 16498 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16501 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;  product         2   18[BANK2 ] unsigned int 
 16504 ;; Return value:  Size  Location     Type
 16505 ;;                  2   14[BANK2 ] unsigned int 
 16506 ;; Registers used:
 16507 ;;		wreg, status,2, status,0
 16508 ;; Tracked objects:
 16509 ;;		On entry : 0/0
 16510 ;;		On exit  : 0/0
 16511 ;;		Unchanged: 0/0
 16512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16513 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16514 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16516 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16517 ;;Total ram usage:        6 bytes
 16518 ;; Hardware stack levels used:    1
 16519 ;; Hardware stack levels required when called:    3
 16520 ;; This function calls:
 16521 ;;		Nothing
 16522 ;; This function is called by:
 16523 ;;		_calcSinArray
 16524 ;;		_getModulationDelayTime
 16525 ;;		_updateModulationArray
 16526 ;;		_modSin
 16527 ;;		_eval_poly
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           
 16532                           ;psect for function ___wmul
 16533  2E40                     ___wmul:	
 16534                           
 16535                           ;incstack = 0
 16536                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16537  2E40  0022               	movlb	2	; select bank2
 16538  2E41  01B2               	clrf	___wmul@product^(0+256)
 16539  2E42  01B3               	clrf	(___wmul@product+1)^(0+256)
 16540  2E43                     l7692:	
 16541  2E43  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16542  2E44  2E49               	goto	l1941
 16543  2E45  0830               	movf	___wmul@multiplicand^(0+256),w
 16544  2E46  07B2               	addwf	___wmul@product^(0+256),f
 16545  2E47  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16546  2E48  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16547  2E49                     l1941:	
 16548  2E49  3001               	movlw	1
 16549  2E4A                     u7805:	
 16550  2E4A  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16551  2E4B  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16552  2E4C  0B89               	decfsz	9,f
 16553  2E4D  2E4A               	goto	u7805
 16554  2E4E  3001               	movlw	1
 16555  2E4F                     u7815:	
 16556  2E4F  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16557  2E50  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16558  2E51  0B89               	decfsz	9,f
 16559  2E52  2E4F               	goto	u7815
 16560  2E53  082E               	movf	___wmul@multiplier^(0+256),w
 16561  2E54  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16562  2E55  1D03               	btfss	3,2
 16563  2E56  2E43               	goto	l7692
 16564  2E57  0833               	movf	(___wmul@product+1)^(0+256),w
 16565  2E58  00AF               	movwf	(?___wmul+1)^(0+256)
 16566  2E59  0832               	movf	___wmul@product^(0+256),w
 16567  2E5A  00AE               	movwf	?___wmul^(0+256)
 16568  2E5B  0008               	return
 16569  2E5C                     __end_of___wmul:	
 16570                           
 16571                           	psect	text54
 16572  1E7B                     __ptext54:	
 16573 ;; *************** function ___ftmul *****************
 16574 ;; Defined at:
 16575 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;  f1              3   14[BANK1 ] float 
 16578 ;;  f2              3   17[BANK1 ] float 
 16579 ;; Auto vars:     Size  Location     Type
 16580 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16581 ;;  sign            1   29[BANK1 ] unsigned char 
 16582 ;;  cntr            1   28[BANK1 ] unsigned char 
 16583 ;;  exp             1   24[BANK1 ] unsigned char 
 16584 ;; Return value:  Size  Location     Type
 16585 ;;                  3   14[BANK1 ] float 
 16586 ;; Registers used:
 16587 ;;		wreg, status,2, status,0, pclath, cstack
 16588 ;; Tracked objects:
 16589 ;;		On entry : 0/0
 16590 ;;		On exit  : 0/0
 16591 ;;		Unchanged: 0/0
 16592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16593 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16594 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16595 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16596 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16597 ;;Total ram usage:       16 bytes
 16598 ;; Hardware stack levels used:    1
 16599 ;; Hardware stack levels required when called:    4
 16600 ;; This function calls:
 16601 ;;		___ftpack
 16602 ;; This function is called by:
 16603 ;;		_set_subdivision
 16604 ;;		_map
 16605 ;;		_scaleA100kPot
 16606 ;;		_scaleA10kPot
 16607 ;;		_scaleiA10kPot
 16608 ;;		_calcSinArray
 16609 ;;		_modSin
 16610 ;;		_modTri
 16611 ;;		_modSaw
 16612 ;;		_pow
 16613 ;;		_sin
 16614 ;;		_eval_poly
 16615 ;;		_exp
 16616 ;;		_log
 16617 ;;		_scalePotValue
 16618 ;;		_scaleiA100kPot
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function ___ftmul
 16624  1E7B                     ___ftmul:	
 16625                           
 16626                           ;incstack = 0
 16627                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16628  1E7B  0021               	movlb	1	; select bank1
 16629  1E7C  082E               	movf	___ftmul@f1^(0+128),w
 16630  1E7D  00B4               	movwf	??___ftmul^(0+128)
 16631  1E7E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16632  1E7F  00B5               	movwf	(??___ftmul^(0+128)+1)
 16633  1E80  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16634  1E81  00B6               	movwf	(??___ftmul^(0+128)+2)
 16635  1E82  1003               	clrc
 16636  1E83  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16637  1E84  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16638  1E85  00B7               	movwf	(??___ftmul+3)^(0+128)
 16639  1E86  0837               	movf	(??___ftmul+3)^(0+128),w
 16640  1E87  00B8               	movwf	___ftmul@exp^(0+128)
 16641  1E88  0838               	movf	___ftmul@exp^(0+128),w
 16642  1E89  1D03               	btfss	3,2
 16643  1E8A  2E92               	goto	l7816
 16644  1E8B  3000               	movlw	0
 16645  1E8C  00AE               	movwf	?___ftmul^(0+128)
 16646  1E8D  3000               	movlw	0
 16647  1E8E  00AF               	movwf	(?___ftmul+1)^(0+128)
 16648  1E8F  3000               	movlw	0
 16649  1E90  00B0               	movwf	(?___ftmul+2)^(0+128)
 16650  1E91  0008               	return
 16651  1E92                     l7816:	
 16652  1E92  0831               	movf	___ftmul@f2^(0+128),w
 16653  1E93  00B4               	movwf	??___ftmul^(0+128)
 16654  1E94  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16655  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 16656  1E96  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16657  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 16658  1E98  1003               	clrc
 16659  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16660  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16661  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16662  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 16663  1E9D  00BD               	movwf	___ftmul@sign^(0+128)
 16664  1E9E  083D               	movf	___ftmul@sign^(0+128),w
 16665  1E9F  1D03               	btfss	3,2
 16666  1EA0  2EA8               	goto	l7822
 16667  1EA1  3000               	movlw	0
 16668  1EA2  00AE               	movwf	?___ftmul^(0+128)
 16669  1EA3  3000               	movlw	0
 16670  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 16671  1EA5  3000               	movlw	0
 16672  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 16673  1EA7  0008               	return
 16674  1EA8                     l7822:	
 16675  1EA8  083D               	movf	___ftmul@sign^(0+128),w
 16676  1EA9  3E7B               	addlw	123
 16677  1EAA  00B4               	movwf	??___ftmul^(0+128)
 16678  1EAB  0834               	movf	??___ftmul^(0+128),w
 16679  1EAC  07B8               	addwf	___ftmul@exp^(0+128),f
 16680  1EAD  082E               	movf	___ftmul@f1^(0+128),w
 16681  1EAE  00B4               	movwf	??___ftmul^(0+128)
 16682  1EAF  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16683  1EB0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16684  1EB1  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16685  1EB2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16686  1EB3  3010               	movlw	16
 16687  1EB4                     u8145:	
 16688  1EB4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16689  1EB5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16690  1EB6  0CB4               	rrf	??___ftmul^(0+128),f
 16691  1EB7  0B89               	decfsz	9,f
 16692  1EB8  2EB4               	goto	u8145
 16693  1EB9  0834               	movf	??___ftmul^(0+128),w
 16694  1EBA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16695  1EBB  0837               	movf	(??___ftmul+3)^(0+128),w
 16696  1EBC  00BD               	movwf	___ftmul@sign^(0+128)
 16697  1EBD  0831               	movf	___ftmul@f2^(0+128),w
 16698  1EBE  00B4               	movwf	??___ftmul^(0+128)
 16699  1EBF  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16700  1EC0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16701  1EC1  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16702  1EC2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16703  1EC3  3010               	movlw	16
 16704  1EC4                     u8155:	
 16705  1EC4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16706  1EC5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16707  1EC6  0CB4               	rrf	??___ftmul^(0+128),f
 16708  1EC7  0B89               	decfsz	9,f
 16709  1EC8  2EC4               	goto	u8155
 16710  1EC9  0834               	movf	??___ftmul^(0+128),w
 16711  1ECA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16712  1ECB  0837               	movf	(??___ftmul+3)^(0+128),w
 16713  1ECC  06BD               	xorwf	___ftmul@sign^(0+128),f
 16714  1ECD  3080               	movlw	128
 16715  1ECE  00B4               	movwf	??___ftmul^(0+128)
 16716  1ECF  0834               	movf	??___ftmul^(0+128),w
 16717  1ED0  05BD               	andwf	___ftmul@sign^(0+128),f
 16718  1ED1  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16719  1ED2  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16720  1ED3  30FF               	movlw	255
 16721  1ED4  05B1               	andwf	___ftmul@f2^(0+128),f
 16722  1ED5  30FF               	movlw	255
 16723  1ED6  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16724  1ED7  3000               	movlw	0
 16725  1ED8  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16726  1ED9  3000               	movlw	0
 16727  1EDA  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16728  1EDB  3000               	movlw	0
 16729  1EDC  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16730  1EDD  3000               	movlw	0
 16731  1EDE  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16732  1EDF  3007               	movlw	7
 16733  1EE0  00B4               	movwf	??___ftmul^(0+128)
 16734  1EE1  0834               	movf	??___ftmul^(0+128),w
 16735  1EE2  00BC               	movwf	___ftmul@cntr^(0+128)
 16736  1EE3                     l7834:	
 16737  1EE3  1C2E               	btfss	___ftmul@f1^(0+128),0
 16738  1EE4  2EEB               	goto	l7838
 16739  1EE5  0831               	movf	___ftmul@f2^(0+128),w
 16740  1EE6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16741  1EE7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16742  1EE8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16743  1EE9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16744  1EEA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16745  1EEB                     l7838:	
 16746  1EEB  3001               	movlw	1
 16747  1EEC                     u8175:	
 16748  1EEC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16749  1EED  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16750  1EEE  0CAE               	rrf	___ftmul@f1^(0+128),f
 16751  1EEF  0B89               	decfsz	9,f
 16752  1EF0  2EEC               	goto	u8175
 16753  1EF1  3001               	movlw	1
 16754  1EF2                     u8185:	
 16755  1EF2  35B1               	lslf	___ftmul@f2^(0+128),f
 16756  1EF3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16757  1EF4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16758  1EF5  0B89               	decfsz	9,f
 16759  1EF6  2EF2               	goto	u8185
 16760  1EF7  3001               	movlw	1
 16761  1EF8  02BC               	subwf	___ftmul@cntr^(0+128),f
 16762  1EF9  1D03               	btfss	3,2
 16763  1EFA  2EE3               	goto	l7834
 16764  1EFB  3009               	movlw	9
 16765  1EFC  00B4               	movwf	??___ftmul^(0+128)
 16766  1EFD  0834               	movf	??___ftmul^(0+128),w
 16767  1EFE  00BC               	movwf	___ftmul@cntr^(0+128)
 16768  1EFF                     l7846:	
 16769  1EFF  1C2E               	btfss	___ftmul@f1^(0+128),0
 16770  1F00  2F07               	goto	l7850
 16771  1F01  0831               	movf	___ftmul@f2^(0+128),w
 16772  1F02  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16773  1F03  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16774  1F04  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16775  1F05  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16776  1F06  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16777  1F07                     l7850:	
 16778  1F07  3001               	movlw	1
 16779  1F08                     u8215:	
 16780  1F08  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16781  1F09  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16782  1F0A  0CAE               	rrf	___ftmul@f1^(0+128),f
 16783  1F0B  0B89               	decfsz	9,f
 16784  1F0C  2F08               	goto	u8215
 16785  1F0D  3001               	movlw	1
 16786  1F0E                     u8225:	
 16787  1F0E  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16788  1F0F  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16789  1F10  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16790  1F11  0B89               	decfsz	9,f
 16791  1F12  2F0E               	goto	u8225
 16792  1F13  3001               	movlw	1
 16793  1F14  02BC               	subwf	___ftmul@cntr^(0+128),f
 16794  1F15  1D03               	btfss	3,2
 16795  1F16  2EFF               	goto	l7846
 16796  1F17  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16797  1F18  00A0               	movwf	___ftpack@arg^(0+128)
 16798  1F19  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16799  1F1A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16800  1F1B  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16801  1F1C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16802  1F1D  0838               	movf	___ftmul@exp^(0+128),w
 16803  1F1E  00B4               	movwf	??___ftmul^(0+128)
 16804  1F1F  0834               	movf	??___ftmul^(0+128),w
 16805  1F20  00A3               	movwf	___ftpack@exp^(0+128)
 16806  1F21  083D               	movf	___ftmul@sign^(0+128),w
 16807  1F22  00B5               	movwf	(??___ftmul+1)^(0+128)
 16808  1F23  0835               	movf	(??___ftmul+1)^(0+128),w
 16809  1F24  00A4               	movwf	___ftpack@sign^(0+128)
 16810  1F25  31A6  2632         	fcall	___ftpack
 16811  1F27  0021               	movlb	1	; select bank1
 16812  1F28  0820               	movf	?___ftpack^(0+128),w
 16813  1F29  00AE               	movwf	?___ftmul^(0+128)
 16814  1F2A  0821               	movf	(?___ftpack+1)^(0+128),w
 16815  1F2B  00AF               	movwf	(?___ftmul+1)^(0+128)
 16816  1F2C  0822               	movf	(?___ftpack+2)^(0+128),w
 16817  1F2D  00B0               	movwf	(?___ftmul+2)^(0+128)
 16818  1F2E  0008               	return
 16819  1F2F                     __end_of___ftmul:	
 16820                           
 16821                           	psect	text55
 16822  0800                     __ptext55:	
 16823 ;; *************** function ___ftsub *****************
 16824 ;; Defined at:
 16825 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16826 ;; Parameters:    Size  Location     Type
 16827 ;;  f2              3   31[BANK2 ] float 
 16828 ;;  f1              3   34[BANK2 ] float 
 16829 ;; Auto vars:     Size  Location     Type
 16830 ;;		None
 16831 ;; Return value:  Size  Location     Type
 16832 ;;                  3   31[BANK2 ] float 
 16833 ;; Registers used:
 16834 ;;		wreg, status,2, status,0, pclath, cstack
 16835 ;; Tracked objects:
 16836 ;;		On entry : 0/0
 16837 ;;		On exit  : 0/0
 16838 ;;		Unchanged: 0/0
 16839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16840 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16843 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16844 ;;Total ram usage:        6 bytes
 16845 ;; Hardware stack levels used:    1
 16846 ;; Hardware stack levels required when called:    5
 16847 ;; This function calls:
 16848 ;;		___ftadd
 16849 ;; This function is called by:
 16850 ;;		_sin
 16851 ;;		_exp
 16852 ;; This function uses a non-reentrant model
 16853 ;;
 16854                           
 16855                           
 16856                           ;psect for function ___ftsub
 16857  0800                     ___ftsub:	
 16858                           
 16859                           ;incstack = 0
 16860                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16861  0800  0022               	movlb	2	; select bank2
 16862  0801  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16863  0802  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16864  0803  043F               	iorwf	___ftsub@f2^(0+256),w
 16865  0804  1903               	skipnz
 16866  0805  2808               	goto	l8038
 16867  0806  3080               	movlw	128
 16868  0807  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16869  0808                     l8038:	
 16870  0808  0842               	movf	___ftsub@f1^(0+256),w
 16871  0809  0021               	movlb	1	; select bank1
 16872  080A  00C1               	movwf	___ftadd@f1^(0+128)
 16873  080B  0022               	movlb	2	; select bank2
 16874  080C  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16875  080D  0021               	movlb	1	; select bank1
 16876  080E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16877  080F  0022               	movlb	2	; select bank2
 16878  0810  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16879  0811  0021               	movlb	1	; select bank1
 16880  0812  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16881  0813  0022               	movlb	2	; select bank2
 16882  0814  083F               	movf	___ftsub@f2^(0+256),w
 16883  0815  0021               	movlb	1	; select bank1
 16884  0816  00C4               	movwf	___ftadd@f2^(0+128)
 16885  0817  0022               	movlb	2	; select bank2
 16886  0818  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16887  0819  0021               	movlb	1	; select bank1
 16888  081A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16889  081B  0022               	movlb	2	; select bank2
 16890  081C  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16891  081D  0021               	movlb	1	; select bank1
 16892  081E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16893  081F  3190  2026         	fcall	___ftadd
 16894  0821  0021               	movlb	1	; select bank1
 16895  0822  0841               	movf	?___ftadd^(0+128),w
 16896  0823  0022               	movlb	2	; select bank2
 16897  0824  00BF               	movwf	?___ftsub^(0+256)
 16898  0825  0021               	movlb	1	; select bank1
 16899  0826  0842               	movf	(?___ftadd+1)^(0+128),w
 16900  0827  0022               	movlb	2	; select bank2
 16901  0828  00C0               	movwf	(?___ftsub+1)^(0+256)
 16902  0829  0021               	movlb	1	; select bank1
 16903  082A  0843               	movf	(?___ftadd+2)^(0+128),w
 16904  082B  0022               	movlb	2	; select bank2
 16905  082C  00C1               	movwf	(?___ftsub+2)^(0+256)
 16906  082D  0008               	return
 16907  082E                     __end_of___ftsub:	
 16908                           
 16909                           	psect	text56
 16910  1026                     __ptext56:	
 16911 ;; *************** function ___ftadd *****************
 16912 ;; Defined at:
 16913 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;  f1              3   33[BANK1 ] float 
 16916 ;;  f2              3   36[BANK1 ] float 
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  exp1            1   45[BANK1 ] unsigned char 
 16919 ;;  exp2            1   44[BANK1 ] unsigned char 
 16920 ;;  sign            1   43[BANK1 ] unsigned char 
 16921 ;; Return value:  Size  Location     Type
 16922 ;;                  3   33[BANK1 ] float 
 16923 ;; Registers used:
 16924 ;;		wreg, status,2, status,0, pclath, cstack
 16925 ;; Tracked objects:
 16926 ;;		On entry : 0/0
 16927 ;;		On exit  : 0/0
 16928 ;;		Unchanged: 0/0
 16929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16930 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16931 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16932 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16933 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16934 ;;Total ram usage:       13 bytes
 16935 ;; Hardware stack levels used:    1
 16936 ;; Hardware stack levels required when called:    4
 16937 ;; This function calls:
 16938 ;;		___ftpack
 16939 ;; This function is called by:
 16940 ;;		_map
 16941 ;;		_scaleiA10kPot
 16942 ;;		_modSin
 16943 ;;		_modTri
 16944 ;;		_modSaw
 16945 ;;		___ftsub
 16946 ;;		_sin
 16947 ;;		_eval_poly
 16948 ;;		_floor
 16949 ;;		_log
 16950 ;;		_scalePotValue
 16951 ;; This function uses a non-reentrant model
 16952 ;;
 16953                           
 16954                           
 16955                           ;psect for function ___ftadd
 16956  1026                     ___ftadd:	
 16957                           
 16958                           ;incstack = 0
 16959                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16960  1026  0021               	movlb	1	; select bank1
 16961  1027  0841               	movf	___ftadd@f1^(0+128),w
 16962  1028  00C7               	movwf	??___ftadd^(0+128)
 16963  1029  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16964  102A  00C8               	movwf	(??___ftadd^(0+128)+1)
 16965  102B  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16966  102C  00C9               	movwf	(??___ftadd^(0+128)+2)
 16967  102D  1003               	clrc
 16968  102E  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16969  102F  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16970  1030  00CA               	movwf	(??___ftadd+3)^(0+128)
 16971  1031  084A               	movf	(??___ftadd+3)^(0+128),w
 16972  1032  00CD               	movwf	___ftadd@exp1^(0+128)
 16973  1033  0844               	movf	___ftadd@f2^(0+128),w
 16974  1034  00C7               	movwf	??___ftadd^(0+128)
 16975  1035  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16976  1036  00C8               	movwf	(??___ftadd^(0+128)+1)
 16977  1037  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16978  1038  00C9               	movwf	(??___ftadd^(0+128)+2)
 16979  1039  1003               	clrc
 16980  103A  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16981  103B  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16982  103C  00CA               	movwf	(??___ftadd+3)^(0+128)
 16983  103D  084A               	movf	(??___ftadd+3)^(0+128),w
 16984  103E  00CC               	movwf	___ftadd@exp2^(0+128)
 16985  103F  084D               	movf	___ftadd@exp1^(0+128),w
 16986  1040  1903               	btfsc	3,2
 16987  1041  284E               	goto	l7726
 16988  1042  084C               	movf	___ftadd@exp2^(0+128),w
 16989  1043  024D               	subwf	___ftadd@exp1^(0+128),w
 16990  1044  1803               	skipnc
 16991  1045  2855               	goto	l7730
 16992  1046  034D               	decf	___ftadd@exp1^(0+128),w
 16993  1047  3AFF               	xorlw	255
 16994  1048  074C               	addwf	___ftadd@exp2^(0+128),w
 16995  1049  00C7               	movwf	??___ftadd^(0+128)
 16996  104A  3019               	movlw	25
 16997  104B  0247               	subwf	??___ftadd^(0+128),w
 16998  104C  1C03               	skipc
 16999  104D  2855               	goto	l7730
 17000  104E                     l7726:	
 17001  104E  0844               	movf	___ftadd@f2^(0+128),w
 17002  104F  00C1               	movwf	?___ftadd^(0+128)
 17003  1050  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17004  1051  00C2               	movwf	(?___ftadd+1)^(0+128)
 17005  1052  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17006  1053  00C3               	movwf	(?___ftadd+2)^(0+128)
 17007  1054  0008               	return
 17008  1055                     l7730:	
 17009  1055  084C               	movf	___ftadd@exp2^(0+128),w
 17010  1056  1903               	btfsc	3,2
 17011  1057  0008               	return
 17012  1058  084D               	movf	___ftadd@exp1^(0+128),w
 17013  1059  024C               	subwf	___ftadd@exp2^(0+128),w
 17014  105A  1803               	skipnc
 17015  105B  2864               	goto	l7736
 17016  105C  034C               	decf	___ftadd@exp2^(0+128),w
 17017  105D  3AFF               	xorlw	255
 17018  105E  074D               	addwf	___ftadd@exp1^(0+128),w
 17019  105F  00C7               	movwf	??___ftadd^(0+128)
 17020  1060  3019               	movlw	25
 17021  1061  0247               	subwf	??___ftadd^(0+128),w
 17022  1062  1803               	btfsc	3,0
 17023  1063  0008               	return
 17024  1064                     l7736:	
 17025  1064  3006               	movlw	6
 17026  1065  00C7               	movwf	??___ftadd^(0+128)
 17027  1066  0847               	movf	??___ftadd^(0+128),w
 17028  1067  00CB               	movwf	___ftadd@sign^(0+128)
 17029  1068  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17030  1069  17CB               	bsf	___ftadd@sign^(0+128),7
 17031  106A  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17032  106B  174B               	bsf	___ftadd@sign^(0+128),6
 17033  106C  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17034  106D  30FF               	movlw	255
 17035  106E  05C1               	andwf	___ftadd@f1^(0+128),f
 17036  106F  30FF               	movlw	255
 17037  1070  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17038  1071  3000               	movlw	0
 17039  1072  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17040  1073  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17041  1074  30FF               	movlw	255
 17042  1075  05C4               	andwf	___ftadd@f2^(0+128),f
 17043  1076  30FF               	movlw	255
 17044  1077  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17045  1078  3000               	movlw	0
 17046  1079  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17047  107A  084C               	movf	___ftadd@exp2^(0+128),w
 17048  107B  024D               	subwf	___ftadd@exp1^(0+128),w
 17049  107C  1803               	skipnc
 17050  107D  28A0               	goto	l7758
 17051  107E                     l7748:	
 17052  107E  3001               	movlw	1
 17053  107F                     u7955:	
 17054  107F  35C4               	lslf	___ftadd@f2^(0+128),f
 17055  1080  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17056  1081  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17057  1082  0B89               	decfsz	9,f
 17058  1083  287F               	goto	u7955
 17059  1084  3001               	movlw	1
 17060  1085  02CC               	subwf	___ftadd@exp2^(0+128),f
 17061  1086  084C               	movf	___ftadd@exp2^(0+128),w
 17062  1087  064D               	xorwf	___ftadd@exp1^(0+128),w
 17063  1088  1903               	skipnz
 17064  1089  289B               	goto	l7756
 17065  108A  3001               	movlw	1
 17066  108B  02CB               	subwf	___ftadd@sign^(0+128),f
 17067  108C  084B               	movf	___ftadd@sign^(0+128),w
 17068  108D  3907               	andlw	7
 17069  108E  1903               	btfsc	3,2
 17070  108F  289B               	goto	l7756
 17071  1090  287E               	goto	l7748
 17072  1091                     l7754:	
 17073  1091  3001               	movlw	1
 17074  1092                     u7985:	
 17075  1092  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17076  1093  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17077  1094  0CC1               	rrf	___ftadd@f1^(0+128),f
 17078  1095  0B89               	decfsz	9,f
 17079  1096  2892               	goto	u7985
 17080  1097  3001               	movlw	1
 17081  1098  00C7               	movwf	??___ftadd^(0+128)
 17082  1099  0847               	movf	??___ftadd^(0+128),w
 17083  109A  07CD               	addwf	___ftadd@exp1^(0+128),f
 17084  109B                     l7756:	
 17085  109B  084D               	movf	___ftadd@exp1^(0+128),w
 17086  109C  064C               	xorwf	___ftadd@exp2^(0+128),w
 17087  109D  1903               	btfsc	3,2
 17088  109E  28C5               	goto	l2133
 17089  109F  2891               	goto	l7754
 17090  10A0                     l7758:	
 17091  10A0  084D               	movf	___ftadd@exp1^(0+128),w
 17092  10A1  024C               	subwf	___ftadd@exp2^(0+128),w
 17093  10A2  1803               	skipnc
 17094  10A3  28C5               	goto	l2133
 17095  10A4                     l7760:	
 17096  10A4  3001               	movlw	1
 17097  10A5                     u8015:	
 17098  10A5  35C1               	lslf	___ftadd@f1^(0+128),f
 17099  10A6  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17100  10A7  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17101  10A8  0B89               	decfsz	9,f
 17102  10A9  28A5               	goto	u8015
 17103  10AA  3001               	movlw	1
 17104  10AB  02CD               	subwf	___ftadd@exp1^(0+128),f
 17105  10AC  084C               	movf	___ftadd@exp2^(0+128),w
 17106  10AD  064D               	xorwf	___ftadd@exp1^(0+128),w
 17107  10AE  1903               	skipnz
 17108  10AF  28C1               	goto	l7768
 17109  10B0  3001               	movlw	1
 17110  10B1  02CB               	subwf	___ftadd@sign^(0+128),f
 17111  10B2  084B               	movf	___ftadd@sign^(0+128),w
 17112  10B3  3907               	andlw	7
 17113  10B4  1903               	btfsc	3,2
 17114  10B5  28C1               	goto	l7768
 17115  10B6  28A4               	goto	l7760
 17116  10B7                     l7766:	
 17117  10B7  3001               	movlw	1
 17118  10B8                     u8045:	
 17119  10B8  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17120  10B9  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17121  10BA  0CC4               	rrf	___ftadd@f2^(0+128),f
 17122  10BB  0B89               	decfsz	9,f
 17123  10BC  28B8               	goto	u8045
 17124  10BD  3001               	movlw	1
 17125  10BE  00C7               	movwf	??___ftadd^(0+128)
 17126  10BF  0847               	movf	??___ftadd^(0+128),w
 17127  10C0  07CC               	addwf	___ftadd@exp2^(0+128),f
 17128  10C1                     l7768:	
 17129  10C1  084D               	movf	___ftadd@exp1^(0+128),w
 17130  10C2  064C               	xorwf	___ftadd@exp2^(0+128),w
 17131  10C3  1D03               	skipz
 17132  10C4  28B7               	goto	l7766
 17133  10C5                     l2133:	
 17134  10C5  1FCB               	btfss	___ftadd@sign^(0+128),7
 17135  10C6  28D7               	goto	l7772
 17136  10C7  30FF               	movlw	255
 17137  10C8  06C1               	xorwf	___ftadd@f1^(0+128),f
 17138  10C9  30FF               	movlw	255
 17139  10CA  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17140  10CB  30FF               	movlw	255
 17141  10CC  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17142  10CD  3001               	movlw	1
 17143  10CE  07C1               	addwf	___ftadd@f1^(0+128),f
 17144  10CF  3000               	movlw	0
 17145  10D0  1803               	skipnc
 17146  10D1  3001               	movlw	1
 17147  10D2  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17148  10D3  3000               	movlw	0
 17149  10D4  1803               	skipnc
 17150  10D5  3001               	movlw	1
 17151  10D6  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17152  10D7                     l7772:	
 17153  10D7  1F4B               	btfss	___ftadd@sign^(0+128),6
 17154  10D8  28E9               	goto	l7776
 17155  10D9  30FF               	movlw	255
 17156  10DA  06C4               	xorwf	___ftadd@f2^(0+128),f
 17157  10DB  30FF               	movlw	255
 17158  10DC  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17159  10DD  30FF               	movlw	255
 17160  10DE  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17161  10DF  3001               	movlw	1
 17162  10E0  07C4               	addwf	___ftadd@f2^(0+128),f
 17163  10E1  3000               	movlw	0
 17164  10E2  1803               	skipnc
 17165  10E3  3001               	movlw	1
 17166  10E4  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17167  10E5  3000               	movlw	0
 17168  10E6  1803               	skipnc
 17169  10E7  3001               	movlw	1
 17170  10E8  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17171  10E9                     l7776:	
 17172  10E9  01CB               	clrf	___ftadd@sign^(0+128)
 17173  10EA  0841               	movf	___ftadd@f1^(0+128),w
 17174  10EB  07C4               	addwf	___ftadd@f2^(0+128),f
 17175  10EC  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17176  10ED  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17177  10EE  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17178  10EF  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17179  10F0  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17180  10F1  2904               	goto	l7786
 17181  10F2  30FF               	movlw	255
 17182  10F3  06C4               	xorwf	___ftadd@f2^(0+128),f
 17183  10F4  30FF               	movlw	255
 17184  10F5  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17185  10F6  30FF               	movlw	255
 17186  10F7  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17187  10F8  3001               	movlw	1
 17188  10F9  07C4               	addwf	___ftadd@f2^(0+128),f
 17189  10FA  3000               	movlw	0
 17190  10FB  1803               	skipnc
 17191  10FC  3001               	movlw	1
 17192  10FD  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17193  10FE  3000               	movlw	0
 17194  10FF  1803               	skipnc
 17195  1100  3001               	movlw	1
 17196  1101  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17197  1102  01CB               	clrf	___ftadd@sign^(0+128)
 17198  1103  0ACB               	incf	___ftadd@sign^(0+128),f
 17199  1104                     l7786:	
 17200  1104  0844               	movf	___ftadd@f2^(0+128),w
 17201  1105  00A0               	movwf	___ftpack@arg^(0+128)
 17202  1106  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17203  1107  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17204  1108  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17205  1109  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17206  110A  084D               	movf	___ftadd@exp1^(0+128),w
 17207  110B  00C7               	movwf	??___ftadd^(0+128)
 17208  110C  0847               	movf	??___ftadd^(0+128),w
 17209  110D  00A3               	movwf	___ftpack@exp^(0+128)
 17210  110E  084B               	movf	___ftadd@sign^(0+128),w
 17211  110F  00C8               	movwf	(??___ftadd+1)^(0+128)
 17212  1110  0848               	movf	(??___ftadd+1)^(0+128),w
 17213  1111  00A4               	movwf	___ftpack@sign^(0+128)
 17214  1112  31A6  2632         	fcall	___ftpack
 17215  1114  0021               	movlb	1	; select bank1
 17216  1115  0820               	movf	?___ftpack^(0+128),w
 17217  1116  00C1               	movwf	?___ftadd^(0+128)
 17218  1117  0821               	movf	(?___ftpack+1)^(0+128),w
 17219  1118  00C2               	movwf	(?___ftadd+1)^(0+128)
 17220  1119  0822               	movf	(?___ftpack+2)^(0+128),w
 17221  111A  00C3               	movwf	(?___ftadd+2)^(0+128)
 17222  111B  0008               	return
 17223  111C                     __end_of___ftadd:	
 17224                           
 17225                           	psect	text57
 17226  2D8A                     __ptext57:	
 17227 ;; *************** function ___ftneg *****************
 17228 ;; Defined at:
 17229 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17230 ;; Parameters:    Size  Location     Type
 17231 ;;  f1              3   30[BANK1 ] float 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;		None
 17234 ;; Return value:  Size  Location     Type
 17235 ;;                  3   30[BANK1 ] float 
 17236 ;; Registers used:
 17237 ;;		wreg
 17238 ;; Tracked objects:
 17239 ;;		On entry : 0/0
 17240 ;;		On exit  : 0/0
 17241 ;;		Unchanged: 0/0
 17242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17243 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17246 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17247 ;;Total ram usage:        3 bytes
 17248 ;; Hardware stack levels used:    1
 17249 ;; Hardware stack levels required when called:    3
 17250 ;; This function calls:
 17251 ;;		Nothing
 17252 ;; This function is called by:
 17253 ;;		_map
 17254 ;;		_scaleiA10kPot
 17255 ;;		_modSin
 17256 ;;		_modTri
 17257 ;;		_modSaw
 17258 ;;		_pow
 17259 ;;		_sin
 17260 ;;		_exp
 17261 ;;		_ldexp
 17262 ;;		_scalePotValue
 17263 ;; This function uses a non-reentrant model
 17264 ;;
 17265                           
 17266                           
 17267                           ;psect for function ___ftneg
 17268  2D8A                     ___ftneg:	
 17269                           
 17270                           ;incstack = 0
 17271                           ; Regs used in ___ftneg: [wreg]
 17272  2D8A  0021               	movlb	1	; select bank1
 17273  2D8B  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17274  2D8C  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17275  2D8D  043E               	iorwf	___ftneg@f1^(0+128),w
 17276  2D8E  1903               	skipnz
 17277  2D8F  0008               	return
 17278  2D90  3080               	movlw	128
 17279  2D91  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17280  2D92  0008               	return
 17281  2D93                     __end_of___ftneg:	
 17282                           
 17283                           	psect	text58
 17284  1D27                     __ptext58:	
 17285 ;; *************** function ___ftdiv *****************
 17286 ;; Defined at:
 17287 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  f2              3   46[BANK1 ] float 
 17290 ;;  f1              3   49[BANK1 ] float 
 17291 ;; Auto vars:     Size  Location     Type
 17292 ;;  f3              3   57[BANK1 ] float 
 17293 ;;  sign            1   61[BANK1 ] unsigned char 
 17294 ;;  exp             1   60[BANK1 ] unsigned char 
 17295 ;;  cntr            1   56[BANK1 ] unsigned char 
 17296 ;; Return value:  Size  Location     Type
 17297 ;;                  3   46[BANK1 ] float 
 17298 ;; Registers used:
 17299 ;;		wreg, status,2, status,0, pclath, cstack
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17305 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17306 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17307 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17308 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17309 ;;Total ram usage:       16 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; Hardware stack levels required when called:    4
 17312 ;; This function calls:
 17313 ;;		___ftpack
 17314 ;; This function is called by:
 17315 ;;		_map
 17316 ;;		_scaleA100kPot
 17317 ;;		_scaleA10kPot
 17318 ;;		_scaleiA10kPot
 17319 ;;		_calcSinArray
 17320 ;;		_getModulationDelayTime
 17321 ;;		_modSin
 17322 ;;		_modTri
 17323 ;;		_modSaw
 17324 ;;		_sin
 17325 ;;		_exp
 17326 ;;		_scalePotValue
 17327 ;;		_scaleiA100kPot
 17328 ;; This function uses a non-reentrant model
 17329 ;;
 17330                           
 17331                           
 17332                           ;psect for function ___ftdiv
 17333  1D27                     ___ftdiv:	
 17334                           
 17335                           ;incstack = 0
 17336                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17337  1D27  0021               	movlb	1	; select bank1
 17338  1D28  0851               	movf	___ftdiv@f1^(0+128),w
 17339  1D29  00D4               	movwf	??___ftdiv^(0+128)
 17340  1D2A  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17341  1D2B  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17342  1D2C  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17343  1D2D  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17344  1D2E  1003               	clrc
 17345  1D2F  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17346  1D30  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17347  1D31  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17348  1D32  0857               	movf	(??___ftdiv+3)^(0+128),w
 17349  1D33  00DC               	movwf	___ftdiv@exp^(0+128)
 17350  1D34  085C               	movf	___ftdiv@exp^(0+128),w
 17351  1D35  1D03               	btfss	3,2
 17352  1D36  2D3E               	goto	l7998
 17353  1D37  3000               	movlw	0
 17354  1D38  00CE               	movwf	?___ftdiv^(0+128)
 17355  1D39  3000               	movlw	0
 17356  1D3A  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17357  1D3B  3000               	movlw	0
 17358  1D3C  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17359  1D3D  0008               	return
 17360  1D3E                     l7998:	
 17361  1D3E  084E               	movf	___ftdiv@f2^(0+128),w
 17362  1D3F  00D4               	movwf	??___ftdiv^(0+128)
 17363  1D40  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17364  1D41  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17365  1D42  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17366  1D43  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17367  1D44  1003               	clrc
 17368  1D45  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17369  1D46  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17370  1D47  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17371  1D48  0857               	movf	(??___ftdiv+3)^(0+128),w
 17372  1D49  00DD               	movwf	___ftdiv@sign^(0+128)
 17373  1D4A  085D               	movf	___ftdiv@sign^(0+128),w
 17374  1D4B  1D03               	btfss	3,2
 17375  1D4C  2D54               	goto	l8004
 17376  1D4D  3000               	movlw	0
 17377  1D4E  00CE               	movwf	?___ftdiv^(0+128)
 17378  1D4F  3000               	movlw	0
 17379  1D50  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17380  1D51  3000               	movlw	0
 17381  1D52  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17382  1D53  0008               	return
 17383  1D54                     l8004:	
 17384  1D54  3000               	movlw	0
 17385  1D55  00D9               	movwf	___ftdiv@f3^(0+128)
 17386  1D56  3000               	movlw	0
 17387  1D57  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17388  1D58  3000               	movlw	0
 17389  1D59  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17390  1D5A  3089               	movlw	137
 17391  1D5B  075D               	addwf	___ftdiv@sign^(0+128),w
 17392  1D5C  00D4               	movwf	??___ftdiv^(0+128)
 17393  1D5D  0854               	movf	??___ftdiv^(0+128),w
 17394  1D5E  02DC               	subwf	___ftdiv@exp^(0+128),f
 17395  1D5F  0851               	movf	___ftdiv@f1^(0+128),w
 17396  1D60  00D4               	movwf	??___ftdiv^(0+128)
 17397  1D61  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17398  1D62  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17399  1D63  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17400  1D64  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17401  1D65  3010               	movlw	16
 17402  1D66                     u8445:	
 17403  1D66  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17404  1D67  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17405  1D68  0CD4               	rrf	??___ftdiv^(0+128),f
 17406  1D69  0B89               	decfsz	9,f
 17407  1D6A  2D66               	goto	u8445
 17408  1D6B  0854               	movf	??___ftdiv^(0+128),w
 17409  1D6C  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17410  1D6D  0857               	movf	(??___ftdiv+3)^(0+128),w
 17411  1D6E  00DD               	movwf	___ftdiv@sign^(0+128)
 17412  1D6F  084E               	movf	___ftdiv@f2^(0+128),w
 17413  1D70  00D4               	movwf	??___ftdiv^(0+128)
 17414  1D71  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17415  1D72  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17416  1D73  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17417  1D74  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17418  1D75  3010               	movlw	16
 17419  1D76                     u8455:	
 17420  1D76  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17421  1D77  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17422  1D78  0CD4               	rrf	??___ftdiv^(0+128),f
 17423  1D79  0B89               	decfsz	9,f
 17424  1D7A  2D76               	goto	u8455
 17425  1D7B  0854               	movf	??___ftdiv^(0+128),w
 17426  1D7C  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17427  1D7D  0857               	movf	(??___ftdiv+3)^(0+128),w
 17428  1D7E  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17429  1D7F  3080               	movlw	128
 17430  1D80  00D4               	movwf	??___ftdiv^(0+128)
 17431  1D81  0854               	movf	??___ftdiv^(0+128),w
 17432  1D82  05DD               	andwf	___ftdiv@sign^(0+128),f
 17433  1D83  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17434  1D84  30FF               	movlw	255
 17435  1D85  05D1               	andwf	___ftdiv@f1^(0+128),f
 17436  1D86  30FF               	movlw	255
 17437  1D87  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17438  1D88  3000               	movlw	0
 17439  1D89  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17440  1D8A  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17441  1D8B  30FF               	movlw	255
 17442  1D8C  05CE               	andwf	___ftdiv@f2^(0+128),f
 17443  1D8D  30FF               	movlw	255
 17444  1D8E  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17445  1D8F  3000               	movlw	0
 17446  1D90  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17447  1D91  3018               	movlw	24
 17448  1D92  00D4               	movwf	??___ftdiv^(0+128)
 17449  1D93  0854               	movf	??___ftdiv^(0+128),w
 17450  1D94  00D8               	movwf	___ftdiv@cntr^(0+128)
 17451  1D95                     l8018:	
 17452  1D95  3001               	movlw	1
 17453  1D96                     u8465:	
 17454  1D96  35D9               	lslf	___ftdiv@f3^(0+128),f
 17455  1D97  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17456  1D98  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17457  1D99  0B89               	decfsz	9,f
 17458  1D9A  2D96               	goto	u8465
 17459  1D9B  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17460  1D9C  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17461  1D9D  1D03               	skipz
 17462  1D9E  2DA5               	goto	u8475
 17463  1D9F  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17464  1DA0  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17465  1DA1  1D03               	skipz
 17466  1DA2  2DA5               	goto	u8475
 17467  1DA3  084E               	movf	___ftdiv@f2^(0+128),w
 17468  1DA4  0251               	subwf	___ftdiv@f1^(0+128),w
 17469  1DA5                     u8475:	
 17470  1DA5  1C03               	skipc
 17471  1DA6  2DAE               	goto	l8026
 17472  1DA7  084E               	movf	___ftdiv@f2^(0+128),w
 17473  1DA8  02D1               	subwf	___ftdiv@f1^(0+128),f
 17474  1DA9  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17475  1DAA  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17476  1DAB  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17477  1DAC  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17478  1DAD  1459               	bsf	___ftdiv@f3^(0+128),0
 17479  1DAE                     l8026:	
 17480  1DAE  3001               	movlw	1
 17481  1DAF                     u8485:	
 17482  1DAF  35D1               	lslf	___ftdiv@f1^(0+128),f
 17483  1DB0  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17484  1DB1  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17485  1DB2  0B89               	decfsz	9,f
 17486  1DB3  2DAF               	goto	u8485
 17487  1DB4  3001               	movlw	1
 17488  1DB5  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17489  1DB6  1D03               	btfss	3,2
 17490  1DB7  2D95               	goto	l8018
 17491  1DB8  0859               	movf	___ftdiv@f3^(0+128),w
 17492  1DB9  00A0               	movwf	___ftpack@arg^(0+128)
 17493  1DBA  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17494  1DBB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17495  1DBC  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17496  1DBD  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17497  1DBE  085C               	movf	___ftdiv@exp^(0+128),w
 17498  1DBF  00D4               	movwf	??___ftdiv^(0+128)
 17499  1DC0  0854               	movf	??___ftdiv^(0+128),w
 17500  1DC1  00A3               	movwf	___ftpack@exp^(0+128)
 17501  1DC2  085D               	movf	___ftdiv@sign^(0+128),w
 17502  1DC3  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17503  1DC4  0855               	movf	(??___ftdiv+1)^(0+128),w
 17504  1DC5  00A4               	movwf	___ftpack@sign^(0+128)
 17505  1DC6  31A6  2632         	fcall	___ftpack
 17506  1DC8  0021               	movlb	1	; select bank1
 17507  1DC9  0820               	movf	?___ftpack^(0+128),w
 17508  1DCA  00CE               	movwf	?___ftdiv^(0+128)
 17509  1DCB  0821               	movf	(?___ftpack+1)^(0+128),w
 17510  1DCC  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17511  1DCD  0822               	movf	(?___ftpack+2)^(0+128),w
 17512  1DCE  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17513  1DCF  0008               	return
 17514  1DD0                     __end_of___ftdiv:	
 17515                           
 17516                           	psect	text59
 17517  2ED5                     __ptext59:	
 17518 ;; *************** function ___awtoft *****************
 17519 ;; Defined at:
 17520 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;  c               2    8[BANK1 ] int 
 17523 ;; Auto vars:     Size  Location     Type
 17524 ;;  sign            1   13[BANK1 ] unsigned char 
 17525 ;; Return value:  Size  Location     Type
 17526 ;;                  3    8[BANK1 ] float 
 17527 ;; Registers used:
 17528 ;;		wreg, status,2, status,0, pclath, cstack
 17529 ;; Tracked objects:
 17530 ;;		On entry : 0/0
 17531 ;;		On exit  : 0/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17534 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17535 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17536 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17537 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17538 ;;Total ram usage:        6 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; Hardware stack levels required when called:    4
 17541 ;; This function calls:
 17542 ;;		___ftpack
 17543 ;; This function is called by:
 17544 ;;		_main
 17545 ;;		_set_subdivision
 17546 ;;		_calcSinArray
 17547 ;;		_getModulationDelayTime
 17548 ;;		_updateModulationArray
 17549 ;;		_exp
 17550 ;;		_log
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           
 17555                           ;psect for function ___awtoft
 17556  2ED5                     ___awtoft:	
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17560  2ED5  0021               	movlb	1	; select bank1
 17561  2ED6  01AD               	clrf	___awtoft@sign^(0+128)
 17562  2ED7  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17563  2ED8  2EE0               	goto	l7988
 17564  2ED9  09A8               	comf	___awtoft@c^(0+128),f
 17565  2EDA  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17566  2EDB  0AA8               	incf	___awtoft@c^(0+128),f
 17567  2EDC  1903               	skipnz
 17568  2EDD  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17569  2EDE  01AD               	clrf	___awtoft@sign^(0+128)
 17570  2EDF  0AAD               	incf	___awtoft@sign^(0+128),f
 17571  2EE0                     l7988:	
 17572  2EE0  0828               	movf	___awtoft@c^(0+128),w
 17573  2EE1  00A0               	movwf	___ftpack@arg^(0+128)
 17574  2EE2  0829               	movf	(___awtoft@c+1)^(0+128),w
 17575  2EE3  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17576  2EE4  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17577  2EE5  308E               	movlw	142
 17578  2EE6  00AB               	movwf	??___awtoft^(0+128)
 17579  2EE7  082B               	movf	??___awtoft^(0+128),w
 17580  2EE8  00A3               	movwf	___ftpack@exp^(0+128)
 17581  2EE9  082D               	movf	___awtoft@sign^(0+128),w
 17582  2EEA  00AC               	movwf	(??___awtoft+1)^(0+128)
 17583  2EEB  082C               	movf	(??___awtoft+1)^(0+128),w
 17584  2EEC  00A4               	movwf	___ftpack@sign^(0+128)
 17585  2EED  31A6  2632         	fcall	___ftpack
 17586  2EEF  0021               	movlb	1	; select bank1
 17587  2EF0  0820               	movf	?___ftpack^(0+128),w
 17588  2EF1  00A8               	movwf	?___awtoft^(0+128)
 17589  2EF2  0821               	movf	(?___ftpack+1)^(0+128),w
 17590  2EF3  00A9               	movwf	(?___awtoft+1)^(0+128)
 17591  2EF4  0822               	movf	(?___ftpack+2)^(0+128),w
 17592  2EF5  00AA               	movwf	(?___awtoft+2)^(0+128)
 17593  2EF6  0008               	return
 17594  2EF7                     __end_of___awtoft:	
 17595                           
 17596                           	psect	text60
 17597  2632                     __ptext60:	
 17598 ;; *************** function ___ftpack *****************
 17599 ;; Defined at:
 17600 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17601 ;; Parameters:    Size  Location     Type
 17602 ;;  arg             3    0[BANK1 ] unsigned um
 17603 ;;  exp             1    3[BANK1 ] unsigned char 
 17604 ;;  sign            1    4[BANK1 ] unsigned char 
 17605 ;; Auto vars:     Size  Location     Type
 17606 ;;		None
 17607 ;; Return value:  Size  Location     Type
 17608 ;;                  3    0[BANK1 ] float 
 17609 ;; Registers used:
 17610 ;;		wreg, status,2, status,0
 17611 ;; Tracked objects:
 17612 ;;		On entry : 0/0
 17613 ;;		On exit  : 0/0
 17614 ;;		Unchanged: 0/0
 17615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17616 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17618 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17619 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17620 ;;Total ram usage:        8 bytes
 17621 ;; Hardware stack levels used:    1
 17622 ;; Hardware stack levels required when called:    3
 17623 ;; This function calls:
 17624 ;;		Nothing
 17625 ;; This function is called by:
 17626 ;;		___altoft
 17627 ;;		___awtoft
 17628 ;;		___ftadd
 17629 ;;		___ftdiv
 17630 ;;		___ftmul
 17631 ;;		___lltoft
 17632 ;; This function uses a non-reentrant model
 17633 ;;
 17634                           
 17635                           
 17636                           ;psect for function ___ftpack
 17637  2632                     ___ftpack:	
 17638                           
 17639                           ;incstack = 0
 17640                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17641  2632  0021               	movlb	1	; select bank1
 17642  2633  0823               	movf	___ftpack@exp^(0+128),w
 17643  2634  1903               	btfsc	3,2
 17644  2635  2E3B               	goto	l7626
 17645  2636  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17646  2637  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17647  2638  0420               	iorwf	___ftpack@arg^(0+128),w
 17648  2639  1D03               	skipz
 17649  263A  2E4C               	goto	l7632
 17650  263B                     l7626:	
 17651  263B  3000               	movlw	0
 17652  263C  00A0               	movwf	?___ftpack^(0+128)
 17653  263D  3000               	movlw	0
 17654  263E  00A1               	movwf	(?___ftpack+1)^(0+128)
 17655  263F  3000               	movlw	0
 17656  2640  00A2               	movwf	(?___ftpack+2)^(0+128)
 17657  2641  0008               	return
 17658  2642                     l7630:	
 17659  2642  3001               	movlw	1
 17660  2643  00A5               	movwf	??___ftpack^(0+128)
 17661  2644  0825               	movf	??___ftpack^(0+128),w
 17662  2645  07A3               	addwf	___ftpack@exp^(0+128),f
 17663  2646  3001               	movlw	1
 17664  2647                     u7685:	
 17665  2647  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17666  2648  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17667  2649  0CA0               	rrf	___ftpack@arg^(0+128),f
 17668  264A  0B89               	decfsz	9,f
 17669  264B  2E47               	goto	u7685
 17670  264C                     l7632:	
 17671  264C  30FE               	movlw	254
 17672  264D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17673  264E  1903               	btfsc	3,2
 17674  264F  2E65               	goto	l2102
 17675  2650  2E42               	goto	l7630
 17676  2651                     l7634:	
 17677  2651  3001               	movlw	1
 17678  2652  00A5               	movwf	??___ftpack^(0+128)
 17679  2653  0825               	movf	??___ftpack^(0+128),w
 17680  2654  07A3               	addwf	___ftpack@exp^(0+128),f
 17681  2655  3001               	movlw	1
 17682  2656  07A0               	addwf	___ftpack@arg^(0+128),f
 17683  2657  3000               	movlw	0
 17684  2658  1803               	skipnc
 17685  2659  3001               	movlw	1
 17686  265A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17687  265B  3000               	movlw	0
 17688  265C  1803               	skipnc
 17689  265D  3001               	movlw	1
 17690  265E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17691  265F  3001               	movlw	1
 17692  2660                     u7705:	
 17693  2660  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17694  2661  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17695  2662  0CA0               	rrf	___ftpack@arg^(0+128),f
 17696  2663  0B89               	decfsz	9,f
 17697  2664  2E60               	goto	u7705
 17698  2665                     l2102:	
 17699  2665  30FF               	movlw	255
 17700  2666  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17701  2667  1903               	btfsc	3,2
 17702  2668  2E72               	goto	l7642
 17703  2669  2E51               	goto	l7634
 17704  266A                     l7640:	
 17705  266A  3001               	movlw	1
 17706  266B  02A3               	subwf	___ftpack@exp^(0+128),f
 17707  266C  3001               	movlw	1
 17708  266D                     u7725:	
 17709  266D  35A0               	lslf	___ftpack@arg^(0+128),f
 17710  266E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17711  266F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17712  2670  0B89               	decfsz	9,f
 17713  2671  2E6D               	goto	u7725
 17714  2672                     l7642:	
 17715  2672  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17716  2673  2E78               	goto	l2109
 17717  2674  3002               	movlw	2
 17718  2675  0223               	subwf	___ftpack@exp^(0+128),w
 17719  2676  1803               	skipnc
 17720  2677  2E6A               	goto	l7640
 17721  2678                     l2109:	
 17722  2678  1823               	btfsc	___ftpack@exp^(0+128),0
 17723  2679  2E80               	goto	l2110
 17724  267A  30FF               	movlw	255
 17725  267B  05A0               	andwf	___ftpack@arg^(0+128),f
 17726  267C  307F               	movlw	127
 17727  267D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17728  267E  30FF               	movlw	255
 17729  267F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17730  2680                     l2110:	
 17731  2680  1003               	clrc
 17732  2681  0CA3               	rrf	___ftpack@exp^(0+128),f
 17733  2682  0823               	movf	___ftpack@exp^(0+128),w
 17734  2683  00A5               	movwf	??___ftpack^(0+128)
 17735  2684  01A6               	clrf	(??___ftpack^(0+128)+1)
 17736  2685  01A7               	clrf	(??___ftpack^(0+128)+2)
 17737  2686  3010               	movlw	16
 17738  2687                     u7765:	
 17739  2687  35A5               	lslf	??___ftpack^(0+128),f
 17740  2688  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17741  2689  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17742  268A  0B89               	decfsz	9,f
 17743  268B  2E87               	goto	u7765
 17744  268C  0825               	movf	??___ftpack^(0+128),w
 17745  268D  04A0               	iorwf	___ftpack@arg^(0+128),f
 17746  268E  0826               	movf	(??___ftpack+1)^(0+128),w
 17747  268F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17748  2690  0827               	movf	(??___ftpack+2)^(0+128),w
 17749  2691  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17750  2692  0824               	movf	___ftpack@sign^(0+128),w
 17751  2693  1903               	btfsc	3,2
 17752  2694  0008               	return
 17753  2695  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17754  2696  0008               	return
 17755  2697                     __end_of___ftpack:	
 17756                           
 17757                           	psect	text61
 17758  2DC6                     __ptext61:	
 17759 ;; *************** function _adc_convert *****************
 17760 ;; Defined at:
 17761 ;;		line 122 in file "user.c"
 17762 ;; Parameters:    Size  Location     Type
 17763 ;;  channel         1    wreg     unsigned char 
 17764 ;; Auto vars:     Size  Location     Type
 17765 ;;  channel         1    3[BANK1 ] unsigned char 
 17766 ;; Return value:  Size  Location     Type
 17767 ;;                  2    0[BANK1 ] unsigned int 
 17768 ;; Registers used:
 17769 ;;		wreg, status,2, status,0
 17770 ;; Tracked objects:
 17771 ;;		On entry : 0/0
 17772 ;;		On exit  : 0/0
 17773 ;;		Unchanged: 0/0
 17774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17775 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17776 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17777 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17778 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17779 ;;Total ram usage:        4 bytes
 17780 ;; Hardware stack levels used:    1
 17781 ;; Hardware stack levels required when called:    3
 17782 ;; This function calls:
 17783 ;;		Nothing
 17784 ;; This function is called by:
 17785 ;;		_main
 17786 ;; This function uses a non-reentrant model
 17787 ;;
 17788                           
 17789                           
 17790                           ;psect for function _adc_convert
 17791  2DC6                     _adc_convert:	
 17792                           
 17793                           ;incstack = 0
 17794                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17795                           ;adc_convert@channel stored from wreg
 17796  2DC6  0021               	movlb	1	; select bank1
 17797  2DC7  00A3               	movwf	adc_convert@channel^(0+128)
 17798                           
 17799                           ;user.c: 123: ADCON0bits.CHS = channel;
 17800  2DC8  0823               	movf	adc_convert@channel^(0+128),w
 17801  2DC9  00A2               	movwf	??_adc_convert^(0+128)
 17802  2DCA  0DA2               	rlf	??_adc_convert^(0+128),f
 17803  2DCB  0DA2               	rlf	??_adc_convert^(0+128),f
 17804  2DCC  081D               	movf	29,w	;volatile
 17805  2DCD  0622               	xorwf	??_adc_convert^(0+128),w
 17806  2DCE  3983               	andlw	-125
 17807  2DCF  0622               	xorwf	??_adc_convert^(0+128),w
 17808  2DD0  009D               	movwf	29	;volatile
 17809                           
 17810                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17811  2DD1  149D               	bsf	29,1	;volatile
 17812  2DD2                     l583:	
 17813                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17814                           
 17815  2DD2  189D               	btfsc	29,1	;volatile
 17816  2DD3  2DD2               	goto	l583
 17817                           
 17818                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17819  2DD4  081C               	movf	28,w	;volatile
 17820  2DD5  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17821  2DD6  081B               	movf	27,w	;volatile
 17822  2DD7  00A0               	movwf	?_adc_convert^(0+128)
 17823  2DD8  0008               	return
 17824  2DD9                     __end_of_adc_convert:	
 17825                           
 17826                           	psect	text62
 17827  22E3                     __ptext62:	
 17828 ;; *************** function _USARTInit *****************
 17829 ;; Defined at:
 17830 ;;		line 31 in file "usart_pic16.c"
 17831 ;; Parameters:    Size  Location     Type
 17832 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17833 ;; Auto vars:     Size  Location     Type
 17834 ;;		None
 17835 ;; Return value:  Size  Location     Type
 17836 ;;                  1    wreg      void 
 17837 ;; Registers used:
 17838 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17839 ;; Tracked objects:
 17840 ;;		On entry : 0/0
 17841 ;;		On exit  : 0/0
 17842 ;;		Unchanged: 0/0
 17843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17844 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17846 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17847 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17848 ;;Total ram usage:        3 bytes
 17849 ;; Hardware stack levels used:    1
 17850 ;; Hardware stack levels required when called:    3
 17851 ;; This function calls:
 17852 ;;		Nothing
 17853 ;; This function is called by:
 17854 ;;		_main
 17855 ;; This function uses a non-reentrant model
 17856 ;;
 17857                           
 17858                           
 17859                           ;psect for function _USARTInit
 17860  22E3                     _USARTInit:	
 17861                           
 17862                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17863                           
 17864                           ;incstack = 0
 17865                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17866  22E3  30FF               	movlw	255
 17867  22E4  0020               	movlb	0	; select bank0
 17868  22E5  00CE               	movwf	_UQEnd	;volatile
 17869  22E6  0021               	movlb	1	; select bank1
 17870  22E7  00A2               	movwf	??_USARTInit^(0+128)
 17871  22E8  0822               	movf	??_USARTInit^(0+128),w
 17872  22E9  00FD               	movwf	_UQFront	;volatile
 17873                           
 17874                           ;usart_pic16.c: 37: switch(baud_rate)
 17875  22EA  2AF5               	goto	l8650
 17876  22EB                     l8640:	
 17877                           ;usart_pic16.c: 38: {
 17878                           ;usart_pic16.c: 39: case 9600:
 17879                           
 17880                           
 17881                           ;usart_pic16.c: 40: SPBRG=103;
 17882  22EB  3067               	movlw	103
 17883  22EC  2AF2               	goto	L23
 17884  22ED                     l8642:	
 17885                           ;usart_pic16.c: 42: case 19200:
 17886                           
 17887                           ;usart_pic16.c: 41: break;
 17888                           
 17889                           
 17890                           ;usart_pic16.c: 43: SPBRG=51;
 17891  22ED  3033               	movlw	51
 17892  22EE  2AF2               	goto	L23
 17893  22EF                     l8644:	
 17894                           ;usart_pic16.c: 45: case 31250:
 17895                           
 17896                           ;usart_pic16.c: 44: break;
 17897                           
 17898                           
 17899                           ;usart_pic16.c: 46: SPBRG = 31;
 17900  22EF  301F               	movlw	31
 17901  22F0  2AF2               	goto	L23
 17902  22F1                     l8646:	
 17903                           ;usart_pic16.c: 48: case 38400:
 17904                           
 17905                           ;usart_pic16.c: 47: break;
 17906                           
 17907                           
 17908                           ;usart_pic16.c: 49: SPBRG=25;
 17909  22F1  3019               	movlw	25
 17910  22F2                     L23:	
 17911  22F2  0023               	movlb	3	; select bank3
 17912  22F3  009B               	movwf	27	;volatile
 17913                           
 17914                           ;usart_pic16.c: 51: }
 17915                           
 17916                           ;usart_pic16.c: 50: break;
 17917  22F4  2B18               	goto	l1695
 17918  22F5                     l8650:	
 17919                           
 17920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17921                           ; Switch size 1, requested type "space"
 17922                           ; Number of cases is 4, Range of values is 37 to 150
 17923                           ; switch strategies available:
 17924                           ; Name         Instructions Cycles
 17925                           ; simple_byte           13     7 (average)
 17926                           ; direct_byte          237     9 (fixed)
 17927                           ; jumptable            263     9 (fixed)
 17928                           ;	Chosen strategy is simple_byte
 17929  22F5  0021               	movlb	1	; select bank1
 17930  22F6  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17931  22F7  3A25               	xorlw	37	; case 37
 17932  22F8  1903               	skipnz
 17933  22F9  2B04               	goto	l9752
 17934  22FA  3A6E               	xorlw	110	; case 75
 17935  22FB  1903               	skipnz
 17936  22FC  2B09               	goto	l9754
 17937  22FD  3A31               	xorlw	49	; case 122
 17938  22FE  1903               	skipnz
 17939  22FF  2B0E               	goto	l9756
 17940  2300  3AEC               	xorlw	236	; case 150
 17941  2301  1903               	skipnz
 17942  2302  2B13               	goto	l9758
 17943  2303  2B18               	goto	l1695
 17944  2304                     l9752:	
 17945                           
 17946                           ; Switch size 1, requested type "space"
 17947                           ; Number of cases is 1, Range of values is 128 to 128
 17948                           ; switch strategies available:
 17949                           ; Name         Instructions Cycles
 17950                           ; simple_byte            4     3 (average)
 17951                           ; direct_byte           11     9 (fixed)
 17952                           ; jumptable            263     9 (fixed)
 17953                           ;	Chosen strategy is simple_byte
 17954  2304  0820               	movf	USARTInit@baud_rate^(0+128),w
 17955  2305  3A80               	xorlw	128	; case 128
 17956  2306  1903               	skipnz
 17957  2307  2AEB               	goto	l8640
 17958  2308  2B18               	goto	l1695
 17959  2309                     l9754:	
 17960                           
 17961                           ; Switch size 1, requested type "space"
 17962                           ; Number of cases is 1, Range of values is 0 to 0
 17963                           ; switch strategies available:
 17964                           ; Name         Instructions Cycles
 17965                           ; simple_byte            4     3 (average)
 17966                           ; direct_byte            8     6 (fixed)
 17967                           ; jumptable            260     6 (fixed)
 17968                           ;	Chosen strategy is simple_byte
 17969  2309  0820               	movf	USARTInit@baud_rate^(0+128),w
 17970  230A  3A00               	xorlw	0	; case 0
 17971  230B  1903               	skipnz
 17972  230C  2AED               	goto	l8642
 17973  230D  2B18               	goto	l1695
 17974  230E                     l9756:	
 17975                           
 17976                           ; Switch size 1, requested type "space"
 17977                           ; Number of cases is 1, Range of values is 18 to 18
 17978                           ; switch strategies available:
 17979                           ; Name         Instructions Cycles
 17980                           ; simple_byte            4     3 (average)
 17981                           ; direct_byte           11     9 (fixed)
 17982                           ; jumptable            263     9 (fixed)
 17983                           ;	Chosen strategy is simple_byte
 17984  230E  0820               	movf	USARTInit@baud_rate^(0+128),w
 17985  230F  3A12               	xorlw	18	; case 18
 17986  2310  1903               	skipnz
 17987  2311  2AEF               	goto	l8644
 17988  2312  2B18               	goto	l1695
 17989  2313                     l9758:	
 17990                           
 17991                           ; Switch size 1, requested type "space"
 17992                           ; Number of cases is 1, Range of values is 0 to 0
 17993                           ; switch strategies available:
 17994                           ; Name         Instructions Cycles
 17995                           ; simple_byte            4     3 (average)
 17996                           ; direct_byte            8     6 (fixed)
 17997                           ; jumptable            260     6 (fixed)
 17998                           ;	Chosen strategy is simple_byte
 17999  2313  0820               	movf	USARTInit@baud_rate^(0+128),w
 18000  2314  3A00               	xorlw	0	; case 0
 18001  2315  1903               	skipnz
 18002  2316  2AF1               	goto	l8646
 18003  2317  2B18               	goto	l1695
 18004  2318                     l1695:	
 18005                           
 18006                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18007  2318  0023               	movlb	3	; select bank3
 18008  2319  131E               	bcf	30,6	;volatile
 18009                           
 18010                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18011  231A  169E               	bsf	30,5	;volatile
 18012                           
 18013                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18014  231B  121E               	bcf	30,4	;volatile
 18015                           
 18016                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18017  231C  151E               	bsf	30,2	;volatile
 18018                           
 18019                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18020  231D  179D               	bsf	29,7	;volatile
 18021                           
 18022                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18023  231E  131D               	bcf	29,6	;volatile
 18024                           
 18025                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18026  231F  161D               	bsf	29,4	;volatile
 18027                           
 18028                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18029  2320  119D               	bcf	29,3	;volatile
 18030                           
 18031                           ;usart_pic16.c: 65: RCIE=1;
 18032  2321  0021               	movlb	1	; select bank1
 18033  2322  1691               	bsf	17,5	;volatile
 18034                           
 18035                           ;usart_pic16.c: 66: PEIE=1;
 18036  2323  170B               	bsf	11,6	;volatile
 18037                           
 18038                           ;usart_pic16.c: 68: (GIE = 1);
 18039  2324  178B               	bsf	11,7	;volatile
 18040  2325  0008               	return
 18041  2326                     __end_of_USARTInit:	
 18042                           
 18043                           	psect	text63
 18044  2709                     __ptext63:	
 18045 ;; *************** function _ReadSavedSettings *****************
 18046 ;; Defined at:
 18047 ;;		line 234 in file "user.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;		None
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;		None
 18052 ;; Return value:  Size  Location     Type
 18053 ;;                  1    wreg      void 
 18054 ;; Registers used:
 18055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18056 ;; Tracked objects:
 18057 ;;		On entry : 0/0
 18058 ;;		On exit  : 0/0
 18059 ;;		Unchanged: 0/0
 18060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18063 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18064 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18065 ;;Total ram usage:        1 bytes
 18066 ;; Hardware stack levels used:    1
 18067 ;; Hardware stack levels required when called:    4
 18068 ;; This function calls:
 18069 ;;		_FLASH_ReadWord
 18070 ;;		_set_leds_bottom
 18071 ;;		_set_leds_top
 18072 ;; This function is called by:
 18073 ;;		_main
 18074 ;; This function uses a non-reentrant model
 18075 ;;
 18076                           
 18077                           
 18078                           ;psect for function _ReadSavedSettings
 18079  2709                     _ReadSavedSettings:	
 18080                           
 18081                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18082                           
 18083                           ;incstack = 0
 18084                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18085  2709  3081               	movlw	129
 18086  270A  0021               	movlb	1	; select bank1
 18087  270B  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18088  270C  301F               	movlw	31
 18089  270D  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18090  270E  31AE  2694  31A7   	fcall	_FLASH_ReadWord
 18091  2711  0021               	movlb	1	; select bank1
 18092  2712  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18093  2713  0020               	movlb	0	; select bank0
 18094  2714  00E4               	movwf	_top_push_state+1
 18095  2715  0021               	movlb	1	; select bank1
 18096  2716  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18097  2717  0020               	movlb	0	; select bank0
 18098  2718  00E3               	movwf	_top_push_state
 18099                           
 18100                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18101  2719  3082               	movlw	130
 18102  271A  0021               	movlb	1	; select bank1
 18103  271B  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18104  271C  301F               	movlw	31
 18105  271D  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18106  271E  31AE  2694  31A7   	fcall	_FLASH_ReadWord
 18107  2721  0021               	movlb	1	; select bank1
 18108  2722  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18109  2723  0020               	movlb	0	; select bank0
 18110  2724  00E0               	movwf	_bottom_push_state+1
 18111  2725  0021               	movlb	1	; select bank1
 18112  2726  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18113  2727  0020               	movlb	0	; select bank0
 18114  2728  00DF               	movwf	_bottom_push_state
 18115                           
 18116                           ;user.c: 239: if (top_push_state > 6) {
 18117  2729  0864               	movf	_top_push_state+1,w
 18118  272A  3A80               	xorlw	128
 18119  272B  0021               	movlb	1	; select bank1
 18120  272C  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18121  272D  3080               	movlw	128
 18122  272E  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18123  272F  1D03               	skipz
 18124  2730  2F34               	goto	u9285
 18125  2731  3007               	movlw	7
 18126  2732  0020               	movlb	0	; select bank0
 18127  2733  0263               	subwf	_top_push_state,w
 18128  2734                     u9285:	
 18129  2734  1C03               	skipc
 18130  2735  2F3B               	goto	l630
 18131                           
 18132                           ;user.c: 241: top_push_state = 6;
 18133  2736  3006               	movlw	6
 18134  2737  0020               	movlb	0	; select bank0
 18135  2738  00E3               	movwf	_top_push_state
 18136  2739  3000               	movlw	0
 18137  273A  00E4               	movwf	_top_push_state+1
 18138  273B                     l630:	
 18139                           
 18140                           ;user.c: 242: }
 18141                           ;user.c: 243: if (bottom_push_state > 5) {
 18142  273B  0020               	movlb	0	; select bank0
 18143  273C  0860               	movf	_bottom_push_state+1,w
 18144  273D  3A80               	xorlw	128
 18145  273E  0021               	movlb	1	; select bank1
 18146  273F  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18147  2740  3080               	movlw	128
 18148  2741  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18149  2742  1D03               	skipz
 18150  2743  2F47               	goto	u9295
 18151  2744  3006               	movlw	6
 18152  2745  0020               	movlb	0	; select bank0
 18153  2746  025F               	subwf	_bottom_push_state,w
 18154  2747                     u9295:	
 18155  2747  1C03               	skipc
 18156  2748  2F4E               	goto	l8704
 18157                           
 18158                           ;user.c: 245: bottom_push_state = 1;
 18159  2749  3001               	movlw	1
 18160  274A  0020               	movlb	0	; select bank0
 18161  274B  00DF               	movwf	_bottom_push_state
 18162  274C  3000               	movlw	0
 18163  274D  00E0               	movwf	_bottom_push_state+1
 18164  274E                     l8704:	
 18165                           
 18166                           ;user.c: 246: }
 18167                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18168  274E  0020               	movlb	0	; select bank0
 18169  274F  086B               	movf	_switchBypass_state,w
 18170  2750  1D03               	btfss	3,2
 18171  2751  2F55               	goto	u9300
 18172  2752  0027               	movlb	7	; select bank7
 18173  2753  148D               	bsf	13,1	;volatile
 18174  2754  2F57               	goto	l8706
 18175  2755                     u9300:	
 18176  2755  0027               	movlb	7	; select bank7
 18177  2756  108D               	bcf	13,1	;volatile
 18178  2757                     l8706:	
 18179                           
 18180                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18181  2757  0020               	movlb	0	; select bank0
 18182  2758  0C6B               	rrf	_switchBypass_state,w
 18183  2759  0027               	movlb	7	; select bank7
 18184  275A  1C03               	skipc
 18185  275B  110D               	bcf	13,2	;volatile
 18186  275C  1803               	skipnc
 18187  275D  150D               	bsf	13,2	;volatile
 18188                           
 18189                           ;user.c: 251: LATBbits.LATB2 = 0;
 18190  275E  0022               	movlb	2	; select bank2
 18191  275F  110D               	bcf	13,2	;volatile
 18192                           
 18193                           ;user.c: 252: LATBbits.LATB3 = 0;
 18194  2760  118D               	bcf	13,3	;volatile
 18195                           
 18196                           ;user.c: 254: LATBbits.LATB4 = 0;
 18197  2761  120D               	bcf	13,4	;volatile
 18198                           
 18199                           ;user.c: 255: LATBbits.LATB5 = 0;
 18200  2762  128D               	bcf	13,5	;volatile
 18201                           
 18202                           ;user.c: 257: LATBbits.LATB1 = 0;
 18203  2763  108D               	bcf	13,1	;volatile
 18204                           
 18205                           ;user.c: 258: LATBbits.LATB0 = 0;
 18206  2764  100D               	bcf	13,0	;volatile
 18207                           
 18208                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18209  2765  0020               	movlb	0	; select bank0
 18210  2766  0864               	movf	_top_push_state+1,w
 18211  2767  0021               	movlb	1	; select bank1
 18212  2768  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18213  2769  0020               	movlb	0	; select bank0
 18214  276A  0863               	movf	_top_push_state,w
 18215  276B  0021               	movlb	1	; select bank1
 18216  276C  00A0               	movwf	set_leds_top@x^(0+128)
 18217  276D  3001               	movlw	1
 18218  276E  00A2               	movwf	set_leds_top@ledState^(0+128)
 18219  276F  3000               	movlw	0
 18220  2770  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18221  2771  31A5  2585  31A7   	fcall	_set_leds_top
 18222                           
 18223                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18224  2774  0020               	movlb	0	; select bank0
 18225  2775  0860               	movf	_bottom_push_state+1,w
 18226  2776  0021               	movlb	1	; select bank1
 18227  2777  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18228  2778  0020               	movlb	0	; select bank0
 18229  2779  085F               	movf	_bottom_push_state,w
 18230  277A  0021               	movlb	1	; select bank1
 18231  277B  00A0               	movwf	set_leds_bottom@x^(0+128)
 18232  277C  31A0  20EF         	fcall	_set_leds_bottom
 18233  277E  0008               	return
 18234  277F                     __end_of_ReadSavedSettings:	
 18235                           
 18236                           	psect	text64
 18237  2585                     __ptext64:	
 18238 ;; *************** function _set_leds_top *****************
 18239 ;; Defined at:
 18240 ;;		line 16 in file "LEDs.c"
 18241 ;; Parameters:    Size  Location     Type
 18242 ;;  x               2    0[BANK1 ] int 
 18243 ;;  ledState        2    2[BANK1 ] int 
 18244 ;; Auto vars:     Size  Location     Type
 18245 ;;		None
 18246 ;; Return value:  Size  Location     Type
 18247 ;;                  1    wreg      void 
 18248 ;; Registers used:
 18249 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18250 ;; Tracked objects:
 18251 ;;		On entry : 0/0
 18252 ;;		On exit  : 0/0
 18253 ;;		Unchanged: 0/0
 18254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18255 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18258 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18259 ;;Total ram usage:        4 bytes
 18260 ;; Hardware stack levels used:    1
 18261 ;; Hardware stack levels required when called:    3
 18262 ;; This function calls:
 18263 ;;		Nothing
 18264 ;; This function is called by:
 18265 ;;		_ReadSavedSettings
 18266 ;;		_ring_tactiles
 18267 ;;		_solidring_tactiles
 18268 ;;		_read_top_tactile
 18269 ;;		_setPresetDisplay
 18270 ;;		_resetRingLEDs
 18271 ;;		_setExpressionDisplay
 18272 ;;		_star_tactiles
 18273 ;; This function uses a non-reentrant model
 18274 ;;
 18275                           
 18276                           
 18277                           ;psect for function _set_leds_top
 18278  2585                     _set_leds_top:	
 18279                           
 18280                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18281                           
 18282                           ;incstack = 0
 18283                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18284  2585  0027               	movlb	7	; select bank7
 18285  2586  100C               	bcf	12,0	;volatile
 18286                           
 18287                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18288  2587  108C               	bcf	12,1	;volatile
 18289                           
 18290                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18291  2588  110C               	bcf	12,2	;volatile
 18292                           
 18293                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18294  2589  118C               	bcf	12,3	;volatile
 18295                           
 18296                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18297  258A  120C               	bcf	12,4	;volatile
 18298                           
 18299                           ;LEDs.c: 22: switch (x) {
 18300  258B  2DBB               	goto	l7668
 18301  258C                     l7656:	
 18302                           ;LEDs.c: 23: case 1:
 18303                           
 18304                           
 18305                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18306  258C  0021               	movlb	1	; select bank1
 18307  258D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18308  258E  0027               	movlb	7	; select bank7
 18309  258F  1C03               	skipc
 18310  2590  100C               	bcf	12,0	;volatile
 18311  2591  1803               	skipnc
 18312  2592  140C               	bsf	12,0	;volatile
 18313                           
 18314                           ;LEDs.c: 25: break;
 18315  2593  0008               	return
 18316  2594                     l7658:	
 18317                           ;LEDs.c: 26: case 2:
 18318                           
 18319                           
 18320                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18321  2594  0021               	movlb	1	; select bank1
 18322  2595  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18323  2596  0027               	movlb	7	; select bank7
 18324  2597  1C03               	skipc
 18325  2598  108C               	bcf	12,1	;volatile
 18326  2599  1803               	skipnc
 18327  259A  148C               	bsf	12,1	;volatile
 18328                           
 18329                           ;LEDs.c: 28: break;
 18330  259B  0008               	return
 18331  259C                     l7660:	
 18332                           ;LEDs.c: 29: case 3:
 18333                           
 18334                           
 18335                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18336  259C  0021               	movlb	1	; select bank1
 18337  259D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18338  259E  0027               	movlb	7	; select bank7
 18339  259F  1C03               	skipc
 18340  25A0  110C               	bcf	12,2	;volatile
 18341  25A1  1803               	skipnc
 18342  25A2  150C               	bsf	12,2	;volatile
 18343                           
 18344                           ;LEDs.c: 31: break;
 18345  25A3  0008               	return
 18346  25A4                     l7662:	
 18347                           ;LEDs.c: 32: case 4:
 18348                           
 18349                           
 18350                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18351  25A4  0021               	movlb	1	; select bank1
 18352  25A5  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18353  25A6  0027               	movlb	7	; select bank7
 18354  25A7  1C03               	skipc
 18355  25A8  118C               	bcf	12,3	;volatile
 18356  25A9  1803               	skipnc
 18357  25AA  158C               	bsf	12,3	;volatile
 18358                           
 18359                           ;LEDs.c: 34: break;
 18360  25AB  0008               	return
 18361  25AC                     l7664:	
 18362                           ;LEDs.c: 35: case 5:
 18363                           
 18364                           
 18365                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18366  25AC  0021               	movlb	1	; select bank1
 18367  25AD  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18368  25AE  0027               	movlb	7	; select bank7
 18369  25AF  1C03               	skipc
 18370  25B0  120C               	bcf	12,4	;volatile
 18371  25B1  1803               	skipnc
 18372  25B2  160C               	bsf	12,4	;volatile
 18373                           
 18374                           ;LEDs.c: 39: break;
 18375                           
 18376                           ;LEDs.c: 38: case 6:
 18377                           
 18378                           ;LEDs.c: 37: break;
 18379  25B3  0008               	return
 18380  25B4                     l787:	
 18381                           ;LEDs.c: 40: case 100:
 18382                           
 18383                           
 18384                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18385  25B4  0027               	movlb	7	; select bank7
 18386  25B5  140C               	bsf	12,0	;volatile
 18387                           
 18388                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18389  25B6  148C               	bsf	12,1	;volatile
 18390                           
 18391                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18392  25B7  150C               	bsf	12,2	;volatile
 18393                           
 18394                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18395  25B8  158C               	bsf	12,3	;volatile
 18396                           
 18397                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18398  25B9  160C               	bsf	12,4	;volatile
 18399                           
 18400                           ;LEDs.c: 47: }
 18401                           
 18402                           ;LEDs.c: 46: break;
 18403  25BA  0008               	return
 18404  25BB                     l7668:	
 18405                           
 18406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18407                           ; Switch size 1, requested type "space"
 18408                           ; Number of cases is 1, Range of values is 0 to 0
 18409                           ; switch strategies available:
 18410                           ; Name         Instructions Cycles
 18411                           ; simple_byte            4     3 (average)
 18412                           ; direct_byte            8     6 (fixed)
 18413                           ; jumptable            260     6 (fixed)
 18414                           ;	Chosen strategy is simple_byte
 18415  25BB  0021               	movlb	1	; select bank1
 18416  25BC  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18417  25BD  3A00               	xorlw	0	; case 0
 18418  25BE  1903               	skipnz
 18419  25BF  2DC1               	goto	l9760
 18420  25C0  2DD8               	goto	l788
 18421  25C1                     l9760:	
 18422                           
 18423                           ; Switch size 1, requested type "space"
 18424                           ; Number of cases is 7, Range of values is 1 to 100
 18425                           ; switch strategies available:
 18426                           ; Name         Instructions Cycles
 18427                           ; simple_byte           22    12 (average)
 18428                           ; direct_byte          209     9 (fixed)
 18429                           ; jumptable            263     9 (fixed)
 18430                           ;	Chosen strategy is simple_byte
 18431  25C1  0820               	movf	set_leds_top@x^(0+128),w
 18432  25C2  3A01               	xorlw	1	; case 1
 18433  25C3  1903               	skipnz
 18434  25C4  2D8C               	goto	l7656
 18435  25C5  3A03               	xorlw	3	; case 2
 18436  25C6  1903               	skipnz
 18437  25C7  2D94               	goto	l7658
 18438  25C8  3A01               	xorlw	1	; case 3
 18439  25C9  1903               	skipnz
 18440  25CA  2D9C               	goto	l7660
 18441  25CB  3A07               	xorlw	7	; case 4
 18442  25CC  1903               	skipnz
 18443  25CD  2DA4               	goto	l7662
 18444  25CE  3A01               	xorlw	1	; case 5
 18445  25CF  1903               	skipnz
 18446  25D0  2DAC               	goto	l7664
 18447  25D1  3A03               	xorlw	3	; case 6
 18448  25D2  1903               	skipnz
 18449  25D3  2DD8               	goto	l788
 18450  25D4  3A62               	xorlw	98	; case 100
 18451  25D5  1903               	skipnz
 18452  25D6  2DB4               	goto	l787
 18453  25D7  2DD8               	goto	l788
 18454  25D8                     l788:	
 18455  25D8  0008               	return
 18456  25D9                     __end_of_set_leds_top:	
 18457                           
 18458                           	psect	text65
 18459  20EF                     __ptext65:	
 18460 ;; *************** function _set_leds_bottom *****************
 18461 ;; Defined at:
 18462 ;;		line 51 in file "LEDs.c"
 18463 ;; Parameters:    Size  Location     Type
 18464 ;;  x               2    0[BANK1 ] int 
 18465 ;; Auto vars:     Size  Location     Type
 18466 ;;		None
 18467 ;; Return value:  Size  Location     Type
 18468 ;;                  1    wreg      void 
 18469 ;; Registers used:
 18470 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18471 ;; Tracked objects:
 18472 ;;		On entry : 0/0
 18473 ;;		On exit  : 0/0
 18474 ;;		Unchanged: 0/0
 18475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18476 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18479 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18480 ;;Total ram usage:        2 bytes
 18481 ;; Hardware stack levels used:    1
 18482 ;; Hardware stack levels required when called:    3
 18483 ;; This function calls:
 18484 ;;		Nothing
 18485 ;; This function is called by:
 18486 ;;		_ReadSavedSettings
 18487 ;;		_ring_tactiles
 18488 ;;		_solidring_tactiles
 18489 ;;		_read_bottom_tactile
 18490 ;;		_setPresetDisplay
 18491 ;;		_resetRingLEDs
 18492 ;;		_setExpressionDisplay
 18493 ;;		_star_tactiles
 18494 ;; This function uses a non-reentrant model
 18495 ;;
 18496                           
 18497                           
 18498                           ;psect for function _set_leds_bottom
 18499  20EF                     _set_leds_bottom:	
 18500                           
 18501                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18502                           
 18503                           ;incstack = 0
 18504                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18505  20EF  0022               	movlb	2	; select bank2
 18506  20F0  100F               	bcf	15,0	;volatile
 18507                           
 18508                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18509  20F1  108F               	bcf	15,1	;volatile
 18510                           
 18511                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18512  20F2  110F               	bcf	15,2	;volatile
 18513                           
 18514                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18515  20F3  118F               	bcf	15,3	;volatile
 18516                           
 18517                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18518  20F4  120F               	bcf	15,4	;volatile
 18519                           
 18520                           ;LEDs.c: 57: switch (x) {
 18521  20F5  290C               	goto	l7684
 18522  20F6                     l792:	
 18523                           ;LEDs.c: 58: case 1:
 18524                           
 18525                           
 18526                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18527  20F6  0022               	movlb	2	; select bank2
 18528  20F7  140F               	bsf	15,0	;volatile
 18529                           
 18530                           ;LEDs.c: 60: break;
 18531  20F8  0008               	return
 18532  20F9                     l794:	
 18533                           ;LEDs.c: 61: case 2:
 18534                           
 18535                           
 18536                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18537  20F9  0022               	movlb	2	; select bank2
 18538  20FA  148F               	bsf	15,1	;volatile
 18539                           
 18540                           ;LEDs.c: 63: break;
 18541  20FB  0008               	return
 18542  20FC                     l795:	
 18543                           ;LEDs.c: 64: case 3:
 18544                           
 18545                           
 18546                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18547  20FC  0022               	movlb	2	; select bank2
 18548  20FD  150F               	bsf	15,2	;volatile
 18549                           
 18550                           ;LEDs.c: 66: break;
 18551  20FE  0008               	return
 18552  20FF                     l796:	
 18553                           ;LEDs.c: 67: case 4:
 18554                           
 18555                           
 18556                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18557  20FF  0022               	movlb	2	; select bank2
 18558  2100  158F               	bsf	15,3	;volatile
 18559                           
 18560                           ;LEDs.c: 69: break;
 18561  2101  0008               	return
 18562  2102                     l797:	
 18563                           ;LEDs.c: 70: case 5:
 18564                           
 18565                           
 18566                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18567  2102  0022               	movlb	2	; select bank2
 18568  2103  160F               	bsf	15,4	;volatile
 18569                           
 18570                           ;LEDs.c: 74: break;
 18571                           
 18572                           ;LEDs.c: 73: case 6:
 18573                           
 18574                           ;LEDs.c: 72: break;
 18575  2104  0008               	return
 18576  2105                     l799:	
 18577                           ;LEDs.c: 75: case 100:
 18578                           
 18579                           
 18580                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18581  2105  0022               	movlb	2	; select bank2
 18582  2106  140F               	bsf	15,0	;volatile
 18583                           
 18584                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18585  2107  148F               	bsf	15,1	;volatile
 18586                           
 18587                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18588  2108  150F               	bsf	15,2	;volatile
 18589                           
 18590                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18591  2109  158F               	bsf	15,3	;volatile
 18592                           
 18593                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18594  210A  160F               	bsf	15,4	;volatile
 18595                           
 18596                           ;LEDs.c: 82: }
 18597                           
 18598                           ;LEDs.c: 81: break;
 18599  210B  0008               	return
 18600  210C                     l7684:	
 18601                           
 18602                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18603                           ; Switch size 1, requested type "space"
 18604                           ; Number of cases is 1, Range of values is 0 to 0
 18605                           ; switch strategies available:
 18606                           ; Name         Instructions Cycles
 18607                           ; simple_byte            4     3 (average)
 18608                           ; direct_byte            8     6 (fixed)
 18609                           ; jumptable            260     6 (fixed)
 18610                           ;	Chosen strategy is simple_byte
 18611  210C  0021               	movlb	1	; select bank1
 18612  210D  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18613  210E  3A00               	xorlw	0	; case 0
 18614  210F  1903               	skipnz
 18615  2110  2912               	goto	l9762
 18616  2111  2929               	goto	l800
 18617  2112                     l9762:	
 18618                           
 18619                           ; Switch size 1, requested type "space"
 18620                           ; Number of cases is 7, Range of values is 1 to 100
 18621                           ; switch strategies available:
 18622                           ; Name         Instructions Cycles
 18623                           ; simple_byte           22    12 (average)
 18624                           ; direct_byte          209     9 (fixed)
 18625                           ; jumptable            263     9 (fixed)
 18626                           ;	Chosen strategy is simple_byte
 18627  2112  0820               	movf	set_leds_bottom@x^(0+128),w
 18628  2113  3A01               	xorlw	1	; case 1
 18629  2114  1903               	skipnz
 18630  2115  28F6               	goto	l792
 18631  2116  3A03               	xorlw	3	; case 2
 18632  2117  1903               	skipnz
 18633  2118  28F9               	goto	l794
 18634  2119  3A01               	xorlw	1	; case 3
 18635  211A  1903               	skipnz
 18636  211B  28FC               	goto	l795
 18637  211C  3A07               	xorlw	7	; case 4
 18638  211D  1903               	skipnz
 18639  211E  28FF               	goto	l796
 18640  211F  3A01               	xorlw	1	; case 5
 18641  2120  1903               	skipnz
 18642  2121  2902               	goto	l797
 18643  2122  3A03               	xorlw	3	; case 6
 18644  2123  1903               	skipnz
 18645  2124  2929               	goto	l800
 18646  2125  3A62               	xorlw	98	; case 100
 18647  2126  1903               	skipnz
 18648  2127  2905               	goto	l799
 18649  2128  2929               	goto	l800
 18650  2129                     l800:	
 18651  2129  0008               	return
 18652  212A                     __end_of_set_leds_bottom:	
 18653                           
 18654                           	psect	text66
 18655  2E94                     __ptext66:	
 18656 ;; *************** function _FLASH_ReadWord *****************
 18657 ;; Defined at:
 18658 ;;		line 58 in file "memory.c"
 18659 ;; Parameters:    Size  Location     Type
 18660 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18663 ;; Return value:  Size  Location     Type
 18664 ;;                  2    0[BANK1 ] unsigned int 
 18665 ;; Registers used:
 18666 ;;		wreg, status,2, status,0
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18672 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18673 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18675 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18676 ;;Total ram usage:        3 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; Hardware stack levels required when called:    3
 18679 ;; This function calls:
 18680 ;;		Nothing
 18681 ;; This function is called by:
 18682 ;;		_ReadSavedSettings
 18683 ;;		_FLASH_WriteWord
 18684 ;; This function uses a non-reentrant model
 18685 ;;
 18686                           
 18687                           
 18688                           ;psect for function _FLASH_ReadWord
 18689  2E94                     _FLASH_ReadWord:	
 18690                           
 18691                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18692                           
 18693                           ;incstack = 0
 18694                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18695  2E94  3000               	movlw	0
 18696  2E95  1B8B               	btfsc	11,7	;volatile
 18697  2E96  3001               	movlw	1
 18698  2E97  0021               	movlb	1	; select bank1
 18699  2E98  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18700                           
 18701                           ;memory.c: 61: INTCONbits.GIE = 0;
 18702  2E99  138B               	bcf	11,7	;volatile
 18703                           
 18704                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18705  2E9A  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18706  2E9B  0023               	movlb	3	; select bank3
 18707  2E9C  0091               	movwf	17	;volatile
 18708                           
 18709                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18710  2E9D  0021               	movlb	1	; select bank1
 18711  2E9E  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18712  2E9F  0023               	movlb	3	; select bank3
 18713  2EA0  0092               	movwf	18	;volatile
 18714                           
 18715                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18716  2EA1  1315               	bcf	21,6	;volatile
 18717                           
 18718                           ;memory.c: 66: PMCON1bits.RD = 1;
 18719  2EA2  1415               	bsf	21,0	;volatile
 18720                           
 18721                           ;memory.c: 67: __nop();
 18722  2EA3  0000               	nop
 18723                           
 18724                           ;memory.c: 68: __nop();
 18725  2EA4  0000               	nop
 18726                           
 18727                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18728  2EA5  0021               	movlb	1	; select bank1
 18729  2EA6  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18730  2EA7  1C03               	skipc
 18731  2EA8  138B               	bcf	11,7	;volatile
 18732  2EA9  1803               	skipnc
 18733  2EAA  178B               	bsf	11,7	;volatile
 18734                           
 18735                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18736  2EAB  0023               	movlb	3	; select bank3
 18737  2EAC  0814               	movf	20,w	;volatile
 18738  2EAD  0021               	movlb	1	; select bank1
 18739  2EAE  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18740  2EAF  0023               	movlb	3	; select bank3
 18741  2EB0  0813               	movf	19,w	;volatile
 18742  2EB1  0021               	movlb	1	; select bank1
 18743  2EB2  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18744  2EB3  0008               	return
 18745  2EB4                     __end_of_FLASH_ReadWord:	
 18746                           
 18747                           	psect	text67
 18748  1000                     __ptext67:	
 18749 ;; *************** function _InitializeTaps *****************
 18750 ;; Defined at:
 18751 ;;		line 228 in file "user.c"
 18752 ;; Parameters:    Size  Location     Type
 18753 ;;		None
 18754 ;; Auto vars:     Size  Location     Type
 18755 ;;  itap            2    1[BANK1 ] int 
 18756 ;; Return value:  Size  Location     Type
 18757 ;;                  1    wreg      void 
 18758 ;; Registers used:
 18759 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18760 ;; Tracked objects:
 18761 ;;		On entry : 0/0
 18762 ;;		On exit  : 0/0
 18763 ;;		Unchanged: 0/0
 18764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18766 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18767 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18768 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18769 ;;Total ram usage:        3 bytes
 18770 ;; Hardware stack levels used:    1
 18771 ;; Hardware stack levels required when called:    3
 18772 ;; This function calls:
 18773 ;;		Nothing
 18774 ;; This function is called by:
 18775 ;;		_main
 18776 ;; This function uses a non-reentrant model
 18777 ;;
 18778                           
 18779                           
 18780                           ;psect for function _InitializeTaps
 18781  1000                     _InitializeTaps:	
 18782                           
 18783                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18784                           
 18785                           ;incstack = 0
 18786                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18787  1000  0021               	movlb	1	; select bank1
 18788  1001  01A1               	clrf	InitializeTaps@itap^(0+128)
 18789  1002  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18790  1003                     L24:	
 18791  1003  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18792  1004  3A80               	xorlw	128
 18793  1005  00A0               	movwf	??_InitializeTaps^(0+128)
 18794  1006  3080               	movlw	128
 18795  1007  0220               	subwf	??_InitializeTaps^(0+128),w
 18796  1008  1D03               	skipz
 18797  1009  280C               	goto	u9255
 18798  100A  300C               	movlw	12
 18799  100B  0221               	subwf	InitializeTaps@itap^(0+128),w
 18800  100C                     u9255:	
 18801  100C  1803               	btfsc	3,0
 18802  100D  0008               	return
 18803                           
 18804                           ;user.c: 230: tap[itap] = 0;
 18805  100E  0021               	movlb	1	; select bank1
 18806  100F  0821               	movf	InitializeTaps@itap^(0+128),w
 18807  1010  00A0               	movwf	??_InitializeTaps^(0+128)
 18808  1011  3001               	movlw	1
 18809  1012                     u9265:	
 18810  1012  35A0               	lslf	??_InitializeTaps^(0+128),f
 18811  1013  3EFF               	addlw	-1
 18812  1014  1D03               	skipz
 18813  1015  2812               	goto	u9265
 18814  1016  3520               	lslf	??_InitializeTaps^(0+128),w
 18815  1017  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18816  1018  0086               	movwf	6
 18817  1019  3002               	movlw	2	; select bank5/6
 18818  101A  0087               	movwf	7
 18819  101B  3000               	movlw	0
 18820  101C  3FC0               	movwi [0]fsr1
 18821  101D  3000               	movlw	0
 18822  101E  3FC1               	movwi [1]fsr1
 18823  101F  3FC2               	movwi [2]fsr1
 18824  1020  3FC3               	movwi [3]fsr1
 18825  1021  3001               	movlw	1
 18826  1022  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18827  1023  3000               	movlw	0
 18828  1024  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18829  1025  2803               	goto	L24
 18830  1026                     __end_of_InitializeTaps:	
 18831                           
 18832                           	psect	text68
 18833  2FA0                     __ptext68:	
 18834 ;; *************** function _InitApp *****************
 18835 ;; Defined at:
 18836 ;;		line 23 in file "user.c"
 18837 ;; Parameters:    Size  Location     Type
 18838 ;;		None
 18839 ;; Auto vars:     Size  Location     Type
 18840 ;;		None
 18841 ;; Return value:  Size  Location     Type
 18842 ;;                  1    wreg      void 
 18843 ;; Registers used:
 18844 ;;		wreg, status,2, status,0, pclath, cstack
 18845 ;; Tracked objects:
 18846 ;;		On entry : 0/0
 18847 ;;		On exit  : 0/0
 18848 ;;		Unchanged: 0/0
 18849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18854 ;;Total ram usage:        0 bytes
 18855 ;; Hardware stack levels used:    1
 18856 ;; Hardware stack levels required when called:    5
 18857 ;; This function calls:
 18858 ;;		_init_adc
 18859 ;;		_init_pwm
 18860 ;; This function is called by:
 18861 ;;		_main
 18862 ;; This function uses a non-reentrant model
 18863 ;;
 18864                           
 18865                           
 18866                           ;psect for function _InitApp
 18867  2FA0                     _InitApp:	
 18868                           
 18869                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18870                           
 18871                           ;incstack = 0
 18872                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18873  2FA0  0021               	movlb	1	; select bank1
 18874  2FA1  100D               	bcf	13,0	;volatile
 18875                           
 18876                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18877  2FA2  108D               	bcf	13,1	;volatile
 18878                           
 18879                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18880  2FA3  110D               	bcf	13,2	;volatile
 18881                           
 18882                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18883  2FA4  118D               	bcf	13,3	;volatile
 18884                           
 18885                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18886  2FA5  120D               	bcf	13,4	;volatile
 18887                           
 18888                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18889  2FA6  128D               	bcf	13,5	;volatile
 18890                           
 18891                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18892  2FA7  140E               	bsf	14,0	;volatile
 18893                           
 18894                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18895  2FA8  120E               	bcf	14,4	;volatile
 18896                           
 18897                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18898  2FA9  128E               	bcf	14,5	;volatile
 18899                           
 18900                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18901  2FAA  100F               	bcf	15,0	;volatile
 18902                           
 18903                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18904  2FAB  108F               	bcf	15,1	;volatile
 18905                           
 18906                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18907  2FAC  110F               	bcf	15,2	;volatile
 18908                           
 18909                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18910  2FAD  118F               	bcf	15,3	;volatile
 18911                           
 18912                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18913  2FAE  120F               	bcf	15,4	;volatile
 18914                           
 18915                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18916  2FAF  168F               	bsf	15,5	;volatile
 18917                           
 18918                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18919  2FB0  170F               	bsf	15,6	;volatile
 18920                           
 18921                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18922  2FB1  178F               	bsf	15,7	;volatile
 18923                           
 18924                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18925  2FB2  1410               	bsf	16,0	;volatile
 18926                           
 18927                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18928  2FB3  1490               	bsf	16,1	;volatile
 18929                           
 18930                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18931  2FB4  0023               	movlb	3	; select bank3
 18932  2FB5  1010               	bcf	16,0	;volatile
 18933                           
 18934                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18935  2FB6  1090               	bcf	16,1	;volatile
 18936                           
 18937                           ;user.c: 53: PORTEbits.RE0 = 0;
 18938  2FB7  0020               	movlb	0	; select bank0
 18939  2FB8  1010               	bcf	16,0	;volatile
 18940                           
 18941                           ;user.c: 54: PORTEbits.RE1 = 0;
 18942  2FB9  1090               	bcf	16,1	;volatile
 18943                           
 18944                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18945  2FBA  0026               	movlb	6	; select bank6
 18946  2FBB  100C               	bcf	12,0	;volatile
 18947                           
 18948                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18949  2FBC  108C               	bcf	12,1	;volatile
 18950                           
 18951                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18952  2FBD  110C               	bcf	12,2	;volatile
 18953                           
 18954                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18955  2FBE  118C               	bcf	12,3	;volatile
 18956                           
 18957                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18958  2FBF  120C               	bcf	12,4	;volatile
 18959                           
 18960                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18961  2FC0  128C               	bcf	12,5	;volatile
 18962                           
 18963                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18964  2FC1  170C               	bsf	12,6	;volatile
 18965                           
 18966                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18967  2FC2  0028               	movlb	8	; select bank8
 18968  2FC3  130C               	bcf	12,6	;volatile
 18969                           
 18970                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18971  2FC4  0026               	movlb	6	; select bank6
 18972  2FC5  108D               	bcf	13,1	;volatile
 18973                           
 18974                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18975  2FC6  110D               	bcf	13,2	;volatile
 18976                           
 18977                           ;user.c: 68: init_adc();
 18978  2FC7  31AD  2593  31AF   	fcall	_init_adc
 18979                           
 18980                           ;user.c: 69: init_pwm();
 18981  2FCA  31A2  22A2         	fcall	_init_pwm
 18982                           
 18983                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18984  2FCC  178B               	bsf	11,7	;volatile
 18985                           
 18986                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18987  2FCD  168B               	bsf	11,5	;volatile
 18988                           
 18989                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18990  2FCE  110B               	bcf	11,2	;volatile
 18991  2FCF  0008               	return
 18992  2FD0                     __end_of_InitApp:	
 18993                           
 18994                           	psect	text69
 18995  22A2                     __ptext69:	
 18996 ;; *************** function _init_pwm *****************
 18997 ;; Defined at:
 18998 ;;		line 129 in file "user.c"
 18999 ;; Parameters:    Size  Location     Type
 19000 ;;		None
 19001 ;; Auto vars:     Size  Location     Type
 19002 ;;		None
 19003 ;; Return value:  Size  Location     Type
 19004 ;;                  1    wreg      void 
 19005 ;; Registers used:
 19006 ;;		wreg, status,2, status,0, pclath, cstack
 19007 ;; Tracked objects:
 19008 ;;		On entry : 0/0
 19009 ;;		On exit  : 0/0
 19010 ;;		Unchanged: 0/0
 19011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19016 ;;Total ram usage:        0 bytes
 19017 ;; Hardware stack levels used:    1
 19018 ;; Hardware stack levels required when called:    4
 19019 ;; This function calls:
 19020 ;;		_init_timer0
 19021 ;;		_init_timer2
 19022 ;; This function is called by:
 19023 ;;		_InitApp
 19024 ;; This function uses a non-reentrant model
 19025 ;;
 19026                           
 19027                           
 19028                           ;psect for function _init_pwm
 19029  22A2                     _init_pwm:	
 19030                           
 19031                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19032                           
 19033                           ;incstack = 0
 19034                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19035  22A2  0022               	movlb	2	; select bank2
 19036  22A3  101D               	bcf	29,0	;volatile
 19037                           
 19038                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19039  22A4  0021               	movlb	1	; select bank1
 19040  22A5  110E               	bcf	14,2	;volatile
 19041                           
 19042                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19043  22A6  108E               	bcf	14,1	;volatile
 19044                           
 19045                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19046  22A7  0026               	movlb	6	; select bank6
 19047  22A8  100D               	bcf	13,0	;volatile
 19048                           
 19049                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19050  22A9  118D               	bcf	13,3	;volatile
 19051                           
 19052                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19053  22AA  120D               	bcf	13,4	;volatile
 19054                           
 19055                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19056  22AB  0021               	movlb	1	; select bank1
 19057  22AC  1310               	bcf	16,6	;volatile
 19058                           
 19059                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19060  22AD  1290               	bcf	16,5	;volatile
 19061                           
 19062                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19063  22AE  1210               	bcf	16,4	;volatile
 19064                           
 19065                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19066  22AF  1190               	bcf	16,3	;volatile
 19067                           
 19068                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19069  22B0  1110               	bcf	16,2	;volatile
 19070                           
 19071                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19072  22B1  300F               	movlw	15
 19073  22B2  0025               	movlb	5	; select bank5
 19074  22B3  0493               	iorwf	19,f	;volatile
 19075                           
 19076                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19077  22B4  300F               	movlw	15
 19078  22B5  049A               	iorwf	26,f	;volatile
 19079                           
 19080                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19081  22B6  300F               	movlw	15
 19082  22B7  0026               	movlb	6	; select bank6
 19083  22B8  0493               	iorwf	19,f	;volatile
 19084                           
 19085                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19086  22B9  300F               	movlw	15
 19087  22BA  049A               	iorwf	26,f	;volatile
 19088                           
 19089                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19090  22BB  300F               	movlw	15
 19091  22BC  049E               	iorwf	30,f	;volatile
 19092                           
 19093                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19094  22BD  300F               	movlw	15
 19095  22BE  002C               	movlb	12	; select bank12
 19096  22BF  0493               	iorwf	19,f	;volatile
 19097                           
 19098                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19099  22C0  300F               	movlw	15
 19100  22C1  0496               	iorwf	22,f	;volatile
 19101                           
 19102                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19103  22C2  300F               	movlw	15
 19104  22C3  0499               	iorwf	25,f	;volatile
 19105                           
 19106                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19107  22C4  300F               	movlw	15
 19108  22C5  049C               	iorwf	28,f	;volatile
 19109                           
 19110                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19111  22C6  300F               	movlw	15
 19112  22C7  049F               	iorwf	31,f	;volatile
 19113                           
 19114                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19115  22C8  0025               	movlb	5	; select bank5
 19116  22C9  019D               	clrf	29	;volatile
 19117                           
 19118                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19119  22CA  019E               	clrf	30	;volatile
 19120                           
 19121                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19122  22CB  019F               	clrf	31	;volatile
 19123                           
 19124                           ;user.c: 154: CCPR1 = 50;
 19125  22CC  3000               	movlw	0
 19126  22CD  0092               	movwf	18	;volatile
 19127  22CE  3032               	movlw	50
 19128  22CF  0091               	movwf	17	;volatile
 19129                           
 19130                           ;user.c: 155: CCPR2 = 100;
 19131  22D0  3000               	movlw	0
 19132  22D1  0099               	movwf	25	;volatile
 19133  22D2  3064               	movlw	100
 19134  22D3  0098               	movwf	24	;volatile
 19135                           
 19136                           ;user.c: 156: CCPR3 = 150;
 19137  22D4  3000               	movlw	0
 19138  22D5  0026               	movlb	6	; select bank6
 19139  22D6  0092               	movwf	18	;volatile
 19140  22D7  3096               	movlw	150
 19141  22D8  0091               	movwf	17	;volatile
 19142                           
 19143                           ;user.c: 157: CCPR4 = 200;
 19144  22D9  3000               	movlw	0
 19145  22DA  0099               	movwf	25	;volatile
 19146  22DB  30C8               	movlw	200
 19147  22DC  0098               	movwf	24	;volatile
 19148                           
 19149                           ;user.c: 158: init_timer2();
 19150  22DD  31AD  2581  31A2   	fcall	_init_timer2
 19151                           
 19152                           ;user.c: 159: init_timer0();
 19153  22E0  31AD  257A         	fcall	_init_timer0
 19154  22E2  0008               	return
 19155  22E3                     __end_of_init_pwm:	
 19156                           
 19157                           	psect	text70
 19158  2D81                     __ptext70:	
 19159 ;; *************** function _init_timer2 *****************
 19160 ;; Defined at:
 19161 ;;		line 162 in file "user.c"
 19162 ;; Parameters:    Size  Location     Type
 19163 ;;		None
 19164 ;; Auto vars:     Size  Location     Type
 19165 ;;		None
 19166 ;; Return value:  Size  Location     Type
 19167 ;;                  1    wreg      void 
 19168 ;; Registers used:
 19169 ;;		wreg, status,2, status,0
 19170 ;; Tracked objects:
 19171 ;;		On entry : 0/0
 19172 ;;		On exit  : 0/0
 19173 ;;		Unchanged: 0/0
 19174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19179 ;;Total ram usage:        0 bytes
 19180 ;; Hardware stack levels used:    1
 19181 ;; Hardware stack levels required when called:    3
 19182 ;; This function calls:
 19183 ;;		Nothing
 19184 ;; This function is called by:
 19185 ;;		_init_pwm
 19186 ;; This function uses a non-reentrant model
 19187 ;;
 19188                           
 19189                           
 19190                           ;psect for function _init_timer2
 19191  2D81                     _init_timer2:	
 19192                           
 19193                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19194                           
 19195                           ;incstack = 0
 19196                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19197  2D81  3087               	movlw	-121
 19198  2D82  0020               	movlb	0	; select bank0
 19199  2D83  059C               	andwf	28,f	;volatile
 19200                           
 19201                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19202  2D84  30FC               	movlw	-4
 19203  2D85  059C               	andwf	28,f	;volatile
 19204                           
 19205                           ;user.c: 165: PR2 = 0xFF;
 19206  2D86  30FF               	movlw	255
 19207  2D87  009B               	movwf	27	;volatile
 19208                           
 19209                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19210  2D88  151C               	bsf	28,2	;volatile
 19211  2D89  0008               	return
 19212  2D8A                     __end_of_init_timer2:	
 19213                           
 19214                           	psect	text71
 19215  2D7A                     __ptext71:	
 19216 ;; *************** function _init_timer0 *****************
 19217 ;; Defined at:
 19218 ;;		line 169 in file "user.c"
 19219 ;; Parameters:    Size  Location     Type
 19220 ;;		None
 19221 ;; Auto vars:     Size  Location     Type
 19222 ;;		None
 19223 ;; Return value:  Size  Location     Type
 19224 ;;                  1    wreg      void 
 19225 ;; Registers used:
 19226 ;;		None
 19227 ;; Tracked objects:
 19228 ;;		On entry : 0/0
 19229 ;;		On exit  : 0/0
 19230 ;;		Unchanged: 0/0
 19231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19236 ;;Total ram usage:        0 bytes
 19237 ;; Hardware stack levels used:    1
 19238 ;; Hardware stack levels required when called:    3
 19239 ;; This function calls:
 19240 ;;		Nothing
 19241 ;; This function is called by:
 19242 ;;		_init_pwm
 19243 ;; This function uses a non-reentrant model
 19244 ;;
 19245                           
 19246                           
 19247                           ;psect for function _init_timer0
 19248  2D7A                     _init_timer0:	
 19249                           
 19250                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19251                           
 19252                           ;incstack = 0
 19253                           ; Regs used in _init_timer0: []
 19254  2D7A  0021               	movlb	1	; select bank1
 19255  2D7B  1295               	bcf	21,5	;volatile
 19256                           
 19257                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19258  2D7C  1195               	bcf	21,3	;volatile
 19259                           
 19260                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19261  2D7D  1015               	bcf	21,0	;volatile
 19262                           
 19263                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19264  2D7E  1495               	bsf	21,1	;volatile
 19265                           
 19266                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19267  2D7F  1115               	bcf	21,2	;volatile
 19268  2D80  0008               	return
 19269  2D81                     __end_of_init_timer0:	
 19270                           
 19271                           	psect	text72
 19272  2D93                     __ptext72:	
 19273 ;; *************** function _init_adc *****************
 19274 ;; Defined at:
 19275 ;;		line 115 in file "user.c"
 19276 ;; Parameters:    Size  Location     Type
 19277 ;;		None
 19278 ;; Auto vars:     Size  Location     Type
 19279 ;;		None
 19280 ;; Return value:  Size  Location     Type
 19281 ;;                  1    wreg      void 
 19282 ;; Registers used:
 19283 ;;		wreg, status,2, status,0
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19293 ;;Total ram usage:        0 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; Hardware stack levels required when called:    3
 19296 ;; This function calls:
 19297 ;;		Nothing
 19298 ;; This function is called by:
 19299 ;;		_InitApp
 19300 ;; This function uses a non-reentrant model
 19301 ;;
 19302                           
 19303                           
 19304                           ;psect for function _init_adc
 19305  2D93                     _init_adc:	
 19306                           
 19307                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19308                           
 19309                           ;incstack = 0
 19310                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19311  2D93  0021               	movlb	1	; select bank1
 19312  2D94  179E               	bsf	30,7	;volatile
 19313                           
 19314                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19315  2D95  081E               	movf	30,w	;volatile
 19316  2D96  398F               	andlw	-113
 19317  2D97  3860               	iorlw	96
 19318  2D98  009E               	movwf	30	;volatile
 19319                           
 19320                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19321  2D99  30FC               	movlw	-4
 19322  2D9A  059E               	andwf	30,f	;volatile
 19323                           
 19324                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19325  2D9B  141D               	bsf	29,0	;volatile
 19326  2D9C  0008               	return
 19327  2D9D                     __end_of_init_adc:	
 19328                           
 19329                           	psect	text73
 19330  2D72                     __ptext73:	
 19331 ;; *************** function _ConfigureOscillator *****************
 19332 ;; Defined at:
 19333 ;;		line 18 in file "system.c"
 19334 ;; Parameters:    Size  Location     Type
 19335 ;;		None
 19336 ;; Auto vars:     Size  Location     Type
 19337 ;;		None
 19338 ;; Return value:  Size  Location     Type
 19339 ;;                  1    wreg      void 
 19340 ;; Registers used:
 19341 ;;		wreg, status,2, status,0
 19342 ;; Tracked objects:
 19343 ;;		On entry : 0/0
 19344 ;;		On exit  : 0/0
 19345 ;;		Unchanged: 0/0
 19346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19351 ;;Total ram usage:        0 bytes
 19352 ;; Hardware stack levels used:    1
 19353 ;; Hardware stack levels required when called:    3
 19354 ;; This function calls:
 19355 ;;		Nothing
 19356 ;; This function is called by:
 19357 ;;		_main
 19358 ;; This function uses a non-reentrant model
 19359 ;;
 19360                           
 19361                           
 19362                           ;psect for function _ConfigureOscillator
 19363  2D72                     _ConfigureOscillator:	
 19364                           
 19365                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19366                           
 19367                           ;incstack = 0
 19368                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19369  2D72  30FC               	movlw	-4
 19370  2D73  0021               	movlb	1	; select bank1
 19371  2D74  0599               	andwf	25,f	;volatile
 19372  2D75  0008               	return
 19373  2D76                     __end_of_ConfigureOscillator:	
 19374                           
 19375                           	psect	intentry
 19376  0004                     __pintentry:	
 19377 ;; *************** function _isr *****************
 19378 ;; Defined at:
 19379 ;;		line 28 in file "interrupts.c"
 19380 ;; Parameters:    Size  Location     Type
 19381 ;;		None
 19382 ;; Auto vars:     Size  Location     Type
 19383 ;;  tmpModDelay     2   36[BANK0 ] int 
 19384 ;; Return value:  Size  Location     Type
 19385 ;;                  1    wreg      void 
 19386 ;; Registers used:
 19387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19388 ;; Tracked objects:
 19389 ;;		On entry : 0/0
 19390 ;;		On exit  : 0/0
 19391 ;;		Unchanged: 0/0
 19392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19395 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19396 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19397 ;;Total ram usage:       12 bytes
 19398 ;; Hardware stack levels used:    1
 19399 ;; Hardware stack levels required when called:    2
 19400 ;; This function calls:
 19401 ;;		_modulation
 19402 ;;		i1___awdiv
 19403 ;;		i1_getModulationSubdivision
 19404 ;;		i1_set_leds_top
 19405 ;; This function is called by:
 19406 ;;		Interrupt level 1
 19407 ;; This function uses a non-reentrant model
 19408 ;;
 19409                           
 19410  0004                     _isr:	
 19411                           
 19412                           ;incstack = 0
 19413                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19414  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19415  0005  3180               	pagesel	$
 19416  0006  0020               	movlb	0	; select bank0
 19417  0007  087F               	movf	127,w
 19418  0008  00C3               	movwf	??_isr+9
 19419                           
 19420                           ;interrupts.c: 29: int tmpModDelay;
 19421                           ;interrupts.c: 32: extern volatile long timer;
 19422                           ;interrupts.c: 33: extern volatile long sub_timer;
 19423                           ;interrupts.c: 34: extern volatile long tap_timer;
 19424                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19425                           ;interrupts.c: 36: extern int mod_delay_time;
 19426                           ;interrupts.c: 38: extern volatile long baseline_mod_time;
 19427                           ;interrupts.c: 40: extern int top_push_state;
 19428                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19429                           ;interrupts.c: 42: extern volatile long mod_timer;
 19430                           ;interrupts.c: 43: extern volatile long delay_time;
 19431  0009  1D0B               	btfss	11,2	;volatile
 19432  000A  2AD9               	goto	i1l160
 19433                           
 19434                           ;interrupts.c: 47: tmpModDelay = mod_delay_time;
 19435  000B  0023               	movlb	3	; select bank3
 19436  000C  0858               	movf	(_mod_delay_time+1)^(0+384),w
 19437  000D  0020               	movlb	0	; select bank0
 19438  000E  00C5               	movwf	isr@tmpModDelay+1
 19439  000F  0023               	movlb	3	; select bank3
 19440  0010  0857               	movf	_mod_delay_time^(0+384),w
 19441  0011  0020               	movlb	0	; select bank0
 19442  0012  00C4               	movwf	isr@tmpModDelay
 19443                           
 19444                           ;interrupts.c: 48: timer = timer + 1;
 19445  0013  3001               	movlw	1
 19446  0014  00BA               	movwf	??_isr
 19447  0015  3000               	movlw	0
 19448  0016  00BB               	movwf	??_isr+1
 19449  0017  3000               	movlw	0
 19450  0018  00BC               	movwf	??_isr+2
 19451  0019  3000               	movlw	0
 19452  001A  00BD               	movwf	??_isr+3
 19453  001B  084A               	movf	_timer,w	;volatile
 19454  001C  07BA               	addwf	??_isr,f
 19455  001D  084B               	movf	_timer+1,w	;volatile
 19456  001E  3DBB               	addwfc	??_isr+1,f
 19457  001F  084C               	movf	_timer+2,w	;volatile
 19458  0020  3DBC               	addwfc	??_isr+2,f
 19459  0021  084D               	movf	_timer+3,w	;volatile
 19460  0022  3DBD               	addwfc	??_isr+3,f
 19461  0023  083D               	movf	??_isr+3,w
 19462  0024  00CD               	movwf	_timer+3	;volatile
 19463  0025  083C               	movf	??_isr+2,w
 19464  0026  00CC               	movwf	_timer+2	;volatile
 19465  0027  083B               	movf	??_isr+1,w
 19466  0028  00CB               	movwf	_timer+1	;volatile
 19467  0029  083A               	movf	??_isr,w
 19468  002A  00CA               	movwf	_timer	;volatile
 19469                           
 19470                           ;interrupts.c: 49: sub_timer = sub_timer + 1;
 19471  002B  3001               	movlw	1
 19472  002C  00BA               	movwf	??_isr
 19473  002D  3000               	movlw	0
 19474  002E  00BB               	movwf	??_isr+1
 19475  002F  3000               	movlw	0
 19476  0030  00BC               	movwf	??_isr+2
 19477  0031  3000               	movlw	0
 19478  0032  00BD               	movwf	??_isr+3
 19479  0033  0023               	movlb	3	; select bank3
 19480  0034  0828               	movf	_sub_timer^(0+384),w	;volatile
 19481  0035  0020               	movlb	0	; select bank0
 19482  0036  07BA               	addwf	??_isr,f
 19483  0037  0023               	movlb	3	; select bank3
 19484  0038  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19485  0039  0020               	movlb	0	; select bank0
 19486  003A  3DBB               	addwfc	??_isr+1,f
 19487  003B  0023               	movlb	3	; select bank3
 19488  003C  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19489  003D  0020               	movlb	0	; select bank0
 19490  003E  3DBC               	addwfc	??_isr+2,f
 19491  003F  0023               	movlb	3	; select bank3
 19492  0040  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19493  0041  0020               	movlb	0	; select bank0
 19494  0042  3DBD               	addwfc	??_isr+3,f
 19495  0043  083D               	movf	??_isr+3,w
 19496  0044  0023               	movlb	3	; select bank3
 19497  0045  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19498  0046  0020               	movlb	0	; select bank0
 19499  0047  083C               	movf	??_isr+2,w
 19500  0048  0023               	movlb	3	; select bank3
 19501  0049  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19502  004A  0020               	movlb	0	; select bank0
 19503  004B  083B               	movf	??_isr+1,w
 19504  004C  0023               	movlb	3	; select bank3
 19505  004D  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19506  004E  0020               	movlb	0	; select bank0
 19507  004F  083A               	movf	??_isr,w
 19508  0050  0023               	movlb	3	; select bank3
 19509  0051  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19510                           
 19511                           ;interrupts.c: 50: tap_timer = tap_timer + 1;
 19512  0052  3001               	movlw	1
 19513  0053  0020               	movlb	0	; select bank0
 19514  0054  00BA               	movwf	??_isr
 19515  0055  3000               	movlw	0
 19516  0056  00BB               	movwf	??_isr+1
 19517  0057  3000               	movlw	0
 19518  0058  00BC               	movwf	??_isr+2
 19519  0059  3000               	movlw	0
 19520  005A  00BD               	movwf	??_isr+3
 19521  005B  0846               	movf	_tap_timer,w	;volatile
 19522  005C  07BA               	addwf	??_isr,f
 19523  005D  0847               	movf	_tap_timer+1,w	;volatile
 19524  005E  3DBB               	addwfc	??_isr+1,f
 19525  005F  0848               	movf	_tap_timer+2,w	;volatile
 19526  0060  3DBC               	addwfc	??_isr+2,f
 19527  0061  0849               	movf	_tap_timer+3,w	;volatile
 19528  0062  3DBD               	addwfc	??_isr+3,f
 19529  0063  083D               	movf	??_isr+3,w
 19530  0064  00C9               	movwf	_tap_timer+3	;volatile
 19531  0065  083C               	movf	??_isr+2,w
 19532  0066  00C8               	movwf	_tap_timer+2	;volatile
 19533  0067  083B               	movf	??_isr+1,w
 19534  0068  00C7               	movwf	_tap_timer+1	;volatile
 19535  0069  083A               	movf	??_isr,w
 19536  006A  00C6               	movwf	_tap_timer	;volatile
 19537                           
 19538                           ;interrupts.c: 51: mod_timer = mod_timer + 1;
 19539  006B  3001               	movlw	1
 19540  006C  00BA               	movwf	??_isr
 19541  006D  3000               	movlw	0
 19542  006E  00BB               	movwf	??_isr+1
 19543  006F  3000               	movlw	0
 19544  0070  00BC               	movwf	??_isr+2
 19545  0071  3000               	movlw	0
 19546  0072  00BD               	movwf	??_isr+3
 19547  0073  0023               	movlb	3	; select bank3
 19548  0074  0824               	movf	_mod_timer^(0+384),w	;volatile
 19549  0075  0020               	movlb	0	; select bank0
 19550  0076  07BA               	addwf	??_isr,f
 19551  0077  0023               	movlb	3	; select bank3
 19552  0078  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19553  0079  0020               	movlb	0	; select bank0
 19554  007A  3DBB               	addwfc	??_isr+1,f
 19555  007B  0023               	movlb	3	; select bank3
 19556  007C  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19557  007D  0020               	movlb	0	; select bank0
 19558  007E  3DBC               	addwfc	??_isr+2,f
 19559  007F  0023               	movlb	3	; select bank3
 19560  0080  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19561  0081  0020               	movlb	0	; select bank0
 19562  0082  3DBD               	addwfc	??_isr+3,f
 19563  0083  083D               	movf	??_isr+3,w
 19564  0084  0023               	movlb	3	; select bank3
 19565  0085  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19566  0086  0020               	movlb	0	; select bank0
 19567  0087  083C               	movf	??_isr+2,w
 19568  0088  0023               	movlb	3	; select bank3
 19569  0089  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19570  008A  0020               	movlb	0	; select bank0
 19571  008B  083B               	movf	??_isr+1,w
 19572  008C  0023               	movlb	3	; select bank3
 19573  008D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19574  008E  0020               	movlb	0	; select bank0
 19575  008F  083A               	movf	??_isr,w
 19576  0090  0023               	movlb	3	; select bank3
 19577  0091  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19578                           
 19579                           ;interrupts.c: 52: double_timer++;
 19580  0092  3001               	movlw	1
 19581  0093  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19582  0094  3000               	movlw	0
 19583  0095  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19584  0096  3000               	movlw	0
 19585  0097  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19586  0098  3000               	movlw	0
 19587  0099  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19588                           
 19589                           ;interrupts.c: 57: if (longBypass_start == 1) {
 19590  009A  0020               	movlb	0	; select bank0
 19591  009B  0352               	decf	_longBypass_start,w
 19592  009C  1D03               	btfss	3,2
 19593  009D  28B5               	goto	i1l6850
 19594                           
 19595                           ;interrupts.c: 58: longBypass_timer++;
 19596  009E  3001               	movlw	1
 19597  009F  0023               	movlb	3	; select bank3
 19598  00A0  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19599  00A1  3000               	movlw	0
 19600  00A2  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19601                           
 19602                           ;interrupts.c: 59: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19603  00A3  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19604  00A4  0020               	movlb	0	; select bank0
 19605  00A5  0262               	subwf	_long_press_limit+1,w
 19606  00A6  1D03               	skipz
 19607  00A7  28AC               	goto	u673_25
 19608  00A8  0023               	movlb	3	; select bank3
 19609  00A9  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19610  00AA  0020               	movlb	0	; select bank0
 19611  00AB  0261               	subwf	_long_press_limit,w
 19612  00AC                     u673_25:	
 19613  00AC  1803               	skipnc
 19614  00AD  28B5               	goto	i1l6850
 19615  00AE  0862               	movf	_long_press_limit+1,w
 19616  00AF  0023               	movlb	3	; select bank3
 19617  00B0  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19618  00B1  0020               	movlb	0	; select bank0
 19619  00B2  0861               	movf	_long_press_limit,w
 19620  00B3  0023               	movlb	3	; select bank3
 19621  00B4  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19622  00B5                     i1l6850:	
 19623                           
 19624                           ;interrupts.c: 60: }
 19625                           ;interrupts.c: 61: if (longTap_start == 1) {
 19626  00B5  0020               	movlb	0	; select bank0
 19627  00B6  0354               	decf	_longTap_start,w
 19628  00B7  1D03               	btfss	3,2
 19629  00B8  28D0               	goto	i1l134
 19630                           
 19631                           ;interrupts.c: 62: longTap_timer++;
 19632  00B9  3001               	movlw	1
 19633  00BA  0023               	movlb	3	; select bank3
 19634  00BB  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19635  00BC  3000               	movlw	0
 19636  00BD  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19637                           
 19638                           ;interrupts.c: 63: if (longTap_timer > long_press_limit) {
 19639  00BE  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19640  00BF  0020               	movlb	0	; select bank0
 19641  00C0  0262               	subwf	_long_press_limit+1,w
 19642  00C1  1D03               	skipz
 19643  00C2  28C7               	goto	u675_25
 19644  00C3  0023               	movlb	3	; select bank3
 19645  00C4  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19646  00C5  0020               	movlb	0	; select bank0
 19647  00C6  0261               	subwf	_long_press_limit,w
 19648  00C7                     u675_25:	
 19649  00C7  1803               	skipnc
 19650  00C8  28D0               	goto	i1l134
 19651                           
 19652                           ;interrupts.c: 64: longTap_timer = long_press_limit;
 19653  00C9  0862               	movf	_long_press_limit+1,w
 19654  00CA  0023               	movlb	3	; select bank3
 19655  00CB  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19656  00CC  0020               	movlb	0	; select bank0
 19657  00CD  0861               	movf	_long_press_limit,w
 19658  00CE  0023               	movlb	3	; select bank3
 19659  00CF  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 19660  00D0                     i1l134:	
 19661                           
 19662                           ;interrupts.c: 65: }
 19663                           ;interrupts.c: 66: }
 19664                           ;interrupts.c: 70: if ((timer + mod_delay_time) > delay_time) {
 19665  00D0  0020               	movlb	0	; select bank0
 19666  00D1  084A               	movf	_timer,w	;volatile
 19667  00D2  00BA               	movwf	??_isr
 19668  00D3  084B               	movf	_timer+1,w	;volatile
 19669  00D4  00BB               	movwf	??_isr+1
 19670  00D5  084C               	movf	_timer+2,w	;volatile
 19671  00D6  00BC               	movwf	??_isr+2
 19672  00D7  084D               	movf	_timer+3,w	;volatile
 19673  00D8  00BD               	movwf	??_isr+3
 19674  00D9  0023               	movlb	3	; select bank3
 19675  00DA  0857               	movf	_mod_delay_time^(0+384),w
 19676  00DB  0020               	movlb	0	; select bank0
 19677  00DC  00BE               	movwf	??_isr+4
 19678  00DD  0023               	movlb	3	; select bank3
 19679  00DE  0858               	movf	(_mod_delay_time+1)^(0+384),w
 19680  00DF  0020               	movlb	0	; select bank0
 19681  00E0  00BF               	movwf	??_isr+5
 19682  00E1  3000               	movlw	0
 19683  00E2  1BBF               	btfsc	??_isr+5,7
 19684  00E3  30FF               	movlw	255
 19685  00E4  00C0               	movwf	??_isr+6
 19686  00E5  00C1               	movwf	??_isr+7
 19687  00E6  083E               	movf	??_isr+4,w
 19688  00E7  07BA               	addwf	??_isr,f
 19689  00E8  083F               	movf	??_isr+5,w
 19690  00E9  3DBB               	addwfc	??_isr+1,f
 19691  00EA  0840               	movf	??_isr+6,w
 19692  00EB  3DBC               	addwfc	??_isr+2,f
 19693  00EC  0841               	movf	??_isr+7,w
 19694  00ED  3DBD               	addwfc	??_isr+3,f
 19695  00EE  085E               	movf	_delay_time+3,w	;volatile
 19696  00EF  3A80               	xorlw	128
 19697  00F0  00C2               	movwf	??_isr+8
 19698  00F1  083D               	movf	??_isr+3,w
 19699  00F2  3A80               	xorlw	128
 19700  00F3  0242               	subwf	??_isr+8,w
 19701  00F4  1D03               	skipz
 19702  00F5  2900               	goto	u676_23
 19703  00F6  083C               	movf	??_isr+2,w
 19704  00F7  025D               	subwf	_delay_time+2,w	;volatile
 19705  00F8  1D03               	skipz
 19706  00F9  2900               	goto	u676_23
 19707  00FA  083B               	movf	??_isr+1,w
 19708  00FB  025C               	subwf	_delay_time+1,w	;volatile
 19709  00FC  1D03               	skipz
 19710  00FD  2900               	goto	u676_23
 19711  00FE  083A               	movf	??_isr,w
 19712  00FF  025B               	subwf	_delay_time,w	;volatile
 19713  0100                     u676_23:	
 19714  0100  1803               	skipnc
 19715  0101  290F               	goto	i1l136
 19716                           
 19717                           ;interrupts.c: 71: tmpModDelay = (delay_time - timer);
 19718  0102  094A               	comf	_timer,w	;volatile
 19719  0103  00BA               	movwf	??_isr
 19720  0104  094B               	comf	_timer+1,w	;volatile
 19721  0105  00BB               	movwf	??_isr+1
 19722  0106  0ABA               	incf	??_isr,f
 19723  0107  1903               	skipnz
 19724  0108  0ABB               	incf	??_isr+1,f
 19725  0109  085B               	movf	_delay_time,w	;volatile
 19726  010A  073A               	addwf	??_isr,w
 19727  010B  00C4               	movwf	isr@tmpModDelay
 19728  010C  085C               	movf	_delay_time+1,w	;volatile
 19729  010D  3D3B               	addwfc	??_isr+1,w
 19730  010E  00C5               	movwf	isr@tmpModDelay+1
 19731  010F                     i1l136:	
 19732                           
 19733                           ;interrupts.c: 72: }
 19734                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19735  010F  0867               	movf	_longTap_state,w	;volatile
 19736  0110  1D03               	btfss	3,2
 19737  0111  297A               	goto	i1l6882
 19738  0112  0850               	movf	_doubleTap_state,w	;volatile
 19739  0113  1D03               	btfss	3,2
 19740  0114  297A               	goto	i1l6882
 19741  0115  0856               	movf	_presetSaveMode,w
 19742  0116  1D03               	btfss	3,2
 19743  0117  297A               	goto	i1l6882
 19744                           
 19745                           ;interrupts.c: 80: if (timer >= baseline_mod_time) {
 19746  0118  084D               	movf	_timer+3,w	;volatile
 19747  0119  3A80               	xorlw	128
 19748  011A  00BA               	movwf	??_isr
 19749  011B  0023               	movlb	3	; select bank3
 19750  011C  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19751  011D  3A80               	xorlw	128
 19752  011E  0020               	movlb	0	; select bank0
 19753  011F  023A               	subwf	??_isr,w
 19754  0120  1D03               	skipz
 19755  0121  2932               	goto	u680_23
 19756  0122  0023               	movlb	3	; select bank3
 19757  0123  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19758  0124  0020               	movlb	0	; select bank0
 19759  0125  024C               	subwf	_timer+2,w	;volatile
 19760  0126  1D03               	skipz
 19761  0127  2932               	goto	u680_23
 19762  0128  0023               	movlb	3	; select bank3
 19763  0129  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19764  012A  0020               	movlb	0	; select bank0
 19765  012B  024B               	subwf	_timer+1,w	;volatile
 19766  012C  1D03               	skipz
 19767  012D  2932               	goto	u680_23
 19768  012E  0023               	movlb	3	; select bank3
 19769  012F  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
 19770  0130  0020               	movlb	0	; select bank0
 19771  0131  024A               	subwf	_timer,w	;volatile
 19772  0132                     u680_23:	
 19773  0132  1C03               	skipc
 19774  0133  2968               	goto	i1l6878
 19775                           
 19776                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 19777  0134  0022               	movlb	2	; select bank2
 19778  0135  160D               	bsf	13,4	;volatile
 19779                           
 19780                           ;interrupts.c: 85: timer = 0;
 19781  0136  3000               	movlw	0
 19782  0137  0020               	movlb	0	; select bank0
 19783  0138  00CD               	movwf	_timer+3	;volatile
 19784  0139  3000               	movlw	0
 19785  013A  00CC               	movwf	_timer+2	;volatile
 19786  013B  3000               	movlw	0
 19787  013C  00CB               	movwf	_timer+1	;volatile
 19788  013D  3000               	movlw	0
 19789  013E  00CA               	movwf	_timer	;volatile
 19790                           
 19791                           ;interrupts.c: 87: if (modulation_changed == 1 || mod_time_changed == 1) {
 19792  013F  0023               	movlb	3	; select bank3
 19793  0140  0343               	decf	_modulation_changed^(0+384),w
 19794  0141  1903               	btfsc	3,2
 19795  0142  2947               	goto	i1l6872
 19796  0143  0020               	movlb	0	; select bank0
 19797  0144  0368               	decf	_mod_time_changed,w
 19798  0145  1D03               	btfss	3,2
 19799  0146  2968               	goto	i1l6878
 19800  0147                     i1l6872:	
 19801                           
 19802                           ;interrupts.c: 90: mod_counter = 0;
 19803  0147  0024               	movlb	4	; select bank4
 19804  0148  01CF               	clrf	_mod_counter^(0+512)
 19805  0149  01D0               	clrf	(_mod_counter+1)^(0+512)
 19806                           
 19807                           ;interrupts.c: 91: modulation_changed = 0;
 19808  014A  0023               	movlb	3	; select bank3
 19809  014B  01C3               	clrf	_modulation_changed^(0+384)
 19810                           
 19811                           ;interrupts.c: 92: mod_time_changed = 0;
 19812  014C  0020               	movlb	0	; select bank0
 19813  014D  01E8               	clrf	_mod_time_changed
 19814                           
 19815                           ;interrupts.c: 93: mod_timer = 0;
 19816  014E  3000               	movlw	0
 19817  014F  0023               	movlb	3	; select bank3
 19818  0150  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19819  0151  3000               	movlw	0
 19820  0152  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19821  0153  3000               	movlw	0
 19822  0154  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19823  0155  3000               	movlw	0
 19824  0156  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19825                           
 19826                           ;interrupts.c: 95: reset_sub_delay = 0;
 19827  0157  01C5               	clrf	_reset_sub_delay^(0+384)
 19828                           
 19829                           ;interrupts.c: 96: sub_timer = delay_time;
 19830  0158  0020               	movlb	0	; select bank0
 19831  0159  085E               	movf	_delay_time+3,w	;volatile
 19832  015A  0023               	movlb	3	; select bank3
 19833  015B  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19834  015C  0020               	movlb	0	; select bank0
 19835  015D  085D               	movf	_delay_time+2,w	;volatile
 19836  015E  0023               	movlb	3	; select bank3
 19837  015F  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19838  0160  0020               	movlb	0	; select bank0
 19839  0161  085C               	movf	_delay_time+1,w	;volatile
 19840  0162  0023               	movlb	3	; select bank3
 19841  0163  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19842  0164  0020               	movlb	0	; select bank0
 19843  0165  085B               	movf	_delay_time,w	;volatile
 19844  0166  0023               	movlb	3	; select bank3
 19845  0167  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19846  0168                     i1l6878:	
 19847                           
 19848                           ;interrupts.c: 97: }
 19849                           ;interrupts.c: 98: }
 19850                           ;interrupts.c: 100: if (timer >= 30) {
 19851  0168  0020               	movlb	0	; select bank0
 19852  0169  1BCD               	btfsc	_timer+3,7	;volatile
 19853  016A  297A               	goto	i1l6882
 19854  016B  084D               	movf	_timer+3,w	;volatile
 19855  016C  1D03               	btfss	3,2
 19856  016D  2978               	goto	i1l6880
 19857  016E  084C               	movf	_timer+2,w	;volatile
 19858  016F  1D03               	btfss	3,2
 19859  0170  2978               	goto	i1l6880
 19860  0171  084B               	movf	_timer+1,w	;volatile
 19861  0172  1D03               	btfss	3,2
 19862  0173  2978               	goto	i1l6880
 19863  0174  301E               	movlw	30
 19864  0175  024A               	subwf	_timer,w	;volatile
 19865  0176  1C03               	btfss	3,0
 19866  0177  297A               	goto	i1l6882
 19867  0178                     i1l6880:	
 19868                           
 19869                           ;interrupts.c: 102: LATBbits.LATB4 = 0;
 19870  0178  0022               	movlb	2	; select bank2
 19871  0179  120D               	bcf	13,4	;volatile
 19872  017A                     i1l6882:	
 19873                           
 19874                           ;interrupts.c: 104: }
 19875                           ;interrupts.c: 105: }
 19876                           ;interrupts.c: 108: if (presetSaveMode == 1) {
 19877  017A  0020               	movlb	0	; select bank0
 19878  017B  0356               	decf	_presetSaveMode,w
 19879  017C  1D03               	btfss	3,2
 19880  017D  29AA               	goto	i1l6894
 19881                           
 19882                           ;interrupts.c: 109: if (double_timer >= 250) {
 19883  017E  0023               	movlb	3	; select bank3
 19884  017F  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19885  0180  2999               	goto	i1l6890
 19886  0181  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19887  0182  1D03               	btfss	3,2
 19888  0183  298E               	goto	i1l6886
 19889  0184  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19890  0185  1D03               	btfss	3,2
 19891  0186  298E               	goto	i1l6886
 19892  0187  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19893  0188  1D03               	btfss	3,2
 19894  0189  298E               	goto	i1l6886
 19895  018A  30FA               	movlw	250
 19896  018B  0220               	subwf	_double_timer^(0+384),w	;volatile
 19897  018C  1C03               	btfss	3,0
 19898  018D  2999               	goto	i1l6890
 19899  018E                     i1l6886:	
 19900                           
 19901                           ;interrupts.c: 110: LATBbits.LATB0 = 1;
 19902  018E  0022               	movlb	2	; select bank2
 19903  018F  140D               	bsf	13,0	;volatile
 19904                           
 19905                           ;interrupts.c: 111: double_timer = 0;
 19906  0190  3000               	movlw	0
 19907  0191  0023               	movlb	3	; select bank3
 19908  0192  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19909  0193  3000               	movlw	0
 19910  0194  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19911  0195  3000               	movlw	0
 19912  0196  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19913  0197  3000               	movlw	0
 19914  0198  00A0               	movwf	_double_timer^(0+384)	;volatile
 19915  0199                     i1l6890:	
 19916                           
 19917                           ;interrupts.c: 112: }
 19918                           ;interrupts.c: 113: if (double_timer >= 30) {
 19919  0199  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19920  019A  29AA               	goto	i1l6894
 19921  019B  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19922  019C  1D03               	btfss	3,2
 19923  019D  29A8               	goto	i1l6892
 19924  019E  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19925  019F  1D03               	btfss	3,2
 19926  01A0  29A8               	goto	i1l6892
 19927  01A1  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19928  01A2  1D03               	btfss	3,2
 19929  01A3  29A8               	goto	i1l6892
 19930  01A4  301E               	movlw	30
 19931  01A5  0220               	subwf	_double_timer^(0+384),w	;volatile
 19932  01A6  1C03               	btfss	3,0
 19933  01A7  29AA               	goto	i1l6894
 19934  01A8                     i1l6892:	
 19935                           
 19936                           ;interrupts.c: 114: LATBbits.LATB0 = 0;
 19937  01A8  0022               	movlb	2	; select bank2
 19938  01A9  100D               	bcf	13,0	;volatile
 19939  01AA                     i1l6894:	
 19940                           
 19941                           ;interrupts.c: 115: }
 19942                           ;interrupts.c: 116: }
 19943                           ;interrupts.c: 118: if (presetSaveMode < 1 && mode2_state == 0) {
 19944  01AA  0020               	movlb	0	; select bank0
 19945  01AB  0856               	movf	_presetSaveMode,w
 19946  01AC  1D03               	btfss	3,2
 19947  01AD  2A08               	goto	i1l6914
 19948  01AE  0855               	movf	_mode2_state,w
 19949  01AF  1D03               	btfss	3,2
 19950  01B0  2A08               	goto	i1l6914
 19951                           
 19952                           ;interrupts.c: 119: if (sub_timer >= delay_time ) {
 19953  01B1  0023               	movlb	3	; select bank3
 19954  01B2  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19955  01B3  3A80               	xorlw	128
 19956  01B4  0020               	movlb	0	; select bank0
 19957  01B5  00BA               	movwf	??_isr
 19958  01B6  085E               	movf	_delay_time+3,w	;volatile
 19959  01B7  3A80               	xorlw	128
 19960  01B8  023A               	subwf	??_isr,w
 19961  01B9  0023               	movlb	3	; select bank3
 19962  01BA  1D03               	skipz
 19963  01BB  29CC               	goto	u689_23
 19964  01BC  0020               	movlb	0	; select bank0
 19965  01BD  085D               	movf	_delay_time+2,w	;volatile
 19966  01BE  0023               	movlb	3	; select bank3
 19967  01BF  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 19968  01C0  1D03               	skipz
 19969  01C1  29CC               	goto	u689_23
 19970  01C2  0020               	movlb	0	; select bank0
 19971  01C3  085C               	movf	_delay_time+1,w	;volatile
 19972  01C4  0023               	movlb	3	; select bank3
 19973  01C5  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 19974  01C6  1D03               	skipz
 19975  01C7  29CC               	goto	u689_23
 19976  01C8  0020               	movlb	0	; select bank0
 19977  01C9  085B               	movf	_delay_time,w	;volatile
 19978  01CA  0023               	movlb	3	; select bank3
 19979  01CB  0228               	subwf	_sub_timer^(0+384),w	;volatile
 19980  01CC                     u689_23:	
 19981  01CC  1C03               	skipc
 19982  01CD  29EB               	goto	i1l6908
 19983                           
 19984                           ;interrupts.c: 120: if (suspend_blink == 0) {
 19985  01CE  0020               	movlb	0	; select bank0
 19986  01CF  0858               	movf	_suspend_blink,w	;volatile
 19987  01D0  1D03               	btfss	3,2
 19988  01D1  29DD               	goto	i1l6904
 19989                           
 19990                           ;interrupts.c: 121: set_leds_top(top_push_state, 1);
 19991  01D2  0864               	movf	_top_push_state+1,w
 19992  01D3  00F1               	movwf	i1set_leds_top@x+1
 19993  01D4  0863               	movf	_top_push_state,w
 19994  01D5  00F0               	movwf	i1set_leds_top@x
 19995  01D6  3001               	movlw	1
 19996  01D7  00F2               	movwf	i1set_leds_top@ledState
 19997  01D8  3000               	movlw	0
 19998  01D9  00F3               	movwf	i1set_leds_top@ledState+1
 19999  01DA  31A3  236D  3180   	fcall	i1_set_leds_top
 20000  01DD                     i1l6904:	
 20001                           
 20002                           ;interrupts.c: 122: }
 20003                           ;interrupts.c: 123: tmpModDelay = delay_time;
 20004  01DD  0020               	movlb	0	; select bank0
 20005  01DE  085C               	movf	_delay_time+1,w	;volatile
 20006  01DF  00C5               	movwf	isr@tmpModDelay+1
 20007  01E0  085B               	movf	_delay_time,w	;volatile
 20008  01E1  00C4               	movwf	isr@tmpModDelay
 20009                           
 20010                           ;interrupts.c: 124: sub_timer = 0;
 20011  01E2  3000               	movlw	0
 20012  01E3  0023               	movlb	3	; select bank3
 20013  01E4  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20014  01E5  3000               	movlw	0
 20015  01E6  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20016  01E7  3000               	movlw	0
 20017  01E8  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20018  01E9  3000               	movlw	0
 20019  01EA  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20020  01EB                     i1l6908:	
 20021                           
 20022                           ;interrupts.c: 125: }
 20023                           ;interrupts.c: 127: if (sub_timer >= 20) {
 20024  01EB  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20025  01EC  2A08               	goto	i1l6914
 20026  01ED  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20027  01EE  1D03               	btfss	3,2
 20028  01EF  29FA               	goto	i1l6910
 20029  01F0  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20030  01F1  1D03               	btfss	3,2
 20031  01F2  29FA               	goto	i1l6910
 20032  01F3  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20033  01F4  1D03               	btfss	3,2
 20034  01F5  29FA               	goto	i1l6910
 20035  01F6  3014               	movlw	20
 20036  01F7  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20037  01F8  1C03               	btfss	3,0
 20038  01F9  2A08               	goto	i1l6914
 20039  01FA                     i1l6910:	
 20040                           
 20041                           ;interrupts.c: 128: if (suspend_blink == 0) {
 20042  01FA  0020               	movlb	0	; select bank0
 20043  01FB  0858               	movf	_suspend_blink,w	;volatile
 20044  01FC  1D03               	btfss	3,2
 20045  01FD  2A08               	goto	i1l6914
 20046                           
 20047                           ;interrupts.c: 129: set_leds_top(top_push_state, 0);
 20048  01FE  0864               	movf	_top_push_state+1,w
 20049  01FF  00F1               	movwf	i1set_leds_top@x+1
 20050  0200  0863               	movf	_top_push_state,w
 20051  0201  00F0               	movwf	i1set_leds_top@x
 20052  0202  3000               	movlw	0
 20053  0203  00F2               	movwf	i1set_leds_top@ledState
 20054  0204  00F3               	movwf	i1set_leds_top@ledState+1
 20055  0205  31A3  236D  3180   	fcall	i1_set_leds_top
 20056  0208                     i1l6914:	
 20057                           
 20058                           ;interrupts.c: 130: }
 20059                           ;interrupts.c: 131: }
 20060                           ;interrupts.c: 132: }
 20061                           ;interrupts.c: 148: if (mod_timer >= tmpModDelay) {
 20062  0208  0020               	movlb	0	; select bank0
 20063  0209  0844               	movf	isr@tmpModDelay,w
 20064  020A  00BA               	movwf	??_isr
 20065  020B  0845               	movf	isr@tmpModDelay+1,w
 20066  020C  00BB               	movwf	??_isr+1
 20067  020D  3000               	movlw	0
 20068  020E  1BBB               	btfsc	??_isr+1,7
 20069  020F  30FF               	movlw	255
 20070  0210  00BC               	movwf	??_isr+2
 20071  0211  00BD               	movwf	??_isr+3
 20072  0212  0023               	movlb	3	; select bank3
 20073  0213  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20074  0214  3A80               	xorlw	128
 20075  0215  0020               	movlb	0	; select bank0
 20076  0216  00BE               	movwf	??_isr+4
 20077  0217  083D               	movf	??_isr+3,w
 20078  0218  3A80               	xorlw	128
 20079  0219  023E               	subwf	??_isr+4,w
 20080  021A  0023               	movlb	3	; select bank3
 20081  021B  1D03               	skipz
 20082  021C  2A2D               	goto	u693_23
 20083  021D  0020               	movlb	0	; select bank0
 20084  021E  083C               	movf	??_isr+2,w
 20085  021F  0023               	movlb	3	; select bank3
 20086  0220  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20087  0221  1D03               	skipz
 20088  0222  2A2D               	goto	u693_23
 20089  0223  0020               	movlb	0	; select bank0
 20090  0224  083B               	movf	??_isr+1,w
 20091  0225  0023               	movlb	3	; select bank3
 20092  0226  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20093  0227  1D03               	skipz
 20094  0228  2A2D               	goto	u693_23
 20095  0229  0020               	movlb	0	; select bank0
 20096  022A  083A               	movf	??_isr,w
 20097  022B  0023               	movlb	3	; select bank3
 20098  022C  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20099  022D                     u693_23:	
 20100  022D  1C03               	skipc
 20101  022E  2AA3               	goto	i1l6932
 20102                           
 20103                           ;interrupts.c: 149: mod_timer = 0;
 20104  022F  3000               	movlw	0
 20105  0230  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20106  0231  3000               	movlw	0
 20107  0232  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20108  0233  3000               	movlw	0
 20109  0234  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20110  0235  3000               	movlw	0
 20111  0236  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20112                           
 20113                           ;interrupts.c: 153: if (mod_counter >= getModulationSubdivision()) {
 20114  0237  31AF  2745  3180   	fcall	i1_getModulationSubdivision
 20115  023A  0024               	movlb	4	; select bank4
 20116  023B  0850               	movf	(_mod_counter+1)^(0+512),w
 20117  023C  3A80               	xorlw	128
 20118  023D  0020               	movlb	0	; select bank0
 20119  023E  00BA               	movwf	??_isr
 20120  023F  0871               	movf	?i1_getModulationSubdivision+1,w
 20121  0240  3A80               	xorlw	128
 20122  0241  023A               	subwf	??_isr,w
 20123  0242  1D03               	skipz
 20124  0243  2A47               	goto	u694_25
 20125  0244  0870               	movf	?i1_getModulationSubdivision,w
 20126  0245  0024               	movlb	4	; select bank4
 20127  0246  024F               	subwf	_mod_counter^(0+512),w
 20128  0247                     u694_25:	
 20129  0247  1C03               	skipc
 20130  0248  2A4F               	goto	i1l152
 20131                           
 20132                           ;interrupts.c: 154: mod_counter = 0;
 20133  0249  0024               	movlb	4	; select bank4
 20134  024A  01CF               	clrf	_mod_counter^(0+512)
 20135  024B  01D0               	clrf	(_mod_counter+1)^(0+512)
 20136                           
 20137                           ;interrupts.c: 155: LATBbits.LATB0 = 1;
 20138  024C  0022               	movlb	2	; select bank2
 20139  024D  140D               	bsf	13,0	;volatile
 20140                           
 20141                           ;interrupts.c: 156: } else {
 20142  024E  2A51               	goto	i1l6924
 20143  024F                     i1l152:	
 20144                           
 20145                           ;interrupts.c: 157: LATBbits.LATB0 = 0;
 20146  024F  0022               	movlb	2	; select bank2
 20147  0250  100D               	bcf	13,0	;volatile
 20148  0251                     i1l6924:	
 20149                           
 20150                           ;interrupts.c: 158: }
 20151                           ;interrupts.c: 160: mod_value = modArray[mod_counter];
 20152  0251  0024               	movlb	4	; select bank4
 20153  0252  0850               	movf	(_mod_counter+1)^(0+512),w
 20154  0253  0020               	movlb	0	; select bank0
 20155  0254  00BB               	movwf	??_isr+1
 20156  0255  0024               	movlb	4	; select bank4
 20157  0256  084F               	movf	_mod_counter^(0+512),w
 20158  0257  0020               	movlb	0	; select bank0
 20159  0258  00BA               	movwf	??_isr
 20160  0259  35BA               	lslf	??_isr,f
 20161  025A  0DBB               	rlf	??_isr+1,f
 20162  025B  308A               	movlw	138
 20163  025C  00BC               	movwf	??_isr+2
 20164  025D  3023               	movlw	35
 20165  025E  00BD               	movwf	??_isr+3
 20166  025F  083A               	movf	??_isr,w
 20167  0260  073C               	addwf	??_isr+2,w
 20168  0261  0086               	movwf	6
 20169  0262  083B               	movf	??_isr+1,w
 20170  0263  3D3D               	addwfc	??_isr+3,w
 20171  0264  0087               	movwf	7
 20172  0265  3F40               	moviw [0]fsr1
 20173  0266  0023               	movlb	3	; select bank3
 20174  0267  00BA               	movwf	_mod_value^(0+384)
 20175  0268  3F41               	moviw [1]fsr1
 20176  0269  00BB               	movwf	(_mod_value+1)^(0+384)
 20177                           
 20178                           ;interrupts.c: 167: mod_value = modulation(mod_value, adjusted_pot_value);
 20179  026A  083A               	movf	_mod_value^(0+384),w
 20180  026B  0020               	movlb	0	; select bank0
 20181  026C  00AE               	movwf	modulation@x
 20182  026D  0023               	movlb	3	; select bank3
 20183  026E  083B               	movf	(_mod_value+1)^(0+384),w
 20184  026F  0020               	movlb	0	; select bank0
 20185  0270  00AF               	movwf	modulation@x+1
 20186  0271  0D89               	rlf	9,f
 20187  0272  3B89               	subwfb	9,f
 20188  0273  0989               	comf	9,f
 20189  0274  00B0               	movwf	modulation@x+2
 20190  0275  00B1               	movwf	modulation@x+3
 20191  0276  0024               	movlb	4	; select bank4
 20192  0277  0841               	movf	_adjusted_pot_value^(0+512),w
 20193  0278  0020               	movlb	0	; select bank0
 20194  0279  00B2               	movwf	modulation@y
 20195  027A  0024               	movlb	4	; select bank4
 20196  027B  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20197  027C  0020               	movlb	0	; select bank0
 20198  027D  00B3               	movwf	modulation@y+1
 20199  027E  0D89               	rlf	9,f
 20200  027F  3B89               	subwfb	9,f
 20201  0280  0989               	comf	9,f
 20202  0281  00B4               	movwf	modulation@y+2
 20203  0282  00B5               	movwf	modulation@y+3
 20204  0283  31A2  2261  3180   	fcall	_modulation
 20205  0286  0020               	movlb	0	; select bank0
 20206  0287  082F               	movf	?_modulation+1,w
 20207  0288  0023               	movlb	3	; select bank3
 20208  0289  00BB               	movwf	(_mod_value+1)^(0+384)
 20209  028A  0020               	movlb	0	; select bank0
 20210  028B  082E               	movf	?_modulation,w
 20211  028C  0023               	movlb	3	; select bank3
 20212  028D  00BA               	movwf	_mod_value^(0+384)
 20213                           
 20214                           ;interrupts.c: 168: CCPR3 = mod_value / 2;
 20215  028E  3002               	movlw	2
 20216  028F  00F0               	movwf	i1___awdiv@divisor
 20217  0290  3000               	movlw	0
 20218  0291  00F1               	movwf	i1___awdiv@divisor+1
 20219  0292  083B               	movf	(_mod_value+1)^(0+384),w
 20220  0293  00F3               	movwf	i1___awdiv@dividend+1
 20221  0294  083A               	movf	_mod_value^(0+384),w
 20222  0295  00F2               	movwf	i1___awdiv@dividend
 20223  0296  31A4  24E2  3180   	fcall	i1___awdiv
 20224  0299  0871               	movf	?i1___awdiv+1,w
 20225  029A  0026               	movlb	6	; select bank6
 20226  029B  0092               	movwf	18	;volatile
 20227  029C  0870               	movf	?i1___awdiv,w
 20228  029D  0091               	movwf	17	;volatile
 20229                           
 20230                           ;interrupts.c: 169: mod_counter++;
 20231  029E  3001               	movlw	1
 20232  029F  0024               	movlb	4	; select bank4
 20233  02A0  07CF               	addwf	_mod_counter^(0+512),f
 20234  02A1  3000               	movlw	0
 20235  02A2  3DD0               	addwfc	(_mod_counter+1)^(0+512),f
 20236  02A3                     i1l6932:	
 20237                           
 20238                           ;interrupts.c: 171: }
 20239                           ;interrupts.c: 173: if (preset_programmning_on == 1) {
 20240  02A3  0023               	movlb	3	; select bank3
 20241  02A4  0344               	decf	_preset_programmning_on^(0+384),w
 20242  02A5  1D03               	btfss	3,2
 20243  02A6  2AD1               	goto	i1l6944
 20244                           
 20245                           ;interrupts.c: 174: preset_blink++;
 20246  02A7  3001               	movlw	1
 20247  02A8  0020               	movlb	0	; select bank0
 20248  02A9  00BA               	movwf	??_isr
 20249  02AA  083A               	movf	??_isr,w
 20250  02AB  07D7               	addwf	_preset_blink,f
 20251                           
 20252                           ;interrupts.c: 176: if (preset_blink >= blink_delay) {
 20253  02AC  0023               	movlb	3	; select bank3
 20254  02AD  084C               	movf	(_blink_delay+1)^(0+384),w
 20255  02AE  3A80               	xorlw	128
 20256  02AF  3C80               	sublw	128
 20257  02B0  1D03               	skipz
 20258  02B1  2AB5               	goto	u696_25
 20259  02B2  084B               	movf	_blink_delay^(0+384),w
 20260  02B3  0020               	movlb	0	; select bank0
 20261  02B4  0257               	subwf	_preset_blink,w
 20262  02B5                     u696_25:	
 20263  02B5  1C03               	skipc
 20264  02B6  2AD6               	goto	i1l6948
 20265                           
 20266                           ;interrupts.c: 177: LATBbits.LATB1 = 1;
 20267  02B7  0022               	movlb	2	; select bank2
 20268  02B8  148D               	bsf	13,1	;volatile
 20269                           
 20270                           ;interrupts.c: 178: if (preset_blink > blink_delay*2) {
 20271  02B9  0023               	movlb	3	; select bank3
 20272  02BA  084C               	movf	(_blink_delay+1)^(0+384),w
 20273  02BB  0020               	movlb	0	; select bank0
 20274  02BC  00BB               	movwf	??_isr+1
 20275  02BD  0023               	movlb	3	; select bank3
 20276  02BE  084B               	movf	_blink_delay^(0+384),w
 20277  02BF  0020               	movlb	0	; select bank0
 20278  02C0  00BA               	movwf	??_isr
 20279  02C1  35BA               	lslf	??_isr,f
 20280  02C2  0DBB               	rlf	??_isr+1,f
 20281  02C3  083B               	movf	??_isr+1,w
 20282  02C4  3A80               	xorlw	128
 20283  02C5  00BC               	movwf	??_isr+2
 20284  02C6  3080               	movlw	128
 20285  02C7  023C               	subwf	??_isr+2,w
 20286  02C8  1D03               	skipz
 20287  02C9  2ACC               	goto	u697_25
 20288  02CA  0857               	movf	_preset_blink,w
 20289  02CB  023A               	subwf	??_isr,w
 20290  02CC                     u697_25:	
 20291  02CC  1803               	skipnc
 20292  02CD  2AD8               	goto	i1l6950
 20293                           
 20294                           ;interrupts.c: 179: preset_blink = 0;
 20295  02CE  0020               	movlb	0	; select bank0
 20296  02CF  01D7               	clrf	_preset_blink
 20297                           
 20298                           ;interrupts.c: 180: }
 20299                           ;interrupts.c: 182: } else {
 20300  02D0  2AD8               	goto	i1l6950
 20301  02D1                     i1l6944:	
 20302                           ;interrupts.c: 184: }
 20303                           ;interrupts.c: 186: } else {
 20304                           
 20305                           ;interrupts.c: 183: LATBbits.LATB1 = 0;
 20306                           
 20307                           
 20308                           ;interrupts.c: 187: if (preset_blink > 0) {
 20309  02D1  0020               	movlb	0	; select bank0
 20310  02D2  0857               	movf	_preset_blink,w
 20311  02D3  1903               	btfsc	3,2
 20312  02D4  2AD8               	goto	i1l6950
 20313                           
 20314                           ;interrupts.c: 188: preset_blink = 0;
 20315  02D5  01D7               	clrf	_preset_blink
 20316  02D6                     i1l6948:	
 20317                           
 20318                           ;interrupts.c: 189: LATBbits.LATB1 = 0;
 20319  02D6  0022               	movlb	2	; select bank2
 20320  02D7  108D               	bcf	13,1	;volatile
 20321  02D8                     i1l6950:	
 20322                           
 20323                           ;interrupts.c: 190: }
 20324                           ;interrupts.c: 191: }
 20325                           ;interrupts.c: 195: INTCONbits.TMR0IF = 0;
 20326  02D8  110B               	bcf	11,2	;volatile
 20327  02D9                     i1l160:	
 20328  02D9  0020               	movlb	0	; select bank0
 20329  02DA  0843               	movf	??_isr+9,w
 20330  02DB  00FF               	movwf	127
 20331  02DC  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20332  02DD  0009               	retfie
 20333  02DE                     __end_of_isr:	
 20334                           
 20335                           	psect	text75
 20336  236D                     __ptext75:	
 20337 ;; *************** function i1_set_leds_top *****************
 20338 ;; Defined at:
 20339 ;;		line 16 in file "LEDs.c"
 20340 ;; Parameters:    Size  Location     Type
 20341 ;;  x               2    0[COMMON] int 
 20342 ;;  ledState        2    2[COMMON] int 
 20343 ;; Auto vars:     Size  Location     Type
 20344 ;;		None
 20345 ;; Return value:  Size  Location     Type
 20346 ;;                  1    wreg      void 
 20347 ;; Registers used:
 20348 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20349 ;; Tracked objects:
 20350 ;;		On entry : 0/0
 20351 ;;		On exit  : 0/0
 20352 ;;		Unchanged: 0/0
 20353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20358 ;;Total ram usage:        4 bytes
 20359 ;; Hardware stack levels used:    1
 20360 ;; This function calls:
 20361 ;;		Nothing
 20362 ;; This function is called by:
 20363 ;;		_isr
 20364 ;; This function uses a non-reentrant model
 20365 ;;
 20366                           
 20367                           
 20368                           ;psect for function i1_set_leds_top
 20369  236D                     i1_set_leds_top:	
 20370                           
 20371                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20372                           
 20373                           ;incstack = 0
 20374                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20375  236D  0027               	movlb	7	; select bank7
 20376  236E  100C               	bcf	12,0	;volatile
 20377                           
 20378                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20379  236F  108C               	bcf	12,1	;volatile
 20380                           
 20381                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20382  2370  110C               	bcf	12,2	;volatile
 20383                           
 20384                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20385  2371  118C               	bcf	12,3	;volatile
 20386                           
 20387                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20388  2372  120C               	bcf	12,4	;volatile
 20389                           
 20390                           ;LEDs.c: 22: switch (x) {
 20391  2373  2B98               	goto	i1l6770
 20392  2374                     i1l6758:	
 20393                           ;LEDs.c: 23: case 1:
 20394                           
 20395                           
 20396                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20397  2374  0C72               	rrf	i1set_leds_top@ledState,w
 20398  2375  1C03               	skipc
 20399  2376  100C               	bcf	12,0	;volatile
 20400  2377  1803               	skipnc
 20401  2378  140C               	bsf	12,0	;volatile
 20402                           
 20403                           ;LEDs.c: 25: break;
 20404  2379  0008               	return
 20405  237A                     i1l6760:	
 20406                           ;LEDs.c: 26: case 2:
 20407                           
 20408                           
 20409                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20410  237A  0C72               	rrf	i1set_leds_top@ledState,w
 20411  237B  1C03               	skipc
 20412  237C  108C               	bcf	12,1	;volatile
 20413  237D  1803               	skipnc
 20414  237E  148C               	bsf	12,1	;volatile
 20415                           
 20416                           ;LEDs.c: 28: break;
 20417  237F  0008               	return
 20418  2380                     i1l6762:	
 20419                           ;LEDs.c: 29: case 3:
 20420                           
 20421                           
 20422                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20423  2380  0C72               	rrf	i1set_leds_top@ledState,w
 20424  2381  1C03               	skipc
 20425  2382  110C               	bcf	12,2	;volatile
 20426  2383  1803               	skipnc
 20427  2384  150C               	bsf	12,2	;volatile
 20428                           
 20429                           ;LEDs.c: 31: break;
 20430  2385  0008               	return
 20431  2386                     i1l6764:	
 20432                           ;LEDs.c: 32: case 4:
 20433                           
 20434                           
 20435                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20436  2386  0C72               	rrf	i1set_leds_top@ledState,w
 20437  2387  1C03               	skipc
 20438  2388  118C               	bcf	12,3	;volatile
 20439  2389  1803               	skipnc
 20440  238A  158C               	bsf	12,3	;volatile
 20441                           
 20442                           ;LEDs.c: 34: break;
 20443  238B  0008               	return
 20444  238C                     i1l6766:	
 20445                           ;LEDs.c: 35: case 5:
 20446                           
 20447                           
 20448                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20449  238C  0C72               	rrf	i1set_leds_top@ledState,w
 20450  238D  1C03               	skipc
 20451  238E  120C               	bcf	12,4	;volatile
 20452  238F  1803               	skipnc
 20453  2390  160C               	bsf	12,4	;volatile
 20454                           
 20455                           ;LEDs.c: 39: break;
 20456                           
 20457                           ;LEDs.c: 38: case 6:
 20458                           
 20459                           ;LEDs.c: 37: break;
 20460  2391  0008               	return
 20461  2392                     i1l787:	
 20462                           ;LEDs.c: 40: case 100:
 20463                           
 20464                           
 20465                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20466  2392  140C               	bsf	12,0	;volatile
 20467                           
 20468                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20469  2393  148C               	bsf	12,1	;volatile
 20470                           
 20471                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20472  2394  150C               	bsf	12,2	;volatile
 20473                           
 20474                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20475  2395  158C               	bsf	12,3	;volatile
 20476                           
 20477                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20478  2396  160C               	bsf	12,4	;volatile
 20479                           
 20480                           ;LEDs.c: 47: }
 20481                           
 20482                           ;LEDs.c: 46: break;
 20483  2397  0008               	return
 20484  2398                     i1l6770:	
 20485                           
 20486                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20487                           ; Switch size 1, requested type "space"
 20488                           ; Number of cases is 1, Range of values is 0 to 0
 20489                           ; switch strategies available:
 20490                           ; Name         Instructions Cycles
 20491                           ; simple_byte            4     3 (average)
 20492                           ; direct_byte            8     6 (fixed)
 20493                           ; jumptable            260     6 (fixed)
 20494                           ;	Chosen strategy is simple_byte
 20495  2398  0871               	movf	i1set_leds_top@x+1,w
 20496  2399  3A00               	xorlw	0	; case 0
 20497  239A  1903               	skipnz
 20498  239B  2B9D               	goto	i1l9764
 20499  239C  2BB4               	goto	i1l788
 20500  239D                     i1l9764:	
 20501                           
 20502                           ; Switch size 1, requested type "space"
 20503                           ; Number of cases is 7, Range of values is 1 to 100
 20504                           ; switch strategies available:
 20505                           ; Name         Instructions Cycles
 20506                           ; simple_byte           22    12 (average)
 20507                           ; direct_byte          209     9 (fixed)
 20508                           ; jumptable            263     9 (fixed)
 20509                           ;	Chosen strategy is simple_byte
 20510  239D  0870               	movf	i1set_leds_top@x,w
 20511  239E  3A01               	xorlw	1	; case 1
 20512  239F  1903               	skipnz
 20513  23A0  2B74               	goto	i1l6758
 20514  23A1  3A03               	xorlw	3	; case 2
 20515  23A2  1903               	skipnz
 20516  23A3  2B7A               	goto	i1l6760
 20517  23A4  3A01               	xorlw	1	; case 3
 20518  23A5  1903               	skipnz
 20519  23A6  2B80               	goto	i1l6762
 20520  23A7  3A07               	xorlw	7	; case 4
 20521  23A8  1903               	skipnz
 20522  23A9  2B86               	goto	i1l6764
 20523  23AA  3A01               	xorlw	1	; case 5
 20524  23AB  1903               	skipnz
 20525  23AC  2B8C               	goto	i1l6766
 20526  23AD  3A03               	xorlw	3	; case 6
 20527  23AE  1903               	skipnz
 20528  23AF  2BB4               	goto	i1l788
 20529  23B0  3A62               	xorlw	98	; case 100
 20530  23B1  1903               	skipnz
 20531  23B2  2B92               	goto	i1l787
 20532  23B3  2BB4               	goto	i1l788
 20533  23B4                     i1l788:	
 20534  23B4  0008               	return
 20535  23B5                     __end_ofi1_set_leds_top:	
 20536                           
 20537                           	psect	text76
 20538  2F45                     __ptext76:	
 20539 ;; *************** function i1_getModulationSubdivision *****************
 20540 ;; Defined at:
 20541 ;;		line 26 in file "modulation.c"
 20542 ;; Parameters:    Size  Location     Type
 20543 ;;		None
 20544 ;; Auto vars:     Size  Location     Type
 20545 ;;		None
 20546 ;; Return value:  Size  Location     Type
 20547 ;;                  2    0[COMMON] int 
 20548 ;; Registers used:
 20549 ;;		wreg, status,2, status,0
 20550 ;; Tracked objects:
 20551 ;;		On entry : 0/0
 20552 ;;		On exit  : 0/0
 20553 ;;		Unchanged: 0/0
 20554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20555 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20559 ;;Total ram usage:        2 bytes
 20560 ;; Hardware stack levels used:    1
 20561 ;; This function calls:
 20562 ;;		Nothing
 20563 ;; This function is called by:
 20564 ;;		_isr
 20565 ;; This function uses a non-reentrant model
 20566 ;;
 20567                           
 20568                           
 20569                           ;psect for function i1_getModulationSubdivision
 20570  2F45                     i1_getModulationSubdivision:	
 20571                           
 20572                           ;modulation.c: 27: if (delay_time >= 2400) {
 20573                           
 20574                           ;incstack = 0
 20575                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20576  2F45  0020               	movlb	0	; select bank0
 20577  2F46  1BDE               	btfsc	_delay_time+3,7	;volatile
 20578  2F47  2F59               	goto	i1l6784
 20579  2F48  085E               	movf	_delay_time+3,w	;volatile
 20580  2F49  1D03               	btfss	3,2
 20581  2F4A  2F54               	goto	i1l6778
 20582  2F4B  085D               	movf	_delay_time+2,w	;volatile
 20583  2F4C  1D03               	btfss	3,2
 20584  2F4D  2F54               	goto	i1l6778
 20585  2F4E  3060               	movlw	96
 20586  2F4F  025B               	subwf	_delay_time,w	;volatile
 20587  2F50  3009               	movlw	9
 20588  2F51  3B5C               	subwfb	_delay_time+1,w	;volatile
 20589  2F52  1C03               	btfss	3,0
 20590  2F53  2F59               	goto	i1l6784
 20591  2F54                     i1l6778:	
 20592                           
 20593                           ;modulation.c: 28: return 120;
 20594  2F54  3078               	movlw	120
 20595  2F55  00F0               	movwf	?i1_getModulationSubdivision
 20596  2F56  3000               	movlw	0
 20597  2F57  00F1               	movwf	?i1_getModulationSubdivision+1
 20598                           
 20599                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20600  2F58  0008               	return
 20601  2F59                     i1l6784:	
 20602  2F59  1BDE               	btfsc	_delay_time+3,7	;volatile
 20603  2F5A  2F6C               	goto	i1l6792
 20604  2F5B  085E               	movf	_delay_time+3,w	;volatile
 20605  2F5C  1D03               	btfss	3,2
 20606  2F5D  2F67               	goto	i1l6786
 20607  2F5E  085D               	movf	_delay_time+2,w	;volatile
 20608  2F5F  1D03               	btfss	3,2
 20609  2F60  2F67               	goto	i1l6786
 20610  2F61  3058               	movlw	88
 20611  2F62  025B               	subwf	_delay_time,w	;volatile
 20612  2F63  3002               	movlw	2
 20613  2F64  3B5C               	subwfb	_delay_time+1,w	;volatile
 20614  2F65  1C03               	btfss	3,0
 20615  2F66  2F6C               	goto	i1l6792
 20616  2F67                     i1l6786:	
 20617                           
 20618                           ;modulation.c: 30: return 60;
 20619  2F67  303C               	movlw	60
 20620  2F68  00F0               	movwf	?i1_getModulationSubdivision
 20621  2F69  3000               	movlw	0
 20622  2F6A  00F1               	movwf	?i1_getModulationSubdivision+1
 20623                           
 20624                           ;modulation.c: 31: } else {
 20625  2F6B  0008               	return
 20626  2F6C                     i1l6792:	
 20627                           
 20628                           ;modulation.c: 32: return 30;
 20629  2F6C  301E               	movlw	30
 20630  2F6D  00F0               	movwf	?i1_getModulationSubdivision
 20631  2F6E  3000               	movlw	0
 20632  2F6F  00F1               	movwf	?i1_getModulationSubdivision+1
 20633  2F70  0008               	return
 20634  2F71                     __end_ofi1_getModulationSubdivision:	
 20635                           
 20636                           	psect	text77
 20637  24E2                     __ptext77:	
 20638 ;; *************** function i1___awdiv *****************
 20639 ;; Defined at:
 20640 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20641 ;; Parameters:    Size  Location     Type
 20642 ;;  divisor         2    0[COMMON] int 
 20643 ;;  dividend        2    2[COMMON] int 
 20644 ;; Auto vars:     Size  Location     Type
 20645 ;;  __awdiv         2    7[COMMON] int 
 20646 ;;  __awdiv         1    6[COMMON] unsigned char 
 20647 ;;  __awdiv         1    5[COMMON] unsigned char 
 20648 ;; Return value:  Size  Location     Type
 20649 ;;                  2    0[COMMON] int 
 20650 ;; Registers used:
 20651 ;;		wreg, status,2, status,0
 20652 ;; Tracked objects:
 20653 ;;		On entry : 0/0
 20654 ;;		On exit  : 0/0
 20655 ;;		Unchanged: 0/0
 20656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20657 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20658 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20660 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20661 ;;Total ram usage:        9 bytes
 20662 ;; Hardware stack levels used:    1
 20663 ;; This function calls:
 20664 ;;		Nothing
 20665 ;; This function is called by:
 20666 ;;		_isr
 20667 ;; This function uses a non-reentrant model
 20668 ;;
 20669                           
 20670                           
 20671                           ;psect for function i1___awdiv
 20672  24E2                     i1___awdiv:	
 20673                           
 20674                           ;incstack = 0
 20675                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20676  24E2  01F6               	clrf	i1___awdiv@sign
 20677  24E3  1FF1               	btfss	i1___awdiv@divisor+1,7
 20678  24E4  2CEC               	goto	i1l6804
 20679  24E5  09F0               	comf	i1___awdiv@divisor,f
 20680  24E6  09F1               	comf	i1___awdiv@divisor+1,f
 20681  24E7  0AF0               	incf	i1___awdiv@divisor,f
 20682  24E8  1903               	skipnz
 20683  24E9  0AF1               	incf	i1___awdiv@divisor+1,f
 20684  24EA  01F6               	clrf	i1___awdiv@sign
 20685  24EB  0AF6               	incf	i1___awdiv@sign,f
 20686  24EC                     i1l6804:	
 20687  24EC  1FF3               	btfss	i1___awdiv@dividend+1,7
 20688  24ED  2CF7               	goto	i1l6810
 20689  24EE  09F2               	comf	i1___awdiv@dividend,f
 20690  24EF  09F3               	comf	i1___awdiv@dividend+1,f
 20691  24F0  0AF2               	incf	i1___awdiv@dividend,f
 20692  24F1  1903               	skipnz
 20693  24F2  0AF3               	incf	i1___awdiv@dividend+1,f
 20694  24F3  3001               	movlw	1
 20695  24F4  00F4               	movwf	??i1___awdiv
 20696  24F5  0874               	movf	??i1___awdiv,w
 20697  24F6  06F6               	xorwf	i1___awdiv@sign,f
 20698  24F7                     i1l6810:	
 20699  24F7  01F7               	clrf	i1___awdiv@quotient
 20700  24F8  01F8               	clrf	i1___awdiv@quotient+1
 20701  24F9  0870               	movf	i1___awdiv@divisor,w
 20702  24FA  0471               	iorwf	i1___awdiv@divisor+1,w
 20703  24FB  1903               	btfsc	3,2
 20704  24FC  2D26               	goto	i1l6832
 20705  24FD  01F5               	clrf	i1___awdiv@counter
 20706  24FE  0AF5               	incf	i1___awdiv@counter,f
 20707  24FF                     i1l6820:	
 20708  24FF  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20709  2500  2D0B               	goto	i1l6822
 20710  2501  3001               	movlw	1
 20711  2502                     u664_25:	
 20712  2502  35F0               	lslf	i1___awdiv@divisor,f
 20713  2503  0DF1               	rlf	i1___awdiv@divisor+1,f
 20714  2504  0B89               	decfsz	9,f
 20715  2505  2D02               	goto	u664_25
 20716  2506  3001               	movlw	1
 20717  2507  00F4               	movwf	??i1___awdiv
 20718  2508  0874               	movf	??i1___awdiv,w
 20719  2509  07F5               	addwf	i1___awdiv@counter,f
 20720  250A  2CFF               	goto	i1l6820
 20721  250B                     i1l6822:	
 20722  250B  3001               	movlw	1
 20723  250C                     u666_25:	
 20724  250C  35F7               	lslf	i1___awdiv@quotient,f
 20725  250D  0DF8               	rlf	i1___awdiv@quotient+1,f
 20726  250E  0B89               	decfsz	9,f
 20727  250F  2D0C               	goto	u666_25
 20728  2510  0871               	movf	i1___awdiv@divisor+1,w
 20729  2511  0273               	subwf	i1___awdiv@dividend+1,w
 20730  2512  1D03               	skipz
 20731  2513  2D16               	goto	u667_25
 20732  2514  0870               	movf	i1___awdiv@divisor,w
 20733  2515  0272               	subwf	i1___awdiv@dividend,w
 20734  2516                     u667_25:	
 20735  2516  1C03               	skipc
 20736  2517  2D1D               	goto	i1l6828
 20737  2518  0870               	movf	i1___awdiv@divisor,w
 20738  2519  02F2               	subwf	i1___awdiv@dividend,f
 20739  251A  0871               	movf	i1___awdiv@divisor+1,w
 20740  251B  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20741  251C  1477               	bsf	i1___awdiv@quotient,0
 20742  251D                     i1l6828:	
 20743  251D  3001               	movlw	1
 20744  251E                     u668_25:	
 20745  251E  36F1               	lsrf	i1___awdiv@divisor+1,f
 20746  251F  0CF0               	rrf	i1___awdiv@divisor,f
 20747  2520  0B89               	decfsz	9,f
 20748  2521  2D1E               	goto	u668_25
 20749  2522  3001               	movlw	1
 20750  2523  02F5               	subwf	i1___awdiv@counter,f
 20751  2524  1D03               	btfss	3,2
 20752  2525  2D0B               	goto	i1l6822
 20753  2526                     i1l6832:	
 20754  2526  0876               	movf	i1___awdiv@sign,w
 20755  2527  1903               	btfsc	3,2
 20756  2528  2D2E               	goto	i1l6836
 20757  2529  09F7               	comf	i1___awdiv@quotient,f
 20758  252A  09F8               	comf	i1___awdiv@quotient+1,f
 20759  252B  0AF7               	incf	i1___awdiv@quotient,f
 20760  252C  1903               	skipnz
 20761  252D  0AF8               	incf	i1___awdiv@quotient+1,f
 20762  252E                     i1l6836:	
 20763  252E  0878               	movf	i1___awdiv@quotient+1,w
 20764  252F  00F1               	movwf	?i1___awdiv+1
 20765  2530  0877               	movf	i1___awdiv@quotient,w
 20766  2531  00F0               	movwf	?i1___awdiv
 20767  2532  0008               	return
 20768  2533                     __end_ofi1___awdiv:	
 20769                           
 20770                           	psect	text78
 20771  2261                     __ptext78:	
 20772 ;; *************** function _modulation *****************
 20773 ;; Defined at:
 20774 ;;		line 222 in file "user.c"
 20775 ;; Parameters:    Size  Location     Type
 20776 ;;  x               4   14[BANK0 ] long 
 20777 ;;  y               4   18[BANK0 ] long 
 20778 ;; Auto vars:     Size  Location     Type
 20779 ;;		None
 20780 ;; Return value:  Size  Location     Type
 20781 ;;                  4   14[BANK0 ] long 
 20782 ;; Registers used:
 20783 ;;		wreg, status,2, status,0, pclath, cstack
 20784 ;; Tracked objects:
 20785 ;;		On entry : 0/0
 20786 ;;		On exit  : 0/0
 20787 ;;		Unchanged: 0/0
 20788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20789 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20792 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20793 ;;Total ram usage:       12 bytes
 20794 ;; Hardware stack levels used:    1
 20795 ;; Hardware stack levels required when called:    1
 20796 ;; This function calls:
 20797 ;;		i1___aldiv
 20798 ;;		i1___lmul
 20799 ;; This function is called by:
 20800 ;;		_isr
 20801 ;; This function uses a non-reentrant model
 20802 ;;
 20803                           
 20804                           
 20805                           ;psect for function _modulation
 20806  2261                     _modulation:	
 20807                           
 20808                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20809                           
 20810                           ;incstack = 0
 20811                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20812  2261  3000               	movlw	0
 20813  2262  0020               	movlb	0	; select bank0
 20814  2263  00A3               	movwf	i1___aldiv@divisor+3
 20815  2264  3000               	movlw	0
 20816  2265  00A2               	movwf	i1___aldiv@divisor+2
 20817  2266  3003               	movlw	3
 20818  2267  00A1               	movwf	i1___aldiv@divisor+1
 20819  2268  30E8               	movlw	232
 20820  2269  00A0               	movwf	i1___aldiv@divisor
 20821  226A  300C               	movlw	12
 20822  226B  00B6               	movwf	??_modulation
 20823  226C  30F2               	movlw	242
 20824  226D  00B7               	movwf	??_modulation+1
 20825  226E  3001               	movlw	1
 20826  226F  00B8               	movwf	??_modulation+2
 20827  2270  3000               	movlw	0
 20828  2271  00B9               	movwf	??_modulation+3
 20829  2272  0835               	movf	modulation@y+3,w
 20830  2273  00F3               	movwf	i1___lmul@multiplier+3
 20831  2274  0834               	movf	modulation@y+2,w
 20832  2275  00F2               	movwf	i1___lmul@multiplier+2
 20833  2276  0833               	movf	modulation@y+1,w
 20834  2277  00F1               	movwf	i1___lmul@multiplier+1
 20835  2278  0832               	movf	modulation@y,w
 20836  2279  00F0               	movwf	i1___lmul@multiplier
 20837  227A  0831               	movf	modulation@x+3,w
 20838  227B  00F7               	movwf	i1___lmul@multiplicand+3
 20839  227C  0830               	movf	modulation@x+2,w
 20840  227D  00F6               	movwf	i1___lmul@multiplicand+2
 20841  227E  082F               	movf	modulation@x+1,w
 20842  227F  00F5               	movwf	i1___lmul@multiplicand+1
 20843  2280  082E               	movf	modulation@x,w
 20844  2281  00F4               	movwf	i1___lmul@multiplicand
 20845  2282  31AF  2771  31A2   	fcall	i1___lmul
 20846  2285  0870               	movf	?i1___lmul,w
 20847  2286  0020               	movlb	0	; select bank0
 20848  2287  07B6               	addwf	??_modulation,f
 20849  2288  0871               	movf	?i1___lmul+1,w
 20850  2289  3DB7               	addwfc	??_modulation+1,f
 20851  228A  0872               	movf	?i1___lmul+2,w
 20852  228B  3DB8               	addwfc	??_modulation+2,f
 20853  228C  0873               	movf	?i1___lmul+3,w
 20854  228D  3DB9               	addwfc	??_modulation+3,f
 20855  228E  0839               	movf	??_modulation+3,w
 20856  228F  00A7               	movwf	i1___aldiv@dividend+3
 20857  2290  0838               	movf	??_modulation+2,w
 20858  2291  00A6               	movwf	i1___aldiv@dividend+2
 20859  2292  0837               	movf	??_modulation+1,w
 20860  2293  00A5               	movwf	i1___aldiv@dividend+1
 20861  2294  0836               	movf	??_modulation,w
 20862  2295  00A4               	movwf	i1___aldiv@dividend
 20863  2296  3198  2031         	fcall	i1___aldiv
 20864  2298  0020               	movlb	0	; select bank0
 20865  2299  0823               	movf	?i1___aldiv+3,w
 20866  229A  00B1               	movwf	?_modulation+3
 20867  229B  0822               	movf	?i1___aldiv+2,w
 20868  229C  00B0               	movwf	?_modulation+2
 20869  229D  0821               	movf	?i1___aldiv+1,w
 20870  229E  00AF               	movwf	?_modulation+1
 20871  229F  0820               	movf	?i1___aldiv,w
 20872  22A0  00AE               	movwf	?_modulation
 20873  22A1  0008               	return
 20874  22A2                     __end_of_modulation:	
 20875                           
 20876                           	psect	text79
 20877  2F71                     __ptext79:	
 20878 ;; *************** function i1___lmul *****************
 20879 ;; Defined at:
 20880 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20881 ;; Parameters:    Size  Location     Type
 20882 ;;  multiplier      4    0[COMMON] unsigned long 
 20883 ;;  multiplicand    4    4[COMMON] unsigned long 
 20884 ;; Auto vars:     Size  Location     Type
 20885 ;;  __lmul          4    8[COMMON] unsigned long 
 20886 ;; Return value:  Size  Location     Type
 20887 ;;                  4    0[COMMON] unsigned long 
 20888 ;; Registers used:
 20889 ;;		wreg, status,2, status,0
 20890 ;; Tracked objects:
 20891 ;;		On entry : 0/0
 20892 ;;		On exit  : 0/0
 20893 ;;		Unchanged: 0/0
 20894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20895 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20896 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20898 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20899 ;;Total ram usage:       12 bytes
 20900 ;; Hardware stack levels used:    1
 20901 ;; This function calls:
 20902 ;;		Nothing
 20903 ;; This function is called by:
 20904 ;;		_modulation
 20905 ;; This function uses a non-reentrant model
 20906 ;;
 20907                           
 20908                           
 20909                           ;psect for function i1___lmul
 20910  2F71                     i1___lmul:	
 20911                           
 20912                           ;incstack = 0
 20913                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20914  2F71  3000               	movlw	0
 20915  2F72  00FB               	movwf	i1___lmul@product+3
 20916  2F73  3000               	movlw	0
 20917  2F74  00FA               	movwf	i1___lmul@product+2
 20918  2F75  3000               	movlw	0
 20919  2F76  00F9               	movwf	i1___lmul@product+1
 20920  2F77  3000               	movlw	0
 20921  2F78  00F8               	movwf	i1___lmul@product
 20922  2F79                     i1l6068:	
 20923  2F79  1C70               	btfss	i1___lmul@multiplier,0
 20924  2F7A  2F83               	goto	i1l6072
 20925  2F7B  0874               	movf	i1___lmul@multiplicand,w
 20926  2F7C  07F8               	addwf	i1___lmul@product,f
 20927  2F7D  0875               	movf	i1___lmul@multiplicand+1,w
 20928  2F7E  3DF9               	addwfc	i1___lmul@product+1,f
 20929  2F7F  0876               	movf	i1___lmul@multiplicand+2,w
 20930  2F80  3DFA               	addwfc	i1___lmul@product+2,f
 20931  2F81  0877               	movf	i1___lmul@multiplicand+3,w
 20932  2F82  3DFB               	addwfc	i1___lmul@product+3,f
 20933  2F83                     i1l6072:	
 20934  2F83  3001               	movlw	1
 20935  2F84                     u541_25:	
 20936  2F84  35F4               	lslf	i1___lmul@multiplicand,f
 20937  2F85  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20938  2F86  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20939  2F87  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20940  2F88  0B89               	decfsz	9,f
 20941  2F89  2F84               	goto	u541_25
 20942  2F8A  3001               	movlw	1
 20943  2F8B                     u542_25:	
 20944  2F8B  36F3               	lsrf	i1___lmul@multiplier+3,f
 20945  2F8C  0CF2               	rrf	i1___lmul@multiplier+2,f
 20946  2F8D  0CF1               	rrf	i1___lmul@multiplier+1,f
 20947  2F8E  0CF0               	rrf	i1___lmul@multiplier,f
 20948  2F8F  0B89               	decfsz	9,f
 20949  2F90  2F8B               	goto	u542_25
 20950  2F91  0873               	movf	i1___lmul@multiplier+3,w
 20951  2F92  0472               	iorwf	i1___lmul@multiplier+2,w
 20952  2F93  0471               	iorwf	i1___lmul@multiplier+1,w
 20953  2F94  0470               	iorwf	i1___lmul@multiplier,w
 20954  2F95  1D03               	skipz
 20955  2F96  2F79               	goto	i1l6068
 20956  2F97  087B               	movf	i1___lmul@product+3,w
 20957  2F98  00F3               	movwf	?i1___lmul+3
 20958  2F99  087A               	movf	i1___lmul@product+2,w
 20959  2F9A  00F2               	movwf	?i1___lmul+2
 20960  2F9B  0879               	movf	i1___lmul@product+1,w
 20961  2F9C  00F1               	movwf	?i1___lmul+1
 20962  2F9D  0878               	movf	i1___lmul@product,w
 20963  2F9E  00F0               	movwf	?i1___lmul
 20964  2F9F  0008               	return
 20965  2FA0                     __end_ofi1___lmul:	
 20966                           
 20967                           	psect	text80
 20968  1831                     __ptext80:	
 20969 ;; *************** function i1___aldiv *****************
 20970 ;; Defined at:
 20971 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20972 ;; Parameters:    Size  Location     Type
 20973 ;;  divisor         4    0[BANK0 ] long 
 20974 ;;  dividend        4    4[BANK0 ] long 
 20975 ;; Auto vars:     Size  Location     Type
 20976 ;;  __aldiv         4   10[BANK0 ] long 
 20977 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20978 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20979 ;; Return value:  Size  Location     Type
 20980 ;;                  4    0[BANK0 ] long 
 20981 ;; Registers used:
 20982 ;;		wreg, status,2, status,0
 20983 ;; Tracked objects:
 20984 ;;		On entry : 0/0
 20985 ;;		On exit  : 0/0
 20986 ;;		Unchanged: 0/0
 20987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20988 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20989 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20991 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20992 ;;Total ram usage:       15 bytes
 20993 ;; Hardware stack levels used:    1
 20994 ;; This function calls:
 20995 ;;		Nothing
 20996 ;; This function is called by:
 20997 ;;		_modulation
 20998 ;; This function uses a non-reentrant model
 20999 ;;
 21000                           
 21001                           
 21002                           ;psect for function i1___aldiv
 21003  1831                     i1___aldiv:	
 21004                           
 21005                           ;incstack = 0
 21006                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21007  1831  0020               	movlb	0	; select bank0
 21008  1832  01A9               	clrf	i1___aldiv@sign
 21009  1833  1FA3               	btfss	i1___aldiv@divisor+3,7
 21010  1834  2842               	goto	i1l1996
 21011  1835  09A0               	comf	i1___aldiv@divisor,f
 21012  1836  09A1               	comf	i1___aldiv@divisor+1,f
 21013  1837  09A2               	comf	i1___aldiv@divisor+2,f
 21014  1838  09A3               	comf	i1___aldiv@divisor+3,f
 21015  1839  0AA0               	incf	i1___aldiv@divisor,f
 21016  183A  1903               	skipnz
 21017  183B  0AA1               	incf	i1___aldiv@divisor+1,f
 21018  183C  1903               	skipnz
 21019  183D  0AA2               	incf	i1___aldiv@divisor+2,f
 21020  183E  1903               	skipnz
 21021  183F  0AA3               	incf	i1___aldiv@divisor+3,f
 21022  1840  01A9               	clrf	i1___aldiv@sign
 21023  1841  0AA9               	incf	i1___aldiv@sign,f
 21024  1842                     i1l1996:	
 21025  1842  1FA7               	btfss	i1___aldiv@dividend+3,7
 21026  1843  2853               	goto	i1l6090
 21027  1844  09A4               	comf	i1___aldiv@dividend,f
 21028  1845  09A5               	comf	i1___aldiv@dividend+1,f
 21029  1846  09A6               	comf	i1___aldiv@dividend+2,f
 21030  1847  09A7               	comf	i1___aldiv@dividend+3,f
 21031  1848  0AA4               	incf	i1___aldiv@dividend,f
 21032  1849  1903               	skipnz
 21033  184A  0AA5               	incf	i1___aldiv@dividend+1,f
 21034  184B  1903               	skipnz
 21035  184C  0AA6               	incf	i1___aldiv@dividend+2,f
 21036  184D  1903               	skipnz
 21037  184E  0AA7               	incf	i1___aldiv@dividend+3,f
 21038  184F  3001               	movlw	1
 21039  1850  00FC               	movwf	??i1___aldiv
 21040  1851  087C               	movf	??i1___aldiv,w
 21041  1852  06A9               	xorwf	i1___aldiv@sign,f
 21042  1853                     i1l6090:	
 21043  1853  3000               	movlw	0
 21044  1854  00AD               	movwf	i1___aldiv@quotient+3
 21045  1855  3000               	movlw	0
 21046  1856  00AC               	movwf	i1___aldiv@quotient+2
 21047  1857  3000               	movlw	0
 21048  1858  00AB               	movwf	i1___aldiv@quotient+1
 21049  1859  3000               	movlw	0
 21050  185A  00AA               	movwf	i1___aldiv@quotient
 21051  185B  0823               	movf	i1___aldiv@divisor+3,w
 21052  185C  0422               	iorwf	i1___aldiv@divisor+2,w
 21053  185D  0421               	iorwf	i1___aldiv@divisor+1,w
 21054  185E  0420               	iorwf	i1___aldiv@divisor,w
 21055  185F  1903               	skipnz
 21056  1860  289C               	goto	i1l6112
 21057  1861  01A8               	clrf	i1___aldiv@counter
 21058  1862  0AA8               	incf	i1___aldiv@counter,f
 21059  1863                     i1l6098:	
 21060  1863  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21061  1864  2871               	goto	i1l6100
 21062  1865  3001               	movlw	1
 21063  1866                     u547_25:	
 21064  1866  35A0               	lslf	i1___aldiv@divisor,f
 21065  1867  0DA1               	rlf	i1___aldiv@divisor+1,f
 21066  1868  0DA2               	rlf	i1___aldiv@divisor+2,f
 21067  1869  0DA3               	rlf	i1___aldiv@divisor+3,f
 21068  186A  0B89               	decfsz	9,f
 21069  186B  2866               	goto	u547_25
 21070  186C  3001               	movlw	1
 21071  186D  00FC               	movwf	??i1___aldiv
 21072  186E  087C               	movf	??i1___aldiv,w
 21073  186F  07A8               	addwf	i1___aldiv@counter,f
 21074  1870  2863               	goto	i1l6098
 21075  1871                     i1l6100:	
 21076  1871  3001               	movlw	1
 21077  1872                     u549_25:	
 21078  1872  35AA               	lslf	i1___aldiv@quotient,f
 21079  1873  0DAB               	rlf	i1___aldiv@quotient+1,f
 21080  1874  0DAC               	rlf	i1___aldiv@quotient+2,f
 21081  1875  0DAD               	rlf	i1___aldiv@quotient+3,f
 21082  1876  0B89               	decfsz	9,f
 21083  1877  2872               	goto	u549_25
 21084  1878  0823               	movf	i1___aldiv@divisor+3,w
 21085  1879  0227               	subwf	i1___aldiv@dividend+3,w
 21086  187A  1D03               	skipz
 21087  187B  2886               	goto	u550_25
 21088  187C  0822               	movf	i1___aldiv@divisor+2,w
 21089  187D  0226               	subwf	i1___aldiv@dividend+2,w
 21090  187E  1D03               	skipz
 21091  187F  2886               	goto	u550_25
 21092  1880  0821               	movf	i1___aldiv@divisor+1,w
 21093  1881  0225               	subwf	i1___aldiv@dividend+1,w
 21094  1882  1D03               	skipz
 21095  1883  2886               	goto	u550_25
 21096  1884  0820               	movf	i1___aldiv@divisor,w
 21097  1885  0224               	subwf	i1___aldiv@dividend,w
 21098  1886                     u550_25:	
 21099  1886  1C03               	skipc
 21100  1887  2891               	goto	i1l6108
 21101  1888  0820               	movf	i1___aldiv@divisor,w
 21102  1889  02A4               	subwf	i1___aldiv@dividend,f
 21103  188A  0821               	movf	i1___aldiv@divisor+1,w
 21104  188B  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21105  188C  0822               	movf	i1___aldiv@divisor+2,w
 21106  188D  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21107  188E  0823               	movf	i1___aldiv@divisor+3,w
 21108  188F  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21109  1890  142A               	bsf	i1___aldiv@quotient,0
 21110  1891                     i1l6108:	
 21111  1891  3001               	movlw	1
 21112  1892                     u551_25:	
 21113  1892  36A3               	lsrf	i1___aldiv@divisor+3,f
 21114  1893  0CA2               	rrf	i1___aldiv@divisor+2,f
 21115  1894  0CA1               	rrf	i1___aldiv@divisor+1,f
 21116  1895  0CA0               	rrf	i1___aldiv@divisor,f
 21117  1896  0B89               	decfsz	9,f
 21118  1897  2892               	goto	u551_25
 21119  1898  3001               	movlw	1
 21120  1899  02A8               	subwf	i1___aldiv@counter,f
 21121  189A  1D03               	btfss	3,2
 21122  189B  2871               	goto	i1l6100
 21123  189C                     i1l6112:	
 21124  189C  0829               	movf	i1___aldiv@sign,w
 21125  189D  1903               	btfsc	3,2
 21126  189E  28AA               	goto	i1l6116
 21127  189F  09AA               	comf	i1___aldiv@quotient,f
 21128  18A0  09AB               	comf	i1___aldiv@quotient+1,f
 21129  18A1  09AC               	comf	i1___aldiv@quotient+2,f
 21130  18A2  09AD               	comf	i1___aldiv@quotient+3,f
 21131  18A3  0AAA               	incf	i1___aldiv@quotient,f
 21132  18A4  1903               	skipnz
 21133  18A5  0AAB               	incf	i1___aldiv@quotient+1,f
 21134  18A6  1903               	skipnz
 21135  18A7  0AAC               	incf	i1___aldiv@quotient+2,f
 21136  18A8  1903               	skipnz
 21137  18A9  0AAD               	incf	i1___aldiv@quotient+3,f
 21138  18AA                     i1l6116:	
 21139  18AA  082D               	movf	i1___aldiv@quotient+3,w
 21140  18AB  00A3               	movwf	?i1___aldiv+3
 21141  18AC  082C               	movf	i1___aldiv@quotient+2,w
 21142  18AD  00A2               	movwf	?i1___aldiv+2
 21143  18AE  082B               	movf	i1___aldiv@quotient+1,w
 21144  18AF  00A1               	movwf	?i1___aldiv+1
 21145  18B0  082A               	movf	i1___aldiv@quotient,w
 21146  18B1  00A0               	movwf	?i1___aldiv
 21147  18B2  0008               	return
 21148  18B3                     __end_ofi1___aldiv:	
 21149  007E                     btemp	set	126	;btemp
 21150  007E                     int$flags	set	126
 21151  007E                     wtemp	set	126
 21152  007E                     wtemp0	set	126
 21153  0080                     wtemp1	set	128
 21154  0082                     wtemp2	set	130
 21155  0084                     wtemp3	set	132
 21156  0086                     wtemp4	set	134
 21157  0088                     wtemp5	set	136
 21158  007F                     wtemp6	set	127
 21159  007E                     ttemp	set	126
 21160  007E                     ttemp0	set	126
 21161  0081                     ttemp1	set	129
 21162  0084                     ttemp2	set	132
 21163  0087                     ttemp3	set	135
 21164  007F                     ttemp4	set	127
 21165  007E                     ltemp	set	126
 21166  007E                     ltemp0	set	126
 21167  0082                     ltemp1	set	130
 21168  0086                     ltemp2	set	134
 21169  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        47
    BSS         286
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     38      76
    BANK1            80     80      80
    BANK2            80     79      80
    BANK3            80      9      75
    BANK4            80      9      64
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___altoft
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  882631
                                             74 BANK2      5     5      0
                                              0 BANK4      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               11    11      0  161828
                                             48 BANK2     11    11      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29716
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34205
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30954
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29990
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29774
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   20096
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5804
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163221
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  152879
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  152928
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  136883
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42641
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75823
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25792
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               6     6      0   16935
                                             22 BANK2      6     6      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         8     8      0   92084
                                             51 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   72063
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1680
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    3019
                                             14 BANK2      8     4      4
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18165
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1214
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4565
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 12    12      0    1281
                                             26 BANK0     12    12      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _getModulationDelayTime
     ___altoft
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     26      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4F      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     231      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     231      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 13 20:41:28 2017

                        _update_mode 207D                         ___altoft@exp 0134  
                        __CFG_CP$OFF 0000                        ___altoft@sign 0135  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E2  
                       ___awdiv@sign 00A6                   _topTactile_pressed 005A  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 09FD  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l381 2038  
                                l630 273B                                  l359 05D7  
                                l800 2129                 __size_of_adc_convert 0013  
                                l583 2DD2                                  l792 20F6  
                                l794 20F9                                  l795 20FC  
                                l787 25B4                                  l955 2339  
                                l971 243D                                  l796 20FF  
                                l788 25D8                                  l797 2102  
                                l990 2EF8                                  l982 20AD  
                                l799 2105                                  l959 2362  
                                l967 2410                                  l992 2EFE  
                                l993 2F06                                  l994 2F1A  
                                _GIE 005F                                  l997 25E0  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _map 1A41  
                                _exp 1351                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 082E                                  _pow 111C  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0149              __end_of_set_leds_bottom 212A  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1008 262A                                 l2110 2680  
                               l2102 2665                                 l2109 2678  
                               l2133 10C5                                 l1405 0A12  
                               l2305 1140                                 l2323 0943  
                               l1419 0ACB                                 l2193 1A27  
                               l1920 0D9D                                 l1941 2E49  
                               l1695 2318                                 ?_map 00DE  
                               l8004 1D54                                 l1996 18C4  
                               l8120 1C68                                 l8026 1DAE  
                               l8018 1D95                                 l8052 1CB6  
                               l8204 2F20                                 l8116 1C60  
                               l9012 0B1A                                 l9004 0B0E  
                               ?_exp 0148                                 ?_log 013E  
                               l8038 0808                                 l8302 2FFA  
                               l8206 2F30                                 l8222 1F66  
                               l9102 1B70                                 l9014 0B64  
                               l8056 1CBE                                 l8216 1F53  
                               l8066 1D1F                                 l7610 180A  
                               l9018 0B8A                                 l9026 0BC7  
                               l8076 2702                                 l8164 205E  
                               l9044 232F                                 l8260 13E2  
                               l9124 1DE8                                 l8180 1689  
                               l8156 2F0E                                 ?_isr 0070  
                               l7630 2642                                 l7614 1814  
                               l9054 2354                                 l8086 1BF6  
                               l8254 13A7                                 l8238 135E  
                               l9118 1DD9                                 l8342 23D4  
                               l9310 06F5                                 l9302 066B  
                               l9222 037F                                 l7640 266A  
                               l7632 264C                                 l8096 1C18  
                               l8248 1383                                 l9160 0749  
                               l9232 038F                                 l7642 2672  
                               l7634 2651                                 l7626 263B  
                               l7730 1055                                 l7714 245C  
                               l9066 2406                                 l8282 148A  
                               l8362 1148                                 l9138 1941  
                               l9162 074D                                 l9170 075E  
                               l8610 256F                                 l8602 2551  
                               l8194 14DF                                 l8530 219D  
                               l8514 0C17                                 l9306 06AB  
                               l7660 259C                                 l7716 246C  
                               l7900 1A1E                                 l9076 242B  
                               l8380 11CE                                 l9164 0753  
                               l9172 0777                                 l8604 255D  
                               l9252 0419                                 l7662 25A4  
                               l7726 104E                                 l7822 1EA8  
                               l7902 1A2A                                 l8294 2FE5  
                               l9166 0757                                 l9158 0743  
                               l8614 2578                                 l8518 0D59  
                               l9318 072C                                 l9262 0477  
                               l9238 039E                                 l7664 25AC  
                               l7656 258C                                 l8704 274E  
                               l8640 22EB                                 l7760 10A4  
                               l7736 1064                                 l7816 1E92  
                               l8296 2FF4                                 l8288 2FDF  
                               l8376 11AE                                 l8368 1154  
                               l9096 1B63                                 l8456 21CE  
                               l8464 21D9                                 l8448 21BD  
                               l8800 2603                                 l9280 056D  
                               l7658 2594                                 l8706 2757  
                               l8642 22ED                                 l8650 22F5  
                               l7754 1091                                 l7850 1F07  
                               l7834 1EE3                                 l7906 1A38  
                               l8482 0863                                 l9178 07EA  
                               l8618 2580                                 l8570 191E  
                               l9266 04B7                                 l7684 210C  
                               l7668 25BB                                 l8644 22EF  
                               l7772 10D7                                 l7756 109B  
                               l7748 107E                                 l7692 2E43  
                               l8740 0E55                                 l8556 18E5  
                               l8548 18D5                                 l9292 05D9  
                               l9276 052D                                 ?_sin 0145  
                               l8646 22F1                                 l7766 10B7  
                               l7758 10A0                                 l7846 1EFF  
                               l7838 1EEB                                 l7918 21F5  
                               l8494 08FF                                 l8750 0FB3  
                               l8742 0E9B                                 l8734 0E20  
                               l8830 125B                                 l8574 192C  
                               l8566 1913                                 l8558 18F3  
                               l8806 260F                                 l7776 10E9  
                               l7768 10C1                                 l8592 2549  
                               l8760 0FE4                                 l8744 0EE1  
                               l8816 2626                                 l8808 2614  
                               l9296 0619                                 l7786 1104  
                               l7794 2141                                 l7874 19D3  
                               l8586 253E                                 l8746 0F27  
                               l8754 0FC7                                 l8922 133A  
                               l8906 1316                                 l8826 1248  
                               l8818 262E                                 l7892 1A03  
                               l8748 0F6D                                 l8756 0FDE  
                               l7956 24C6                                 l7948 24A2  
                               l8908 131C                                 l8916 132F  
                               ?_pow 0155                                 l7798 2157  
                               l7894 1A11                                 l9750 0763  
                               l8758 0E37                                 l8862 12A7  
                               l8838 1269                                 l8942 0A08  
                               l9760 25C1                                 l9752 2304  
                               l7976 20D1                                 l8864 12AF  
                               l8784 20AA                                 l9762 2112  
                               l9754 2309                                 l8890 12DD  
                               l8858 1295                                 l8970 0A6C  
                               l8962 0A45                                 l8778 20A0  
                               l8786 20B1                                 l9756 230E  
                               l7988 2EE0                                 l9748 0FCD  
                               l8892 12E1                                 l8964 0A62  
                               l8948 0A23                                 l9758 2313  
                               l7998 1D3E                                 l8878 12C9  
                               l8984 0A94                                 l8898 12FC  
                               l8986 0A9C                                 l8996 0AC3  
                               l8988 0AAB                                 _PEIE 005E  
                               _RCIE 048D                                 u8015 10A5  
                               u8045 10B8                                 u8215 1F08  
                               u8225 1F0E                                 u8145 1EB4  
                               u9105 1914                                 u8155 1EC4  
                               u9300 2755                                 u8325 1A1F  
                               u9205 2570                                 u8175 1EEC  
                               u8600 205C                                 u7705 2660  
                               u8185 1EF2                                 u8265 19DA  
                               u9065 18E8                                 u7635 1815  
                               u7725 266D                                 u8445 1D66  
                               u7805 2E4A                                 u7645 181C  
                               u9165 2554                                 u9325 0DFA  
                               u8365 24A0                                 u9085 18F4  
                               u8710 13C0                                 u9255 100C  
                               u8455 1D76                                 u7815 2E4F  
                               u8295 1A04                                 u9335 0E0E  
                               u8375 24C4                                 u9095 1908  
                               u8720 13C1                                 u9265 1012  
                               u8465 1D96                                 u9185 255E  
                               u9345 0E1E                                 u8475 1DA5  
                               u9195 2568                                 u9355 0E3E  
                               u9285 2734                                 u7765 2687  
                               u7685 2647                                 u8485 1DAF  
                               u7845 2461                                 u8645 2F25  
                               u9525 1241                                 u9445 25F2  
                               u9295 2747                                 u9535 1254  
                               u9375 2090                                 u8585 1C21  
                               u7955 107F                                 u8755 1481  
                               u8845 119F                                 u9565 1273  
                               u8925 2E16                                 u8950 08FB  
                               u9815 0A4E                                 u8960 08FC  
                               u7985 1092                                 u8865 2E67  
                               u8875 2EBF                                 u9675 12ED  
                               u8885 21AE                                 u9925 0ADC  
                               u9845 0A76                                 u9935 0AF3  
                               u9945 0B23                                 u9955 0B38  
                               u9965 0B4C                                 u9985 0B69  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                  _scaleA10kPot$2840 01E5                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2841 01E8                                 _iCnt 01C0  
                               _main 035B                         ___ftpack@arg 00A0  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 0145                                 sin@y 0149  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02DE  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2D7A                      _expressModeCnst 01E0  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2E78  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2FD0                         ___fttol@exp1 012D  
                              ??_map 00ED                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0148  
                              ??_pow 015B                      _switchBypass_up 025E  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 1935  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 013A                      __end_of___awdiv 2585  
                    __end_of___ftadd 111C                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1DD0  
                    __end_of___ftneg 2D93                                u10105 2424  
                              u10045 234D                                u10305 05D2  
                              u10315 05F7                                u10235 03F7  
                    __end_of___ftmul 1F2F                                u10325 0617  
                              u10245 0417                                u10335 0689  
                              u10255 0495                                u10185 07E5  
                              u10345 06A9                                u10265 04B5  
                              u10195 1B52                                u10275 054B  
                    ___awdiv@divisor 00A0                                u10285 056B  
                              u10295 05C4                      __end_of___ftsub 082E  
                    __end_of___fttol 1A41                                i1l134 00D0  
                              i1l152 024F                                i1l136 010F  
                              i1l160 02D9                                i1l787 2392  
                              i1l788 23B4                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 004E  
                _ConfigureOscillator 2D72          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 20B5                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                __size_of_calcSinArray 0081  
                    _switchTap_state 016F                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 1C80  
                              _ldexp 1BE9                                _frexp 21E1  
                              _myBuf 03A0                                _errno 024D  
           _getModulationSubdivision 2FD0                        ___ftpack@sign 00A4  
                              _timer 004A                                _trunc 23B5  
                   __end_ofi1___lmul 2FA0                                sin@x2 014F  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 2047                                pow@yi 0163  
                    scaleA10kPot@pwm 01E2                   __size_of_USARTInit 0043  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 236D                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0146       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 207D                          exp@exponent 0152  
               ?_ConfigureOscillator 0070                   _updateSwitchBypass 1232  
                        ldexp@newexp 0141              __end_of_updateSwitchTap 0BE2  
                    __initialization 02E0                          log@exponent 0142  
        updateModulationArray@iAngle 015A              _updateSwitchBypassState 1800  
                       __end_of_main 0735              __size_of_InitializeTaps 0026  
                i1___lmul@multiplier 0070               __size_of_scaleA100kPot 0085  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1532 00B5                      _set_subdivision 0735  
                       _calcSinArray 277F          updateModulationArray@subDiv 0156  
                             ??_main 016A                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2F71           i1_getModulationSubdivision 2F45  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 2261  
                   ?_set_leds_bottom 00A0                               ?_floor 0136  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 2492                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2EF7                     __end_of___ftpack 2697  
               ??_updateSwitchBypass 00BC                               ?_trunc 0136  
                   __end_of___lltoft 2F45                               i1l6100 1871  
                             i1l6112 189C                               i1l6116 18AA  
                             i1l6108 1891                               i1l6072 2F83  
                             i1l6090 1853                               i1l1996 1842  
                             i1l6068 2F79                               i1l6098 1863  
                             i1l6810 24F7                               i1l6820 24FF  
                             i1l6804 24EC                               i1l6822 250B  
                             i1l6910 01FA                               i1l6832 2526  
                             i1l6760 237A                               i1l6904 01DD  
                             i1l6762 2380                               i1l6770 2398  
                             i1l6914 0208                               i1l6850 00B5  
                             i1l6836 252E                               i1l6828 251D  
                             i1l6764 2386                               i1l6924 0251  
                             i1l6932 02A3                               i1l6908 01EB  
                             i1l6766 238C                               i1l6758 2374  
                             i1l6950 02D8                               i1l6792 2F6C  
                             i1l6784 2F59                               i1l6944 02D1  
                             i1l6880 0178                               i1l6872 0147  
                             i1l6786 2F67                               i1l6778 2F54  
                             i1l6890 0199                               i1l6882 017A  
                             i1l6948 02D6                               i1l6892 01A8  
                             i1l6886 018E                               i1l6894 01AA  
                             i1l6878 0168                               i1l9764 239D  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196                               u541_25 2F84  
                             u550_25 1886                               u542_25 2F8B  
                             u551_25 1892                               u547_25 1866  
                             u549_25 1872                               u680_23 0132  
                             u664_25 2502                               u673_25 00AC  
                             u666_25 250C                               u667_25 2516  
                             u675_25 00C7                               u676_23 0100  
                             u668_25 251E                               u693_23 022D  
                             u694_25 0247                               u696_25 02B5  
                             u689_23 01CC                               u697_25 02CC  
                     _debounce_count 0245                          modSaw@angle 012E  
                     _debounce_mode1 0247                       _debounce_mode2 0249  
                        modSaw@shift 013F                               _URBuff 0320  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
           __end_of_read_top_tactile 2447                          modSin@angle 0134  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                        modSin@shift 013F                               ___ftge 212A  
                             ___lmul 1801                            ??___aldiv 00A8  
                             ___wmul 2E40                    _update_selectMode 25D9  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                     __end_of_init_adc 2D9D  
                             _modSaw 14AA                               _modSin 1654  
                             _modTri 0BE2                     __end_of_init_pwm 22E3  
                 ?_update_selectMode 0070                          modTri@shift 0137  
                   ___awdiv@quotient 00A7                __end_of_resetRingLEDs 2E0B  
                             _tmpVal 0253                    __end_of_USARTInit 2326  
                     ??_scaleA10kPot 00F0                    __end_ofi1___aldiv 18B3  
                             floor@i 013A                               floor@x 0136  
              ___ftmul@f3_as_product 00B9                    __end_ofi1___awdiv 2533  
            FLASH_ReadWord@flashAddr 00A0                               sin@sgn 0152  
                   __end_of_showSave 2015                  ??_update_selectMode 00A7  
               _getSwitchBypassState 2D76                            ??_wait_ms 00AE  
               _setSwitchBypassState 2E5C                               trunc@i 013A  
                             trunc@x 0136                        _scaleA100kPot 1935  
       __end_of_setExpressionDisplay 2DF1               __size_of_scaleiA10kPot 00AB  
             setLongTapState@f_state 00A0                     modSin@inflection 0137  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 0357                           ___altoft@c 012E  
     __end_of_getModulationDelayTime 1B58                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01BF  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 0063            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0251  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 24E2  
          __end_of_update_selectMode 2632              __end_of_set_subdivision 07F0  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 0142                           ___ftsub@f2 013F  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2DB5                         __pidataBANK2 07FF  
                       __pidataBANK3 2E25                         __pidataBANK4 0002  
                         ___lltoft@c 00A8                        __end_of_floor 1D27  
                      __end_of_ldexp 1C80                        __end_of_frexp 2221  
                      __end_of_trunc 23FD                     _initSwitchBypass 07F0  
                          ?i1___lmul 0070                _updateModulationArray 0DDD  
                    _doubleTap_state 0050                       _OPTION_REGbits 0095  
              ?_getSwitchBypassState 00A0                ?_setSwitchBypassState 00B6  
                     ?_scaleA100kPot 0167                              ??_floor 0139  
                            ??_ldexp 0143                              ??_frexp 00A4  
               __size_of_init_timer0 0007                 __size_of_init_timer2 0009  
                  i1___aldiv@divisor 0020                    i1___aldiv@counter 0028  
                            ??_trunc 0139                        ?_setPedalMode 0070  
                         __pbssBANK0 0046                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                           __pbssBANK7 03A0  
                 __size_of_eval_poly 0072                     ??i1_set_leds_top 0074  
                    __CFG_VCAPEN$OFF 0000                   __size_of_modSawRev 001C  
                 __size_of_modSquare 003D             __end_of_setPresetDisplay 20EF  
                         _delay_time 005B                     _long_press_limit 0061  
       __size_of_setDoublePressState 003E                           _delayfound 024B  
                         __pmaintext 035B                       _InitializeTaps 1000  
                            ?___ftge 00A0                              ?___lmul 00A0  
                            ?___wmul 012E       updateModulationArray@thisAngle 0158  
                         __pintentry 0004                        _scaleiA10kPot 1DD0  
                         _blink_rate 0065                        ??_adc_convert 00A2  
                          ?___altoft 012E                              ?_modSaw 012E  
                            ?_modSin 0134                              ?_modTri 012E  
                     ___lmul@product 00A8                      _setLongTapState 2E0B  
                          ?___awtoft 00A8                            ?___ftpack 00A0  
                modSquare@inflection 014B                            ?___lltoft 00A8  
                         ??i1___lmul 0078           ??_getModulationSubdivision 00A2  
                     _FLASH_ReadWord 2E94                   i1___awdiv@dividend 0072  
    __end_of_updateSwitchBypassState 1801                          modulation@x 002E  
                        modulation@y 0032                           _ldexp$2640 0145  
                    _debounce_bypass 0243                       ??_setPedalMode 00A7  
                 USARTWriteInt@F3536 0234                        _suspend_blink 0058  
       setSwitchBypassRelays@f_state 00B2                         modSaw@period 0142  
                            _UQFront 007D                            ?_init_adc 0070  
                          ?_init_pwm 0070                     _adjust_mod_delay 01BE  
                            _InitApp 2FA0                 __end_of_scaleA10kPot 1BE9  
                       modSin@period 0142               __end_of_InitializeTaps 1026  
                       modSin@tmpVal 0145                        ?_set_leds_top 00A0  
                         _knob1_prev 01CD           __size_of_update_selectMode 0059  
                 i1___awdiv@quotient 0077                           _knob2_prev 01CF  
                         _knob3_prev 01D1                           _knob4_prev 01D3  
                         _knob5_prev 01D5                     ?_set_subdivision 013F  
                          ?_showSave 0070                              ___aldiv 18B3  
                     ?_scaleiA10kPot 0167                      __size_of___ftge 003C  
                            ___awdiv 2533                      __size_of___lmul 0030  
                            ___ftadd 1026                              ___ftdiv 1D27  
                            ___ftneg 2D8A                           _knob_1_pos 01AC  
                         _knob_2_pos 01AE                      __size_of___wmul 001C  
                            ___ftmul 1E7B                           _knob_3_pos 01B0  
                            ___ftsub 0800                              ___fttol 19BA  
                         _knob_4_pos 01B2                           _knob_5_pos 01B4  
                  _switchTap_pressed 0059                           ??___altoft 0132  
               _setExpressionDisplay 2DD9               ?_updateModulationArray 0070  
             __end_of_FLASH_ReadWord 2EB4                      __size_of_modSaw 01AA  
                    __size_of_modSin 01AC                           ??___awtoft 00AB  
                         ??___ftpack 00A5                      __size_of_modTri 01FB  
                  __end_of_eval_poly 2709                   InitializeTaps@itap 00A1  
                         ??___lltoft 00AC                              __ptext1 25D9  
                            __ptext2 207D                              __ptext3 09FD  
                            __ptext4 2E0B                              __ptext5 18B3  
                            __ptext6 1232                              __ptext7 2EB4  
                            __ptext8 21A3                              __ptext9 2001  
         __end_of_setLongBypassState 2ED5          ?i1_getModulationSubdivision 0070  
             ??_getSwitchBypassState 00A2                    __end_of_modSawRev 2E94  
                          _T2CONbits 001C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02DA               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2DD9                         modTri@period 013A  
                  __end_of_modSquare 21A3                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 2015                              clrloop0 2DAA  
               end_of_initialization 0357                              exp@sign 0154  
                         _modulation 2261                              init_ram 2D9D  
                         ??_init_adc 00A0                              initloop 2D9E  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 2221                        _longTap_timer 01B8  
                      _longTap_state 0067                        _longTap_start 0054  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2E25  
              _setSwitchBypassRelays 2047               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 0068  
                   _longBypass_timer 01B6                     ___aldiv@quotient 00AB  
                   _longBypass_state 0053                     _longBypass_start 0052  
       __size_of_read_bottom_tactile 0047                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 0066  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                          _USARTInit 22E3                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 1831  
                          i1___awdiv 24E2                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2D76                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 011F  
           __end_of_initSwitchBypass 07FF                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01BC                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 2166                 __end_of_setPedalMode 2F1B  
                     __end_of___lmul 1831                       __end_of___wmul 2E5C  
                       _double_timer 01A0                          _adc_convert 2DC6  
   __end_of_getModulationSubdivision 3000                       _switchTap_down 01C6  
                     __end_of_modSaw 1654                       __end_of_modSin 1800  
                     __end_of_modTri 0DDD                       modSawRev@angle 0145  
                         floor@expon 013D                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 02E0  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 004F                  _setDoublePressState 21A3  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_map 1ACC                          __end_of_exp 14AA  
                        __end_of_log 2000                          __end_of_isr 02DE  
                         ?i1___awdiv 0070                          __end_of_sin 09FD  
                        __end_of_pow 1232                __size_of_scaleA10kPot 0091  
                 _adjusted_pot_value 0241                          ?_modulation 002E  
                 scaleiA10kPot@input 0167                           frexp@value 00A0  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
               ?_setDoublePressState 00B8  __size_ofi1_getModulationSubdivision 002C  
                   ?_setLongTapState 00A0                    ?_setPresetDisplay 0070  
                           ??___ftge 00A6                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                 ??_setPresetDisplay 00A4                          __pdataBANK0 005B  
                        __pdataBANK2 016F                          __pdataBANK3 01C7  
                        __pdataBANK4 025E                             ??_modSaw 00F0  
                           ??_modSin 013A                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0                        _tap_iteration 01DB  
           __size_of_updateSwitchTap 01E5                    __size_of___altoft 004B  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                        __pbssBIGRAM 238A                         _scaleA10kPot 1B58  
                  __size_of___lltoft 002A                        ??_init_timer0 00A0  
                      ??_init_timer2 00A0                          __pbssCOMMON 007D  
               __end_of_set_leds_top 25D9                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 006B  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E2  
                      __pcstackBANK4 0255               __size_of_ring_tactiles 0050  
                     isr@tmpModDelay 0044                       _expSwitchState 01DF  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E2  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2831 0255                            _main$2832 0258  
                          _main$2833 025B              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01DE                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 013F                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C3  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2836 01E5  
                 _scaleA100kPot$2837 01E8                        ?_calcSinArray 0070  
                  i1___awdiv@counter 0075                          _blink_delay 01CB  
                __size_of_modulation 0041                        _resetRingLEDs 2DF1  
                        _blink_state 01DD                            _eval_poly 2697  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2E78  
           ??_getModulationDelayTime 0136                  _read_bottom_tactile 2326  
                     __size_of_floor 00A7                       __size_of_ldexp 0097  
                     __size_of_frexp 0040                            _modSquare 2166  
                     _presetModeCnst 01E1                       __size_of_trunc 0048  
                 _setLongBypassState 2EB4                  __end_of_init_timer0 2D81  
                __end_of_init_timer2 2D8A                            _mod_value 01BA  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 0056                       ___wmul@product 0132  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01D7                            clear_ram0 2DA9  
                          _tap_timer 0046                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0024  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 2492                      _longBypass_down 0051  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C1  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
                     ??_calcSinArray 0153            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 01A8  
                         _ADCON0bits 009D                             i1___lmul 2F71  
                         _ADCON1bits 009E             __size_of_set_subdivision 00BB  
                  ___wmul@multiplier 012E                     set_subdivision@x 013F  
                   set_subdivision@y 0141            __size_of_read_top_tactile 004A  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0145                __end_of_scaleA100kPot 19BA  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2EF7                    _ReadSavedSettings 2709  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2846 0134                          _modSaw$2847 0137  
                        _modSaw$2848 013A                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                        _modSin$2844 013C                   ??_initSwitchBypass 00BA  
                   __size_of_InitApp 0030                       ?_ring_tactiles 0070  
                          modSaw@mod 013D                          _mode1_state 01C2  
                      ??_update_mode 00A7                          _mode2_state 0055  
              ??_read_bottom_tactile 00B2                          _modTri$2845 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 2447  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             ___awtoft 2ED5  
              __size_of_set_leds_top 0054                             ___ftpack 2632  
                  _baseline_mod_time 01C7                             _map$2834 00ED  
                           ___lltoft 2F1B               _preset_programmning_on 01C4  
                         _ANSELEbits 0190                           _ANSELFbits 040C  
                   modTri@inflection 0131                     set_leds_bottom@x 00A0  
                           _exp$2608 014F                             _exp$2852 014C  
                        _init_timer0 2D7A                          _init_timer2 2D81  
         __end_of_updateSwitchBypass 1351                             __ptext10 2221  
                           __ptext11 2492                             __ptext20 2E78  
                           __ptext12 2EF7                             __ptext21 14AA  
                           __ptext13 20B5                             __ptext30 1351  
                           __ptext22 2533                             __ptext14 2DD9  
                           __ptext31 1BE9                             __ptext23 0735  
                           __ptext15 2DF1                             __ptext40 1801  
                           __ptext32 2F1B                             __ptext24 23B5  
                           __ptext16 0DDD                             __ptext41 1800  
                           __ptext33 23FD                             __ptext25 1DD0  
                           __ptext17 0BE2                             __ptext50 212A  
                           __ptext42 2D76                             __ptext34 2326  
                           __ptext26 1B58                             __ptext18 2166  
                           __ptext51 2447                             __ptext43 1ACC  
                           __ptext35 1A41                             __ptext27 1935  
                           __ptext19 1654                             __ptext60 2632  
                           __ptext52 2697                             __ptext44 2FD0  
                           __ptext36 07F0                             __ptext28 111C  
                           __ptext61 2DC6                             __ptext53 2E40  
                           __ptext45 277F                             __ptext37 2E5C  
                           __ptext29 1F2F                             __ptext70 2D81  
                           __ptext62 22E3                             __ptext54 1E7B  
                           __ptext46 082E                             __ptext38 2047  
                           __ptext71 2D7A                             __ptext63 2709  
                           __ptext55 0800                             __ptext47 1C80  
                           __ptext39 2015                             __ptext80 1831  
                           __ptext72 2D93                             __ptext64 2585  
                           __ptext56 1026                             __ptext48 21E1  
                           __ptext73 2D72                             __ptext65 20EF  
                           __ptext57 2D8A                             __ptext49 19BA  
                           __ptext66 2E94                             __ptext58 1D27  
                           __ptext75 236D                             __ptext67 1000  
                           __ptext59 2ED5                             __ptext76 2F45  
                           __ptext68 2FA0                             __ptext77 24E2  
                           __ptext69 22A2                             __ptext78 2261  
                           __ptext79 2F71                             _sin$2851 014C  
          __end_of_ReadSavedSettings 277F                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 008C  
                           _ledState 0239                             _pow$2850 015F  
                           _pow$2849 015C                        _presetChannel 006A  
                       ??_modulation 0036                          _mod_counter 024F  
                           _modArray 238A              ??_setSwitchBypassRelays 00B4  
                         trunc@expon 013D                             _init_adc 2D93  
                      __size_of_main 03DA                             _init_pwm 22A2  
   updateModulationArray@angleFactor 0154                             _sinArray 2482  
       __size_of_ConfigureOscillator 0004                         _set_leds_top 2585  
                           _showSave 2001                             _num_taps 0069  
              __end_of_scaleiA10kPot 1E7B                             int$flags 007E  
                    ??_resetRingLEDs 00A4                      i1set_leds_top@x 0070  
                     modSquare@angle 0148                  __end_of_update_mode 20B5  
                           exp@coeff 2800                             _symmetry 01D9  
                modSawRev@inflection 0148                             log@coeff 281E  
                 __end_of_modulation 22A2                   calcSinArray@iAngle 015A  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 014B                    ??_set_subdivision 0143  
                        ??_modSquare 00F0                   calcSinArray@tmpVal 0157  
                           intlevel1 0000                 __end_of_calcSinArray 2800  
                    _set_leds_bottom 20EF                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01C5                           _OSCCONbits 0099  
                       _preset_blink 0057               _getModulationDelayTime 1ACC  
                     i1_set_leds_top 236D       __size_of_updateModulationArray 0223  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
      __size_of_setExpressionDisplay 0018                   _scaleiA10kPot$2842 01E5  
                 _scaleiA10kPot$2843 01E8             __size_of_setLongTapState 001A  
                   _read_top_tactile 23FD         ??i1_getModulationSubdivision 0072  
                       ___aldiv@sign 00AA           __size_of_ReadSavedSettings 0076  
        __end_of_setDoublePressState 21E1                         _CCP10CONbits 061F  
                  _bottom_push_state 005F           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 23B5  
