

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 20:08:22 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	text65,local,class=CODE,merge=1,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	intentry,global,class=CODE,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	dabs	1,0x920,80
   112                           	dabs	1,0x8A0,80
   113                           	dabs	1,0x820,80
   114                           	dabs	1,0x7A0,80
   115                           	dabs	1,0x742,46
   116                           	dabs	1,0x720,34
   117                           	dabs	1,0x6A0,80
   118                           	dabs	1,0x620,80
   119                           	dabs	1,0x5BA,54
   120                           	dabs	1,0x2482,0,_cosArray
   121                           	dabs	1,0x238A,0,_modArray
   122                           	dabs	1,0x7E,2
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  008F                     	;# 
   157  0090                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0097                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  0110                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  011D                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182  018F                     	;# 
   183  0190                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0197                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  020D                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  028C                     	;# 
   242  028D                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  029D                     	;# 
   252  029E                     	;# 
   253  029F                     	;# 
   254  030C                     	;# 
   255  030D                     	;# 
   256  0311                     	;# 
   257  0311                     	;# 
   258  0312                     	;# 
   259  0313                     	;# 
   260  0318                     	;# 
   261  0318                     	;# 
   262  0319                     	;# 
   263  031A                     	;# 
   264  031C                     	;# 
   265  031C                     	;# 
   266  031D                     	;# 
   267  031E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  040C                     	;# 
   274  040D                     	;# 
   275  0411                     	;# 
   276  0411                     	;# 
   277  0412                     	;# 
   278  0413                     	;# 
   279  0414                     	;# 
   280  0415                     	;# 
   281  0416                     	;# 
   282  0417                     	;# 
   283  0418                     	;# 
   284  0418                     	;# 
   285  0419                     	;# 
   286  041A                     	;# 
   287  041B                     	;# 
   288  041C                     	;# 
   289  041D                     	;# 
   290  041E                     	;# 
   291  048D                     	;# 
   292  0491                     	;# 
   293  0491                     	;# 
   294  0492                     	;# 
   295  0492                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0494                     	;# 
   301  0495                     	;# 
   302  0495                     	;# 
   303  0496                     	;# 
   304  0496                     	;# 
   305  0497                     	;# 
   306  0497                     	;# 
   307  0595                     	;# 
   308  0596                     	;# 
   309  0597                     	;# 
   310  059C                     	;# 
   311  059D                     	;# 
   312  059E                     	;# 
   313  0611                     	;# 
   314  0611                     	;# 
   315  0612                     	;# 
   316  0613                     	;# 
   317  0614                     	;# 
   318  0614                     	;# 
   319  0615                     	;# 
   320  0616                     	;# 
   321  0617                     	;# 
   322  0617                     	;# 
   323  0618                     	;# 
   324  0619                     	;# 
   325  061A                     	;# 
   326  061A                     	;# 
   327  061B                     	;# 
   328  061C                     	;# 
   329  061D                     	;# 
   330  061D                     	;# 
   331  061E                     	;# 
   332  061F                     	;# 
   333  0FE4                     	;# 
   334  0FE5                     	;# 
   335  0FE6                     	;# 
   336  0FE7                     	;# 
   337  0FE8                     	;# 
   338  0FE9                     	;# 
   339  0FEA                     	;# 
   340  0FEB                     	;# 
   341  0FED                     	;# 
   342  0FEE                     	;# 
   343  0FEF                     	;# 
   344  0000                     	;# 
   345  0001                     	;# 
   346  0002                     	;# 
   347  0003                     	;# 
   348  0004                     	;# 
   349  0005                     	;# 
   350  0006                     	;# 
   351  0007                     	;# 
   352  0008                     	;# 
   353  0009                     	;# 
   354  000A                     	;# 
   355  000B                     	;# 
   356  000C                     	;# 
   357  000D                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  008F                     	;# 
   378  0090                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0095                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  0110                     	;# 
   398  0116                     	;# 
   399  0117                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  018F                     	;# 
   404  0190                     	;# 
   405  0191                     	;# 
   406  0191                     	;# 
   407  0192                     	;# 
   408  0193                     	;# 
   409  0193                     	;# 
   410  0194                     	;# 
   411  0195                     	;# 
   412  0196                     	;# 
   413  0197                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019A                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019D                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  019F                     	;# 
   437  020D                     	;# 
   438  020F                     	;# 
   439  0210                     	;# 
   440  0211                     	;# 
   441  0211                     	;# 
   442  0212                     	;# 
   443  0212                     	;# 
   444  0213                     	;# 
   445  0213                     	;# 
   446  0214                     	;# 
   447  0214                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  0219                     	;# 
   456  021A                     	;# 
   457  021B                     	;# 
   458  021C                     	;# 
   459  021D                     	;# 
   460  021E                     	;# 
   461  021F                     	;# 
   462  028C                     	;# 
   463  028D                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  029D                     	;# 
   473  029E                     	;# 
   474  029F                     	;# 
   475  030C                     	;# 
   476  030D                     	;# 
   477  0311                     	;# 
   478  0311                     	;# 
   479  0312                     	;# 
   480  0313                     	;# 
   481  0318                     	;# 
   482  0318                     	;# 
   483  0319                     	;# 
   484  031A                     	;# 
   485  031C                     	;# 
   486  031C                     	;# 
   487  031D                     	;# 
   488  031E                     	;# 
   489  038C                     	;# 
   490  038D                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  040C                     	;# 
   495  040D                     	;# 
   496  0411                     	;# 
   497  0411                     	;# 
   498  0412                     	;# 
   499  0413                     	;# 
   500  0414                     	;# 
   501  0415                     	;# 
   502  0416                     	;# 
   503  0417                     	;# 
   504  0418                     	;# 
   505  0418                     	;# 
   506  0419                     	;# 
   507  041A                     	;# 
   508  041B                     	;# 
   509  041C                     	;# 
   510  041D                     	;# 
   511  041E                     	;# 
   512  048D                     	;# 
   513  0491                     	;# 
   514  0491                     	;# 
   515  0492                     	;# 
   516  0492                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0493                     	;# 
   520  0494                     	;# 
   521  0494                     	;# 
   522  0495                     	;# 
   523  0495                     	;# 
   524  0496                     	;# 
   525  0496                     	;# 
   526  0497                     	;# 
   527  0497                     	;# 
   528  0595                     	;# 
   529  0596                     	;# 
   530  0597                     	;# 
   531  059C                     	;# 
   532  059D                     	;# 
   533  059E                     	;# 
   534  0611                     	;# 
   535  0611                     	;# 
   536  0612                     	;# 
   537  0613                     	;# 
   538  0614                     	;# 
   539  0614                     	;# 
   540  0615                     	;# 
   541  0616                     	;# 
   542  0617                     	;# 
   543  0617                     	;# 
   544  0618                     	;# 
   545  0619                     	;# 
   546  061A                     	;# 
   547  061A                     	;# 
   548  061B                     	;# 
   549  061C                     	;# 
   550  061D                     	;# 
   551  061D                     	;# 
   552  061E                     	;# 
   553  061F                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  000F                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010E                     	;# 
   617  010F                     	;# 
   618  0110                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018D                     	;# 
   624  018F                     	;# 
   625  0190                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0197                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  019F                     	;# 
   658  020D                     	;# 
   659  020F                     	;# 
   660  0210                     	;# 
   661  0211                     	;# 
   662  0211                     	;# 
   663  0212                     	;# 
   664  0212                     	;# 
   665  0213                     	;# 
   666  0213                     	;# 
   667  0214                     	;# 
   668  0214                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0216                     	;# 
   673  0216                     	;# 
   674  0217                     	;# 
   675  0217                     	;# 
   676  0219                     	;# 
   677  021A                     	;# 
   678  021B                     	;# 
   679  021C                     	;# 
   680  021D                     	;# 
   681  021E                     	;# 
   682  021F                     	;# 
   683  028C                     	;# 
   684  028D                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  029D                     	;# 
   694  029E                     	;# 
   695  029F                     	;# 
   696  030C                     	;# 
   697  030D                     	;# 
   698  0311                     	;# 
   699  0311                     	;# 
   700  0312                     	;# 
   701  0313                     	;# 
   702  0318                     	;# 
   703  0318                     	;# 
   704  0319                     	;# 
   705  031A                     	;# 
   706  031C                     	;# 
   707  031C                     	;# 
   708  031D                     	;# 
   709  031E                     	;# 
   710  038C                     	;# 
   711  038D                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  040C                     	;# 
   716  040D                     	;# 
   717  0411                     	;# 
   718  0411                     	;# 
   719  0412                     	;# 
   720  0413                     	;# 
   721  0414                     	;# 
   722  0415                     	;# 
   723  0416                     	;# 
   724  0417                     	;# 
   725  0418                     	;# 
   726  0418                     	;# 
   727  0419                     	;# 
   728  041A                     	;# 
   729  041B                     	;# 
   730  041C                     	;# 
   731  041D                     	;# 
   732  041E                     	;# 
   733  048D                     	;# 
   734  0491                     	;# 
   735  0491                     	;# 
   736  0492                     	;# 
   737  0492                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0493                     	;# 
   741  0494                     	;# 
   742  0494                     	;# 
   743  0495                     	;# 
   744  0495                     	;# 
   745  0496                     	;# 
   746  0496                     	;# 
   747  0497                     	;# 
   748  0497                     	;# 
   749  0595                     	;# 
   750  0596                     	;# 
   751  0597                     	;# 
   752  059C                     	;# 
   753  059D                     	;# 
   754  059E                     	;# 
   755  0611                     	;# 
   756  0611                     	;# 
   757  0612                     	;# 
   758  0613                     	;# 
   759  0614                     	;# 
   760  0614                     	;# 
   761  0615                     	;# 
   762  0616                     	;# 
   763  0617                     	;# 
   764  0617                     	;# 
   765  0618                     	;# 
   766  0619                     	;# 
   767  061A                     	;# 
   768  061A                     	;# 
   769  061B                     	;# 
   770  061C                     	;# 
   771  061D                     	;# 
   772  061D                     	;# 
   773  061E                     	;# 
   774  061F                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000D                     	;# 
   800  000E                     	;# 
   801  000F                     	;# 
   802  0010                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  008C                     	;# 
   817  008D                     	;# 
   818  008E                     	;# 
   819  008F                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0099                     	;# 
   829  009A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  010C                     	;# 
   836  010D                     	;# 
   837  010E                     	;# 
   838  010F                     	;# 
   839  0110                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  011D                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018F                     	;# 
   846  0190                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0197                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  0199                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019C                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019D                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019E                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  019F                     	;# 
   879  020D                     	;# 
   880  020F                     	;# 
   881  0210                     	;# 
   882  0211                     	;# 
   883  0211                     	;# 
   884  0212                     	;# 
   885  0212                     	;# 
   886  0213                     	;# 
   887  0213                     	;# 
   888  0214                     	;# 
   889  0214                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0216                     	;# 
   894  0216                     	;# 
   895  0217                     	;# 
   896  0217                     	;# 
   897  0219                     	;# 
   898  021A                     	;# 
   899  021B                     	;# 
   900  021C                     	;# 
   901  021D                     	;# 
   902  021E                     	;# 
   903  021F                     	;# 
   904  028C                     	;# 
   905  028D                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0298                     	;# 
   911  0298                     	;# 
   912  0299                     	;# 
   913  029A                     	;# 
   914  029D                     	;# 
   915  029E                     	;# 
   916  029F                     	;# 
   917  030C                     	;# 
   918  030D                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0318                     	;# 
   924  0318                     	;# 
   925  0319                     	;# 
   926  031A                     	;# 
   927  031C                     	;# 
   928  031C                     	;# 
   929  031D                     	;# 
   930  031E                     	;# 
   931  038C                     	;# 
   932  038D                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  040C                     	;# 
   937  040D                     	;# 
   938  0411                     	;# 
   939  0411                     	;# 
   940  0412                     	;# 
   941  0413                     	;# 
   942  0414                     	;# 
   943  0415                     	;# 
   944  0416                     	;# 
   945  0417                     	;# 
   946  0418                     	;# 
   947  0418                     	;# 
   948  0419                     	;# 
   949  041A                     	;# 
   950  041B                     	;# 
   951  041C                     	;# 
   952  041D                     	;# 
   953  041E                     	;# 
   954  048D                     	;# 
   955  0491                     	;# 
   956  0491                     	;# 
   957  0492                     	;# 
   958  0492                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0493                     	;# 
   962  0494                     	;# 
   963  0494                     	;# 
   964  0495                     	;# 
   965  0495                     	;# 
   966  0496                     	;# 
   967  0496                     	;# 
   968  0497                     	;# 
   969  0497                     	;# 
   970  0595                     	;# 
   971  0596                     	;# 
   972  0597                     	;# 
   973  059C                     	;# 
   974  059D                     	;# 
   975  059E                     	;# 
   976  0611                     	;# 
   977  0611                     	;# 
   978  0612                     	;# 
   979  0613                     	;# 
   980  0614                     	;# 
   981  0614                     	;# 
   982  0615                     	;# 
   983  0616                     	;# 
   984  0617                     	;# 
   985  0617                     	;# 
   986  0618                     	;# 
   987  0619                     	;# 
   988  061A                     	;# 
   989  061A                     	;# 
   990  061B                     	;# 
   991  061C                     	;# 
   992  061D                     	;# 
   993  061D                     	;# 
   994  061E                     	;# 
   995  061F                     	;# 
   996  0FE4                     	;# 
   997  0FE5                     	;# 
   998  0FE6                     	;# 
   999  0FE7                     	;# 
  1000  0FE8                     	;# 
  1001  0FE9                     	;# 
  1002  0FEA                     	;# 
  1003  0FEB                     	;# 
  1004  0FED                     	;# 
  1005  0FEE                     	;# 
  1006  0FEF                     	;# 
  1007  0000                     	;# 
  1008  0001                     	;# 
  1009  0002                     	;# 
  1010  0003                     	;# 
  1011  0004                     	;# 
  1012  0005                     	;# 
  1013  0006                     	;# 
  1014  0007                     	;# 
  1015  0008                     	;# 
  1016  0009                     	;# 
  1017  000A                     	;# 
  1018  000B                     	;# 
  1019  000C                     	;# 
  1020  000D                     	;# 
  1021  000E                     	;# 
  1022  000F                     	;# 
  1023  0010                     	;# 
  1024  0011                     	;# 
  1025  0012                     	;# 
  1026  0013                     	;# 
  1027  0014                     	;# 
  1028  0015                     	;# 
  1029  0016                     	;# 
  1030  0016                     	;# 
  1031  0017                     	;# 
  1032  0018                     	;# 
  1033  0019                     	;# 
  1034  001A                     	;# 
  1035  001B                     	;# 
  1036  001C                     	;# 
  1037  008C                     	;# 
  1038  008D                     	;# 
  1039  008E                     	;# 
  1040  008F                     	;# 
  1041  0090                     	;# 
  1042  0091                     	;# 
  1043  0092                     	;# 
  1044  0093                     	;# 
  1045  0094                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0099                     	;# 
  1050  009A                     	;# 
  1051  009B                     	;# 
  1052  009B                     	;# 
  1053  009C                     	;# 
  1054  009D                     	;# 
  1055  009E                     	;# 
  1056  010C                     	;# 
  1057  010D                     	;# 
  1058  010E                     	;# 
  1059  010F                     	;# 
  1060  0110                     	;# 
  1061  0116                     	;# 
  1062  0117                     	;# 
  1063  011D                     	;# 
  1064  018C                     	;# 
  1065  018D                     	;# 
  1066  018F                     	;# 
  1067  0190                     	;# 
  1068  0191                     	;# 
  1069  0191                     	;# 
  1070  0192                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0194                     	;# 
  1074  0195                     	;# 
  1075  0196                     	;# 
  1076  0197                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  0199                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  019F                     	;# 
  1100  020D                     	;# 
  1101  020F                     	;# 
  1102  0210                     	;# 
  1103  0211                     	;# 
  1104  0211                     	;# 
  1105  0212                     	;# 
  1106  0212                     	;# 
  1107  0213                     	;# 
  1108  0213                     	;# 
  1109  0214                     	;# 
  1110  0214                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0216                     	;# 
  1115  0216                     	;# 
  1116  0217                     	;# 
  1117  0217                     	;# 
  1118  0219                     	;# 
  1119  021A                     	;# 
  1120  021B                     	;# 
  1121  021C                     	;# 
  1122  021D                     	;# 
  1123  021E                     	;# 
  1124  021F                     	;# 
  1125  028C                     	;# 
  1126  028D                     	;# 
  1127  0291                     	;# 
  1128  0291                     	;# 
  1129  0292                     	;# 
  1130  0293                     	;# 
  1131  0298                     	;# 
  1132  0298                     	;# 
  1133  0299                     	;# 
  1134  029A                     	;# 
  1135  029D                     	;# 
  1136  029E                     	;# 
  1137  029F                     	;# 
  1138  030C                     	;# 
  1139  030D                     	;# 
  1140  0311                     	;# 
  1141  0311                     	;# 
  1142  0312                     	;# 
  1143  0313                     	;# 
  1144  0318                     	;# 
  1145  0318                     	;# 
  1146  0319                     	;# 
  1147  031A                     	;# 
  1148  031C                     	;# 
  1149  031C                     	;# 
  1150  031D                     	;# 
  1151  031E                     	;# 
  1152  038C                     	;# 
  1153  038D                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  040C                     	;# 
  1158  040D                     	;# 
  1159  0411                     	;# 
  1160  0411                     	;# 
  1161  0412                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0415                     	;# 
  1165  0416                     	;# 
  1166  0417                     	;# 
  1167  0418                     	;# 
  1168  0418                     	;# 
  1169  0419                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041C                     	;# 
  1173  041D                     	;# 
  1174  041E                     	;# 
  1175  048D                     	;# 
  1176  0491                     	;# 
  1177  0491                     	;# 
  1178  0492                     	;# 
  1179  0492                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0493                     	;# 
  1183  0494                     	;# 
  1184  0494                     	;# 
  1185  0495                     	;# 
  1186  0495                     	;# 
  1187  0496                     	;# 
  1188  0496                     	;# 
  1189  0497                     	;# 
  1190  0497                     	;# 
  1191  0595                     	;# 
  1192  0596                     	;# 
  1193  0597                     	;# 
  1194  059C                     	;# 
  1195  059D                     	;# 
  1196  059E                     	;# 
  1197  0611                     	;# 
  1198  0611                     	;# 
  1199  0612                     	;# 
  1200  0613                     	;# 
  1201  0614                     	;# 
  1202  0614                     	;# 
  1203  0615                     	;# 
  1204  0616                     	;# 
  1205  0617                     	;# 
  1206  0617                     	;# 
  1207  0618                     	;# 
  1208  0619                     	;# 
  1209  061A                     	;# 
  1210  061A                     	;# 
  1211  061B                     	;# 
  1212  061C                     	;# 
  1213  061D                     	;# 
  1214  061D                     	;# 
  1215  061E                     	;# 
  1216  061F                     	;# 
  1217  0FE4                     	;# 
  1218  0FE5                     	;# 
  1219  0FE6                     	;# 
  1220  0FE7                     	;# 
  1221  0FE8                     	;# 
  1222  0FE9                     	;# 
  1223  0FEA                     	;# 
  1224  0FEB                     	;# 
  1225  0FED                     	;# 
  1226  0FEE                     	;# 
  1227  0FEF                     	;# 
  1228  0000                     	;# 
  1229  0001                     	;# 
  1230  0002                     	;# 
  1231  0003                     	;# 
  1232  0004                     	;# 
  1233  0005                     	;# 
  1234  0006                     	;# 
  1235  0007                     	;# 
  1236  0008                     	;# 
  1237  0009                     	;# 
  1238  000A                     	;# 
  1239  000B                     	;# 
  1240  000C                     	;# 
  1241  000D                     	;# 
  1242  000E                     	;# 
  1243  000F                     	;# 
  1244  0010                     	;# 
  1245  0011                     	;# 
  1246  0012                     	;# 
  1247  0013                     	;# 
  1248  0014                     	;# 
  1249  0015                     	;# 
  1250  0016                     	;# 
  1251  0016                     	;# 
  1252  0017                     	;# 
  1253  0018                     	;# 
  1254  0019                     	;# 
  1255  001A                     	;# 
  1256  001B                     	;# 
  1257  001C                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  008F                     	;# 
  1262  0090                     	;# 
  1263  0091                     	;# 
  1264  0092                     	;# 
  1265  0093                     	;# 
  1266  0094                     	;# 
  1267  0095                     	;# 
  1268  0096                     	;# 
  1269  0097                     	;# 
  1270  0099                     	;# 
  1271  009A                     	;# 
  1272  009B                     	;# 
  1273  009B                     	;# 
  1274  009C                     	;# 
  1275  009D                     	;# 
  1276  009E                     	;# 
  1277  010C                     	;# 
  1278  010D                     	;# 
  1279  010E                     	;# 
  1280  010F                     	;# 
  1281  0110                     	;# 
  1282  0116                     	;# 
  1283  0117                     	;# 
  1284  011D                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018F                     	;# 
  1288  0190                     	;# 
  1289  0191                     	;# 
  1290  0191                     	;# 
  1291  0192                     	;# 
  1292  0193                     	;# 
  1293  0193                     	;# 
  1294  0194                     	;# 
  1295  0195                     	;# 
  1296  0196                     	;# 
  1297  0197                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  0199                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019C                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019D                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019E                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  019F                     	;# 
  1321  020D                     	;# 
  1322  020F                     	;# 
  1323  0210                     	;# 
  1324  0211                     	;# 
  1325  0211                     	;# 
  1326  0212                     	;# 
  1327  0212                     	;# 
  1328  0213                     	;# 
  1329  0213                     	;# 
  1330  0214                     	;# 
  1331  0214                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0216                     	;# 
  1336  0216                     	;# 
  1337  0217                     	;# 
  1338  0217                     	;# 
  1339  0219                     	;# 
  1340  021A                     	;# 
  1341  021B                     	;# 
  1342  021C                     	;# 
  1343  021D                     	;# 
  1344  021E                     	;# 
  1345  021F                     	;# 
  1346  028C                     	;# 
  1347  028D                     	;# 
  1348  0291                     	;# 
  1349  0291                     	;# 
  1350  0292                     	;# 
  1351  0293                     	;# 
  1352  0298                     	;# 
  1353  0298                     	;# 
  1354  0299                     	;# 
  1355  029A                     	;# 
  1356  029D                     	;# 
  1357  029E                     	;# 
  1358  029F                     	;# 
  1359  030C                     	;# 
  1360  030D                     	;# 
  1361  0311                     	;# 
  1362  0311                     	;# 
  1363  0312                     	;# 
  1364  0313                     	;# 
  1365  0318                     	;# 
  1366  0318                     	;# 
  1367  0319                     	;# 
  1368  031A                     	;# 
  1369  031C                     	;# 
  1370  031C                     	;# 
  1371  031D                     	;# 
  1372  031E                     	;# 
  1373  038C                     	;# 
  1374  038D                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  040C                     	;# 
  1379  040D                     	;# 
  1380  0411                     	;# 
  1381  0411                     	;# 
  1382  0412                     	;# 
  1383  0413                     	;# 
  1384  0414                     	;# 
  1385  0415                     	;# 
  1386  0416                     	;# 
  1387  0417                     	;# 
  1388  0418                     	;# 
  1389  0418                     	;# 
  1390  0419                     	;# 
  1391  041A                     	;# 
  1392  041B                     	;# 
  1393  041C                     	;# 
  1394  041D                     	;# 
  1395  041E                     	;# 
  1396  048D                     	;# 
  1397  0491                     	;# 
  1398  0491                     	;# 
  1399  0492                     	;# 
  1400  0492                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0493                     	;# 
  1404  0494                     	;# 
  1405  0494                     	;# 
  1406  0495                     	;# 
  1407  0495                     	;# 
  1408  0496                     	;# 
  1409  0496                     	;# 
  1410  0497                     	;# 
  1411  0497                     	;# 
  1412  0595                     	;# 
  1413  0596                     	;# 
  1414  0597                     	;# 
  1415  059C                     	;# 
  1416  059D                     	;# 
  1417  059E                     	;# 
  1418  0611                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0617                     	;# 
  1428  0618                     	;# 
  1429  0619                     	;# 
  1430  061A                     	;# 
  1431  061A                     	;# 
  1432  061B                     	;# 
  1433  061C                     	;# 
  1434  061D                     	;# 
  1435  061D                     	;# 
  1436  061E                     	;# 
  1437  061F                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  000F                     	;# 
  1465  0010                     	;# 
  1466  0011                     	;# 
  1467  0012                     	;# 
  1468  0013                     	;# 
  1469  0014                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  008C                     	;# 
  1480  008D                     	;# 
  1481  008E                     	;# 
  1482  008F                     	;# 
  1483  0090                     	;# 
  1484  0091                     	;# 
  1485  0092                     	;# 
  1486  0093                     	;# 
  1487  0094                     	;# 
  1488  0095                     	;# 
  1489  0096                     	;# 
  1490  0097                     	;# 
  1491  0099                     	;# 
  1492  009A                     	;# 
  1493  009B                     	;# 
  1494  009B                     	;# 
  1495  009C                     	;# 
  1496  009D                     	;# 
  1497  009E                     	;# 
  1498  010C                     	;# 
  1499  010D                     	;# 
  1500  010E                     	;# 
  1501  010F                     	;# 
  1502  0110                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  011D                     	;# 
  1506  018C                     	;# 
  1507  018D                     	;# 
  1508  018F                     	;# 
  1509  0190                     	;# 
  1510  0191                     	;# 
  1511  0191                     	;# 
  1512  0192                     	;# 
  1513  0193                     	;# 
  1514  0193                     	;# 
  1515  0194                     	;# 
  1516  0195                     	;# 
  1517  0196                     	;# 
  1518  0197                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  0199                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  020F                     	;# 
  1544  0210                     	;# 
  1545  0211                     	;# 
  1546  0211                     	;# 
  1547  0212                     	;# 
  1548  0212                     	;# 
  1549  0213                     	;# 
  1550  0213                     	;# 
  1551  0214                     	;# 
  1552  0214                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0216                     	;# 
  1557  0216                     	;# 
  1558  0217                     	;# 
  1559  0217                     	;# 
  1560  0219                     	;# 
  1561  021A                     	;# 
  1562  021B                     	;# 
  1563  021C                     	;# 
  1564  021D                     	;# 
  1565  021E                     	;# 
  1566  021F                     	;# 
  1567  028C                     	;# 
  1568  028D                     	;# 
  1569  0291                     	;# 
  1570  0291                     	;# 
  1571  0292                     	;# 
  1572  0293                     	;# 
  1573  0298                     	;# 
  1574  0298                     	;# 
  1575  0299                     	;# 
  1576  029A                     	;# 
  1577  029D                     	;# 
  1578  029E                     	;# 
  1579  029F                     	;# 
  1580  030C                     	;# 
  1581  030D                     	;# 
  1582  0311                     	;# 
  1583  0311                     	;# 
  1584  0312                     	;# 
  1585  0313                     	;# 
  1586  0318                     	;# 
  1587  0318                     	;# 
  1588  0319                     	;# 
  1589  031A                     	;# 
  1590  031C                     	;# 
  1591  031C                     	;# 
  1592  031D                     	;# 
  1593  031E                     	;# 
  1594  038C                     	;# 
  1595  038D                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  040C                     	;# 
  1600  040D                     	;# 
  1601  0411                     	;# 
  1602  0411                     	;# 
  1603  0412                     	;# 
  1604  0413                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  0418                     	;# 
  1611  0419                     	;# 
  1612  041A                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  048D                     	;# 
  1618  0491                     	;# 
  1619  0491                     	;# 
  1620  0492                     	;# 
  1621  0492                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0493                     	;# 
  1625  0494                     	;# 
  1626  0494                     	;# 
  1627  0495                     	;# 
  1628  0495                     	;# 
  1629  0496                     	;# 
  1630  0496                     	;# 
  1631  0497                     	;# 
  1632  0497                     	;# 
  1633  0595                     	;# 
  1634  0596                     	;# 
  1635  0597                     	;# 
  1636  059C                     	;# 
  1637  059D                     	;# 
  1638  059E                     	;# 
  1639  0611                     	;# 
  1640  0611                     	;# 
  1641  0612                     	;# 
  1642  0613                     	;# 
  1643  0614                     	;# 
  1644  0614                     	;# 
  1645  0615                     	;# 
  1646  0616                     	;# 
  1647  0617                     	;# 
  1648  0617                     	;# 
  1649  0618                     	;# 
  1650  0619                     	;# 
  1651  061A                     	;# 
  1652  061A                     	;# 
  1653  061B                     	;# 
  1654  061C                     	;# 
  1655  061D                     	;# 
  1656  061D                     	;# 
  1657  061E                     	;# 
  1658  061F                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  000F                     	;# 
  1686  0010                     	;# 
  1687  0011                     	;# 
  1688  0012                     	;# 
  1689  0013                     	;# 
  1690  0014                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  008F                     	;# 
  1704  0090                     	;# 
  1705  0091                     	;# 
  1706  0092                     	;# 
  1707  0093                     	;# 
  1708  0094                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  010F                     	;# 
  1723  0110                     	;# 
  1724  0116                     	;# 
  1725  0117                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018F                     	;# 
  1730  0190                     	;# 
  1731  0191                     	;# 
  1732  0191                     	;# 
  1733  0192                     	;# 
  1734  0193                     	;# 
  1735  0193                     	;# 
  1736  0194                     	;# 
  1737  0195                     	;# 
  1738  0196                     	;# 
  1739  0197                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  0199                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019C                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019D                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019E                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  019F                     	;# 
  1763  020D                     	;# 
  1764  020F                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  0291                     	;# 
  1791  0291                     	;# 
  1792  0292                     	;# 
  1793  0293                     	;# 
  1794  0298                     	;# 
  1795  0298                     	;# 
  1796  0299                     	;# 
  1797  029A                     	;# 
  1798  029D                     	;# 
  1799  029E                     	;# 
  1800  029F                     	;# 
  1801  030C                     	;# 
  1802  030D                     	;# 
  1803  0311                     	;# 
  1804  0311                     	;# 
  1805  0312                     	;# 
  1806  0313                     	;# 
  1807  0318                     	;# 
  1808  0318                     	;# 
  1809  0319                     	;# 
  1810  031A                     	;# 
  1811  031C                     	;# 
  1812  031C                     	;# 
  1813  031D                     	;# 
  1814  031E                     	;# 
  1815  038C                     	;# 
  1816  038D                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  040C                     	;# 
  1821  040D                     	;# 
  1822  0411                     	;# 
  1823  0411                     	;# 
  1824  0412                     	;# 
  1825  0413                     	;# 
  1826  0414                     	;# 
  1827  0415                     	;# 
  1828  0416                     	;# 
  1829  0417                     	;# 
  1830  0418                     	;# 
  1831  0418                     	;# 
  1832  0419                     	;# 
  1833  041A                     	;# 
  1834  041B                     	;# 
  1835  041C                     	;# 
  1836  041D                     	;# 
  1837  041E                     	;# 
  1838  048D                     	;# 
  1839  0491                     	;# 
  1840  0491                     	;# 
  1841  0492                     	;# 
  1842  0492                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0493                     	;# 
  1846  0494                     	;# 
  1847  0494                     	;# 
  1848  0495                     	;# 
  1849  0495                     	;# 
  1850  0496                     	;# 
  1851  0496                     	;# 
  1852  0497                     	;# 
  1853  0497                     	;# 
  1854  0595                     	;# 
  1855  0596                     	;# 
  1856  0597                     	;# 
  1857  059C                     	;# 
  1858  059D                     	;# 
  1859  059E                     	;# 
  1860  0611                     	;# 
  1861  0611                     	;# 
  1862  0612                     	;# 
  1863  0613                     	;# 
  1864  0614                     	;# 
  1865  0614                     	;# 
  1866  0615                     	;# 
  1867  0616                     	;# 
  1868  0617                     	;# 
  1869  0617                     	;# 
  1870  0618                     	;# 
  1871  0619                     	;# 
  1872  061A                     	;# 
  1873  061A                     	;# 
  1874  061B                     	;# 
  1875  061C                     	;# 
  1876  061D                     	;# 
  1877  061D                     	;# 
  1878  061E                     	;# 
  1879  061F                     	;# 
  1880  0FE4                     	;# 
  1881  0FE5                     	;# 
  1882  0FE6                     	;# 
  1883  0FE7                     	;# 
  1884  0FE8                     	;# 
  1885  0FE9                     	;# 
  1886  0FEA                     	;# 
  1887  0FEB                     	;# 
  1888  0FED                     	;# 
  1889  0FEE                     	;# 
  1890  0FEF                     	;# 
  1891  0000                     	;# 
  1892  0001                     	;# 
  1893  0002                     	;# 
  1894  0003                     	;# 
  1895  0004                     	;# 
  1896  0005                     	;# 
  1897  0006                     	;# 
  1898  0007                     	;# 
  1899  0008                     	;# 
  1900  0009                     	;# 
  1901  000A                     	;# 
  1902  000B                     	;# 
  1903  000C                     	;# 
  1904  000D                     	;# 
  1905  000E                     	;# 
  1906  000F                     	;# 
  1907  0010                     	;# 
  1908  0011                     	;# 
  1909  0012                     	;# 
  1910  0013                     	;# 
  1911  0014                     	;# 
  1912  0015                     	;# 
  1913  0016                     	;# 
  1914  0016                     	;# 
  1915  0017                     	;# 
  1916  0018                     	;# 
  1917  0019                     	;# 
  1918  001A                     	;# 
  1919  001B                     	;# 
  1920  001C                     	;# 
  1921  008C                     	;# 
  1922  008D                     	;# 
  1923  008E                     	;# 
  1924  008F                     	;# 
  1925  0090                     	;# 
  1926  0091                     	;# 
  1927  0092                     	;# 
  1928  0093                     	;# 
  1929  0094                     	;# 
  1930  0095                     	;# 
  1931  0096                     	;# 
  1932  0097                     	;# 
  1933  0099                     	;# 
  1934  009A                     	;# 
  1935  009B                     	;# 
  1936  009B                     	;# 
  1937  009C                     	;# 
  1938  009D                     	;# 
  1939  009E                     	;# 
  1940  010C                     	;# 
  1941  010D                     	;# 
  1942  010E                     	;# 
  1943  010F                     	;# 
  1944  0110                     	;# 
  1945  0116                     	;# 
  1946  0117                     	;# 
  1947  011D                     	;# 
  1948  018C                     	;# 
  1949  018D                     	;# 
  1950  018F                     	;# 
  1951  0190                     	;# 
  1952  0191                     	;# 
  1953  0191                     	;# 
  1954  0192                     	;# 
  1955  0193                     	;# 
  1956  0193                     	;# 
  1957  0194                     	;# 
  1958  0195                     	;# 
  1959  0196                     	;# 
  1960  0197                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  0199                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019A                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019C                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019D                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019E                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  020F                     	;# 
  1986  0210                     	;# 
  1987  0211                     	;# 
  1988  0211                     	;# 
  1989  0212                     	;# 
  1990  0212                     	;# 
  1991  0213                     	;# 
  1992  0213                     	;# 
  1993  0214                     	;# 
  1994  0214                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0216                     	;# 
  1999  0216                     	;# 
  2000  0217                     	;# 
  2001  0217                     	;# 
  2002  0219                     	;# 
  2003  021A                     	;# 
  2004  021B                     	;# 
  2005  021C                     	;# 
  2006  021D                     	;# 
  2007  021E                     	;# 
  2008  021F                     	;# 
  2009  028C                     	;# 
  2010  028D                     	;# 
  2011  0291                     	;# 
  2012  0291                     	;# 
  2013  0292                     	;# 
  2014  0293                     	;# 
  2015  0298                     	;# 
  2016  0298                     	;# 
  2017  0299                     	;# 
  2018  029A                     	;# 
  2019  029D                     	;# 
  2020  029E                     	;# 
  2021  029F                     	;# 
  2022  030C                     	;# 
  2023  030D                     	;# 
  2024  0311                     	;# 
  2025  0311                     	;# 
  2026  0312                     	;# 
  2027  0313                     	;# 
  2028  0318                     	;# 
  2029  0318                     	;# 
  2030  0319                     	;# 
  2031  031A                     	;# 
  2032  031C                     	;# 
  2033  031C                     	;# 
  2034  031D                     	;# 
  2035  031E                     	;# 
  2036  038C                     	;# 
  2037  038D                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  040C                     	;# 
  2042  040D                     	;# 
  2043  0411                     	;# 
  2044  0411                     	;# 
  2045  0412                     	;# 
  2046  0413                     	;# 
  2047  0414                     	;# 
  2048  0415                     	;# 
  2049  0416                     	;# 
  2050  0417                     	;# 
  2051  0418                     	;# 
  2052  0418                     	;# 
  2053  0419                     	;# 
  2054  041A                     	;# 
  2055  041B                     	;# 
  2056  041C                     	;# 
  2057  041D                     	;# 
  2058  041E                     	;# 
  2059  048D                     	;# 
  2060  0491                     	;# 
  2061  0491                     	;# 
  2062  0492                     	;# 
  2063  0492                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0493                     	;# 
  2067  0494                     	;# 
  2068  0494                     	;# 
  2069  0495                     	;# 
  2070  0495                     	;# 
  2071  0496                     	;# 
  2072  0496                     	;# 
  2073  0497                     	;# 
  2074  0497                     	;# 
  2075  0595                     	;# 
  2076  0596                     	;# 
  2077  0597                     	;# 
  2078  059C                     	;# 
  2079  059D                     	;# 
  2080  059E                     	;# 
  2081  0611                     	;# 
  2082  0611                     	;# 
  2083  0612                     	;# 
  2084  0613                     	;# 
  2085  0614                     	;# 
  2086  0614                     	;# 
  2087  0615                     	;# 
  2088  0616                     	;# 
  2089  0617                     	;# 
  2090  0617                     	;# 
  2091  0618                     	;# 
  2092  0619                     	;# 
  2093  061A                     	;# 
  2094  061A                     	;# 
  2095  061B                     	;# 
  2096  061C                     	;# 
  2097  061D                     	;# 
  2098  061D                     	;# 
  2099  061E                     	;# 
  2100  061F                     	;# 
  2101  0FE4                     	;# 
  2102  0FE5                     	;# 
  2103  0FE6                     	;# 
  2104  0FE7                     	;# 
  2105  0FE8                     	;# 
  2106  0FE9                     	;# 
  2107  0FEA                     	;# 
  2108  0FEB                     	;# 
  2109  0FED                     	;# 
  2110  0FEE                     	;# 
  2111  0FEF                     	;# 
  2112  0000                     	;# 
  2113  0001                     	;# 
  2114  0002                     	;# 
  2115  0003                     	;# 
  2116  0004                     	;# 
  2117  0005                     	;# 
  2118  0006                     	;# 
  2119  0007                     	;# 
  2120  0008                     	;# 
  2121  0009                     	;# 
  2122  000A                     	;# 
  2123  000B                     	;# 
  2124  000C                     	;# 
  2125  000D                     	;# 
  2126  000E                     	;# 
  2127  000F                     	;# 
  2128  0010                     	;# 
  2129  0011                     	;# 
  2130  0012                     	;# 
  2131  0013                     	;# 
  2132  0014                     	;# 
  2133  0015                     	;# 
  2134  0016                     	;# 
  2135  0016                     	;# 
  2136  0017                     	;# 
  2137  0018                     	;# 
  2138  0019                     	;# 
  2139  001A                     	;# 
  2140  001B                     	;# 
  2141  001C                     	;# 
  2142  008C                     	;# 
  2143  008D                     	;# 
  2144  008E                     	;# 
  2145  008F                     	;# 
  2146  0090                     	;# 
  2147  0091                     	;# 
  2148  0092                     	;# 
  2149  0093                     	;# 
  2150  0094                     	;# 
  2151  0095                     	;# 
  2152  0096                     	;# 
  2153  0097                     	;# 
  2154  0099                     	;# 
  2155  009A                     	;# 
  2156  009B                     	;# 
  2157  009B                     	;# 
  2158  009C                     	;# 
  2159  009D                     	;# 
  2160  009E                     	;# 
  2161  010C                     	;# 
  2162  010D                     	;# 
  2163  010E                     	;# 
  2164  010F                     	;# 
  2165  0110                     	;# 
  2166  0116                     	;# 
  2167  0117                     	;# 
  2168  011D                     	;# 
  2169  018C                     	;# 
  2170  018D                     	;# 
  2171  018F                     	;# 
  2172  0190                     	;# 
  2173  0191                     	;# 
  2174  0191                     	;# 
  2175  0192                     	;# 
  2176  0193                     	;# 
  2177  0193                     	;# 
  2178  0194                     	;# 
  2179  0195                     	;# 
  2180  0196                     	;# 
  2181  0197                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  0199                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019A                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019C                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019D                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019E                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  019F                     	;# 
  2205  020D                     	;# 
  2206  020F                     	;# 
  2207  0210                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021E                     	;# 
  2229  021F                     	;# 
  2230  028C                     	;# 
  2231  028D                     	;# 
  2232  0291                     	;# 
  2233  0291                     	;# 
  2234  0292                     	;# 
  2235  0293                     	;# 
  2236  0298                     	;# 
  2237  0298                     	;# 
  2238  0299                     	;# 
  2239  029A                     	;# 
  2240  029D                     	;# 
  2241  029E                     	;# 
  2242  029F                     	;# 
  2243  030C                     	;# 
  2244  030D                     	;# 
  2245  0311                     	;# 
  2246  0311                     	;# 
  2247  0312                     	;# 
  2248  0313                     	;# 
  2249  0318                     	;# 
  2250  0318                     	;# 
  2251  0319                     	;# 
  2252  031A                     	;# 
  2253  031C                     	;# 
  2254  031C                     	;# 
  2255  031D                     	;# 
  2256  031E                     	;# 
  2257  038C                     	;# 
  2258  038D                     	;# 
  2259  0394                     	;# 
  2260  0395                     	;# 
  2261  0396                     	;# 
  2262  040C                     	;# 
  2263  040D                     	;# 
  2264  0411                     	;# 
  2265  0411                     	;# 
  2266  0412                     	;# 
  2267  0413                     	;# 
  2268  0414                     	;# 
  2269  0415                     	;# 
  2270  0416                     	;# 
  2271  0417                     	;# 
  2272  0418                     	;# 
  2273  0418                     	;# 
  2274  0419                     	;# 
  2275  041A                     	;# 
  2276  041B                     	;# 
  2277  041C                     	;# 
  2278  041D                     	;# 
  2279  041E                     	;# 
  2280  048D                     	;# 
  2281  0491                     	;# 
  2282  0491                     	;# 
  2283  0492                     	;# 
  2284  0492                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0493                     	;# 
  2288  0494                     	;# 
  2289  0494                     	;# 
  2290  0495                     	;# 
  2291  0495                     	;# 
  2292  0496                     	;# 
  2293  0496                     	;# 
  2294  0497                     	;# 
  2295  0497                     	;# 
  2296  0595                     	;# 
  2297  0596                     	;# 
  2298  0597                     	;# 
  2299  059C                     	;# 
  2300  059D                     	;# 
  2301  059E                     	;# 
  2302  0611                     	;# 
  2303  0611                     	;# 
  2304  0612                     	;# 
  2305  0613                     	;# 
  2306  0614                     	;# 
  2307  0614                     	;# 
  2308  0615                     	;# 
  2309  0616                     	;# 
  2310  0617                     	;# 
  2311  0617                     	;# 
  2312  0618                     	;# 
  2313  0619                     	;# 
  2314  061A                     	;# 
  2315  061A                     	;# 
  2316  061B                     	;# 
  2317  061C                     	;# 
  2318  061D                     	;# 
  2319  061D                     	;# 
  2320  061E                     	;# 
  2321  061F                     	;# 
  2322  0FE4                     	;# 
  2323  0FE5                     	;# 
  2324  0FE6                     	;# 
  2325  0FE7                     	;# 
  2326  0FE8                     	;# 
  2327  0FE9                     	;# 
  2328  0FEA                     	;# 
  2329  0FEB                     	;# 
  2330  0FED                     	;# 
  2331  0FEE                     	;# 
  2332  0FEF                     	;# 
  2333  0000                     	;# 
  2334  0001                     	;# 
  2335  0002                     	;# 
  2336  0003                     	;# 
  2337  0004                     	;# 
  2338  0005                     	;# 
  2339  0006                     	;# 
  2340  0007                     	;# 
  2341  0008                     	;# 
  2342  0009                     	;# 
  2343  000A                     	;# 
  2344  000B                     	;# 
  2345  000C                     	;# 
  2346  000D                     	;# 
  2347  000E                     	;# 
  2348  000F                     	;# 
  2349  0010                     	;# 
  2350  0011                     	;# 
  2351  0012                     	;# 
  2352  0013                     	;# 
  2353  0014                     	;# 
  2354  0015                     	;# 
  2355  0016                     	;# 
  2356  0016                     	;# 
  2357  0017                     	;# 
  2358  0018                     	;# 
  2359  0019                     	;# 
  2360  001A                     	;# 
  2361  001B                     	;# 
  2362  001C                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  008F                     	;# 
  2367  0090                     	;# 
  2368  0091                     	;# 
  2369  0092                     	;# 
  2370  0093                     	;# 
  2371  0094                     	;# 
  2372  0095                     	;# 
  2373  0096                     	;# 
  2374  0097                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009B                     	;# 
  2379  009C                     	;# 
  2380  009D                     	;# 
  2381  009E                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  010F                     	;# 
  2386  0110                     	;# 
  2387  0116                     	;# 
  2388  0117                     	;# 
  2389  011D                     	;# 
  2390  018C                     	;# 
  2391  018D                     	;# 
  2392  018F                     	;# 
  2393  0190                     	;# 
  2394  0191                     	;# 
  2395  0191                     	;# 
  2396  0192                     	;# 
  2397  0193                     	;# 
  2398  0193                     	;# 
  2399  0194                     	;# 
  2400  0195                     	;# 
  2401  0196                     	;# 
  2402  0197                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  0199                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019A                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019C                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019D                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019E                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  019F                     	;# 
  2426  020D                     	;# 
  2427  020F                     	;# 
  2428  0210                     	;# 
  2429  0211                     	;# 
  2430  0211                     	;# 
  2431  0212                     	;# 
  2432  0212                     	;# 
  2433  0213                     	;# 
  2434  0213                     	;# 
  2435  0214                     	;# 
  2436  0214                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0215                     	;# 
  2440  0216                     	;# 
  2441  0216                     	;# 
  2442  0217                     	;# 
  2443  0217                     	;# 
  2444  0219                     	;# 
  2445  021A                     	;# 
  2446  021B                     	;# 
  2447  021C                     	;# 
  2448  021D                     	;# 
  2449  021E                     	;# 
  2450  021F                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  0291                     	;# 
  2454  0291                     	;# 
  2455  0292                     	;# 
  2456  0293                     	;# 
  2457  0298                     	;# 
  2458  0298                     	;# 
  2459  0299                     	;# 
  2460  029A                     	;# 
  2461  029D                     	;# 
  2462  029E                     	;# 
  2463  029F                     	;# 
  2464  030C                     	;# 
  2465  030D                     	;# 
  2466  0311                     	;# 
  2467  0311                     	;# 
  2468  0312                     	;# 
  2469  0313                     	;# 
  2470  0318                     	;# 
  2471  0318                     	;# 
  2472  0319                     	;# 
  2473  031A                     	;# 
  2474  031C                     	;# 
  2475  031C                     	;# 
  2476  031D                     	;# 
  2477  031E                     	;# 
  2478  038C                     	;# 
  2479  038D                     	;# 
  2480  0394                     	;# 
  2481  0395                     	;# 
  2482  0396                     	;# 
  2483  040C                     	;# 
  2484  040D                     	;# 
  2485  0411                     	;# 
  2486  0411                     	;# 
  2487  0412                     	;# 
  2488  0413                     	;# 
  2489  0414                     	;# 
  2490  0415                     	;# 
  2491  0416                     	;# 
  2492  0417                     	;# 
  2493  0418                     	;# 
  2494  0418                     	;# 
  2495  0419                     	;# 
  2496  041A                     	;# 
  2497  041B                     	;# 
  2498  041C                     	;# 
  2499  041D                     	;# 
  2500  041E                     	;# 
  2501  048D                     	;# 
  2502  0491                     	;# 
  2503  0491                     	;# 
  2504  0492                     	;# 
  2505  0492                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0493                     	;# 
  2509  0494                     	;# 
  2510  0494                     	;# 
  2511  0495                     	;# 
  2512  0495                     	;# 
  2513  0496                     	;# 
  2514  0496                     	;# 
  2515  0497                     	;# 
  2516  0497                     	;# 
  2517  0595                     	;# 
  2518  0596                     	;# 
  2519  0597                     	;# 
  2520  059C                     	;# 
  2521  059D                     	;# 
  2522  059E                     	;# 
  2523  0611                     	;# 
  2524  0611                     	;# 
  2525  0612                     	;# 
  2526  0613                     	;# 
  2527  0614                     	;# 
  2528  0614                     	;# 
  2529  0615                     	;# 
  2530  0616                     	;# 
  2531  0617                     	;# 
  2532  0617                     	;# 
  2533  0618                     	;# 
  2534  0619                     	;# 
  2535  061A                     	;# 
  2536  061A                     	;# 
  2537  061B                     	;# 
  2538  061C                     	;# 
  2539  061D                     	;# 
  2540  061D                     	;# 
  2541  061E                     	;# 
  2542  061F                     	;# 
  2543  0FE4                     	;# 
  2544  0FE5                     	;# 
  2545  0FE6                     	;# 
  2546  0FE7                     	;# 
  2547  0FE8                     	;# 
  2548  0FE9                     	;# 
  2549  0FEA                     	;# 
  2550  0FEB                     	;# 
  2551  0FED                     	;# 
  2552  0FEE                     	;# 
  2553  0FEF                     	;# 
  2554  0000                     	;# 
  2555  0001                     	;# 
  2556  0002                     	;# 
  2557  0003                     	;# 
  2558  0004                     	;# 
  2559  0005                     	;# 
  2560  0006                     	;# 
  2561  0007                     	;# 
  2562  0008                     	;# 
  2563  0009                     	;# 
  2564  000A                     	;# 
  2565  000B                     	;# 
  2566  000C                     	;# 
  2567  000D                     	;# 
  2568  000E                     	;# 
  2569  000F                     	;# 
  2570  0010                     	;# 
  2571  0011                     	;# 
  2572  0012                     	;# 
  2573  0013                     	;# 
  2574  0014                     	;# 
  2575  0015                     	;# 
  2576  0016                     	;# 
  2577  0016                     	;# 
  2578  0017                     	;# 
  2579  0018                     	;# 
  2580  0019                     	;# 
  2581  001A                     	;# 
  2582  001B                     	;# 
  2583  001C                     	;# 
  2584  008C                     	;# 
  2585  008D                     	;# 
  2586  008E                     	;# 
  2587  008F                     	;# 
  2588  0090                     	;# 
  2589  0091                     	;# 
  2590  0092                     	;# 
  2591  0093                     	;# 
  2592  0094                     	;# 
  2593  0095                     	;# 
  2594  0096                     	;# 
  2595  0097                     	;# 
  2596  0099                     	;# 
  2597  009A                     	;# 
  2598  009B                     	;# 
  2599  009B                     	;# 
  2600  009C                     	;# 
  2601  009D                     	;# 
  2602  009E                     	;# 
  2603  010C                     	;# 
  2604  010D                     	;# 
  2605  010E                     	;# 
  2606  010F                     	;# 
  2607  0110                     	;# 
  2608  0116                     	;# 
  2609  0117                     	;# 
  2610  011D                     	;# 
  2611  018C                     	;# 
  2612  018D                     	;# 
  2613  018F                     	;# 
  2614  0190                     	;# 
  2615  0191                     	;# 
  2616  0191                     	;# 
  2617  0192                     	;# 
  2618  0193                     	;# 
  2619  0193                     	;# 
  2620  0194                     	;# 
  2621  0195                     	;# 
  2622  0196                     	;# 
  2623  0197                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  0199                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019A                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019B                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019C                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019D                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019E                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  019F                     	;# 
  2647  020D                     	;# 
  2648  020F                     	;# 
  2649  0210                     	;# 
  2650  0211                     	;# 
  2651  0211                     	;# 
  2652  0212                     	;# 
  2653  0212                     	;# 
  2654  0213                     	;# 
  2655  0213                     	;# 
  2656  0214                     	;# 
  2657  0214                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0215                     	;# 
  2661  0216                     	;# 
  2662  0216                     	;# 
  2663  0217                     	;# 
  2664  0217                     	;# 
  2665  0219                     	;# 
  2666  021A                     	;# 
  2667  021B                     	;# 
  2668  021C                     	;# 
  2669  021D                     	;# 
  2670  021E                     	;# 
  2671  021F                     	;# 
  2672  028C                     	;# 
  2673  028D                     	;# 
  2674  0291                     	;# 
  2675  0291                     	;# 
  2676  0292                     	;# 
  2677  0293                     	;# 
  2678  0298                     	;# 
  2679  0298                     	;# 
  2680  0299                     	;# 
  2681  029A                     	;# 
  2682  029D                     	;# 
  2683  029E                     	;# 
  2684  029F                     	;# 
  2685  030C                     	;# 
  2686  030D                     	;# 
  2687  0311                     	;# 
  2688  0311                     	;# 
  2689  0312                     	;# 
  2690  0313                     	;# 
  2691  0318                     	;# 
  2692  0318                     	;# 
  2693  0319                     	;# 
  2694  031A                     	;# 
  2695  031C                     	;# 
  2696  031C                     	;# 
  2697  031D                     	;# 
  2698  031E                     	;# 
  2699  038C                     	;# 
  2700  038D                     	;# 
  2701  0394                     	;# 
  2702  0395                     	;# 
  2703  0396                     	;# 
  2704  040C                     	;# 
  2705  040D                     	;# 
  2706  0411                     	;# 
  2707  0411                     	;# 
  2708  0412                     	;# 
  2709  0413                     	;# 
  2710  0414                     	;# 
  2711  0415                     	;# 
  2712  0416                     	;# 
  2713  0417                     	;# 
  2714  0418                     	;# 
  2715  0418                     	;# 
  2716  0419                     	;# 
  2717  041A                     	;# 
  2718  041B                     	;# 
  2719  041C                     	;# 
  2720  041D                     	;# 
  2721  041E                     	;# 
  2722  048D                     	;# 
  2723  0491                     	;# 
  2724  0491                     	;# 
  2725  0492                     	;# 
  2726  0492                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0493                     	;# 
  2730  0494                     	;# 
  2731  0494                     	;# 
  2732  0495                     	;# 
  2733  0495                     	;# 
  2734  0496                     	;# 
  2735  0496                     	;# 
  2736  0497                     	;# 
  2737  0497                     	;# 
  2738  0595                     	;# 
  2739  0596                     	;# 
  2740  0597                     	;# 
  2741  059C                     	;# 
  2742  059D                     	;# 
  2743  059E                     	;# 
  2744  0611                     	;# 
  2745  0611                     	;# 
  2746  0612                     	;# 
  2747  0613                     	;# 
  2748  0614                     	;# 
  2749  0614                     	;# 
  2750  0615                     	;# 
  2751  0616                     	;# 
  2752  0617                     	;# 
  2753  0617                     	;# 
  2754  0618                     	;# 
  2755  0619                     	;# 
  2756  061A                     	;# 
  2757  061A                     	;# 
  2758  061B                     	;# 
  2759  061C                     	;# 
  2760  061D                     	;# 
  2761  061D                     	;# 
  2762  061E                     	;# 
  2763  061F                     	;# 
  2764  0FE4                     	;# 
  2765  0FE5                     	;# 
  2766  0FE6                     	;# 
  2767  0FE7                     	;# 
  2768  0FE8                     	;# 
  2769  0FE9                     	;# 
  2770  0FEA                     	;# 
  2771  0FEB                     	;# 
  2772  0FED                     	;# 
  2773  0FEE                     	;# 
  2774  0FEF                     	;# 
  2775  0000                     	;# 
  2776  0001                     	;# 
  2777  0002                     	;# 
  2778  0003                     	;# 
  2779  0004                     	;# 
  2780  0005                     	;# 
  2781  0006                     	;# 
  2782  0007                     	;# 
  2783  0008                     	;# 
  2784  0009                     	;# 
  2785  000A                     	;# 
  2786  000B                     	;# 
  2787  000C                     	;# 
  2788  000D                     	;# 
  2789  000E                     	;# 
  2790  000F                     	;# 
  2791  0010                     	;# 
  2792  0011                     	;# 
  2793  0012                     	;# 
  2794  0013                     	;# 
  2795  0014                     	;# 
  2796  0015                     	;# 
  2797  0016                     	;# 
  2798  0016                     	;# 
  2799  0017                     	;# 
  2800  0018                     	;# 
  2801  0019                     	;# 
  2802  001A                     	;# 
  2803  001B                     	;# 
  2804  001C                     	;# 
  2805  008C                     	;# 
  2806  008D                     	;# 
  2807  008E                     	;# 
  2808  008F                     	;# 
  2809  0090                     	;# 
  2810  0091                     	;# 
  2811  0092                     	;# 
  2812  0093                     	;# 
  2813  0094                     	;# 
  2814  0095                     	;# 
  2815  0096                     	;# 
  2816  0097                     	;# 
  2817  0099                     	;# 
  2818  009A                     	;# 
  2819  009B                     	;# 
  2820  009B                     	;# 
  2821  009C                     	;# 
  2822  009D                     	;# 
  2823  009E                     	;# 
  2824  010C                     	;# 
  2825  010D                     	;# 
  2826  010E                     	;# 
  2827  010F                     	;# 
  2828  0110                     	;# 
  2829  0116                     	;# 
  2830  0117                     	;# 
  2831  011D                     	;# 
  2832  018C                     	;# 
  2833  018D                     	;# 
  2834  018F                     	;# 
  2835  0190                     	;# 
  2836  0191                     	;# 
  2837  0191                     	;# 
  2838  0192                     	;# 
  2839  0193                     	;# 
  2840  0193                     	;# 
  2841  0194                     	;# 
  2842  0195                     	;# 
  2843  0196                     	;# 
  2844  0197                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  0199                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019A                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019C                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019D                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019E                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  019F                     	;# 
  2868  020D                     	;# 
  2869  020F                     	;# 
  2870  0210                     	;# 
  2871  0211                     	;# 
  2872  0211                     	;# 
  2873  0212                     	;# 
  2874  0212                     	;# 
  2875  0213                     	;# 
  2876  0213                     	;# 
  2877  0214                     	;# 
  2878  0214                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0215                     	;# 
  2882  0216                     	;# 
  2883  0216                     	;# 
  2884  0217                     	;# 
  2885  0217                     	;# 
  2886  0219                     	;# 
  2887  021A                     	;# 
  2888  021B                     	;# 
  2889  021C                     	;# 
  2890  021D                     	;# 
  2891  021E                     	;# 
  2892  021F                     	;# 
  2893  028C                     	;# 
  2894  028D                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029D                     	;# 
  2904  029E                     	;# 
  2905  029F                     	;# 
  2906  030C                     	;# 
  2907  030D                     	;# 
  2908  0311                     	;# 
  2909  0311                     	;# 
  2910  0312                     	;# 
  2911  0313                     	;# 
  2912  0318                     	;# 
  2913  0318                     	;# 
  2914  0319                     	;# 
  2915  031A                     	;# 
  2916  031C                     	;# 
  2917  031C                     	;# 
  2918  031D                     	;# 
  2919  031E                     	;# 
  2920  038C                     	;# 
  2921  038D                     	;# 
  2922  0394                     	;# 
  2923  0395                     	;# 
  2924  0396                     	;# 
  2925  040C                     	;# 
  2926  040D                     	;# 
  2927  0411                     	;# 
  2928  0411                     	;# 
  2929  0412                     	;# 
  2930  0413                     	;# 
  2931  0414                     	;# 
  2932  0415                     	;# 
  2933  0416                     	;# 
  2934  0417                     	;# 
  2935  0418                     	;# 
  2936  0418                     	;# 
  2937  0419                     	;# 
  2938  041A                     	;# 
  2939  041B                     	;# 
  2940  041C                     	;# 
  2941  041D                     	;# 
  2942  041E                     	;# 
  2943  048D                     	;# 
  2944  0491                     	;# 
  2945  0491                     	;# 
  2946  0492                     	;# 
  2947  0492                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0493                     	;# 
  2951  0494                     	;# 
  2952  0494                     	;# 
  2953  0495                     	;# 
  2954  0495                     	;# 
  2955  0496                     	;# 
  2956  0496                     	;# 
  2957  0497                     	;# 
  2958  0497                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0597                     	;# 
  2962  059C                     	;# 
  2963  059D                     	;# 
  2964  059E                     	;# 
  2965  0611                     	;# 
  2966  0611                     	;# 
  2967  0612                     	;# 
  2968  0613                     	;# 
  2969  0614                     	;# 
  2970  0614                     	;# 
  2971  0615                     	;# 
  2972  0616                     	;# 
  2973  0617                     	;# 
  2974  0617                     	;# 
  2975  0618                     	;# 
  2976  0619                     	;# 
  2977  061A                     	;# 
  2978  061A                     	;# 
  2979  061B                     	;# 
  2980  061C                     	;# 
  2981  061D                     	;# 
  2982  061D                     	;# 
  2983  061E                     	;# 
  2984  061F                     	;# 
  2985  0FE4                     	;# 
  2986  0FE5                     	;# 
  2987  0FE6                     	;# 
  2988  0FE7                     	;# 
  2989  0FE8                     	;# 
  2990  0FE9                     	;# 
  2991  0FEA                     	;# 
  2992  0FEB                     	;# 
  2993  0FED                     	;# 
  2994  0FEE                     	;# 
  2995  0FEF                     	;# 
  2996  0000                     	;# 
  2997  0001                     	;# 
  2998  0002                     	;# 
  2999  0003                     	;# 
  3000  0004                     	;# 
  3001  0005                     	;# 
  3002  0006                     	;# 
  3003  0007                     	;# 
  3004  0008                     	;# 
  3005  0009                     	;# 
  3006  000A                     	;# 
  3007  000B                     	;# 
  3008  000C                     	;# 
  3009  000D                     	;# 
  3010  000E                     	;# 
  3011  000F                     	;# 
  3012  0010                     	;# 
  3013  0011                     	;# 
  3014  0012                     	;# 
  3015  0013                     	;# 
  3016  0014                     	;# 
  3017  0015                     	;# 
  3018  0016                     	;# 
  3019  0016                     	;# 
  3020  0017                     	;# 
  3021  0018                     	;# 
  3022  0019                     	;# 
  3023  001A                     	;# 
  3024  001B                     	;# 
  3025  001C                     	;# 
  3026  008C                     	;# 
  3027  008D                     	;# 
  3028  008E                     	;# 
  3029  008F                     	;# 
  3030  0090                     	;# 
  3031  0091                     	;# 
  3032  0092                     	;# 
  3033  0093                     	;# 
  3034  0094                     	;# 
  3035  0095                     	;# 
  3036  0096                     	;# 
  3037  0097                     	;# 
  3038  0099                     	;# 
  3039  009A                     	;# 
  3040  009B                     	;# 
  3041  009B                     	;# 
  3042  009C                     	;# 
  3043  009D                     	;# 
  3044  009E                     	;# 
  3045  010C                     	;# 
  3046  010D                     	;# 
  3047  010E                     	;# 
  3048  010F                     	;# 
  3049  0110                     	;# 
  3050  0116                     	;# 
  3051  0117                     	;# 
  3052  011D                     	;# 
  3053  018C                     	;# 
  3054  018D                     	;# 
  3055  018F                     	;# 
  3056  0190                     	;# 
  3057  0191                     	;# 
  3058  0191                     	;# 
  3059  0192                     	;# 
  3060  0193                     	;# 
  3061  0193                     	;# 
  3062  0194                     	;# 
  3063  0195                     	;# 
  3064  0196                     	;# 
  3065  0197                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  0199                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019A                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019C                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019D                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019E                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  019F                     	;# 
  3089  020D                     	;# 
  3090  020F                     	;# 
  3091  0210                     	;# 
  3092  0211                     	;# 
  3093  0211                     	;# 
  3094  0212                     	;# 
  3095  0212                     	;# 
  3096  0213                     	;# 
  3097  0213                     	;# 
  3098  0214                     	;# 
  3099  0214                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0215                     	;# 
  3103  0216                     	;# 
  3104  0216                     	;# 
  3105  0217                     	;# 
  3106  0217                     	;# 
  3107  0219                     	;# 
  3108  021A                     	;# 
  3109  021B                     	;# 
  3110  021C                     	;# 
  3111  021D                     	;# 
  3112  021E                     	;# 
  3113  021F                     	;# 
  3114  028C                     	;# 
  3115  028D                     	;# 
  3116  0291                     	;# 
  3117  0291                     	;# 
  3118  0292                     	;# 
  3119  0293                     	;# 
  3120  0298                     	;# 
  3121  0298                     	;# 
  3122  0299                     	;# 
  3123  029A                     	;# 
  3124  029D                     	;# 
  3125  029E                     	;# 
  3126  029F                     	;# 
  3127  030C                     	;# 
  3128  030D                     	;# 
  3129  0311                     	;# 
  3130  0311                     	;# 
  3131  0312                     	;# 
  3132  0313                     	;# 
  3133  0318                     	;# 
  3134  0318                     	;# 
  3135  0319                     	;# 
  3136  031A                     	;# 
  3137  031C                     	;# 
  3138  031C                     	;# 
  3139  031D                     	;# 
  3140  031E                     	;# 
  3141  038C                     	;# 
  3142  038D                     	;# 
  3143  0394                     	;# 
  3144  0395                     	;# 
  3145  0396                     	;# 
  3146  040C                     	;# 
  3147  040D                     	;# 
  3148  0411                     	;# 
  3149  0411                     	;# 
  3150  0412                     	;# 
  3151  0413                     	;# 
  3152  0414                     	;# 
  3153  0415                     	;# 
  3154  0416                     	;# 
  3155  0417                     	;# 
  3156  0418                     	;# 
  3157  0418                     	;# 
  3158  0419                     	;# 
  3159  041A                     	;# 
  3160  041B                     	;# 
  3161  041C                     	;# 
  3162  041D                     	;# 
  3163  041E                     	;# 
  3164  048D                     	;# 
  3165  0491                     	;# 
  3166  0491                     	;# 
  3167  0492                     	;# 
  3168  0492                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0493                     	;# 
  3172  0494                     	;# 
  3173  0494                     	;# 
  3174  0495                     	;# 
  3175  0495                     	;# 
  3176  0496                     	;# 
  3177  0496                     	;# 
  3178  0497                     	;# 
  3179  0497                     	;# 
  3180  0595                     	;# 
  3181  0596                     	;# 
  3182  0597                     	;# 
  3183  059C                     	;# 
  3184  059D                     	;# 
  3185  059E                     	;# 
  3186  0611                     	;# 
  3187  0611                     	;# 
  3188  0612                     	;# 
  3189  0613                     	;# 
  3190  0614                     	;# 
  3191  0614                     	;# 
  3192  0615                     	;# 
  3193  0616                     	;# 
  3194  0617                     	;# 
  3195  0617                     	;# 
  3196  0618                     	;# 
  3197  0619                     	;# 
  3198  061A                     	;# 
  3199  061A                     	;# 
  3200  061B                     	;# 
  3201  061C                     	;# 
  3202  061D                     	;# 
  3203  061D                     	;# 
  3204  061E                     	;# 
  3205  061F                     	;# 
  3206  0FE4                     	;# 
  3207  0FE5                     	;# 
  3208  0FE6                     	;# 
  3209  0FE7                     	;# 
  3210  0FE8                     	;# 
  3211  0FE9                     	;# 
  3212  0FEA                     	;# 
  3213  0FEB                     	;# 
  3214  0FED                     	;# 
  3215  0FEE                     	;# 
  3216  0FEF                     	;# 
  3217  0000                     	;# 
  3218  0001                     	;# 
  3219  0002                     	;# 
  3220  0003                     	;# 
  3221  0004                     	;# 
  3222  0005                     	;# 
  3223  0006                     	;# 
  3224  0007                     	;# 
  3225  0008                     	;# 
  3226  0009                     	;# 
  3227  000A                     	;# 
  3228  000B                     	;# 
  3229  000C                     	;# 
  3230  000D                     	;# 
  3231  000E                     	;# 
  3232  000F                     	;# 
  3233  0010                     	;# 
  3234  0011                     	;# 
  3235  0012                     	;# 
  3236  0013                     	;# 
  3237  0014                     	;# 
  3238  0015                     	;# 
  3239  0016                     	;# 
  3240  0016                     	;# 
  3241  0017                     	;# 
  3242  0018                     	;# 
  3243  0019                     	;# 
  3244  001A                     	;# 
  3245  001B                     	;# 
  3246  001C                     	;# 
  3247  008C                     	;# 
  3248  008D                     	;# 
  3249  008E                     	;# 
  3250  008F                     	;# 
  3251  0090                     	;# 
  3252  0091                     	;# 
  3253  0092                     	;# 
  3254  0093                     	;# 
  3255  0094                     	;# 
  3256  0095                     	;# 
  3257  0096                     	;# 
  3258  0097                     	;# 
  3259  0099                     	;# 
  3260  009A                     	;# 
  3261  009B                     	;# 
  3262  009B                     	;# 
  3263  009C                     	;# 
  3264  009D                     	;# 
  3265  009E                     	;# 
  3266  010C                     	;# 
  3267  010D                     	;# 
  3268  010E                     	;# 
  3269  010F                     	;# 
  3270  0110                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  011D                     	;# 
  3274  018C                     	;# 
  3275  018D                     	;# 
  3276  018F                     	;# 
  3277  0190                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  020D                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0211                     	;# 
  3314  0211                     	;# 
  3315  0212                     	;# 
  3316  0212                     	;# 
  3317  0213                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0214                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021C                     	;# 
  3332  021D                     	;# 
  3333  021E                     	;# 
  3334  021F                     	;# 
  3335  028C                     	;# 
  3336  028D                     	;# 
  3337  0291                     	;# 
  3338  0291                     	;# 
  3339  0292                     	;# 
  3340  0293                     	;# 
  3341  0298                     	;# 
  3342  0298                     	;# 
  3343  0299                     	;# 
  3344  029A                     	;# 
  3345  029D                     	;# 
  3346  029E                     	;# 
  3347  029F                     	;# 
  3348  030C                     	;# 
  3349  030D                     	;# 
  3350  0311                     	;# 
  3351  0311                     	;# 
  3352  0312                     	;# 
  3353  0313                     	;# 
  3354  0318                     	;# 
  3355  0318                     	;# 
  3356  0319                     	;# 
  3357  031A                     	;# 
  3358  031C                     	;# 
  3359  031C                     	;# 
  3360  031D                     	;# 
  3361  031E                     	;# 
  3362  038C                     	;# 
  3363  038D                     	;# 
  3364  0394                     	;# 
  3365  0395                     	;# 
  3366  0396                     	;# 
  3367  040C                     	;# 
  3368  040D                     	;# 
  3369  0411                     	;# 
  3370  0411                     	;# 
  3371  0412                     	;# 
  3372  0413                     	;# 
  3373  0414                     	;# 
  3374  0415                     	;# 
  3375  0416                     	;# 
  3376  0417                     	;# 
  3377  0418                     	;# 
  3378  0418                     	;# 
  3379  0419                     	;# 
  3380  041A                     	;# 
  3381  041B                     	;# 
  3382  041C                     	;# 
  3383  041D                     	;# 
  3384  041E                     	;# 
  3385  048D                     	;# 
  3386  0491                     	;# 
  3387  0491                     	;# 
  3388  0492                     	;# 
  3389  0492                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0493                     	;# 
  3393  0494                     	;# 
  3394  0494                     	;# 
  3395  0495                     	;# 
  3396  0495                     	;# 
  3397  0496                     	;# 
  3398  0496                     	;# 
  3399  0497                     	;# 
  3400  0497                     	;# 
  3401  0595                     	;# 
  3402  0596                     	;# 
  3403  0597                     	;# 
  3404  059C                     	;# 
  3405  059D                     	;# 
  3406  059E                     	;# 
  3407  0611                     	;# 
  3408  0611                     	;# 
  3409  0612                     	;# 
  3410  0613                     	;# 
  3411  0614                     	;# 
  3412  0614                     	;# 
  3413  0615                     	;# 
  3414  0616                     	;# 
  3415  0617                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061A                     	;# 
  3421  061B                     	;# 
  3422  061C                     	;# 
  3423  061D                     	;# 
  3424  061D                     	;# 
  3425  061E                     	;# 
  3426  061F                     	;# 
  3427  0FE4                     	;# 
  3428  0FE5                     	;# 
  3429  0FE6                     	;# 
  3430  0FE7                     	;# 
  3431  0FE8                     	;# 
  3432  0FE9                     	;# 
  3433  0FEA                     	;# 
  3434  0FEB                     	;# 
  3435  0FED                     	;# 
  3436  0FEE                     	;# 
  3437  0FEF                     	;_modArray
  3438                           
  3439                           	psect	idataBANK0
  3440  2D26                     __pidataBANK0:	
  3441                           
  3442                           ;initializer for _baseline_mod_time
  3443  2D26  34D0               	retlw	208
  3444  2D27  3407               	retlw	7
  3445  2D28  3400               	retlw	0
  3446  2D29  3400               	retlw	0
  3447                           
  3448                           ;initializer for _delay_time
  3449  2D2A  34D0               	retlw	208
  3450  2D2B  3407               	retlw	7
  3451  2D2C  3400               	retlw	0
  3452  2D2D  3400               	retlw	0
  3453                           
  3454                           ;initializer for _bottom_push_state
  3455  2D2E  3401               	retlw	1
  3456  2D2F  3400               	retlw	0
  3457                           
  3458                           ;initializer for _long_press_limit
  3459  2D30  34E8               	retlw	232
  3460  2D31  3403               	retlw	3
  3461                           
  3462                           ;initializer for _top_push_state
  3463  2D32  3406               	retlw	6
  3464  2D33  3400               	retlw	0
  3465                           
  3466                           ;initializer for _blink_rate
  3467  2D34  3414               	retlw	20
  3468                           
  3469                           ;initializer for _longTap_state
  3470  2D35  34FF               	retlw	255
  3471                           
  3472                           ;initializer for _num_taps
  3473  2D36  3404               	retlw	4
  3474                           
  3475                           ;initializer for _switchBypass_state
  3476  2D37  34FF               	retlw	255
  3477                           
  3478                           	psect	idataBANK2
  3479  0003                     __pidataBANK2:	
  3480                           
  3481                           ;initializer for _presetChannel
  3482  0003  3401               	retlw	1
  3483                           
  3484                           	psect	idataBANK3
  3485  2DAB                     __pidataBANK3:	
  3486                           
  3487                           ;initializer for _knob1_prev
  3488  2DAB  34D0               	retlw	208
  3489  2DAC  3407               	retlw	7
  3490                           
  3491                           ;initializer for _knob2_prev
  3492  2DAD  34D0               	retlw	208
  3493  2DAE  3407               	retlw	7
  3494                           
  3495                           ;initializer for _knob3_prev
  3496  2DAF  34D0               	retlw	208
  3497  2DB0  3407               	retlw	7
  3498                           
  3499                           ;initializer for _knob4_prev
  3500  2DB1  34D0               	retlw	208
  3501  2DB2  3407               	retlw	7
  3502                           
  3503                           ;initializer for _knob5_prev
  3504  2DB3  34D0               	retlw	208
  3505  2DB4  3407               	retlw	7
  3506                           
  3507                           ;initializer for _mod_counter
  3508  2DB5  3401               	retlw	1
  3509  2DB6  3400               	retlw	0
  3510                           
  3511                           ;initializer for _mod_delay_time
  3512  2DB7  34D0               	retlw	208
  3513  2DB8  3407               	retlw	7
  3514                           
  3515                           ;initializer for _symmetry
  3516  2DB9  34B4               	retlw	180
  3517  2DBA  3400               	retlw	0
  3518                           
  3519                           ;initializer for _tap_iteration
  3520  2DBB  3401               	retlw	1
  3521  2DBC  3400               	retlw	0
  3522                           
  3523                           ;initializer for _blink_state
  3524  2DBD  3401               	retlw	1
  3525                           
  3526                           ;initializer for _currentBypassState
  3527  2DBE  34FF               	retlw	255
  3528                           
  3529                           ;initializer for _expSwitchState
  3530  2DBF  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expressModeCnst
  3533  2DC0  3402               	retlw	2
  3534                           
  3535                           ;initializer for _expressionChannel
  3536  2DC1  3401               	retlw	1
  3537                           
  3538                           ;initializer for _mod_time_changed
  3539  2DC2  3401               	retlw	1
  3540                           
  3541                           ;initializer for _presetModeCnst
  3542  2DC3  3401               	retlw	1
  3543                           
  3544                           ;initializer for _switchTap_state
  3545  2DC4  34FF               	retlw	255
  3546                           
  3547                           	psect	idataBANK4
  3548  2001                     __pidataBANK4:	
  3549                           
  3550                           ;initializer for _blink_delay
  3551  2001  3464               	retlw	100
  3552  2002  3400               	retlw	0
  3553                           
  3554                           ;initializer for _switchBypass_up
  3555  2003  3401               	retlw	1
  3556  2004  3400               	retlw	0
  3557                           
  3558                           	psect	stringtext
  3559  2800                     __pstringtext:	
  3560  2800                     exp@coeff:	
  3561  2800  3400               	retlw	0
  3562  2801  3480               	retlw	128
  3563  2802  343F               	retlw	63
  3564  2803  3472               	retlw	114
  3565  2804  3431               	retlw	49
  3566  2805  343F               	retlw	63
  3567  2806  34FE               	retlw	254
  3568  2807  3475               	retlw	117
  3569  2808  343E               	retlw	62
  3570  2809  3458               	retlw	88
  3571  280A  3463               	retlw	99
  3572  280B  343D               	retlw	61
  3573  280C  3495               	retlw	149
  3574  280D  341D               	retlw	29
  3575  280E  343C               	retlw	60
  3576  280F  34C5               	retlw	197
  3577  2810  34AE               	retlw	174
  3578  2811  343A               	retlw	58
  3579  2812  3479               	retlw	121
  3580  2813  3421               	retlw	33
  3581  2814  3439               	retlw	57
  3582  2815  3494               	retlw	148
  3583  2816  3480               	retlw	128
  3584  2817  3437               	retlw	55
  3585  2818  3493               	retlw	147
  3586  2819  34A7               	retlw	167
  3587  281A  3435               	retlw	53
  3588  281B  3456               	retlw	86
  3589  281C  3415               	retlw	21
  3590  281D  3434               	retlw	52
  3591  281E                     __end_ofexp@coeff:	
  3592  281E                     log@coeff:	
  3593  281E  3400               	retlw	0
  3594  281F  3400               	retlw	0
  3595  2820  3400               	retlw	0
  3596  2821  3400               	retlw	0
  3597  2822  3480               	retlw	128
  3598  2823  343F               	retlw	63
  3599  2824  34F0               	retlw	240
  3600  2825  34FF               	retlw	255
  3601  2826  34BE               	retlw	190
  3602  2827  34E2               	retlw	226
  3603  2828  34A9               	retlw	169
  3604  2829  343E               	retlw	62
  3605  282A  3483               	retlw	131
  3606  282B  3476               	retlw	118
  3607  282C  34BE               	retlw	190
  3608  282D  34AE               	retlw	174
  3609  282E  342B               	retlw	43
  3610  282F  343E               	retlw	62
  3611  2830  343C               	retlw	60
  3612  2831  34C3               	retlw	195
  3613  2832  34BD               	retlw	189
  3614  2833  34D2               	retlw	210
  3615  2834  3413               	retlw	19
  3616  2835  343D               	retlw	61
  3617  2836  3478               	retlw	120
  3618  2837  34D3               	retlw	211
  3619  2838  34BB               	retlw	187
  3620  2839                     __end_oflog@coeff:	
  3621  2839                     sin@coeff_a:	
  3622  2839  34F4               	retlw	244
  3623  283A  344A               	retlw	74
  3624  283B  3448               	retlw	72
  3625  283C  3495               	retlw	149
  3626  283D  3495               	retlw	149
  3627  283E  34C7               	retlw	199
  3628  283F  34C1               	retlw	193
  3629  2840  34DC               	retlw	220
  3630  2841  3445               	retlw	69
  3631  2842  34DC               	retlw	220
  3632  2843  346D               	retlw	109
  3633  2844  34C3               	retlw	195
  3634  2845  34B3               	retlw	179
  3635  2846  3433               	retlw	51
  3636  2847  3440               	retlw	64
  3637  2848                     __end_ofsin@coeff_a:	
  3638  2848                     sin@coeff_b:	
  3639  2848  3434               	retlw	52
  3640  2849  3401               	retlw	1
  3641  284A  3448               	retlw	72
  3642  284B  349D               	retlw	157
  3643  284C  34B0               	retlw	176
  3644  284D  3445               	retlw	69
  3645  284E  3400               	retlw	0
  3646  284F  34DA               	retlw	218
  3647  2850  3442               	retlw	66
  3648  2851  3400               	retlw	0
  3649  2852  3480               	retlw	128
  3650  2853  343F               	retlw	63
  3651  2854                     __end_ofsin@coeff_b:	
  3652  000B                     _INTCONbits	set	11
  3653  0011                     _PIR1bits	set	17
  3654  000C                     _PORTAbits	set	12
  3655  000E                     _PORTCbits	set	14
  3656  000F                     _PORTDbits	set	15
  3657  0010                     _PORTEbits	set	16
  3658  001B                     _PR2	set	27
  3659  001C                     _T2CONbits	set	28
  3660  005F                     _GIE	set	95
  3661  005E                     _PEIE	set	94
  3662  0069                     _RB1	set	105
  3663  009D                     _ADCON0bits	set	157
  3664  009E                     _ADCON1bits	set	158
  3665  009C                     _ADRESH	set	156
  3666  009B                     _ADRESL	set	155
  3667  0095                     _OPTION_REGbits	set	149
  3668  0099                     _OSCCONbits	set	153
  3669  008D                     _TRISBbits	set	141
  3670  008E                     _TRISCbits	set	142
  3671  008F                     _TRISDbits	set	143
  3672  0090                     _TRISEbits	set	144
  3673  048D                     _RCIE	set	1165
  3674  011D                     _APFCONbits	set	285
  3675  010D                     _LATBbits	set	269
  3676  010F                     _LATDbits	set	271
  3677  0190                     _ANSELEbits	set	400
  3678  0192                     _PMADRH	set	402
  3679  0191                     _PMADRL	set	401
  3680  0195                     _PMCON1bits	set	405
  3681  0196                     _PMCON2	set	406
  3682  0194                     _PMDATH	set	404
  3683  0193                     _PMDATL	set	403
  3684  0199                     _RCREG	set	409
  3685  019D                     _RCSTAbits	set	413
  3686  019B                     _SPBRG	set	411
  3687  019A                     _TXREG	set	410
  3688  019E                     _TXSTAbits	set	414
  3689  0291                     _CCPR1	set	657
  3690  0298                     _CCPR2	set	664
  3691  0293                     _CCP1CONbits	set	659
  3692  029A                     _CCP2CONbits	set	666
  3693  029D                     _CCPTMRS0	set	669
  3694  029E                     _CCPTMRS1	set	670
  3695  029F                     _CCPTMRS2	set	671
  3696  0311                     _CCPR3	set	785
  3697  0318                     _CCPR4	set	792
  3698  031C                     _CCPR5	set	796
  3699  0313                     _CCP3CONbits	set	787
  3700  031A                     _CCP4CONbits	set	794
  3701  031E                     _CCP5CONbits	set	798
  3702  030C                     _TRISFbits	set	780
  3703  030D                     _TRISGbits	set	781
  3704  038C                     _LATFbits	set	908
  3705  038D                     _LATGbits	set	909
  3706  040C                     _ANSELFbits	set	1036
  3707  061F                     _CCP10CONbits	set	1567
  3708  0613                     _CCP6CONbits	set	1555
  3709  0616                     _CCP7CONbits	set	1558
  3710  0619                     _CCP8CONbits	set	1561
  3711  061C                     _CCP9CONbits	set	1564
  3712                           
  3713                           ; #config settings
  3714  0000                     
  3715                           	psect	cinit
  3716  02F5                     start_initialization:	
  3717  02F5                     __initialization:		;BIGRAM
  3718                           
  3719                           ; Clear objects allocated to BIGRAM
  3720  02F5  308A               	movlw	low (0+9098)
  3721  02F6  0084               	movwf	4
  3722  02F7  3023               	movlw	high (0+9098)
  3723  02F8  0085               	movwf	5
  3724  02F9  3066               	movlw	102
  3725  02FA  00FE               	movwf	btemp
  3726  02FB  3002               	movlw	2
  3727  02FC  00FF               	movwf	btemp+1
  3728  02FD  3187  27F4  3182   	fcall	clear_ram0
  3729                           
  3730                           ; Clear objects allocated to BANK0
  3731  0300  3052               	movlw	low __pbssBANK0
  3732  0301  0084               	movwf	4
  3733  0302  3000               	movlw	high __pbssBANK0
  3734  0303  0085               	movwf	5
  3735  0304  300E               	movlw	14
  3736  0305  00FE               	movwf	btemp
  3737  0306  3000               	movlw	0
  3738  0307  00FF               	movwf	btemp+1
  3739  0308  3187  27F4  3182   	fcall	clear_ram0
  3740                           
  3741                           ; Clear objects allocated to BANK2
  3742  030B  0022               	movlb	2	; select bank2
  3743  030C  01EA               	clrf	__pbssBANK2& (0+127)
  3744  030D  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3745                           
  3746                           ; Clear objects allocated to BANK3
  3747  030E  30A0               	movlw	low __pbssBANK3
  3748  030F  0084               	movwf	4
  3749  0310  3001               	movlw	high __pbssBANK3
  3750  0311  0085               	movwf	5
  3751  0312  302D               	movlw	45
  3752  0313  00FE               	movwf	btemp
  3753  0314  3000               	movlw	0
  3754  0315  00FF               	movwf	btemp+1
  3755  0316  3187  27F4  3182   	fcall	clear_ram0
  3756                           
  3757                           ; Clear objects allocated to BANK4
  3758  0319  3020               	movlw	low __pbssBANK4
  3759  031A  0084               	movwf	4
  3760  031B  3002               	movlw	high __pbssBANK4
  3761  031C  0085               	movwf	5
  3762  031D  303E               	movlw	62
  3763  031E  00FE               	movwf	btemp
  3764  031F  3000               	movlw	0
  3765  0320  00FF               	movwf	btemp+1
  3766  0321  3187  27F4  3182   	fcall	clear_ram0
  3767                           
  3768                           ; Clear objects allocated to BANK5
  3769  0324  30A0               	movlw	low __pbssBANK5
  3770  0325  0084               	movwf	4
  3771  0326  3002               	movlw	high __pbssBANK5
  3772  0327  0085               	movwf	5
  3773  0328  302C               	movlw	44
  3774  0329  00FE               	movwf	btemp
  3775  032A  3000               	movlw	0
  3776  032B  00FF               	movwf	btemp+1
  3777  032C  3187  27F4  3182   	fcall	clear_ram0
  3778                           
  3779                           ; Clear objects allocated to BANK6
  3780  032F  3020               	movlw	low __pbssBANK6
  3781  0330  0084               	movwf	4
  3782  0331  3003               	movlw	high __pbssBANK6
  3783  0332  0085               	movwf	5
  3784  0333  3040               	movlw	64
  3785  0334  00FE               	movwf	btemp
  3786  0335  3000               	movlw	0
  3787  0336  00FF               	movwf	btemp+1
  3788  0337  3187  27F4  3182   	fcall	clear_ram0
  3789                           
  3790                           ; Clear objects allocated to BANK7
  3791  033A  30A0               	movlw	low __pbssBANK7
  3792  033B  0084               	movwf	4
  3793  033C  3003               	movlw	high __pbssBANK7
  3794  033D  0085               	movwf	5
  3795  033E  3040               	movlw	64
  3796  033F  00FE               	movwf	btemp
  3797  0340  3000               	movlw	0
  3798  0341  00FF               	movwf	btemp+1
  3799  0342  3187  27F4  3182   	fcall	clear_ram0
  3800                           
  3801                           ; Initialize objects allocated to BANK0
  3802  0345  3026               	movlw	low __pidataBANK0
  3803  0346  0084               	movwf	4
  3804  0347  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3805  0348  0085               	movwf	5
  3806  0349  3040               	movlw	low __pdataBANK0
  3807  034A  0086               	movwf	6
  3808  034B  3000               	movlw	high __pdataBANK0
  3809  034C  0087               	movwf	7
  3810  034D  3000               	movlw	0
  3811  034E  00FF               	movwf	btemp+1
  3812  034F  3012               	movlw	18
  3813  0350  31AD  250B  3182   	fcall	init_ram
  3814                           
  3815                           ; Initialize objects allocated to BANK2
  3816  0353  3180  2003  3182   	fcall	__pidataBANK2	;fetch initializer
  3817  0356  00EC               	movwf	__pdataBANK2& (0+127)
  3818                           
  3819                           ; Initialize objects allocated to BANK3
  3820  0357  30AB               	movlw	low __pidataBANK3
  3821  0358  0084               	movwf	4
  3822  0359  30AD               	movlw	(high __pidataBANK3)| (0+128)
  3823  035A  0085               	movwf	5
  3824  035B  30CD               	movlw	low __pdataBANK3
  3825  035C  0086               	movwf	6
  3826  035D  3001               	movlw	high __pdataBANK3
  3827  035E  0087               	movwf	7
  3828  035F  3000               	movlw	0
  3829  0360  00FF               	movwf	btemp+1
  3830  0361  301A               	movlw	26
  3831  0362  31AD  250B  3182   	fcall	init_ram
  3832                           
  3833                           ; Initialize objects allocated to BANK4
  3834  0365  3001               	movlw	low __pidataBANK4
  3835  0366  0084               	movwf	4
  3836  0367  30A0               	movlw	(high __pidataBANK4)| (0+128)
  3837  0368  0085               	movwf	5
  3838  0369  3066               	movlw	low __pdataBANK4
  3839  036A  0086               	movwf	6
  3840  036B  3002               	movlw	high __pdataBANK4
  3841  036C  0087               	movwf	7
  3842  036D  3000               	movlw	0
  3843  036E  00FF               	movwf	btemp+1
  3844  036F  3004               	movlw	4
  3845  0370  31AD  250B         	fcall	init_ram
  3846  0372                     end_of_initialization:	
  3847                           ;End of C runtime variable initialization code
  3848                           
  3849  0372                     __end_of__initialization:	
  3850  0372  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3851  0373  0020               	movlb	0
  3852  0374  3183  2B76         	ljmp	_main	;jump to C main() function
  3853                           
  3854                           	psect	bssBANK0
  3855  0052                     __pbssBANK0:	
  3856  0052                     _tap_timer:	
  3857  0052                     	ds	4
  3858  0056                     _timer:	
  3859  0056                     	ds	4
  3860  005A                     _UQEnd:	
  3861  005A                     	ds	1
  3862  005B                     _UQFront:	
  3863  005B                     	ds	1
  3864  005C                     _doubleTap_state:	
  3865  005C                     	ds	1
  3866  005D                     _longBypass_state:	
  3867  005D                     	ds	1
  3868  005E                     _mode2_state:	
  3869  005E                     	ds	1
  3870  005F                     _presetSaveMode:	
  3871  005F                     	ds	1
  3872                           
  3873                           	psect	dataBANK0
  3874  0040                     __pdataBANK0:	
  3875  0040                     _baseline_mod_time:	
  3876  0040                     	ds	4
  3877  0044                     _delay_time:	
  3878  0044                     	ds	4
  3879  0048                     _bottom_push_state:	
  3880  0048                     	ds	2
  3881  004A                     _long_press_limit:	
  3882  004A                     	ds	2
  3883  004C                     _top_push_state:	
  3884  004C                     	ds	2
  3885  004E                     _blink_rate:	
  3886  004E                     	ds	1
  3887  004F                     _longTap_state:	
  3888  004F                     	ds	1
  3889  0050                     _num_taps:	
  3890  0050                     	ds	1
  3891  0051                     _switchBypass_state:	
  3892  0051                     	ds	1
  3893                           
  3894                           	psect	bssBANK2
  3895  016A                     __pbssBANK2:	
  3896  016A                     _suspend_blink:	
  3897  016A                     	ds	1
  3898  016B                     _switchTap_pressed:	
  3899  016B                     	ds	1
  3900                           
  3901                           	psect	dataBANK2
  3902  016C                     __pdataBANK2:	
  3903  016C                     _presetChannel:	
  3904  016C                     	ds	1
  3905                           
  3906                           	psect	bssBANK3
  3907  01A0                     __pbssBANK3:	
  3908  01A0                     _double_timer:	
  3909  01A0                     	ds	4
  3910  01A4                     _mod_timer:	
  3911  01A4                     	ds	4
  3912  01A8                     _sub_timer:	
  3913  01A8                     	ds	4
  3914  01AC                     _knob_1_pos:	
  3915  01AC                     	ds	2
  3916  01AE                     _knob_2_pos:	
  3917  01AE                     	ds	2
  3918  01B0                     _knob_3_pos:	
  3919  01B0                     	ds	2
  3920  01B2                     _knob_4_pos:	
  3921  01B2                     	ds	2
  3922  01B4                     _knob_5_pos:	
  3923  01B4                     	ds	2
  3924  01B6                     _longBypass_timer:	
  3925  01B6                     	ds	2
  3926  01B8                     _longTap_timer:	
  3927  01B8                     	ds	2
  3928  01BA                     _switchBypass_pressed:	
  3929  01BA                     	ds	2
  3930  01BC                     _tmpModDelay:	
  3931  01BC                     	ds	2
  3932  01BE                     _adjust_mod_delay:	
  3933  01BE                     	ds	1
  3934  01BF                     _bottomTactile_pressed:	
  3935  01BF                     	ds	1
  3936  01C0                     _bypass_turning_on:	
  3937  01C0                     	ds	1
  3938  01C1                     _isInitialized:	
  3939  01C1                     	ds	1
  3940  01C2                     _longBypass_down:	
  3941  01C2                     	ds	1
  3942  01C3                     _longBypass_save:	
  3943  01C3                     	ds	1
  3944  01C4                     _longBypass_start:	
  3945  01C4                     	ds	1
  3946  01C5                     _longTap_start:	
  3947  01C5                     	ds	1
  3948  01C6                     _mode1_state:	
  3949  01C6                     	ds	1
  3950  01C7                     _modulation_changed:	
  3951  01C7                     	ds	1
  3952  01C8                     _preset_blink:	
  3953  01C8                     	ds	1
  3954  01C9                     _preset_programmning_on:	
  3955  01C9                     	ds	1
  3956  01CA                     _reset_sub_delay:	
  3957  01CA                     	ds	1
  3958  01CB                     _switchTap_down:	
  3959  01CB                     	ds	1
  3960  01CC                     _topTactile_pressed:	
  3961  01CC                     	ds	1
  3962                           
  3963                           	psect	dataBANK3
  3964  01CD                     __pdataBANK3:	
  3965  01CD                     _knob1_prev:	
  3966  01CD                     	ds	2
  3967  01CF                     _knob2_prev:	
  3968  01CF                     	ds	2
  3969  01D1                     _knob3_prev:	
  3970  01D1                     	ds	2
  3971  01D3                     _knob4_prev:	
  3972  01D3                     	ds	2
  3973  01D5                     _knob5_prev:	
  3974  01D5                     	ds	2
  3975  01D7                     _mod_counter:	
  3976  01D7                     	ds	2
  3977  01D9                     _mod_delay_time:	
  3978  01D9                     	ds	2
  3979  01DB                     _symmetry:	
  3980  01DB                     	ds	2
  3981  01DD                     _tap_iteration:	
  3982  01DD                     	ds	2
  3983  01DF                     _blink_state:	
  3984  01DF                     	ds	1
  3985  01E0                     _currentBypassState:	
  3986  01E0                     	ds	1
  3987  01E1                     _expSwitchState:	
  3988  01E1                     	ds	1
  3989  01E2                     _expressModeCnst:	
  3990  01E2                     	ds	1
  3991  01E3                     _expressionChannel:	
  3992  01E3                     	ds	1
  3993  01E4                     _mod_time_changed:	
  3994  01E4                     	ds	1
  3995  01E5                     _presetModeCnst:	
  3996  01E5                     	ds	1
  3997  01E6                     _switchTap_state:	
  3998  01E6                     	ds	1
  3999                           
  4000                           	psect	bssBANK4
  4001  0220                     __pbssBANK4:	
  4002  0220                     _tap_history:	
  4003  0220                     	ds	20
  4004  0234                     USARTWriteInt@F3536:	
  4005  0234                     	ds	5
  4006  0239                     _ledState:	
  4007  0239                     	ds	4
  4008  023D                     _tap_total:	
  4009  023D                     	ds	4
  4010  0241                     _test_timer:	
  4011  0241                     	ds	4
  4012  0245                     _adjusted_pot_value:	
  4013  0245                     	ds	2
  4014  0247                     _debounce_bypass:	
  4015  0247                     	ds	2
  4016  0249                     _debounce_count:	
  4017  0249                     	ds	2
  4018  024B                     _debounce_mode1:	
  4019  024B                     	ds	2
  4020  024D                     _debounce_mode2:	
  4021  024D                     	ds	2
  4022  024F                     _delayfound:	
  4023  024F                     	ds	2
  4024  0251                     _errno:	
  4025  0251                     	ds	2
  4026  0253                     _mod_value:	
  4027  0253                     	ds	2
  4028  0255                     _oldBaseTime:	
  4029  0255                     	ds	2
  4030  0257                     _oldSymmetry:	
  4031  0257                     	ds	2
  4032  0259                     _switchBypass_toggle:	
  4033  0259                     	ds	2
  4034  025B                     _tmpVal:	
  4035  025B                     	ds	2
  4036  025D                     _iCnt:	
  4037  025D                     	ds	1
  4038                           
  4039                           	psect	dataBANK4
  4040  0266                     __pdataBANK4:	
  4041  0266                     _blink_delay:	
  4042  0266                     	ds	2
  4043  0268                     _switchBypass_up:	
  4044  0268                     	ds	2
  4045                           
  4046                           	psect	bssBANK5
  4047  02A0                     __pbssBANK5:	
  4048  02A0                     _tap:	
  4049  02A0                     	ds	44
  4050                           
  4051                           	psect	bssBANK6
  4052  0320                     __pbssBANK6:	
  4053  0320                     _URBuff:	
  4054  0320                     	ds	64
  4055                           
  4056                           	psect	bssBANK7
  4057  03A0                     __pbssBANK7:	
  4058  03A0                     _myBuf:	
  4059  03A0                     	ds	64
  4060                           
  4061                           	psect	clrtext
  4062  07F4                     clear_ram0:	
  4063                           ;	Called with FSR0 containing the base address, and
  4064                           ;	btemp/btemp+1 has the size to clear
  4065                           
  4066  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
  4067  07F5                     clrloop0:	
  4068  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
  4069  07F6  3101               	addfsr 0,1
  4070  07F7  3001               	movlw	1
  4071  07F8  02FE               	subwf	126,f
  4072  07F9  3000               	movlw	0
  4073  07FA  3BFF               	subwfb	127,f
  4074  07FB  087F               	movf	127,w
  4075  07FC  047E               	iorwf	126,w
  4076  07FD  1903               	btfsc	3,2
  4077  07FE  3400               	retlw	0	;all done for this memory range, return
  4078  07FF  2FF5               	goto	clrloop0	;have we reached the end yet?
  4079                           
  4080                           	psect	inittext
  4081  2D0B                     init_ram:	
  4082  2D0B  00FE               	movwf	126
  4083  2D0C                     initloop:	
  4084  2D0C  0012               	moviw fsr0++
  4085  2D0D  001E               	movwi fsr1++
  4086  2D0E  3001               	movlw	1
  4087  2D0F  02FE               	subwf	126,f
  4088  2D10  3000               	movlw	0
  4089  2D11  3BFF               	subwfb	127,f
  4090  2D12  087F               	movf	127,w
  4091  2D13  047E               	iorwf	126,w
  4092  2D14  1903               	btfsc	3,2
  4093  2D15  3400               	retlw	0
  4094  2D16  2D0C               	goto	initloop
  4095                           
  4096                           	psect	cstackBANK5
  4097  02CC                     __pcstackBANK5:	
  4098  02CC                     _main$2839:	
  4099                           
  4100                           ; 3 bytes @ 0x0
  4101  02CC                     	ds	3
  4102  02CF                     _main$2840:	
  4103                           
  4104                           ; 3 bytes @ 0x3
  4105  02CF                     	ds	3
  4106  02D2                     _main$2841:	
  4107                           
  4108                           ; 3 bytes @ 0x6
  4109  02D2                     	ds	3
  4110                           
  4111                           	psect	cstackBANK4
  4112  025E                     __pcstackBANK4:	
  4113  025E                     ??_main:	
  4114                           
  4115                           ; 1 bytes @ 0x0
  4116  025E                     	ds	8
  4117                           
  4118                           	psect	cstackBANK3
  4119  01E7                     __pcstackBANK3:	
  4120  01E7                     scaleA100kPot@pwm:	
  4121  01E7                     scaleA10kPot@pwm:	
  4122                           ; 3 bytes @ 0x0
  4123                           
  4124  01E7                     scaleiA10kPot@pwm:	
  4125                           ; 3 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  01E7                     	ds	3
  4130  01EA                     _scaleA100kPot$2844:	
  4131  01EA                     _scaleA10kPot$2848:	
  4132                           ; 3 bytes @ 0x3
  4133                           
  4134  01EA                     _scaleiA10kPot$2850:	
  4135                           ; 3 bytes @ 0x3
  4136                           
  4137                           
  4138                           ; 3 bytes @ 0x3
  4139  01EA                     	ds	3
  4140  01ED                     _scaleA100kPot$2845:	
  4141  01ED                     _scaleA10kPot$2849:	
  4142                           ; 3 bytes @ 0x6
  4143                           
  4144  01ED                     _scaleiA10kPot$2851:	
  4145                           ; 3 bytes @ 0x6
  4146                           
  4147                           
  4148                           ; 3 bytes @ 0x6
  4149  01ED                     	ds	3
  4150                           
  4151                           	psect	cstackBANK2
  4152  0120                     __pcstackBANK2:	
  4153  0120                     ?___fttol:	
  4154  0120                     ___fttol@f1:	
  4155                           ; 4 bytes @ 0x0
  4156                           
  4157                           
  4158                           ; 3 bytes @ 0x0
  4159  0120                     	ds	4
  4160  0124                     ??___fttol:	
  4161                           
  4162                           ; 1 bytes @ 0x4
  4163  0124                     	ds	4
  4164  0128                     ___fttol@sign1:	
  4165                           
  4166                           ; 1 bytes @ 0x8
  4167  0128                     	ds	1
  4168  0129                     ___fttol@lval:	
  4169                           
  4170                           ; 4 bytes @ 0x9
  4171  0129                     	ds	4
  4172  012D                     ___fttol@exp1:	
  4173                           
  4174                           ; 1 bytes @ 0xD
  4175  012D                     	ds	1
  4176  012E                     ?_set_subdivision:	
  4177  012E                     ?_modTri:	
  4178                           ; 2 bytes @ 0xE
  4179                           
  4180  012E                     ?_modSaw:	
  4181                           ; 2 bytes @ 0xE
  4182                           
  4183  012E                     ?___wmul:	
  4184                           ; 2 bytes @ 0xE
  4185                           
  4186  012E                     ?_floor:	
  4187                           ; 2 bytes @ 0xE
  4188                           
  4189  012E                     set_subdivision@x:	
  4190                           ; 3 bytes @ 0xE
  4191                           
  4192  012E                     getModulationDelayTime@subDiv:	
  4193                           ; 2 bytes @ 0xE
  4194                           
  4195  012E                     ___wmul@multiplier:	
  4196                           ; 2 bytes @ 0xE
  4197                           
  4198  012E                     modTri@angle:	
  4199                           ; 2 bytes @ 0xE
  4200                           
  4201  012E                     modSaw@angle:	
  4202                           ; 3 bytes @ 0xE
  4203                           
  4204  012E                     floor@x:	
  4205                           ; 3 bytes @ 0xE
  4206                           
  4207                           
  4208                           ; 3 bytes @ 0xE
  4209  012E                     	ds	2
  4210  0130                     set_subdivision@y:	
  4211  0130                     ___wmul@multiplicand:	
  4212                           ; 2 bytes @ 0x10
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x10
  4216  0130                     	ds	1
  4217  0131                     ??_floor:	
  4218  0131                     modTri@inflection:	
  4219                           ; 1 bytes @ 0x11
  4220                           
  4221  0131                     modSaw@inflection:	
  4222                           ; 3 bytes @ 0x11
  4223                           
  4224                           
  4225                           ; 3 bytes @ 0x11
  4226  0131                     	ds	1
  4227  0132                     ___wmul@product:	
  4228  0132                     set_subdivision@scalar:	
  4229                           ; 2 bytes @ 0x12
  4230                           
  4231  0132                     floor@i:	
  4232                           ; 3 bytes @ 0x12
  4233                           
  4234                           
  4235                           ; 3 bytes @ 0x12
  4236  0132                     	ds	2
  4237  0134                     ?_modCos:	
  4238  0134                     ?_eval_poly:	
  4239                           ; 2 bytes @ 0x14
  4240                           
  4241  0134                     modCos@angle:	
  4242                           ; 3 bytes @ 0x14
  4243                           
  4244  0134                     eval_poly@x:	
  4245                           ; 3 bytes @ 0x14
  4246                           
  4247  0134                     _modTri$2853:	
  4248                           ; 3 bytes @ 0x14
  4249                           
  4250  0134                     _modSaw$2854:	
  4251                           ; 3 bytes @ 0x14
  4252                           
  4253                           
  4254                           ; 3 bytes @ 0x14
  4255  0134                     	ds	1
  4256  0135                     set_subdivision@tmpX:	
  4257  0135                     floor@expon:	
  4258                           ; 2 bytes @ 0x15
  4259                           
  4260                           
  4261                           ; 2 bytes @ 0x15
  4262  0135                     	ds	2
  4263  0137                     ?___ftsub:	
  4264  0137                     eval_poly@d:	
  4265                           ; 3 bytes @ 0x17
  4266                           
  4267  0137                     modCos@inflection:	
  4268                           ; 2 bytes @ 0x17
  4269                           
  4270  0137                     modTri@shift:	
  4271                           ; 3 bytes @ 0x17
  4272                           
  4273  0137                     ___ftsub@f2:	
  4274                           ; 3 bytes @ 0x17
  4275                           
  4276  0137                     _modSaw$2855:	
  4277                           ; 3 bytes @ 0x17
  4278                           
  4279                           
  4280                           ; 3 bytes @ 0x17
  4281  0137                     	ds	2
  4282  0139                     eval_poly@n:	
  4283                           
  4284                           ; 2 bytes @ 0x19
  4285  0139                     	ds	1
  4286  013A                     ??_modCos:	
  4287  013A                     modSaw@mod:	
  4288                           ; 1 bytes @ 0x1A
  4289                           
  4290  013A                     modTri@period:	
  4291                           ; 2 bytes @ 0x1A
  4292                           
  4293  013A                     ___ftsub@f1:	
  4294                           ; 3 bytes @ 0x1A
  4295                           
  4296                           
  4297                           ; 3 bytes @ 0x1A
  4298  013A                     	ds	1
  4299  013B                     eval_poly@res:	
  4300                           
  4301                           ; 3 bytes @ 0x1B
  4302  013B                     	ds	1
  4303  013C                     modSaw@shift:	
  4304  013C                     _modCos$2852:	
  4305                           ; 3 bytes @ 0x1C
  4306                           
  4307                           
  4308                           ; 3 bytes @ 0x1C
  4309  013C                     	ds	1
  4310  013D                     modTri@tmpVal:	
  4311                           
  4312                           ; 3 bytes @ 0x1D
  4313  013D                     	ds	1
  4314  013E                     ?_sin:	
  4315  013E                     ?_log:	
  4316                           ; 3 bytes @ 0x1E
  4317                           
  4318  013E                     ?_ldexp:	
  4319                           ; 3 bytes @ 0x1E
  4320                           
  4321  013E                     sin@f:	
  4322                           ; 3 bytes @ 0x1E
  4323                           
  4324  013E                     ldexp@value:	
  4325                           ; 3 bytes @ 0x1E
  4326                           
  4327  013E                     log@x:	
  4328                           ; 3 bytes @ 0x1E
  4329                           
  4330                           
  4331                           ; 3 bytes @ 0x1E
  4332  013E                     	ds	1
  4333  013F                     modCos@shift:	
  4334  013F                     modSaw@period:	
  4335                           ; 3 bytes @ 0x1F
  4336                           
  4337                           
  4338                           ; 3 bytes @ 0x1F
  4339  013F                     	ds	2
  4340  0141                     ??_sin:	
  4341  0141                     ??_log:	
  4342                           ; 1 bytes @ 0x21
  4343                           
  4344  0141                     ldexp@newexp:	
  4345                           ; 1 bytes @ 0x21
  4346                           
  4347                           
  4348                           ; 2 bytes @ 0x21
  4349  0141                     	ds	1
  4350  0142                     ?_modSawRev:	
  4351  0142                     log@exponent:	
  4352                           ; 2 bytes @ 0x22
  4353                           
  4354  0142                     modCos@period:	
  4355                           ; 2 bytes @ 0x22
  4356                           
  4357  0142                     modSawRev@angle:	
  4358                           ; 3 bytes @ 0x22
  4359                           
  4360  0142                     sin@y:	
  4361                           ; 3 bytes @ 0x22
  4362                           
  4363                           
  4364                           ; 3 bytes @ 0x22
  4365  0142                     	ds	1
  4366  0143                     ??_ldexp:	
  4367                           
  4368                           ; 1 bytes @ 0x23
  4369  0143                     	ds	2
  4370  0145                     modCos@tmpVal:	
  4371  0145                     modSawRev@inflection:	
  4372                           ; 3 bytes @ 0x25
  4373                           
  4374  0145                     _ldexp$2648:	
  4375                           ; 3 bytes @ 0x25
  4376                           
  4377  0145                     _sin$2859:	
  4378                           ; 3 bytes @ 0x25
  4379                           
  4380                           
  4381                           ; 3 bytes @ 0x25
  4382  0145                     	ds	3
  4383  0148                     ??_modSawRev:	
  4384  0148                     ?_modSquare:	
  4385                           ; 1 bytes @ 0x28
  4386                           
  4387  0148                     ?_exp:	
  4388                           ; 2 bytes @ 0x28
  4389                           
  4390  0148                     modSquare@angle:	
  4391                           ; 3 bytes @ 0x28
  4392                           
  4393  0148                     sin@x2:	
  4394                           ; 3 bytes @ 0x28
  4395                           
  4396  0148                     exp@x:	
  4397                           ; 3 bytes @ 0x28
  4398                           
  4399                           
  4400                           ; 3 bytes @ 0x28
  4401  0148                     	ds	3
  4402  014B                     ??_exp:	
  4403  014B                     sin@sgn:	
  4404                           ; 1 bytes @ 0x2B
  4405                           
  4406  014B                     modSquare@inflection:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409                           
  4410                           ; 3 bytes @ 0x2B
  4411  014B                     	ds	1
  4412  014C                     ?_cos:	
  4413  014C                     cos@f:	
  4414                           ; 3 bytes @ 0x2C
  4415                           
  4416  014C                     _exp$2860:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     _exp$2611:	
  4427  014F                     _cos$2856:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     ??_calcCosArray:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	2
  4444  0154                     exp@sign:	
  4445  0154                     updateModulationArray@angleFactor:	
  4446                           ; 1 bytes @ 0x34
  4447                           
  4448                           
  4449                           ; 2 bytes @ 0x34
  4450  0154                     	ds	1
  4451  0155                     ?_pow:	
  4452  0155                     pow@x:	
  4453                           ; 3 bytes @ 0x35
  4454                           
  4455                           
  4456                           ; 3 bytes @ 0x35
  4457  0155                     	ds	1
  4458  0156                     updateModulationArray@iAngle_2347:	
  4459  0156                     calcCosArray@tmpVal:	
  4460                           ; 1 bytes @ 0x36
  4461                           
  4462                           
  4463                           ; 3 bytes @ 0x36
  4464  0156                     	ds	1
  4465  0157                     updateModulationArray@subDiv:	
  4466                           
  4467                           ; 2 bytes @ 0x37
  4468  0157                     	ds	1
  4469  0158                     pow@y:	
  4470                           
  4471                           ; 3 bytes @ 0x38
  4472  0158                     	ds	1
  4473  0159                     calcCosArray@iAngle:	
  4474  0159                     updateModulationArray@thisAngle:	
  4475                           ; 1 bytes @ 0x39
  4476                           
  4477                           
  4478                           ; 2 bytes @ 0x39
  4479  0159                     	ds	2
  4480  015B                     ??_pow:	
  4481  015B                     updateModulationArray@iAngle:	
  4482                           ; 1 bytes @ 0x3B
  4483                           
  4484                           
  4485                           ; 1 bytes @ 0x3B
  4486  015B                     	ds	1
  4487  015C                     _pow$2857:	
  4488                           
  4489                           ; 3 bytes @ 0x3C
  4490  015C                     	ds	3
  4491  015F                     _pow$2858:	
  4492                           
  4493                           ; 3 bytes @ 0x3F
  4494  015F                     	ds	3
  4495  0162                     pow@sign:	
  4496                           
  4497                           ; 1 bytes @ 0x42
  4498  0162                     	ds	1
  4499  0163                     pow@yi:	
  4500                           
  4501                           ; 4 bytes @ 0x43
  4502  0163                     	ds	4
  4503  0167                     ?_scaleA10kPot:	
  4504  0167                     ?_scaleiA10kPot:	
  4505                           ; 2 bytes @ 0x47
  4506                           
  4507  0167                     ?_scaleA100kPot:	
  4508                           ; 2 bytes @ 0x47
  4509                           
  4510  0167                     scaleA100kPot@input:	
  4511                           ; 2 bytes @ 0x47
  4512                           
  4513  0167                     scaleA10kPot@input:	
  4514                           ; 3 bytes @ 0x47
  4515                           
  4516  0167                     scaleiA10kPot@input:	
  4517                           ; 3 bytes @ 0x47
  4518                           
  4519                           
  4520                           ; 3 bytes @ 0x47
  4521  0167                     	ds	3
  4522                           
  4523                           	psect	cstackBANK1
  4524  00A0                     __pcstackBANK1:	
  4525  00A0                     ?___ftge:	
  4526  00A0                     ?_set_leds_top:	
  4527                           ; 1 bit 
  4528                           
  4529  00A0                     ?_USARTInit:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  00A0                     ??_ConfigureOscillator:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  00A0                     ??_InitApp:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  00A0                     ??_InitializeTaps:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  00A0                     ??_init_adc:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  00A0                     ??_init_pwm:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  00A0                     ??_init_timer2:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  00A0                     ??_init_timer0:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  00A0                     ?_set_leds_bottom:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  00A0                     ?_setLongBypassState:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  00A0                     ?_setLongTapState:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  00A0                     ?_updateSwitchBypassState:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  00A0                     ?_getModulationSubdivision:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  00A0                     ?_adc_convert:	
  4569                           ; 2 bytes @ 0x0
  4570                           
  4571  00A0                     ?_FLASH_ReadWord:	
  4572                           ; 2 bytes @ 0x0
  4573                           
  4574  00A0                     ?_getSwitchBypassState:	
  4575                           ; 2 bytes @ 0x0
  4576                           
  4577  00A0                     ?___awdiv:	
  4578                           ; 2 bytes @ 0x0
  4579                           
  4580  00A0                     ?___ftpack:	
  4581                           ; 2 bytes @ 0x0
  4582                           
  4583  00A0                     ?_frexp:	
  4584                           ; 3 bytes @ 0x0
  4585                           
  4586  00A0                     ?___lmul:	
  4587                           ; 3 bytes @ 0x0
  4588                           
  4589  00A0                     ?___aldiv:	
  4590                           ; 4 bytes @ 0x0
  4591                           
  4592  00A0                     FLASH_ReadWord@flashAddr:	
  4593                           ; 4 bytes @ 0x0
  4594                           
  4595  00A0                     set_leds_top@x:	
  4596                           ; 2 bytes @ 0x0
  4597                           
  4598  00A0                     set_leds_bottom@x:	
  4599                           ; 2 bytes @ 0x0
  4600                           
  4601  00A0                     updateSwitchBypassState@state:	
  4602                           ; 2 bytes @ 0x0
  4603                           
  4604  00A0                     setLongBypassState@f_state:	
  4605                           ; 2 bytes @ 0x0
  4606                           
  4607  00A0                     setLongTapState@f_state:	
  4608                           ; 2 bytes @ 0x0
  4609                           
  4610  00A0                     USARTInit@baud_rate:	
  4611                           ; 2 bytes @ 0x0
  4612                           
  4613  00A0                     ___awdiv@divisor:	
  4614                           ; 2 bytes @ 0x0
  4615                           
  4616  00A0                     ___ftpack@arg:	
  4617                           ; 2 bytes @ 0x0
  4618                           
  4619  00A0                     ___ftge@ff1:	
  4620                           ; 3 bytes @ 0x0
  4621                           
  4622  00A0                     frexp@value:	
  4623                           ; 3 bytes @ 0x0
  4624                           
  4625  00A0                     ___lmul@multiplier:	
  4626                           ; 3 bytes @ 0x0
  4627                           
  4628  00A0                     ___aldiv@divisor:	
  4629                           ; 4 bytes @ 0x0
  4630                           
  4631                           
  4632                           ; 4 bytes @ 0x0
  4633  00A0                     	ds	1
  4634  00A1                     InitializeTaps@itap:	
  4635                           
  4636                           ; 2 bytes @ 0x1
  4637  00A1                     	ds	1
  4638  00A2                     ??_getModulationSubdivision:	
  4639  00A2                     ??_USARTInit:	
  4640                           ; 1 bytes @ 0x2
  4641                           
  4642  00A2                     ??_adc_convert:	
  4643                           ; 1 bytes @ 0x2
  4644                           
  4645  00A2                     ??_FLASH_ReadWord:	
  4646                           ; 1 bytes @ 0x2
  4647                           
  4648  00A2                     ??_set_leds_bottom:	
  4649                           ; 1 bytes @ 0x2
  4650                           
  4651  00A2                     ??_setLongBypassState:	
  4652                           ; 1 bytes @ 0x2
  4653                           
  4654  00A2                     ??_setLongTapState:	
  4655                           ; 1 bytes @ 0x2
  4656                           
  4657  00A2                     ??_updateSwitchBypassState:	
  4658                           ; 1 bytes @ 0x2
  4659                           
  4660  00A2                     ??_getSwitchBypassState:	
  4661                           ; 1 bytes @ 0x2
  4662                           
  4663  00A2                     FLASH_ReadWord@GIEBitValue:	
  4664                           ; 1 bytes @ 0x2
  4665                           
  4666  00A2                     set_leds_top@ledState:	
  4667                           ; 1 bytes @ 0x2
  4668                           
  4669  00A2                     ___awdiv@dividend:	
  4670                           ; 2 bytes @ 0x2
  4671                           
  4672                           
  4673                           ; 2 bytes @ 0x2
  4674  00A2                     	ds	1
  4675  00A3                     adc_convert@channel:	
  4676  00A3                     ___ftpack@exp:	
  4677                           ; 1 bytes @ 0x3
  4678                           
  4679  00A3                     frexp@eptr:	
  4680                           ; 1 bytes @ 0x3
  4681                           
  4682  00A3                     ___ftge@ff2:	
  4683                           ; 1 bytes @ 0x3
  4684                           
  4685                           
  4686                           ; 3 bytes @ 0x3
  4687  00A3                     	ds	1
  4688  00A4                     ??_set_leds_top:	
  4689  00A4                     ??_ReadSavedSettings:	
  4690                           ; 1 bytes @ 0x4
  4691                           
  4692  00A4                     ??_resetRingLEDs:	
  4693                           ; 1 bytes @ 0x4
  4694                           
  4695  00A4                     ??_setPresetDisplay:	
  4696                           ; 1 bytes @ 0x4
  4697                           
  4698  00A4                     ??_setExpressionDisplay:	
  4699                           ; 1 bytes @ 0x4
  4700                           
  4701  00A4                     ??_frexp:	
  4702                           ; 1 bytes @ 0x4
  4703                           
  4704  00A4                     ??___awdiv:	
  4705                           ; 1 bytes @ 0x4
  4706                           
  4707  00A4                     ___ftpack@sign:	
  4708                           ; 1 bytes @ 0x4
  4709                           
  4710  00A4                     ___lmul@multiplicand:	
  4711                           ; 1 bytes @ 0x4
  4712                           
  4713  00A4                     ___aldiv@dividend:	
  4714                           ; 4 bytes @ 0x4
  4715                           
  4716                           
  4717                           ; 4 bytes @ 0x4
  4718  00A4                     	ds	1
  4719  00A5                     ??___ftpack:	
  4720  00A5                     ___awdiv@counter:	
  4721                           ; 1 bytes @ 0x5
  4722                           
  4723                           
  4724                           ; 1 bytes @ 0x5
  4725  00A5                     	ds	1
  4726  00A6                     ??___ftge:	
  4727  00A6                     setPresetDisplay@ledChannel:	
  4728                           ; 1 bytes @ 0x6
  4729                           
  4730  00A6                     setExpressionDisplay@ledChannel:	
  4731                           ; 1 bytes @ 0x6
  4732                           
  4733  00A6                     ___awdiv@sign:	
  4734                           ; 1 bytes @ 0x6
  4735                           
  4736                           
  4737                           ; 1 bytes @ 0x6
  4738  00A6                     	ds	1
  4739  00A7                     ??_update_mode:	
  4740  00A7                     ??_update_selectMode:	
  4741                           ; 1 bytes @ 0x7
  4742                           
  4743  00A7                     ??_setPedalMode:	
  4744                           ; 1 bytes @ 0x7
  4745                           
  4746  00A7                     ___awdiv@quotient:	
  4747                           ; 1 bytes @ 0x7
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x7
  4751  00A7                     	ds	1
  4752  00A8                     ??___lmul:	
  4753  00A8                     ??___aldiv:	
  4754                           ; 1 bytes @ 0x8
  4755                           
  4756  00A8                     ?___altoft:	
  4757                           ; 1 bytes @ 0x8
  4758                           
  4759  00A8                     ?___awtoft:	
  4760                           ; 3 bytes @ 0x8
  4761                           
  4762  00A8                     ?___lltoft:	
  4763                           ; 3 bytes @ 0x8
  4764                           
  4765  00A8                     ___awtoft@c:	
  4766                           ; 3 bytes @ 0x8
  4767                           
  4768  00A8                     ___lmul@product:	
  4769                           ; 2 bytes @ 0x8
  4770                           
  4771  00A8                     ___altoft@c:	
  4772                           ; 4 bytes @ 0x8
  4773                           
  4774  00A8                     ___lltoft@c:	
  4775                           ; 4 bytes @ 0x8
  4776                           
  4777                           
  4778                           ; 4 bytes @ 0x8
  4779  00A8                     	ds	1
  4780  00A9                     ___aldiv@counter:	
  4781                           
  4782                           ; 1 bytes @ 0x9
  4783  00A9                     	ds	1
  4784  00AA                     ___aldiv@sign:	
  4785                           
  4786                           ; 1 bytes @ 0xA
  4787  00AA                     	ds	1
  4788  00AB                     ??___awtoft:	
  4789  00AB                     ___aldiv@quotient:	
  4790                           ; 1 bytes @ 0xB
  4791                           
  4792                           
  4793                           ; 4 bytes @ 0xB
  4794  00AB                     	ds	1
  4795  00AC                     ?_wait_ms:	
  4796  00AC                     ??___altoft:	
  4797                           ; 1 bytes @ 0xC
  4798                           
  4799  00AC                     ??___lltoft:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  00AC                     wait_ms@timeSec:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805                           
  4806                           ; 2 bytes @ 0xC
  4807  00AC                     	ds	1
  4808  00AD                     ___awtoft@sign:	
  4809  00AD                     ___lltoft@exp:	
  4810                           ; 1 bytes @ 0xD
  4811                           
  4812                           
  4813                           ; 1 bytes @ 0xD
  4814  00AD                     	ds	1
  4815  00AE                     ??_wait_ms:	
  4816  00AE                     ?___ftmul:	
  4817                           ; 1 bytes @ 0xE
  4818                           
  4819  00AE                     ___altoft@exp:	
  4820                           ; 3 bytes @ 0xE
  4821                           
  4822  00AE                     ___ftmul@f1:	
  4823                           ; 1 bytes @ 0xE
  4824                           
  4825  00AE                     wait_ms@timemsl:	
  4826                           ; 3 bytes @ 0xE
  4827                           
  4828                           
  4829                           ; 4 bytes @ 0xE
  4830  00AE                     	ds	1
  4831  00AF                     ___altoft@sign:	
  4832                           
  4833                           ; 1 bytes @ 0xF
  4834  00AF                     	ds	2
  4835  00B1                     ___ftmul@f2:	
  4836                           
  4837                           ; 3 bytes @ 0x11
  4838  00B1                     	ds	1
  4839  00B2                     ??_read_bottom_tactile:	
  4840  00B2                     ??_read_top_tactile:	
  4841                           ; 1 bytes @ 0x12
  4842                           
  4843  00B2                     ??_solidring_tactiles:	
  4844                           ; 1 bytes @ 0x12
  4845                           
  4846  00B2                     ??_ring_tactiles:	
  4847                           ; 1 bytes @ 0x12
  4848                           
  4849  00B2                     ?_setSwitchBypassRelays:	
  4850                           ; 1 bytes @ 0x12
  4851                           
  4852  00B2                     setSwitchBypassRelays@f_state:	
  4853                           ; 1 bytes @ 0x12
  4854                           
  4855                           
  4856                           ; 2 bytes @ 0x12
  4857  00B2                     	ds	1
  4858  00B3                     ring_tactiles@iLed:	
  4859                           
  4860                           ; 2 bytes @ 0x13
  4861  00B3                     	ds	1
  4862  00B4                     ??_setSwitchBypassRelays:	
  4863  00B4                     ??___ftmul:	
  4864                           ; 1 bytes @ 0x14
  4865                           
  4866  00B4                     solidring_tactiles@ring_delay:	
  4867                           ; 1 bytes @ 0x14
  4868                           
  4869                           
  4870                           ; 1 bytes @ 0x14
  4871  00B4                     	ds	1
  4872  00B5                     ring_tactiles@iLed_1538:	
  4873                           
  4874                           ; 2 bytes @ 0x15
  4875  00B5                     	ds	1
  4876  00B6                     ?_setSwitchBypassState:	
  4877  00B6                     setSwitchBypassState@f_state:	
  4878                           ; 1 bytes @ 0x16
  4879                           
  4880                           
  4881                           ; 2 bytes @ 0x16
  4882  00B6                     	ds	1
  4883  00B7                     ??_showSave:	
  4884                           
  4885                           ; 1 bytes @ 0x17
  4886  00B7                     	ds	1
  4887  00B8                     ??_setSwitchBypassState:	
  4888  00B8                     ?_setDoublePressState:	
  4889                           ; 1 bytes @ 0x18
  4890                           
  4891  00B8                     ___ftmul@exp:	
  4892                           ; 1 bytes @ 0x18
  4893                           
  4894  00B8                     setDoublePressState@f_state:	
  4895                           ; 1 bytes @ 0x18
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x18
  4899  00B8                     	ds	1
  4900  00B9                     ___ftmul@f3_as_product:	
  4901                           
  4902                           ; 3 bytes @ 0x19
  4903  00B9                     	ds	1
  4904  00BA                     ??_initSwitchBypass:	
  4905  00BA                     ??_setDoublePressState:	
  4906                           ; 1 bytes @ 0x1A
  4907                           
  4908  00BA                     initSwitchBypass@initState:	
  4909                           ; 1 bytes @ 0x1A
  4910                           
  4911                           
  4912                           ; 2 bytes @ 0x1A
  4913  00BA                     	ds	2
  4914  00BC                     ??_updateSwitchBypass:	
  4915  00BC                     ??_updateSwitchTap:	
  4916                           ; 1 bytes @ 0x1C
  4917                           
  4918  00BC                     ___ftmul@cntr:	
  4919                           ; 1 bytes @ 0x1C
  4920                           
  4921                           
  4922                           ; 1 bytes @ 0x1C
  4923  00BC                     	ds	1
  4924  00BD                     ___ftmul@sign:	
  4925                           
  4926                           ; 1 bytes @ 0x1D
  4927  00BD                     	ds	1
  4928  00BE                     ?___ftneg:	
  4929  00BE                     ___ftneg@f1:	
  4930                           ; 3 bytes @ 0x1E
  4931                           
  4932                           
  4933                           ; 3 bytes @ 0x1E
  4934  00BE                     	ds	3
  4935  00C1                     ??___ftneg:	
  4936  00C1                     ?___ftadd:	
  4937                           ; 1 bytes @ 0x21
  4938                           
  4939  00C1                     ___ftadd@f1:	
  4940                           ; 3 bytes @ 0x21
  4941                           
  4942                           
  4943                           ; 3 bytes @ 0x21
  4944  00C1                     	ds	1
  4945  00C2                     updateSwitchTap@tapCntDivisor:	
  4946                           
  4947                           ; 2 bytes @ 0x22
  4948  00C2                     	ds	2
  4949  00C4                     updateSwitchTap@iCnt:	
  4950  00C4                     ___ftadd@f2:	
  4951                           ; 1 bytes @ 0x24
  4952                           
  4953                           
  4954                           ; 3 bytes @ 0x24
  4955  00C4                     	ds	3
  4956  00C7                     ??___ftadd:	
  4957                           
  4958                           ; 1 bytes @ 0x27
  4959  00C7                     	ds	4
  4960  00CB                     ___ftadd@sign:	
  4961                           
  4962                           ; 1 bytes @ 0x2B
  4963  00CB                     	ds	1
  4964  00CC                     ___ftadd@exp2:	
  4965                           
  4966                           ; 1 bytes @ 0x2C
  4967  00CC                     	ds	1
  4968  00CD                     ___ftadd@exp1:	
  4969                           
  4970                           ; 1 bytes @ 0x2D
  4971  00CD                     	ds	1
  4972  00CE                     ?___ftdiv:	
  4973  00CE                     ___ftdiv@f2:	
  4974                           ; 3 bytes @ 0x2E
  4975                           
  4976                           
  4977                           ; 3 bytes @ 0x2E
  4978  00CE                     	ds	3
  4979  00D1                     ___ftdiv@f1:	
  4980                           
  4981                           ; 3 bytes @ 0x31
  4982  00D1                     	ds	3
  4983  00D4                     ??___ftdiv:	
  4984                           
  4985                           ; 1 bytes @ 0x34
  4986  00D4                     	ds	4
  4987  00D8                     ___ftdiv@cntr:	
  4988                           
  4989                           ; 1 bytes @ 0x38
  4990  00D8                     	ds	1
  4991  00D9                     ___ftdiv@f3:	
  4992                           
  4993                           ; 3 bytes @ 0x39
  4994  00D9                     	ds	3
  4995  00DC                     ___ftdiv@exp:	
  4996                           
  4997                           ; 1 bytes @ 0x3C
  4998  00DC                     	ds	1
  4999  00DD                     ___ftdiv@sign:	
  5000                           
  5001                           ; 1 bytes @ 0x3D
  5002  00DD                     	ds	1
  5003  00DE                     ?_map:	
  5004  00DE                     map@x:	
  5005                           ; 3 bytes @ 0x3E
  5006                           
  5007                           
  5008                           ; 3 bytes @ 0x3E
  5009  00DE                     	ds	3
  5010  00E1                     map@in_min:	
  5011                           
  5012                           ; 3 bytes @ 0x41
  5013  00E1                     	ds	3
  5014  00E4                     map@in_max:	
  5015                           
  5016                           ; 3 bytes @ 0x44
  5017  00E4                     	ds	3
  5018  00E7                     map@out_min:	
  5019                           
  5020                           ; 3 bytes @ 0x47
  5021  00E7                     	ds	3
  5022  00EA                     map@out_max:	
  5023                           
  5024                           ; 3 bytes @ 0x4A
  5025  00EA                     	ds	3
  5026  00ED                     ??_map:	
  5027  00ED                     _map$2842:	
  5028                           ; 1 bytes @ 0x4D
  5029                           
  5030                           
  5031                           ; 3 bytes @ 0x4D
  5032  00ED                     	ds	3
  5033  00F0                     ??_scaleA10kPot:	
  5034  00F0                     ??_scaleiA10kPot:	
  5035                           ; 1 bytes @ 0x50
  5036                           
  5037  00F0                     ??_scaleA100kPot:	
  5038                           ; 1 bytes @ 0x50
  5039                           
  5040  00F0                     ??_set_subdivision:	
  5041                           ; 1 bytes @ 0x50
  5042                           
  5043  00F0                     ??_getModulationDelayTime:	
  5044                           ; 1 bytes @ 0x50
  5045                           
  5046  00F0                     ??_cos:	
  5047                           ; 1 bytes @ 0x50
  5048                           
  5049  00F0                     ??_modTri:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  00F0                     ??_modSquare:	
  5053                           ; 1 bytes @ 0x50
  5054                           
  5055  00F0                     ??_modSaw:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  00F0                     ??_eval_poly:	
  5059                           ; 1 bytes @ 0x50
  5060                           
  5061  00F0                     ??___wmul:	
  5062                           ; 1 bytes @ 0x50
  5063                           
  5064  00F0                     ??___ftsub:	
  5065                           ; 1 bytes @ 0x50
  5066                           
  5067                           
  5068                           	psect	cstackCOMMON
  5069  0070                     __pcstackCOMMON:	
  5070                           ; 1 bytes @ 0x50
  5071                           
  5072  0070                     ?_calcCosArray:	
  5073  0070                     ?_ConfigureOscillator:	
  5074                           ; 1 bytes @ 0x0
  5075                           
  5076  0070                     ?_InitApp:	
  5077                           ; 1 bytes @ 0x0
  5078                           
  5079  0070                     ?_InitializeTaps:	
  5080                           ; 1 bytes @ 0x0
  5081                           
  5082  0070                     ?_initSwitchBypass:	
  5083                           ; 1 bytes @ 0x0
  5084                           
  5085  0070                     ?_ReadSavedSettings:	
  5086                           ; 1 bytes @ 0x0
  5087                           
  5088  0070                     ?_update_mode:	
  5089                           ; 1 bytes @ 0x0
  5090                           
  5091  0070                     ?_update_selectMode:	
  5092                           ; 1 bytes @ 0x0
  5093                           
  5094  0070                     ?_updateSwitchBypass:	
  5095                           ; 1 bytes @ 0x0
  5096                           
  5097  0070                     ?_updateSwitchTap:	
  5098                           ; 1 bytes @ 0x0
  5099                           
  5100  0070                     ?_read_bottom_tactile:	
  5101                           ; 1 bytes @ 0x0
  5102                           
  5103  0070                     ?_read_top_tactile:	
  5104                           ; 1 bytes @ 0x0
  5105                           
  5106  0070                     ?_getModulationDelayTime:	
  5107                           ; 1 bytes @ 0x0
  5108                           
  5109  0070                     ?_updateModulationArray:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_init_adc:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_init_pwm:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_init_timer2:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_init_timer0:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_solidring_tactiles:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?_ring_tactiles:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?_resetRingLEDs:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?_setPedalMode:	
  5134                           ; 1 bytes @ 0x0
  5135                           
  5136  0070                     ?_setPresetDisplay:	
  5137                           ; 1 bytes @ 0x0
  5138                           
  5139  0070                     ?_setExpressionDisplay:	
  5140                           ; 1 bytes @ 0x0
  5141                           
  5142  0070                     ?_isr:	
  5143                           ; 1 bytes @ 0x0
  5144                           
  5145  0070                     ?_main:	
  5146                           ; 1 bytes @ 0x0
  5147                           
  5148  0070                     ?_showSave:	
  5149                           ; 1 bytes @ 0x0
  5150                           
  5151  0070                     ?i1_set_leds_top:	
  5152                           ; 1 bytes @ 0x0
  5153                           
  5154  0070                     ?i1_getModulationSubdivision:	
  5155                           ; 1 bytes @ 0x0
  5156                           
  5157  0070                     ?i1___awdiv:	
  5158                           ; 2 bytes @ 0x0
  5159                           
  5160  0070                     ?i1___lmul:	
  5161                           ; 2 bytes @ 0x0
  5162                           
  5163  0070                     i1set_leds_top@x:	
  5164                           ; 4 bytes @ 0x0
  5165                           
  5166  0070                     i1___awdiv@divisor:	
  5167                           ; 2 bytes @ 0x0
  5168                           
  5169  0070                     i1___lmul@multiplier:	
  5170                           ; 2 bytes @ 0x0
  5171                           
  5172                           
  5173                           ; 4 bytes @ 0x0
  5174  0070                     	ds	2
  5175  0072                     ??i1_getModulationSubdivision:	
  5176  0072                     i1set_leds_top@ledState:	
  5177                           ; 1 bytes @ 0x2
  5178                           
  5179  0072                     i1___awdiv@dividend:	
  5180                           ; 2 bytes @ 0x2
  5181                           
  5182                           
  5183                           ; 2 bytes @ 0x2
  5184  0072                     	ds	2
  5185  0074                     ??i1_set_leds_top:	
  5186  0074                     ??i1___awdiv:	
  5187                           ; 1 bytes @ 0x4
  5188                           
  5189  0074                     i1___lmul@multiplicand:	
  5190                           ; 1 bytes @ 0x4
  5191                           
  5192                           
  5193                           ; 4 bytes @ 0x4
  5194  0074                     	ds	1
  5195  0075                     i1___awdiv@counter:	
  5196                           
  5197                           ; 1 bytes @ 0x5
  5198  0075                     	ds	1
  5199  0076                     i1___awdiv@sign:	
  5200                           
  5201                           ; 1 bytes @ 0x6
  5202  0076                     	ds	1
  5203  0077                     i1___awdiv@quotient:	
  5204                           
  5205                           ; 2 bytes @ 0x7
  5206  0077                     	ds	1
  5207  0078                     ??i1___lmul:	
  5208  0078                     i1___lmul@product:	
  5209                           ; 1 bytes @ 0x8
  5210                           
  5211                           
  5212                           ; 4 bytes @ 0x8
  5213  0078                     	ds	4
  5214  007C                     ??i1___aldiv:	
  5215                           
  5216                           ; 1 bytes @ 0xC
  5217  007C                     	ds	1
  5218  007D                     isr@subDiv:	
  5219                           
  5220                           ; 1 bytes @ 0xD
  5221  007D                     	ds	1
  5222                           
  5223                           	psect	cstackBANK0
  5224  0020                     __pcstackBANK0:	
  5225  0020                     ?i1___aldiv:	
  5226  0020                     i1___aldiv@divisor:	
  5227                           ; 4 bytes @ 0x0
  5228                           
  5229                           
  5230                           ; 4 bytes @ 0x0
  5231  0020                     	ds	4
  5232  0024                     i1___aldiv@dividend:	
  5233                           
  5234                           ; 4 bytes @ 0x4
  5235  0024                     	ds	4
  5236  0028                     i1___aldiv@counter:	
  5237                           
  5238                           ; 1 bytes @ 0x8
  5239  0028                     	ds	1
  5240  0029                     i1___aldiv@sign:	
  5241                           
  5242                           ; 1 bytes @ 0x9
  5243  0029                     	ds	1
  5244  002A                     i1___aldiv@quotient:	
  5245                           
  5246                           ; 4 bytes @ 0xA
  5247  002A                     	ds	4
  5248  002E                     ?_modulation:	
  5249  002E                     modulation@x:	
  5250                           ; 4 bytes @ 0xE
  5251                           
  5252                           
  5253                           ; 4 bytes @ 0xE
  5254  002E                     	ds	4
  5255  0032                     modulation@y:	
  5256                           
  5257                           ; 4 bytes @ 0x12
  5258  0032                     	ds	4
  5259  0036                     ??_modulation:	
  5260                           
  5261                           ; 1 bytes @ 0x16
  5262  0036                     	ds	4
  5263  003A                     ??_isr:	
  5264                           
  5265                           ; 1 bytes @ 0x1A
  5266  003A                     	ds	6
  5267                           
  5268                           	psect	maintext
  5269  0376                     __pmaintext:	
  5270 ;;
  5271 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  5272 ;;
  5273 ;; *************** function _main *****************
  5274 ;; Defined at:
  5275 ;;		line 69 in file "main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : B1F/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       8       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5293 ;;Total ram usage:       17 bytes
  5294 ;; Hardware stack levels required when called:    9
  5295 ;; This function calls:
  5296 ;;		_ConfigureOscillator
  5297 ;;		_InitApp
  5298 ;;		_InitializeTaps
  5299 ;;		_ReadSavedSettings
  5300 ;;		_USARTInit
  5301 ;;		___awtoft
  5302 ;;		___fttol
  5303 ;;		_adc_convert
  5304 ;;		_calcCosArray
  5305 ;;		_getModulationDelayTime
  5306 ;;		_initSwitchBypass
  5307 ;;		_map
  5308 ;;		_read_bottom_tactile
  5309 ;;		_read_top_tactile
  5310 ;;		_scaleA100kPot
  5311 ;;		_scaleA10kPot
  5312 ;;		_scaleiA10kPot
  5313 ;;		_set_subdivision
  5314 ;;		_updateModulationArray
  5315 ;;		_updateSwitchBypass
  5316 ;;		_updateSwitchTap
  5317 ;;		_update_mode
  5318 ;;		_update_selectMode
  5319 ;; This function is called by:
  5320 ;;		Startup code after reset
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _main
  5326  0376                     _main:	
  5327                           
  5328                           ;main.c: 71: calcCosArray();
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5332  0376  31A7  277F  3183   	fcall	_calcCosArray
  5333                           
  5334                           ;main.c: 79: USARTInit(31250);
  5335  0379  3012               	movlw	18
  5336  037A  0021               	movlb	1	; select bank1
  5337  037B  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5338  037C  307A               	movlw	122
  5339  037D  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5340  037E  31A2  229F  3183   	fcall	_USARTInit
  5341                           
  5342                           ;main.c: 80: ConfigureOscillator();
  5343  0381  31AC  24E0  3183   	fcall	_ConfigureOscillator
  5344                           
  5345                           ;main.c: 81: InitApp();
  5346  0384  31AF  2732  3183   	fcall	_InitApp
  5347                           
  5348                           ;main.c: 83: PORTEbits.RE0 = 1;
  5349  0387  0020               	movlb	0	; select bank0
  5350  0388  1410               	bsf	16,0	;volatile
  5351                           
  5352                           ;main.c: 84: PORTEbits.RE1 = 1;
  5353  0389  1490               	bsf	16,1	;volatile
  5354                           
  5355                           ;main.c: 85: PORTDbits.RD6 = 1;
  5356  038A  170F               	bsf	15,6	;volatile
  5357                           
  5358                           ;main.c: 86: PORTDbits.RD5 = 1;
  5359  038B  168F               	bsf	15,5	;volatile
  5360                           
  5361                           ;main.c: 87: PORTCbits.RC0 = 1;
  5362  038C  140E               	bsf	14,0	;volatile
  5363                           
  5364                           ;main.c: 88: PORTDbits.RD7 = 1;
  5365  038D  178F               	bsf	15,7	;volatile
  5366                           
  5367                           ;main.c: 90: InitializeTaps();
  5368  038E  3198  2000  3183   	fcall	_InitializeTaps
  5369                           
  5370                           ;main.c: 91: initSwitchBypass();
  5371  0391  31AD  2517  3183   	fcall	_initSwitchBypass
  5372                           
  5373                           ;main.c: 94: ReadSavedSettings();
  5374  0394  31A6  268D  3183   	fcall	_ReadSavedSettings
  5375  0397                     l9304:	
  5376                           ;main.c: 96: while (1) {
  5377                           
  5378                           
  5379                           ;main.c: 99: update_mode();
  5380  0397  31AF  27C8  3183   	fcall	_update_mode
  5381                           
  5382                           ;main.c: 100: update_selectMode();
  5383  039A  31A5  255D  3183   	fcall	_update_selectMode
  5384                           
  5385                           ;main.c: 103: updateSwitchBypass();
  5386  039D  3192  2241  3183   	fcall	_updateSwitchBypass
  5387                           
  5388                           ;main.c: 104: if (presetSaveMode != 1) {
  5389  03A0  0020               	movlb	0	; select bank0
  5390  03A1  035F               	decf	_presetSaveMode,w
  5391  03A2  1903               	btfsc	3,2
  5392  03A3  2BA7               	goto	l9314
  5393                           
  5394                           ;main.c: 105: updateSwitchTap();
  5395  03A4  318B  23D2  3183   	fcall	_updateSwitchTap
  5396  03A7                     l9314:	
  5397                           
  5398                           ;main.c: 106: }
  5399                           ;main.c: 108: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5400  03A7  0020               	movlb	0	; select bank0
  5401  03A8  035F               	decf	_presetSaveMode,w
  5402  03A9  1903               	btfsc	3,2
  5403  03AA  2BB6               	goto	l9320
  5404  03AB  085E               	movf	_mode2_state,w
  5405  03AC  0023               	movlb	3	; select bank3
  5406  03AD  0665               	xorwf	_presetModeCnst^(0+384),w
  5407  03AE  1903               	skipnz
  5408  03AF  2BB6               	goto	l9320
  5409                           
  5410                           ;main.c: 109: read_bottom_tactile();
  5411  03B0  31A3  232B  3183   	fcall	_read_bottom_tactile
  5412                           
  5413                           ;main.c: 110: read_top_tactile();
  5414  03B3  31A3  2375  3183   	fcall	_read_top_tactile
  5415  03B6                     l9320:	
  5416                           
  5417                           ;main.c: 111: }
  5418                           ;main.c: 114: knob_1_pos = adc_convert(0);
  5419  03B6  3000               	movlw	0
  5420  03B7  31AD  2538  3183   	fcall	_adc_convert
  5421  03BA  0021               	movlb	1	; select bank1
  5422  03BB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5423  03BC  0023               	movlb	3	; select bank3
  5424  03BD  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5425  03BE  0021               	movlb	1	; select bank1
  5426  03BF  0820               	movf	?_adc_convert^(0+128),w
  5427  03C0  0023               	movlb	3	; select bank3
  5428  03C1  00AC               	movwf	_knob_1_pos^(0+384)
  5429                           
  5430                           ;main.c: 115: knob_2_pos = adc_convert(1);
  5431  03C2  3001               	movlw	1
  5432  03C3  31AD  2538  3183   	fcall	_adc_convert
  5433  03C6  0021               	movlb	1	; select bank1
  5434  03C7  0821               	movf	(?_adc_convert+1)^(0+128),w
  5435  03C8  0023               	movlb	3	; select bank3
  5436  03C9  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5437  03CA  0021               	movlb	1	; select bank1
  5438  03CB  0820               	movf	?_adc_convert^(0+128),w
  5439  03CC  0023               	movlb	3	; select bank3
  5440  03CD  00AE               	movwf	_knob_2_pos^(0+384)
  5441                           
  5442                           ;main.c: 116: knob_3_pos = adc_convert(2);
  5443  03CE  3002               	movlw	2
  5444  03CF  31AD  2538  3183   	fcall	_adc_convert
  5445  03D2  0021               	movlb	1	; select bank1
  5446  03D3  0821               	movf	(?_adc_convert+1)^(0+128),w
  5447  03D4  0023               	movlb	3	; select bank3
  5448  03D5  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5449  03D6  0021               	movlb	1	; select bank1
  5450  03D7  0820               	movf	?_adc_convert^(0+128),w
  5451  03D8  0023               	movlb	3	; select bank3
  5452  03D9  00B0               	movwf	_knob_3_pos^(0+384)
  5453                           
  5454                           ;main.c: 117: knob_4_pos = adc_convert(3);
  5455  03DA  3003               	movlw	3
  5456  03DB  31AD  2538  3183   	fcall	_adc_convert
  5457  03DE  0021               	movlb	1	; select bank1
  5458  03DF  0821               	movf	(?_adc_convert+1)^(0+128),w
  5459  03E0  0023               	movlb	3	; select bank3
  5460  03E1  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5461  03E2  0021               	movlb	1	; select bank1
  5462  03E3  0820               	movf	?_adc_convert^(0+128),w
  5463  03E4  0023               	movlb	3	; select bank3
  5464  03E5  00B2               	movwf	_knob_4_pos^(0+384)
  5465                           
  5466                           ;main.c: 118: knob_5_pos = adc_convert(4);
  5467  03E6  3004               	movlw	4
  5468  03E7  31AD  2538  3183   	fcall	_adc_convert
  5469  03EA  0021               	movlb	1	; select bank1
  5470  03EB  0821               	movf	(?_adc_convert+1)^(0+128),w
  5471  03EC  0023               	movlb	3	; select bank3
  5472  03ED  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5473  03EE  0021               	movlb	1	; select bank1
  5474  03EF  0820               	movf	?_adc_convert^(0+128),w
  5475  03F0  0023               	movlb	3	; select bank3
  5476  03F1  00B4               	movwf	_knob_5_pos^(0+384)
  5477                           
  5478                           ;main.c: 122: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5479  03F2  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5480  03F3  0024               	movlb	4	; select bank4
  5481  03F4  00DE               	movwf	??_main^(0+512)
  5482  03F5  0023               	movlb	3	; select bank3
  5483  03F6  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5484  03F7  0024               	movlb	4	; select bank4
  5485  03F8  00DF               	movwf	(??_main^(0+512)+1)
  5486  03F9  0ADE               	incf	??_main^(0+512),f
  5487  03FA  1903               	skipnz
  5488  03FB  0ADF               	incf	(??_main^(0+512)+1),f
  5489  03FC  0023               	movlb	3	; select bank3
  5490  03FD  082C               	movf	_knob_1_pos^(0+384),w
  5491  03FE  0024               	movlb	4	; select bank4
  5492  03FF  075E               	addwf	??_main^(0+512),w
  5493  0400  00E0               	movwf	(??_main+2)^(0+512)
  5494  0401  0023               	movlb	3	; select bank3
  5495  0402  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5496  0403  0024               	movlb	4	; select bank4
  5497  0404  3D5F               	addwfc	(??_main+1)^(0+512),w
  5498  0405  00E1               	movwf	(??_main+3)^(0+512)
  5499  0406  0861               	movf	(??_main+3)^(0+512),w
  5500  0407  3A80               	xorlw	128
  5501  0408  00E2               	movwf	(??_main+4)^(0+512)
  5502  0409  3080               	movlw	128
  5503  040A  0262               	subwf	(??_main+4)^(0+512),w
  5504  040B  1D03               	skipz
  5505  040C  2C0F               	goto	u10325
  5506  040D  3004               	movlw	4
  5507  040E  0260               	subwf	(??_main+2)^(0+512),w
  5508  040F                     u10325:	
  5509  040F  1803               	skipnc
  5510  0410  2C31               	goto	l9334
  5511  0411  0023               	movlb	3	; select bank3
  5512  0412  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5513  0413  0024               	movlb	4	; select bank4
  5514  0414  00DE               	movwf	??_main^(0+512)
  5515  0415  0023               	movlb	3	; select bank3
  5516  0416  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5517  0417  0024               	movlb	4	; select bank4
  5518  0418  00DF               	movwf	(??_main^(0+512)+1)
  5519  0419  0ADE               	incf	??_main^(0+512),f
  5520  041A  1903               	skipnz
  5521  041B  0ADF               	incf	(??_main^(0+512)+1),f
  5522  041C  0023               	movlb	3	; select bank3
  5523  041D  082C               	movf	_knob_1_pos^(0+384),w
  5524  041E  0024               	movlb	4	; select bank4
  5525  041F  075E               	addwf	??_main^(0+512),w
  5526  0420  00E0               	movwf	(??_main+2)^(0+512)
  5527  0421  0023               	movlb	3	; select bank3
  5528  0422  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5529  0423  0024               	movlb	4	; select bank4
  5530  0424  3D5F               	addwfc	(??_main+1)^(0+512),w
  5531  0425  00E1               	movwf	(??_main+3)^(0+512)
  5532  0426  0861               	movf	(??_main+3)^(0+512),w
  5533  0427  3A80               	xorlw	128
  5534  0428  00E2               	movwf	(??_main+4)^(0+512)
  5535  0429  307F               	movlw	127
  5536  042A  0262               	subwf	(??_main+4)^(0+512),w
  5537  042B  1D03               	skipz
  5538  042C  2C2F               	goto	u10335
  5539  042D  30FD               	movlw	253
  5540  042E  0260               	subwf	(??_main+2)^(0+512),w
  5541  042F                     u10335:	
  5542  042F  1803               	skipnc
  5543  0430  2C8F               	goto	l9344
  5544  0431                     l9334:	
  5545                           
  5546                           ;main.c: 123: knob1_prev = knob_1_pos;
  5547  0431  0023               	movlb	3	; select bank3
  5548  0432  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5549  0433  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5550  0434  082C               	movf	_knob_1_pos^(0+384),w
  5551  0435  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5552                           
  5553                           ;main.c: 124: CCPR4 = scaleA10kPot(knob1_prev);
  5554  0436  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5555  0437  0021               	movlb	1	; select bank1
  5556  0438  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5557  0439  0023               	movlb	3	; select bank3
  5558  043A  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5559  043B  0021               	movlb	1	; select bank1
  5560  043C  00A8               	movwf	___awtoft@c^(0+128)
  5561  043D  31AE  263A  3183   	fcall	___awtoft
  5562  0440  0021               	movlb	1	; select bank1
  5563  0441  0828               	movf	?___awtoft^(0+128),w
  5564  0442  0025               	movlb	5	; select bank5
  5565  0443  00CC               	movwf	_main$2839^(0+640)
  5566  0444  0021               	movlb	1	; select bank1
  5567  0445  0829               	movf	(?___awtoft+1)^(0+128),w
  5568  0446  0025               	movlb	5	; select bank5
  5569  0447  00CD               	movwf	(_main$2839+1)^(0+640)
  5570  0448  0021               	movlb	1	; select bank1
  5571  0449  082A               	movf	(?___awtoft+2)^(0+128),w
  5572  044A  0025               	movlb	5	; select bank5
  5573  044B  00CE               	movwf	(_main$2839+2)^(0+640)
  5574                           
  5575                           ;main.c: 124: CCPR4 = scaleA10kPot(knob1_prev);
  5576  044C  084C               	movf	_main$2839^(0+640),w
  5577  044D  0022               	movlb	2	; select bank2
  5578  044E  00E7               	movwf	scaleA10kPot@input^(0+256)
  5579  044F  0025               	movlb	5	; select bank5
  5580  0450  084D               	movf	(_main$2839+1)^(0+640),w
  5581  0451  0022               	movlb	2	; select bank2
  5582  0452  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5583  0453  0025               	movlb	5	; select bank5
  5584  0454  084E               	movf	(_main$2839+2)^(0+640),w
  5585  0455  0022               	movlb	2	; select bank2
  5586  0456  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5587  0457  319B  234C  3183   	fcall	_scaleA10kPot
  5588  045A  0022               	movlb	2	; select bank2
  5589  045B  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5590  045C  0026               	movlb	6	; select bank6
  5591  045D  0099               	movwf	25	;volatile
  5592  045E  0022               	movlb	2	; select bank2
  5593  045F  0867               	movf	?_scaleA10kPot^(0+256),w
  5594  0460  0026               	movlb	6	; select bank6
  5595  0461  0098               	movwf	24	;volatile
  5596                           
  5597                           ;main.c: 125: CCPR5 = scaleiA10kPot(knob1_prev);
  5598  0462  0023               	movlb	3	; select bank3
  5599  0463  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5600  0464  0021               	movlb	1	; select bank1
  5601  0465  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5602  0466  0023               	movlb	3	; select bank3
  5603  0467  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5604  0468  0021               	movlb	1	; select bank1
  5605  0469  00A8               	movwf	___awtoft@c^(0+128)
  5606  046A  31AE  263A  3183   	fcall	___awtoft
  5607  046D  0021               	movlb	1	; select bank1
  5608  046E  0828               	movf	?___awtoft^(0+128),w
  5609  046F  0025               	movlb	5	; select bank5
  5610  0470  00CF               	movwf	_main$2840^(0+640)
  5611  0471  0021               	movlb	1	; select bank1
  5612  0472  0829               	movf	(?___awtoft+1)^(0+128),w
  5613  0473  0025               	movlb	5	; select bank5
  5614  0474  00D0               	movwf	(_main$2840+1)^(0+640)
  5615  0475  0021               	movlb	1	; select bank1
  5616  0476  082A               	movf	(?___awtoft+2)^(0+128),w
  5617  0477  0025               	movlb	5	; select bank5
  5618  0478  00D1               	movwf	(_main$2840+2)^(0+640)
  5619                           
  5620                           ;main.c: 125: CCPR5 = scaleiA10kPot(knob1_prev);
  5621  0479  084F               	movf	_main$2840^(0+640),w
  5622  047A  0022               	movlb	2	; select bank2
  5623  047B  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5624  047C  0025               	movlb	5	; select bank5
  5625  047D  0850               	movf	(_main$2840+1)^(0+640),w
  5626  047E  0022               	movlb	2	; select bank2
  5627  047F  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5628  0480  0025               	movlb	5	; select bank5
  5629  0481  0851               	movf	(_main$2840+2)^(0+640),w
  5630  0482  0022               	movlb	2	; select bank2
  5631  0483  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5632  0484  319D  251D  3183   	fcall	_scaleiA10kPot
  5633  0487  0022               	movlb	2	; select bank2
  5634  0488  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5635  0489  0026               	movlb	6	; select bank6
  5636  048A  009D               	movwf	29	;volatile
  5637  048B  0022               	movlb	2	; select bank2
  5638  048C  0867               	movf	?_scaleiA10kPot^(0+256),w
  5639  048D  0026               	movlb	6	; select bank6
  5640  048E  009C               	movwf	28	;volatile
  5641  048F                     l9344:	
  5642                           
  5643                           ;main.c: 127: }
  5644                           ;main.c: 131: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5645  048F  0023               	movlb	3	; select bank3
  5646  0490  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5647  0491  0024               	movlb	4	; select bank4
  5648  0492  00DE               	movwf	??_main^(0+512)
  5649  0493  0023               	movlb	3	; select bank3
  5650  0494  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5651  0495  0024               	movlb	4	; select bank4
  5652  0496  00DF               	movwf	(??_main^(0+512)+1)
  5653  0497  0ADE               	incf	??_main^(0+512),f
  5654  0498  1903               	skipnz
  5655  0499  0ADF               	incf	(??_main^(0+512)+1),f
  5656  049A  0023               	movlb	3	; select bank3
  5657  049B  082E               	movf	_knob_2_pos^(0+384),w
  5658  049C  0024               	movlb	4	; select bank4
  5659  049D  075E               	addwf	??_main^(0+512),w
  5660  049E  00E0               	movwf	(??_main+2)^(0+512)
  5661  049F  0023               	movlb	3	; select bank3
  5662  04A0  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5663  04A1  0024               	movlb	4	; select bank4
  5664  04A2  3D5F               	addwfc	(??_main+1)^(0+512),w
  5665  04A3  00E1               	movwf	(??_main+3)^(0+512)
  5666  04A4  0861               	movf	(??_main+3)^(0+512),w
  5667  04A5  3A80               	xorlw	128
  5668  04A6  00E2               	movwf	(??_main+4)^(0+512)
  5669  04A7  3080               	movlw	128
  5670  04A8  0262               	subwf	(??_main+4)^(0+512),w
  5671  04A9  1D03               	skipz
  5672  04AA  2CAD               	goto	u10345
  5673  04AB  3004               	movlw	4
  5674  04AC  0260               	subwf	(??_main+2)^(0+512),w
  5675  04AD                     u10345:	
  5676  04AD  1803               	skipnc
  5677  04AE  2CCF               	goto	l9348
  5678  04AF  0023               	movlb	3	; select bank3
  5679  04B0  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5680  04B1  0024               	movlb	4	; select bank4
  5681  04B2  00DE               	movwf	??_main^(0+512)
  5682  04B3  0023               	movlb	3	; select bank3
  5683  04B4  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5684  04B5  0024               	movlb	4	; select bank4
  5685  04B6  00DF               	movwf	(??_main^(0+512)+1)
  5686  04B7  0ADE               	incf	??_main^(0+512),f
  5687  04B8  1903               	skipnz
  5688  04B9  0ADF               	incf	(??_main^(0+512)+1),f
  5689  04BA  0023               	movlb	3	; select bank3
  5690  04BB  082E               	movf	_knob_2_pos^(0+384),w
  5691  04BC  0024               	movlb	4	; select bank4
  5692  04BD  075E               	addwf	??_main^(0+512),w
  5693  04BE  00E0               	movwf	(??_main+2)^(0+512)
  5694  04BF  0023               	movlb	3	; select bank3
  5695  04C0  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5696  04C1  0024               	movlb	4	; select bank4
  5697  04C2  3D5F               	addwfc	(??_main+1)^(0+512),w
  5698  04C3  00E1               	movwf	(??_main+3)^(0+512)
  5699  04C4  0861               	movf	(??_main+3)^(0+512),w
  5700  04C5  3A80               	xorlw	128
  5701  04C6  00E2               	movwf	(??_main+4)^(0+512)
  5702  04C7  307F               	movlw	127
  5703  04C8  0262               	subwf	(??_main+4)^(0+512),w
  5704  04C9  1D03               	skipz
  5705  04CA  2CCD               	goto	u10355
  5706  04CB  30FD               	movlw	253
  5707  04CC  0260               	subwf	(??_main+2)^(0+512),w
  5708  04CD                     u10355:	
  5709  04CD  1803               	skipnc
  5710  04CE  2D45               	goto	l366
  5711  04CF                     l9348:	
  5712                           
  5713                           ;main.c: 132: knob2_prev = knob_2_pos;
  5714  04CF  0023               	movlb	3	; select bank3
  5715  04D0  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5716  04D1  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5717  04D2  082E               	movf	_knob_2_pos^(0+384),w
  5718  04D3  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5719                           
  5720                           ;main.c: 133: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5721  04D4  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5722  04D5  0024               	movlb	4	; select bank4
  5723  04D6  00DE               	movwf	??_main^(0+512)
  5724  04D7  0023               	movlb	3	; select bank3
  5725  04D8  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5726  04D9  0024               	movlb	4	; select bank4
  5727  04DA  00DF               	movwf	(??_main^(0+512)+1)
  5728  04DB  0ADE               	incf	??_main^(0+512),f
  5729  04DC  1903               	skipnz
  5730  04DD  0ADF               	incf	(??_main^(0+512)+1),f
  5731  04DE  085E               	movf	??_main^(0+512),w
  5732  04DF  3EFF               	addlw	255
  5733  04E0  0021               	movlb	1	; select bank1
  5734  04E1  00A8               	movwf	___awtoft@c^(0+128)
  5735  04E2  3003               	movlw	3
  5736  04E3  0024               	movlb	4	; select bank4
  5737  04E4  3D5F               	addwfc	(??_main+1)^(0+512),w
  5738  04E5  0021               	movlb	1	; select bank1
  5739  04E6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5740  04E7  31AE  263A  3183   	fcall	___awtoft
  5741  04EA  0021               	movlb	1	; select bank1
  5742  04EB  0828               	movf	?___awtoft^(0+128),w
  5743  04EC  0025               	movlb	5	; select bank5
  5744  04ED  00D2               	movwf	_main$2841^(0+640)
  5745  04EE  0021               	movlb	1	; select bank1
  5746  04EF  0829               	movf	(?___awtoft+1)^(0+128),w
  5747  04F0  0025               	movlb	5	; select bank5
  5748  04F1  00D3               	movwf	(_main$2841+1)^(0+640)
  5749  04F2  0021               	movlb	1	; select bank1
  5750  04F3  082A               	movf	(?___awtoft+2)^(0+128),w
  5751  04F4  0025               	movlb	5	; select bank5
  5752  04F5  00D4               	movwf	(_main$2841+2)^(0+640)
  5753                           
  5754                           ;main.c: 133: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5755  04F6  0852               	movf	_main$2841^(0+640),w
  5756  04F7  0022               	movlb	2	; select bank2
  5757  04F8  00E7               	movwf	scaleA100kPot@input^(0+256)
  5758  04F9  0025               	movlb	5	; select bank5
  5759  04FA  0853               	movf	(_main$2841+1)^(0+640),w
  5760  04FB  0022               	movlb	2	; select bank2
  5761  04FC  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5762  04FD  0025               	movlb	5	; select bank5
  5763  04FE  0854               	movf	(_main$2841+2)^(0+640),w
  5764  04FF  0022               	movlb	2	; select bank2
  5765  0500  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5766  0501  3199  212A  3183   	fcall	_scaleA100kPot
  5767  0504  0022               	movlb	2	; select bank2
  5768  0505  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5769  0506  0025               	movlb	5	; select bank5
  5770  0507  0092               	movwf	18	;volatile
  5771  0508  0022               	movlb	2	; select bank2
  5772  0509  0867               	movf	?_scaleA100kPot^(0+256),w
  5773  050A  0025               	movlb	5	; select bank5
  5774  050B  0091               	movwf	17	;volatile
  5775                           
  5776                           ;main.c: 134: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5777  050C  0023               	movlb	3	; select bank3
  5778  050D  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5779  050E  0024               	movlb	4	; select bank4
  5780  050F  00DE               	movwf	??_main^(0+512)
  5781  0510  0023               	movlb	3	; select bank3
  5782  0511  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5783  0512  0024               	movlb	4	; select bank4
  5784  0513  00DF               	movwf	(??_main^(0+512)+1)
  5785  0514  0ADE               	incf	??_main^(0+512),f
  5786  0515  1903               	skipnz
  5787  0516  0ADF               	incf	(??_main^(0+512)+1),f
  5788  0517  085E               	movf	??_main^(0+512),w
  5789  0518  3EFF               	addlw	255
  5790  0519  0021               	movlb	1	; select bank1
  5791  051A  00A8               	movwf	___awtoft@c^(0+128)
  5792  051B  3003               	movlw	3
  5793  051C  0024               	movlb	4	; select bank4
  5794  051D  3D5F               	addwfc	(??_main+1)^(0+512),w
  5795  051E  0021               	movlb	1	; select bank1
  5796  051F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5797  0520  31AE  263A  3183   	fcall	___awtoft
  5798  0523  0021               	movlb	1	; select bank1
  5799  0524  0828               	movf	?___awtoft^(0+128),w
  5800  0525  0025               	movlb	5	; select bank5
  5801  0526  00D2               	movwf	_main$2841^(0+640)
  5802  0527  0021               	movlb	1	; select bank1
  5803  0528  0829               	movf	(?___awtoft+1)^(0+128),w
  5804  0529  0025               	movlb	5	; select bank5
  5805  052A  00D3               	movwf	(_main$2841+1)^(0+640)
  5806  052B  0021               	movlb	1	; select bank1
  5807  052C  082A               	movf	(?___awtoft+2)^(0+128),w
  5808  052D  0025               	movlb	5	; select bank5
  5809  052E  00D4               	movwf	(_main$2841+2)^(0+640)
  5810                           
  5811                           ;main.c: 134: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5812  052F  0852               	movf	_main$2841^(0+640),w
  5813  0530  0022               	movlb	2	; select bank2
  5814  0531  00E7               	movwf	scaleA100kPot@input^(0+256)
  5815  0532  0025               	movlb	5	; select bank5
  5816  0533  0853               	movf	(_main$2841+1)^(0+640),w
  5817  0534  0022               	movlb	2	; select bank2
  5818  0535  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5819  0536  0025               	movlb	5	; select bank5
  5820  0537  0854               	movf	(_main$2841+2)^(0+640),w
  5821  0538  0022               	movlb	2	; select bank2
  5822  0539  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5823  053A  3199  212A  3183   	fcall	_scaleA100kPot
  5824  053D  0022               	movlb	2	; select bank2
  5825  053E  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5826  053F  0025               	movlb	5	; select bank5
  5827  0540  0099               	movwf	25	;volatile
  5828  0541  0022               	movlb	2	; select bank2
  5829  0542  0867               	movf	?_scaleA100kPot^(0+256),w
  5830  0543  0025               	movlb	5	; select bank5
  5831  0544  0098               	movwf	24	;volatile
  5832  0545                     l366:	
  5833                           
  5834                           ;main.c: 135: }
  5835                           ;main.c: 145: oldSymmetry = symmetry;
  5836  0545  0023               	movlb	3	; select bank3
  5837  0546  085C               	movf	(_symmetry+1)^(0+384),w
  5838  0547  0024               	movlb	4	; select bank4
  5839  0548  00D8               	movwf	(_oldSymmetry+1)^(0+512)
  5840  0549  0023               	movlb	3	; select bank3
  5841  054A  085B               	movf	_symmetry^(0+384),w
  5842  054B  0024               	movlb	4	; select bank4
  5843  054C  00D7               	movwf	_oldSymmetry^(0+512)
  5844                           
  5845                           ;main.c: 146: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5846  054D  0023               	movlb	3	; select bank3
  5847  054E  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5848  054F  0024               	movlb	4	; select bank4
  5849  0550  00DE               	movwf	??_main^(0+512)
  5850  0551  0023               	movlb	3	; select bank3
  5851  0552  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5852  0553  0024               	movlb	4	; select bank4
  5853  0554  00DF               	movwf	(??_main^(0+512)+1)
  5854  0555  0ADE               	incf	??_main^(0+512),f
  5855  0556  1903               	skipnz
  5856  0557  0ADF               	incf	(??_main^(0+512)+1),f
  5857  0558  0023               	movlb	3	; select bank3
  5858  0559  0830               	movf	_knob_3_pos^(0+384),w
  5859  055A  0024               	movlb	4	; select bank4
  5860  055B  075E               	addwf	??_main^(0+512),w
  5861  055C  00E0               	movwf	(??_main+2)^(0+512)
  5862  055D  0023               	movlb	3	; select bank3
  5863  055E  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5864  055F  0024               	movlb	4	; select bank4
  5865  0560  3D5F               	addwfc	(??_main+1)^(0+512),w
  5866  0561  00E1               	movwf	(??_main+3)^(0+512)
  5867  0562  0861               	movf	(??_main+3)^(0+512),w
  5868  0563  3A80               	xorlw	128
  5869  0564  00E2               	movwf	(??_main+4)^(0+512)
  5870  0565  3080               	movlw	128
  5871  0566  0262               	subwf	(??_main+4)^(0+512),w
  5872  0567  1D03               	skipz
  5873  0568  2D6B               	goto	u10365
  5874  0569  3004               	movlw	4
  5875  056A  0260               	subwf	(??_main+2)^(0+512),w
  5876  056B                     u10365:	
  5877  056B  1803               	skipnc
  5878  056C  2D8D               	goto	l9362
  5879  056D  0023               	movlb	3	; select bank3
  5880  056E  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5881  056F  0024               	movlb	4	; select bank4
  5882  0570  00DE               	movwf	??_main^(0+512)
  5883  0571  0023               	movlb	3	; select bank3
  5884  0572  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5885  0573  0024               	movlb	4	; select bank4
  5886  0574  00DF               	movwf	(??_main^(0+512)+1)
  5887  0575  0ADE               	incf	??_main^(0+512),f
  5888  0576  1903               	skipnz
  5889  0577  0ADF               	incf	(??_main^(0+512)+1),f
  5890  0578  0023               	movlb	3	; select bank3
  5891  0579  0830               	movf	_knob_3_pos^(0+384),w
  5892  057A  0024               	movlb	4	; select bank4
  5893  057B  075E               	addwf	??_main^(0+512),w
  5894  057C  00E0               	movwf	(??_main+2)^(0+512)
  5895  057D  0023               	movlb	3	; select bank3
  5896  057E  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5897  057F  0024               	movlb	4	; select bank4
  5898  0580  3D5F               	addwfc	(??_main+1)^(0+512),w
  5899  0581  00E1               	movwf	(??_main+3)^(0+512)
  5900  0582  0861               	movf	(??_main+3)^(0+512),w
  5901  0583  3A80               	xorlw	128
  5902  0584  00E2               	movwf	(??_main+4)^(0+512)
  5903  0585  307F               	movlw	127
  5904  0586  0262               	subwf	(??_main+4)^(0+512),w
  5905  0587  1D03               	skipz
  5906  0588  2D8B               	goto	u10375
  5907  0589  30FD               	movlw	253
  5908  058A  0260               	subwf	(??_main+2)^(0+512),w
  5909  058B                     u10375:	
  5910  058B  1803               	skipnc
  5911  058C  2DF7               	goto	l9372
  5912  058D                     l9362:	
  5913                           
  5914                           ;main.c: 147: knob3_prev = knob_3_pos;
  5915  058D  0023               	movlb	3	; select bank3
  5916  058E  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5917  058F  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5918  0590  0830               	movf	_knob_3_pos^(0+384),w
  5919  0591  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5920                           
  5921                           ;main.c: 148: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5922  0592  3080               	movlw	128
  5923  0593  0021               	movlb	1	; select bank1
  5924  0594  00EA               	movwf	map@out_max^(0+128)
  5925  0595  309D               	movlw	157
  5926  0596  00EB               	movwf	(map@out_max+1)^(0+128)
  5927  0597  3043               	movlw	67
  5928  0598  00EC               	movwf	(map@out_max+2)^(0+128)
  5929  0599  3000               	movlw	0
  5930  059A  00E7               	movwf	map@out_min^(0+128)
  5931  059B  3034               	movlw	52
  5932  059C  00E8               	movwf	(map@out_min+1)^(0+128)
  5933  059D  3042               	movlw	66
  5934  059E  00E9               	movwf	(map@out_min+2)^(0+128)
  5935  059F  30C0               	movlw	192
  5936  05A0  00E4               	movwf	map@in_max^(0+128)
  5937  05A1  307F               	movlw	127
  5938  05A2  00E5               	movwf	(map@in_max+1)^(0+128)
  5939  05A3  3044               	movlw	68
  5940  05A4  00E6               	movwf	(map@in_max+2)^(0+128)
  5941  05A5  3000               	movlw	0
  5942  05A6  00E1               	movwf	map@in_min^(0+128)
  5943  05A7  3000               	movlw	0
  5944  05A8  00E2               	movwf	(map@in_min+1)^(0+128)
  5945  05A9  3000               	movlw	0
  5946  05AA  00E3               	movwf	(map@in_min+2)^(0+128)
  5947  05AB  0023               	movlb	3	; select bank3
  5948  05AC  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5949  05AD  0021               	movlb	1	; select bank1
  5950  05AE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5951  05AF  0023               	movlb	3	; select bank3
  5952  05B0  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5953  05B1  0021               	movlb	1	; select bank1
  5954  05B2  00A8               	movwf	___awtoft@c^(0+128)
  5955  05B3  31AE  263A  3183   	fcall	___awtoft
  5956  05B6  0021               	movlb	1	; select bank1
  5957  05B7  0828               	movf	?___awtoft^(0+128),w
  5958  05B8  00DE               	movwf	map@x^(0+128)
  5959  05B9  0829               	movf	(?___awtoft+1)^(0+128),w
  5960  05BA  00DF               	movwf	(map@x+1)^(0+128)
  5961  05BB  082A               	movf	(?___awtoft+2)^(0+128),w
  5962  05BC  00E0               	movwf	(map@x+2)^(0+128)
  5963  05BD  319A  2236  3183   	fcall	_map
  5964  05C0  0021               	movlb	1	; select bank1
  5965  05C1  085E               	movf	?_map^(0+128),w
  5966  05C2  0022               	movlb	2	; select bank2
  5967  05C3  00A0               	movwf	___fttol@f1^(0+256)
  5968  05C4  0021               	movlb	1	; select bank1
  5969  05C5  085F               	movf	(?_map+1)^(0+128),w
  5970  05C6  0022               	movlb	2	; select bank2
  5971  05C7  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5972  05C8  0021               	movlb	1	; select bank1
  5973  05C9  0860               	movf	(?_map+2)^(0+128),w
  5974  05CA  0022               	movlb	2	; select bank2
  5975  05CB  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5976  05CC  3199  21AF  3183   	fcall	___fttol
  5977  05CF  0022               	movlb	2	; select bank2
  5978  05D0  0821               	movf	(?___fttol^(0+256)+1),w
  5979  05D1  0023               	movlb	3	; select bank3
  5980  05D2  00DC               	movwf	(_symmetry+1)^(0+384)
  5981  05D3  0022               	movlb	2	; select bank2
  5982  05D4  0820               	movf	?___fttol^(0+256),w
  5983  05D5  0023               	movlb	3	; select bank3
  5984  05D6  00DB               	movwf	_symmetry^(0+384)
  5985                           
  5986                           ;main.c: 150: if (symmetry > 174 && symmetry < 185) {
  5987  05D7  085C               	movf	(_symmetry+1)^(0+384),w
  5988  05D8  3A80               	xorlw	128
  5989  05D9  0024               	movlb	4	; select bank4
  5990  05DA  00DE               	movwf	??_main^(0+512)
  5991  05DB  3080               	movlw	128
  5992  05DC  025E               	subwf	??_main^(0+512),w
  5993  05DD  1D03               	skipz
  5994  05DE  2DE2               	goto	u10385
  5995  05DF  30AF               	movlw	175
  5996  05E0  0023               	movlb	3	; select bank3
  5997  05E1  025B               	subwf	_symmetry^(0+384),w
  5998  05E2                     u10385:	
  5999  05E2  1C03               	skipc
  6000  05E3  2DF5               	goto	l372
  6001  05E4  0023               	movlb	3	; select bank3
  6002  05E5  085C               	movf	(_symmetry+1)^(0+384),w
  6003  05E6  3A80               	xorlw	128
  6004  05E7  0024               	movlb	4	; select bank4
  6005  05E8  00DE               	movwf	??_main^(0+512)
  6006  05E9  3080               	movlw	128
  6007  05EA  025E               	subwf	??_main^(0+512),w
  6008  05EB  1D03               	skipz
  6009  05EC  2DF0               	goto	u10395
  6010  05ED  30B9               	movlw	185
  6011  05EE  0023               	movlb	3	; select bank3
  6012  05EF  025B               	subwf	_symmetry^(0+384),w
  6013  05F0                     u10395:	
  6014  05F0  1803               	skipnc
  6015  05F1  2DF5               	goto	l372
  6016                           
  6017                           ;main.c: 151: LATBbits.LATB1 = 1;
  6018  05F2  0022               	movlb	2	; select bank2
  6019  05F3  148D               	bsf	13,1	;volatile
  6020                           
  6021                           ;main.c: 152: } else {
  6022  05F4  2DF7               	goto	l9372
  6023  05F5                     l372:	
  6024                           
  6025                           ;main.c: 153: LATBbits.LATB1 = 0;
  6026  05F5  0022               	movlb	2	; select bank2
  6027  05F6  108D               	bcf	13,1	;volatile
  6028  05F7                     l9372:	
  6029                           
  6030                           ;main.c: 154: }
  6031                           ;main.c: 155: }
  6032                           ;main.c: 157: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
  6033  05F7  0023               	movlb	3	; select bank3
  6034  05F8  095B               	comf	_symmetry^(0+384),w
  6035  05F9  0024               	movlb	4	; select bank4
  6036  05FA  00DE               	movwf	??_main^(0+512)
  6037  05FB  0023               	movlb	3	; select bank3
  6038  05FC  095C               	comf	(_symmetry+1)^(0+384),w
  6039  05FD  0024               	movlb	4	; select bank4
  6040  05FE  00DF               	movwf	(??_main^(0+512)+1)
  6041  05FF  0ADE               	incf	??_main^(0+512),f
  6042  0600  1903               	skipnz
  6043  0601  0ADF               	incf	(??_main^(0+512)+1),f
  6044  0602  0857               	movf	_oldSymmetry^(0+512),w
  6045  0603  075E               	addwf	??_main^(0+512),w
  6046  0604  00E0               	movwf	(??_main+2)^(0+512)
  6047  0605  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6048  0606  3D5F               	addwfc	(??_main+1)^(0+512),w
  6049  0607  00E1               	movwf	(??_main+3)^(0+512)
  6050  0608  0861               	movf	(??_main+3)^(0+512),w
  6051  0609  3A80               	xorlw	128
  6052  060A  00E2               	movwf	(??_main+4)^(0+512)
  6053  060B  3080               	movlw	128
  6054  060C  0262               	subwf	(??_main+4)^(0+512),w
  6055  060D  1D03               	skipz
  6056  060E  2E11               	goto	u10405
  6057  060F  3002               	movlw	2
  6058  0610  0260               	subwf	(??_main+2)^(0+512),w
  6059  0611                     u10405:	
  6060  0611  1803               	skipnc
  6061  0612  2E2F               	goto	l376
  6062  0613  0023               	movlb	3	; select bank3
  6063  0614  095B               	comf	_symmetry^(0+384),w
  6064  0615  0024               	movlb	4	; select bank4
  6065  0616  00DE               	movwf	??_main^(0+512)
  6066  0617  0023               	movlb	3	; select bank3
  6067  0618  095C               	comf	(_symmetry+1)^(0+384),w
  6068  0619  0024               	movlb	4	; select bank4
  6069  061A  00DF               	movwf	(??_main^(0+512)+1)
  6070  061B  0ADE               	incf	??_main^(0+512),f
  6071  061C  1903               	skipnz
  6072  061D  0ADF               	incf	(??_main^(0+512)+1),f
  6073  061E  0857               	movf	_oldSymmetry^(0+512),w
  6074  061F  075E               	addwf	??_main^(0+512),w
  6075  0620  00E0               	movwf	(??_main+2)^(0+512)
  6076  0621  0858               	movf	(_oldSymmetry+1)^(0+512),w
  6077  0622  3D5F               	addwfc	(??_main+1)^(0+512),w
  6078  0623  00E1               	movwf	(??_main+3)^(0+512)
  6079  0624  0861               	movf	(??_main+3)^(0+512),w
  6080  0625  3A80               	xorlw	128
  6081  0626  00E2               	movwf	(??_main+4)^(0+512)
  6082  0627  307F               	movlw	127
  6083  0628  0262               	subwf	(??_main+4)^(0+512),w
  6084  0629  1D03               	skipz
  6085  062A  2E2D               	goto	u10415
  6086  062B  30FF               	movlw	255
  6087  062C  0260               	subwf	(??_main+2)^(0+512),w
  6088  062D                     u10415:	
  6089  062D  1803               	skipnc
  6090  062E  2E32               	goto	l9376
  6091  062F                     l376:	
  6092                           
  6093                           ;main.c: 159: modulation_changed = 1;
  6094  062F  0023               	movlb	3	; select bank3
  6095  0630  01C7               	clrf	_modulation_changed^(0+384)
  6096  0631  0AC7               	incf	_modulation_changed^(0+384),f
  6097  0632                     l9376:	
  6098                           
  6099                           ;main.c: 160: }
  6100                           ;main.c: 169: oldBaseTime = baseline_mod_time;
  6101  0632  0020               	movlb	0	; select bank0
  6102  0633  0841               	movf	_baseline_mod_time+1,w	;volatile
  6103  0634  0024               	movlb	4	; select bank4
  6104  0635  00D6               	movwf	(_oldBaseTime+1)^(0+512)
  6105  0636  0020               	movlb	0	; select bank0
  6106  0637  0840               	movf	_baseline_mod_time,w	;volatile
  6107  0638  0024               	movlb	4	; select bank4
  6108  0639  00D5               	movwf	_oldBaseTime^(0+512)
  6109                           
  6110                           ;main.c: 170: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6111  063A  0023               	movlb	3	; select bank3
  6112  063B  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6113  063C  0024               	movlb	4	; select bank4
  6114  063D  00DE               	movwf	??_main^(0+512)
  6115  063E  0023               	movlb	3	; select bank3
  6116  063F  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6117  0640  0024               	movlb	4	; select bank4
  6118  0641  00DF               	movwf	(??_main^(0+512)+1)
  6119  0642  0ADE               	incf	??_main^(0+512),f
  6120  0643  1903               	skipnz
  6121  0644  0ADF               	incf	(??_main^(0+512)+1),f
  6122  0645  0023               	movlb	3	; select bank3
  6123  0646  0832               	movf	_knob_4_pos^(0+384),w
  6124  0647  0024               	movlb	4	; select bank4
  6125  0648  075E               	addwf	??_main^(0+512),w
  6126  0649  00E0               	movwf	(??_main+2)^(0+512)
  6127  064A  0023               	movlb	3	; select bank3
  6128  064B  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6129  064C  0024               	movlb	4	; select bank4
  6130  064D  3D5F               	addwfc	(??_main+1)^(0+512),w
  6131  064E  00E1               	movwf	(??_main+3)^(0+512)
  6132  064F  0861               	movf	(??_main+3)^(0+512),w
  6133  0650  3A80               	xorlw	128
  6134  0651  00E2               	movwf	(??_main+4)^(0+512)
  6135  0652  3080               	movlw	128
  6136  0653  0262               	subwf	(??_main+4)^(0+512),w
  6137  0654  1D03               	skipz
  6138  0655  2E58               	goto	u10425
  6139  0656  3004               	movlw	4
  6140  0657  0260               	subwf	(??_main+2)^(0+512),w
  6141  0658                     u10425:	
  6142  0658  1803               	skipnc
  6143  0659  2E7A               	goto	l9382
  6144  065A  0023               	movlb	3	; select bank3
  6145  065B  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6146  065C  0024               	movlb	4	; select bank4
  6147  065D  00DE               	movwf	??_main^(0+512)
  6148  065E  0023               	movlb	3	; select bank3
  6149  065F  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6150  0660  0024               	movlb	4	; select bank4
  6151  0661  00DF               	movwf	(??_main^(0+512)+1)
  6152  0662  0ADE               	incf	??_main^(0+512),f
  6153  0663  1903               	skipnz
  6154  0664  0ADF               	incf	(??_main^(0+512)+1),f
  6155  0665  0023               	movlb	3	; select bank3
  6156  0666  0832               	movf	_knob_4_pos^(0+384),w
  6157  0667  0024               	movlb	4	; select bank4
  6158  0668  075E               	addwf	??_main^(0+512),w
  6159  0669  00E0               	movwf	(??_main+2)^(0+512)
  6160  066A  0023               	movlb	3	; select bank3
  6161  066B  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6162  066C  0024               	movlb	4	; select bank4
  6163  066D  3D5F               	addwfc	(??_main+1)^(0+512),w
  6164  066E  00E1               	movwf	(??_main+3)^(0+512)
  6165  066F  0861               	movf	(??_main+3)^(0+512),w
  6166  0670  3A80               	xorlw	128
  6167  0671  00E2               	movwf	(??_main+4)^(0+512)
  6168  0672  307F               	movlw	127
  6169  0673  0262               	subwf	(??_main+4)^(0+512),w
  6170  0674  1D03               	skipz
  6171  0675  2E78               	goto	u10435
  6172  0676  30FD               	movlw	253
  6173  0677  0260               	subwf	(??_main+2)^(0+512),w
  6174  0678                     u10435:	
  6175  0678  1803               	skipnc
  6176  0679  2EC9               	goto	l9386
  6177  067A                     l9382:	
  6178                           
  6179                           ;main.c: 171: knob4_prev = knob_4_pos;
  6180  067A  0023               	movlb	3	; select bank3
  6181  067B  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6182  067C  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6183  067D  0832               	movf	_knob_4_pos^(0+384),w
  6184  067E  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6185                           
  6186                           ;main.c: 172: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6187  067F  3040               	movlw	64
  6188  0680  0021               	movlb	1	; select bank1
  6189  0681  00EA               	movwf	map@out_max^(0+128)
  6190  0682  3030               	movlw	48
  6191  0683  00EB               	movwf	(map@out_max+1)^(0+128)
  6192  0684  3045               	movlw	69
  6193  0685  00EC               	movwf	(map@out_max+2)^(0+128)
  6194  0686  3000               	movlw	0
  6195  0687  00E7               	movwf	map@out_min^(0+128)
  6196  0688  3034               	movlw	52
  6197  0689  00E8               	movwf	(map@out_min+1)^(0+128)
  6198  068A  3043               	movlw	67
  6199  068B  00E9               	movwf	(map@out_min+2)^(0+128)
  6200  068C  30C0               	movlw	192
  6201  068D  00E4               	movwf	map@in_max^(0+128)
  6202  068E  307F               	movlw	127
  6203  068F  00E5               	movwf	(map@in_max+1)^(0+128)
  6204  0690  3044               	movlw	68
  6205  0691  00E6               	movwf	(map@in_max+2)^(0+128)
  6206  0692  3000               	movlw	0
  6207  0693  00E1               	movwf	map@in_min^(0+128)
  6208  0694  3000               	movlw	0
  6209  0695  00E2               	movwf	(map@in_min+1)^(0+128)
  6210  0696  3000               	movlw	0
  6211  0697  00E3               	movwf	(map@in_min+2)^(0+128)
  6212  0698  0023               	movlb	3	; select bank3
  6213  0699  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6214  069A  0021               	movlb	1	; select bank1
  6215  069B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6216  069C  0023               	movlb	3	; select bank3
  6217  069D  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6218  069E  0021               	movlb	1	; select bank1
  6219  069F  00A8               	movwf	___awtoft@c^(0+128)
  6220  06A0  31AE  263A  3183   	fcall	___awtoft
  6221  06A3  0021               	movlb	1	; select bank1
  6222  06A4  0828               	movf	?___awtoft^(0+128),w
  6223  06A5  00DE               	movwf	map@x^(0+128)
  6224  06A6  0829               	movf	(?___awtoft+1)^(0+128),w
  6225  06A7  00DF               	movwf	(map@x+1)^(0+128)
  6226  06A8  082A               	movf	(?___awtoft+2)^(0+128),w
  6227  06A9  00E0               	movwf	(map@x+2)^(0+128)
  6228  06AA  319A  2236  3183   	fcall	_map
  6229  06AD  0021               	movlb	1	; select bank1
  6230  06AE  085E               	movf	?_map^(0+128),w
  6231  06AF  0022               	movlb	2	; select bank2
  6232  06B0  00A0               	movwf	___fttol@f1^(0+256)
  6233  06B1  0021               	movlb	1	; select bank1
  6234  06B2  085F               	movf	(?_map+1)^(0+128),w
  6235  06B3  0022               	movlb	2	; select bank2
  6236  06B4  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6237  06B5  0021               	movlb	1	; select bank1
  6238  06B6  0860               	movf	(?_map+2)^(0+128),w
  6239  06B7  0022               	movlb	2	; select bank2
  6240  06B8  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6241  06B9  3199  21AF  3183   	fcall	___fttol
  6242  06BC  0022               	movlb	2	; select bank2
  6243  06BD  0820               	movf	?___fttol^(0+256),w
  6244  06BE  0020               	movlb	0	; select bank0
  6245  06BF  00C0               	movwf	_baseline_mod_time	;volatile
  6246  06C0  0022               	movlb	2	; select bank2
  6247  06C1  0821               	movf	(?___fttol^(0+256)+1),w
  6248  06C2  0020               	movlb	0	; select bank0
  6249  06C3  00C1               	movwf	_baseline_mod_time+1	;volatile
  6250  06C4  0D89               	rlf	9,f
  6251  06C5  3B89               	subwfb	9,f
  6252  06C6  0989               	comf	9,f
  6253  06C7  00C2               	movwf	_baseline_mod_time+2	;volatile
  6254  06C8  00C3               	movwf	_baseline_mod_time+3	;volatile
  6255  06C9                     l9386:	
  6256                           
  6257                           ;main.c: 173: }
  6258                           ;main.c: 175: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
  6259  06C9  0020               	movlb	0	; select bank0
  6260  06CA  0940               	comf	_baseline_mod_time,w	;volatile
  6261  06CB  0024               	movlb	4	; select bank4
  6262  06CC  00DE               	movwf	??_main^(0+512)
  6263  06CD  0020               	movlb	0	; select bank0
  6264  06CE  0941               	comf	_baseline_mod_time+1,w	;volatile
  6265  06CF  0024               	movlb	4	; select bank4
  6266  06D0  00DF               	movwf	(??_main^(0+512)+1)
  6267  06D1  0020               	movlb	0	; select bank0
  6268  06D2  0942               	comf	_baseline_mod_time+2,w	;volatile
  6269  06D3  0024               	movlb	4	; select bank4
  6270  06D4  00E0               	movwf	(??_main^(0+512)+2)
  6271  06D5  0020               	movlb	0	; select bank0
  6272  06D6  0943               	comf	_baseline_mod_time+3,w	;volatile
  6273  06D7  0024               	movlb	4	; select bank4
  6274  06D8  00E1               	movwf	(??_main^(0+512)+3)
  6275  06D9  0ADE               	incf	??_main^(0+512),f
  6276  06DA  1903               	skipnz
  6277  06DB  0ADF               	incf	(??_main^(0+512)+1),f
  6278  06DC  1903               	skipnz
  6279  06DD  0AE0               	incf	(??_main^(0+512)+2),f
  6280  06DE  1903               	skipnz
  6281  06DF  0AE1               	incf	(??_main^(0+512)+3),f
  6282  06E0  0855               	movf	_oldBaseTime^(0+512),w
  6283  06E1  00E2               	movwf	(??_main+4)^(0+512)
  6284  06E2  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6285  06E3  00E3               	movwf	((??_main+4)^(0+512)+1)
  6286  06E4  3000               	movlw	0
  6287  06E5  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6288  06E6  30FF               	movlw	255
  6289  06E7  00E4               	movwf	((??_main+4)^(0+512)+2)
  6290  06E8  00E5               	movwf	((??_main+4)^(0+512)+3)
  6291  06E9  0862               	movf	(??_main+4)^(0+512),w
  6292  06EA  07DE               	addwf	??_main^(0+512),f
  6293  06EB  0863               	movf	(??_main+5)^(0+512),w
  6294  06EC  3DDF               	addwfc	(??_main^(0+512)+1),f
  6295  06ED  0864               	movf	(??_main+6)^(0+512),w
  6296  06EE  3DE0               	addwfc	(??_main^(0+512)+2),f
  6297  06EF  0865               	movf	(??_main+7)^(0+512),w
  6298  06F0  3DE1               	addwfc	(??_main^(0+512)+3),f
  6299  06F1  1BE1               	btfsc	(??_main^(0+512)+3),7
  6300  06F2  2F00               	goto	l9388
  6301  06F3  0861               	movf	(??_main^(0+512)+3),w
  6302  06F4  1D03               	btfss	3,2
  6303  06F5  2F2A               	goto	l382
  6304  06F6  0860               	movf	(??_main^(0+512)+2),w
  6305  06F7  1D03               	btfss	3,2
  6306  06F8  2F2A               	goto	l382
  6307  06F9  085F               	movf	(??_main^(0+512)+1),w
  6308  06FA  1D03               	btfss	3,2
  6309  06FB  2F2A               	goto	l382
  6310  06FC  3001               	movlw	1
  6311  06FD  025E               	subwf	??_main^(0+512),w
  6312  06FE  1803               	btfsc	3,0
  6313  06FF  2F2A               	goto	l382
  6314  0700                     l9388:	
  6315  0700  0020               	movlb	0	; select bank0
  6316  0701  0940               	comf	_baseline_mod_time,w	;volatile
  6317  0702  0024               	movlb	4	; select bank4
  6318  0703  00DE               	movwf	??_main^(0+512)
  6319  0704  0020               	movlb	0	; select bank0
  6320  0705  0941               	comf	_baseline_mod_time+1,w	;volatile
  6321  0706  0024               	movlb	4	; select bank4
  6322  0707  00DF               	movwf	(??_main^(0+512)+1)
  6323  0708  0020               	movlb	0	; select bank0
  6324  0709  0942               	comf	_baseline_mod_time+2,w	;volatile
  6325  070A  0024               	movlb	4	; select bank4
  6326  070B  00E0               	movwf	(??_main^(0+512)+2)
  6327  070C  0020               	movlb	0	; select bank0
  6328  070D  0943               	comf	_baseline_mod_time+3,w	;volatile
  6329  070E  0024               	movlb	4	; select bank4
  6330  070F  00E1               	movwf	(??_main^(0+512)+3)
  6331  0710  0ADE               	incf	??_main^(0+512),f
  6332  0711  1903               	skipnz
  6333  0712  0ADF               	incf	(??_main^(0+512)+1),f
  6334  0713  1903               	skipnz
  6335  0714  0AE0               	incf	(??_main^(0+512)+2),f
  6336  0715  1903               	skipnz
  6337  0716  0AE1               	incf	(??_main^(0+512)+3),f
  6338  0717  0855               	movf	_oldBaseTime^(0+512),w
  6339  0718  00E2               	movwf	(??_main+4)^(0+512)
  6340  0719  0856               	movf	(_oldBaseTime+1)^(0+512),w
  6341  071A  00E3               	movwf	((??_main+4)^(0+512)+1)
  6342  071B  3000               	movlw	0
  6343  071C  1BE3               	btfsc	((??_main+4)^(0+512)+1),7
  6344  071D  30FF               	movlw	255
  6345  071E  00E4               	movwf	((??_main+4)^(0+512)+2)
  6346  071F  00E5               	movwf	((??_main+4)^(0+512)+3)
  6347  0720  0862               	movf	(??_main+4)^(0+512),w
  6348  0721  07DE               	addwf	??_main^(0+512),f
  6349  0722  0863               	movf	(??_main+5)^(0+512),w
  6350  0723  3DDF               	addwfc	(??_main^(0+512)+1),f
  6351  0724  0864               	movf	(??_main+6)^(0+512),w
  6352  0725  3DE0               	addwfc	(??_main^(0+512)+2),f
  6353  0726  0865               	movf	(??_main+7)^(0+512),w
  6354  0727  3DE1               	addwfc	(??_main^(0+512)+3),f
  6355  0728  1FE1               	btfss	(??_main+3)^(0+512),7
  6356  0729  2F2D               	goto	l9390
  6357  072A                     l382:	
  6358                           
  6359                           ;main.c: 177: mod_time_changed = 1;
  6360  072A  0023               	movlb	3	; select bank3
  6361  072B  01E4               	clrf	_mod_time_changed^(0+384)
  6362  072C  0AE4               	incf	_mod_time_changed^(0+384),f
  6363  072D                     l9390:	
  6364                           
  6365                           ;main.c: 179: }
  6366                           ;main.c: 182: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6367  072D  0023               	movlb	3	; select bank3
  6368  072E  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6369  072F  0024               	movlb	4	; select bank4
  6370  0730  00DE               	movwf	??_main^(0+512)
  6371  0731  0023               	movlb	3	; select bank3
  6372  0732  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6373  0733  0024               	movlb	4	; select bank4
  6374  0734  00DF               	movwf	(??_main^(0+512)+1)
  6375  0735  0ADE               	incf	??_main^(0+512),f
  6376  0736  1903               	skipnz
  6377  0737  0ADF               	incf	(??_main^(0+512)+1),f
  6378  0738  0023               	movlb	3	; select bank3
  6379  0739  0834               	movf	_knob_5_pos^(0+384),w
  6380  073A  0024               	movlb	4	; select bank4
  6381  073B  075E               	addwf	??_main^(0+512),w
  6382  073C  00E0               	movwf	(??_main+2)^(0+512)
  6383  073D  0023               	movlb	3	; select bank3
  6384  073E  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6385  073F  0024               	movlb	4	; select bank4
  6386  0740  3D5F               	addwfc	(??_main+1)^(0+512),w
  6387  0741  00E1               	movwf	(??_main+3)^(0+512)
  6388  0742  0861               	movf	(??_main+3)^(0+512),w
  6389  0743  3A80               	xorlw	128
  6390  0744  00E2               	movwf	(??_main+4)^(0+512)
  6391  0745  3080               	movlw	128
  6392  0746  0262               	subwf	(??_main+4)^(0+512),w
  6393  0747  1D03               	skipz
  6394  0748  2F4B               	goto	u10465
  6395  0749  3004               	movlw	4
  6396  074A  0260               	subwf	(??_main+2)^(0+512),w
  6397  074B                     u10465:	
  6398  074B  1803               	skipnc
  6399  074C  2F6D               	goto	l9394
  6400  074D  0023               	movlb	3	; select bank3
  6401  074E  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6402  074F  0024               	movlb	4	; select bank4
  6403  0750  00DE               	movwf	??_main^(0+512)
  6404  0751  0023               	movlb	3	; select bank3
  6405  0752  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6406  0753  0024               	movlb	4	; select bank4
  6407  0754  00DF               	movwf	(??_main^(0+512)+1)
  6408  0755  0ADE               	incf	??_main^(0+512),f
  6409  0756  1903               	skipnz
  6410  0757  0ADF               	incf	(??_main^(0+512)+1),f
  6411  0758  0023               	movlb	3	; select bank3
  6412  0759  0834               	movf	_knob_5_pos^(0+384),w
  6413  075A  0024               	movlb	4	; select bank4
  6414  075B  075E               	addwf	??_main^(0+512),w
  6415  075C  00E0               	movwf	(??_main+2)^(0+512)
  6416  075D  0023               	movlb	3	; select bank3
  6417  075E  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6418  075F  0024               	movlb	4	; select bank4
  6419  0760  3D5F               	addwfc	(??_main+1)^(0+512),w
  6420  0761  00E1               	movwf	(??_main+3)^(0+512)
  6421  0762  0861               	movf	(??_main+3)^(0+512),w
  6422  0763  3A80               	xorlw	128
  6423  0764  00E2               	movwf	(??_main+4)^(0+512)
  6424  0765  307F               	movlw	127
  6425  0766  0262               	subwf	(??_main+4)^(0+512),w
  6426  0767  1D03               	skipz
  6427  0768  2F6B               	goto	u10475
  6428  0769  30FD               	movlw	253
  6429  076A  0260               	subwf	(??_main+2)^(0+512),w
  6430  076B                     u10475:	
  6431  076B  1803               	skipnc
  6432  076C  2FB7               	goto	l9398
  6433  076D                     l9394:	
  6434                           
  6435                           ;main.c: 183: knob5_prev = knob_5_pos;
  6436  076D  0023               	movlb	3	; select bank3
  6437  076E  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6438  076F  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6439  0770  0834               	movf	_knob_5_pos^(0+384),w
  6440  0771  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6441                           
  6442                           ;main.c: 184: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6443  0772  3000               	movlw	0
  6444  0773  0021               	movlb	1	; select bank1
  6445  0774  00EA               	movwf	map@out_max^(0+128)
  6446  0775  3000               	movlw	0
  6447  0776  00EB               	movwf	(map@out_max+1)^(0+128)
  6448  0777  3000               	movlw	0
  6449  0778  00EC               	movwf	(map@out_max+2)^(0+128)
  6450  0779  3060               	movlw	96
  6451  077A  00E7               	movwf	map@out_min^(0+128)
  6452  077B  309F               	movlw	159
  6453  077C  00E8               	movwf	(map@out_min+1)^(0+128)
  6454  077D  3044               	movlw	68
  6455  077E  00E9               	movwf	(map@out_min+2)^(0+128)
  6456  077F  30C0               	movlw	192
  6457  0780  00E4               	movwf	map@in_max^(0+128)
  6458  0781  307F               	movlw	127
  6459  0782  00E5               	movwf	(map@in_max+1)^(0+128)
  6460  0783  3044               	movlw	68
  6461  0784  00E6               	movwf	(map@in_max+2)^(0+128)
  6462  0785  3000               	movlw	0
  6463  0786  00E1               	movwf	map@in_min^(0+128)
  6464  0787  3000               	movlw	0
  6465  0788  00E2               	movwf	(map@in_min+1)^(0+128)
  6466  0789  3000               	movlw	0
  6467  078A  00E3               	movwf	(map@in_min+2)^(0+128)
  6468  078B  0023               	movlb	3	; select bank3
  6469  078C  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6470  078D  0021               	movlb	1	; select bank1
  6471  078E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6472  078F  0023               	movlb	3	; select bank3
  6473  0790  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6474  0791  0021               	movlb	1	; select bank1
  6475  0792  00A8               	movwf	___awtoft@c^(0+128)
  6476  0793  31AE  263A  3183   	fcall	___awtoft
  6477  0796  0021               	movlb	1	; select bank1
  6478  0797  0828               	movf	?___awtoft^(0+128),w
  6479  0798  00DE               	movwf	map@x^(0+128)
  6480  0799  0829               	movf	(?___awtoft+1)^(0+128),w
  6481  079A  00DF               	movwf	(map@x+1)^(0+128)
  6482  079B  082A               	movf	(?___awtoft+2)^(0+128),w
  6483  079C  00E0               	movwf	(map@x+2)^(0+128)
  6484  079D  319A  2236  3183   	fcall	_map
  6485  07A0  0021               	movlb	1	; select bank1
  6486  07A1  085E               	movf	?_map^(0+128),w
  6487  07A2  0022               	movlb	2	; select bank2
  6488  07A3  00A0               	movwf	___fttol@f1^(0+256)
  6489  07A4  0021               	movlb	1	; select bank1
  6490  07A5  085F               	movf	(?_map+1)^(0+128),w
  6491  07A6  0022               	movlb	2	; select bank2
  6492  07A7  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6493  07A8  0021               	movlb	1	; select bank1
  6494  07A9  0860               	movf	(?_map+2)^(0+128),w
  6495  07AA  0022               	movlb	2	; select bank2
  6496  07AB  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6497  07AC  3199  21AF  3183   	fcall	___fttol
  6498  07AF  0022               	movlb	2	; select bank2
  6499  07B0  0821               	movf	(?___fttol^(0+256)+1),w
  6500  07B1  0024               	movlb	4	; select bank4
  6501  07B2  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6502  07B3  0022               	movlb	2	; select bank2
  6503  07B4  0820               	movf	?___fttol^(0+256),w
  6504  07B5  0024               	movlb	4	; select bank4
  6505  07B6  00C5               	movwf	_adjusted_pot_value^(0+512)
  6506  07B7                     l9398:	
  6507                           
  6508                           ;main.c: 185: }
  6509                           ;main.c: 190: if (mod_time_changed == 1) {
  6510  07B7  0023               	movlb	3	; select bank3
  6511  07B8  0364               	decf	_mod_time_changed^(0+384),w
  6512  07B9  1D03               	btfss	3,2
  6513  07BA  2FEA               	goto	l9410
  6514                           
  6515                           ;main.c: 192: delay_time = baseline_mod_time;
  6516  07BB  0020               	movlb	0	; select bank0
  6517  07BC  0843               	movf	_baseline_mod_time+3,w	;volatile
  6518  07BD  00C7               	movwf	_delay_time+3	;volatile
  6519  07BE  0842               	movf	_baseline_mod_time+2,w	;volatile
  6520  07BF  00C6               	movwf	_delay_time+2	;volatile
  6521  07C0  0841               	movf	_baseline_mod_time+1,w	;volatile
  6522  07C1  00C5               	movwf	_delay_time+1	;volatile
  6523  07C2  0840               	movf	_baseline_mod_time,w	;volatile
  6524  07C3  00C4               	movwf	_delay_time	;volatile
  6525                           
  6526                           ;main.c: 193: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6527  07C4  0841               	movf	_baseline_mod_time+1,w	;volatile
  6528  07C5  0022               	movlb	2	; select bank2
  6529  07C6  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6530  07C7  0020               	movlb	0	; select bank0
  6531  07C8  0840               	movf	_baseline_mod_time,w	;volatile
  6532  07C9  0022               	movlb	2	; select bank2
  6533  07CA  00AE               	movwf	set_subdivision@x^(0+256)
  6534  07CB  0020               	movlb	0	; select bank0
  6535  07CC  084D               	movf	_top_push_state+1,w
  6536  07CD  0022               	movlb	2	; select bank2
  6537  07CE  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6538  07CF  0020               	movlb	0	; select bank0
  6539  07D0  084C               	movf	_top_push_state,w
  6540  07D1  0022               	movlb	2	; select bank2
  6541  07D2  00B0               	movwf	set_subdivision@y^(0+256)
  6542  07D3  319A  22C1  3183   	fcall	_set_subdivision
  6543  07D6  0022               	movlb	2	; select bank2
  6544  07D7  082E               	movf	?_set_subdivision^(0+256),w
  6545  07D8  0020               	movlb	0	; select bank0
  6546  07D9  00C4               	movwf	_delay_time	;volatile
  6547  07DA  0022               	movlb	2	; select bank2
  6548  07DB  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6549  07DC  0020               	movlb	0	; select bank0
  6550  07DD  00C5               	movwf	_delay_time+1	;volatile
  6551  07DE  0D89               	rlf	9,f
  6552  07DF  3B89               	subwfb	9,f
  6553  07E0  0989               	comf	9,f
  6554  07E1  00C6               	movwf	_delay_time+2	;volatile
  6555  07E2  00C7               	movwf	_delay_time+3	;volatile
  6556                           
  6557                           ;main.c: 194: getModulationDelayTime();
  6558  07E3  31A4  24B6  3183   	fcall	_getModulationDelayTime
  6559                           
  6560                           ;main.c: 195: modulation_changed = 1;
  6561  07E6  0023               	movlb	3	; select bank3
  6562  07E7  01C7               	clrf	_modulation_changed^(0+384)
  6563  07E8  0AC7               	incf	_modulation_changed^(0+384),f
  6564                           
  6565                           ;main.c: 196: mod_time_changed = 0;
  6566  07E9  01E4               	clrf	_mod_time_changed^(0+384)
  6567  07EA                     l9410:	
  6568                           
  6569                           ;main.c: 198: }
  6570                           ;main.c: 201: if (modulation_changed == 1) {
  6571  07EA  0347               	decf	_modulation_changed^(0+384),w
  6572  07EB  1D03               	btfss	3,2
  6573  07EC  2B97               	goto	l9304
  6574                           
  6575                           ;main.c: 202: updateModulationArray();
  6576  07ED  318D  25BA  3183   	fcall	_updateModulationArray
  6577                           
  6578                           ;main.c: 203: isInitialized = 1;
  6579  07F0  0023               	movlb	3	; select bank3
  6580  07F1  01C1               	clrf	_isInitialized^(0+384)
  6581  07F2  0AC1               	incf	_isInitialized^(0+384),f
  6582  07F3  2B97               	goto	l9304
  6583  07F4                     __end_of_main:	
  6584                           
  6585                           	psect	text1
  6586  255D                     __ptext1:	
  6587 ;; *************** function _update_selectMode *****************
  6588 ;; Defined at:
  6589 ;;		line 139 in file "tactiles.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6605 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6606 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6607 ;;Total ram usage:        1 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    5
  6610 ;; This function calls:
  6611 ;;		_setExpressionDisplay
  6612 ;;		_setPresetDisplay
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _update_selectMode
  6620  255D                     _update_selectMode:	
  6621                           
  6622                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6626  255D  0020               	movlb	0	; select bank0
  6627  255E  085E               	movf	_mode2_state,w
  6628  255F  1D03               	btfss	3,2
  6629  2560  2D64               	goto	l1024
  6630  2561  035F               	decf	_presetSaveMode,w
  6631  2562  1D03               	btfss	3,2
  6632  2563  0008               	return
  6633  2564                     l1024:	
  6634                           ;tactiles.c: 142: return;
  6635                           
  6636                           
  6637                           ;tactiles.c: 143: }
  6638                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6639  2564  1B8F               	btfsc	15,7	;volatile
  6640  2565  2DB2               	goto	l8854
  6641                           
  6642                           ;tactiles.c: 145: debounce_mode1++;
  6643  2566  3001               	movlw	1
  6644  2567  0024               	movlb	4	; select bank4
  6645  2568  07CB               	addwf	_debounce_mode1^(0+512),f
  6646  2569  3000               	movlw	0
  6647  256A  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6648                           
  6649                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6650  256B  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6651  256C  3A80               	xorlw	128
  6652  256D  0021               	movlb	1	; select bank1
  6653  256E  00A7               	movwf	??_update_selectMode^(0+128)
  6654  256F  3080               	movlw	128
  6655  2570  0227               	subwf	??_update_selectMode^(0+128),w
  6656  2571  1D03               	skipz
  6657  2572  2D76               	goto	u9485
  6658  2573  301A               	movlw	26
  6659  2574  0024               	movlb	4	; select bank4
  6660  2575  024B               	subwf	_debounce_mode1^(0+512),w
  6661  2576                     u9485:	
  6662  2576  1C03               	skipc
  6663  2577  0008               	return
  6664                           
  6665                           ;tactiles.c: 147: debounce_mode1 = 25;
  6666  2578  3019               	movlw	25
  6667  2579  0024               	movlb	4	; select bank4
  6668  257A  00CB               	movwf	_debounce_mode1^(0+512)
  6669  257B  3000               	movlw	0
  6670  257C  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6671                           
  6672                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6673  257D  0020               	movlb	0	; select bank0
  6674  257E  085E               	movf	_mode2_state,w
  6675  257F  0023               	movlb	3	; select bank3
  6676  2580  0665               	xorwf	_presetModeCnst^(0+384),w
  6677  2581  1903               	skipnz
  6678  2582  2D87               	goto	l8836
  6679  2583  0020               	movlb	0	; select bank0
  6680  2584  035F               	decf	_presetSaveMode,w
  6681  2585  1D03               	btfss	3,2
  6682  2586  2D98               	goto	l8844
  6683  2587                     l8836:	
  6684                           
  6685                           ;tactiles.c: 149: presetChannel++;
  6686  2587  3001               	movlw	1
  6687  2588  0021               	movlb	1	; select bank1
  6688  2589  00A7               	movwf	??_update_selectMode^(0+128)
  6689  258A  0827               	movf	??_update_selectMode^(0+128),w
  6690  258B  0022               	movlb	2	; select bank2
  6691  258C  07EC               	addwf	_presetChannel^(0+256),f
  6692                           
  6693                           ;tactiles.c: 150: if (presetChannel > 10) {
  6694  258D  300B               	movlw	11
  6695  258E  026C               	subwf	_presetChannel^(0+256),w
  6696  258F  1C03               	skipc
  6697  2590  2D93               	goto	l8842
  6698                           
  6699                           ;tactiles.c: 151: presetChannel = 1;
  6700  2591  01EC               	clrf	_presetChannel^(0+256)
  6701  2592  0AEC               	incf	_presetChannel^(0+256),f
  6702  2593                     l8842:	
  6703                           
  6704                           ;tactiles.c: 152: }
  6705                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6706  2593  086C               	movf	_presetChannel^(0+256),w
  6707  2594  31A0  2035  31A5   	fcall	_setPresetDisplay
  6708                           
  6709                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6710  2597  2DAE               	goto	l1035
  6711  2598                     l8844:	
  6712  2598  0020               	movlb	0	; select bank0
  6713  2599  085E               	movf	_mode2_state,w
  6714  259A  0023               	movlb	3	; select bank3
  6715  259B  0662               	xorwf	_expressModeCnst^(0+384),w
  6716  259C  1D03               	skipz
  6717  259D  2DAE               	goto	l1035
  6718                           
  6719                           ;tactiles.c: 155: expressionChannel++;
  6720  259E  3001               	movlw	1
  6721  259F  0021               	movlb	1	; select bank1
  6722  25A0  00A7               	movwf	??_update_selectMode^(0+128)
  6723  25A1  0827               	movf	??_update_selectMode^(0+128),w
  6724  25A2  0023               	movlb	3	; select bank3
  6725  25A3  07E3               	addwf	_expressionChannel^(0+384),f
  6726                           
  6727                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6728  25A4  3006               	movlw	6
  6729  25A5  0263               	subwf	_expressionChannel^(0+384),w
  6730  25A6  1C03               	skipc
  6731  25A7  2DAA               	goto	l8852
  6732                           
  6733                           ;tactiles.c: 157: expressionChannel = 1;
  6734  25A8  01E3               	clrf	_expressionChannel^(0+384)
  6735  25A9  0AE3               	incf	_expressionChannel^(0+384),f
  6736  25AA                     l8852:	
  6737                           
  6738                           ;tactiles.c: 158: }
  6739                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6740  25AA  0863               	movf	_expressionChannel^(0+384),w
  6741  25AB  31AD  255F  31A5   	fcall	_setExpressionDisplay
  6742  25AE                     l1035:	
  6743                           ;tactiles.c: 160: }
  6744                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6745                           
  6746  25AE  0020               	movlb	0	; select bank0
  6747  25AF  1B8F               	btfsc	15,7	;volatile
  6748  25B0  0008               	return
  6749  25B1  2DAE               	goto	l1035
  6750  25B2                     l8854:	
  6751                           ;tactiles.c: 168: }
  6752                           ;tactiles.c: 169: }
  6753                           ;tactiles.c: 170: } else {
  6754                           
  6755                           
  6756                           ;tactiles.c: 171: debounce_mode1 = 0;
  6757  25B2  0024               	movlb	4	; select bank4
  6758  25B3  01CB               	clrf	_debounce_mode1^(0+512)
  6759  25B4  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6760  25B5  0008               	return
  6761  25B6                     __end_of_update_selectMode:	
  6762                           
  6763                           	psect	text2
  6764  2FC8                     __ptext2:	
  6765 ;; *************** function _update_mode *****************
  6766 ;; Defined at:
  6767 ;;		line 87 in file "tactiles.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;		None
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;		None
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6783 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6784 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6785 ;;Total ram usage:        1 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    6
  6788 ;; This function calls:
  6789 ;;		_resetRingLEDs
  6790 ;;		_setPedalMode
  6791 ;; This function is called by:
  6792 ;;		_main
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           
  6797                           ;psect for function _update_mode
  6798  2FC8                     _update_mode:	
  6799                           
  6800                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6801                           
  6802                           ;incstack = 0
  6803                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6804  2FC8  0020               	movlb	0	; select bank0
  6805  2FC9  180E               	btfsc	14,0	;volatile
  6806  2FCA  2FFC               	goto	l8822
  6807                           
  6808                           ;tactiles.c: 95: debounce_mode2++;
  6809  2FCB  3001               	movlw	1
  6810  2FCC  0024               	movlb	4	; select bank4
  6811  2FCD  07CD               	addwf	_debounce_mode2^(0+512),f
  6812  2FCE  3000               	movlw	0
  6813  2FCF  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6814                           
  6815                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6816  2FD0  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6817  2FD1  3A80               	xorlw	128
  6818  2FD2  0021               	movlb	1	; select bank1
  6819  2FD3  00A7               	movwf	??_update_mode^(0+128)
  6820  2FD4  3080               	movlw	128
  6821  2FD5  0227               	subwf	??_update_mode^(0+128),w
  6822  2FD6  1D03               	skipz
  6823  2FD7  2FDB               	goto	u9415
  6824  2FD8  301A               	movlw	26
  6825  2FD9  0024               	movlb	4	; select bank4
  6826  2FDA  024D               	subwf	_debounce_mode2^(0+512),w
  6827  2FDB                     u9415:	
  6828  2FDB  1C03               	skipc
  6829  2FDC  0008               	return
  6830                           
  6831                           ;tactiles.c: 97: debounce_mode2 = 25;
  6832  2FDD  3019               	movlw	25
  6833  2FDE  0024               	movlb	4	; select bank4
  6834  2FDF  00CD               	movwf	_debounce_mode2^(0+512)
  6835  2FE0  3000               	movlw	0
  6836  2FE1  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6837                           
  6838                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6839  2FE2  0020               	movlb	0	; select bank0
  6840  2FE3  035F               	decf	_presetSaveMode,w
  6841  2FE4  1D03               	btfss	3,2
  6842  2FE5  2FEB               	goto	l8814
  6843                           
  6844                           ;tactiles.c: 100: presetSaveMode = 0;
  6845  2FE6  01DF               	clrf	_presetSaveMode
  6846                           
  6847                           ;tactiles.c: 101: resetRingLEDs();
  6848  2FE7  31AD  2577  31AF   	fcall	_resetRingLEDs
  6849                           
  6850                           ;tactiles.c: 102: } else {
  6851  2FEA  2FF5               	goto	l8820
  6852  2FEB                     l8814:	
  6853                           
  6854                           ;tactiles.c: 103: mode2_state++;
  6855  2FEB  3001               	movlw	1
  6856  2FEC  0021               	movlb	1	; select bank1
  6857  2FED  00A7               	movwf	??_update_mode^(0+128)
  6858  2FEE  0827               	movf	??_update_mode^(0+128),w
  6859  2FEF  0020               	movlb	0	; select bank0
  6860  2FF0  07DE               	addwf	_mode2_state,f
  6861                           
  6862                           ;tactiles.c: 104: if (mode2_state > 2) {
  6863  2FF1  3003               	movlw	3
  6864  2FF2  025E               	subwf	_mode2_state,w
  6865  2FF3  1803               	btfsc	3,0
  6866                           
  6867                           ;tactiles.c: 105: mode2_state = 0;
  6868  2FF4  01DE               	clrf	_mode2_state
  6869  2FF5                     l8820:	
  6870                           
  6871                           ;tactiles.c: 106: }
  6872                           ;tactiles.c: 107: }
  6873                           ;tactiles.c: 109: setPedalMode();
  6874  2FF5  31AE  265C  31AF   	fcall	_setPedalMode
  6875  2FF8                     l1009:	
  6876                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6877                           
  6878  2FF8  0020               	movlb	0	; select bank0
  6879  2FF9  180E               	btfsc	14,0	;volatile
  6880  2FFA  0008               	return
  6881  2FFB  2FF8               	goto	l1009
  6882  2FFC                     l8822:	
  6883                           ;tactiles.c: 111: }
  6884                           ;tactiles.c: 112: }
  6885                           ;tactiles.c: 113: } else {
  6886                           
  6887                           
  6888                           ;tactiles.c: 114: debounce_mode2 = 0;
  6889  2FFC  0024               	movlb	4	; select bank4
  6890  2FFD  01CD               	clrf	_debounce_mode2^(0+512)
  6891  2FFE  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6892  2FFF  0008               	return
  6893  3000                     __end_of_update_mode:	
  6894                           
  6895                           	psect	text3
  6896  0BD2                     __ptext3:	
  6897 ;; *************** function _updateSwitchTap *****************
  6898 ;; Defined at:
  6899 ;;		line 48 in file "SwitchTap.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;		None
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6904 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6905 ;; Return value:  Size  Location     Type
  6906 ;;                  1    wreg      void 
  6907 ;; Registers used:
  6908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6915 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6916 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6917 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6918 ;;Total ram usage:        9 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    8
  6921 ;; This function calls:
  6922 ;;		___aldiv
  6923 ;;		_setDoublePressState
  6924 ;;		_setLongTapState
  6925 ;; This function is called by:
  6926 ;;		_main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _updateSwitchTap
  6932  0BD2                     _updateSwitchTap:	
  6933                           
  6934                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6938  0BD2  0021               	movlb	1	; select bank1
  6939  0BD3  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6940                           
  6941                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6942  0BD4  0020               	movlb	0	; select bank0
  6943  0BD5  1810               	btfsc	16,0	;volatile
  6944  0BD6  2BDE               	goto	l8976
  6945                           
  6946                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6947  0BD7  0022               	movlb	2	; select bank2
  6948  0BD8  086B               	movf	_switchTap_pressed^(0+256),w
  6949  0BD9  1903               	btfsc	3,2
  6950  0BDA  2BE9               	goto	l1442
  6951                           
  6952                           ;SwitchTap.c: 59: switchTap_pressed--;
  6953  0BDB  3001               	movlw	1
  6954  0BDC  02EB               	subwf	_switchTap_pressed^(0+256),f
  6955                           
  6956                           ;SwitchTap.c: 60: }
  6957                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6958  0BDD  2BE9               	goto	l1442
  6959  0BDE                     l8976:	
  6960  0BDE  3019               	movlw	25
  6961  0BDF  0022               	movlb	2	; select bank2
  6962  0BE0  026B               	subwf	_switchTap_pressed^(0+256),w
  6963  0BE1  1803               	skipnc
  6964  0BE2  2BE9               	goto	l1442
  6965                           
  6966                           ;SwitchTap.c: 62: switchTap_pressed++;
  6967  0BE3  3001               	movlw	1
  6968  0BE4  0021               	movlb	1	; select bank1
  6969  0BE5  00BC               	movwf	??_updateSwitchTap^(0+128)
  6970  0BE6  083C               	movf	??_updateSwitchTap^(0+128),w
  6971  0BE7  0022               	movlb	2	; select bank2
  6972  0BE8  07EB               	addwf	_switchTap_pressed^(0+256),f
  6973  0BE9                     l1442:	
  6974                           
  6975                           ;SwitchTap.c: 63: }
  6976                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6977  0BE9  086B               	movf	_switchTap_pressed^(0+256),w
  6978  0BEA  1D03               	btfss	3,2
  6979  0BEB  2DA1               	goto	l9060
  6980                           
  6981                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6982  0BEC  0020               	movlb	0	; select bank0
  6983  0BED  1BD5               	btfsc	_tap_timer+3,7	;volatile
  6984  0BEE  2C75               	goto	l9020
  6985  0BEF  0855               	movf	_tap_timer+3,w	;volatile
  6986  0BF0  1D03               	btfss	3,2
  6987  0BF1  2BFB               	goto	l8982
  6988  0BF2  0854               	movf	_tap_timer+2,w	;volatile
  6989  0BF3  1D03               	btfss	3,2
  6990  0BF4  2BFB               	goto	l8982
  6991  0BF5  301B               	movlw	27
  6992  0BF6  0252               	subwf	_tap_timer,w	;volatile
  6993  0BF7  3006               	movlw	6
  6994  0BF8  3B53               	subwfb	_tap_timer+1,w	;volatile
  6995  0BF9  1C03               	btfss	3,0
  6996  0BFA  2C75               	goto	l9020
  6997  0BFB                     l8982:	
  6998                           
  6999                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7000  0BFB  0023               	movlb	3	; select bank3
  7001  0BFC  034B               	decf	_switchTap_down^(0+384),w
  7002  0BFD  1903               	btfsc	3,2
  7003  0BFE  2C3A               	goto	l8998
  7004                           
  7005                           ;SwitchTap.c: 78: switchTap_down = 1;
  7006  0BFF  01CB               	clrf	_switchTap_down^(0+384)
  7007  0C00  0ACB               	incf	_switchTap_down^(0+384),f
  7008                           
  7009                           ;SwitchTap.c: 79: tap_timer = 0;
  7010  0C01  3000               	movlw	0
  7011  0C02  0020               	movlb	0	; select bank0
  7012  0C03  00D5               	movwf	_tap_timer+3	;volatile
  7013  0C04  3000               	movlw	0
  7014  0C05  00D4               	movwf	_tap_timer+2	;volatile
  7015  0C06  3000               	movlw	0
  7016  0C07  00D3               	movwf	_tap_timer+1	;volatile
  7017  0C08  3000               	movlw	0
  7018  0C09  00D2               	movwf	_tap_timer	;volatile
  7019                           
  7020                           ;SwitchTap.c: 80: tap_iteration = 1;
  7021  0C0A  3001               	movlw	1
  7022  0C0B  0023               	movlb	3	; select bank3
  7023  0C0C  00DD               	movwf	_tap_iteration^(0+384)
  7024  0C0D  3000               	movlw	0
  7025  0C0E  00DE               	movwf	(_tap_iteration^(0+384)+1)
  7026                           
  7027                           ;SwitchTap.c: 81: tap_total = 0;
  7028  0C0F  3000               	movlw	0
  7029  0C10  0024               	movlb	4	; select bank4
  7030  0C11  00C0               	movwf	(_tap_total+3)^(0+512)
  7031  0C12  3000               	movlw	0
  7032  0C13  00BF               	movwf	(_tap_total+2)^(0+512)
  7033  0C14  3000               	movlw	0
  7034  0C15  00BE               	movwf	(_tap_total+1)^(0+512)
  7035  0C16  3000               	movlw	0
  7036  0C17  00BD               	movwf	_tap_total^(0+512)
  7037                           
  7038                           ;SwitchTap.c: 82: mod_time_changed = 0;
  7039  0C18  0023               	movlb	3	; select bank3
  7040  0C19  01E4               	clrf	_mod_time_changed^(0+384)
  7041                           
  7042                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7043  0C1A  0021               	movlb	1	; select bank1
  7044  0C1B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7045  0C1C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7046  0C1D                     l8996:	
  7047  0C1D  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7048  0C1E  0020               	movlb	0	; select bank0
  7049  0C1F  0250               	subwf	_num_taps,w
  7050  0C20  1C03               	btfss	3,0
  7051  0C21  2C3A               	goto	l8998
  7052                           
  7053                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7054  0C22  0021               	movlb	1	; select bank1
  7055  0C23  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7056  0C24  00BC               	movwf	??_updateSwitchTap^(0+128)
  7057  0C25  3001               	movlw	1
  7058  0C26                     u9855:	
  7059  0C26  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7060  0C27  3EFF               	addlw	-1
  7061  0C28  1D03               	skipz
  7062  0C29  2C26               	goto	u9855
  7063  0C2A  353C               	lslf	??_updateSwitchTap^(0+128),w
  7064  0C2B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7065  0C2C  0086               	movwf	6
  7066  0C2D  3002               	movlw	2	; select bank4/5
  7067  0C2E  0087               	movwf	7
  7068  0C2F  3000               	movlw	0
  7069  0C30  3FC0               	movwi [0]fsr1
  7070  0C31  3000               	movlw	0
  7071  0C32  3FC1               	movwi [1]fsr1
  7072  0C33  3FC2               	movwi [2]fsr1
  7073  0C34  3FC3               	movwi [3]fsr1
  7074  0C35  3001               	movlw	1
  7075  0C36  00BC               	movwf	??_updateSwitchTap^(0+128)
  7076  0C37  083C               	movf	??_updateSwitchTap^(0+128),w
  7077  0C38  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7078  0C39  2C1D               	goto	l8996
  7079  0C3A                     l8998:	
  7080                           
  7081                           ;SwitchTap.c: 86: }
  7082                           ;SwitchTap.c: 87: }
  7083                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7084  0C3A  0023               	movlb	3	; select bank3
  7085  0C3B  0845               	movf	_longTap_start^(0+384),w
  7086  0C3C  1D03               	btfss	3,2
  7087  0C3D  2C45               	goto	l9004
  7088                           
  7089                           ;SwitchTap.c: 91: longTap_start = 1;
  7090  0C3E  01C5               	clrf	_longTap_start^(0+384)
  7091  0C3F  0AC5               	incf	_longTap_start^(0+384),f
  7092                           
  7093                           ;SwitchTap.c: 92: longTap_state = 0;
  7094  0C40  0020               	movlb	0	; select bank0
  7095  0C41  01CF               	clrf	_longTap_state	;volatile
  7096                           
  7097                           ;SwitchTap.c: 93: longTap_timer = 0;
  7098  0C42  0023               	movlb	3	; select bank3
  7099  0C43  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7100  0C44  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7101  0C45                     l9004:	
  7102                           
  7103                           ;SwitchTap.c: 94: }
  7104                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7105  0C45  0020               	movlb	0	; select bank0
  7106  0C46  084B               	movf	_long_press_limit+1,w
  7107  0C47  0023               	movlb	3	; select bank3
  7108  0C48  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7109  0C49  1D03               	skipz
  7110  0C4A  2C4F               	goto	u9885
  7111  0C4B  0020               	movlb	0	; select bank0
  7112  0C4C  084A               	movf	_long_press_limit,w
  7113  0C4D  0023               	movlb	3	; select bank3
  7114  0C4E  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  7115  0C4F                     u9885:	
  7116  0C4F  1C03               	skipc
  7117  0C50  0008               	return
  7118  0C51  0020               	movlb	0	; select bank0
  7119  0C52  084F               	movf	_longTap_state,w	;volatile
  7120  0C53  1D03               	btfss	3,2
  7121  0C54  0008               	return
  7122  0C55  085C               	movf	_doubleTap_state,w	;volatile
  7123  0C56  1D03               	btfss	3,2
  7124  0C57  0008               	return
  7125                           
  7126                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7127  0C58  084B               	movf	_long_press_limit+1,w
  7128  0C59  0023               	movlb	3	; select bank3
  7129  0C5A  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7130  0C5B  0020               	movlb	0	; select bank0
  7131  0C5C  084A               	movf	_long_press_limit,w
  7132  0C5D  0023               	movlb	3	; select bank3
  7133  0C5E  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  7134                           
  7135                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7136  0C5F  0022               	movlb	2	; select bank2
  7137  0C60  120D               	bcf	13,4	;volatile
  7138                           
  7139                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  7140  0C61  0023               	movlb	3	; select bank3
  7141  0C62  0344               	decf	_longBypass_start^(0+384),w
  7142  0C63  1903               	btfsc	3,2
  7143  0C64  2C6D               	goto	l9018
  7144                           
  7145                           ;SwitchTap.c: 104: setLongTapState(1);
  7146  0C65  3001               	movlw	1
  7147  0C66  0021               	movlb	1	; select bank1
  7148  0C67  00A0               	movwf	setLongTapState@f_state^(0+128)
  7149  0C68  3000               	movlw	0
  7150  0C69  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7151  0C6A  31AD  2591         	fcall	_setLongTapState
  7152                           
  7153                           ;SwitchTap.c: 105: } else {
  7154  0C6C  0008               	return
  7155  0C6D                     l9018:	
  7156                           
  7157                           ;SwitchTap.c: 106: setDoublePressState(1);
  7158  0C6D  3001               	movlw	1
  7159  0C6E  0021               	movlb	1	; select bank1
  7160  0C6F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7161  0C70  3000               	movlw	0
  7162  0C71  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7163  0C72  31A1  2160         	fcall	_setDoublePressState
  7164                           
  7165                           ;SwitchTap.c: 107: }
  7166                           ;SwitchTap.c: 108: }
  7167                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7168  0C74  0008               	return
  7169  0C75                     l9020:	
  7170  0C75  0020               	movlb	0	; select bank0
  7171  0C76  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7172  0C77  2C84               	goto	l9022
  7173  0C78  0855               	movf	_tap_timer+3,w	;volatile
  7174  0C79  1D03               	btfss	3,2
  7175  0C7A  0008               	return
  7176  0C7B  0854               	movf	_tap_timer+2,w	;volatile
  7177  0C7C  1D03               	btfss	3,2
  7178  0C7D  0008               	return
  7179  0C7E  301B               	movlw	27
  7180  0C7F  0252               	subwf	_tap_timer,w	;volatile
  7181  0C80  3006               	movlw	6
  7182  0C81  3B53               	subwfb	_tap_timer+1,w	;volatile
  7183  0C82  1803               	btfsc	3,0
  7184  0C83  0008               	return
  7185  0C84                     l9022:	
  7186  0C84  084F               	movf	_longTap_state,w	;volatile
  7187  0C85  1D03               	btfss	3,2
  7188  0C86  0008               	return
  7189  0C87  0023               	movlb	3	; select bank3
  7190  0C88  034B               	decf	_switchTap_down^(0+384),w
  7191  0C89  1903               	btfsc	3,2
  7192  0C8A  0008               	return
  7193                           
  7194                           ;SwitchTap.c: 112: switchTap_down = 1;
  7195  0C8B  01CB               	clrf	_switchTap_down^(0+384)
  7196  0C8C  0ACB               	incf	_switchTap_down^(0+384),f
  7197                           
  7198                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7199  0C8D  0020               	movlb	0	; select bank0
  7200  0C8E  1BD5               	btfsc	_tap_timer+3,7	;volatile
  7201  0C8F  2CA4               	goto	l1456
  7202  0C90  0855               	movf	_tap_timer+3,w	;volatile
  7203  0C91  1D03               	btfss	3,2
  7204  0C92  2C9C               	goto	l9030
  7205  0C93  0854               	movf	_tap_timer+2,w	;volatile
  7206  0C94  1D03               	btfss	3,2
  7207  0C95  2C9C               	goto	l9030
  7208  0C96  3094               	movlw	148
  7209  0C97  0252               	subwf	_tap_timer,w	;volatile
  7210  0C98  3004               	movlw	4
  7211  0C99  3B53               	subwfb	_tap_timer+1,w	;volatile
  7212  0C9A  1C03               	btfss	3,0
  7213  0C9B  2CA4               	goto	l1456
  7214  0C9C                     l9030:	
  7215                           
  7216                           ;SwitchTap.c: 114: tap_timer = 1172;
  7217  0C9C  3000               	movlw	0
  7218  0C9D  00D5               	movwf	_tap_timer+3	;volatile
  7219  0C9E  3000               	movlw	0
  7220  0C9F  00D4               	movwf	_tap_timer+2	;volatile
  7221  0CA0  3004               	movlw	4
  7222  0CA1  00D3               	movwf	_tap_timer+1	;volatile
  7223  0CA2  3094               	movlw	148
  7224  0CA3  00D2               	movwf	_tap_timer	;volatile
  7225  0CA4                     l1456:	
  7226                           
  7227                           ;SwitchTap.c: 115: }
  7228                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7229  0CA4  0850               	movf	_num_taps,w
  7230  0CA5  0021               	movlb	1	; select bank1
  7231  0CA6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7232  0CA7  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7233  0CA8  083C               	movf	??_updateSwitchTap^(0+128),w
  7234  0CA9  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7235  0CAA  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7236  0CAB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7237                           
  7238                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7239  0CAC  0023               	movlb	3	; select bank3
  7240  0CAD  085E               	movf	(_tap_iteration+1)^(0+384),w
  7241  0CAE  3A80               	xorlw	128
  7242  0CAF  3C80               	sublw	128
  7243  0CB0  1D03               	skipz
  7244  0CB1  2CB5               	goto	u9965
  7245  0CB2  085D               	movf	_tap_iteration^(0+384),w
  7246  0CB3  0020               	movlb	0	; select bank0
  7247  0CB4  0250               	subwf	_num_taps,w
  7248  0CB5                     u9965:	
  7249  0CB5  1C03               	skipc
  7250  0CB6  2CE7               	goto	l9038
  7251                           
  7252                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7253  0CB7  0020               	movlb	0	; select bank0
  7254  0CB8  0852               	movf	_tap_timer,w	;volatile
  7255  0CB9  0024               	movlb	4	; select bank4
  7256  0CBA  07BD               	addwf	_tap_total^(0+512),f
  7257  0CBB  0020               	movlb	0	; select bank0
  7258  0CBC  0853               	movf	_tap_timer+1,w	;volatile
  7259  0CBD  0024               	movlb	4	; select bank4
  7260  0CBE  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7261  0CBF  0020               	movlb	0	; select bank0
  7262  0CC0  0854               	movf	_tap_timer+2,w	;volatile
  7263  0CC1  0024               	movlb	4	; select bank4
  7264  0CC2  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7265  0CC3  0020               	movlb	0	; select bank0
  7266  0CC4  0855               	movf	_tap_timer+3,w	;volatile
  7267  0CC5  0024               	movlb	4	; select bank4
  7268  0CC6  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7269                           
  7270                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7271  0CC7  0023               	movlb	3	; select bank3
  7272  0CC8  085D               	movf	_tap_iteration^(0+384),w
  7273  0CC9  0021               	movlb	1	; select bank1
  7274  0CCA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7275  0CCB  3001               	movlw	1
  7276  0CCC                     u9975:	
  7277  0CCC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7278  0CCD  3EFF               	addlw	-1
  7279  0CCE  1D03               	skipz
  7280  0CCF  2CCC               	goto	u9975
  7281  0CD0  353C               	lslf	??_updateSwitchTap^(0+128),w
  7282  0CD1  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7283  0CD2  0086               	movwf	6
  7284  0CD3  3002               	movlw	2	; select bank4/5
  7285  0CD4  0087               	movwf	7
  7286  0CD5  0020               	movlb	0	; select bank0
  7287  0CD6  0852               	movf	_tap_timer,w	;volatile
  7288  0CD7  3FC0               	movwi [0]fsr1
  7289  0CD8  0853               	movf	_tap_timer+1,w	;volatile
  7290  0CD9  3FC1               	movwi [1]fsr1
  7291  0CDA  0854               	movf	_tap_timer+2,w	;volatile
  7292  0CDB  3FC2               	movwi [2]fsr1
  7293  0CDC  0855               	movf	_tap_timer+3,w	;volatile
  7294  0CDD  3FC3               	movwi [3]fsr1
  7295                           
  7296                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7297  0CDE  0023               	movlb	3	; select bank3
  7298  0CDF  085E               	movf	(_tap_iteration+1)^(0+384),w
  7299  0CE0  0021               	movlb	1	; select bank1
  7300  0CE1  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7301  0CE2  0023               	movlb	3	; select bank3
  7302  0CE3  085D               	movf	_tap_iteration^(0+384),w
  7303  0CE4  0021               	movlb	1	; select bank1
  7304  0CE5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7305                           
  7306                           ;SwitchTap.c: 122: } else {
  7307  0CE6  2D63               	goto	l9052
  7308  0CE7                     l9038:	
  7309                           
  7310                           ;SwitchTap.c: 123: tap_total = 0;
  7311  0CE7  3000               	movlw	0
  7312  0CE8  0024               	movlb	4	; select bank4
  7313  0CE9  00C0               	movwf	(_tap_total+3)^(0+512)
  7314  0CEA  3000               	movlw	0
  7315  0CEB  00BF               	movwf	(_tap_total+2)^(0+512)
  7316  0CEC  3000               	movlw	0
  7317  0CED  00BE               	movwf	(_tap_total+1)^(0+512)
  7318  0CEE  3000               	movlw	0
  7319  0CEF  00BD               	movwf	_tap_total^(0+512)
  7320                           
  7321                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7322  0CF0  0021               	movlb	1	; select bank1
  7323  0CF1  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7324  0CF2  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7325  0CF3                     l9046:	
  7326  0CF3  0020               	movlb	0	; select bank0
  7327  0CF4  0850               	movf	_num_taps,w
  7328  0CF5  0021               	movlb	1	; select bank1
  7329  0CF6  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7330  0CF7  1803               	btfsc	3,0
  7331  0CF8  2D3D               	goto	l9048
  7332                           
  7333                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7334  0CF9  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7335  0CFA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7336  0CFB  3001               	movlw	1
  7337  0CFC                     u9985:	
  7338  0CFC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7339  0CFD  3EFF               	addlw	-1
  7340  0CFE  1D03               	skipz
  7341  0CFF  2CFC               	goto	u9985
  7342  0D00  353C               	lslf	??_updateSwitchTap^(0+128),w
  7343  0D01  3E04               	addlw	4
  7344  0D02  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7345  0D03  0086               	movwf	6
  7346  0D04  3002               	movlw	2	; select bank4/5
  7347  0D05  0087               	movwf	7
  7348  0D06  3F40               	moviw [0]fsr1
  7349  0D07  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7350  0D08  3F41               	moviw [1]fsr1
  7351  0D09  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7352  0D0A  3F42               	moviw [2]fsr1
  7353  0D0B  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7354  0D0C  3F43               	moviw [3]fsr1
  7355  0D0D  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7356  0D0E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7357  0D0F  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7358  0D10  3001               	movlw	1
  7359  0D11                     u9995:	
  7360  0D11  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7361  0D12  3EFF               	addlw	-1
  7362  0D13  1D03               	skipz
  7363  0D14  2D11               	goto	u9995
  7364  0D15  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7365  0D16  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7366  0D17  0086               	movwf	6
  7367  0D18  3002               	movlw	2	; select bank4/5
  7368  0D19  0087               	movwf	7
  7369  0D1A  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7370  0D1B  3FC0               	movwi [0]fsr1
  7371  0D1C  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7372  0D1D  3FC1               	movwi [1]fsr1
  7373  0D1E  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7374  0D1F  3FC2               	movwi [2]fsr1
  7375  0D20  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7376  0D21  3FC3               	movwi [3]fsr1
  7377                           
  7378                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7379  0D22  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7380  0D23  00BC               	movwf	??_updateSwitchTap^(0+128)
  7381  0D24  3001               	movlw	1
  7382  0D25                     u10005:	
  7383  0D25  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7384  0D26  3EFF               	addlw	-1
  7385  0D27  1D03               	skipz
  7386  0D28  2D25               	goto	u10005
  7387  0D29  353C               	lslf	??_updateSwitchTap^(0+128),w
  7388  0D2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7389  0D2B  0086               	movwf	6
  7390  0D2C  3002               	movlw	2	; select bank4/5
  7391  0D2D  0087               	movwf	7
  7392  0D2E  3F40               	moviw [0]fsr1
  7393  0D2F  0024               	movlb	4	; select bank4
  7394  0D30  07BD               	addwf	_tap_total^(0+512),f
  7395  0D31  3F41               	moviw [1]fsr1
  7396  0D32  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7397  0D33  3F42               	moviw [2]fsr1
  7398  0D34  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7399  0D35  3F43               	moviw [3]fsr1
  7400  0D36  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7401  0D37  3001               	movlw	1
  7402  0D38  0021               	movlb	1	; select bank1
  7403  0D39  00BC               	movwf	??_updateSwitchTap^(0+128)
  7404  0D3A  083C               	movf	??_updateSwitchTap^(0+128),w
  7405  0D3B  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7406  0D3C  2CF3               	goto	l9046
  7407  0D3D                     l9048:	
  7408                           
  7409                           ;SwitchTap.c: 127: }
  7410                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7411  0D3D  0020               	movlb	0	; select bank0
  7412  0D3E  0850               	movf	_num_taps,w
  7413  0D3F  0021               	movlb	1	; select bank1
  7414  0D40  00BC               	movwf	??_updateSwitchTap^(0+128)
  7415  0D41  3001               	movlw	1
  7416  0D42                     u10025:	
  7417  0D42  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7418  0D43  3EFF               	addlw	-1
  7419  0D44  1D03               	skipz
  7420  0D45  2D42               	goto	u10025
  7421  0D46  353C               	lslf	??_updateSwitchTap^(0+128),w
  7422  0D47  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7423  0D48  0086               	movwf	6
  7424  0D49  3002               	movlw	2	; select bank4/5
  7425  0D4A  0087               	movwf	7
  7426  0D4B  0020               	movlb	0	; select bank0
  7427  0D4C  0852               	movf	_tap_timer,w	;volatile
  7428  0D4D  3FC0               	movwi [0]fsr1
  7429  0D4E  0853               	movf	_tap_timer+1,w	;volatile
  7430  0D4F  3FC1               	movwi [1]fsr1
  7431  0D50  0854               	movf	_tap_timer+2,w	;volatile
  7432  0D51  3FC2               	movwi [2]fsr1
  7433  0D52  0855               	movf	_tap_timer+3,w	;volatile
  7434  0D53  3FC3               	movwi [3]fsr1
  7435                           
  7436                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7437  0D54  0852               	movf	_tap_timer,w	;volatile
  7438  0D55  0024               	movlb	4	; select bank4
  7439  0D56  07BD               	addwf	_tap_total^(0+512),f
  7440  0D57  0020               	movlb	0	; select bank0
  7441  0D58  0853               	movf	_tap_timer+1,w	;volatile
  7442  0D59  0024               	movlb	4	; select bank4
  7443  0D5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7444  0D5B  0020               	movlb	0	; select bank0
  7445  0D5C  0854               	movf	_tap_timer+2,w	;volatile
  7446  0D5D  0024               	movlb	4	; select bank4
  7447  0D5E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7448  0D5F  0020               	movlb	0	; select bank0
  7449  0D60  0855               	movf	_tap_timer+3,w	;volatile
  7450  0D61  0024               	movlb	4	; select bank4
  7451  0D62  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7452  0D63                     l9052:	
  7453                           
  7454                           ;SwitchTap.c: 130: }
  7455                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7456  0D63  0021               	movlb	1	; select bank1
  7457  0D64  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7458  0D65  00A0               	movwf	___aldiv@divisor^(0+128)
  7459  0D66  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7460  0D67  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7461  0D68  0D89               	rlf	9,f
  7462  0D69  3B89               	subwfb	9,f
  7463  0D6A  0989               	comf	9,f
  7464  0D6B  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7465  0D6C  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7466  0D6D  0024               	movlb	4	; select bank4
  7467  0D6E  0840               	movf	(_tap_total+3)^(0+512),w
  7468  0D6F  0021               	movlb	1	; select bank1
  7469  0D70  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7470  0D71  0024               	movlb	4	; select bank4
  7471  0D72  083F               	movf	(_tap_total+2)^(0+512),w
  7472  0D73  0021               	movlb	1	; select bank1
  7473  0D74  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7474  0D75  0024               	movlb	4	; select bank4
  7475  0D76  083E               	movf	(_tap_total+1)^(0+512),w
  7476  0D77  0021               	movlb	1	; select bank1
  7477  0D78  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7478  0D79  0024               	movlb	4	; select bank4
  7479  0D7A  083D               	movf	_tap_total^(0+512),w
  7480  0D7B  0021               	movlb	1	; select bank1
  7481  0D7C  00A4               	movwf	___aldiv@dividend^(0+128)
  7482  0D7D  3198  20A8         	fcall	___aldiv
  7483  0D7F  0021               	movlb	1	; select bank1
  7484  0D80  0823               	movf	(?___aldiv+3)^(0+128),w
  7485  0D81  0020               	movlb	0	; select bank0
  7486  0D82  00C3               	movwf	_baseline_mod_time+3	;volatile
  7487  0D83  0021               	movlb	1	; select bank1
  7488  0D84  0822               	movf	(?___aldiv+2)^(0+128),w
  7489  0D85  0020               	movlb	0	; select bank0
  7490  0D86  00C2               	movwf	_baseline_mod_time+2	;volatile
  7491  0D87  0021               	movlb	1	; select bank1
  7492  0D88  0821               	movf	(?___aldiv+1)^(0+128),w
  7493  0D89  0020               	movlb	0	; select bank0
  7494  0D8A  00C1               	movwf	_baseline_mod_time+1	;volatile
  7495  0D8B  0021               	movlb	1	; select bank1
  7496  0D8C  0820               	movf	?___aldiv^(0+128),w
  7497  0D8D  0020               	movlb	0	; select bank0
  7498  0D8E  00C0               	movwf	_baseline_mod_time	;volatile
  7499                           
  7500                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7501  0D8F  0023               	movlb	3	; select bank3
  7502  0D90  01E4               	clrf	_mod_time_changed^(0+384)
  7503  0D91  0AE4               	incf	_mod_time_changed^(0+384),f
  7504                           
  7505                           ;SwitchTap.c: 134: tap_timer = 0;
  7506  0D92  3000               	movlw	0
  7507  0D93  0020               	movlb	0	; select bank0
  7508  0D94  00D5               	movwf	_tap_timer+3	;volatile
  7509  0D95  3000               	movlw	0
  7510  0D96  00D4               	movwf	_tap_timer+2	;volatile
  7511  0D97  3000               	movlw	0
  7512  0D98  00D3               	movwf	_tap_timer+1	;volatile
  7513  0D99  3000               	movlw	0
  7514  0D9A  00D2               	movwf	_tap_timer	;volatile
  7515                           
  7516                           ;SwitchTap.c: 136: tap_iteration++;
  7517  0D9B  3001               	movlw	1
  7518  0D9C  0023               	movlb	3	; select bank3
  7519  0D9D  07DD               	addwf	_tap_iteration^(0+384),f
  7520  0D9E  3000               	movlw	0
  7521  0D9F  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7522                           
  7523                           ;SwitchTap.c: 137: }
  7524                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7525  0DA0  0008               	return
  7526  0DA1                     l9060:	
  7527  0DA1  3019               	movlw	25
  7528  0DA2  0022               	movlb	2	; select bank2
  7529  0DA3  026B               	subwf	_switchTap_pressed^(0+256),w
  7530  0DA4  1C03               	skipc
  7531  0DA5  0008               	return
  7532                           
  7533                           ;SwitchTap.c: 140: switchTap_down = 0;
  7534  0DA6  0023               	movlb	3	; select bank3
  7535  0DA7  01CB               	clrf	_switchTap_down^(0+384)
  7536                           
  7537                           ;SwitchTap.c: 141: switchTap_state = 0;
  7538  0DA8  01E6               	clrf	_switchTap_state^(0+384)
  7539                           
  7540                           ;SwitchTap.c: 147: setLongTapState(0);
  7541  0DA9  3000               	movlw	0
  7542  0DAA  0021               	movlb	1	; select bank1
  7543  0DAB  00A0               	movwf	setLongTapState@f_state^(0+128)
  7544  0DAC  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7545  0DAD  31AD  2591         	fcall	_setLongTapState
  7546                           
  7547                           ;SwitchTap.c: 149: longTap_timer = 0;
  7548  0DAF  0023               	movlb	3	; select bank3
  7549  0DB0  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7550  0DB1  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7551                           
  7552                           ;SwitchTap.c: 150: longTap_start = 0;
  7553  0DB2  01C5               	clrf	_longTap_start^(0+384)
  7554                           
  7555                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7556  0DB3  3019               	movlw	25
  7557  0DB4  0021               	movlb	1	; select bank1
  7558  0DB5  00BC               	movwf	??_updateSwitchTap^(0+128)
  7559  0DB6  083C               	movf	??_updateSwitchTap^(0+128),w
  7560  0DB7  0022               	movlb	2	; select bank2
  7561  0DB8  00EB               	movwf	_switchTap_pressed^(0+256)
  7562  0DB9  0008               	return
  7563  0DBA                     __end_of_updateSwitchTap:	
  7564                           
  7565                           	psect	text4
  7566  2D91                     __ptext4:	
  7567 ;; *************** function _setLongTapState *****************
  7568 ;; Defined at:
  7569 ;;		line 167 in file "SwitchTap.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  f_state         2    0[BANK1 ] int 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;		None
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,0
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7583 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7585 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7586 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7587 ;;Total ram usage:        4 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    3
  7590 ;; This function calls:
  7591 ;;		Nothing
  7592 ;; This function is called by:
  7593 ;;		_updateSwitchTap
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _setLongTapState
  7599  2D91                     _setLongTapState:	
  7600                           
  7601                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _setLongTapState: [wreg+status,0]
  7605  2D91  0020               	movlb	0	; select bank0
  7606  2D92  084F               	movf	_longTap_state,w	;volatile
  7607  2D93  0021               	movlb	1	; select bank1
  7608  2D94  00A2               	movwf	??_setLongTapState^(0+128)
  7609  2D95  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7610  2D96  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7611  2D97  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7612  2D98  1D03               	skipz
  7613  2D99  2D9C               	goto	u9065
  7614  2D9A  0820               	movf	setLongTapState@f_state^(0+128),w
  7615  2D9B  0622               	xorwf	??_setLongTapState^(0+128),w
  7616  2D9C                     u9065:	
  7617  2D9C  1903               	btfsc	3,2
  7618  2D9D  0008               	return
  7619                           
  7620                           ;SwitchTap.c: 169: longTap_state = f_state;
  7621  2D9E  0820               	movf	setLongTapState@f_state^(0+128),w
  7622  2D9F  00A2               	movwf	??_setLongTapState^(0+128)
  7623  2DA0  0822               	movf	??_setLongTapState^(0+128),w
  7624  2DA1  0020               	movlb	0	; select bank0
  7625  2DA2  00CF               	movwf	_longTap_state	;volatile
  7626                           
  7627                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7628  2DA3  0021               	movlb	1	; select bank1
  7629  2DA4  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7630  2DA5  0022               	movlb	2	; select bank2
  7631  2DA6  1C03               	skipc
  7632  2DA7  128D               	bcf	13,5	;volatile
  7633  2DA8  1803               	skipnc
  7634  2DA9  168D               	bsf	13,5	;volatile
  7635  2DAA  0008               	return
  7636  2DAB                     __end_of_setLongTapState:	
  7637                           
  7638                           	psect	text5
  7639  18A8                     __ptext5:	
  7640 ;; *************** function ___aldiv *****************
  7641 ;; Defined at:
  7642 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  divisor         4    0[BANK1 ] long 
  7645 ;;  dividend        4    4[BANK1 ] long 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  quotient        4   11[BANK1 ] long 
  7648 ;;  sign            1   10[BANK1 ] unsigned char 
  7649 ;;  counter         1    9[BANK1 ] unsigned char 
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  4    0[BANK1 ] long 
  7652 ;; Registers used:
  7653 ;;		wreg, status,2, status,0
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7659 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7660 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7661 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7662 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7663 ;;Total ram usage:       15 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    3
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_updateSwitchTap
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           
  7674                           ;psect for function ___aldiv
  7675  18A8                     ___aldiv:	
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7679  18A8  0021               	movlb	1	; select bank1
  7680  18A9  01AA               	clrf	___aldiv@sign^(0+128)
  7681  18AA  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7682  18AB  28B9               	goto	l2045
  7683  18AC  09A0               	comf	___aldiv@divisor^(0+128),f
  7684  18AD  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7685  18AE  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7686  18AF  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7687  18B0  0AA0               	incf	___aldiv@divisor^(0+128),f
  7688  18B1  1903               	skipnz
  7689  18B2  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7690  18B3  1903               	skipnz
  7691  18B4  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7692  18B5  1903               	skipnz
  7693  18B6  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7694  18B7  01AA               	clrf	___aldiv@sign^(0+128)
  7695  18B8  0AAA               	incf	___aldiv@sign^(0+128),f
  7696  18B9                     l2045:	
  7697  18B9  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7698  18BA  28CA               	goto	l8626
  7699  18BB  09A4               	comf	___aldiv@dividend^(0+128),f
  7700  18BC  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7701  18BD  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7702  18BE  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7703  18BF  0AA4               	incf	___aldiv@dividend^(0+128),f
  7704  18C0  1903               	skipnz
  7705  18C1  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7706  18C2  1903               	skipnz
  7707  18C3  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7708  18C4  1903               	skipnz
  7709  18C5  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7710  18C6  3001               	movlw	1
  7711  18C7  00A8               	movwf	??___aldiv^(0+128)
  7712  18C8  0828               	movf	??___aldiv^(0+128),w
  7713  18C9  06AA               	xorwf	___aldiv@sign^(0+128),f
  7714  18CA                     l8626:	
  7715  18CA  3000               	movlw	0
  7716  18CB  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7717  18CC  3000               	movlw	0
  7718  18CD  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7719  18CE  3000               	movlw	0
  7720  18CF  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7721  18D0  3000               	movlw	0
  7722  18D1  00AB               	movwf	___aldiv@quotient^(0+128)
  7723  18D2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7724  18D3  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7725  18D4  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7726  18D5  0420               	iorwf	___aldiv@divisor^(0+128),w
  7727  18D6  1903               	skipnz
  7728  18D7  2913               	goto	l8648
  7729  18D8  01A9               	clrf	___aldiv@counter^(0+128)
  7730  18D9  0AA9               	incf	___aldiv@counter^(0+128),f
  7731  18DA                     l8634:	
  7732  18DA  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7733  18DB  28E8               	goto	l8636
  7734  18DC  3001               	movlw	1
  7735  18DD                     u9145:	
  7736  18DD  35A0               	lslf	___aldiv@divisor^(0+128),f
  7737  18DE  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7738  18DF  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7739  18E0  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7740  18E1  0B89               	decfsz	9,f
  7741  18E2  28DD               	goto	u9145
  7742  18E3  3001               	movlw	1
  7743  18E4  00A8               	movwf	??___aldiv^(0+128)
  7744  18E5  0828               	movf	??___aldiv^(0+128),w
  7745  18E6  07A9               	addwf	___aldiv@counter^(0+128),f
  7746  18E7  28DA               	goto	l8634
  7747  18E8                     l8636:	
  7748  18E8  3001               	movlw	1
  7749  18E9                     u9165:	
  7750  18E9  35AB               	lslf	___aldiv@quotient^(0+128),f
  7751  18EA  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7752  18EB  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7753  18EC  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7754  18ED  0B89               	decfsz	9,f
  7755  18EE  28E9               	goto	u9165
  7756  18EF  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7757  18F0  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7758  18F1  1D03               	skipz
  7759  18F2  28FD               	goto	u9175
  7760  18F3  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7761  18F4  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7762  18F5  1D03               	skipz
  7763  18F6  28FD               	goto	u9175
  7764  18F7  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7765  18F8  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7766  18F9  1D03               	skipz
  7767  18FA  28FD               	goto	u9175
  7768  18FB  0820               	movf	___aldiv@divisor^(0+128),w
  7769  18FC  0224               	subwf	___aldiv@dividend^(0+128),w
  7770  18FD                     u9175:	
  7771  18FD  1C03               	skipc
  7772  18FE  2908               	goto	l8644
  7773  18FF  0820               	movf	___aldiv@divisor^(0+128),w
  7774  1900  02A4               	subwf	___aldiv@dividend^(0+128),f
  7775  1901  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7776  1902  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7777  1903  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7778  1904  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7779  1905  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7780  1906  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7781  1907  142B               	bsf	___aldiv@quotient^(0+128),0
  7782  1908                     l8644:	
  7783  1908  3001               	movlw	1
  7784  1909                     u9185:	
  7785  1909  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7786  190A  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7787  190B  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7788  190C  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7789  190D  0B89               	decfsz	9,f
  7790  190E  2909               	goto	u9185
  7791  190F  3001               	movlw	1
  7792  1910  02A9               	subwf	___aldiv@counter^(0+128),f
  7793  1911  1D03               	btfss	3,2
  7794  1912  28E8               	goto	l8636
  7795  1913                     l8648:	
  7796  1913  082A               	movf	___aldiv@sign^(0+128),w
  7797  1914  1903               	btfsc	3,2
  7798  1915  2921               	goto	l8652
  7799  1916  09AB               	comf	___aldiv@quotient^(0+128),f
  7800  1917  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7801  1918  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7802  1919  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7803  191A  0AAB               	incf	___aldiv@quotient^(0+128),f
  7804  191B  1903               	skipnz
  7805  191C  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7806  191D  1903               	skipnz
  7807  191E  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7808  191F  1903               	skipnz
  7809  1920  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7810  1921                     l8652:	
  7811  1921  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7812  1922  00A3               	movwf	(?___aldiv+3)^(0+128)
  7813  1923  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7814  1924  00A2               	movwf	(?___aldiv+2)^(0+128)
  7815  1925  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7816  1926  00A1               	movwf	(?___aldiv+1)^(0+128)
  7817  1927  082B               	movf	___aldiv@quotient^(0+128),w
  7818  1928  00A0               	movwf	?___aldiv^(0+128)
  7819  1929  0008               	return
  7820  192A                     __end_of___aldiv:	
  7821                           
  7822                           	psect	text6
  7823  1241                     __ptext6:	
  7824 ;; *************** function _updateSwitchBypass *****************
  7825 ;; Defined at:
  7826 ;;		line 34 in file "SwitchBypass.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;		None
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      void 
  7833 ;; Registers used:
  7834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7842 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7843 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7844 ;;Total ram usage:        2 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    8
  7847 ;; This function calls:
  7848 ;;		_setDoublePressState
  7849 ;;		_setLongBypassState
  7850 ;;		_setSwitchBypassRelays
  7851 ;;		_setSwitchBypassState
  7852 ;; This function is called by:
  7853 ;;		_main
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _updateSwitchBypass
  7859  1241                     _updateSwitchBypass:	
  7860                           
  7861                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7865  1241  0020               	movlb	0	; select bank0
  7866  1242  1890               	btfsc	16,1	;volatile
  7867  1243  2A57               	goto	l8862
  7868                           
  7869                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7870  1244  0023               	movlb	3	; select bank3
  7871  1245  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7872  1246  3A80               	xorlw	128
  7873  1247  0021               	movlb	1	; select bank1
  7874  1248  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7875  1249  3080               	movlw	128
  7876  124A  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7877  124B  1D03               	skipz
  7878  124C  2A50               	goto	u9565
  7879  124D  3001               	movlw	1
  7880  124E  0023               	movlb	3	; select bank3
  7881  124F  023A               	subwf	_switchBypass_pressed^(0+384),w
  7882  1250                     u9565:	
  7883  1250  1C03               	skipc
  7884  1251  2A6A               	goto	l8866
  7885                           
  7886                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7887  1252  30FF               	movlw	255
  7888  1253  0023               	movlb	3	; select bank3
  7889  1254  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7890  1255  30FF               	movlw	255
  7891  1256  2A69               	goto	L1
  7892  1257                     l8862:	
  7893                           ;SwitchBypass.c: 44: }
  7894                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7895                           
  7896  1257  0023               	movlb	3	; select bank3
  7897  1258  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7898  1259  3A80               	xorlw	128
  7899  125A  0021               	movlb	1	; select bank1
  7900  125B  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7901  125C  3080               	movlw	128
  7902  125D  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7903  125E  1D03               	skipz
  7904  125F  2A63               	goto	u9575
  7905  1260  3019               	movlw	25
  7906  1261  0023               	movlb	3	; select bank3
  7907  1262  023A               	subwf	_switchBypass_pressed^(0+384),w
  7908  1263                     u9575:	
  7909  1263  1803               	skipnc
  7910  1264  2A6A               	goto	l8866
  7911                           
  7912                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7913  1265  3001               	movlw	1
  7914  1266  0023               	movlb	3	; select bank3
  7915  1267  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7916  1268  3000               	movlw	0
  7917  1269                     L1:	
  7918  1269  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7919  126A                     l8866:	
  7920                           
  7921                           ;SwitchBypass.c: 47: }
  7922                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7923  126A  0023               	movlb	3	; select bank3
  7924  126B  083A               	movf	_switchBypass_pressed^(0+384),w
  7925  126C  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7926  126D  1D03               	btfss	3,2
  7927  126E  2AF2               	goto	l8926
  7928                           
  7929                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7930  126F  0844               	movf	_longBypass_start^(0+384),w
  7931  1270  1D03               	btfss	3,2
  7932  1271  2A76               	goto	l8874
  7933                           
  7934                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7935  1272  01C4               	clrf	_longBypass_start^(0+384)
  7936  1273  0AC4               	incf	_longBypass_start^(0+384),f
  7937                           
  7938                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7939  1274  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7940  1275  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7941  1276                     l8874:	
  7942                           
  7943                           ;SwitchBypass.c: 59: }
  7944                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7945  1276  0020               	movlb	0	; select bank0
  7946  1277  084B               	movf	_long_press_limit+1,w
  7947  1278  0023               	movlb	3	; select bank3
  7948  1279  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7949  127A  1D03               	skipz
  7950  127B  2A80               	goto	u9605
  7951  127C  0020               	movlb	0	; select bank0
  7952  127D  084A               	movf	_long_press_limit,w
  7953  127E  0023               	movlb	3	; select bank3
  7954  127F  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7955  1280                     u9605:	
  7956  1280  1C03               	skipc
  7957  1281  2ABF               	goto	l8900
  7958  1282  0842               	movf	_longBypass_down^(0+384),w
  7959  1283  1D03               	btfss	3,2
  7960  1284  2ABF               	goto	l8900
  7961  1285  0020               	movlb	0	; select bank0
  7962  1286  085C               	movf	_doubleTap_state,w	;volatile
  7963  1287  1D03               	btfss	3,2
  7964  1288  2ABF               	goto	l8900
  7965                           
  7966                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7967  1289  0022               	movlb	2	; select bank2
  7968  128A  110D               	bcf	13,2	;volatile
  7969                           
  7970                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7971  128B  0023               	movlb	3	; select bank3
  7972  128C  0345               	decf	_longTap_start^(0+384),w
  7973  128D  1903               	btfsc	3,2
  7974  128E  2AB7               	goto	l8898
  7975                           
  7976                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7977  128F  0020               	movlb	0	; select bank0
  7978  1290  0351               	decf	_switchBypass_state,w
  7979  1291  1D03               	btfss	3,2
  7980  1292  2ABF               	goto	l8900
  7981                           
  7982                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7983  1293  0023               	movlb	3	; select bank3
  7984  1294  01C2               	clrf	_longBypass_down^(0+384)
  7985  1295  0AC2               	incf	_longBypass_down^(0+384),f
  7986                           
  7987                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7988  1296  0020               	movlb	0	; select bank0
  7989  1297  085D               	movf	_longBypass_state,w	;volatile
  7990  1298  1D03               	btfss	3,2
  7991  1299  2AA5               	goto	l8894
  7992                           
  7993                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7994  129A  0022               	movlb	2	; select bank2
  7995  129B  110D               	bcf	13,2	;volatile
  7996                           
  7997                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7998  129C  3001               	movlw	1
  7999  129D  0021               	movlb	1	; select bank1
  8000  129E  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8001  129F  3000               	movlw	0
  8002  12A0  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8003  12A1  31AE  2619  3192   	fcall	_setLongBypassState
  8004                           
  8005                           ;SwitchBypass.c: 71: } else {
  8006  12A4  2ABF               	goto	l8900
  8007  12A5                     l8894:	
  8008                           
  8009                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  8010  12A5  3001               	movlw	1
  8011  12A6  0021               	movlb	1	; select bank1
  8012  12A7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8013  12A8  3000               	movlw	0
  8014  12A9  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8015  12AA  31AD  25E1  3192   	fcall	_setSwitchBypassState
  8016                           
  8017                           ;SwitchBypass.c: 73: setLongBypassState(0);
  8018  12AD  3000               	movlw	0
  8019  12AE  0021               	movlb	1	; select bank1
  8020  12AF  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8021  12B0  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  8022  12B1  31AE  2619  3192   	fcall	_setLongBypassState
  8023                           
  8024                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  8025  12B4  0022               	movlb	2	; select bank2
  8026  12B5  150D               	bsf	13,2	;volatile
  8027                           
  8028                           ;SwitchBypass.c: 75: }
  8029                           ;SwitchBypass.c: 76: }
  8030                           ;SwitchBypass.c: 77: } else {
  8031  12B6  2ABF               	goto	l8900
  8032  12B7                     l8898:	
  8033                           
  8034                           ;SwitchBypass.c: 78: setDoublePressState(1);
  8035  12B7  3001               	movlw	1
  8036  12B8  0021               	movlb	1	; select bank1
  8037  12B9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8038  12BA  3000               	movlw	0
  8039  12BB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8040  12BC  31A1  2160  3192   	fcall	_setDoublePressState
  8041  12BF                     l8900:	
  8042                           
  8043                           ;SwitchBypass.c: 79: }
  8044                           ;SwitchBypass.c: 80: }
  8045                           ;SwitchBypass.c: 83: if (doubleTap_state == 0 && longBypass_down == 0) {
  8046  12BF  0020               	movlb	0	; select bank0
  8047  12C0  085C               	movf	_doubleTap_state,w	;volatile
  8048  12C1  1D03               	btfss	3,2
  8049  12C2  2AEE               	goto	l8924
  8050  12C3  0023               	movlb	3	; select bank3
  8051  12C4  0842               	movf	_longBypass_down^(0+384),w
  8052  12C5  1D03               	btfss	3,2
  8053  12C6  2AEE               	goto	l8924
  8054                           
  8055                           ;SwitchBypass.c: 84: if (switchBypass_state == 1) {
  8056  12C7  0020               	movlb	0	; select bank0
  8057  12C8  0351               	decf	_switchBypass_state,w
  8058  12C9  1D03               	btfss	3,2
  8059  12CA  2AD9               	goto	l8912
  8060                           
  8061                           ;SwitchBypass.c: 86: if (switchBypass_up == 1) {
  8062  12CB  0024               	movlb	4	; select bank4
  8063  12CC  0368               	decf	_switchBypass_up^(0+512),w
  8064  12CD  0469               	iorwf	(_switchBypass_up+1)^(0+512),w
  8065  12CE  1D03               	btfss	3,2
  8066  12CF  2AEE               	goto	l8924
  8067                           
  8068                           ;SwitchBypass.c: 87: currentBypassState = 1;
  8069  12D0  0023               	movlb	3	; select bank3
  8070  12D1  01E0               	clrf	_currentBypassState^(0+384)
  8071  12D2  0AE0               	incf	_currentBypassState^(0+384),f
  8072                           
  8073                           ;SwitchBypass.c: 88: switchBypass_toggle = 1;
  8074  12D3  3001               	movlw	1
  8075  12D4  0024               	movlb	4	; select bank4
  8076  12D5  00D9               	movwf	_switchBypass_toggle^(0+512)
  8077  12D6  3000               	movlw	0
  8078  12D7  00DA               	movwf	(_switchBypass_toggle^(0+512)+1)
  8079                           
  8080                           ;SwitchBypass.c: 89: }
  8081                           ;SwitchBypass.c: 90: } else {
  8082  12D8  2AEE               	goto	l8924
  8083  12D9                     l8912:	
  8084                           
  8085                           ;SwitchBypass.c: 91: if (bypass_turning_on != 1) {
  8086  12D9  0023               	movlb	3	; select bank3
  8087  12DA  0340               	decf	_bypass_turning_on^(0+384),w
  8088  12DB  1903               	btfsc	3,2
  8089  12DC  2AEE               	goto	l8924
  8090                           
  8091                           ;SwitchBypass.c: 93: currentBypassState = 0;
  8092  12DD  01E0               	clrf	_currentBypassState^(0+384)
  8093                           
  8094                           ;SwitchBypass.c: 95: bypass_turning_on = 1;
  8095  12DE  01C0               	clrf	_bypass_turning_on^(0+384)
  8096  12DF  0AC0               	incf	_bypass_turning_on^(0+384),f
  8097                           
  8098                           ;SwitchBypass.c: 96: switchBypass_toggle = 0;
  8099  12E0  0024               	movlb	4	; select bank4
  8100  12E1  01D9               	clrf	_switchBypass_toggle^(0+512)
  8101  12E2  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8102                           
  8103                           ;SwitchBypass.c: 98: longBypass_save = longBypass_state;
  8104  12E3  0020               	movlb	0	; select bank0
  8105  12E4  085D               	movf	_longBypass_state,w	;volatile
  8106  12E5  0021               	movlb	1	; select bank1
  8107  12E6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8108  12E7  083C               	movf	??_updateSwitchBypass^(0+128),w
  8109  12E8  0023               	movlb	3	; select bank3
  8110  12E9  00C3               	movwf	_longBypass_save^(0+384)
  8111                           
  8112                           ;SwitchBypass.c: 99: longBypass_state = 0;
  8113  12EA  0020               	movlb	0	; select bank0
  8114  12EB  01DD               	clrf	_longBypass_state	;volatile
  8115                           
  8116                           ;SwitchBypass.c: 100: longBypass_start = 0;
  8117  12EC  0023               	movlb	3	; select bank3
  8118  12ED  01C4               	clrf	_longBypass_start^(0+384)
  8119  12EE                     l8924:	
  8120                           
  8121                           ;SwitchBypass.c: 101: }
  8122                           ;SwitchBypass.c: 102: }
  8123                           ;SwitchBypass.c: 104: }
  8124                           ;SwitchBypass.c: 105: switchBypass_up = 0;
  8125  12EE  0024               	movlb	4	; select bank4
  8126  12EF  01E8               	clrf	_switchBypass_up^(0+512)
  8127  12F0  01E9               	clrf	(_switchBypass_up+1)^(0+512)
  8128                           
  8129                           ;SwitchBypass.c: 106: } else if (switchBypass_pressed >= 25) {
  8130  12F1  0008               	return
  8131  12F2                     l8926:	
  8132  12F2  0023               	movlb	3	; select bank3
  8133  12F3  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  8134  12F4  3A80               	xorlw	128
  8135  12F5  0021               	movlb	1	; select bank1
  8136  12F6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8137  12F7  3080               	movlw	128
  8138  12F8  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8139  12F9  1D03               	skipz
  8140  12FA  2AFE               	goto	u9715
  8141  12FB  3019               	movlw	25
  8142  12FC  0023               	movlb	3	; select bank3
  8143  12FD  023A               	subwf	_switchBypass_pressed^(0+384),w
  8144  12FE                     u9715:	
  8145  12FE  1C03               	skipc
  8146  12FF  0008               	return
  8147                           
  8148                           ;SwitchBypass.c: 107: if (doubleTap_state == 1) {
  8149  1300  0020               	movlb	0	; select bank0
  8150  1301  035C               	decf	_doubleTap_state,w	;volatile
  8151  1302  1D03               	btfss	3,2
  8152  1303  2B0D               	goto	l8932
  8153                           
  8154                           ;SwitchBypass.c: 108: setSwitchBypassState(currentBypassState);
  8155  1304  0023               	movlb	3	; select bank3
  8156  1305  0860               	movf	_currentBypassState^(0+384),w
  8157  1306  0021               	movlb	1	; select bank1
  8158  1307  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8159  1308  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8160  1309  083C               	movf	??_updateSwitchBypass^(0+128),w
  8161  130A  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8162  130B  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8163  130C  2B3D               	goto	L2
  8164  130D                     l8932:	
  8165                           ;SwitchBypass.c: 109: } else if (bypass_turning_on == 1) {
  8166                           
  8167  130D  0023               	movlb	3	; select bank3
  8168  130E  0340               	decf	_bypass_turning_on^(0+384),w
  8169  130F  1D03               	btfss	3,2
  8170  1310  2B2D               	goto	l8942
  8171                           
  8172                           ;SwitchBypass.c: 111: if (longBypass_save == 1) {
  8173  1311  0343               	decf	_longBypass_save^(0+384),w
  8174  1312  1D03               	btfss	3,2
  8175  1313  2B27               	goto	l8940
  8176                           
  8177                           ;SwitchBypass.c: 112: LATBbits.LATB2 = 0;
  8178  1314  0022               	movlb	2	; select bank2
  8179  1315  110D               	bcf	13,2	;volatile
  8180                           
  8181                           ;SwitchBypass.c: 113: setLongBypassState(1);
  8182  1316  3001               	movlw	1
  8183  1317  0021               	movlb	1	; select bank1
  8184  1318  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8185  1319  3000               	movlw	0
  8186  131A  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8187  131B  31AE  2619  3192   	fcall	_setLongBypassState
  8188                           
  8189                           ;SwitchBypass.c: 114: setSwitchBypassRelays(1);
  8190  131E  3001               	movlw	1
  8191  131F  0021               	movlb	1	; select bank1
  8192  1320  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8193  1321  3000               	movlw	0
  8194  1322  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8195  1323  31AF  2792  3192   	fcall	_setSwitchBypassRelays
  8196                           
  8197                           ;SwitchBypass.c: 115: } else {
  8198  1326  2B41               	goto	l8950
  8199  1327                     l8940:	
  8200                           
  8201                           ;SwitchBypass.c: 116: setSwitchBypassState(1);
  8202  1327  3001               	movlw	1
  8203  1328  0021               	movlb	1	; select bank1
  8204  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8205  132A  3000               	movlw	0
  8206  132B  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8207  132C  2B3E               	goto	L3
  8208  132D                     l8942:	
  8209                           ;SwitchBypass.c: 117: }
  8210                           ;SwitchBypass.c: 119: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8211                           
  8212  132D  0024               	movlb	4	; select bank4
  8213  132E  0359               	decf	_switchBypass_toggle^(0+512),w
  8214  132F  045A               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8215  1330  1D03               	btfss	3,2
  8216  1331  2B41               	goto	l8950
  8217  1332  0023               	movlb	3	; select bank3
  8218  1333  0842               	movf	_longBypass_down^(0+384),w
  8219  1334  1D03               	btfss	3,2
  8220  1335  2B41               	goto	l8950
  8221  1336  0020               	movlb	0	; select bank0
  8222  1337  085C               	movf	_doubleTap_state,w	;volatile
  8223  1338  1D03               	btfss	3,2
  8224  1339  2B41               	goto	l8950
  8225                           
  8226                           ;SwitchBypass.c: 120: setSwitchBypassState(0);
  8227  133A  3000               	movlw	0
  8228  133B  0021               	movlb	1	; select bank1
  8229  133C  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8230  133D                     L2:	
  8231  133D  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8232  133E                     L3:	
  8233  133E  31AD  25E1  3192   	fcall	_setSwitchBypassState
  8234  1341                     l8950:	
  8235                           
  8236                           ;SwitchBypass.c: 121: }
  8237                           ;SwitchBypass.c: 123: longBypass_down = 0;
  8238  1341  0023               	movlb	3	; select bank3
  8239  1342  01C2               	clrf	_longBypass_down^(0+384)
  8240                           
  8241                           ;SwitchBypass.c: 124: if (longBypass_state == 0) {
  8242  1343  0020               	movlb	0	; select bank0
  8243  1344  085D               	movf	_longBypass_state,w	;volatile
  8244  1345  1D03               	btfss	3,2
  8245  1346  2B4D               	goto	l8956
  8246                           
  8247                           ;SwitchBypass.c: 125: LATBbits.LATB2 = switchBypass_state;
  8248  1347  0C51               	rrf	_switchBypass_state,w
  8249  1348  0022               	movlb	2	; select bank2
  8250  1349  1C03               	skipc
  8251  134A  110D               	bcf	13,2	;volatile
  8252  134B  1803               	skipnc
  8253  134C  150D               	bsf	13,2	;volatile
  8254  134D                     l8956:	
  8255                           
  8256                           ;SwitchBypass.c: 126: }
  8257                           ;SwitchBypass.c: 128: setDoublePressState(0);
  8258  134D  3000               	movlw	0
  8259  134E  0021               	movlb	1	; select bank1
  8260  134F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8261  1350  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8262  1351  31A1  2160         	fcall	_setDoublePressState
  8263                           
  8264                           ;SwitchBypass.c: 129: longBypass_start = 0;
  8265  1353  0023               	movlb	3	; select bank3
  8266  1354  01C4               	clrf	_longBypass_start^(0+384)
  8267                           
  8268                           ;SwitchBypass.c: 130: bypass_turning_on = 0;
  8269  1355  01C0               	clrf	_bypass_turning_on^(0+384)
  8270                           
  8271                           ;SwitchBypass.c: 131: switchBypass_toggle = 0;
  8272  1356  0024               	movlb	4	; select bank4
  8273  1357  01D9               	clrf	_switchBypass_toggle^(0+512)
  8274  1358  01DA               	clrf	(_switchBypass_toggle+1)^(0+512)
  8275                           
  8276                           ;SwitchBypass.c: 132: switchBypass_up = 1;
  8277  1359  3001               	movlw	1
  8278  135A  00E8               	movwf	_switchBypass_up^(0+512)
  8279  135B  3000               	movlw	0
  8280  135C  00E9               	movwf	(_switchBypass_up^(0+512)+1)
  8281                           
  8282                           ;SwitchBypass.c: 134: switchBypass_pressed = 25;
  8283  135D  3019               	movlw	25
  8284  135E  0023               	movlb	3	; select bank3
  8285  135F  00BA               	movwf	_switchBypass_pressed^(0+384)
  8286  1360  3000               	movlw	0
  8287  1361  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  8288  1362  0008               	return
  8289  1363                     __end_of_updateSwitchBypass:	
  8290                           
  8291                           	psect	text7
  8292  2E19                     __ptext7:	
  8293 ;; *************** function _setLongBypassState *****************
  8294 ;; Defined at:
  8295 ;;		line 164 in file "SwitchBypass.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  f_state         2    0[BANK1 ] int 
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;		None
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, status,0
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8309 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8311 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8312 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8313 ;;Total ram usage:        4 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:    3
  8316 ;; This function calls:
  8317 ;;		Nothing
  8318 ;; This function is called by:
  8319 ;;		_updateSwitchBypass
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           
  8324                           ;psect for function _setLongBypassState
  8325  2E19                     _setLongBypassState:	
  8326                           
  8327                           ;SwitchBypass.c: 165: if (longBypass_state == f_state) {return;}
  8328                           
  8329                           ;incstack = 0
  8330                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8331  2E19  0020               	movlb	0	; select bank0
  8332  2E1A  085D               	movf	_longBypass_state,w	;volatile
  8333  2E1B  0021               	movlb	1	; select bank1
  8334  2E1C  00A2               	movwf	??_setLongBypassState^(0+128)
  8335  2E1D  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8336  2E1E  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8337  2E1F  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8338  2E20  1D03               	skipz
  8339  2E21  2E24               	goto	u9015
  8340  2E22  0820               	movf	setLongBypassState@f_state^(0+128),w
  8341  2E23  0622               	xorwf	??_setLongBypassState^(0+128),w
  8342  2E24                     u9015:	
  8343  2E24  1903               	btfsc	3,2
  8344  2E25  0008               	return
  8345                           
  8346                           ;SwitchBypass.c: 166: longBypass_state = f_state;
  8347  2E26  0820               	movf	setLongBypassState@f_state^(0+128),w
  8348  2E27  00A2               	movwf	??_setLongBypassState^(0+128)
  8349  2E28  0822               	movf	??_setLongBypassState^(0+128),w
  8350  2E29  0020               	movlb	0	; select bank0
  8351  2E2A  00DD               	movwf	_longBypass_state	;volatile
  8352                           
  8353                           ;SwitchBypass.c: 167: LATBbits.LATB3 = f_state;
  8354  2E2B  0021               	movlb	1	; select bank1
  8355  2E2C  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8356  2E2D  0022               	movlb	2	; select bank2
  8357  2E2E  1C03               	skipc
  8358  2E2F  118D               	bcf	13,3	;volatile
  8359  2E30  1803               	skipnc
  8360  2E31  158D               	bsf	13,3	;volatile
  8361                           
  8362                           ;SwitchBypass.c: 168: PORTCbits.RC4 = f_state;
  8363  2E32  0021               	movlb	1	; select bank1
  8364  2E33  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8365  2E34  0020               	movlb	0	; select bank0
  8366  2E35  1C03               	skipc
  8367  2E36  120E               	bcf	14,4	;volatile
  8368  2E37  1803               	skipnc
  8369  2E38  160E               	bsf	14,4	;volatile
  8370  2E39  0008               	return
  8371  2E3A                     __end_of_setLongBypassState:	
  8372                           
  8373                           	psect	text8
  8374  2160                     __ptext8:	
  8375 ;; *************** function _setDoublePressState *****************
  8376 ;; Defined at:
  8377 ;;		line 21 in file "preset_programming.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  f_state         2   24[BANK1 ] int 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;		None
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8391 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8393 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8394 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8395 ;;Total ram usage:        4 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    7
  8398 ;; This function calls:
  8399 ;;		_resetRingLEDs
  8400 ;;		_setPedalMode
  8401 ;;		_setPresetDisplay
  8402 ;;		_showSave
  8403 ;;		_wait_ms
  8404 ;; This function is called by:
  8405 ;;		_updateSwitchBypass
  8406 ;;		_updateSwitchTap
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _setDoublePressState
  8412  2160                     _setDoublePressState:	
  8413                           
  8414                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8418  2160  0020               	movlb	0	; select bank0
  8419  2161  085C               	movf	_doubleTap_state,w	;volatile
  8420  2162  0021               	movlb	1	; select bank1
  8421  2163  00BA               	movwf	??_setDoublePressState^(0+128)
  8422  2164  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8423  2165  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8424  2166  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8425  2167  1D03               	skipz
  8426  2168  296B               	goto	u9025
  8427  2169  0838               	movf	setDoublePressState@f_state^(0+128),w
  8428  216A  063A               	xorwf	??_setDoublePressState^(0+128),w
  8429  216B                     u9025:	
  8430  216B  1903               	btfsc	3,2
  8431  216C  0008               	return
  8432                           
  8433                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8434  216D  0838               	movf	setDoublePressState@f_state^(0+128),w
  8435  216E  00BA               	movwf	??_setDoublePressState^(0+128)
  8436  216F  083A               	movf	??_setDoublePressState^(0+128),w
  8437  2170  0020               	movlb	0	; select bank0
  8438  2171  00DC               	movwf	_doubleTap_state	;volatile
  8439                           
  8440                           ;preset_programming.c: 24: if (f_state == 1) {
  8441  2172  0021               	movlb	1	; select bank1
  8442  2173  0338               	decf	setDoublePressState@f_state^(0+128),w
  8443  2174  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8444  2175  1D03               	btfss	3,2
  8445  2176  297A               	goto	l8548
  8446                           
  8447                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8448  2177  0022               	movlb	2	; select bank2
  8449  2178  120D               	bcf	13,4	;volatile
  8450                           
  8451                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8452  2179  128D               	bcf	13,5	;volatile
  8453  217A                     l8548:	
  8454                           
  8455                           ;preset_programming.c: 30: }
  8456                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8457  217A  0020               	movlb	0	; select bank0
  8458  217B  035C               	decf	_doubleTap_state,w	;volatile
  8459  217C  1D03               	btfss	3,2
  8460  217D  2995               	goto	l8564
  8461                           
  8462                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8463  217E  085F               	movf	_presetSaveMode,w
  8464  217F  1D03               	btfss	3,2
  8465  2180  298A               	goto	l8556
  8466                           
  8467                           ;preset_programming.c: 34: presetSaveMode = 1;
  8468  2181  01DF               	clrf	_presetSaveMode
  8469  2182  0ADF               	incf	_presetSaveMode,f
  8470                           
  8471                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8472  2183  0022               	movlb	2	; select bank2
  8473  2184  108D               	bcf	13,1	;volatile
  8474                           
  8475                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8476  2185  086C               	movf	_presetChannel^(0+256),w
  8477  2186  31A0  2035  31A1   	fcall	_setPresetDisplay
  8478                           
  8479                           ;preset_programming.c: 37: } else {
  8480  2189  2995               	goto	l8564
  8481  218A                     l8556:	
  8482                           
  8483                           ;preset_programming.c: 39: presetSaveMode = 0;
  8484  218A  0020               	movlb	0	; select bank0
  8485  218B  01DF               	clrf	_presetSaveMode
  8486                           
  8487                           ;preset_programming.c: 40: setPedalMode();
  8488  218C  31AE  265C  31A1   	fcall	_setPedalMode
  8489                           
  8490                           ;preset_programming.c: 41: resetRingLEDs();
  8491  218F  31AD  2577  31A1   	fcall	_resetRingLEDs
  8492                           
  8493                           ;preset_programming.c: 42: showSave();
  8494  2192  31AD  254B  31A1   	fcall	_showSave
  8495  2195                     l8564:	
  8496                           
  8497                           ;preset_programming.c: 44: }
  8498                           ;preset_programming.c: 45: }
  8499                           ;preset_programming.c: 47: wait_ms(20);
  8500  2195  3014               	movlw	20
  8501  2196  0021               	movlb	1	; select bank1
  8502  2197  00AC               	movwf	wait_ms@timeSec^(0+128)
  8503  2198  3000               	movlw	0
  8504  2199  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8505  219A  3190  2003         	fcall	_wait_ms
  8506  219C  0008               	return
  8507  219D                     __end_of_setDoublePressState:	
  8508                           
  8509                           	psect	text9
  8510  2D4B                     __ptext9:	
  8511 ;; *************** function _showSave *****************
  8512 ;; Defined at:
  8513 ;;		line 112 in file "LEDs.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8529 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8530 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8531 ;;Total ram usage:        1 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    6
  8534 ;; This function calls:
  8535 ;;		_ring_tactiles
  8536 ;;		_solidring_tactiles
  8537 ;; This function is called by:
  8538 ;;		_setDoublePressState
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           
  8543                           ;psect for function _showSave
  8544  2D4B                     _showSave:	
  8545                           
  8546                           ;LEDs.c: 113: suspend_blink = 1;
  8547                           
  8548                           ;incstack = 0
  8549                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8550  2D4B  3001               	movlw	1
  8551  2D4C  0021               	movlb	1	; select bank1
  8552  2D4D  00B7               	movwf	??_showSave^(0+128)
  8553  2D4E  0837               	movf	??_showSave^(0+128),w
  8554  2D4F  0022               	movlb	2	; select bank2
  8555  2D50  00EA               	movwf	_suspend_blink^(0+256)	;volatile
  8556                           
  8557                           ;LEDs.c: 114: ring_tactiles();
  8558  2D51  31A3  23C3  31AD   	fcall	_ring_tactiles
  8559                           
  8560                           ;LEDs.c: 115: ring_tactiles();
  8561  2D54  31A3  23C3  31AD   	fcall	_ring_tactiles
  8562                           
  8563                           ;LEDs.c: 116: solidring_tactiles();
  8564  2D57  31A1  21DD  31AD   	fcall	_solidring_tactiles
  8565                           
  8566                           ;LEDs.c: 117: solidring_tactiles();
  8567  2D5A  31A1  21DD         	fcall	_solidring_tactiles
  8568                           
  8569                           ;LEDs.c: 118: suspend_blink = 0;
  8570  2D5C  0022               	movlb	2	; select bank2
  8571  2D5D  01EA               	clrf	_suspend_blink^(0+256)	;volatile
  8572  2D5E  0008               	return
  8573  2D5F                     __end_of_showSave:	
  8574                           
  8575                           	psect	text10
  8576  21DD                     __ptext10:	
  8577 ;; *************** function _solidring_tactiles *****************
  8578 ;; Defined at:
  8579 ;;		line 208 in file "LEDs.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;		None
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  1    wreg      void 
  8586 ;; Registers used:
  8587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8594 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8595 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8596 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8597 ;;Total ram usage:        3 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    5
  8600 ;; This function calls:
  8601 ;;		_set_leds_bottom
  8602 ;;		_set_leds_top
  8603 ;;		_wait_ms
  8604 ;; This function is called by:
  8605 ;;		_showSave
  8606 ;;		_showBootSequence
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           
  8611                           ;psect for function _solidring_tactiles
  8612  21DD                     _solidring_tactiles:	
  8613                           
  8614                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8615                           
  8616                           ;incstack = 0
  8617                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8618  21DD  301E               	movlw	30
  8619  21DE  0021               	movlb	1	; select bank1
  8620  21DF  00B2               	movwf	??_solidring_tactiles^(0+128)
  8621  21E0  0832               	movf	??_solidring_tactiles^(0+128),w
  8622  21E1  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8623                           
  8624                           ;LEDs.c: 210: set_leds_top(100, 1);
  8625  21E2  3064               	movlw	100
  8626  21E3  00A0               	movwf	set_leds_top@x^(0+128)
  8627  21E4  3000               	movlw	0
  8628  21E5  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8629  21E6  3001               	movlw	1
  8630  21E7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8631  21E8  3000               	movlw	0
  8632  21E9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8633  21EA  31A5  2509  31A1   	fcall	_set_leds_top
  8634                           
  8635                           ;LEDs.c: 211: set_leds_bottom(100);
  8636  21ED  3064               	movlw	100
  8637  21EE  0021               	movlb	1	; select bank1
  8638  21EF  00A0               	movwf	set_leds_bottom@x^(0+128)
  8639  21F0  3000               	movlw	0
  8640  21F1  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8641  21F2  31A0  206F  31A1   	fcall	_set_leds_bottom
  8642                           
  8643                           ;LEDs.c: 212: wait_ms(ring_delay);
  8644  21F5  0021               	movlb	1	; select bank1
  8645  21F6  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8646  21F7  00B2               	movwf	??_solidring_tactiles^(0+128)
  8647  21F8  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8648  21F9  0832               	movf	??_solidring_tactiles^(0+128),w
  8649  21FA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8650  21FB  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8651  21FC  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8652  21FD  3190  2003  31A1   	fcall	_wait_ms
  8653                           
  8654                           ;LEDs.c: 214: set_leds_top(0, 1);
  8655  2200  3000               	movlw	0
  8656  2201  0021               	movlb	1	; select bank1
  8657  2202  00A0               	movwf	set_leds_top@x^(0+128)
  8658  2203  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8659  2204  3001               	movlw	1
  8660  2205  00A2               	movwf	set_leds_top@ledState^(0+128)
  8661  2206  3000               	movlw	0
  8662  2207  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8663  2208  31A5  2509  31A1   	fcall	_set_leds_top
  8664                           
  8665                           ;LEDs.c: 215: set_leds_bottom(0);
  8666  220B  3000               	movlw	0
  8667  220C  0021               	movlb	1	; select bank1
  8668  220D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8669  220E  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8670  220F  31A0  206F  31A1   	fcall	_set_leds_bottom
  8671                           
  8672                           ;LEDs.c: 216: wait_ms(ring_delay);
  8673  2212  0021               	movlb	1	; select bank1
  8674  2213  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8675  2214  00B2               	movwf	??_solidring_tactiles^(0+128)
  8676  2215  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8677  2216  0832               	movf	??_solidring_tactiles^(0+128),w
  8678  2217  00AC               	movwf	wait_ms@timeSec^(0+128)
  8679  2218  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8680  2219  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8681  221A  3190  2003         	fcall	_wait_ms
  8682  221C  0008               	return
  8683  221D                     __end_of_solidring_tactiles:	
  8684                           
  8685                           	psect	text11
  8686  23C3                     __ptext11:	
  8687 ;; *************** function _ring_tactiles *****************
  8688 ;; Defined at:
  8689 ;;		line 196 in file "LEDs.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  iLed            2   21[BANK1 ] int 
  8694 ;;  iLed            2   19[BANK1 ] int 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  1    wreg      void 
  8697 ;; Registers used:
  8698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8705 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8706 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8707 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8708 ;;Total ram usage:        5 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    5
  8711 ;; This function calls:
  8712 ;;		_set_leds_bottom
  8713 ;;		_set_leds_top
  8714 ;;		_wait_ms
  8715 ;; This function is called by:
  8716 ;;		_showSave
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           
  8721                           ;psect for function _ring_tactiles
  8722  23C3                     _ring_tactiles:	
  8723                           
  8724                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8728  23C3  3001               	movlw	1
  8729  23C4  0021               	movlb	1	; select bank1
  8730  23C5  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8731  23C6  3000               	movlw	0
  8732  23C7  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8733  23C8  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8734  23C9  3A80               	xorlw	128
  8735  23CA  00B2               	movwf	??_ring_tactiles^(0+128)
  8736  23CB  3080               	movlw	128
  8737  23CC  0232               	subwf	??_ring_tactiles^(0+128),w
  8738  23CD  1D03               	skipz
  8739  23CE  2BD1               	goto	u8465
  8740  23CF  3007               	movlw	7
  8741  23D0  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8742  23D1                     u8465:	
  8743  23D1  1803               	btfsc	3,0
  8744  23D2  2BF7               	goto	l8040
  8745  23D3                     l8032:	
  8746                           
  8747                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8748  23D3  0021               	movlb	1	; select bank1
  8749  23D4  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8750  23D5  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8751  23D6  0833               	movf	ring_tactiles@iLed^(0+128),w
  8752  23D7  00A0               	movwf	set_leds_top@x^(0+128)
  8753  23D8  3001               	movlw	1
  8754  23D9  00A2               	movwf	set_leds_top@ledState^(0+128)
  8755  23DA  3000               	movlw	0
  8756  23DB  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8757  23DC  31A5  2509  31A3   	fcall	_set_leds_top
  8758                           
  8759                           ;LEDs.c: 199: wait_ms(5);
  8760  23DF  3005               	movlw	5
  8761  23E0  0021               	movlb	1	; select bank1
  8762  23E1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8763  23E2  3000               	movlw	0
  8764  23E3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8765  23E4  3190  2003  31A3   	fcall	_wait_ms
  8766  23E7  3001               	movlw	1
  8767  23E8  0021               	movlb	1	; select bank1
  8768  23E9  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8769  23EA  3000               	movlw	0
  8770  23EB  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8771  23EC  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8772  23ED  3A80               	xorlw	128
  8773  23EE  00B2               	movwf	??_ring_tactiles^(0+128)
  8774  23EF  3080               	movlw	128
  8775  23F0  0232               	subwf	??_ring_tactiles^(0+128),w
  8776  23F1  1D03               	skipz
  8777  23F2  2BF5               	goto	u8475
  8778  23F3  3007               	movlw	7
  8779  23F4  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8780  23F5                     u8475:	
  8781  23F5  1C03               	skipc
  8782  23F6  2BD3               	goto	l8032
  8783  23F7                     l8040:	
  8784                           
  8785                           ;LEDs.c: 200: }
  8786                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8787  23F7  3005               	movlw	5
  8788  23F8  0021               	movlb	1	; select bank1
  8789  23F9  00B5               	movwf	ring_tactiles@iLed_1538^(0+128)
  8790  23FA  3000               	movlw	0
  8791  23FB  00B6               	movwf	(ring_tactiles@iLed_1538^(0+128)+1)
  8792  23FC                     L4:	
  8793  23FC  1BB6               	btfsc	(ring_tactiles@iLed_1538+1)^(0+128),7
  8794  23FD  0008               	return
  8795                           
  8796                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8797  23FE  0836               	movf	(ring_tactiles@iLed_1538+1)^(0+128),w
  8798  23FF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8799  2400  0835               	movf	ring_tactiles@iLed_1538^(0+128),w
  8800  2401  00A0               	movwf	set_leds_bottom@x^(0+128)
  8801  2402  31A0  206F  31A3   	fcall	_set_leds_bottom
  8802                           
  8803                           ;LEDs.c: 203: wait_ms(5);
  8804  2405  3005               	movlw	5
  8805  2406  0021               	movlb	1	; select bank1
  8806  2407  00AC               	movwf	wait_ms@timeSec^(0+128)
  8807  2408  3000               	movlw	0
  8808  2409  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8809  240A  3190  2003  31A3   	fcall	_wait_ms
  8810  240D  30FF               	movlw	255
  8811  240E  0021               	movlb	1	; select bank1
  8812  240F  07B5               	addwf	ring_tactiles@iLed_1538^(0+128),f
  8813  2410  30FF               	movlw	255
  8814  2411  3DB6               	addwfc	(ring_tactiles@iLed_1538+1)^(0+128),f
  8815  2412  2BFC               	goto	L4
  8816  2413                     __end_of_ring_tactiles:	
  8817                           
  8818                           	psect	text12
  8819  2E5C                     __ptext12:	
  8820 ;; *************** function _setPedalMode *****************
  8821 ;; Defined at:
  8822 ;;		line 119 in file "tactiles.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;		None
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;		None
  8827 ;; Return value:  Size  Location     Type
  8828 ;;                  1    wreg      void 
  8829 ;; Registers used:
  8830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8831 ;; Tracked objects:
  8832 ;;		On entry : 0/0
  8833 ;;		On exit  : 0/0
  8834 ;;		Unchanged: 0/0
  8835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8840 ;;Total ram usage:        0 bytes
  8841 ;; Hardware stack levels used:    1
  8842 ;; Hardware stack levels required when called:    5
  8843 ;; This function calls:
  8844 ;;		_resetRingLEDs
  8845 ;;		_setExpressionDisplay
  8846 ;;		_setPresetDisplay
  8847 ;; This function is called by:
  8848 ;;		_update_mode
  8849 ;;		_setDoublePressState
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           
  8854                           ;psect for function _setPedalMode
  8855  2E5C                     _setPedalMode:	
  8856                           
  8857                           ;tactiles.c: 120: switch (mode2_state) {
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8861  2E5C  2E72               	goto	l8240
  8862  2E5D                     l1017:	
  8863                           ;tactiles.c: 121: case 0:
  8864                           
  8865                           
  8866                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8867  2E5D  0022               	movlb	2	; select bank2
  8868  2E5E  108D               	bcf	13,1	;volatile
  8869                           
  8870                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8871  2E5F  100D               	bcf	13,0	;volatile
  8872                           
  8873                           ;tactiles.c: 124: resetRingLEDs();
  8874  2E60  31AD  2577         	fcall	_resetRingLEDs
  8875                           
  8876                           ;tactiles.c: 125: break;
  8877  2E62  0008               	return
  8878  2E63                     l1019:	
  8879                           ;tactiles.c: 126: case 1:
  8880                           
  8881                           
  8882                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8883  2E63  0022               	movlb	2	; select bank2
  8884  2E64  108D               	bcf	13,1	;volatile
  8885                           
  8886                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8887  2E65  140D               	bsf	13,0	;volatile
  8888                           
  8889                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8890  2E66  086C               	movf	_presetChannel^(0+256),w
  8891  2E67  31A0  2035         	fcall	_setPresetDisplay
  8892                           
  8893                           ;tactiles.c: 130: break;
  8894  2E69  0008               	return
  8895  2E6A                     l1020:	
  8896                           ;tactiles.c: 131: case 2:
  8897                           
  8898                           
  8899                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8900  2E6A  0022               	movlb	2	; select bank2
  8901  2E6B  148D               	bsf	13,1	;volatile
  8902                           
  8903                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8904  2E6C  100D               	bcf	13,0	;volatile
  8905                           
  8906                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8907  2E6D  0023               	movlb	3	; select bank3
  8908  2E6E  0863               	movf	_expressionChannel^(0+384),w
  8909  2E6F  31AD  255F         	fcall	_setExpressionDisplay
  8910                           
  8911                           ;tactiles.c: 136: }
  8912                           
  8913                           ;tactiles.c: 135: break;
  8914  2E71  0008               	return
  8915  2E72                     l8240:	
  8916  2E72  0020               	movlb	0	; select bank0
  8917  2E73  085E               	movf	_mode2_state,w
  8918                           
  8919                           ; Switch size 1, requested type "space"
  8920                           ; Number of cases is 3, Range of values is 0 to 2
  8921                           ; switch strategies available:
  8922                           ; Name         Instructions Cycles
  8923                           ; simple_byte           10     6 (average)
  8924                           ; direct_byte           12     6 (fixed)
  8925                           ; jumptable            260     6 (fixed)
  8926                           ;	Chosen strategy is simple_byte
  8927  2E74  3A00               	xorlw	0	; case 0
  8928  2E75  1903               	skipnz
  8929  2E76  2E5D               	goto	l1017
  8930  2E77  3A01               	xorlw	1	; case 1
  8931  2E78  1903               	skipnz
  8932  2E79  2E63               	goto	l1019
  8933  2E7A  3A03               	xorlw	3	; case 2
  8934  2E7B  1903               	skipnz
  8935  2E7C  2E6A               	goto	l1020
  8936  2E7D  2E7E               	goto	l1021
  8937  2E7E                     l1021:	
  8938  2E7E  0008               	return
  8939  2E7F                     __end_of_setPedalMode:	
  8940                           
  8941                           	psect	text13
  8942  2035                     __ptext13:	
  8943 ;; *************** function _setPresetDisplay *****************
  8944 ;; Defined at:
  8945 ;;		line 51 in file "preset_programming.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  ledChannel      1    wreg     unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8960 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8961 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8962 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8963 ;;Total ram usage:        3 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    4
  8966 ;; This function calls:
  8967 ;;		_set_leds_bottom
  8968 ;;		_set_leds_top
  8969 ;; This function is called by:
  8970 ;;		_setPedalMode
  8971 ;;		_update_selectMode
  8972 ;;		_setDoublePressState
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _setPresetDisplay
  8978  2035                     _setPresetDisplay:	
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8982                           ;setPresetDisplay@ledChannel stored from wreg
  8983  2035  0021               	movlb	1	; select bank1
  8984  2036  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8985                           
  8986                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8987  2037  3006               	movlw	6
  8988  2038  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8989  2039  1803               	skipnc
  8990  203A  2851               	goto	l8060
  8991                           
  8992                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8993  203B  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8994  203C  00A4               	movwf	??_setPresetDisplay^(0+128)
  8995  203D  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8996  203E  0824               	movf	??_setPresetDisplay^(0+128),w
  8997  203F  00A0               	movwf	set_leds_top@x^(0+128)
  8998  2040  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8999  2041  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9000  2042  3001               	movlw	1
  9001  2043  00A2               	movwf	set_leds_top@ledState^(0+128)
  9002  2044  3000               	movlw	0
  9003  2045  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9004  2046  31A5  2509  31A0   	fcall	_set_leds_top
  9005                           
  9006                           ;preset_programming.c: 54: set_leds_bottom(6);
  9007  2049  3006               	movlw	6
  9008  204A  0021               	movlb	1	; select bank1
  9009  204B  00A0               	movwf	set_leds_bottom@x^(0+128)
  9010  204C  3000               	movlw	0
  9011  204D  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9012  204E  31A0  206F         	fcall	_set_leds_bottom
  9013                           
  9014                           ;preset_programming.c: 55: } else {
  9015  2050  0008               	return
  9016  2051                     l8060:	
  9017                           
  9018                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9019  2051  3006               	movlw	6
  9020  2052  0021               	movlb	1	; select bank1
  9021  2053  00A0               	movwf	set_leds_top@x^(0+128)
  9022  2054  3000               	movlw	0
  9023  2055  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9024  2056  3001               	movlw	1
  9025  2057  00A2               	movwf	set_leds_top@ledState^(0+128)
  9026  2058  3000               	movlw	0
  9027  2059  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9028  205A  31A5  2509  31A0   	fcall	_set_leds_top
  9029                           
  9030                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9031  205D  0021               	movlb	1	; select bank1
  9032  205E  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9033  205F  00A4               	movwf	??_setPresetDisplay^(0+128)
  9034  2060  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9035  2061  09A4               	comf	??_setPresetDisplay^(0+128),f
  9036  2062  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9037  2063  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9038  2064  1903               	skipnz
  9039  2065  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9040  2066  0824               	movf	??_setPresetDisplay^(0+128),w
  9041  2067  3E0B               	addlw	11
  9042  2068  00A0               	movwf	set_leds_bottom@x^(0+128)
  9043  2069  3000               	movlw	0
  9044  206A  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9045  206B  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9046  206C  31A0  206F         	fcall	_set_leds_bottom
  9047  206E  0008               	return
  9048  206F                     __end_of_setPresetDisplay:	
  9049                           
  9050                           	psect	text14
  9051  2D5F                     __ptext14:	
  9052 ;; *************** function _setExpressionDisplay *****************
  9053 ;; Defined at:
  9054 ;;		line 66 in file "preset_programming.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  ledChannel      1    wreg     unsigned char 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  1    wreg      void 
  9061 ;; Registers used:
  9062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9069 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9070 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9071 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9072 ;;Total ram usage:        3 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    4
  9075 ;; This function calls:
  9076 ;;		_set_leds_bottom
  9077 ;;		_set_leds_top
  9078 ;; This function is called by:
  9079 ;;		_setPedalMode
  9080 ;;		_update_selectMode
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           
  9085                           ;psect for function _setExpressionDisplay
  9086  2D5F                     _setExpressionDisplay:	
  9087                           
  9088                           ;incstack = 0
  9089                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9090                           ;setExpressionDisplay@ledChannel stored from wreg
  9091  2D5F  0021               	movlb	1	; select bank1
  9092  2D60  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9093                           
  9094                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9095  2D61  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9096  2D62  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9097  2D63  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9098  2D64  0824               	movf	??_setExpressionDisplay^(0+128),w
  9099  2D65  00A0               	movwf	set_leds_top@x^(0+128)
  9100  2D66  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9101  2D67  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9102  2D68  3001               	movlw	1
  9103  2D69  00A2               	movwf	set_leds_top@ledState^(0+128)
  9104  2D6A  3000               	movlw	0
  9105  2D6B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9106  2D6C  31A5  2509  31AD   	fcall	_set_leds_top
  9107                           
  9108                           ;preset_programming.c: 68: set_leds_bottom(6);
  9109  2D6F  3006               	movlw	6
  9110  2D70  0021               	movlb	1	; select bank1
  9111  2D71  00A0               	movwf	set_leds_bottom@x^(0+128)
  9112  2D72  3000               	movlw	0
  9113  2D73  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9114  2D74  31A0  206F         	fcall	_set_leds_bottom
  9115  2D76  0008               	return
  9116  2D77                     __end_of_setExpressionDisplay:	
  9117                           
  9118                           	psect	text15
  9119  2D77                     __ptext15:	
  9120 ;; *************** function _resetRingLEDs *****************
  9121 ;; Defined at:
  9122 ;;		line 61 in file "preset_programming.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;		None
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  1    wreg      void 
  9129 ;; Registers used:
  9130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9140 ;;Total ram usage:        0 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    4
  9143 ;; This function calls:
  9144 ;;		_set_leds_bottom
  9145 ;;		_set_leds_top
  9146 ;; This function is called by:
  9147 ;;		_update_mode
  9148 ;;		_setPedalMode
  9149 ;;		_setDoublePressState
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           
  9154                           ;psect for function _resetRingLEDs
  9155  2D77                     _resetRingLEDs:	
  9156                           
  9157                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9158                           
  9159                           ;incstack = 0
  9160                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9161  2D77  0020               	movlb	0	; select bank0
  9162  2D78  084D               	movf	_top_push_state+1,w
  9163  2D79  0021               	movlb	1	; select bank1
  9164  2D7A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9165  2D7B  0020               	movlb	0	; select bank0
  9166  2D7C  084C               	movf	_top_push_state,w
  9167  2D7D  0021               	movlb	1	; select bank1
  9168  2D7E  00A0               	movwf	set_leds_top@x^(0+128)
  9169  2D7F  3001               	movlw	1
  9170  2D80  00A2               	movwf	set_leds_top@ledState^(0+128)
  9171  2D81  3000               	movlw	0
  9172  2D82  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9173  2D83  31A5  2509  31AD   	fcall	_set_leds_top
  9174                           
  9175                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9176  2D86  0020               	movlb	0	; select bank0
  9177  2D87  0849               	movf	_bottom_push_state+1,w
  9178  2D88  0021               	movlb	1	; select bank1
  9179  2D89  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9180  2D8A  0020               	movlb	0	; select bank0
  9181  2D8B  0848               	movf	_bottom_push_state,w
  9182  2D8C  0021               	movlb	1	; select bank1
  9183  2D8D  00A0               	movwf	set_leds_bottom@x^(0+128)
  9184  2D8E  31A0  206F         	fcall	_set_leds_bottom
  9185  2D90  0008               	return
  9186  2D91                     __end_of_resetRingLEDs:	
  9187                           
  9188                           	psect	text16
  9189  0DBA                     __ptext16:	
  9190 ;; *************** function _updateModulationArray *****************
  9191 ;; Defined at:
  9192 ;;		line 44 in file "modulation.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;  thisAngle       2   57[BANK2 ] int 
  9197 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9198 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9199 ;;  subDiv          2   55[BANK2 ] int 
  9200 ;;  angleFactor     2   52[BANK2 ] int 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      void 
  9203 ;; Registers used:
  9204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9211 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9212 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9213 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9214 ;;Total ram usage:       12 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    7
  9217 ;; This function calls:
  9218 ;;		___awdiv
  9219 ;;		___awtoft
  9220 ;;		___wmul
  9221 ;;		_getModulationSubdivision
  9222 ;;		_modCos
  9223 ;;		_modSaw
  9224 ;;		_modSawRev
  9225 ;;		_modSquare
  9226 ;;		_modTri
  9227 ;; This function is called by:
  9228 ;;		_main
  9229 ;; This function uses a non-reentrant model
  9230 ;;
  9231                           
  9232                           
  9233                           ;psect for function _updateModulationArray
  9234  0DBA                     _updateModulationArray:	
  9235                           
  9236                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9237                           
  9238                           ;incstack = 0
  9239                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9240  0DBA  31AF  2762  318D   	fcall	_getModulationSubdivision
  9241  0DBD  0021               	movlb	1	; select bank1
  9242  0DBE  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9243  0DBF  0022               	movlb	2	; select bank2
  9244  0DC0  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9245  0DC1  0021               	movlb	1	; select bank1
  9246  0DC2  0820               	movf	?_getModulationSubdivision^(0+128),w
  9247  0DC3  0022               	movlb	2	; select bank2
  9248  0DC4  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9249                           
  9250                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9251  0DC5  307A               	movlw	122
  9252  0DC6  0086               	movwf	6
  9253  0DC7  3024               	movlw	36
  9254  0DC8  0087               	movwf	7
  9255  0DC9  3F40               	moviw [0]fsr1
  9256  0DCA  00D0               	movwf	??_updateModulationArray^(0+256)
  9257  0DCB  3F41               	moviw [1]fsr1
  9258  0DCC  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9259  0DCD  0020               	movlb	0	; select bank0
  9260  0DCE  0849               	movf	_bottom_push_state+1,w
  9261  0DCF  0022               	movlb	2	; select bank2
  9262  0DD0  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9263  0DD1  1D03               	skipz
  9264  0DD2  2DD7               	goto	u10235
  9265  0DD3  0020               	movlb	0	; select bank0
  9266  0DD4  0848               	movf	_bottom_push_state,w
  9267  0DD5  0022               	movlb	2	; select bank2
  9268  0DD6  0650               	xorwf	??_updateModulationArray^(0+256),w
  9269  0DD7                     u10235:	
  9270  0DD7  1D03               	skipz
  9271  0DD8  2DFD               	goto	l9238
  9272  0DD9  307C               	movlw	124
  9273  0DDA  0086               	movwf	6
  9274  0DDB  3024               	movlw	36
  9275  0DDC  0087               	movwf	7
  9276  0DDD  3F40               	moviw [0]fsr1
  9277  0DDE  00D0               	movwf	??_updateModulationArray^(0+256)
  9278  0DDF  3F41               	moviw [1]fsr1
  9279  0DE0  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9280  0DE1  0023               	movlb	3	; select bank3
  9281  0DE2  085C               	movf	(_symmetry+1)^(0+384),w
  9282  0DE3  0022               	movlb	2	; select bank2
  9283  0DE4  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9284  0DE5  1D03               	skipz
  9285  0DE6  2DEB               	goto	u10245
  9286  0DE7  0023               	movlb	3	; select bank3
  9287  0DE8  085B               	movf	_symmetry^(0+384),w
  9288  0DE9  0022               	movlb	2	; select bank2
  9289  0DEA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9290  0DEB                     u10245:	
  9291  0DEB  1D03               	skipz
  9292  0DEC  2DFD               	goto	l9238
  9293  0DED  307E               	movlw	126
  9294  0DEE  0086               	movwf	6
  9295  0DEF  3024               	movlw	36
  9296  0DF0  0087               	movwf	7
  9297  0DF1  3F40               	moviw [0]fsr1
  9298  0DF2  00D0               	movwf	??_updateModulationArray^(0+256)
  9299  0DF3  3F41               	moviw [1]fsr1
  9300  0DF4  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9301  0DF5  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9302  0DF6  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9303  0DF7  1D03               	skipz
  9304  0DF8  2DFB               	goto	u10255
  9305  0DF9  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9306  0DFA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9307  0DFB                     u10255:	
  9308  0DFB  1903               	btfsc	3,2
  9309  0DFC  0008               	return
  9310  0DFD                     l9238:	
  9311                           ;modulation.c: 48: return;
  9312                           
  9313                           
  9314                           ;modulation.c: 49: }
  9315                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9316  0DFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9317  0DFE  0021               	movlb	1	; select bank1
  9318  0DFF  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9319  0E00  0022               	movlb	2	; select bank2
  9320  0E01  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9321  0E02  0021               	movlb	1	; select bank1
  9322  0E03  00A0               	movwf	___awdiv@divisor^(0+128)
  9323  0E04  3068               	movlw	104
  9324  0E05  00A2               	movwf	___awdiv@dividend^(0+128)
  9325  0E06  3001               	movlw	1
  9326  0E07  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9327  0E08  31A4  2464  318D   	fcall	___awdiv
  9328  0E0B  0021               	movlb	1	; select bank1
  9329  0E0C  0821               	movf	(?___awdiv+1)^(0+128),w
  9330  0E0D  0022               	movlb	2	; select bank2
  9331  0E0E  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9332  0E0F  0021               	movlb	1	; select bank1
  9333  0E10  0820               	movf	?___awdiv^(0+128),w
  9334  0E11  0022               	movlb	2	; select bank2
  9335  0E12  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9336                           
  9337                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9338  0E13  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9339  0E14                     l9262:	
  9340  0E14  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9341  0E15  3A80               	xorlw	128
  9342  0E16  3C80               	sublw	128
  9343  0E17  1D03               	skipz
  9344  0E18  2E1B               	goto	u10265
  9345  0E19  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9346  0E1A  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9347  0E1B                     u10265:	
  9348  0E1B  1803               	btfsc	3,0
  9349  0E1C  2FC1               	goto	l9264
  9350                           
  9351                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9352  0E1D  0022               	movlb	2	; select bank2
  9353  0E1E  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9354  0E1F  00D0               	movwf	??_updateModulationArray^(0+256)
  9355  0E20  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9356  0E21  0850               	movf	??_updateModulationArray^(0+256),w
  9357  0E22  00AE               	movwf	___wmul@multiplier^(0+256)
  9358  0E23  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9359  0E24  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9360  0E25  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9361  0E26  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9362  0E27  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9363  0E28  00B0               	movwf	___wmul@multiplicand^(0+256)
  9364  0E29  31AD  25C5  318D   	fcall	___wmul
  9365  0E2C  0022               	movlb	2	; select bank2
  9366  0E2D  082F               	movf	(?___wmul+1)^(0+256),w
  9367  0E2E  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9368  0E2F  082E               	movf	?___wmul^(0+256),w
  9369  0E30  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9370                           
  9371                           ;modulation.c: 54: switch (bottom_push_state) {
  9372  0E31  2FA4               	goto	l9258
  9373  0E32                     l9244:	
  9374                           ;modulation.c: 55: case 1:
  9375                           
  9376                           
  9377                           ;modulation.c: 56: modArray[iAngle] = modCos(thisAngle, symmetry);
  9378  0E32  0022               	movlb	2	; select bank2
  9379  0E33  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9380  0E34  0021               	movlb	1	; select bank1
  9381  0E35  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9382  0E36  0022               	movlb	2	; select bank2
  9383  0E37  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9384  0E38  0021               	movlb	1	; select bank1
  9385  0E39  00A8               	movwf	___awtoft@c^(0+128)
  9386  0E3A  31AE  263A  318D   	fcall	___awtoft
  9387  0E3D  0021               	movlb	1	; select bank1
  9388  0E3E  0828               	movf	?___awtoft^(0+128),w
  9389  0E3F  0022               	movlb	2	; select bank2
  9390  0E40  00B4               	movwf	modCos@angle^(0+256)
  9391  0E41  0021               	movlb	1	; select bank1
  9392  0E42  0829               	movf	(?___awtoft+1)^(0+128),w
  9393  0E43  0022               	movlb	2	; select bank2
  9394  0E44  00B5               	movwf	(modCos@angle+1)^(0+256)
  9395  0E45  0021               	movlb	1	; select bank1
  9396  0E46  082A               	movf	(?___awtoft+2)^(0+128),w
  9397  0E47  0022               	movlb	2	; select bank2
  9398  0E48  00B6               	movwf	(modCos@angle+2)^(0+256)
  9399  0E49  0023               	movlb	3	; select bank3
  9400  0E4A  085C               	movf	(_symmetry+1)^(0+384),w
  9401  0E4B  0021               	movlb	1	; select bank1
  9402  0E4C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9403  0E4D  0023               	movlb	3	; select bank3
  9404  0E4E  085B               	movf	_symmetry^(0+384),w
  9405  0E4F  0021               	movlb	1	; select bank1
  9406  0E50  00A8               	movwf	___awtoft@c^(0+128)
  9407  0E51  31AE  263A  318D   	fcall	___awtoft
  9408  0E54  0021               	movlb	1	; select bank1
  9409  0E55  0828               	movf	?___awtoft^(0+128),w
  9410  0E56  0022               	movlb	2	; select bank2
  9411  0E57  00B7               	movwf	modCos@inflection^(0+256)
  9412  0E58  0021               	movlb	1	; select bank1
  9413  0E59  0829               	movf	(?___awtoft+1)^(0+128),w
  9414  0E5A  0022               	movlb	2	; select bank2
  9415  0E5B  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9416  0E5C  0021               	movlb	1	; select bank1
  9417  0E5D  082A               	movf	(?___awtoft+2)^(0+128),w
  9418  0E5E  0022               	movlb	2	; select bank2
  9419  0E5F  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9420  0E60  3196  2654  318D   	fcall	_modCos
  9421  0E63  0022               	movlb	2	; select bank2
  9422  0E64  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9423  0E65  00D0               	movwf	??_updateModulationArray^(0+256)
  9424  0E66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9425  0E67  35D0               	lslf	??_updateModulationArray^(0+256),f
  9426  0E68  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9427  0E69  308A               	movlw	138
  9428  0E6A  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9429  0E6B  3023               	movlw	35
  9430  0E6C  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9431  0E6D  0850               	movf	??_updateModulationArray^(0+256),w
  9432  0E6E  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9433  0E6F  0086               	movwf	6
  9434  0E70  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9435  0E71  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9436  0E72  0087               	movwf	7
  9437  0E73  0834               	movf	?_modCos^(0+256),w
  9438  0E74  3FC0               	movwi [0]fsr1
  9439  0E75  0835               	movf	(?_modCos+1)^(0+256),w
  9440  0E76  3FC1               	movwi [1]fsr1
  9441                           
  9442                           ;modulation.c: 57: break;
  9443  0E77  2FBB               	goto	l9260
  9444  0E78                     l9246:	
  9445                           ;modulation.c: 58: case 2:
  9446                           
  9447                           
  9448                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9449  0E78  0022               	movlb	2	; select bank2
  9450  0E79  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9451  0E7A  0021               	movlb	1	; select bank1
  9452  0E7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9453  0E7C  0022               	movlb	2	; select bank2
  9454  0E7D  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9455  0E7E  0021               	movlb	1	; select bank1
  9456  0E7F  00A8               	movwf	___awtoft@c^(0+128)
  9457  0E80  31AE  263A  318D   	fcall	___awtoft
  9458  0E83  0021               	movlb	1	; select bank1
  9459  0E84  0828               	movf	?___awtoft^(0+128),w
  9460  0E85  0022               	movlb	2	; select bank2
  9461  0E86  00AE               	movwf	modTri@angle^(0+256)
  9462  0E87  0021               	movlb	1	; select bank1
  9463  0E88  0829               	movf	(?___awtoft+1)^(0+128),w
  9464  0E89  0022               	movlb	2	; select bank2
  9465  0E8A  00AF               	movwf	(modTri@angle+1)^(0+256)
  9466  0E8B  0021               	movlb	1	; select bank1
  9467  0E8C  082A               	movf	(?___awtoft+2)^(0+128),w
  9468  0E8D  0022               	movlb	2	; select bank2
  9469  0E8E  00B0               	movwf	(modTri@angle+2)^(0+256)
  9470  0E8F  0023               	movlb	3	; select bank3
  9471  0E90  085C               	movf	(_symmetry+1)^(0+384),w
  9472  0E91  0021               	movlb	1	; select bank1
  9473  0E92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9474  0E93  0023               	movlb	3	; select bank3
  9475  0E94  085B               	movf	_symmetry^(0+384),w
  9476  0E95  0021               	movlb	1	; select bank1
  9477  0E96  00A8               	movwf	___awtoft@c^(0+128)
  9478  0E97  31AE  263A  318D   	fcall	___awtoft
  9479  0E9A  0021               	movlb	1	; select bank1
  9480  0E9B  0828               	movf	?___awtoft^(0+128),w
  9481  0E9C  0022               	movlb	2	; select bank2
  9482  0E9D  00B1               	movwf	modTri@inflection^(0+256)
  9483  0E9E  0021               	movlb	1	; select bank1
  9484  0E9F  0829               	movf	(?___awtoft+1)^(0+128),w
  9485  0EA0  0022               	movlb	2	; select bank2
  9486  0EA1  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9487  0EA2  0021               	movlb	1	; select bank1
  9488  0EA3  082A               	movf	(?___awtoft+2)^(0+128),w
  9489  0EA4  0022               	movlb	2	; select bank2
  9490  0EA5  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9491  0EA6  3189  21EF  318D   	fcall	_modTri
  9492  0EA9  0022               	movlb	2	; select bank2
  9493  0EAA  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9494  0EAB  00D0               	movwf	??_updateModulationArray^(0+256)
  9495  0EAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9496  0EAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9497  0EAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9498  0EAF  308A               	movlw	138
  9499  0EB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9500  0EB1  3023               	movlw	35
  9501  0EB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9502  0EB3  0850               	movf	??_updateModulationArray^(0+256),w
  9503  0EB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9504  0EB5  0086               	movwf	6
  9505  0EB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9506  0EB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9507  0EB8  0087               	movwf	7
  9508  0EB9  082E               	movf	?_modTri^(0+256),w
  9509  0EBA  3FC0               	movwi [0]fsr1
  9510  0EBB  082F               	movf	(?_modTri+1)^(0+256),w
  9511  0EBC  3FC1               	movwi [1]fsr1
  9512                           
  9513                           ;modulation.c: 60: break;
  9514  0EBD  2FBB               	goto	l9260
  9515  0EBE                     l9248:	
  9516                           ;modulation.c: 61: case 3:
  9517                           
  9518                           
  9519                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9520  0EBE  0022               	movlb	2	; select bank2
  9521  0EBF  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9522  0EC0  0021               	movlb	1	; select bank1
  9523  0EC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9524  0EC2  0022               	movlb	2	; select bank2
  9525  0EC3  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9526  0EC4  0021               	movlb	1	; select bank1
  9527  0EC5  00A8               	movwf	___awtoft@c^(0+128)
  9528  0EC6  31AE  263A  318D   	fcall	___awtoft
  9529  0EC9  0021               	movlb	1	; select bank1
  9530  0ECA  0828               	movf	?___awtoft^(0+128),w
  9531  0ECB  0022               	movlb	2	; select bank2
  9532  0ECC  00C8               	movwf	modSquare@angle^(0+256)
  9533  0ECD  0021               	movlb	1	; select bank1
  9534  0ECE  0829               	movf	(?___awtoft+1)^(0+128),w
  9535  0ECF  0022               	movlb	2	; select bank2
  9536  0ED0  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9537  0ED1  0021               	movlb	1	; select bank1
  9538  0ED2  082A               	movf	(?___awtoft+2)^(0+128),w
  9539  0ED3  0022               	movlb	2	; select bank2
  9540  0ED4  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9541  0ED5  0023               	movlb	3	; select bank3
  9542  0ED6  085C               	movf	(_symmetry+1)^(0+384),w
  9543  0ED7  0021               	movlb	1	; select bank1
  9544  0ED8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9545  0ED9  0023               	movlb	3	; select bank3
  9546  0EDA  085B               	movf	_symmetry^(0+384),w
  9547  0EDB  0021               	movlb	1	; select bank1
  9548  0EDC  00A8               	movwf	___awtoft@c^(0+128)
  9549  0EDD  31AE  263A  318D   	fcall	___awtoft
  9550  0EE0  0021               	movlb	1	; select bank1
  9551  0EE1  0828               	movf	?___awtoft^(0+128),w
  9552  0EE2  0022               	movlb	2	; select bank2
  9553  0EE3  00CB               	movwf	modSquare@inflection^(0+256)
  9554  0EE4  0021               	movlb	1	; select bank1
  9555  0EE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9556  0EE6  0022               	movlb	2	; select bank2
  9557  0EE7  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9558  0EE8  0021               	movlb	1	; select bank1
  9559  0EE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9560  0EEA  0022               	movlb	2	; select bank2
  9561  0EEB  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9562  0EEC  31A1  2123  318D   	fcall	_modSquare
  9563  0EEF  0022               	movlb	2	; select bank2
  9564  0EF0  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9565  0EF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9566  0EF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9567  0EF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9568  0EF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9569  0EF5  308A               	movlw	138
  9570  0EF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9571  0EF7  3023               	movlw	35
  9572  0EF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9573  0EF9  0850               	movf	??_updateModulationArray^(0+256),w
  9574  0EFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9575  0EFB  0086               	movwf	6
  9576  0EFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9577  0EFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9578  0EFE  0087               	movwf	7
  9579  0EFF  0848               	movf	?_modSquare^(0+256),w
  9580  0F00  3FC0               	movwi [0]fsr1
  9581  0F01  0849               	movf	(?_modSquare+1)^(0+256),w
  9582  0F02  3FC1               	movwi [1]fsr1
  9583                           
  9584                           ;modulation.c: 63: break;
  9585  0F03  2FBB               	goto	l9260
  9586  0F04                     l9250:	
  9587                           ;modulation.c: 64: case 4:
  9588                           
  9589                           
  9590                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9591  0F04  0022               	movlb	2	; select bank2
  9592  0F05  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9593  0F06  0021               	movlb	1	; select bank1
  9594  0F07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9595  0F08  0022               	movlb	2	; select bank2
  9596  0F09  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9597  0F0A  0021               	movlb	1	; select bank1
  9598  0F0B  00A8               	movwf	___awtoft@c^(0+128)
  9599  0F0C  31AE  263A  318D   	fcall	___awtoft
  9600  0F0F  0021               	movlb	1	; select bank1
  9601  0F10  0828               	movf	?___awtoft^(0+128),w
  9602  0F11  0022               	movlb	2	; select bank2
  9603  0F12  00C2               	movwf	modSawRev@angle^(0+256)
  9604  0F13  0021               	movlb	1	; select bank1
  9605  0F14  0829               	movf	(?___awtoft+1)^(0+128),w
  9606  0F15  0022               	movlb	2	; select bank2
  9607  0F16  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9608  0F17  0021               	movlb	1	; select bank1
  9609  0F18  082A               	movf	(?___awtoft+2)^(0+128),w
  9610  0F19  0022               	movlb	2	; select bank2
  9611  0F1A  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9612  0F1B  0023               	movlb	3	; select bank3
  9613  0F1C  085C               	movf	(_symmetry+1)^(0+384),w
  9614  0F1D  0021               	movlb	1	; select bank1
  9615  0F1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9616  0F1F  0023               	movlb	3	; select bank3
  9617  0F20  085B               	movf	_symmetry^(0+384),w
  9618  0F21  0021               	movlb	1	; select bank1
  9619  0F22  00A8               	movwf	___awtoft@c^(0+128)
  9620  0F23  31AE  263A  318D   	fcall	___awtoft
  9621  0F26  0021               	movlb	1	; select bank1
  9622  0F27  0828               	movf	?___awtoft^(0+128),w
  9623  0F28  0022               	movlb	2	; select bank2
  9624  0F29  00C5               	movwf	modSawRev@inflection^(0+256)
  9625  0F2A  0021               	movlb	1	; select bank1
  9626  0F2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9627  0F2C  0022               	movlb	2	; select bank2
  9628  0F2D  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9629  0F2E  0021               	movlb	1	; select bank1
  9630  0F2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9631  0F30  0022               	movlb	2	; select bank2
  9632  0F31  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9633  0F32  31AD  25FD  318D   	fcall	_modSawRev
  9634  0F35  0022               	movlb	2	; select bank2
  9635  0F36  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9636  0F37  00D0               	movwf	??_updateModulationArray^(0+256)
  9637  0F38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9638  0F39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9639  0F3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9640  0F3B  308A               	movlw	138
  9641  0F3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9642  0F3D  3023               	movlw	35
  9643  0F3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9644  0F3F  0850               	movf	??_updateModulationArray^(0+256),w
  9645  0F40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9646  0F41  0086               	movwf	6
  9647  0F42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9648  0F43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9649  0F44  0087               	movwf	7
  9650  0F45  0842               	movf	?_modSawRev^(0+256),w
  9651  0F46  3FC0               	movwi [0]fsr1
  9652  0F47  0843               	movf	(?_modSawRev+1)^(0+256),w
  9653  0F48  3FC1               	movwi [1]fsr1
  9654                           
  9655                           ;modulation.c: 66: break;
  9656  0F49  2FBB               	goto	l9260
  9657  0F4A                     l9252:	
  9658                           ;modulation.c: 67: case 5:
  9659                           
  9660                           
  9661                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9662  0F4A  0022               	movlb	2	; select bank2
  9663  0F4B  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9664  0F4C  0021               	movlb	1	; select bank1
  9665  0F4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9666  0F4E  0022               	movlb	2	; select bank2
  9667  0F4F  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9668  0F50  0021               	movlb	1	; select bank1
  9669  0F51  00A8               	movwf	___awtoft@c^(0+128)
  9670  0F52  31AE  263A  318D   	fcall	___awtoft
  9671  0F55  0021               	movlb	1	; select bank1
  9672  0F56  0828               	movf	?___awtoft^(0+128),w
  9673  0F57  0022               	movlb	2	; select bank2
  9674  0F58  00AE               	movwf	modSaw@angle^(0+256)
  9675  0F59  0021               	movlb	1	; select bank1
  9676  0F5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9677  0F5B  0022               	movlb	2	; select bank2
  9678  0F5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9679  0F5D  0021               	movlb	1	; select bank1
  9680  0F5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9681  0F5F  0022               	movlb	2	; select bank2
  9682  0F60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9683  0F61  0023               	movlb	3	; select bank3
  9684  0F62  085C               	movf	(_symmetry+1)^(0+384),w
  9685  0F63  0021               	movlb	1	; select bank1
  9686  0F64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9687  0F65  0023               	movlb	3	; select bank3
  9688  0F66  085B               	movf	_symmetry^(0+384),w
  9689  0F67  0021               	movlb	1	; select bank1
  9690  0F68  00A8               	movwf	___awtoft@c^(0+128)
  9691  0F69  31AE  263A  318D   	fcall	___awtoft
  9692  0F6C  0021               	movlb	1	; select bank1
  9693  0F6D  0828               	movf	?___awtoft^(0+128),w
  9694  0F6E  0022               	movlb	2	; select bank2
  9695  0F6F  00B1               	movwf	modSaw@inflection^(0+256)
  9696  0F70  0021               	movlb	1	; select bank1
  9697  0F71  0829               	movf	(?___awtoft+1)^(0+128),w
  9698  0F72  0022               	movlb	2	; select bank2
  9699  0F73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9700  0F74  0021               	movlb	1	; select bank1
  9701  0F75  082A               	movf	(?___awtoft+2)^(0+128),w
  9702  0F76  0022               	movlb	2	; select bank2
  9703  0F77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9704  0F78  3194  24BC  318D   	fcall	_modSaw
  9705  0F7B  0022               	movlb	2	; select bank2
  9706  0F7C  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9707  0F7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9708  0F7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9709  0F7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9710  0F80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9711  0F81  308A               	movlw	138
  9712  0F82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9713  0F83  3023               	movlw	35
  9714  0F84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9715  0F85  0850               	movf	??_updateModulationArray^(0+256),w
  9716  0F86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9717  0F87  0086               	movwf	6
  9718  0F88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9719  0F89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9720  0F8A  0087               	movwf	7
  9721  0F8B  082E               	movf	?_modSaw^(0+256),w
  9722  0F8C  3FC0               	movwi [0]fsr1
  9723  0F8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9724  0F8E  3FC1               	movwi [1]fsr1
  9725                           
  9726                           ;modulation.c: 69: break;
  9727  0F8F  2FBB               	goto	l9260
  9728  0F90                     l9254:	
  9729                           ;modulation.c: 70: default:
  9730                           
  9731                           
  9732                           ;modulation.c: 71: modArray[iAngle] = 0;
  9733  0F90  0022               	movlb	2	; select bank2
  9734  0F91  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9735  0F92  00D0               	movwf	??_updateModulationArray^(0+256)
  9736  0F93  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9737  0F94  35D0               	lslf	??_updateModulationArray^(0+256),f
  9738  0F95  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9739  0F96  308A               	movlw	138
  9740  0F97  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9741  0F98  3023               	movlw	35
  9742  0F99  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9743  0F9A  0850               	movf	??_updateModulationArray^(0+256),w
  9744  0F9B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9745  0F9C  0086               	movwf	6
  9746  0F9D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9747  0F9E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9748  0F9F  0087               	movwf	7
  9749  0FA0  3000               	movlw	0
  9750  0FA1  3FC0               	movwi [0]fsr1
  9751  0FA2  3FC1               	movwi [1]fsr1
  9752                           
  9753                           ;modulation.c: 73: }
  9754                           
  9755                           ;modulation.c: 72: break;
  9756  0FA3  2FBB               	goto	l9260
  9757  0FA4                     l9258:	
  9758                           
  9759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9760                           ; Switch size 1, requested type "space"
  9761                           ; Number of cases is 1, Range of values is 0 to 0
  9762                           ; switch strategies available:
  9763                           ; Name         Instructions Cycles
  9764                           ; simple_byte            4     3 (average)
  9765                           ; direct_byte            8     6 (fixed)
  9766                           ; jumptable            260     6 (fixed)
  9767                           ;	Chosen strategy is simple_byte
  9768  0FA4  0020               	movlb	0	; select bank0
  9769  0FA5  0849               	movf	_bottom_push_state+1,w
  9770  0FA6  3A00               	xorlw	0	; case 0
  9771  0FA7  1903               	skipnz
  9772  0FA8  2FAA               	goto	l9840
  9773  0FA9  2F90               	goto	l9254
  9774  0FAA                     l9840:	
  9775                           
  9776                           ; Switch size 1, requested type "space"
  9777                           ; Number of cases is 5, Range of values is 1 to 5
  9778                           ; switch strategies available:
  9779                           ; Name         Instructions Cycles
  9780                           ; simple_byte           16     9 (average)
  9781                           ; direct_byte           19     9 (fixed)
  9782                           ; jumptable            263     9 (fixed)
  9783                           ;	Chosen strategy is simple_byte
  9784  0FAA  0848               	movf	_bottom_push_state,w
  9785  0FAB  3A01               	xorlw	1	; case 1
  9786  0FAC  1903               	skipnz
  9787  0FAD  2E32               	goto	l9244
  9788  0FAE  3A03               	xorlw	3	; case 2
  9789  0FAF  1903               	skipnz
  9790  0FB0  2E78               	goto	l9246
  9791  0FB1  3A01               	xorlw	1	; case 3
  9792  0FB2  1903               	skipnz
  9793  0FB3  2EBE               	goto	l9248
  9794  0FB4  3A07               	xorlw	7	; case 4
  9795  0FB5  1903               	skipnz
  9796  0FB6  2F04               	goto	l9250
  9797  0FB7  3A01               	xorlw	1	; case 5
  9798  0FB8  1903               	skipnz
  9799  0FB9  2F4A               	goto	l9252
  9800  0FBA  2F90               	goto	l9254
  9801  0FBB                     l9260:	
  9802  0FBB  3001               	movlw	1
  9803  0FBC  0022               	movlb	2	; select bank2
  9804  0FBD  00D0               	movwf	??_updateModulationArray^(0+256)
  9805  0FBE  0850               	movf	??_updateModulationArray^(0+256),w
  9806  0FBF  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9807  0FC0  2E14               	goto	l9262
  9808  0FC1                     l9264:	
  9809                           
  9810                           ;modulation.c: 74: }
  9811                           ;modulation.c: 75: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9812  0FC1  0022               	movlb	2	; select bank2
  9813  0FC2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9814  0FC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9815  0FC4  0850               	movf	??_updateModulationArray^(0+256),w
  9816  0FC5  00D6               	movwf	updateModulationArray@iAngle_2347^(0+256)
  9817  0FC6  3078               	movlw	120
  9818  0FC7  0256               	subwf	updateModulationArray@iAngle_2347^(0+256),w
  9819  0FC8  1803               	btfsc	3,0
  9820  0FC9  2FE4               	goto	l9274
  9821  0FCA                     l9268:	
  9822                           
  9823                           ;modulation.c: 76: modArray[iAngle] = 0 ;
  9824  0FCA  0856               	movf	updateModulationArray@iAngle_2347^(0+256),w
  9825  0FCB  00D0               	movwf	??_updateModulationArray^(0+256)
  9826  0FCC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9827  0FCD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9828  0FCE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9829  0FCF  308A               	movlw	138
  9830  0FD0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9831  0FD1  3023               	movlw	35
  9832  0FD2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9833  0FD3  0850               	movf	??_updateModulationArray^(0+256),w
  9834  0FD4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9835  0FD5  0086               	movwf	6
  9836  0FD6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9837  0FD7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9838  0FD8  0087               	movwf	7
  9839  0FD9  3000               	movlw	0
  9840  0FDA  3FC0               	movwi [0]fsr1
  9841  0FDB  3FC1               	movwi [1]fsr1
  9842  0FDC  3001               	movlw	1
  9843  0FDD  00D0               	movwf	??_updateModulationArray^(0+256)
  9844  0FDE  0850               	movf	??_updateModulationArray^(0+256),w
  9845  0FDF  07D6               	addwf	updateModulationArray@iAngle_2347^(0+256),f
  9846  0FE0  3078               	movlw	120
  9847  0FE1  0256               	subwf	updateModulationArray@iAngle_2347^(0+256),w
  9848  0FE2  1C03               	skipc
  9849  0FE3  2FCA               	goto	l9268
  9850  0FE4                     l9274:	
  9851                           
  9852                           ;modulation.c: 77: }
  9853                           ;modulation.c: 78: modArray[120] = bottom_push_state;
  9854  0FE4  307A               	movlw	122
  9855  0FE5  0086               	movwf	6
  9856  0FE6  3024               	movlw	36
  9857  0FE7  0087               	movwf	7
  9858  0FE8  0020               	movlb	0	; select bank0
  9859  0FE9  0848               	movf	_bottom_push_state,w
  9860  0FEA  3FC0               	movwi [0]fsr1
  9861  0FEB  0849               	movf	_bottom_push_state+1,w
  9862  0FEC  3FC1               	movwi [1]fsr1
  9863                           
  9864                           ;modulation.c: 79: modArray[121] = symmetry;
  9865  0FED  307C               	movlw	124
  9866  0FEE  0086               	movwf	6
  9867  0FEF  3024               	movlw	36
  9868  0FF0  0087               	movwf	7
  9869  0FF1  0023               	movlb	3	; select bank3
  9870  0FF2  085B               	movf	_symmetry^(0+384),w
  9871  0FF3  3FC0               	movwi [0]fsr1
  9872  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9873  0FF5  3FC1               	movwi [1]fsr1
  9874                           
  9875                           ;modulation.c: 80: modArray[122] = subDiv;
  9876  0FF6  307E               	movlw	126
  9877  0FF7  0086               	movwf	6
  9878  0FF8  3024               	movlw	36
  9879  0FF9  0087               	movwf	7
  9880  0FFA  0022               	movlb	2	; select bank2
  9881  0FFB  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9882  0FFC  3FC0               	movwi [0]fsr1
  9883  0FFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9884  0FFE  3FC1               	movwi [1]fsr1
  9885  0FFF  0008               	return
  9886  1000                     __end_of_updateModulationArray:	
  9887                           
  9888                           	psect	text17
  9889  09EF                     __ptext17:	
  9890 ;; *************** function _modTri *****************
  9891 ;; Defined at:
  9892 ;;		line 100 in file "modulation.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  angle           3   14[BANK2 ] void 
  9895 ;;  inflection      3   17[BANK2 ] void 
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;  tmpVal          3   29[BANK2 ] void 
  9898 ;;  period          3   26[BANK2 ] void 
  9899 ;;  shift           3   23[BANK2 ] void 
  9900 ;; Return value:  Size  Location     Type
  9901 ;;                  2   14[BANK2 ] int 
  9902 ;; Registers used:
  9903 ;;		wreg, status,2, status,0, pclath, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9909 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9910 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9912 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9913 ;;Total ram usage:       18 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    5
  9916 ;; This function calls:
  9917 ;;		___ftadd
  9918 ;;		___ftdiv
  9919 ;;		___ftge
  9920 ;;		___ftmul
  9921 ;;		___ftneg
  9922 ;;		___fttol
  9923 ;; This function is called by:
  9924 ;;		_updateModulationArray
  9925 ;; This function uses a non-reentrant model
  9926 ;;
  9927                           
  9928                           
  9929                           ;psect for function _modTri
  9930  09EF                     _modTri:	
  9931                           
  9932                           ;modulation.c: 101: double period = 1.0;
  9933                           
  9934                           ;incstack = 0
  9935                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9936  09EF  3000               	movlw	0
  9937  09F0  0022               	movlb	2	; select bank2
  9938  09F1  00BA               	movwf	modTri@period^(0+256)
  9939  09F2  3080               	movlw	128
  9940  09F3  00BB               	movwf	(modTri@period+1)^(0+256)
  9941  09F4  303F               	movlw	63
  9942  09F5  00BC               	movwf	(modTri@period+2)^(0+256)
  9943                           
  9944                           ;modulation.c: 102: double shift = 0;
  9945  09F6  3000               	movlw	0
  9946  09F7  00B7               	movwf	modTri@shift^(0+256)
  9947  09F8  3000               	movlw	0
  9948  09F9  00B8               	movwf	(modTri@shift+1)^(0+256)
  9949  09FA  3000               	movlw	0
  9950  09FB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9951                           
  9952                           ;modulation.c: 104: if(angle<=inflection) {
  9953  09FC  0831               	movf	modTri@inflection^(0+256),w
  9954  09FD  0021               	movlb	1	; select bank1
  9955  09FE  00A0               	movwf	___ftge@ff1^(0+128)
  9956  09FF  0022               	movlb	2	; select bank2
  9957  0A00  0832               	movf	(modTri@inflection+1)^(0+256),w
  9958  0A01  0021               	movlb	1	; select bank1
  9959  0A02  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9960  0A03  0022               	movlb	2	; select bank2
  9961  0A04  0833               	movf	(modTri@inflection+2)^(0+256),w
  9962  0A05  0021               	movlb	1	; select bank1
  9963  0A06  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9964  0A07  0022               	movlb	2	; select bank2
  9965  0A08  082E               	movf	modTri@angle^(0+256),w
  9966  0A09  0021               	movlb	1	; select bank1
  9967  0A0A  00A3               	movwf	___ftge@ff2^(0+128)
  9968  0A0B  0022               	movlb	2	; select bank2
  9969  0A0C  082F               	movf	(modTri@angle+1)^(0+256),w
  9970  0A0D  0021               	movlb	1	; select bank1
  9971  0A0E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9972  0A0F  0022               	movlb	2	; select bank2
  9973  0A10  0830               	movf	(modTri@angle+2)^(0+256),w
  9974  0A11  0021               	movlb	1	; select bank1
  9975  0A12  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9976  0A13  31A0  20AA  3189   	fcall	___ftge
  9977  0A16  1C03               	btfss	3,0
  9978  0A17  2A24               	goto	l8594
  9979                           
  9980                           ;modulation.c: 105: period = 180.0/inflection;
  9981  0A18  0022               	movlb	2	; select bank2
  9982  0A19  0831               	movf	modTri@inflection^(0+256),w
  9983  0A1A  0021               	movlb	1	; select bank1
  9984  0A1B  00CE               	movwf	___ftdiv@f2^(0+128)
  9985  0A1C  0022               	movlb	2	; select bank2
  9986  0A1D  0832               	movf	(modTri@inflection+1)^(0+256),w
  9987  0A1E  0021               	movlb	1	; select bank1
  9988  0A1F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9989  0A20  0022               	movlb	2	; select bank2
  9990  0A21  0833               	movf	(modTri@inflection+2)^(0+256),w
  9991  0A22  0021               	movlb	1	; select bank1
  9992  0A23  2ADF               	goto	L5
  9993  0A24                     l8594:	
  9994                           ;modulation.c: 106: } else {
  9995                           
  9996                           
  9997                           ;modulation.c: 107: shift = -(360-inflection*2)*(180/(360-inflection));
  9998  0A24  0022               	movlb	2	; select bank2
  9999  0A25  0831               	movf	modTri@inflection^(0+256),w
 10000  0A26  0021               	movlb	1	; select bank1
 10001  0A27  00B1               	movwf	___ftmul@f2^(0+128)
 10002  0A28  0022               	movlb	2	; select bank2
 10003  0A29  0832               	movf	(modTri@inflection+1)^(0+256),w
 10004  0A2A  0021               	movlb	1	; select bank1
 10005  0A2B  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10006  0A2C  0022               	movlb	2	; select bank2
 10007  0A2D  0833               	movf	(modTri@inflection+2)^(0+256),w
 10008  0A2E  0021               	movlb	1	; select bank1
 10009  0A2F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10010  0A30  3000               	movlw	0
 10011  0A31  00AE               	movwf	___ftmul@f1^(0+128)
 10012  0A32  3000               	movlw	0
 10013  0A33  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10014  0A34  3040               	movlw	64
 10015  0A35  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10016  0A36  319E  267B  3189   	fcall	___ftmul
 10017  0A39  0021               	movlb	1	; select bank1
 10018  0A3A  082E               	movf	?___ftmul^(0+128),w
 10019  0A3B  00BE               	movwf	___ftneg@f1^(0+128)
 10020  0A3C  082F               	movf	(?___ftmul+1)^(0+128),w
 10021  0A3D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10022  0A3E  0830               	movf	(?___ftmul+2)^(0+128),w
 10023  0A3F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10024  0A40  31AC  24F8  3189   	fcall	___ftneg
 10025  0A43  0021               	movlb	1	; select bank1
 10026  0A44  083E               	movf	?___ftneg^(0+128),w
 10027  0A45  00C4               	movwf	___ftadd@f2^(0+128)
 10028  0A46  083F               	movf	(?___ftneg+1)^(0+128),w
 10029  0A47  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10030  0A48  0840               	movf	(?___ftneg+2)^(0+128),w
 10031  0A49  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10032  0A4A  3000               	movlw	0
 10033  0A4B  00C1               	movwf	___ftadd@f1^(0+128)
 10034  0A4C  30B4               	movlw	180
 10035  0A4D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10036  0A4E  3043               	movlw	67
 10037  0A4F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10038  0A50  3190  2035  3189   	fcall	___ftadd
 10039  0A53  0021               	movlb	1	; select bank1
 10040  0A54  0841               	movf	?___ftadd^(0+128),w
 10041  0A55  0022               	movlb	2	; select bank2
 10042  0A56  00B4               	movwf	_modTri$2853^(0+256)
 10043  0A57  0021               	movlb	1	; select bank1
 10044  0A58  0842               	movf	(?___ftadd+1)^(0+128),w
 10045  0A59  0022               	movlb	2	; select bank2
 10046  0A5A  00B5               	movwf	(_modTri$2853+1)^(0+256)
 10047  0A5B  0021               	movlb	1	; select bank1
 10048  0A5C  0843               	movf	(?___ftadd+2)^(0+128),w
 10049  0A5D  0022               	movlb	2	; select bank2
 10050  0A5E  00B6               	movwf	(_modTri$2853+2)^(0+256)
 10051                           
 10052                           ;modulation.c: 107: shift = -(360-inflection*2)*(180/(360-inflection));
 10053  0A5F  0834               	movf	_modTri$2853^(0+256),w
 10054  0A60  0021               	movlb	1	; select bank1
 10055  0A61  00BE               	movwf	___ftneg@f1^(0+128)
 10056  0A62  0022               	movlb	2	; select bank2
 10057  0A63  0835               	movf	(_modTri$2853+1)^(0+256),w
 10058  0A64  0021               	movlb	1	; select bank1
 10059  0A65  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10060  0A66  0022               	movlb	2	; select bank2
 10061  0A67  0836               	movf	(_modTri$2853+2)^(0+256),w
 10062  0A68  0021               	movlb	1	; select bank1
 10063  0A69  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10064  0A6A  31AC  24F8  3189   	fcall	___ftneg
 10065  0A6D  0021               	movlb	1	; select bank1
 10066  0A6E  083E               	movf	?___ftneg^(0+128),w
 10067  0A6F  00AE               	movwf	___ftmul@f1^(0+128)
 10068  0A70  083F               	movf	(?___ftneg+1)^(0+128),w
 10069  0A71  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10070  0A72  0840               	movf	(?___ftneg+2)^(0+128),w
 10071  0A73  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10072  0A74  3000               	movlw	0
 10073  0A75  00C1               	movwf	___ftadd@f1^(0+128)
 10074  0A76  30B4               	movlw	180
 10075  0A77  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10076  0A78  3043               	movlw	67
 10077  0A79  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10078  0A7A  0022               	movlb	2	; select bank2
 10079  0A7B  0831               	movf	modTri@inflection^(0+256),w
 10080  0A7C  0021               	movlb	1	; select bank1
 10081  0A7D  00BE               	movwf	___ftneg@f1^(0+128)
 10082  0A7E  0022               	movlb	2	; select bank2
 10083  0A7F  0832               	movf	(modTri@inflection+1)^(0+256),w
 10084  0A80  0021               	movlb	1	; select bank1
 10085  0A81  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10086  0A82  0022               	movlb	2	; select bank2
 10087  0A83  0833               	movf	(modTri@inflection+2)^(0+256),w
 10088  0A84  0021               	movlb	1	; select bank1
 10089  0A85  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10090  0A86  31AC  24F8  3189   	fcall	___ftneg
 10091  0A89  0021               	movlb	1	; select bank1
 10092  0A8A  083E               	movf	?___ftneg^(0+128),w
 10093  0A8B  00C4               	movwf	___ftadd@f2^(0+128)
 10094  0A8C  083F               	movf	(?___ftneg+1)^(0+128),w
 10095  0A8D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10096  0A8E  0840               	movf	(?___ftneg+2)^(0+128),w
 10097  0A8F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10098  0A90  3190  2035  3189   	fcall	___ftadd
 10099  0A93  0021               	movlb	1	; select bank1
 10100  0A94  0841               	movf	?___ftadd^(0+128),w
 10101  0A95  00CE               	movwf	___ftdiv@f2^(0+128)
 10102  0A96  0842               	movf	(?___ftadd+1)^(0+128),w
 10103  0A97  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10104  0A98  0843               	movf	(?___ftadd+2)^(0+128),w
 10105  0A99  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10106  0A9A  3000               	movlw	0
 10107  0A9B  00D1               	movwf	___ftdiv@f1^(0+128)
 10108  0A9C  3034               	movlw	52
 10109  0A9D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10110  0A9E  3043               	movlw	67
 10111  0A9F  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10112  0AA0  319C  2474  3189   	fcall	___ftdiv
 10113  0AA3  0021               	movlb	1	; select bank1
 10114  0AA4  084E               	movf	?___ftdiv^(0+128),w
 10115  0AA5  00B1               	movwf	___ftmul@f2^(0+128)
 10116  0AA6  084F               	movf	(?___ftdiv+1)^(0+128),w
 10117  0AA7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10118  0AA8  0850               	movf	(?___ftdiv+2)^(0+128),w
 10119  0AA9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10120  0AAA  319E  267B  3189   	fcall	___ftmul
 10121  0AAD  0021               	movlb	1	; select bank1
 10122  0AAE  082E               	movf	?___ftmul^(0+128),w
 10123  0AAF  0022               	movlb	2	; select bank2
 10124  0AB0  00B7               	movwf	modTri@shift^(0+256)
 10125  0AB1  0021               	movlb	1	; select bank1
 10126  0AB2  082F               	movf	(?___ftmul+1)^(0+128),w
 10127  0AB3  0022               	movlb	2	; select bank2
 10128  0AB4  00B8               	movwf	(modTri@shift+1)^(0+256)
 10129  0AB5  0021               	movlb	1	; select bank1
 10130  0AB6  0830               	movf	(?___ftmul+2)^(0+128),w
 10131  0AB7  0022               	movlb	2	; select bank2
 10132  0AB8  00B9               	movwf	(modTri@shift+2)^(0+256)
 10133                           
 10134                           ;modulation.c: 108: period = 180/(360-inflection);
 10135  0AB9  3000               	movlw	0
 10136  0ABA  0021               	movlb	1	; select bank1
 10137  0ABB  00C1               	movwf	___ftadd@f1^(0+128)
 10138  0ABC  30B4               	movlw	180
 10139  0ABD  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10140  0ABE  3043               	movlw	67
 10141  0ABF  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10142  0AC0  0022               	movlb	2	; select bank2
 10143  0AC1  0831               	movf	modTri@inflection^(0+256),w
 10144  0AC2  0021               	movlb	1	; select bank1
 10145  0AC3  00BE               	movwf	___ftneg@f1^(0+128)
 10146  0AC4  0022               	movlb	2	; select bank2
 10147  0AC5  0832               	movf	(modTri@inflection+1)^(0+256),w
 10148  0AC6  0021               	movlb	1	; select bank1
 10149  0AC7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10150  0AC8  0022               	movlb	2	; select bank2
 10151  0AC9  0833               	movf	(modTri@inflection+2)^(0+256),w
 10152  0ACA  0021               	movlb	1	; select bank1
 10153  0ACB  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10154  0ACC  31AC  24F8  3189   	fcall	___ftneg
 10155  0ACF  0021               	movlb	1	; select bank1
 10156  0AD0  083E               	movf	?___ftneg^(0+128),w
 10157  0AD1  00C4               	movwf	___ftadd@f2^(0+128)
 10158  0AD2  083F               	movf	(?___ftneg+1)^(0+128),w
 10159  0AD3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10160  0AD4  0840               	movf	(?___ftneg+2)^(0+128),w
 10161  0AD5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10162  0AD6  3190  2035  3189   	fcall	___ftadd
 10163  0AD9  0021               	movlb	1	; select bank1
 10164  0ADA  0841               	movf	?___ftadd^(0+128),w
 10165  0ADB  00CE               	movwf	___ftdiv@f2^(0+128)
 10166  0ADC  0842               	movf	(?___ftadd+1)^(0+128),w
 10167  0ADD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10168  0ADE  0843               	movf	(?___ftadd+2)^(0+128),w
 10169  0ADF                     L5:	
 10170  0ADF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10171  0AE0  3000               	movlw	0
 10172  0AE1  00D1               	movwf	___ftdiv@f1^(0+128)
 10173  0AE2  3034               	movlw	52
 10174  0AE3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10175  0AE4  3043               	movlw	67
 10176  0AE5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10177  0AE6  319C  2474  3189   	fcall	___ftdiv
 10178  0AE9  0021               	movlb	1	; select bank1
 10179  0AEA  084E               	movf	?___ftdiv^(0+128),w
 10180  0AEB  0022               	movlb	2	; select bank2
 10181  0AEC  00BA               	movwf	modTri@period^(0+256)
 10182  0AED  0021               	movlb	1	; select bank1
 10183  0AEE  084F               	movf	(?___ftdiv+1)^(0+128),w
 10184  0AEF  0022               	movlb	2	; select bank2
 10185  0AF0  00BB               	movwf	(modTri@period+1)^(0+256)
 10186  0AF1  0021               	movlb	1	; select bank1
 10187  0AF2  0850               	movf	(?___ftdiv+2)^(0+128),w
 10188  0AF3  0022               	movlb	2	; select bank2
 10189  0AF4  00BC               	movwf	(modTri@period+2)^(0+256)
 10190                           
 10191                           ;modulation.c: 110: }
 10192                           ;modulation.c: 111: double tmpVal = (period*angle-shift) ;
 10193  0AF5  0837               	movf	modTri@shift^(0+256),w
 10194  0AF6  0021               	movlb	1	; select bank1
 10195  0AF7  00BE               	movwf	___ftneg@f1^(0+128)
 10196  0AF8  0022               	movlb	2	; select bank2
 10197  0AF9  0838               	movf	(modTri@shift+1)^(0+256),w
 10198  0AFA  0021               	movlb	1	; select bank1
 10199  0AFB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10200  0AFC  0022               	movlb	2	; select bank2
 10201  0AFD  0839               	movf	(modTri@shift+2)^(0+256),w
 10202  0AFE  0021               	movlb	1	; select bank1
 10203  0AFF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10204  0B00  31AC  24F8  3189   	fcall	___ftneg
 10205  0B03  0021               	movlb	1	; select bank1
 10206  0B04  083E               	movf	?___ftneg^(0+128),w
 10207  0B05  00C1               	movwf	___ftadd@f1^(0+128)
 10208  0B06  083F               	movf	(?___ftneg+1)^(0+128),w
 10209  0B07  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10210  0B08  0840               	movf	(?___ftneg+2)^(0+128),w
 10211  0B09  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10212  0B0A  0022               	movlb	2	; select bank2
 10213  0B0B  082E               	movf	modTri@angle^(0+256),w
 10214  0B0C  0021               	movlb	1	; select bank1
 10215  0B0D  00AE               	movwf	___ftmul@f1^(0+128)
 10216  0B0E  0022               	movlb	2	; select bank2
 10217  0B0F  082F               	movf	(modTri@angle+1)^(0+256),w
 10218  0B10  0021               	movlb	1	; select bank1
 10219  0B11  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10220  0B12  0022               	movlb	2	; select bank2
 10221  0B13  0830               	movf	(modTri@angle+2)^(0+256),w
 10222  0B14  0021               	movlb	1	; select bank1
 10223  0B15  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10224  0B16  0022               	movlb	2	; select bank2
 10225  0B17  083A               	movf	modTri@period^(0+256),w
 10226  0B18  0021               	movlb	1	; select bank1
 10227  0B19  00B1               	movwf	___ftmul@f2^(0+128)
 10228  0B1A  0022               	movlb	2	; select bank2
 10229  0B1B  083B               	movf	(modTri@period+1)^(0+256),w
 10230  0B1C  0021               	movlb	1	; select bank1
 10231  0B1D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10232  0B1E  0022               	movlb	2	; select bank2
 10233  0B1F  083C               	movf	(modTri@period+2)^(0+256),w
 10234  0B20  0021               	movlb	1	; select bank1
 10235  0B21  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10236  0B22  319E  267B  3189   	fcall	___ftmul
 10237  0B25  0021               	movlb	1	; select bank1
 10238  0B26  082E               	movf	?___ftmul^(0+128),w
 10239  0B27  00C4               	movwf	___ftadd@f2^(0+128)
 10240  0B28  082F               	movf	(?___ftmul+1)^(0+128),w
 10241  0B29  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10242  0B2A  0830               	movf	(?___ftmul+2)^(0+128),w
 10243  0B2B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10244  0B2C  3190  2035  3189   	fcall	___ftadd
 10245  0B2F  0021               	movlb	1	; select bank1
 10246  0B30  0841               	movf	?___ftadd^(0+128),w
 10247  0B31  0022               	movlb	2	; select bank2
 10248  0B32  00BD               	movwf	modTri@tmpVal^(0+256)
 10249  0B33  0021               	movlb	1	; select bank1
 10250  0B34  0842               	movf	(?___ftadd+1)^(0+128),w
 10251  0B35  0022               	movlb	2	; select bank2
 10252  0B36  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10253  0B37  0021               	movlb	1	; select bank1
 10254  0B38  0843               	movf	(?___ftadd+2)^(0+128),w
 10255  0B39  0022               	movlb	2	; select bank2
 10256  0B3A  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10257                           
 10258                           ;modulation.c: 112: if (tmpVal > 180) {
 10259  0B3B  3000               	movlw	0
 10260  0B3C  0021               	movlb	1	; select bank1
 10261  0B3D  00A0               	movwf	___ftge@ff1^(0+128)
 10262  0B3E  3034               	movlw	52
 10263  0B3F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10264  0B40  3043               	movlw	67
 10265  0B41  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10266  0B42  0022               	movlb	2	; select bank2
 10267  0B43  083D               	movf	modTri@tmpVal^(0+256),w
 10268  0B44  0021               	movlb	1	; select bank1
 10269  0B45  00A3               	movwf	___ftge@ff2^(0+128)
 10270  0B46  0022               	movlb	2	; select bank2
 10271  0B47  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10272  0B48  0021               	movlb	1	; select bank1
 10273  0B49  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10274  0B4A  0022               	movlb	2	; select bank2
 10275  0B4B  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10276  0B4C  0021               	movlb	1	; select bank1
 10277  0B4D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10278  0B4E  31A0  20AA  3189   	fcall	___ftge
 10279  0B51  1803               	btfsc	3,0
 10280  0B52  2B66               	goto	l8598
 10281                           
 10282                           ;modulation.c: 113: tmpVal = tmpVal - 270.0;
 10283  0B53  3000               	movlw	0
 10284  0B54  0021               	movlb	1	; select bank1
 10285  0B55  00C1               	movwf	___ftadd@f1^(0+128)
 10286  0B56  3087               	movlw	135
 10287  0B57  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10288  0B58  30C3               	movlw	195
 10289  0B59  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10290  0B5A  0022               	movlb	2	; select bank2
 10291  0B5B  083D               	movf	modTri@tmpVal^(0+256),w
 10292  0B5C  0021               	movlb	1	; select bank1
 10293  0B5D  00C4               	movwf	___ftadd@f2^(0+128)
 10294  0B5E  0022               	movlb	2	; select bank2
 10295  0B5F  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10296  0B60  0021               	movlb	1	; select bank1
 10297  0B61  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10298  0B62  0022               	movlb	2	; select bank2
 10299  0B63  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10300  0B64  0021               	movlb	1	; select bank1
 10301  0B65  2B82               	goto	L6
 10302  0B66                     l8598:	
 10303                           ;modulation.c: 114: } else {
 10304                           
 10305                           
 10306                           ;modulation.c: 115: tmpVal = 90 - tmpVal;
 10307  0B66  3000               	movlw	0
 10308  0B67  0021               	movlb	1	; select bank1
 10309  0B68  00C1               	movwf	___ftadd@f1^(0+128)
 10310  0B69  30B4               	movlw	180
 10311  0B6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10312  0B6B  3042               	movlw	66
 10313  0B6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10314  0B6D  0022               	movlb	2	; select bank2
 10315  0B6E  083D               	movf	modTri@tmpVal^(0+256),w
 10316  0B6F  0021               	movlb	1	; select bank1
 10317  0B70  00BE               	movwf	___ftneg@f1^(0+128)
 10318  0B71  0022               	movlb	2	; select bank2
 10319  0B72  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10320  0B73  0021               	movlb	1	; select bank1
 10321  0B74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10322  0B75  0022               	movlb	2	; select bank2
 10323  0B76  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10324  0B77  0021               	movlb	1	; select bank1
 10325  0B78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10326  0B79  31AC  24F8  3189   	fcall	___ftneg
 10327  0B7C  0021               	movlb	1	; select bank1
 10328  0B7D  083E               	movf	?___ftneg^(0+128),w
 10329  0B7E  00C4               	movwf	___ftadd@f2^(0+128)
 10330  0B7F  083F               	movf	(?___ftneg+1)^(0+128),w
 10331  0B80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10332  0B81  0840               	movf	(?___ftneg+2)^(0+128),w
 10333  0B82                     L6:	
 10334  0B82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10335  0B83  3190  2035  3189   	fcall	___ftadd
 10336  0B86  0021               	movlb	1	; select bank1
 10337  0B87  0841               	movf	?___ftadd^(0+128),w
 10338  0B88  0022               	movlb	2	; select bank2
 10339  0B89  00BD               	movwf	modTri@tmpVal^(0+256)
 10340  0B8A  0021               	movlb	1	; select bank1
 10341  0B8B  0842               	movf	(?___ftadd+1)^(0+128),w
 10342  0B8C  0022               	movlb	2	; select bank2
 10343  0B8D  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10344  0B8E  0021               	movlb	1	; select bank1
 10345  0B8F  0843               	movf	(?___ftadd+2)^(0+128),w
 10346  0B90  0022               	movlb	2	; select bank2
 10347  0B91  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10348                           
 10349                           ;modulation.c: 116: }
 10350                           ;modulation.c: 117: tmpVal = tmpVal * -10/9;
 10351  0B92  3000               	movlw	0
 10352  0B93  0021               	movlb	1	; select bank1
 10353  0B94  00CE               	movwf	___ftdiv@f2^(0+128)
 10354  0B95  3010               	movlw	16
 10355  0B96  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10356  0B97  3041               	movlw	65
 10357  0B98  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10358  0B99  3000               	movlw	0
 10359  0B9A  00AE               	movwf	___ftmul@f1^(0+128)
 10360  0B9B  3020               	movlw	32
 10361  0B9C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10362  0B9D  30C1               	movlw	193
 10363  0B9E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10364  0B9F  0022               	movlb	2	; select bank2
 10365  0BA0  083D               	movf	modTri@tmpVal^(0+256),w
 10366  0BA1  0021               	movlb	1	; select bank1
 10367  0BA2  00B1               	movwf	___ftmul@f2^(0+128)
 10368  0BA3  0022               	movlb	2	; select bank2
 10369  0BA4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10370  0BA5  0021               	movlb	1	; select bank1
 10371  0BA6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10372  0BA7  0022               	movlb	2	; select bank2
 10373  0BA8  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10374  0BA9  0021               	movlb	1	; select bank1
 10375  0BAA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10376  0BAB  319E  267B  3189   	fcall	___ftmul
 10377  0BAE  0021               	movlb	1	; select bank1
 10378  0BAF  082E               	movf	?___ftmul^(0+128),w
 10379  0BB0  00D1               	movwf	___ftdiv@f1^(0+128)
 10380  0BB1  082F               	movf	(?___ftmul+1)^(0+128),w
 10381  0BB2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10382  0BB3  0830               	movf	(?___ftmul+2)^(0+128),w
 10383  0BB4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10384  0BB5  319C  2474  3189   	fcall	___ftdiv
 10385  0BB8  0021               	movlb	1	; select bank1
 10386  0BB9  084E               	movf	?___ftdiv^(0+128),w
 10387  0BBA  0022               	movlb	2	; select bank2
 10388  0BBB  00BD               	movwf	modTri@tmpVal^(0+256)
 10389  0BBC  0021               	movlb	1	; select bank1
 10390  0BBD  084F               	movf	(?___ftdiv+1)^(0+128),w
 10391  0BBE  0022               	movlb	2	; select bank2
 10392  0BBF  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10393  0BC0  0021               	movlb	1	; select bank1
 10394  0BC1  0850               	movf	(?___ftdiv+2)^(0+128),w
 10395  0BC2  0022               	movlb	2	; select bank2
 10396  0BC3  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10397                           
 10398                           ;modulation.c: 119: return (int)(tmpVal);
 10399  0BC4  083D               	movf	modTri@tmpVal^(0+256),w
 10400  0BC5  00A0               	movwf	___fttol@f1^(0+256)
 10401  0BC6  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10402  0BC7  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10403  0BC8  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10404  0BC9  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10405  0BCA  3199  21AF         	fcall	___fttol
 10406  0BCC  0022               	movlb	2	; select bank2
 10407  0BCD  0821               	movf	(?___fttol^(0+256)+1),w
 10408  0BCE  00AF               	movwf	(?_modTri+1)^(0+256)
 10409  0BCF  0820               	movf	?___fttol^(0+256),w
 10410  0BD0  00AE               	movwf	?_modTri^(0+256)
 10411  0BD1  0008               	return
 10412  0BD2                     __end_of_modTri:	
 10413                           
 10414                           	psect	text18
 10415  2123                     __ptext18:	
 10416 ;; *************** function _modSquare *****************
 10417 ;; Defined at:
 10418 ;;		line 143 in file "modulation.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;  angle           3   40[BANK2 ] int 
 10421 ;;  inflection      3   43[BANK2 ] int 
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  tmpVal          2   46[BANK2 ] int 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  2   40[BANK2 ] int 
 10426 ;; Registers used:
 10427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10433 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10434 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10436 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10437 ;;Total ram usage:        8 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    6
 10440 ;; This function calls:
 10441 ;;		___ftge
 10442 ;;		_modCos
 10443 ;; This function is called by:
 10444 ;;		_updateModulationArray
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           
 10449                           ;psect for function _modSquare
 10450  2123                     _modSquare:	
 10451                           
 10452                           ;modulation.c: 144: int tmpVal = modCos(angle, inflection);
 10453                           
 10454                           ;incstack = 0
 10455                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10456  2123  0022               	movlb	2	; select bank2
 10457  2124  0848               	movf	modSquare@angle^(0+256),w
 10458  2125  00B4               	movwf	modCos@angle^(0+256)
 10459  2126  0849               	movf	(modSquare@angle+1)^(0+256),w
 10460  2127  00B5               	movwf	(modCos@angle+1)^(0+256)
 10461  2128  084A               	movf	(modSquare@angle+2)^(0+256),w
 10462  2129  00B6               	movwf	(modCos@angle+2)^(0+256)
 10463  212A  084B               	movf	modSquare@inflection^(0+256),w
 10464  212B  00B7               	movwf	modCos@inflection^(0+256)
 10465  212C  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10466  212D  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10467  212E  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10468  212F  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10469  2130  3196  2654  31A1   	fcall	_modCos
 10470  2133  0022               	movlb	2	; select bank2
 10471  2134  0835               	movf	(?_modCos+1)^(0+256),w
 10472  2135  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10473  2136  0834               	movf	?_modCos^(0+256),w
 10474  2137  00CE               	movwf	modSquare@tmpVal^(0+256)
 10475                           
 10476                           ;modulation.c: 145: return (angle <= inflection) ? -100 : 100;
 10477  2138  084B               	movf	modSquare@inflection^(0+256),w
 10478  2139  0021               	movlb	1	; select bank1
 10479  213A  00A0               	movwf	___ftge@ff1^(0+128)
 10480  213B  0022               	movlb	2	; select bank2
 10481  213C  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10482  213D  0021               	movlb	1	; select bank1
 10483  213E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10484  213F  0022               	movlb	2	; select bank2
 10485  2140  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10486  2141  0021               	movlb	1	; select bank1
 10487  2142  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10488  2143  0022               	movlb	2	; select bank2
 10489  2144  0848               	movf	modSquare@angle^(0+256),w
 10490  2145  0021               	movlb	1	; select bank1
 10491  2146  00A3               	movwf	___ftge@ff2^(0+128)
 10492  2147  0022               	movlb	2	; select bank2
 10493  2148  0849               	movf	(modSquare@angle+1)^(0+256),w
 10494  2149  0021               	movlb	1	; select bank1
 10495  214A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10496  214B  0022               	movlb	2	; select bank2
 10497  214C  084A               	movf	(modSquare@angle+2)^(0+256),w
 10498  214D  0021               	movlb	1	; select bank1
 10499  214E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10500  214F  31A0  20AA  31A1   	fcall	___ftge
 10501  2152  1803               	btfsc	3,0
 10502  2153  295A               	goto	l8608
 10503  2154  3064               	movlw	100
 10504  2155  0022               	movlb	2	; select bank2
 10505  2156  00C8               	movwf	?_modSquare^(0+256)
 10506  2157  3000               	movlw	0
 10507  2158  00C9               	movwf	(?_modSquare^(0+256)+1)
 10508  2159  0008               	return
 10509  215A                     l8608:	
 10510  215A  309C               	movlw	156
 10511  215B  0022               	movlb	2	; select bank2
 10512  215C  00C8               	movwf	?_modSquare^(0+256)
 10513  215D  30FF               	movlw	255
 10514  215E  00C9               	movwf	(?_modSquare^(0+256)+1)
 10515  215F  0008               	return
 10516  2160                     __end_of_modSquare:	
 10517                           
 10518                           	psect	text19
 10519  1654                     __ptext19:	
 10520 ;; *************** function _modCos *****************
 10521 ;; Defined at:
 10522 ;;		line 84 in file "modulation.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  angle           3   20[BANK2 ] int 
 10525 ;;  inflection      3   23[BANK2 ] int 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  tmpVal          3   37[BANK2 ] int 
 10528 ;;  period          3   34[BANK2 ] int 
 10529 ;;  shift           3   31[BANK2 ] int 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  2   20[BANK2 ] int 
 10532 ;; Registers used:
 10533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10539 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10540 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10541 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10542 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10543 ;;Total ram usage:       20 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    5
 10546 ;; This function calls:
 10547 ;;		___ftadd
 10548 ;;		___ftdiv
 10549 ;;		___ftge
 10550 ;;		___ftmul
 10551 ;;		___ftneg
 10552 ;;		___fttol
 10553 ;;		___wmul
 10554 ;; This function is called by:
 10555 ;;		_updateModulationArray
 10556 ;;		_modSquare
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           
 10561                           ;psect for function _modCos
 10562  1654                     _modCos:	
 10563                           
 10564                           ;modulation.c: 85: double period = 1.0;
 10565                           
 10566                           ;incstack = 0
 10567                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10568  1654  3000               	movlw	0
 10569  1655  0022               	movlb	2	; select bank2
 10570  1656  00C2               	movwf	modCos@period^(0+256)
 10571  1657  3080               	movlw	128
 10572  1658  00C3               	movwf	(modCos@period+1)^(0+256)
 10573  1659  303F               	movlw	63
 10574  165A  00C4               	movwf	(modCos@period+2)^(0+256)
 10575                           
 10576                           ;modulation.c: 86: double shift = 0.0;
 10577  165B  3000               	movlw	0
 10578  165C  00BF               	movwf	modCos@shift^(0+256)
 10579  165D  3000               	movlw	0
 10580  165E  00C0               	movwf	(modCos@shift+1)^(0+256)
 10581  165F  3000               	movlw	0
 10582  1660  00C1               	movwf	(modCos@shift+2)^(0+256)
 10583                           
 10584                           ;modulation.c: 88: if(angle<=inflection) {
 10585  1661  0837               	movf	modCos@inflection^(0+256),w
 10586  1662  0021               	movlb	1	; select bank1
 10587  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10588  1664  0022               	movlb	2	; select bank2
 10589  1665  0838               	movf	(modCos@inflection+1)^(0+256),w
 10590  1666  0021               	movlb	1	; select bank1
 10591  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10592  1668  0022               	movlb	2	; select bank2
 10593  1669  0839               	movf	(modCos@inflection+2)^(0+256),w
 10594  166A  0021               	movlb	1	; select bank1
 10595  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10596  166C  0022               	movlb	2	; select bank2
 10597  166D  0834               	movf	modCos@angle^(0+256),w
 10598  166E  0021               	movlb	1	; select bank1
 10599  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10600  1670  0022               	movlb	2	; select bank2
 10601  1671  0835               	movf	(modCos@angle+1)^(0+256),w
 10602  1672  0021               	movlb	1	; select bank1
 10603  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10604  1674  0022               	movlb	2	; select bank2
 10605  1675  0836               	movf	(modCos@angle+2)^(0+256),w
 10606  1676  0021               	movlb	1	; select bank1
 10607  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10608  1678  31A0  20AA  3196   	fcall	___ftge
 10609  167B  1C03               	btfss	3,0
 10610  167C  2E89               	goto	l8264
 10611                           
 10612                           ;modulation.c: 89: period = 180.0/inflection;
 10613  167D  0022               	movlb	2	; select bank2
 10614  167E  0837               	movf	modCos@inflection^(0+256),w
 10615  167F  0021               	movlb	1	; select bank1
 10616  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10617  1681  0022               	movlb	2	; select bank2
 10618  1682  0838               	movf	(modCos@inflection+1)^(0+256),w
 10619  1683  0021               	movlb	1	; select bank1
 10620  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10621  1685  0022               	movlb	2	; select bank2
 10622  1686  0839               	movf	(modCos@inflection+2)^(0+256),w
 10623  1687  0021               	movlb	1	; select bank1
 10624  1688  2F44               	goto	L7
 10625  1689                     l8264:	
 10626                           ;modulation.c: 90: } else {
 10627                           
 10628                           
 10629                           ;modulation.c: 91: shift = -(360-inflection*2)*(180/(360-inflection));
 10630  1689  0022               	movlb	2	; select bank2
 10631  168A  0837               	movf	modCos@inflection^(0+256),w
 10632  168B  0021               	movlb	1	; select bank1
 10633  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10634  168D  0022               	movlb	2	; select bank2
 10635  168E  0838               	movf	(modCos@inflection+1)^(0+256),w
 10636  168F  0021               	movlb	1	; select bank1
 10637  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10638  1691  0022               	movlb	2	; select bank2
 10639  1692  0839               	movf	(modCos@inflection+2)^(0+256),w
 10640  1693  0021               	movlb	1	; select bank1
 10641  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10642  1695  3000               	movlw	0
 10643  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10644  1697  3000               	movlw	0
 10645  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10646  1699  3040               	movlw	64
 10647  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10648  169B  319E  267B  3196   	fcall	___ftmul
 10649  169E  0021               	movlb	1	; select bank1
 10650  169F  082E               	movf	?___ftmul^(0+128),w
 10651  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10652  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10653  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10654  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10655  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10656  16A5  31AC  24F8  3196   	fcall	___ftneg
 10657  16A8  0021               	movlb	1	; select bank1
 10658  16A9  083E               	movf	?___ftneg^(0+128),w
 10659  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10660  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10661  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10662  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10663  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10664  16AF  3000               	movlw	0
 10665  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10666  16B1  30B4               	movlw	180
 10667  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10668  16B3  3043               	movlw	67
 10669  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10670  16B5  3190  2035  3196   	fcall	___ftadd
 10671  16B8  0021               	movlb	1	; select bank1
 10672  16B9  0841               	movf	?___ftadd^(0+128),w
 10673  16BA  0022               	movlb	2	; select bank2
 10674  16BB  00BC               	movwf	_modCos$2852^(0+256)
 10675  16BC  0021               	movlb	1	; select bank1
 10676  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10677  16BE  0022               	movlb	2	; select bank2
 10678  16BF  00BD               	movwf	(_modCos$2852+1)^(0+256)
 10679  16C0  0021               	movlb	1	; select bank1
 10680  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10681  16C2  0022               	movlb	2	; select bank2
 10682  16C3  00BE               	movwf	(_modCos$2852+2)^(0+256)
 10683                           
 10684                           ;modulation.c: 91: shift = -(360-inflection*2)*(180/(360-inflection));
 10685  16C4  083C               	movf	_modCos$2852^(0+256),w
 10686  16C5  0021               	movlb	1	; select bank1
 10687  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10688  16C7  0022               	movlb	2	; select bank2
 10689  16C8  083D               	movf	(_modCos$2852+1)^(0+256),w
 10690  16C9  0021               	movlb	1	; select bank1
 10691  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10692  16CB  0022               	movlb	2	; select bank2
 10693  16CC  083E               	movf	(_modCos$2852+2)^(0+256),w
 10694  16CD  0021               	movlb	1	; select bank1
 10695  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10696  16CF  31AC  24F8  3196   	fcall	___ftneg
 10697  16D2  0021               	movlb	1	; select bank1
 10698  16D3  083E               	movf	?___ftneg^(0+128),w
 10699  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10700  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10701  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10702  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10703  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10704  16D9  3000               	movlw	0
 10705  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10706  16DB  30B4               	movlw	180
 10707  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10708  16DD  3043               	movlw	67
 10709  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10710  16DF  0022               	movlb	2	; select bank2
 10711  16E0  0837               	movf	modCos@inflection^(0+256),w
 10712  16E1  0021               	movlb	1	; select bank1
 10713  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10714  16E3  0022               	movlb	2	; select bank2
 10715  16E4  0838               	movf	(modCos@inflection+1)^(0+256),w
 10716  16E5  0021               	movlb	1	; select bank1
 10717  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10718  16E7  0022               	movlb	2	; select bank2
 10719  16E8  0839               	movf	(modCos@inflection+2)^(0+256),w
 10720  16E9  0021               	movlb	1	; select bank1
 10721  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10722  16EB  31AC  24F8  3196   	fcall	___ftneg
 10723  16EE  0021               	movlb	1	; select bank1
 10724  16EF  083E               	movf	?___ftneg^(0+128),w
 10725  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10726  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10727  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10728  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10729  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10730  16F5  3190  2035  3196   	fcall	___ftadd
 10731  16F8  0021               	movlb	1	; select bank1
 10732  16F9  0841               	movf	?___ftadd^(0+128),w
 10733  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10734  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10735  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10736  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10737  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10738  16FF  3000               	movlw	0
 10739  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10740  1701  3034               	movlw	52
 10741  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10742  1703  3043               	movlw	67
 10743  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10744  1705  319C  2474  3196   	fcall	___ftdiv
 10745  1708  0021               	movlb	1	; select bank1
 10746  1709  084E               	movf	?___ftdiv^(0+128),w
 10747  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10748  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10749  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10750  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10751  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10752  170F  319E  267B  3196   	fcall	___ftmul
 10753  1712  0021               	movlb	1	; select bank1
 10754  1713  082E               	movf	?___ftmul^(0+128),w
 10755  1714  0022               	movlb	2	; select bank2
 10756  1715  00BF               	movwf	modCos@shift^(0+256)
 10757  1716  0021               	movlb	1	; select bank1
 10758  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10759  1718  0022               	movlb	2	; select bank2
 10760  1719  00C0               	movwf	(modCos@shift+1)^(0+256)
 10761  171A  0021               	movlb	1	; select bank1
 10762  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10763  171C  0022               	movlb	2	; select bank2
 10764  171D  00C1               	movwf	(modCos@shift+2)^(0+256)
 10765                           
 10766                           ;modulation.c: 92: period = 180/(360-inflection);
 10767  171E  3000               	movlw	0
 10768  171F  0021               	movlb	1	; select bank1
 10769  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10770  1721  30B4               	movlw	180
 10771  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10772  1723  3043               	movlw	67
 10773  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10774  1725  0022               	movlb	2	; select bank2
 10775  1726  0837               	movf	modCos@inflection^(0+256),w
 10776  1727  0021               	movlb	1	; select bank1
 10777  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10778  1729  0022               	movlb	2	; select bank2
 10779  172A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10780  172B  0021               	movlb	1	; select bank1
 10781  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10782  172D  0022               	movlb	2	; select bank2
 10783  172E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10784  172F  0021               	movlb	1	; select bank1
 10785  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10786  1731  31AC  24F8  3196   	fcall	___ftneg
 10787  1734  0021               	movlb	1	; select bank1
 10788  1735  083E               	movf	?___ftneg^(0+128),w
 10789  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10790  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10791  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10792  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10793  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10794  173B  3190  2035  3196   	fcall	___ftadd
 10795  173E  0021               	movlb	1	; select bank1
 10796  173F  0841               	movf	?___ftadd^(0+128),w
 10797  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10798  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10799  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10800  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10801  1744                     L7:	
 10802  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10803  1745  3000               	movlw	0
 10804  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10805  1747  3034               	movlw	52
 10806  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10807  1749  3043               	movlw	67
 10808  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10809  174B  319C  2474  3196   	fcall	___ftdiv
 10810  174E  0021               	movlb	1	; select bank1
 10811  174F  084E               	movf	?___ftdiv^(0+128),w
 10812  1750  0022               	movlb	2	; select bank2
 10813  1751  00C2               	movwf	modCos@period^(0+256)
 10814  1752  0021               	movlb	1	; select bank1
 10815  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10816  1754  0022               	movlb	2	; select bank2
 10817  1755  00C3               	movwf	(modCos@period+1)^(0+256)
 10818  1756  0021               	movlb	1	; select bank1
 10819  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10820  1758  0022               	movlb	2	; select bank2
 10821  1759  00C4               	movwf	(modCos@period+2)^(0+256)
 10822                           
 10823                           ;modulation.c: 94: }
 10824                           ;modulation.c: 95: double tmpVal = (period*angle-shift) /3;
 10825  175A  3000               	movlw	0
 10826  175B  0021               	movlb	1	; select bank1
 10827  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10828  175D  3040               	movlw	64
 10829  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10830  175F  3040               	movlw	64
 10831  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10832  1761  0022               	movlb	2	; select bank2
 10833  1762  083F               	movf	modCos@shift^(0+256),w
 10834  1763  0021               	movlb	1	; select bank1
 10835  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10836  1765  0022               	movlb	2	; select bank2
 10837  1766  0840               	movf	(modCos@shift+1)^(0+256),w
 10838  1767  0021               	movlb	1	; select bank1
 10839  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10840  1769  0022               	movlb	2	; select bank2
 10841  176A  0841               	movf	(modCos@shift+2)^(0+256),w
 10842  176B  0021               	movlb	1	; select bank1
 10843  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10844  176D  31AC  24F8  3196   	fcall	___ftneg
 10845  1770  0021               	movlb	1	; select bank1
 10846  1771  083E               	movf	?___ftneg^(0+128),w
 10847  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10848  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10849  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10850  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10851  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10852  1777  0022               	movlb	2	; select bank2
 10853  1778  0834               	movf	modCos@angle^(0+256),w
 10854  1779  0021               	movlb	1	; select bank1
 10855  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10856  177B  0022               	movlb	2	; select bank2
 10857  177C  0835               	movf	(modCos@angle+1)^(0+256),w
 10858  177D  0021               	movlb	1	; select bank1
 10859  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10860  177F  0022               	movlb	2	; select bank2
 10861  1780  0836               	movf	(modCos@angle+2)^(0+256),w
 10862  1781  0021               	movlb	1	; select bank1
 10863  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10864  1783  0022               	movlb	2	; select bank2
 10865  1784  0842               	movf	modCos@period^(0+256),w
 10866  1785  0021               	movlb	1	; select bank1
 10867  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10868  1787  0022               	movlb	2	; select bank2
 10869  1788  0843               	movf	(modCos@period+1)^(0+256),w
 10870  1789  0021               	movlb	1	; select bank1
 10871  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10872  178B  0022               	movlb	2	; select bank2
 10873  178C  0844               	movf	(modCos@period+2)^(0+256),w
 10874  178D  0021               	movlb	1	; select bank1
 10875  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10876  178F  319E  267B  3196   	fcall	___ftmul
 10877  1792  0021               	movlb	1	; select bank1
 10878  1793  082E               	movf	?___ftmul^(0+128),w
 10879  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10880  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10881  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10882  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10883  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10884  1799  3190  2035  3196   	fcall	___ftadd
 10885  179C  0021               	movlb	1	; select bank1
 10886  179D  0841               	movf	?___ftadd^(0+128),w
 10887  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10888  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10889  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10890  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10891  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10892  17A3  319C  2474  3196   	fcall	___ftdiv
 10893  17A6  0021               	movlb	1	; select bank1
 10894  17A7  084E               	movf	?___ftdiv^(0+128),w
 10895  17A8  0022               	movlb	2	; select bank2
 10896  17A9  00C5               	movwf	modCos@tmpVal^(0+256)
 10897  17AA  0021               	movlb	1	; select bank1
 10898  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10899  17AC  0022               	movlb	2	; select bank2
 10900  17AD  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10901  17AE  0021               	movlb	1	; select bank1
 10902  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10903  17B0  0022               	movlb	2	; select bank2
 10904  17B1  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10905                           
 10906                           ;modulation.c: 96: tmpVal = cosArray[(int)(tmpVal)];
 10907  17B2  0845               	movf	modCos@tmpVal^(0+256),w
 10908  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10909  17B4  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10910  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10911  17B6  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10912  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10913  17B8  3199  21AF  3196   	fcall	___fttol
 10914  17BB  0022               	movlb	2	; select bank2
 10915  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10916  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10917  17BE  0820               	movf	?___fttol^(0+256),w
 10918  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10919  17C0  3003               	movlw	3
 10920  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10921  17C2  3000               	movlw	0
 10922  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10923  17C4  31AD  25C5  3196   	fcall	___wmul
 10924  17C7  3082               	movlw	130
 10925  17C8  0022               	movlb	2	; select bank2
 10926  17C9  00BA               	movwf	??_modCos^(0+256)
 10927  17CA  3024               	movlw	36
 10928  17CB  00BB               	movwf	(??_modCos^(0+256)+1)
 10929  17CC  082E               	movf	?___wmul^(0+256),w
 10930  17CD  073A               	addwf	??_modCos^(0+256),w
 10931  17CE  0086               	movwf	6
 10932  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10933  17D0  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10934  17D1  0087               	movwf	7
 10935  17D2  3F40               	moviw [0]fsr1
 10936  17D3  00C5               	movwf	modCos@tmpVal^(0+256)
 10937  17D4  3F41               	moviw [1]fsr1
 10938  17D5  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10939  17D6  3F42               	moviw [2]fsr1
 10940  17D7  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10941                           
 10942                           ;modulation.c: 97: return (int)(-100.0 * tmpVal);
 10943  17D8  0845               	movf	modCos@tmpVal^(0+256),w
 10944  17D9  0021               	movlb	1	; select bank1
 10945  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10946  17DB  0022               	movlb	2	; select bank2
 10947  17DC  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10948  17DD  0021               	movlb	1	; select bank1
 10949  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10950  17DF  0022               	movlb	2	; select bank2
 10951  17E0  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10952  17E1  0021               	movlb	1	; select bank1
 10953  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10954  17E3  3000               	movlw	0
 10955  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10956  17E5  30C8               	movlw	200
 10957  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10958  17E7  30C2               	movlw	194
 10959  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10960  17E9  319E  267B  3196   	fcall	___ftmul
 10961  17EC  0021               	movlb	1	; select bank1
 10962  17ED  082E               	movf	?___ftmul^(0+128),w
 10963  17EE  0022               	movlb	2	; select bank2
 10964  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10965  17F0  0021               	movlb	1	; select bank1
 10966  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10967  17F2  0022               	movlb	2	; select bank2
 10968  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10969  17F4  0021               	movlb	1	; select bank1
 10970  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10971  17F6  0022               	movlb	2	; select bank2
 10972  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10973  17F8  3199  21AF         	fcall	___fttol
 10974  17FA  0022               	movlb	2	; select bank2
 10975  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10976  17FC  00B5               	movwf	(?_modCos+1)^(0+256)
 10977  17FD  0820               	movf	?___fttol^(0+256),w
 10978  17FE  00B4               	movwf	?_modCos^(0+256)
 10979  17FF  0008               	return
 10980  1800                     __end_of_modCos:	
 10981                           
 10982                           	psect	text20
 10983  2DFD                     __ptext20:	
 10984 ;; *************** function _modSawRev *****************
 10985 ;; Defined at:
 10986 ;;		line 138 in file "modulation.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  angle           3   34[BANK2 ] int 
 10989 ;;  inflection      3   37[BANK2 ] int 
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;		None
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  2   34[BANK2 ] int 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2, status,0, pclath, cstack
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11001 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11003 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11004 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11005 ;;Total ram usage:        8 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    6
 11008 ;; This function calls:
 11009 ;;		_modSaw
 11010 ;; This function is called by:
 11011 ;;		_updateModulationArray
 11012 ;; This function uses a non-reentrant model
 11013 ;;
 11014                           
 11015                           
 11016                           ;psect for function _modSawRev
 11017  2DFD                     _modSawRev:	
 11018                           
 11019                           ;modulation.c: 139: return -1 * modSaw(angle, inflection);
 11020                           
 11021                           ;incstack = 0
 11022                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 11023  2DFD  0022               	movlb	2	; select bank2
 11024  2DFE  0842               	movf	modSawRev@angle^(0+256),w
 11025  2DFF  00AE               	movwf	modSaw@angle^(0+256)
 11026  2E00  0843               	movf	(modSawRev@angle+1)^(0+256),w
 11027  2E01  00AF               	movwf	(modSaw@angle+1)^(0+256)
 11028  2E02  0844               	movf	(modSawRev@angle+2)^(0+256),w
 11029  2E03  00B0               	movwf	(modSaw@angle+2)^(0+256)
 11030  2E04  0845               	movf	modSawRev@inflection^(0+256),w
 11031  2E05  00B1               	movwf	modSaw@inflection^(0+256)
 11032  2E06  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 11033  2E07  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 11034  2E08  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 11035  2E09  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11036  2E0A  3194  24BC         	fcall	_modSaw
 11037  2E0C  0022               	movlb	2	; select bank2
 11038  2E0D  092E               	comf	?_modSaw^(0+256),w
 11039  2E0E  00C8               	movwf	??_modSawRev^(0+256)
 11040  2E0F  092F               	comf	(?_modSaw+1)^(0+256),w
 11041  2E10  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11042  2E11  0AC8               	incf	??_modSawRev^(0+256),f
 11043  2E12  1903               	skipnz
 11044  2E13  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11045  2E14  0848               	movf	??_modSawRev^(0+256),w
 11046  2E15  00C2               	movwf	?_modSawRev^(0+256)
 11047  2E16  0849               	movf	(??_modSawRev+1)^(0+256),w
 11048  2E17  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11049  2E18  0008               	return
 11050  2E19                     __end_of_modSawRev:	
 11051                           
 11052                           	psect	text21
 11053  14BC                     __ptext21:	
 11054 ;; *************** function _modSaw *****************
 11055 ;; Defined at:
 11056 ;;		line 123 in file "modulation.c"
 11057 ;; Parameters:    Size  Location     Type
 11058 ;;  angle           3   14[BANK2 ] int 
 11059 ;;  inflection      3   17[BANK2 ] int 
 11060 ;; Auto vars:     Size  Location     Type
 11061 ;;  period          3   31[BANK2 ] int 
 11062 ;;  shift           3   28[BANK2 ] int 
 11063 ;;  mod             2   26[BANK2 ] int 
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  2   14[BANK2 ] int 
 11066 ;; Registers used:
 11067 ;;		wreg, status,2, status,0, pclath, cstack
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11073 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11074 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11076 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11077 ;;Total ram usage:       20 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:    5
 11080 ;; This function calls:
 11081 ;;		___ftadd
 11082 ;;		___ftdiv
 11083 ;;		___ftge
 11084 ;;		___ftmul
 11085 ;;		___ftneg
 11086 ;;		___fttol
 11087 ;; This function is called by:
 11088 ;;		_updateModulationArray
 11089 ;;		_modSawRev
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           
 11094                           ;psect for function _modSaw
 11095  14BC                     _modSaw:	
 11096                           
 11097                           ;modulation.c: 124: double period = 1.0;
 11098                           
 11099                           ;incstack = 0
 11100                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11101  14BC  3000               	movlw	0
 11102  14BD  0022               	movlb	2	; select bank2
 11103  14BE  00BF               	movwf	modSaw@period^(0+256)
 11104  14BF  3080               	movlw	128
 11105  14C0  00C0               	movwf	(modSaw@period+1)^(0+256)
 11106  14C1  303F               	movlw	63
 11107  14C2  00C1               	movwf	(modSaw@period+2)^(0+256)
 11108                           
 11109                           ;modulation.c: 125: double shift = 0;
 11110  14C3  3000               	movlw	0
 11111  14C4  00BC               	movwf	modSaw@shift^(0+256)
 11112  14C5  3000               	movlw	0
 11113  14C6  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11114  14C7  3000               	movlw	0
 11115  14C8  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11116                           
 11117                           ;modulation.c: 127: if(angle<=inflection) {
 11118  14C9  0831               	movf	modSaw@inflection^(0+256),w
 11119  14CA  0021               	movlb	1	; select bank1
 11120  14CB  00A0               	movwf	___ftge@ff1^(0+128)
 11121  14CC  0022               	movlb	2	; select bank2
 11122  14CD  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11123  14CE  0021               	movlb	1	; select bank1
 11124  14CF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11125  14D0  0022               	movlb	2	; select bank2
 11126  14D1  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11127  14D2  0021               	movlb	1	; select bank1
 11128  14D3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11129  14D4  0022               	movlb	2	; select bank2
 11130  14D5  082E               	movf	modSaw@angle^(0+256),w
 11131  14D6  0021               	movlb	1	; select bank1
 11132  14D7  00A3               	movwf	___ftge@ff2^(0+128)
 11133  14D8  0022               	movlb	2	; select bank2
 11134  14D9  082F               	movf	(modSaw@angle+1)^(0+256),w
 11135  14DA  0021               	movlb	1	; select bank1
 11136  14DB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11137  14DC  0022               	movlb	2	; select bank2
 11138  14DD  0830               	movf	(modSaw@angle+2)^(0+256),w
 11139  14DE  0021               	movlb	1	; select bank1
 11140  14DF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11141  14E0  31A0  20AA  3194   	fcall	___ftge
 11142  14E3  1C03               	btfss	3,0
 11143  14E4  2CF1               	goto	l8278
 11144                           
 11145                           ;modulation.c: 128: period = 180.0/inflection;
 11146  14E5  0022               	movlb	2	; select bank2
 11147  14E6  0831               	movf	modSaw@inflection^(0+256),w
 11148  14E7  0021               	movlb	1	; select bank1
 11149  14E8  00CE               	movwf	___ftdiv@f2^(0+128)
 11150  14E9  0022               	movlb	2	; select bank2
 11151  14EA  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11152  14EB  0021               	movlb	1	; select bank1
 11153  14EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11154  14ED  0022               	movlb	2	; select bank2
 11155  14EE  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11156  14EF  0021               	movlb	1	; select bank1
 11157  14F0  2DAC               	goto	L8
 11158  14F1                     l8278:	
 11159                           ;modulation.c: 129: } else {
 11160                           
 11161                           
 11162                           ;modulation.c: 130: shift = -(360-inflection*2)*(180/(360-inflection));
 11163  14F1  0022               	movlb	2	; select bank2
 11164  14F2  0831               	movf	modSaw@inflection^(0+256),w
 11165  14F3  0021               	movlb	1	; select bank1
 11166  14F4  00B1               	movwf	___ftmul@f2^(0+128)
 11167  14F5  0022               	movlb	2	; select bank2
 11168  14F6  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11169  14F7  0021               	movlb	1	; select bank1
 11170  14F8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11171  14F9  0022               	movlb	2	; select bank2
 11172  14FA  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11173  14FB  0021               	movlb	1	; select bank1
 11174  14FC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11175  14FD  3000               	movlw	0
 11176  14FE  00AE               	movwf	___ftmul@f1^(0+128)
 11177  14FF  3000               	movlw	0
 11178  1500  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11179  1501  3040               	movlw	64
 11180  1502  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11181  1503  319E  267B  3194   	fcall	___ftmul
 11182  1506  0021               	movlb	1	; select bank1
 11183  1507  082E               	movf	?___ftmul^(0+128),w
 11184  1508  00BE               	movwf	___ftneg@f1^(0+128)
 11185  1509  082F               	movf	(?___ftmul+1)^(0+128),w
 11186  150A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11187  150B  0830               	movf	(?___ftmul+2)^(0+128),w
 11188  150C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11189  150D  31AC  24F8  3194   	fcall	___ftneg
 11190  1510  0021               	movlb	1	; select bank1
 11191  1511  083E               	movf	?___ftneg^(0+128),w
 11192  1512  00C4               	movwf	___ftadd@f2^(0+128)
 11193  1513  083F               	movf	(?___ftneg+1)^(0+128),w
 11194  1514  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11195  1515  0840               	movf	(?___ftneg+2)^(0+128),w
 11196  1516  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11197  1517  3000               	movlw	0
 11198  1518  00C1               	movwf	___ftadd@f1^(0+128)
 11199  1519  30B4               	movlw	180
 11200  151A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11201  151B  3043               	movlw	67
 11202  151C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11203  151D  3190  2035  3194   	fcall	___ftadd
 11204  1520  0021               	movlb	1	; select bank1
 11205  1521  0841               	movf	?___ftadd^(0+128),w
 11206  1522  0022               	movlb	2	; select bank2
 11207  1523  00B4               	movwf	_modSaw$2854^(0+256)
 11208  1524  0021               	movlb	1	; select bank1
 11209  1525  0842               	movf	(?___ftadd+1)^(0+128),w
 11210  1526  0022               	movlb	2	; select bank2
 11211  1527  00B5               	movwf	(_modSaw$2854+1)^(0+256)
 11212  1528  0021               	movlb	1	; select bank1
 11213  1529  0843               	movf	(?___ftadd+2)^(0+128),w
 11214  152A  0022               	movlb	2	; select bank2
 11215  152B  00B6               	movwf	(_modSaw$2854+2)^(0+256)
 11216                           
 11217                           ;modulation.c: 130: shift = -(360-inflection*2)*(180/(360-inflection));
 11218  152C  0834               	movf	_modSaw$2854^(0+256),w
 11219  152D  0021               	movlb	1	; select bank1
 11220  152E  00BE               	movwf	___ftneg@f1^(0+128)
 11221  152F  0022               	movlb	2	; select bank2
 11222  1530  0835               	movf	(_modSaw$2854+1)^(0+256),w
 11223  1531  0021               	movlb	1	; select bank1
 11224  1532  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11225  1533  0022               	movlb	2	; select bank2
 11226  1534  0836               	movf	(_modSaw$2854+2)^(0+256),w
 11227  1535  0021               	movlb	1	; select bank1
 11228  1536  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11229  1537  31AC  24F8  3194   	fcall	___ftneg
 11230  153A  0021               	movlb	1	; select bank1
 11231  153B  083E               	movf	?___ftneg^(0+128),w
 11232  153C  00AE               	movwf	___ftmul@f1^(0+128)
 11233  153D  083F               	movf	(?___ftneg+1)^(0+128),w
 11234  153E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11235  153F  0840               	movf	(?___ftneg+2)^(0+128),w
 11236  1540  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11237  1541  3000               	movlw	0
 11238  1542  00C1               	movwf	___ftadd@f1^(0+128)
 11239  1543  30B4               	movlw	180
 11240  1544  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11241  1545  3043               	movlw	67
 11242  1546  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11243  1547  0022               	movlb	2	; select bank2
 11244  1548  0831               	movf	modSaw@inflection^(0+256),w
 11245  1549  0021               	movlb	1	; select bank1
 11246  154A  00BE               	movwf	___ftneg@f1^(0+128)
 11247  154B  0022               	movlb	2	; select bank2
 11248  154C  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11249  154D  0021               	movlb	1	; select bank1
 11250  154E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11251  154F  0022               	movlb	2	; select bank2
 11252  1550  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11253  1551  0021               	movlb	1	; select bank1
 11254  1552  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11255  1553  31AC  24F8  3194   	fcall	___ftneg
 11256  1556  0021               	movlb	1	; select bank1
 11257  1557  083E               	movf	?___ftneg^(0+128),w
 11258  1558  00C4               	movwf	___ftadd@f2^(0+128)
 11259  1559  083F               	movf	(?___ftneg+1)^(0+128),w
 11260  155A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11261  155B  0840               	movf	(?___ftneg+2)^(0+128),w
 11262  155C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11263  155D  3190  2035  3194   	fcall	___ftadd
 11264  1560  0021               	movlb	1	; select bank1
 11265  1561  0841               	movf	?___ftadd^(0+128),w
 11266  1562  00CE               	movwf	___ftdiv@f2^(0+128)
 11267  1563  0842               	movf	(?___ftadd+1)^(0+128),w
 11268  1564  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11269  1565  0843               	movf	(?___ftadd+2)^(0+128),w
 11270  1566  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11271  1567  3000               	movlw	0
 11272  1568  00D1               	movwf	___ftdiv@f1^(0+128)
 11273  1569  3034               	movlw	52
 11274  156A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11275  156B  3043               	movlw	67
 11276  156C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11277  156D  319C  2474  3194   	fcall	___ftdiv
 11278  1570  0021               	movlb	1	; select bank1
 11279  1571  084E               	movf	?___ftdiv^(0+128),w
 11280  1572  00B1               	movwf	___ftmul@f2^(0+128)
 11281  1573  084F               	movf	(?___ftdiv+1)^(0+128),w
 11282  1574  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11283  1575  0850               	movf	(?___ftdiv+2)^(0+128),w
 11284  1576  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11285  1577  319E  267B  3194   	fcall	___ftmul
 11286  157A  0021               	movlb	1	; select bank1
 11287  157B  082E               	movf	?___ftmul^(0+128),w
 11288  157C  0022               	movlb	2	; select bank2
 11289  157D  00BC               	movwf	modSaw@shift^(0+256)
 11290  157E  0021               	movlb	1	; select bank1
 11291  157F  082F               	movf	(?___ftmul+1)^(0+128),w
 11292  1580  0022               	movlb	2	; select bank2
 11293  1581  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11294  1582  0021               	movlb	1	; select bank1
 11295  1583  0830               	movf	(?___ftmul+2)^(0+128),w
 11296  1584  0022               	movlb	2	; select bank2
 11297  1585  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11298                           
 11299                           ;modulation.c: 131: period = 180/(360-inflection);
 11300  1586  3000               	movlw	0
 11301  1587  0021               	movlb	1	; select bank1
 11302  1588  00C1               	movwf	___ftadd@f1^(0+128)
 11303  1589  30B4               	movlw	180
 11304  158A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11305  158B  3043               	movlw	67
 11306  158C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11307  158D  0022               	movlb	2	; select bank2
 11308  158E  0831               	movf	modSaw@inflection^(0+256),w
 11309  158F  0021               	movlb	1	; select bank1
 11310  1590  00BE               	movwf	___ftneg@f1^(0+128)
 11311  1591  0022               	movlb	2	; select bank2
 11312  1592  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11313  1593  0021               	movlb	1	; select bank1
 11314  1594  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11315  1595  0022               	movlb	2	; select bank2
 11316  1596  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11317  1597  0021               	movlb	1	; select bank1
 11318  1598  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11319  1599  31AC  24F8  3194   	fcall	___ftneg
 11320  159C  0021               	movlb	1	; select bank1
 11321  159D  083E               	movf	?___ftneg^(0+128),w
 11322  159E  00C4               	movwf	___ftadd@f2^(0+128)
 11323  159F  083F               	movf	(?___ftneg+1)^(0+128),w
 11324  15A0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11325  15A1  0840               	movf	(?___ftneg+2)^(0+128),w
 11326  15A2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11327  15A3  3190  2035  3194   	fcall	___ftadd
 11328  15A6  0021               	movlb	1	; select bank1
 11329  15A7  0841               	movf	?___ftadd^(0+128),w
 11330  15A8  00CE               	movwf	___ftdiv@f2^(0+128)
 11331  15A9  0842               	movf	(?___ftadd+1)^(0+128),w
 11332  15AA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11333  15AB  0843               	movf	(?___ftadd+2)^(0+128),w
 11334  15AC                     L8:	
 11335  15AC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11336  15AD  3000               	movlw	0
 11337  15AE  00D1               	movwf	___ftdiv@f1^(0+128)
 11338  15AF  3034               	movlw	52
 11339  15B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11340  15B1  3043               	movlw	67
 11341  15B2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11342  15B3  319C  2474  3194   	fcall	___ftdiv
 11343  15B6  0021               	movlb	1	; select bank1
 11344  15B7  084E               	movf	?___ftdiv^(0+128),w
 11345  15B8  0022               	movlb	2	; select bank2
 11346  15B9  00BF               	movwf	modSaw@period^(0+256)
 11347  15BA  0021               	movlb	1	; select bank1
 11348  15BB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11349  15BC  0022               	movlb	2	; select bank2
 11350  15BD  00C0               	movwf	(modSaw@period+1)^(0+256)
 11351  15BE  0021               	movlb	1	; select bank1
 11352  15BF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11353  15C0  0022               	movlb	2	; select bank2
 11354  15C1  00C1               	movwf	(modSaw@period+2)^(0+256)
 11355                           
 11356                           ;modulation.c: 132: }
 11357                           ;modulation.c: 134: int mod = (int)((period*angle-shift-180)*5/9);
 11358  15C2  083F               	movf	modSaw@period^(0+256),w
 11359  15C3  0021               	movlb	1	; select bank1
 11360  15C4  00B1               	movwf	___ftmul@f2^(0+128)
 11361  15C5  0022               	movlb	2	; select bank2
 11362  15C6  0840               	movf	(modSaw@period+1)^(0+256),w
 11363  15C7  0021               	movlb	1	; select bank1
 11364  15C8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11365  15C9  0022               	movlb	2	; select bank2
 11366  15CA  0841               	movf	(modSaw@period+2)^(0+256),w
 11367  15CB  0021               	movlb	1	; select bank1
 11368  15CC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11369  15CD  0022               	movlb	2	; select bank2
 11370  15CE  082E               	movf	modSaw@angle^(0+256),w
 11371  15CF  0021               	movlb	1	; select bank1
 11372  15D0  00AE               	movwf	___ftmul@f1^(0+128)
 11373  15D1  0022               	movlb	2	; select bank2
 11374  15D2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11375  15D3  0021               	movlb	1	; select bank1
 11376  15D4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11377  15D5  0022               	movlb	2	; select bank2
 11378  15D6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11379  15D7  0021               	movlb	1	; select bank1
 11380  15D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11381  15D9  319E  267B  3194   	fcall	___ftmul
 11382  15DC  0021               	movlb	1	; select bank1
 11383  15DD  082E               	movf	?___ftmul^(0+128),w
 11384  15DE  00C4               	movwf	___ftadd@f2^(0+128)
 11385  15DF  082F               	movf	(?___ftmul+1)^(0+128),w
 11386  15E0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11387  15E1  0830               	movf	(?___ftmul+2)^(0+128),w
 11388  15E2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11389  15E3  0022               	movlb	2	; select bank2
 11390  15E4  083C               	movf	modSaw@shift^(0+256),w
 11391  15E5  0021               	movlb	1	; select bank1
 11392  15E6  00BE               	movwf	___ftneg@f1^(0+128)
 11393  15E7  0022               	movlb	2	; select bank2
 11394  15E8  083D               	movf	(modSaw@shift+1)^(0+256),w
 11395  15E9  0021               	movlb	1	; select bank1
 11396  15EA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11397  15EB  0022               	movlb	2	; select bank2
 11398  15EC  083E               	movf	(modSaw@shift+2)^(0+256),w
 11399  15ED  0021               	movlb	1	; select bank1
 11400  15EE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11401  15EF  31AC  24F8  3194   	fcall	___ftneg
 11402  15F2  0021               	movlb	1	; select bank1
 11403  15F3  083E               	movf	?___ftneg^(0+128),w
 11404  15F4  00C1               	movwf	___ftadd@f1^(0+128)
 11405  15F5  083F               	movf	(?___ftneg+1)^(0+128),w
 11406  15F6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11407  15F7  0840               	movf	(?___ftneg+2)^(0+128),w
 11408  15F8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11409  15F9  3190  2035  3194   	fcall	___ftadd
 11410  15FC  0021               	movlb	1	; select bank1
 11411  15FD  0841               	movf	?___ftadd^(0+128),w
 11412  15FE  0022               	movlb	2	; select bank2
 11413  15FF  00B7               	movwf	_modSaw$2855^(0+256)
 11414  1600  0021               	movlb	1	; select bank1
 11415  1601  0842               	movf	(?___ftadd+1)^(0+128),w
 11416  1602  0022               	movlb	2	; select bank2
 11417  1603  00B8               	movwf	(_modSaw$2855+1)^(0+256)
 11418  1604  0021               	movlb	1	; select bank1
 11419  1605  0843               	movf	(?___ftadd+2)^(0+128),w
 11420  1606  0022               	movlb	2	; select bank2
 11421  1607  00B9               	movwf	(_modSaw$2855+2)^(0+256)
 11422                           
 11423                           ;modulation.c: 132: }
 11424                           ;modulation.c: 134: int mod = (int)((period*angle-shift-180)*5/9);
 11425  1608  0837               	movf	_modSaw$2855^(0+256),w
 11426  1609  0021               	movlb	1	; select bank1
 11427  160A  00C4               	movwf	___ftadd@f2^(0+128)
 11428  160B  0022               	movlb	2	; select bank2
 11429  160C  0838               	movf	(_modSaw$2855+1)^(0+256),w
 11430  160D  0021               	movlb	1	; select bank1
 11431  160E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11432  160F  0022               	movlb	2	; select bank2
 11433  1610  0839               	movf	(_modSaw$2855+2)^(0+256),w
 11434  1611  0021               	movlb	1	; select bank1
 11435  1612  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11436  1613  3000               	movlw	0
 11437  1614  00C1               	movwf	___ftadd@f1^(0+128)
 11438  1615  3034               	movlw	52
 11439  1616  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11440  1617  30C3               	movlw	195
 11441  1618  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11442  1619  3190  2035  3194   	fcall	___ftadd
 11443  161C  0021               	movlb	1	; select bank1
 11444  161D  0841               	movf	?___ftadd^(0+128),w
 11445  161E  00B1               	movwf	___ftmul@f2^(0+128)
 11446  161F  0842               	movf	(?___ftadd+1)^(0+128),w
 11447  1620  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11448  1621  0843               	movf	(?___ftadd+2)^(0+128),w
 11449  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11450  1623  3000               	movlw	0
 11451  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11452  1625  30A0               	movlw	160
 11453  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11454  1627  3040               	movlw	64
 11455  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11456  1629  319E  267B  3194   	fcall	___ftmul
 11457  162C  0021               	movlb	1	; select bank1
 11458  162D  082E               	movf	?___ftmul^(0+128),w
 11459  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11460  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11461  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11462  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11463  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11464  1633  3000               	movlw	0
 11465  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11466  1635  3010               	movlw	16
 11467  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11468  1637  3041               	movlw	65
 11469  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11470  1639  319C  2474  3194   	fcall	___ftdiv
 11471  163C  0021               	movlb	1	; select bank1
 11472  163D  084E               	movf	?___ftdiv^(0+128),w
 11473  163E  0022               	movlb	2	; select bank2
 11474  163F  00A0               	movwf	___fttol@f1^(0+256)
 11475  1640  0021               	movlb	1	; select bank1
 11476  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11477  1642  0022               	movlb	2	; select bank2
 11478  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11479  1644  0021               	movlb	1	; select bank1
 11480  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11481  1646  0022               	movlb	2	; select bank2
 11482  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11483  1648  3199  21AF         	fcall	___fttol
 11484  164A  0022               	movlb	2	; select bank2
 11485  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11486  164C  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11487  164D  0820               	movf	?___fttol^(0+256),w
 11488  164E  00BA               	movwf	modSaw@mod^(0+256)
 11489                           
 11490                           ;modulation.c: 135: return mod;
 11491  164F  083B               	movf	(modSaw@mod+1)^(0+256),w
 11492  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11493  1651  083A               	movf	modSaw@mod^(0+256),w
 11494  1652  00AE               	movwf	?_modSaw^(0+256)
 11495  1653  0008               	return
 11496  1654                     __end_of_modSaw:	
 11497                           
 11498                           	psect	text22
 11499  2464                     __ptext22:	
 11500 ;; *************** function ___awdiv *****************
 11501 ;; Defined at:
 11502 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;  divisor         2    0[BANK1 ] int 
 11505 ;;  dividend        2    2[BANK1 ] int 
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;  quotient        2    7[BANK1 ] int 
 11508 ;;  sign            1    6[BANK1 ] unsigned char 
 11509 ;;  counter         1    5[BANK1 ] unsigned char 
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  2    0[BANK1 ] int 
 11512 ;; Registers used:
 11513 ;;		wreg, status,2, status,0
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11519 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11520 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11521 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11522 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11523 ;;Total ram usage:        9 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    3
 11526 ;; This function calls:
 11527 ;;		Nothing
 11528 ;; This function is called by:
 11529 ;;		_updateModulationArray
 11530 ;;		_USARTWriteInt
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           
 11535                           ;psect for function ___awdiv
 11536  2464                     ___awdiv:	
 11537                           
 11538                           ;incstack = 0
 11539                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11540  2464  0021               	movlb	1	; select bank1
 11541  2465  01A6               	clrf	___awdiv@sign^(0+128)
 11542  2466  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11543  2467  2C6F               	goto	l8664
 11544  2468  09A0               	comf	___awdiv@divisor^(0+128),f
 11545  2469  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11546  246A  0AA0               	incf	___awdiv@divisor^(0+128),f
 11547  246B  1903               	skipnz
 11548  246C  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11549  246D  01A6               	clrf	___awdiv@sign^(0+128)
 11550  246E  0AA6               	incf	___awdiv@sign^(0+128),f
 11551  246F                     l8664:	
 11552  246F  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11553  2470  2C7A               	goto	l8670
 11554  2471  09A2               	comf	___awdiv@dividend^(0+128),f
 11555  2472  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11556  2473  0AA2               	incf	___awdiv@dividend^(0+128),f
 11557  2474  1903               	skipnz
 11558  2475  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11559  2476  3001               	movlw	1
 11560  2477  00A4               	movwf	??___awdiv^(0+128)
 11561  2478  0824               	movf	??___awdiv^(0+128),w
 11562  2479  06A6               	xorwf	___awdiv@sign^(0+128),f
 11563  247A                     l8670:	
 11564  247A  01A7               	clrf	___awdiv@quotient^(0+128)
 11565  247B  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11566  247C  0820               	movf	___awdiv@divisor^(0+128),w
 11567  247D  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11568  247E  1903               	btfsc	3,2
 11569  247F  2CA9               	goto	l8692
 11570  2480  01A5               	clrf	___awdiv@counter^(0+128)
 11571  2481  0AA5               	incf	___awdiv@counter^(0+128),f
 11572  2482                     l8680:	
 11573  2482  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11574  2483  2C8E               	goto	l8682
 11575  2484  3001               	movlw	1
 11576  2485                     u9245:	
 11577  2485  35A0               	lslf	___awdiv@divisor^(0+128),f
 11578  2486  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11579  2487  0B89               	decfsz	9,f
 11580  2488  2C85               	goto	u9245
 11581  2489  3001               	movlw	1
 11582  248A  00A4               	movwf	??___awdiv^(0+128)
 11583  248B  0824               	movf	??___awdiv^(0+128),w
 11584  248C  07A5               	addwf	___awdiv@counter^(0+128),f
 11585  248D  2C82               	goto	l8680
 11586  248E                     l8682:	
 11587  248E  3001               	movlw	1
 11588  248F                     u9265:	
 11589  248F  35A7               	lslf	___awdiv@quotient^(0+128),f
 11590  2490  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11591  2491  0B89               	decfsz	9,f
 11592  2492  2C8F               	goto	u9265
 11593  2493  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11594  2494  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11595  2495  1D03               	skipz
 11596  2496  2C99               	goto	u9275
 11597  2497  0820               	movf	___awdiv@divisor^(0+128),w
 11598  2498  0222               	subwf	___awdiv@dividend^(0+128),w
 11599  2499                     u9275:	
 11600  2499  1C03               	skipc
 11601  249A  2CA0               	goto	l8688
 11602  249B  0820               	movf	___awdiv@divisor^(0+128),w
 11603  249C  02A2               	subwf	___awdiv@dividend^(0+128),f
 11604  249D  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11605  249E  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11606  249F  1427               	bsf	___awdiv@quotient^(0+128),0
 11607  24A0                     l8688:	
 11608  24A0  3001               	movlw	1
 11609  24A1                     u9285:	
 11610  24A1  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11611  24A2  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11612  24A3  0B89               	decfsz	9,f
 11613  24A4  2CA1               	goto	u9285
 11614  24A5  3001               	movlw	1
 11615  24A6  02A5               	subwf	___awdiv@counter^(0+128),f
 11616  24A7  1D03               	btfss	3,2
 11617  24A8  2C8E               	goto	l8682
 11618  24A9                     l8692:	
 11619  24A9  0826               	movf	___awdiv@sign^(0+128),w
 11620  24AA  1903               	btfsc	3,2
 11621  24AB  2CB1               	goto	l8696
 11622  24AC  09A7               	comf	___awdiv@quotient^(0+128),f
 11623  24AD  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11624  24AE  0AA7               	incf	___awdiv@quotient^(0+128),f
 11625  24AF  1903               	skipnz
 11626  24B0  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11627  24B1                     l8696:	
 11628  24B1  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11629  24B2  00A1               	movwf	(?___awdiv+1)^(0+128)
 11630  24B3  0827               	movf	___awdiv@quotient^(0+128),w
 11631  24B4  00A0               	movwf	?___awdiv^(0+128)
 11632  24B5  0008               	return
 11633  24B6                     __end_of___awdiv:	
 11634                           
 11635                           	psect	text23
 11636  1AC1                     __ptext23:	
 11637 ;; *************** function _set_subdivision *****************
 11638 ;; Defined at:
 11639 ;;		line 77 in file "user.c"
 11640 ;; Parameters:    Size  Location     Type
 11641 ;;  x               2   14[BANK2 ] int 
 11642 ;;  y               2   16[BANK2 ] int 
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;  scalar          3   18[BANK2 ] float 
 11645 ;;  tmpX            2   21[BANK2 ] int 
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  2   14[BANK2 ] int 
 11648 ;; Registers used:
 11649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11650 ;; Tracked objects:
 11651 ;;		On entry : 0/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11655 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11656 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11658 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11659 ;;Total ram usage:        9 bytes
 11660 ;; Hardware stack levels used:    1
 11661 ;; Hardware stack levels required when called:    5
 11662 ;; This function calls:
 11663 ;;		___awtoft
 11664 ;;		___ftmul
 11665 ;;		___fttol
 11666 ;; This function is called by:
 11667 ;;		_main
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _set_subdivision
 11673  1AC1                     _set_subdivision:	
 11674                           
 11675                           ;user.c: 81: adjust_mod_delay = 0;
 11676                           
 11677                           ;incstack = 0
 11678                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11679  1AC1  0023               	movlb	3	; select bank3
 11680  1AC2  01BE               	clrf	_adjust_mod_delay^(0+384)
 11681                           
 11682                           ;user.c: 82: int tmpX = x;
 11683  1AC3  0022               	movlb	2	; select bank2
 11684  1AC4  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11685  1AC5  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11686  1AC6  082E               	movf	set_subdivision@x^(0+256),w
 11687  1AC7  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11688                           
 11689                           ;user.c: 83: float scalar = 1.0;
 11690  1AC8  3000               	movlw	0
 11691  1AC9  00B2               	movwf	set_subdivision@scalar^(0+256)
 11692  1ACA  3080               	movlw	128
 11693  1ACB  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11694  1ACC  303F               	movlw	63
 11695  1ACD  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11696                           
 11697                           ;user.c: 85: switch (y) {
 11698  1ACE  2AEE               	goto	l9206
 11699  1ACF                     l9192:	
 11700                           ;user.c: 86: case 1:
 11701                           
 11702                           
 11703                           ;user.c: 87: scalar = 2.0;
 11704  1ACF  3000               	movlw	0
 11705  1AD0  00B2               	movwf	set_subdivision@scalar^(0+256)
 11706  1AD1  3000               	movlw	0
 11707  1AD2  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11708  1AD3  3040               	movlw	64
 11709  1AD4  2AEC               	goto	L13
 11710  1AD5                     l9194:	
 11711                           ;user.c: 89: case 2:
 11712                           
 11713                           ;user.c: 88: break;
 11714                           
 11715                           
 11716                           ;user.c: 90: scalar = 0.6666;
 11717  1AD5  30A6               	movlw	166
 11718  1AD6  00B2               	movwf	set_subdivision@scalar^(0+256)
 11719  1AD7  302A               	movlw	42
 11720  1AD8  2AEA               	goto	L14
 11721  1AD9                     l9196:	
 11722                           ;user.c: 92: case 3:
 11723                           
 11724                           ;user.c: 91: break;
 11725                           
 11726                           
 11727                           ;user.c: 93: scalar = .5;
 11728  1AD9  3000               	movlw	0
 11729  1ADA  00B2               	movwf	set_subdivision@scalar^(0+256)
 11730  1ADB  3000               	movlw	0
 11731  1ADC  2AEA               	goto	L14
 11732  1ADD                     l9198:	
 11733                           ;user.c: 95: case 4:
 11734                           
 11735                           ;user.c: 94: break;
 11736                           
 11737                           
 11738                           ;user.c: 96: scalar = 0.3333;
 11739  1ADD  30A6               	movlw	166
 11740  1ADE  00B2               	movwf	set_subdivision@scalar^(0+256)
 11741  1ADF  30AA               	movlw	170
 11742  1AE0  2AE4               	goto	L15
 11743  1AE1                     l9200:	
 11744                           ;user.c: 98: case 5:
 11745                           
 11746                           ;user.c: 97: break;
 11747                           
 11748                           
 11749                           ;user.c: 99: scalar = 0.25;
 11750  1AE1  3000               	movlw	0
 11751  1AE2  00B2               	movwf	set_subdivision@scalar^(0+256)
 11752  1AE3  3080               	movlw	128
 11753  1AE4                     L15:	
 11754  1AE4  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11755  1AE5  303E               	movlw	62
 11756  1AE6  2AEC               	goto	L13
 11757  1AE7                     l9202:	
 11758                           ;user.c: 101: case 6:
 11759                           
 11760                           ;user.c: 100: break;
 11761                           
 11762                           
 11763                           ;user.c: 102: scalar = 1.0;
 11764  1AE7  3000               	movlw	0
 11765  1AE8  00B2               	movwf	set_subdivision@scalar^(0+256)
 11766  1AE9  3080               	movlw	128
 11767  1AEA                     L14:	
 11768  1AEA  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11769  1AEB  303F               	movlw	63
 11770  1AEC                     L13:	
 11771  1AEC  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11772                           
 11773                           ;user.c: 104: }
 11774                           
 11775                           ;user.c: 103: break;
 11776  1AED  2B07               	goto	l9208
 11777  1AEE                     l9206:	
 11778                           
 11779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11780                           ; Switch size 1, requested type "space"
 11781                           ; Number of cases is 1, Range of values is 0 to 0
 11782                           ; switch strategies available:
 11783                           ; Name         Instructions Cycles
 11784                           ; simple_byte            4     3 (average)
 11785                           ; direct_byte            8     6 (fixed)
 11786                           ; jumptable            260     6 (fixed)
 11787                           ;	Chosen strategy is simple_byte
 11788  1AEE  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11789  1AEF  3A00               	xorlw	0	; case 0
 11790  1AF0  1903               	skipnz
 11791  1AF1  2AF3               	goto	l9842
 11792  1AF2  2B07               	goto	l9208
 11793  1AF3                     l9842:	
 11794                           
 11795                           ; Switch size 1, requested type "space"
 11796                           ; Number of cases is 6, Range of values is 1 to 6
 11797                           ; switch strategies available:
 11798                           ; Name         Instructions Cycles
 11799                           ; simple_byte           19    10 (average)
 11800                           ; direct_byte           21     9 (fixed)
 11801                           ; jumptable            263     9 (fixed)
 11802                           ;	Chosen strategy is simple_byte
 11803  1AF3  0830               	movf	set_subdivision@y^(0+256),w
 11804  1AF4  3A01               	xorlw	1	; case 1
 11805  1AF5  1903               	skipnz
 11806  1AF6  2ACF               	goto	l9192
 11807  1AF7  3A03               	xorlw	3	; case 2
 11808  1AF8  1903               	skipnz
 11809  1AF9  2AD5               	goto	l9194
 11810  1AFA  3A01               	xorlw	1	; case 3
 11811  1AFB  1903               	skipnz
 11812  1AFC  2AD9               	goto	l9196
 11813  1AFD  3A07               	xorlw	7	; case 4
 11814  1AFE  1903               	skipnz
 11815  1AFF  2ADD               	goto	l9198
 11816  1B00  3A01               	xorlw	1	; case 5
 11817  1B01  1903               	skipnz
 11818  1B02  2AE1               	goto	l9200
 11819  1B03  3A03               	xorlw	3	; case 6
 11820  1B04  1903               	skipnz
 11821  1B05  2AE7               	goto	l9202
 11822  1B06  2B07               	goto	l9208
 11823  1B07                     l9208:	
 11824                           
 11825                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11826  1B07  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11827  1B08  0021               	movlb	1	; select bank1
 11828  1B09  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11829  1B0A  0022               	movlb	2	; select bank2
 11830  1B0B  0835               	movf	set_subdivision@tmpX^(0+256),w
 11831  1B0C  0021               	movlb	1	; select bank1
 11832  1B0D  00A8               	movwf	___awtoft@c^(0+128)
 11833  1B0E  31AE  263A  319A   	fcall	___awtoft
 11834  1B11  0021               	movlb	1	; select bank1
 11835  1B12  0828               	movf	?___awtoft^(0+128),w
 11836  1B13  00B1               	movwf	___ftmul@f2^(0+128)
 11837  1B14  0829               	movf	(?___awtoft+1)^(0+128),w
 11838  1B15  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11839  1B16  082A               	movf	(?___awtoft+2)^(0+128),w
 11840  1B17  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11841  1B18  0022               	movlb	2	; select bank2
 11842  1B19  0832               	movf	set_subdivision@scalar^(0+256),w
 11843  1B1A  0021               	movlb	1	; select bank1
 11844  1B1B  00AE               	movwf	___ftmul@f1^(0+128)
 11845  1B1C  0022               	movlb	2	; select bank2
 11846  1B1D  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11847  1B1E  0021               	movlb	1	; select bank1
 11848  1B1F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11849  1B20  0022               	movlb	2	; select bank2
 11850  1B21  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11851  1B22  0021               	movlb	1	; select bank1
 11852  1B23  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11853  1B24  319E  267B  319A   	fcall	___ftmul
 11854  1B27  0021               	movlb	1	; select bank1
 11855  1B28  082E               	movf	?___ftmul^(0+128),w
 11856  1B29  0022               	movlb	2	; select bank2
 11857  1B2A  00A0               	movwf	___fttol@f1^(0+256)
 11858  1B2B  0021               	movlb	1	; select bank1
 11859  1B2C  082F               	movf	(?___ftmul+1)^(0+128),w
 11860  1B2D  0022               	movlb	2	; select bank2
 11861  1B2E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11862  1B2F  0021               	movlb	1	; select bank1
 11863  1B30  0830               	movf	(?___ftmul+2)^(0+128),w
 11864  1B31  0022               	movlb	2	; select bank2
 11865  1B32  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11866  1B33  3199  21AF  319A   	fcall	___fttol
 11867  1B36  0022               	movlb	2	; select bank2
 11868  1B37  0821               	movf	(?___fttol^(0+256)+1),w
 11869  1B38  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11870  1B39  0820               	movf	?___fttol^(0+256),w
 11871  1B3A  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11872                           
 11873                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11874  1B3B  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11875  1B3C  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11876  1B3D  1D03               	skipz
 11877  1B3E  2B41               	goto	u10225
 11878  1B3F  0835               	movf	set_subdivision@tmpX^(0+256),w
 11879  1B40  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11880  1B41                     u10225:	
 11881  1B41  1903               	skipnz
 11882  1B42  2B46               	goto	l9214
 11883                           
 11884                           ;user.c: 109: adjust_mod_delay = 1;
 11885  1B43  0023               	movlb	3	; select bank3
 11886  1B44  01BE               	clrf	_adjust_mod_delay^(0+384)
 11887  1B45  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11888  1B46                     l9214:	
 11889                           
 11890                           ;user.c: 110: }
 11891                           ;user.c: 112: return tmpX;
 11892  1B46  0022               	movlb	2	; select bank2
 11893  1B47  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11894  1B48  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11895  1B49  0835               	movf	set_subdivision@tmpX^(0+256),w
 11896  1B4A  00AE               	movwf	?_set_subdivision^(0+256)
 11897  1B4B  0008               	return
 11898  1B4C                     __end_of_set_subdivision:	
 11899                           
 11900                           	psect	text24
 11901  1D1D                     __ptext24:	
 11902 ;; *************** function _scaleiA10kPot *****************
 11903 ;; Defined at:
 11904 ;;		line 211 in file "user.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;  input           3   71[BANK2 ] int 
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;  pwm             3    0[BANK3 ] float 
 11909 ;; Return value:  Size  Location     Type
 11910 ;;                  2   71[BANK2 ] int 
 11911 ;; Registers used:
 11912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11913 ;; Tracked objects:
 11914 ;;		On entry : 0/0
 11915 ;;		On exit  : 0/0
 11916 ;;		Unchanged: 0/0
 11917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11918 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11919 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11921 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11922 ;;Total ram usage:       12 bytes
 11923 ;; Hardware stack levels used:    1
 11924 ;; Hardware stack levels required when called:    8
 11925 ;; This function calls:
 11926 ;;		___ftadd
 11927 ;;		___ftdiv
 11928 ;;		___ftmul
 11929 ;;		___ftneg
 11930 ;;		___fttol
 11931 ;;		_pow
 11932 ;; This function is called by:
 11933 ;;		_main
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           
 11938                           ;psect for function _scaleiA10kPot
 11939  1D1D                     _scaleiA10kPot:	
 11940                           
 11941                           ;user.c: 214: if (input == 0.0) {return 0;}
 11942                           
 11943                           ;incstack = 0
 11944                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11945  1D1D  0022               	movlb	2	; select bank2
 11946  1D1E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11947  1D1F  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11948  1D20  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11949  1D21  1D03               	skipz
 11950  1D22  2D26               	goto	l9152
 11951  1D23  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11952  1D24  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11953  1D25  0008               	return
 11954  1D26                     l9152:	
 11955                           
 11956                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11957  1D26  30C0               	movlw	192
 11958  1D27  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11959  1D28  307F               	movlw	127
 11960  1D29  1903               	skipnz
 11961  1D2A  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11962  1D2B  3044               	movlw	68
 11963  1D2C  1903               	skipnz
 11964  1D2D  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11965  1D2E  1D03               	btfss	3,2
 11966  1D2F  2D35               	goto	l9158
 11967  1D30  30FF               	movlw	255
 11968  1D31  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11969  1D32  3000               	movlw	0
 11970  1D33  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11971  1D34  0008               	return
 11972  1D35                     l9158:	
 11973                           
 11974                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11975  1D35  3000               	movlw	0
 11976  1D36  0021               	movlb	1	; select bank1
 11977  1D37  00C1               	movwf	___ftadd@f1^(0+128)
 11978  1D38  3080               	movlw	128
 11979  1D39  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11980  1D3A  303F               	movlw	63
 11981  1D3B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11982  1D3C  0022               	movlb	2	; select bank2
 11983  1D3D  0867               	movf	scaleiA10kPot@input^(0+256),w
 11984  1D3E  0021               	movlb	1	; select bank1
 11985  1D3F  00D1               	movwf	___ftdiv@f1^(0+128)
 11986  1D40  0022               	movlb	2	; select bank2
 11987  1D41  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11988  1D42  0021               	movlb	1	; select bank1
 11989  1D43  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11990  1D44  0022               	movlb	2	; select bank2
 11991  1D45  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11992  1D46  0021               	movlb	1	; select bank1
 11993  1D47  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11994  1D48  30C0               	movlw	192
 11995  1D49  00CE               	movwf	___ftdiv@f2^(0+128)
 11996  1D4A  307F               	movlw	127
 11997  1D4B  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11998  1D4C  3044               	movlw	68
 11999  1D4D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12000  1D4E  319C  2474  319D   	fcall	___ftdiv
 12001  1D51  0021               	movlb	1	; select bank1
 12002  1D52  084E               	movf	?___ftdiv^(0+128),w
 12003  1D53  00BE               	movwf	___ftneg@f1^(0+128)
 12004  1D54  084F               	movf	(?___ftdiv+1)^(0+128),w
 12005  1D55  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12006  1D56  0850               	movf	(?___ftdiv+2)^(0+128),w
 12007  1D57  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12008  1D58  31AC  24F8  319D   	fcall	___ftneg
 12009  1D5B  0021               	movlb	1	; select bank1
 12010  1D5C  083E               	movf	?___ftneg^(0+128),w
 12011  1D5D  00C4               	movwf	___ftadd@f2^(0+128)
 12012  1D5E  083F               	movf	(?___ftneg+1)^(0+128),w
 12013  1D5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12014  1D60  0840               	movf	(?___ftneg+2)^(0+128),w
 12015  1D61  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12016  1D62  3190  2035  319D   	fcall	___ftadd
 12017  1D65  0021               	movlb	1	; select bank1
 12018  1D66  0841               	movf	?___ftadd^(0+128),w
 12019  1D67  0023               	movlb	3	; select bank3
 12020  1D68  00EA               	movwf	_scaleiA10kPot$2850^(0+384)
 12021  1D69  0021               	movlb	1	; select bank1
 12022  1D6A  0842               	movf	(?___ftadd+1)^(0+128),w
 12023  1D6B  0023               	movlb	3	; select bank3
 12024  1D6C  00EB               	movwf	(_scaleiA10kPot$2850+1)^(0+384)
 12025  1D6D  0021               	movlb	1	; select bank1
 12026  1D6E  0843               	movf	(?___ftadd+2)^(0+128),w
 12027  1D6F  0023               	movlb	3	; select bank3
 12028  1D70  00EC               	movwf	(_scaleiA10kPot$2850+2)^(0+384)
 12029                           
 12030                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12031  1D71  306A               	movlw	106
 12032  1D72  0022               	movlb	2	; select bank2
 12033  1D73  00D8               	movwf	pow@y^(0+256)
 12034  1D74  309C               	movlw	156
 12035  1D75  00D9               	movwf	(pow@y+1)^(0+256)
 12036  1D76  30BF               	movlw	191
 12037  1D77  00DA               	movwf	(pow@y+2)^(0+256)
 12038  1D78  0023               	movlb	3	; select bank3
 12039  1D79  086A               	movf	_scaleiA10kPot$2850^(0+384),w
 12040  1D7A  0022               	movlb	2	; select bank2
 12041  1D7B  00D5               	movwf	pow@x^(0+256)
 12042  1D7C  0023               	movlb	3	; select bank3
 12043  1D7D  086B               	movf	(_scaleiA10kPot$2850+1)^(0+384),w
 12044  1D7E  0022               	movlb	2	; select bank2
 12045  1D7F  00D6               	movwf	(pow@x+1)^(0+256)
 12046  1D80  0023               	movlb	3	; select bank3
 12047  1D81  086C               	movf	(_scaleiA10kPot$2850+2)^(0+384),w
 12048  1D82  0022               	movlb	2	; select bank2
 12049  1D83  00D7               	movwf	(pow@x+2)^(0+256)
 12050  1D84  3191  212B  319D   	fcall	_pow
 12051  1D87  0022               	movlb	2	; select bank2
 12052  1D88  0855               	movf	?_pow^(0+256),w
 12053  1D89  0023               	movlb	3	; select bank3
 12054  1D8A  00ED               	movwf	_scaleiA10kPot$2851^(0+384)
 12055  1D8B  0022               	movlb	2	; select bank2
 12056  1D8C  0856               	movf	(?_pow+1)^(0+256),w
 12057  1D8D  0023               	movlb	3	; select bank3
 12058  1D8E  00EE               	movwf	(_scaleiA10kPot$2851+1)^(0+384)
 12059  1D8F  0022               	movlb	2	; select bank2
 12060  1D90  0857               	movf	(?_pow+2)^(0+256),w
 12061  1D91  0023               	movlb	3	; select bank3
 12062  1D92  00EF               	movwf	(_scaleiA10kPot$2851+2)^(0+384)
 12063                           
 12064                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12065  1D93  30E3               	movlw	227
 12066  1D94  0021               	movlb	1	; select bank1
 12067  1D95  00AE               	movwf	___ftmul@f1^(0+128)
 12068  1D96  300B               	movlw	11
 12069  1D97  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12070  1D98  3041               	movlw	65
 12071  1D99  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12072  1D9A  0023               	movlb	3	; select bank3
 12073  1D9B  086D               	movf	_scaleiA10kPot$2851^(0+384),w
 12074  1D9C  0021               	movlb	1	; select bank1
 12075  1D9D  00B1               	movwf	___ftmul@f2^(0+128)
 12076  1D9E  0023               	movlb	3	; select bank3
 12077  1D9F  086E               	movf	(_scaleiA10kPot$2851+1)^(0+384),w
 12078  1DA0  0021               	movlb	1	; select bank1
 12079  1DA1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12080  1DA2  0023               	movlb	3	; select bank3
 12081  1DA3  086F               	movf	(_scaleiA10kPot$2851+2)^(0+384),w
 12082  1DA4  0021               	movlb	1	; select bank1
 12083  1DA5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12084  1DA6  319E  267B  319D   	fcall	___ftmul
 12085  1DA9  0021               	movlb	1	; select bank1
 12086  1DAA  082E               	movf	?___ftmul^(0+128),w
 12087  1DAB  0023               	movlb	3	; select bank3
 12088  1DAC  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 12089  1DAD  0021               	movlb	1	; select bank1
 12090  1DAE  082F               	movf	(?___ftmul+1)^(0+128),w
 12091  1DAF  0023               	movlb	3	; select bank3
 12092  1DB0  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12093  1DB1  0021               	movlb	1	; select bank1
 12094  1DB2  0830               	movf	(?___ftmul+2)^(0+128),w
 12095  1DB3  0023               	movlb	3	; select bank3
 12096  1DB4  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12097                           
 12098                           ;user.c: 219: return (int)(pwm);
 12099  1DB5  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 12100  1DB6  0022               	movlb	2	; select bank2
 12101  1DB7  00A0               	movwf	___fttol@f1^(0+256)
 12102  1DB8  0023               	movlb	3	; select bank3
 12103  1DB9  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12104  1DBA  0022               	movlb	2	; select bank2
 12105  1DBB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12106  1DBC  0023               	movlb	3	; select bank3
 12107  1DBD  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12108  1DBE  0022               	movlb	2	; select bank2
 12109  1DBF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12110  1DC0  3199  21AF         	fcall	___fttol
 12111  1DC2  0022               	movlb	2	; select bank2
 12112  1DC3  0821               	movf	(?___fttol^(0+256)+1),w
 12113  1DC4  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12114  1DC5  0820               	movf	?___fttol^(0+256),w
 12115  1DC6  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12116  1DC7  0008               	return
 12117  1DC8                     __end_of_scaleiA10kPot:	
 12118                           
 12119                           	psect	text25
 12120  1B4C                     __ptext25:	
 12121 ;; *************** function _scaleA10kPot *****************
 12122 ;; Defined at:
 12123 ;;		line 202 in file "user.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;  input           3   71[BANK2 ] int 
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  pwm             3    0[BANK3 ] float 
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  2   71[BANK2 ] int 
 12130 ;; Registers used:
 12131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12137 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12138 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12140 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12141 ;;Total ram usage:       12 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    8
 12144 ;; This function calls:
 12145 ;;		___ftdiv
 12146 ;;		___ftmul
 12147 ;;		___fttol
 12148 ;;		_pow
 12149 ;; This function is called by:
 12150 ;;		_main
 12151 ;; This function uses a non-reentrant model
 12152 ;;
 12153                           
 12154                           
 12155                           ;psect for function _scaleA10kPot
 12156  1B4C                     _scaleA10kPot:	
 12157                           
 12158                           ;user.c: 204: if (input == 0.0) {return 255;}
 12159                           
 12160                           ;incstack = 0
 12161                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12162  1B4C  0022               	movlb	2	; select bank2
 12163  1B4D  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12164  1B4E  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12165  1B4F  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12166  1B50  1D03               	skipz
 12167  1B51  2B57               	goto	l9130
 12168  1B52  30FF               	movlw	255
 12169  1B53  00E7               	movwf	?_scaleA10kPot^(0+256)
 12170  1B54  3000               	movlw	0
 12171  1B55  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12172  1B56  0008               	return
 12173  1B57                     l9130:	
 12174                           
 12175                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12176  1B57  30C0               	movlw	192
 12177  1B58  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12178  1B59  307F               	movlw	127
 12179  1B5A  1903               	skipnz
 12180  1B5B  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12181  1B5C  3044               	movlw	68
 12182  1B5D  1903               	skipnz
 12183  1B5E  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12184  1B5F  1D03               	btfss	3,2
 12185  1B60  2B64               	goto	l9136
 12186  1B61  01E7               	clrf	?_scaleA10kPot^(0+256)
 12187  1B62  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12188  1B63  0008               	return
 12189  1B64                     l9136:	
 12190                           
 12191                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12192  1B64  30C0               	movlw	192
 12193  1B65  0021               	movlb	1	; select bank1
 12194  1B66  00CE               	movwf	___ftdiv@f2^(0+128)
 12195  1B67  307F               	movlw	127
 12196  1B68  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12197  1B69  3044               	movlw	68
 12198  1B6A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12199  1B6B  0022               	movlb	2	; select bank2
 12200  1B6C  0867               	movf	scaleA10kPot@input^(0+256),w
 12201  1B6D  0021               	movlb	1	; select bank1
 12202  1B6E  00D1               	movwf	___ftdiv@f1^(0+128)
 12203  1B6F  0022               	movlb	2	; select bank2
 12204  1B70  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12205  1B71  0021               	movlb	1	; select bank1
 12206  1B72  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12207  1B73  0022               	movlb	2	; select bank2
 12208  1B74  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12209  1B75  0021               	movlb	1	; select bank1
 12210  1B76  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12211  1B77  319C  2474  319B   	fcall	___ftdiv
 12212  1B7A  0021               	movlb	1	; select bank1
 12213  1B7B  084E               	movf	?___ftdiv^(0+128),w
 12214  1B7C  0023               	movlb	3	; select bank3
 12215  1B7D  00EA               	movwf	_scaleA10kPot$2848^(0+384)
 12216  1B7E  0021               	movlb	1	; select bank1
 12217  1B7F  084F               	movf	(?___ftdiv+1)^(0+128),w
 12218  1B80  0023               	movlb	3	; select bank3
 12219  1B81  00EB               	movwf	(_scaleA10kPot$2848+1)^(0+384)
 12220  1B82  0021               	movlb	1	; select bank1
 12221  1B83  0850               	movf	(?___ftdiv+2)^(0+128),w
 12222  1B84  0023               	movlb	3	; select bank3
 12223  1B85  00EC               	movwf	(_scaleA10kPot$2848+2)^(0+384)
 12224                           
 12225                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12226  1B86  306A               	movlw	106
 12227  1B87  0022               	movlb	2	; select bank2
 12228  1B88  00D8               	movwf	pow@y^(0+256)
 12229  1B89  309C               	movlw	156
 12230  1B8A  00D9               	movwf	(pow@y+1)^(0+256)
 12231  1B8B  30BF               	movlw	191
 12232  1B8C  00DA               	movwf	(pow@y+2)^(0+256)
 12233  1B8D  0023               	movlb	3	; select bank3
 12234  1B8E  086A               	movf	_scaleA10kPot$2848^(0+384),w
 12235  1B8F  0022               	movlb	2	; select bank2
 12236  1B90  00D5               	movwf	pow@x^(0+256)
 12237  1B91  0023               	movlb	3	; select bank3
 12238  1B92  086B               	movf	(_scaleA10kPot$2848+1)^(0+384),w
 12239  1B93  0022               	movlb	2	; select bank2
 12240  1B94  00D6               	movwf	(pow@x+1)^(0+256)
 12241  1B95  0023               	movlb	3	; select bank3
 12242  1B96  086C               	movf	(_scaleA10kPot$2848+2)^(0+384),w
 12243  1B97  0022               	movlb	2	; select bank2
 12244  1B98  00D7               	movwf	(pow@x+2)^(0+256)
 12245  1B99  3191  212B  319B   	fcall	_pow
 12246  1B9C  0022               	movlb	2	; select bank2
 12247  1B9D  0855               	movf	?_pow^(0+256),w
 12248  1B9E  0023               	movlb	3	; select bank3
 12249  1B9F  00ED               	movwf	_scaleA10kPot$2849^(0+384)
 12250  1BA0  0022               	movlb	2	; select bank2
 12251  1BA1  0856               	movf	(?_pow+1)^(0+256),w
 12252  1BA2  0023               	movlb	3	; select bank3
 12253  1BA3  00EE               	movwf	(_scaleA10kPot$2849+1)^(0+384)
 12254  1BA4  0022               	movlb	2	; select bank2
 12255  1BA5  0857               	movf	(?_pow+2)^(0+256),w
 12256  1BA6  0023               	movlb	3	; select bank3
 12257  1BA7  00EF               	movwf	(_scaleA10kPot$2849+2)^(0+384)
 12258                           
 12259                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12260  1BA8  30E3               	movlw	227
 12261  1BA9  0021               	movlb	1	; select bank1
 12262  1BAA  00AE               	movwf	___ftmul@f1^(0+128)
 12263  1BAB  300B               	movlw	11
 12264  1BAC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12265  1BAD  3041               	movlw	65
 12266  1BAE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12267  1BAF  0023               	movlb	3	; select bank3
 12268  1BB0  086D               	movf	_scaleA10kPot$2849^(0+384),w
 12269  1BB1  0021               	movlb	1	; select bank1
 12270  1BB2  00B1               	movwf	___ftmul@f2^(0+128)
 12271  1BB3  0023               	movlb	3	; select bank3
 12272  1BB4  086E               	movf	(_scaleA10kPot$2849+1)^(0+384),w
 12273  1BB5  0021               	movlb	1	; select bank1
 12274  1BB6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12275  1BB7  0023               	movlb	3	; select bank3
 12276  1BB8  086F               	movf	(_scaleA10kPot$2849+2)^(0+384),w
 12277  1BB9  0021               	movlb	1	; select bank1
 12278  1BBA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12279  1BBB  319E  267B  319B   	fcall	___ftmul
 12280  1BBE  0021               	movlb	1	; select bank1
 12281  1BBF  082E               	movf	?___ftmul^(0+128),w
 12282  1BC0  0023               	movlb	3	; select bank3
 12283  1BC1  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12284  1BC2  0021               	movlb	1	; select bank1
 12285  1BC3  082F               	movf	(?___ftmul+1)^(0+128),w
 12286  1BC4  0023               	movlb	3	; select bank3
 12287  1BC5  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12288  1BC6  0021               	movlb	1	; select bank1
 12289  1BC7  0830               	movf	(?___ftmul+2)^(0+128),w
 12290  1BC8  0023               	movlb	3	; select bank3
 12291  1BC9  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12292                           
 12293                           ;user.c: 207: return (int)(pwm);
 12294  1BCA  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12295  1BCB  0022               	movlb	2	; select bank2
 12296  1BCC  00A0               	movwf	___fttol@f1^(0+256)
 12297  1BCD  0023               	movlb	3	; select bank3
 12298  1BCE  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12299  1BCF  0022               	movlb	2	; select bank2
 12300  1BD0  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12301  1BD1  0023               	movlb	3	; select bank3
 12302  1BD2  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12303  1BD3  0022               	movlb	2	; select bank2
 12304  1BD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12305  1BD5  3199  21AF         	fcall	___fttol
 12306  1BD7  0022               	movlb	2	; select bank2
 12307  1BD8  0821               	movf	(?___fttol^(0+256)+1),w
 12308  1BD9  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12309  1BDA  0820               	movf	?___fttol^(0+256),w
 12310  1BDB  00E7               	movwf	?_scaleA10kPot^(0+256)
 12311  1BDC  0008               	return
 12312  1BDD                     __end_of_scaleA10kPot:	
 12313                           
 12314                           	psect	text26
 12315  192A                     __ptext26:	
 12316 ;; *************** function _scaleA100kPot *****************
 12317 ;; Defined at:
 12318 ;;		line 188 in file "user.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;  input           3   71[BANK2 ] int 
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;  pwm             3    0[BANK3 ] float 
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  2   71[BANK2 ] int 
 12325 ;; Registers used:
 12326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12332 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12333 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12335 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12336 ;;Total ram usage:       12 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    8
 12339 ;; This function calls:
 12340 ;;		___ftdiv
 12341 ;;		___ftmul
 12342 ;;		___fttol
 12343 ;;		_pow
 12344 ;; This function is called by:
 12345 ;;		_main
 12346 ;; This function uses a non-reentrant model
 12347 ;;
 12348                           
 12349                           
 12350                           ;psect for function _scaleA100kPot
 12351  192A                     _scaleA100kPot:	
 12352                           
 12353                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12354                           
 12355                           ;incstack = 0
 12356                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12357  192A  0022               	movlb	2	; select bank2
 12358  192B  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12359  192C  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12360  192D  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12361  192E  1D03               	skipz
 12362  192F  2936               	goto	l9172
 12363  1930  3000               	movlw	0
 12364  1931  00E7               	movwf	scaleA100kPot@input^(0+256)
 12365  1932  3080               	movlw	128
 12366  1933  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12367  1934  303F               	movlw	63
 12368  1935  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12369  1936                     l9172:	
 12370                           
 12371                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12372  1936  30C0               	movlw	192
 12373  1937  0021               	movlb	1	; select bank1
 12374  1938  00CE               	movwf	___ftdiv@f2^(0+128)
 12375  1939  307F               	movlw	127
 12376  193A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12377  193B  3044               	movlw	68
 12378  193C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12379  193D  0022               	movlb	2	; select bank2
 12380  193E  0867               	movf	scaleA100kPot@input^(0+256),w
 12381  193F  0021               	movlb	1	; select bank1
 12382  1940  00D1               	movwf	___ftdiv@f1^(0+128)
 12383  1941  0022               	movlb	2	; select bank2
 12384  1942  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12385  1943  0021               	movlb	1	; select bank1
 12386  1944  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12387  1945  0022               	movlb	2	; select bank2
 12388  1946  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12389  1947  0021               	movlb	1	; select bank1
 12390  1948  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12391  1949  319C  2474  3199   	fcall	___ftdiv
 12392  194C  0021               	movlb	1	; select bank1
 12393  194D  084E               	movf	?___ftdiv^(0+128),w
 12394  194E  0023               	movlb	3	; select bank3
 12395  194F  00EA               	movwf	_scaleA100kPot$2844^(0+384)
 12396  1950  0021               	movlb	1	; select bank1
 12397  1951  084F               	movf	(?___ftdiv+1)^(0+128),w
 12398  1952  0023               	movlb	3	; select bank3
 12399  1953  00EB               	movwf	(_scaleA100kPot$2844+1)^(0+384)
 12400  1954  0021               	movlb	1	; select bank1
 12401  1955  0850               	movf	(?___ftdiv+2)^(0+128),w
 12402  1956  0023               	movlb	3	; select bank3
 12403  1957  00EC               	movwf	(_scaleA100kPot$2844+2)^(0+384)
 12404                           
 12405                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12406  1958  3056               	movlw	86
 12407  1959  0022               	movlb	2	; select bank2
 12408  195A  00D8               	movwf	pow@y^(0+256)
 12409  195B  308E               	movlw	142
 12410  195C  00D9               	movwf	(pow@y+1)^(0+256)
 12411  195D  30BF               	movlw	191
 12412  195E  00DA               	movwf	(pow@y+2)^(0+256)
 12413  195F  0023               	movlb	3	; select bank3
 12414  1960  086A               	movf	_scaleA100kPot$2844^(0+384),w
 12415  1961  0022               	movlb	2	; select bank2
 12416  1962  00D5               	movwf	pow@x^(0+256)
 12417  1963  0023               	movlb	3	; select bank3
 12418  1964  086B               	movf	(_scaleA100kPot$2844+1)^(0+384),w
 12419  1965  0022               	movlb	2	; select bank2
 12420  1966  00D6               	movwf	(pow@x+1)^(0+256)
 12421  1967  0023               	movlb	3	; select bank3
 12422  1968  086C               	movf	(_scaleA100kPot$2844+2)^(0+384),w
 12423  1969  0022               	movlb	2	; select bank2
 12424  196A  00D7               	movwf	(pow@x+2)^(0+256)
 12425  196B  3191  212B  3199   	fcall	_pow
 12426  196E  0022               	movlb	2	; select bank2
 12427  196F  0855               	movf	?_pow^(0+256),w
 12428  1970  0023               	movlb	3	; select bank3
 12429  1971  00ED               	movwf	_scaleA100kPot$2845^(0+384)
 12430  1972  0022               	movlb	2	; select bank2
 12431  1973  0856               	movf	(?_pow+1)^(0+256),w
 12432  1974  0023               	movlb	3	; select bank3
 12433  1975  00EE               	movwf	(_scaleA100kPot$2845+1)^(0+384)
 12434  1976  0022               	movlb	2	; select bank2
 12435  1977  0857               	movf	(?_pow+2)^(0+256),w
 12436  1978  0023               	movlb	3	; select bank3
 12437  1979  00EF               	movwf	(_scaleA100kPot$2845+2)^(0+384)
 12438                           
 12439                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12440  197A  309F               	movlw	159
 12441  197B  0021               	movlb	1	; select bank1
 12442  197C  00AE               	movwf	___ftmul@f1^(0+128)
 12443  197D  3068               	movlw	104
 12444  197E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12445  197F  3040               	movlw	64
 12446  1980  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12447  1981  0023               	movlb	3	; select bank3
 12448  1982  086D               	movf	_scaleA100kPot$2845^(0+384),w
 12449  1983  0021               	movlb	1	; select bank1
 12450  1984  00B1               	movwf	___ftmul@f2^(0+128)
 12451  1985  0023               	movlb	3	; select bank3
 12452  1986  086E               	movf	(_scaleA100kPot$2845+1)^(0+384),w
 12453  1987  0021               	movlb	1	; select bank1
 12454  1988  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12455  1989  0023               	movlb	3	; select bank3
 12456  198A  086F               	movf	(_scaleA100kPot$2845+2)^(0+384),w
 12457  198B  0021               	movlb	1	; select bank1
 12458  198C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12459  198D  319E  267B  3199   	fcall	___ftmul
 12460  1990  0021               	movlb	1	; select bank1
 12461  1991  082E               	movf	?___ftmul^(0+128),w
 12462  1992  0023               	movlb	3	; select bank3
 12463  1993  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12464  1994  0021               	movlb	1	; select bank1
 12465  1995  082F               	movf	(?___ftmul+1)^(0+128),w
 12466  1996  0023               	movlb	3	; select bank3
 12467  1997  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12468  1998  0021               	movlb	1	; select bank1
 12469  1999  0830               	movf	(?___ftmul+2)^(0+128),w
 12470  199A  0023               	movlb	3	; select bank3
 12471  199B  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12472                           
 12473                           ;user.c: 192: return (int)(pwm);
 12474  199C  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12475  199D  0022               	movlb	2	; select bank2
 12476  199E  00A0               	movwf	___fttol@f1^(0+256)
 12477  199F  0023               	movlb	3	; select bank3
 12478  19A0  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12479  19A1  0022               	movlb	2	; select bank2
 12480  19A2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12481  19A3  0023               	movlb	3	; select bank3
 12482  19A4  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12483  19A5  0022               	movlb	2	; select bank2
 12484  19A6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12485  19A7  3199  21AF         	fcall	___fttol
 12486  19A9  0022               	movlb	2	; select bank2
 12487  19AA  0821               	movf	(?___fttol^(0+256)+1),w
 12488  19AB  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12489  19AC  0820               	movf	?___fttol^(0+256),w
 12490  19AD  00E7               	movwf	?_scaleA100kPot^(0+256)
 12491  19AE  0008               	return
 12492  19AF                     __end_of_scaleA100kPot:	
 12493                           
 12494                           	psect	text27
 12495  112B                     __ptext27:	
 12496 ;; *************** function _pow *****************
 12497 ;; Defined at:
 12498 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;  x               3   53[BANK2 ] int 
 12501 ;;  y               3   56[BANK2 ] int 
 12502 ;; Auto vars:     Size  Location     Type
 12503 ;;  yi              4   67[BANK2 ] unsigned long 
 12504 ;;  sign            1   66[BANK2 ] unsigned char 
 12505 ;; Return value:  Size  Location     Type
 12506 ;;                  3   53[BANK2 ] unsigned char 
 12507 ;; Registers used:
 12508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12509 ;; Tracked objects:
 12510 ;;		On entry : 0/0
 12511 ;;		On exit  : 0/0
 12512 ;;		Unchanged: 0/0
 12513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12514 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12515 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12516 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12517 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12518 ;;Total ram usage:       18 bytes
 12519 ;; Hardware stack levels used:    1
 12520 ;; Hardware stack levels required when called:    7
 12521 ;; This function calls:
 12522 ;;		___ftge
 12523 ;;		___ftmul
 12524 ;;		___ftneg
 12525 ;;		___fttol
 12526 ;;		___lltoft
 12527 ;;		_exp
 12528 ;;		_log
 12529 ;; This function is called by:
 12530 ;;		_scaleA100kPot
 12531 ;;		_scaleA10kPot
 12532 ;;		_scaleiA10kPot
 12533 ;;		_scaleiA100kPot
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _pow
 12539  112B                     _pow:	
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12543  112B  0022               	movlb	2	; select bank2
 12544  112C  01E2               	clrf	pow@sign^(0+256)
 12545  112D  0857               	movf	(pow@x+2)^(0+256),w
 12546  112E  0456               	iorwf	(pow@x+1)^(0+256),w
 12547  112F  0455               	iorwf	pow@x^(0+256),w
 12548  1130  1D03               	skipz
 12549  1131  2957               	goto	l8462
 12550  1132  3000               	movlw	0
 12551  1133  0021               	movlb	1	; select bank1
 12552  1134  00A0               	movwf	___ftge@ff1^(0+128)
 12553  1135  3000               	movlw	0
 12554  1136  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12555  1137  3000               	movlw	0
 12556  1138  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12557  1139  0022               	movlb	2	; select bank2
 12558  113A  0858               	movf	pow@y^(0+256),w
 12559  113B  0021               	movlb	1	; select bank1
 12560  113C  00A3               	movwf	___ftge@ff2^(0+128)
 12561  113D  0022               	movlb	2	; select bank2
 12562  113E  0859               	movf	(pow@y+1)^(0+256),w
 12563  113F  0021               	movlb	1	; select bank1
 12564  1140  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12565  1141  0022               	movlb	2	; select bank2
 12566  1142  085A               	movf	(pow@y+2)^(0+256),w
 12567  1143  0021               	movlb	1	; select bank1
 12568  1144  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12569  1145  31A0  20AA  3191   	fcall	___ftge
 12570  1148  1C03               	btfss	3,0
 12571  1149  294F               	goto	l2360
 12572  114A  3021               	movlw	33
 12573  114B  0024               	movlb	4	; select bank4
 12574  114C  00D1               	movwf	_errno^(0+512)
 12575  114D  3000               	movlw	0
 12576  114E  00D2               	movwf	(_errno^(0+512)+1)
 12577  114F                     l2360:	
 12578  114F  3000               	movlw	0
 12579  1150  0022               	movlb	2	; select bank2
 12580  1151  00D5               	movwf	?_pow^(0+256)
 12581  1152  3000               	movlw	0
 12582  1153  00D6               	movwf	(?_pow+1)^(0+256)
 12583  1154  3000               	movlw	0
 12584  1155  00D7               	movwf	(?_pow+2)^(0+256)
 12585  1156  0008               	return
 12586  1157                     l8462:	
 12587  1157  085A               	movf	(pow@y+2)^(0+256),w
 12588  1158  0459               	iorwf	(pow@y+1)^(0+256),w
 12589  1159  0458               	iorwf	pow@y^(0+256),w
 12590  115A  1D03               	skipz
 12591  115B  2963               	goto	l8468
 12592  115C  3000               	movlw	0
 12593  115D  00D5               	movwf	?_pow^(0+256)
 12594  115E  3080               	movlw	128
 12595  115F  00D6               	movwf	(?_pow+1)^(0+256)
 12596  1160  303F               	movlw	63
 12597  1161  00D7               	movwf	(?_pow+2)^(0+256)
 12598  1162  0008               	return
 12599  1163                     l8468:	
 12600  1163  0855               	movf	pow@x^(0+256),w
 12601  1164  0021               	movlb	1	; select bank1
 12602  1165  00A0               	movwf	___ftge@ff1^(0+128)
 12603  1166  0022               	movlb	2	; select bank2
 12604  1167  0856               	movf	(pow@x+1)^(0+256),w
 12605  1168  0021               	movlb	1	; select bank1
 12606  1169  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12607  116A  0022               	movlb	2	; select bank2
 12608  116B  0857               	movf	(pow@x+2)^(0+256),w
 12609  116C  0021               	movlb	1	; select bank1
 12610  116D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12611  116E  3000               	movlw	0
 12612  116F  00A3               	movwf	___ftge@ff2^(0+128)
 12613  1170  3000               	movlw	0
 12614  1171  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12615  1172  3000               	movlw	0
 12616  1173  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12617  1174  31A0  20AA  3191   	fcall	___ftge
 12618  1177  1803               	btfsc	3,0
 12619  1178  29DD               	goto	l8480
 12620  1179  0022               	movlb	2	; select bank2
 12621  117A  0858               	movf	pow@y^(0+256),w
 12622  117B  00A0               	movwf	___fttol@f1^(0+256)
 12623  117C  0859               	movf	(pow@y+1)^(0+256),w
 12624  117D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12625  117E  085A               	movf	(pow@y+2)^(0+256),w
 12626  117F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12627  1180  3199  21AF  3191   	fcall	___fttol
 12628  1183  0022               	movlb	2	; select bank2
 12629  1184  0823               	movf	(?___fttol+3)^(0+256),w
 12630  1185  00E6               	movwf	(pow@yi+3)^(0+256)
 12631  1186  0822               	movf	(?___fttol+2)^(0+256),w
 12632  1187  00E5               	movwf	(pow@yi+2)^(0+256)
 12633  1188  0821               	movf	(?___fttol+1)^(0+256),w
 12634  1189  00E4               	movwf	(pow@yi+1)^(0+256)
 12635  118A  0820               	movf	?___fttol^(0+256),w
 12636  118B  00E3               	movwf	pow@yi^(0+256)
 12637  118C  0866               	movf	(pow@yi+3)^(0+256),w
 12638  118D  0021               	movlb	1	; select bank1
 12639  118E  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12640  118F  0022               	movlb	2	; select bank2
 12641  1190  0865               	movf	(pow@yi+2)^(0+256),w
 12642  1191  0021               	movlb	1	; select bank1
 12643  1192  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12644  1193  0022               	movlb	2	; select bank2
 12645  1194  0864               	movf	(pow@yi+1)^(0+256),w
 12646  1195  0021               	movlb	1	; select bank1
 12647  1196  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12648  1197  0022               	movlb	2	; select bank2
 12649  1198  0863               	movf	pow@yi^(0+256),w
 12650  1199  0021               	movlb	1	; select bank1
 12651  119A  00A8               	movwf	___lltoft@c^(0+128)
 12652  119B  31AE  267F  3191   	fcall	___lltoft
 12653  119E  0022               	movlb	2	; select bank2
 12654  119F  085A               	movf	(pow@y+2)^(0+256),w
 12655  11A0  0021               	movlb	1	; select bank1
 12656  11A1  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12657  11A2  1D03               	skipz
 12658  11A3  29AE               	goto	u8985
 12659  11A4  0022               	movlb	2	; select bank2
 12660  11A5  0859               	movf	(pow@y+1)^(0+256),w
 12661  11A6  0021               	movlb	1	; select bank1
 12662  11A7  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12663  11A8  1D03               	skipz
 12664  11A9  29AE               	goto	u8985
 12665  11AA  0022               	movlb	2	; select bank2
 12666  11AB  0858               	movf	pow@y^(0+256),w
 12667  11AC  0021               	movlb	1	; select bank1
 12668  11AD  0628               	xorwf	?___lltoft^(0+128),w
 12669  11AE                     u8985:	
 12670  11AE  1903               	skipnz
 12671  11AF  29BD               	goto	l8476
 12672  11B0  3021               	movlw	33
 12673  11B1  0024               	movlb	4	; select bank4
 12674  11B2  00D1               	movwf	_errno^(0+512)
 12675  11B3  3000               	movlw	0
 12676  11B4  00D2               	movwf	(_errno^(0+512)+1)
 12677  11B5  3000               	movlw	0
 12678  11B6  0022               	movlb	2	; select bank2
 12679  11B7  00D5               	movwf	?_pow^(0+256)
 12680  11B8  3000               	movlw	0
 12681  11B9  00D6               	movwf	(?_pow+1)^(0+256)
 12682  11BA  3000               	movlw	0
 12683  11BB  00D7               	movwf	(?_pow+2)^(0+256)
 12684  11BC  0008               	return
 12685  11BD                     l8476:	
 12686  11BD  0022               	movlb	2	; select bank2
 12687  11BE  0863               	movf	pow@yi^(0+256),w
 12688  11BF  3901               	andlw	1
 12689  11C0  00DB               	movwf	??_pow^(0+256)
 12690  11C1  085B               	movf	??_pow^(0+256),w
 12691  11C2  00E2               	movwf	pow@sign^(0+256)
 12692  11C3  0855               	movf	pow@x^(0+256),w
 12693  11C4  0021               	movlb	1	; select bank1
 12694  11C5  00BE               	movwf	___ftneg@f1^(0+128)
 12695  11C6  0022               	movlb	2	; select bank2
 12696  11C7  0856               	movf	(pow@x+1)^(0+256),w
 12697  11C8  0021               	movlb	1	; select bank1
 12698  11C9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12699  11CA  0022               	movlb	2	; select bank2
 12700  11CB  0857               	movf	(pow@x+2)^(0+256),w
 12701  11CC  0021               	movlb	1	; select bank1
 12702  11CD  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12703  11CE  31AC  24F8  3191   	fcall	___ftneg
 12704  11D1  0021               	movlb	1	; select bank1
 12705  11D2  083E               	movf	?___ftneg^(0+128),w
 12706  11D3  0022               	movlb	2	; select bank2
 12707  11D4  00D5               	movwf	pow@x^(0+256)
 12708  11D5  0021               	movlb	1	; select bank1
 12709  11D6  083F               	movf	(?___ftneg+1)^(0+128),w
 12710  11D7  0022               	movlb	2	; select bank2
 12711  11D8  00D6               	movwf	(pow@x+1)^(0+256)
 12712  11D9  0021               	movlb	1	; select bank1
 12713  11DA  0840               	movf	(?___ftneg+2)^(0+128),w
 12714  11DB  0022               	movlb	2	; select bank2
 12715  11DC  00D7               	movwf	(pow@x+2)^(0+256)
 12716  11DD                     l8480:	
 12717  11DD  0022               	movlb	2	; select bank2
 12718  11DE  0855               	movf	pow@x^(0+256),w
 12719  11DF  00BE               	movwf	log@x^(0+256)
 12720  11E0  0856               	movf	(pow@x+1)^(0+256),w
 12721  11E1  00BF               	movwf	(log@x+1)^(0+256)
 12722  11E2  0857               	movf	(pow@x+2)^(0+256),w
 12723  11E3  00C0               	movwf	(log@x+2)^(0+256)
 12724  11E4  319F  272F  3191   	fcall	_log
 12725  11E7  0022               	movlb	2	; select bank2
 12726  11E8  083E               	movf	?_log^(0+256),w
 12727  11E9  00DC               	movwf	_pow$2857^(0+256)
 12728  11EA  083F               	movf	(?_log+1)^(0+256),w
 12729  11EB  00DD               	movwf	(_pow$2857+1)^(0+256)
 12730  11EC  0840               	movf	(?_log+2)^(0+256),w
 12731  11ED  00DE               	movwf	(_pow$2857+2)^(0+256)
 12732  11EE  0858               	movf	pow@y^(0+256),w
 12733  11EF  0021               	movlb	1	; select bank1
 12734  11F0  00AE               	movwf	___ftmul@f1^(0+128)
 12735  11F1  0022               	movlb	2	; select bank2
 12736  11F2  0859               	movf	(pow@y+1)^(0+256),w
 12737  11F3  0021               	movlb	1	; select bank1
 12738  11F4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12739  11F5  0022               	movlb	2	; select bank2
 12740  11F6  085A               	movf	(pow@y+2)^(0+256),w
 12741  11F7  0021               	movlb	1	; select bank1
 12742  11F8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12743  11F9  0022               	movlb	2	; select bank2
 12744  11FA  085C               	movf	_pow$2857^(0+256),w
 12745  11FB  0021               	movlb	1	; select bank1
 12746  11FC  00B1               	movwf	___ftmul@f2^(0+128)
 12747  11FD  0022               	movlb	2	; select bank2
 12748  11FE  085D               	movf	(_pow$2857+1)^(0+256),w
 12749  11FF  0021               	movlb	1	; select bank1
 12750  1200  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12751  1201  0022               	movlb	2	; select bank2
 12752  1202  085E               	movf	(_pow$2857+2)^(0+256),w
 12753  1203  0021               	movlb	1	; select bank1
 12754  1204  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12755  1205  319E  267B  3191   	fcall	___ftmul
 12756  1208  0021               	movlb	1	; select bank1
 12757  1209  082E               	movf	?___ftmul^(0+128),w
 12758  120A  0022               	movlb	2	; select bank2
 12759  120B  00DF               	movwf	_pow$2858^(0+256)
 12760  120C  0021               	movlb	1	; select bank1
 12761  120D  082F               	movf	(?___ftmul+1)^(0+128),w
 12762  120E  0022               	movlb	2	; select bank2
 12763  120F  00E0               	movwf	(_pow$2858+1)^(0+256)
 12764  1210  0021               	movlb	1	; select bank1
 12765  1211  0830               	movf	(?___ftmul+2)^(0+128),w
 12766  1212  0022               	movlb	2	; select bank2
 12767  1213  00E1               	movwf	(_pow$2858+2)^(0+256)
 12768  1214  085F               	movf	_pow$2858^(0+256),w
 12769  1215  00C8               	movwf	exp@x^(0+256)
 12770  1216  0860               	movf	(_pow$2858+1)^(0+256),w
 12771  1217  00C9               	movwf	(exp@x+1)^(0+256)
 12772  1218  0861               	movf	(_pow$2858+2)^(0+256),w
 12773  1219  00CA               	movwf	(exp@x+2)^(0+256)
 12774  121A  3193  2363  3191   	fcall	_exp
 12775  121D  0022               	movlb	2	; select bank2
 12776  121E  0848               	movf	?_exp^(0+256),w
 12777  121F  00D5               	movwf	pow@x^(0+256)
 12778  1220  0849               	movf	(?_exp+1)^(0+256),w
 12779  1221  00D6               	movwf	(pow@x+1)^(0+256)
 12780  1222  084A               	movf	(?_exp+2)^(0+256),w
 12781  1223  00D7               	movwf	(pow@x+2)^(0+256)
 12782  1224  0862               	movf	pow@sign^(0+256),w
 12783  1225  1903               	btfsc	3,2
 12784  1226  0008               	return
 12785  1227  0855               	movf	pow@x^(0+256),w
 12786  1228  0021               	movlb	1	; select bank1
 12787  1229  00BE               	movwf	___ftneg@f1^(0+128)
 12788  122A  0022               	movlb	2	; select bank2
 12789  122B  0856               	movf	(pow@x+1)^(0+256),w
 12790  122C  0021               	movlb	1	; select bank1
 12791  122D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12792  122E  0022               	movlb	2	; select bank2
 12793  122F  0857               	movf	(pow@x+2)^(0+256),w
 12794  1230  0021               	movlb	1	; select bank1
 12795  1231  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12796  1232  31AC  24F8         	fcall	___ftneg
 12797  1234  0021               	movlb	1	; select bank1
 12798  1235  083E               	movf	?___ftneg^(0+128),w
 12799  1236  0022               	movlb	2	; select bank2
 12800  1237  00D5               	movwf	?_pow^(0+256)
 12801  1238  0021               	movlb	1	; select bank1
 12802  1239  083F               	movf	(?___ftneg+1)^(0+128),w
 12803  123A  0022               	movlb	2	; select bank2
 12804  123B  00D6               	movwf	(?_pow+1)^(0+256)
 12805  123C  0021               	movlb	1	; select bank1
 12806  123D  0840               	movf	(?___ftneg+2)^(0+128),w
 12807  123E  0022               	movlb	2	; select bank2
 12808  123F  00D7               	movwf	(?_pow+2)^(0+256)
 12809  1240  0008               	return
 12810  1241                     __end_of_pow:	
 12811                           
 12812                           	psect	text28
 12813  1F2F                     __ptext28:	
 12814 ;; *************** function _log *****************
 12815 ;; Defined at:
 12816 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;  x               3   30[BANK2 ] unsigned char 
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;  exponent        2   34[BANK2 ] int 
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  3   30[BANK2 ] int 
 12823 ;; Registers used:
 12824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12830 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12831 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12832 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12833 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12834 ;;Total ram usage:        6 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; Hardware stack levels required when called:    6
 12837 ;; This function calls:
 12838 ;;		___awtoft
 12839 ;;		___ftadd
 12840 ;;		___ftge
 12841 ;;		___ftmul
 12842 ;;		_eval_poly
 12843 ;;		_frexp
 12844 ;; This function is called by:
 12845 ;;		_pow
 12846 ;; This function uses a non-reentrant model
 12847 ;;
 12848                           
 12849                           
 12850                           ;psect for function _log
 12851  1F2F                     _log:	
 12852                           
 12853                           ;incstack = 0
 12854                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12855  1F2F  0022               	movlb	2	; select bank2
 12856  1F30  083E               	movf	log@x^(0+256),w
 12857  1F31  0021               	movlb	1	; select bank1
 12858  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12859  1F33  0022               	movlb	2	; select bank2
 12860  1F34  083F               	movf	(log@x+1)^(0+256),w
 12861  1F35  0021               	movlb	1	; select bank1
 12862  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12863  1F37  0022               	movlb	2	; select bank2
 12864  1F38  0840               	movf	(log@x+2)^(0+256),w
 12865  1F39  0021               	movlb	1	; select bank1
 12866  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12867  1F3B  3000               	movlw	0
 12868  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12869  1F3D  3000               	movlw	0
 12870  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12871  1F3F  3000               	movlw	0
 12872  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12873  1F41  31A0  20AA  319F   	fcall	___ftge
 12874  1F44  1803               	btfsc	3,0
 12875  1F45  2F53               	goto	l8334
 12876  1F46  3021               	movlw	33
 12877  1F47  0024               	movlb	4	; select bank4
 12878  1F48  00D1               	movwf	_errno^(0+512)
 12879  1F49  3000               	movlw	0
 12880  1F4A  00D2               	movwf	(_errno^(0+512)+1)
 12881  1F4B  3000               	movlw	0
 12882  1F4C  0022               	movlb	2	; select bank2
 12883  1F4D  00BE               	movwf	?_log^(0+256)
 12884  1F4E  3000               	movlw	0
 12885  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12886  1F50  3000               	movlw	0
 12887  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12888  1F52  0008               	return
 12889  1F53                     l8334:	
 12890  1F53  0022               	movlb	2	; select bank2
 12891  1F54  0840               	movf	(log@x+2)^(0+256),w
 12892  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12893  1F56  043E               	iorwf	log@x^(0+256),w
 12894  1F57  1D03               	skipz
 12895  1F58  2F66               	goto	l8340
 12896  1F59  3022               	movlw	34
 12897  1F5A  0024               	movlb	4	; select bank4
 12898  1F5B  00D1               	movwf	_errno^(0+512)
 12899  1F5C  3000               	movlw	0
 12900  1F5D  00D2               	movwf	(_errno^(0+512)+1)
 12901  1F5E  3000               	movlw	0
 12902  1F5F  0022               	movlb	2	; select bank2
 12903  1F60  00BE               	movwf	?_log^(0+256)
 12904  1F61  3000               	movlw	0
 12905  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12906  1F63  3000               	movlw	0
 12907  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12908  1F65  0008               	return
 12909  1F66                     l8340:	
 12910  1F66  3000               	movlw	0
 12911  1F67  0021               	movlb	1	; select bank1
 12912  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12913  1F69  3080               	movlw	128
 12914  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12915  1F6B  30BF               	movlw	191
 12916  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12917  1F6D  3000               	movlw	0
 12918  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12919  1F6F  3000               	movlw	0
 12920  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12921  1F71  3040               	movlw	64
 12922  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12923  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12924  1F74  0022               	movlb	2	; select bank2
 12925  1F75  00C1               	movwf	??_log^(0+256)
 12926  1F76  0841               	movf	??_log^(0+256),w
 12927  1F77  0021               	movlb	1	; select bank1
 12928  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12929  1F79  0022               	movlb	2	; select bank2
 12930  1F7A  083E               	movf	log@x^(0+256),w
 12931  1F7B  0021               	movlb	1	; select bank1
 12932  1F7C  00A0               	movwf	frexp@value^(0+128)
 12933  1F7D  0022               	movlb	2	; select bank2
 12934  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12935  1F7F  0021               	movlb	1	; select bank1
 12936  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12937  1F81  0022               	movlb	2	; select bank2
 12938  1F82  0840               	movf	(log@x+2)^(0+256),w
 12939  1F83  0021               	movlb	1	; select bank1
 12940  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12941  1F85  31A1  219D  319F   	fcall	_frexp
 12942  1F88  0021               	movlb	1	; select bank1
 12943  1F89  0820               	movf	?_frexp^(0+128),w
 12944  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12945  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12946  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12947  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12948  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12949  1F8F  319E  267B  319F   	fcall	___ftmul
 12950  1F92  0021               	movlb	1	; select bank1
 12951  1F93  082E               	movf	?___ftmul^(0+128),w
 12952  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12953  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12954  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12955  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12956  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12957  1F99  3190  2035  319F   	fcall	___ftadd
 12958  1F9C  0021               	movlb	1	; select bank1
 12959  1F9D  0841               	movf	?___ftadd^(0+128),w
 12960  1F9E  0022               	movlb	2	; select bank2
 12961  1F9F  00BE               	movwf	log@x^(0+256)
 12962  1FA0  0021               	movlb	1	; select bank1
 12963  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12964  1FA2  0022               	movlb	2	; select bank2
 12965  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12966  1FA4  0021               	movlb	1	; select bank1
 12967  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12968  1FA6  0022               	movlb	2	; select bank2
 12969  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12970  1FA8  30FF               	movlw	255
 12971  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12972  1FAA  30FF               	movlw	255
 12973  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12974  1FAC  083E               	movf	log@x^(0+256),w
 12975  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12976  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12977  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12978  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12979  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12980  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12981  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12982  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12983  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12984  1FB6  3008               	movlw	8
 12985  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12986  1FB8  3000               	movlw	0
 12987  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12988  1FBA  31A6  261B  319F   	fcall	_eval_poly
 12989  1FBD  0022               	movlb	2	; select bank2
 12990  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12991  1FBF  00BE               	movwf	log@x^(0+256)
 12992  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12993  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12994  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12995  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12996  1FC4  083E               	movf	log@x^(0+256),w
 12997  1FC5  0021               	movlb	1	; select bank1
 12998  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12999  1FC7  0022               	movlb	2	; select bank2
 13000  1FC8  083F               	movf	(log@x+1)^(0+256),w
 13001  1FC9  0021               	movlb	1	; select bank1
 13002  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13003  1FCB  0022               	movlb	2	; select bank2
 13004  1FCC  0840               	movf	(log@x+2)^(0+256),w
 13005  1FCD  0021               	movlb	1	; select bank1
 13006  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13007  1FCF  3072               	movlw	114
 13008  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 13009  1FD1  3031               	movlw	49
 13010  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13011  1FD3  303F               	movlw	63
 13012  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13013  1FD5  0022               	movlb	2	; select bank2
 13014  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 13015  1FD7  0021               	movlb	1	; select bank1
 13016  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13017  1FD9  0022               	movlb	2	; select bank2
 13018  1FDA  0842               	movf	log@exponent^(0+256),w
 13019  1FDB  0021               	movlb	1	; select bank1
 13020  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 13021  1FDD  31AE  263A  319F   	fcall	___awtoft
 13022  1FE0  0021               	movlb	1	; select bank1
 13023  1FE1  0828               	movf	?___awtoft^(0+128),w
 13024  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 13025  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 13026  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13027  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 13028  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13029  1FE7  319E  267B  319F   	fcall	___ftmul
 13030  1FEA  0021               	movlb	1	; select bank1
 13031  1FEB  082E               	movf	?___ftmul^(0+128),w
 13032  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 13033  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 13034  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13035  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 13036  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13037  1FF1  3190  2035         	fcall	___ftadd
 13038  1FF3  0021               	movlb	1	; select bank1
 13039  1FF4  0841               	movf	?___ftadd^(0+128),w
 13040  1FF5  0022               	movlb	2	; select bank2
 13041  1FF6  00BE               	movwf	?_log^(0+256)
 13042  1FF7  0021               	movlb	1	; select bank1
 13043  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 13044  1FF9  0022               	movlb	2	; select bank2
 13045  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 13046  1FFB  0021               	movlb	1	; select bank1
 13047  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 13048  1FFD  0022               	movlb	2	; select bank2
 13049  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 13050  1FFF  0008               	return
 13051  2000                     __end_of_log:	
 13052                           
 13053                           	psect	text29
 13054  1363                     __ptext29:	
 13055 ;; *************** function _exp *****************
 13056 ;; Defined at:
 13057 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  x               3   40[BANK2 ] int 
 13060 ;; Auto vars:     Size  Location     Type
 13061 ;;  exponent        2   50[BANK2 ] int 
 13062 ;;  sign            1   52[BANK2 ] unsigned char 
 13063 ;; Return value:  Size  Location     Type
 13064 ;;                  3   40[BANK2 ] unsigned char 
 13065 ;; Registers used:
 13066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13072 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13073 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13074 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13075 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13076 ;;Total ram usage:       13 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    6
 13079 ;; This function calls:
 13080 ;;		___awtoft
 13081 ;;		___ftdiv
 13082 ;;		___ftge
 13083 ;;		___ftmul
 13084 ;;		___ftneg
 13085 ;;		___ftsub
 13086 ;;		___fttol
 13087 ;;		_eval_poly
 13088 ;;		_floor
 13089 ;;		_ldexp
 13090 ;; This function is called by:
 13091 ;;		_pow
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           
 13096                           ;psect for function _exp
 13097  1363                     _exp:	
 13098                           
 13099                           ;incstack = 0
 13100                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13101  1363  0022               	movlb	2	; select bank2
 13102  1364  084A               	movf	(exp@x+2)^(0+256),w
 13103  1365  0449               	iorwf	(exp@x+1)^(0+256),w
 13104  1366  0448               	iorwf	exp@x^(0+256),w
 13105  1367  1D03               	skipz
 13106  1368  2B70               	goto	l8356
 13107  1369  3000               	movlw	0
 13108  136A  00C8               	movwf	?_exp^(0+256)
 13109  136B  3080               	movlw	128
 13110  136C  00C9               	movwf	(?_exp+1)^(0+256)
 13111  136D  303F               	movlw	63
 13112  136E  00CA               	movwf	(?_exp+2)^(0+256)
 13113  136F  0008               	return
 13114  1370                     l8356:	
 13115  1370  3072               	movlw	114
 13116  1371  0021               	movlb	1	; select bank1
 13117  1372  00A0               	movwf	___ftge@ff1^(0+128)
 13118  1373  3031               	movlw	49
 13119  1374  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13120  1375  3044               	movlw	68
 13121  1376  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13122  1377  0022               	movlb	2	; select bank2
 13123  1378  0848               	movf	exp@x^(0+256),w
 13124  1379  0021               	movlb	1	; select bank1
 13125  137A  00A3               	movwf	___ftge@ff2^(0+128)
 13126  137B  0022               	movlb	2	; select bank2
 13127  137C  0849               	movf	(exp@x+1)^(0+256),w
 13128  137D  0021               	movlb	1	; select bank1
 13129  137E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13130  137F  0022               	movlb	2	; select bank2
 13131  1380  084A               	movf	(exp@x+2)^(0+256),w
 13132  1381  0021               	movlb	1	; select bank1
 13133  1382  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13134  1383  31A0  20AA  3193   	fcall	___ftge
 13135  1386  1803               	btfsc	3,0
 13136  1387  2B95               	goto	l8366
 13137  1388  3022               	movlw	34
 13138  1389  0024               	movlb	4	; select bank4
 13139  138A  00D1               	movwf	_errno^(0+512)
 13140  138B  3000               	movlw	0
 13141  138C  00D2               	movwf	(_errno^(0+512)+1)
 13142  138D  30FF               	movlw	255
 13143  138E  0022               	movlb	2	; select bank2
 13144  138F  00C8               	movwf	?_exp^(0+256)
 13145  1390  307F               	movlw	127
 13146  1391  00C9               	movwf	(?_exp+1)^(0+256)
 13147  1392  307F               	movlw	127
 13148  1393  00CA               	movwf	(?_exp+2)^(0+256)
 13149  1394  0008               	return
 13150  1395                     l8366:	
 13151  1395  0022               	movlb	2	; select bank2
 13152  1396  0848               	movf	exp@x^(0+256),w
 13153  1397  0021               	movlb	1	; select bank1
 13154  1398  00A0               	movwf	___ftge@ff1^(0+128)
 13155  1399  0022               	movlb	2	; select bank2
 13156  139A  0849               	movf	(exp@x+1)^(0+256),w
 13157  139B  0021               	movlb	1	; select bank1
 13158  139C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13159  139D  0022               	movlb	2	; select bank2
 13160  139E  084A               	movf	(exp@x+2)^(0+256),w
 13161  139F  0021               	movlb	1	; select bank1
 13162  13A0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13163  13A1  3049               	movlw	73
 13164  13A2  00A3               	movwf	___ftge@ff2^(0+128)
 13165  13A3  303A               	movlw	58
 13166  13A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13167  13A5  30C4               	movlw	196
 13168  13A6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13169  13A7  31A0  20AA  3193   	fcall	___ftge
 13170  13AA  1803               	btfsc	3,0
 13171  13AB  2BB9               	goto	l8372
 13172  13AC  3022               	movlw	34
 13173  13AD  0024               	movlb	4	; select bank4
 13174  13AE  00D1               	movwf	_errno^(0+512)
 13175  13AF  3000               	movlw	0
 13176  13B0  00D2               	movwf	(_errno^(0+512)+1)
 13177  13B1  3000               	movlw	0
 13178  13B2  0022               	movlb	2	; select bank2
 13179  13B3  00C8               	movwf	?_exp^(0+256)
 13180  13B4  3000               	movlw	0
 13181  13B5  00C9               	movwf	(?_exp+1)^(0+256)
 13182  13B6  3000               	movlw	0
 13183  13B7  00CA               	movwf	(?_exp+2)^(0+256)
 13184  13B8  0008               	return
 13185  13B9                     l8372:	
 13186  13B9  0022               	movlb	2	; select bank2
 13187  13BA  0848               	movf	exp@x^(0+256),w
 13188  13BB  0021               	movlb	1	; select bank1
 13189  13BC  00A0               	movwf	___ftge@ff1^(0+128)
 13190  13BD  0022               	movlb	2	; select bank2
 13191  13BE  0849               	movf	(exp@x+1)^(0+256),w
 13192  13BF  0021               	movlb	1	; select bank1
 13193  13C0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13194  13C1  0022               	movlb	2	; select bank2
 13195  13C2  084A               	movf	(exp@x+2)^(0+256),w
 13196  13C3  0021               	movlb	1	; select bank1
 13197  13C4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13198  13C5  3000               	movlw	0
 13199  13C6  00A3               	movwf	___ftge@ff2^(0+128)
 13200  13C7  3000               	movlw	0
 13201  13C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13202  13C9  3000               	movlw	0
 13203  13CA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13204  13CB  31A0  20AA  3193   	fcall	___ftge
 13205  13CE  1803               	btfsc	3,0
 13206  13CF  2BD2               	goto	u8870
 13207  13D0  3001               	movlw	1
 13208  13D1  2BD3               	goto	u8880
 13209  13D2                     u8870:	
 13210  13D2  3000               	movlw	0
 13211  13D3                     u8880:	
 13212  13D3  0022               	movlb	2	; select bank2
 13213  13D4  00CB               	movwf	??_exp^(0+256)
 13214  13D5  084B               	movf	??_exp^(0+256),w
 13215  13D6  00D4               	movwf	exp@sign^(0+256)
 13216  13D7  0854               	movf	exp@sign^(0+256),w
 13217  13D8  1903               	btfsc	3,2
 13218  13D9  2BF4               	goto	l8378
 13219  13DA  0848               	movf	exp@x^(0+256),w
 13220  13DB  0021               	movlb	1	; select bank1
 13221  13DC  00BE               	movwf	___ftneg@f1^(0+128)
 13222  13DD  0022               	movlb	2	; select bank2
 13223  13DE  0849               	movf	(exp@x+1)^(0+256),w
 13224  13DF  0021               	movlb	1	; select bank1
 13225  13E0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13226  13E1  0022               	movlb	2	; select bank2
 13227  13E2  084A               	movf	(exp@x+2)^(0+256),w
 13228  13E3  0021               	movlb	1	; select bank1
 13229  13E4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13230  13E5  31AC  24F8  3193   	fcall	___ftneg
 13231  13E8  0021               	movlb	1	; select bank1
 13232  13E9  083E               	movf	?___ftneg^(0+128),w
 13233  13EA  0022               	movlb	2	; select bank2
 13234  13EB  00C8               	movwf	exp@x^(0+256)
 13235  13EC  0021               	movlb	1	; select bank1
 13236  13ED  083F               	movf	(?___ftneg+1)^(0+128),w
 13237  13EE  0022               	movlb	2	; select bank2
 13238  13EF  00C9               	movwf	(exp@x+1)^(0+256)
 13239  13F0  0021               	movlb	1	; select bank1
 13240  13F1  0840               	movf	(?___ftneg+2)^(0+128),w
 13241  13F2  0022               	movlb	2	; select bank2
 13242  13F3  00CA               	movwf	(exp@x+2)^(0+256)
 13243  13F4                     l8378:	
 13244  13F4  30AA               	movlw	170
 13245  13F5  0021               	movlb	1	; select bank1
 13246  13F6  00AE               	movwf	___ftmul@f1^(0+128)
 13247  13F7  30B8               	movlw	184
 13248  13F8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13249  13F9  303F               	movlw	63
 13250  13FA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13251  13FB  0022               	movlb	2	; select bank2
 13252  13FC  0848               	movf	exp@x^(0+256),w
 13253  13FD  0021               	movlb	1	; select bank1
 13254  13FE  00B1               	movwf	___ftmul@f2^(0+128)
 13255  13FF  0022               	movlb	2	; select bank2
 13256  1400  0849               	movf	(exp@x+1)^(0+256),w
 13257  1401  0021               	movlb	1	; select bank1
 13258  1402  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13259  1403  0022               	movlb	2	; select bank2
 13260  1404  084A               	movf	(exp@x+2)^(0+256),w
 13261  1405  0021               	movlb	1	; select bank1
 13262  1406  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13263  1407  319E  267B  3193   	fcall	___ftmul
 13264  140A  0021               	movlb	1	; select bank1
 13265  140B  082E               	movf	?___ftmul^(0+128),w
 13266  140C  0022               	movlb	2	; select bank2
 13267  140D  00C8               	movwf	exp@x^(0+256)
 13268  140E  0021               	movlb	1	; select bank1
 13269  140F  082F               	movf	(?___ftmul+1)^(0+128),w
 13270  1410  0022               	movlb	2	; select bank2
 13271  1411  00C9               	movwf	(exp@x+1)^(0+256)
 13272  1412  0021               	movlb	1	; select bank1
 13273  1413  0830               	movf	(?___ftmul+2)^(0+128),w
 13274  1414  0022               	movlb	2	; select bank2
 13275  1415  00CA               	movwf	(exp@x+2)^(0+256)
 13276  1416  0848               	movf	exp@x^(0+256),w
 13277  1417  00AE               	movwf	floor@x^(0+256)
 13278  1418  0849               	movf	(exp@x+1)^(0+256),w
 13279  1419  00AF               	movwf	(floor@x+1)^(0+256)
 13280  141A  084A               	movf	(exp@x+2)^(0+256),w
 13281  141B  00B0               	movwf	(floor@x+2)^(0+256)
 13282  141C  319D  25C8  3193   	fcall	_floor
 13283  141F  0022               	movlb	2	; select bank2
 13284  1420  082E               	movf	?_floor^(0+256),w
 13285  1421  00CC               	movwf	_exp$2860^(0+256)
 13286  1422  082F               	movf	(?_floor+1)^(0+256),w
 13287  1423  00CD               	movwf	(_exp$2860+1)^(0+256)
 13288  1424  0830               	movf	(?_floor+2)^(0+256),w
 13289  1425  00CE               	movwf	(_exp$2860+2)^(0+256)
 13290  1426  084C               	movf	_exp$2860^(0+256),w
 13291  1427  00A0               	movwf	___fttol@f1^(0+256)
 13292  1428  084D               	movf	(_exp$2860+1)^(0+256),w
 13293  1429  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13294  142A  084E               	movf	(_exp$2860+2)^(0+256),w
 13295  142B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13296  142C  3199  21AF  3193   	fcall	___fttol
 13297  142F  0022               	movlb	2	; select bank2
 13298  1430  0821               	movf	(?___fttol^(0+256)+1),w
 13299  1431  00D3               	movwf	(exp@exponent+1)^(0+256)
 13300  1432  0820               	movf	?___fttol^(0+256),w
 13301  1433  00D2               	movwf	exp@exponent^(0+256)
 13302  1434  0853               	movf	(exp@exponent+1)^(0+256),w
 13303  1435  0021               	movlb	1	; select bank1
 13304  1436  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13305  1437  0022               	movlb	2	; select bank2
 13306  1438  0852               	movf	exp@exponent^(0+256),w
 13307  1439  0021               	movlb	1	; select bank1
 13308  143A  00A8               	movwf	___awtoft@c^(0+128)
 13309  143B  31AE  263A  3193   	fcall	___awtoft
 13310  143E  0021               	movlb	1	; select bank1
 13311  143F  0828               	movf	?___awtoft^(0+128),w
 13312  1440  0022               	movlb	2	; select bank2
 13313  1441  00B7               	movwf	___ftsub@f2^(0+256)
 13314  1442  0021               	movlb	1	; select bank1
 13315  1443  0829               	movf	(?___awtoft+1)^(0+128),w
 13316  1444  0022               	movlb	2	; select bank2
 13317  1445  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13318  1446  0021               	movlb	1	; select bank1
 13319  1447  082A               	movf	(?___awtoft+2)^(0+128),w
 13320  1448  0022               	movlb	2	; select bank2
 13321  1449  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13322  144A  0848               	movf	exp@x^(0+256),w
 13323  144B  00BA               	movwf	___ftsub@f1^(0+256)
 13324  144C  0849               	movf	(exp@x+1)^(0+256),w
 13325  144D  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13326  144E  084A               	movf	(exp@x+2)^(0+256),w
 13327  144F  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13328  1450  31AE  26D5  3193   	fcall	___ftsub
 13329  1453  0022               	movlb	2	; select bank2
 13330  1454  0837               	movf	?___ftsub^(0+256),w
 13331  1455  00C8               	movwf	exp@x^(0+256)
 13332  1456  0838               	movf	(?___ftsub+1)^(0+256),w
 13333  1457  00C9               	movwf	(exp@x+1)^(0+256)
 13334  1458  0839               	movf	(?___ftsub+2)^(0+256),w
 13335  1459  00CA               	movwf	(exp@x+2)^(0+256)
 13336  145A  0848               	movf	exp@x^(0+256),w
 13337  145B  00B4               	movwf	eval_poly@x^(0+256)
 13338  145C  0849               	movf	(exp@x+1)^(0+256),w
 13339  145D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13340  145E  084A               	movf	(exp@x+2)^(0+256),w
 13341  145F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13342  1460  3000               	movlw	low (exp@coeff| (0+32768))
 13343  1461  00B7               	movwf	eval_poly@d^(0+256)
 13344  1462  30A8               	movlw	high (exp@coeff| (0+32768))
 13345  1463  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13346  1464  3009               	movlw	9
 13347  1465  00B9               	movwf	eval_poly@n^(0+256)
 13348  1466  3000               	movlw	0
 13349  1467  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13350  1468  31A6  261B  3193   	fcall	_eval_poly
 13351  146B  0022               	movlb	2	; select bank2
 13352  146C  0834               	movf	?_eval_poly^(0+256),w
 13353  146D  00BE               	movwf	ldexp@value^(0+256)
 13354  146E  0835               	movf	(?_eval_poly+1)^(0+256),w
 13355  146F  00BF               	movwf	(ldexp@value+1)^(0+256)
 13356  1470  0836               	movf	(?_eval_poly+2)^(0+256),w
 13357  1471  00C0               	movwf	(ldexp@value+2)^(0+256)
 13358  1472  0853               	movf	(exp@exponent+1)^(0+256),w
 13359  1473  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13360  1474  0852               	movf	exp@exponent^(0+256),w
 13361  1475  00C1               	movwf	ldexp@newexp^(0+256)
 13362  1476  319B  23DD  3193   	fcall	_ldexp
 13363  1479  0022               	movlb	2	; select bank2
 13364  147A  083E               	movf	?_ldexp^(0+256),w
 13365  147B  00C8               	movwf	exp@x^(0+256)
 13366  147C  083F               	movf	(?_ldexp+1)^(0+256),w
 13367  147D  00C9               	movwf	(exp@x+1)^(0+256)
 13368  147E  0840               	movf	(?_ldexp+2)^(0+256),w
 13369  147F  00CA               	movwf	(exp@x+2)^(0+256)
 13370  1480  0854               	movf	exp@sign^(0+256),w
 13371  1481  1903               	btfsc	3,2
 13372  1482  0008               	return
 13373  1483  30FF               	movlw	255
 13374  1484  00CF               	movwf	_exp$2611^(0+256)
 13375  1485  307F               	movlw	127
 13376  1486  00D0               	movwf	(_exp$2611+1)^(0+256)
 13377  1487  307F               	movlw	127
 13378  1488  00D1               	movwf	(_exp$2611+2)^(0+256)
 13379  1489  084A               	movf	(exp@x+2)^(0+256),w
 13380  148A  0651               	xorwf	(_exp$2611+2)^(0+256),w
 13381  148B  1D03               	skipz
 13382  148C  2C93               	goto	u8915
 13383  148D  0849               	movf	(exp@x+1)^(0+256),w
 13384  148E  0650               	xorwf	(_exp$2611+1)^(0+256),w
 13385  148F  1D03               	skipz
 13386  1490  2C93               	goto	u8915
 13387  1491  0848               	movf	exp@x^(0+256),w
 13388  1492  064F               	xorwf	_exp$2611^(0+256),w
 13389  1493                     u8915:	
 13390  1493  1D03               	skipz
 13391  1494  2C9C               	goto	l8400
 13392  1495  3000               	movlw	0
 13393  1496  00C8               	movwf	?_exp^(0+256)
 13394  1497  3000               	movlw	0
 13395  1498  00C9               	movwf	(?_exp+1)^(0+256)
 13396  1499  3000               	movlw	0
 13397  149A  00CA               	movwf	(?_exp+2)^(0+256)
 13398  149B  0008               	return
 13399  149C                     l8400:	
 13400  149C  0848               	movf	exp@x^(0+256),w
 13401  149D  0021               	movlb	1	; select bank1
 13402  149E  00CE               	movwf	___ftdiv@f2^(0+128)
 13403  149F  0022               	movlb	2	; select bank2
 13404  14A0  0849               	movf	(exp@x+1)^(0+256),w
 13405  14A1  0021               	movlb	1	; select bank1
 13406  14A2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13407  14A3  0022               	movlb	2	; select bank2
 13408  14A4  084A               	movf	(exp@x+2)^(0+256),w
 13409  14A5  0021               	movlb	1	; select bank1
 13410  14A6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13411  14A7  3000               	movlw	0
 13412  14A8  00D1               	movwf	___ftdiv@f1^(0+128)
 13413  14A9  3080               	movlw	128
 13414  14AA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13415  14AB  303F               	movlw	63
 13416  14AC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13417  14AD  319C  2474         	fcall	___ftdiv
 13418  14AF  0021               	movlb	1	; select bank1
 13419  14B0  084E               	movf	?___ftdiv^(0+128),w
 13420  14B1  0022               	movlb	2	; select bank2
 13421  14B2  00C8               	movwf	?_exp^(0+256)
 13422  14B3  0021               	movlb	1	; select bank1
 13423  14B4  084F               	movf	(?___ftdiv+1)^(0+128),w
 13424  14B5  0022               	movlb	2	; select bank2
 13425  14B6  00C9               	movwf	(?_exp+1)^(0+256)
 13426  14B7  0021               	movlb	1	; select bank1
 13427  14B8  0850               	movf	(?___ftdiv+2)^(0+128),w
 13428  14B9  0022               	movlb	2	; select bank2
 13429  14BA  00CA               	movwf	(?_exp+2)^(0+256)
 13430  14BB  0008               	return
 13431  14BC                     __end_of_exp:	
 13432                           
 13433                           	psect	text30
 13434  1BDD                     __ptext30:	
 13435 ;; *************** function _ldexp *****************
 13436 ;; Defined at:
 13437 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13438 ;; Parameters:    Size  Location     Type
 13439 ;;  value           3   30[BANK2 ] unsigned char 
 13440 ;;  newexp          2   33[BANK2 ] int 
 13441 ;; Auto vars:     Size  Location     Type
 13442 ;;		None
 13443 ;; Return value:  Size  Location     Type
 13444 ;;                  3   30[BANK2 ] int 
 13445 ;; Registers used:
 13446 ;;		wreg, status,2, status,0, pclath, cstack
 13447 ;; Tracked objects:
 13448 ;;		On entry : 0/0
 13449 ;;		On exit  : 0/0
 13450 ;;		Unchanged: 0/0
 13451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13452 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13453 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13454 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13455 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13456 ;;Total ram usage:       10 bytes
 13457 ;; Hardware stack levels used:    1
 13458 ;; Hardware stack levels required when called:    4
 13459 ;; This function calls:
 13460 ;;		___ftge
 13461 ;;		___ftneg
 13462 ;; This function is called by:
 13463 ;;		_exp
 13464 ;; This function uses a non-reentrant model
 13465 ;;
 13466                           
 13467                           
 13468                           ;psect for function _ldexp
 13469  1BDD                     _ldexp:	
 13470                           
 13471                           ;incstack = 0
 13472                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13473  1BDD  0022               	movlb	2	; select bank2
 13474  1BDE  0840               	movf	(ldexp@value+2)^(0+256),w
 13475  1BDF  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13476  1BE0  043E               	iorwf	ldexp@value^(0+256),w
 13477  1BE1  1D03               	skipz
 13478  1BE2  2BEA               	goto	l8170
 13479  1BE3  3000               	movlw	0
 13480  1BE4  00BE               	movwf	?_ldexp^(0+256)
 13481  1BE5  3000               	movlw	0
 13482  1BE6  00BF               	movwf	(?_ldexp+1)^(0+256)
 13483  1BE7  3000               	movlw	0
 13484  1BE8  00C0               	movwf	(?_ldexp+2)^(0+256)
 13485  1BE9  0008               	return
 13486  1BEA                     l8170:	
 13487  1BEA  0840               	movf	(ldexp@value^(0+256)+2),w
 13488  1BEB  397F               	andlw	127
 13489  1BEC  00C3               	movwf	??_ldexp^(0+256)
 13490  1BED  01C4               	clrf	(??_ldexp^(0+256)+1)
 13491  1BEE  35C3               	lslf	??_ldexp^(0+256),f
 13492  1BEF  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13493  1BF0  0843               	movf	??_ldexp^(0+256),w
 13494  1BF1  07C1               	addwf	ldexp@newexp^(0+256),f
 13495  1BF2  0844               	movf	(??_ldexp+1)^(0+256),w
 13496  1BF3  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13497  1BF4  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13498  1BF5  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13499  1BF6  3901               	andlw	1
 13500  1BF7  00C3               	movwf	??_ldexp^(0+256)
 13501  1BF8  01C4               	clrf	(??_ldexp^(0+256)+1)
 13502  1BF9  0843               	movf	??_ldexp^(0+256),w
 13503  1BFA  07C1               	addwf	ldexp@newexp^(0+256),f
 13504  1BFB  0844               	movf	(??_ldexp+1)^(0+256),w
 13505  1BFC  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13506  1BFD  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13507  1BFE  2C0C               	goto	l8180
 13508  1BFF  3022               	movlw	34
 13509  1C00  0024               	movlb	4	; select bank4
 13510  1C01  00D1               	movwf	_errno^(0+512)
 13511  1C02  3000               	movlw	0
 13512  1C03  00D2               	movwf	(_errno^(0+512)+1)
 13513  1C04  3000               	movlw	0
 13514  1C05  0022               	movlb	2	; select bank2
 13515  1C06  00BE               	movwf	?_ldexp^(0+256)
 13516  1C07  3000               	movlw	0
 13517  1C08  00BF               	movwf	(?_ldexp+1)^(0+256)
 13518  1C09  3000               	movlw	0
 13519  1C0A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13520  1C0B  0008               	return
 13521  1C0C                     l8180:	
 13522  1C0C  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13523  1C0D  3A80               	xorlw	128
 13524  1C0E  00C3               	movwf	??_ldexp^(0+256)
 13525  1C0F  3081               	movlw	129
 13526  1C10  0243               	subwf	??_ldexp^(0+256),w
 13527  1C11  1D03               	skipz
 13528  1C12  2C15               	goto	u8685
 13529  1C13  3000               	movlw	0
 13530  1C14  0241               	subwf	ldexp@newexp^(0+256),w
 13531  1C15                     u8685:	
 13532  1C15  1C03               	skipc
 13533  1C16  2C5C               	goto	l8204
 13534  1C17  3022               	movlw	34
 13535  1C18  0024               	movlb	4	; select bank4
 13536  1C19  00D1               	movwf	_errno^(0+512)
 13537  1C1A  3000               	movlw	0
 13538  1C1B  00D2               	movwf	(_errno^(0+512)+1)
 13539  1C1C  0022               	movlb	2	; select bank2
 13540  1C1D  083E               	movf	ldexp@value^(0+256),w
 13541  1C1E  0021               	movlb	1	; select bank1
 13542  1C1F  00A0               	movwf	___ftge@ff1^(0+128)
 13543  1C20  0022               	movlb	2	; select bank2
 13544  1C21  083F               	movf	(ldexp@value+1)^(0+256),w
 13545  1C22  0021               	movlb	1	; select bank1
 13546  1C23  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13547  1C24  0022               	movlb	2	; select bank2
 13548  1C25  0840               	movf	(ldexp@value+2)^(0+256),w
 13549  1C26  0021               	movlb	1	; select bank1
 13550  1C27  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13551  1C28  3000               	movlw	0
 13552  1C29  00A3               	movwf	___ftge@ff2^(0+128)
 13553  1C2A  3000               	movlw	0
 13554  1C2B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13555  1C2C  3000               	movlw	0
 13556  1C2D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13557  1C2E  31A0  20AA  319B   	fcall	___ftge
 13558  1C31  1803               	btfsc	3,0
 13559  1C32  2C54               	goto	l8200
 13560  1C33  30FF               	movlw	255
 13561  1C34  0022               	movlb	2	; select bank2
 13562  1C35  00C5               	movwf	_ldexp$2648^(0+256)
 13563  1C36  307F               	movlw	127
 13564  1C37  00C6               	movwf	(_ldexp$2648+1)^(0+256)
 13565  1C38  307F               	movlw	127
 13566  1C39  00C7               	movwf	(_ldexp$2648+2)^(0+256)
 13567  1C3A  0845               	movf	_ldexp$2648^(0+256),w
 13568  1C3B  0021               	movlb	1	; select bank1
 13569  1C3C  00BE               	movwf	___ftneg@f1^(0+128)
 13570  1C3D  0022               	movlb	2	; select bank2
 13571  1C3E  0846               	movf	(_ldexp$2648+1)^(0+256),w
 13572  1C3F  0021               	movlb	1	; select bank1
 13573  1C40  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13574  1C41  0022               	movlb	2	; select bank2
 13575  1C42  0847               	movf	(_ldexp$2648+2)^(0+256),w
 13576  1C43  0021               	movlb	1	; select bank1
 13577  1C44  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13578  1C45  31AC  24F8         	fcall	___ftneg
 13579  1C47  0021               	movlb	1	; select bank1
 13580  1C48  083E               	movf	?___ftneg^(0+128),w
 13581  1C49  0022               	movlb	2	; select bank2
 13582  1C4A  00BE               	movwf	?_ldexp^(0+256)
 13583  1C4B  0021               	movlb	1	; select bank1
 13584  1C4C  083F               	movf	(?___ftneg+1)^(0+128),w
 13585  1C4D  0022               	movlb	2	; select bank2
 13586  1C4E  00BF               	movwf	(?_ldexp+1)^(0+256)
 13587  1C4F  0021               	movlb	1	; select bank1
 13588  1C50  0840               	movf	(?___ftneg+2)^(0+128),w
 13589  1C51  0022               	movlb	2	; select bank2
 13590  1C52  00C0               	movwf	(?_ldexp+2)^(0+256)
 13591  1C53  0008               	return
 13592  1C54                     l8200:	
 13593  1C54  30FF               	movlw	255
 13594  1C55  0022               	movlb	2	; select bank2
 13595  1C56  00BE               	movwf	?_ldexp^(0+256)
 13596  1C57  307F               	movlw	127
 13597  1C58  00BF               	movwf	(?_ldexp+1)^(0+256)
 13598  1C59  307F               	movlw	127
 13599  1C5A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13600  1C5B  0008               	return
 13601  1C5C                     l8204:	
 13602  1C5C  0022               	movlb	2	; select bank2
 13603  1C5D  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13604  1C5E  00C4               	movwf	(??_ldexp^(0+256)+1)
 13605  1C5F  0841               	movf	ldexp@newexp^(0+256),w
 13606  1C60  00C3               	movwf	??_ldexp^(0+256)
 13607  1C61  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13608  1C62  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13609  1C63  0CC3               	rrf	??_ldexp^(0+256),f
 13610  1C64  0840               	movf	(ldexp@value^(0+256)+2),w
 13611  1C65  0643               	xorwf	??_ldexp^(0+256),w
 13612  1C66  3980               	andlw	-128
 13613  1C67  0643               	xorwf	??_ldexp^(0+256),w
 13614  1C68  00C0               	movwf	(ldexp@value^(0+256)+2)
 13615  1C69  0841               	movf	ldexp@newexp^(0+256),w
 13616  1C6A  3901               	andlw	1
 13617  1C6B  00C3               	movwf	??_ldexp^(0+256)
 13618  1C6C  0CC3               	rrf	??_ldexp^(0+256),f
 13619  1C6D  0CC3               	rrf	??_ldexp^(0+256),f
 13620  1C6E  083F               	movf	(ldexp@value^(0+256)+1),w
 13621  1C6F  0643               	xorwf	??_ldexp^(0+256),w
 13622  1C70  397F               	andlw	-129
 13623  1C71  0643               	xorwf	??_ldexp^(0+256),w
 13624  1C72  00BF               	movwf	(ldexp@value^(0+256)+1)
 13625  1C73  0008               	return
 13626  1C74                     __end_of_ldexp:	
 13627                           
 13628                           	psect	text31
 13629  2E7F                     __ptext31:	
 13630 ;; *************** function ___lltoft *****************
 13631 ;; Defined at:
 13632 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13633 ;; Parameters:    Size  Location     Type
 13634 ;;  c               4    8[BANK1 ] unsigned long 
 13635 ;; Auto vars:     Size  Location     Type
 13636 ;;  exp             1   13[BANK1 ] unsigned char 
 13637 ;; Return value:  Size  Location     Type
 13638 ;;                  3    8[BANK1 ] float 
 13639 ;; Registers used:
 13640 ;;		wreg, status,2, status,0, pclath, cstack
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/0
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13646 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13647 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13648 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13649 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13650 ;;Total ram usage:        6 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    4
 13653 ;; This function calls:
 13654 ;;		___ftpack
 13655 ;; This function is called by:
 13656 ;;		_pow
 13657 ;; This function uses a non-reentrant model
 13658 ;;
 13659                           
 13660                           
 13661                           ;psect for function ___lltoft
 13662  2E7F                     ___lltoft:	
 13663                           
 13664                           ;incstack = 0
 13665                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13666  2E7F  308E               	movlw	142
 13667  2E80  0021               	movlb	1	; select bank1
 13668  2E81  00AC               	movwf	??___lltoft^(0+128)
 13669  2E82  082C               	movf	??___lltoft^(0+128),w
 13670  2E83  00AD               	movwf	___lltoft@exp^(0+128)
 13671  2E84                     l8322:	
 13672  2E84  30FF               	movlw	255
 13673  2E85  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13674  2E86  1903               	btfsc	3,2
 13675  2E87  2E94               	goto	l8324
 13676  2E88  3001               	movlw	1
 13677  2E89                     u8805:	
 13678  2E89  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13679  2E8A  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13680  2E8B  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13681  2E8C  0CA8               	rrf	___lltoft@c^(0+128),f
 13682  2E8D  0B89               	decfsz	9,f
 13683  2E8E  2E89               	goto	u8805
 13684  2E8F  3001               	movlw	1
 13685  2E90  00AC               	movwf	??___lltoft^(0+128)
 13686  2E91  082C               	movf	??___lltoft^(0+128),w
 13687  2E92  07AD               	addwf	___lltoft@exp^(0+128),f
 13688  2E93  2E84               	goto	l8322
 13689  2E94                     l8324:	
 13690  2E94  0828               	movf	___lltoft@c^(0+128),w
 13691  2E95  00A0               	movwf	___ftpack@arg^(0+128)
 13692  2E96  0829               	movf	(___lltoft@c+1)^(0+128),w
 13693  2E97  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13694  2E98  082A               	movf	(___lltoft@c+2)^(0+128),w
 13695  2E99  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13696  2E9A  082D               	movf	___lltoft@exp^(0+128),w
 13697  2E9B  00AC               	movwf	??___lltoft^(0+128)
 13698  2E9C  082C               	movf	??___lltoft^(0+128),w
 13699  2E9D  00A3               	movwf	___ftpack@exp^(0+128)
 13700  2E9E  01A4               	clrf	___ftpack@sign^(0+128)
 13701  2E9F  31A5  25B6         	fcall	___ftpack
 13702  2EA1  0021               	movlb	1	; select bank1
 13703  2EA2  0820               	movf	?___ftpack^(0+128),w
 13704  2EA3  00A8               	movwf	?___lltoft^(0+128)
 13705  2EA4  0821               	movf	(?___ftpack+1)^(0+128),w
 13706  2EA5  00A9               	movwf	(?___lltoft+1)^(0+128)
 13707  2EA6  0822               	movf	(?___ftpack+2)^(0+128),w
 13708  2EA7  00AA               	movwf	(?___lltoft+2)^(0+128)
 13709  2EA8  0008               	return
 13710  2EA9                     __end_of___lltoft:	
 13711                           
 13712                           	psect	text32
 13713  2375                     __ptext32:	
 13714 ;; *************** function _read_top_tactile *****************
 13715 ;; Defined at:
 13716 ;;		line 50 in file "tactiles.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;		None
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;		None
 13721 ;; Return value:  Size  Location     Type
 13722 ;;                  1    wreg      void 
 13723 ;; Registers used:
 13724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13725 ;; Tracked objects:
 13726 ;;		On entry : 0/0
 13727 ;;		On exit  : 0/0
 13728 ;;		Unchanged: 0/0
 13729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13732 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13733 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13734 ;;Total ram usage:        1 bytes
 13735 ;; Hardware stack levels used:    1
 13736 ;; Hardware stack levels required when called:    5
 13737 ;; This function calls:
 13738 ;;		_set_leds_top
 13739 ;;		_wait_ms
 13740 ;; This function is called by:
 13741 ;;		_main
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           
 13746                           ;psect for function _read_top_tactile
 13747  2375                     _read_top_tactile:	
 13748                           
 13749                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13753  2375  0020               	movlb	0	; select bank0
 13754  2376  1A8F               	btfsc	15,5	;volatile
 13755  2377  2B7F               	goto	l9100
 13756                           
 13757                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13758  2378  0023               	movlb	3	; select bank3
 13759  2379  084C               	movf	_topTactile_pressed^(0+384),w
 13760  237A  1903               	btfsc	3,2
 13761  237B  2B8A               	goto	l994
 13762                           
 13763                           ;tactiles.c: 62: topTactile_pressed--;
 13764  237C  3001               	movlw	1
 13765  237D  02CC               	subwf	_topTactile_pressed^(0+384),f
 13766                           
 13767                           ;tactiles.c: 63: }
 13768                           ;tactiles.c: 64: } else if (topTactile_pressed < 25*5) {
 13769  237E  2B8A               	goto	l994
 13770  237F                     l9100:	
 13771  237F  307D               	movlw	125
 13772  2380  0023               	movlb	3	; select bank3
 13773  2381  024C               	subwf	_topTactile_pressed^(0+384),w
 13774  2382  1803               	skipnc
 13775  2383  2B8A               	goto	l994
 13776                           
 13777                           ;tactiles.c: 65: topTactile_pressed++;
 13778  2384  3001               	movlw	1
 13779  2385  0021               	movlb	1	; select bank1
 13780  2386  00B2               	movwf	??_read_top_tactile^(0+128)
 13781  2387  0832               	movf	??_read_top_tactile^(0+128),w
 13782  2388  0023               	movlb	3	; select bank3
 13783  2389  07CC               	addwf	_topTactile_pressed^(0+384),f
 13784  238A                     l994:	
 13785                           
 13786                           ;tactiles.c: 66: }
 13787                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13788  238A  084C               	movf	_topTactile_pressed^(0+384),w
 13789  238B  1D03               	btfss	3,2
 13790  238C  0008               	return
 13791                           
 13792                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13793  238D  0020               	movlb	0	; select bank0
 13794  238E  084C               	movf	_top_push_state,w
 13795  238F  3E01               	addlw	1
 13796  2390  00CC               	movwf	_top_push_state
 13797  2391  3000               	movlw	0
 13798  2392  3D4D               	addwfc	_top_push_state+1,w
 13799  2393  00CD               	movwf	_top_push_state+1
 13800                           
 13801                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13802  2394  084D               	movf	_top_push_state+1,w
 13803  2395  3A80               	xorlw	128
 13804  2396  0021               	movlb	1	; select bank1
 13805  2397  00B2               	movwf	??_read_top_tactile^(0+128)
 13806  2398  3080               	movlw	128
 13807  2399  0232               	subwf	??_read_top_tactile^(0+128),w
 13808  239A  1D03               	skipz
 13809  239B  2B9F               	goto	u10145
 13810  239C  3007               	movlw	7
 13811  239D  0020               	movlb	0	; select bank0
 13812  239E  024C               	subwf	_top_push_state,w
 13813  239F                     u10145:	
 13814  239F  1C03               	skipc
 13815  23A0  2BA6               	goto	l9110
 13816                           
 13817                           ;tactiles.c: 75: top_push_state = 1;
 13818  23A1  3001               	movlw	1
 13819  23A2  0020               	movlb	0	; select bank0
 13820  23A3  00CC               	movwf	_top_push_state
 13821  23A4  3000               	movlw	0
 13822  23A5  00CD               	movwf	_top_push_state+1
 13823  23A6                     l9110:	
 13824                           
 13825                           ;tactiles.c: 76: }
 13826                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13827  23A6  0020               	movlb	0	; select bank0
 13828  23A7  084D               	movf	_top_push_state+1,w
 13829  23A8  0021               	movlb	1	; select bank1
 13830  23A9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13831  23AA  0020               	movlb	0	; select bank0
 13832  23AB  084C               	movf	_top_push_state,w
 13833  23AC  0021               	movlb	1	; select bank1
 13834  23AD  00A0               	movwf	set_leds_top@x^(0+128)
 13835  23AE  3001               	movlw	1
 13836  23AF  00A2               	movwf	set_leds_top@ledState^(0+128)
 13837  23B0  3000               	movlw	0
 13838  23B1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13839  23B2  31A5  2509  31A3   	fcall	_set_leds_top
 13840                           
 13841                           ;tactiles.c: 78: mod_time_changed = 1;
 13842  23B5  0023               	movlb	3	; select bank3
 13843  23B6  01E4               	clrf	_mod_time_changed^(0+384)
 13844  23B7  0AE4               	incf	_mod_time_changed^(0+384),f
 13845  23B8                     l998:	
 13846                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13847                           
 13848  23B8  0020               	movlb	0	; select bank0
 13849  23B9  1E8F               	btfss	15,5	;volatile
 13850  23BA  2BB8               	goto	l998
 13851                           
 13852                           ;tactiles.c: 82: }
 13853                           ;tactiles.c: 83: wait_ms(20);
 13854  23BB  3014               	movlw	20
 13855  23BC  0021               	movlb	1	; select bank1
 13856  23BD  00AC               	movwf	wait_ms@timeSec^(0+128)
 13857  23BE  3000               	movlw	0
 13858  23BF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13859  23C0  3190  2003         	fcall	_wait_ms
 13860  23C2  0008               	return
 13861  23C3                     __end_of_read_top_tactile:	
 13862                           
 13863                           	psect	text33
 13864  232B                     __ptext33:	
 13865 ;; *************** function _read_bottom_tactile *****************
 13866 ;; Defined at:
 13867 ;;		line 18 in file "tactiles.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;		None
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;		None
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  1    wreg      void 
 13874 ;; Registers used:
 13875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13883 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13884 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13885 ;;Total ram usage:        1 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; Hardware stack levels required when called:    5
 13888 ;; This function calls:
 13889 ;;		_set_leds_bottom
 13890 ;;		_wait_ms
 13891 ;; This function is called by:
 13892 ;;		_main
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           
 13897                           ;psect for function _read_bottom_tactile
 13898  232B                     _read_bottom_tactile:	
 13899                           
 13900                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13901                           
 13902                           ;incstack = 0
 13903                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13904  232B  0020               	movlb	0	; select bank0
 13905  232C  1B0F               	btfsc	15,6	;volatile
 13906  232D  2B35               	goto	l9078
 13907                           
 13908                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13909  232E  0023               	movlb	3	; select bank3
 13910  232F  083F               	movf	_bottomTactile_pressed^(0+384),w
 13911  2330  1903               	btfsc	3,2
 13912  2331  2B40               	goto	l982
 13913                           
 13914                           ;tactiles.c: 29: bottomTactile_pressed--;
 13915  2332  3001               	movlw	1
 13916  2333  02BF               	subwf	_bottomTactile_pressed^(0+384),f
 13917                           
 13918                           ;tactiles.c: 30: }
 13919                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25*5) {
 13920  2334  2B40               	goto	l982
 13921  2335                     l9078:	
 13922  2335  307D               	movlw	125
 13923  2336  0023               	movlb	3	; select bank3
 13924  2337  023F               	subwf	_bottomTactile_pressed^(0+384),w
 13925  2338  1803               	skipnc
 13926  2339  2B40               	goto	l982
 13927                           
 13928                           ;tactiles.c: 32: bottomTactile_pressed++;
 13929  233A  3001               	movlw	1
 13930  233B  0021               	movlb	1	; select bank1
 13931  233C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13932  233D  0832               	movf	??_read_bottom_tactile^(0+128),w
 13933  233E  0023               	movlb	3	; select bank3
 13934  233F  07BF               	addwf	_bottomTactile_pressed^(0+384),f
 13935  2340                     l982:	
 13936                           
 13937                           ;tactiles.c: 33: }
 13938                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13939  2340  083F               	movf	_bottomTactile_pressed^(0+384),w
 13940  2341  1D03               	btfss	3,2
 13941  2342  0008               	return
 13942                           
 13943                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13944  2343  0020               	movlb	0	; select bank0
 13945  2344  0848               	movf	_bottom_push_state,w
 13946  2345  3E01               	addlw	1
 13947  2346  00C8               	movwf	_bottom_push_state
 13948  2347  3000               	movlw	0
 13949  2348  3D49               	addwfc	_bottom_push_state+1,w
 13950  2349  00C9               	movwf	_bottom_push_state+1
 13951                           
 13952                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13953  234A  0849               	movf	_bottom_push_state+1,w
 13954  234B  3A80               	xorlw	128
 13955  234C  0021               	movlb	1	; select bank1
 13956  234D  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13957  234E  3080               	movlw	128
 13958  234F  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13959  2350  1D03               	skipz
 13960  2351  2B55               	goto	u10085
 13961  2352  3006               	movlw	6
 13962  2353  0020               	movlb	0	; select bank0
 13963  2354  0248               	subwf	_bottom_push_state,w
 13964  2355                     u10085:	
 13965  2355  1C03               	skipc
 13966  2356  2B5C               	goto	l9088
 13967                           
 13968                           ;tactiles.c: 39: bottom_push_state = 1;
 13969  2357  3001               	movlw	1
 13970  2358  0020               	movlb	0	; select bank0
 13971  2359  00C8               	movwf	_bottom_push_state
 13972  235A  3000               	movlw	0
 13973  235B  00C9               	movwf	_bottom_push_state+1
 13974  235C                     l9088:	
 13975                           
 13976                           ;tactiles.c: 40: }
 13977                           ;tactiles.c: 41: modulation_changed = 1;
 13978  235C  0023               	movlb	3	; select bank3
 13979  235D  01C7               	clrf	_modulation_changed^(0+384)
 13980  235E  0AC7               	incf	_modulation_changed^(0+384),f
 13981                           
 13982                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13983  235F  0020               	movlb	0	; select bank0
 13984  2360  0849               	movf	_bottom_push_state+1,w
 13985  2361  0021               	movlb	1	; select bank1
 13986  2362  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13987  2363  0020               	movlb	0	; select bank0
 13988  2364  0848               	movf	_bottom_push_state,w
 13989  2365  0021               	movlb	1	; select bank1
 13990  2366  00A0               	movwf	set_leds_bottom@x^(0+128)
 13991  2367  31A0  206F  31A3   	fcall	_set_leds_bottom
 13992  236A                     l986:	
 13993                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13994                           
 13995  236A  0020               	movlb	0	; select bank0
 13996  236B  1F0F               	btfss	15,6	;volatile
 13997  236C  2B6A               	goto	l986
 13998                           
 13999                           ;tactiles.c: 45: }
 14000                           ;tactiles.c: 46: wait_ms(20);
 14001  236D  3014               	movlw	20
 14002  236E  0021               	movlb	1	; select bank1
 14003  236F  00AC               	movwf	wait_ms@timeSec^(0+128)
 14004  2370  3000               	movlw	0
 14005  2371  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14006  2372  3190  2003         	fcall	_wait_ms
 14007  2374  0008               	return
 14008  2375                     __end_of_read_bottom_tactile:	
 14009                           
 14010                           	psect	text34
 14011  1A36                     __ptext34:	
 14012 ;; *************** function _map *****************
 14013 ;; Defined at:
 14014 ;;		line 177 in file "user.c"
 14015 ;; Parameters:    Size  Location     Type
 14016 ;;  x               3   62[BANK1 ] float 
 14017 ;;  in_min          3   65[BANK1 ] float 
 14018 ;;  in_max          3   68[BANK1 ] float 
 14019 ;;  out_min         3   71[BANK1 ] float 
 14020 ;;  out_max         3   74[BANK1 ] float 
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;		None
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  3   62[BANK1 ] float 
 14025 ;; Registers used:
 14026 ;;		wreg, status,2, status,0, pclath, cstack
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14032 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14033 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14035 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14036 ;;Total ram usage:       18 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    5
 14039 ;; This function calls:
 14040 ;;		___ftadd
 14041 ;;		___ftdiv
 14042 ;;		___ftmul
 14043 ;;		___ftneg
 14044 ;; This function is called by:
 14045 ;;		_main
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           
 14050                           ;psect for function _map
 14051  1A36                     _map:	
 14052                           
 14053                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14054                           
 14055                           ;incstack = 0
 14056                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14057  1A36  0021               	movlb	1	; select bank1
 14058  1A37  0864               	movf	map@in_max^(0+128),w
 14059  1A38  00C1               	movwf	___ftadd@f1^(0+128)
 14060  1A39  0865               	movf	(map@in_max+1)^(0+128),w
 14061  1A3A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14062  1A3B  0866               	movf	(map@in_max+2)^(0+128),w
 14063  1A3C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14064  1A3D  0861               	movf	map@in_min^(0+128),w
 14065  1A3E  00BE               	movwf	___ftneg@f1^(0+128)
 14066  1A3F  0862               	movf	(map@in_min+1)^(0+128),w
 14067  1A40  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14068  1A41  0863               	movf	(map@in_min+2)^(0+128),w
 14069  1A42  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14070  1A43  31AC  24F8  319A   	fcall	___ftneg
 14071  1A46  0021               	movlb	1	; select bank1
 14072  1A47  083E               	movf	?___ftneg^(0+128),w
 14073  1A48  00C4               	movwf	___ftadd@f2^(0+128)
 14074  1A49  083F               	movf	(?___ftneg+1)^(0+128),w
 14075  1A4A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14076  1A4B  0840               	movf	(?___ftneg+2)^(0+128),w
 14077  1A4C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14078  1A4D  3190  2035  319A   	fcall	___ftadd
 14079  1A50  0021               	movlb	1	; select bank1
 14080  1A51  0841               	movf	?___ftadd^(0+128),w
 14081  1A52  00CE               	movwf	___ftdiv@f2^(0+128)
 14082  1A53  0842               	movf	(?___ftadd+1)^(0+128),w
 14083  1A54  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14084  1A55  0843               	movf	(?___ftadd+2)^(0+128),w
 14085  1A56  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14086  1A57  086A               	movf	map@out_max^(0+128),w
 14087  1A58  00C1               	movwf	___ftadd@f1^(0+128)
 14088  1A59  086B               	movf	(map@out_max+1)^(0+128),w
 14089  1A5A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14090  1A5B  086C               	movf	(map@out_max+2)^(0+128),w
 14091  1A5C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14092  1A5D  0867               	movf	map@out_min^(0+128),w
 14093  1A5E  00BE               	movwf	___ftneg@f1^(0+128)
 14094  1A5F  0868               	movf	(map@out_min+1)^(0+128),w
 14095  1A60  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14096  1A61  0869               	movf	(map@out_min+2)^(0+128),w
 14097  1A62  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14098  1A63  31AC  24F8  319A   	fcall	___ftneg
 14099  1A66  0021               	movlb	1	; select bank1
 14100  1A67  083E               	movf	?___ftneg^(0+128),w
 14101  1A68  00C4               	movwf	___ftadd@f2^(0+128)
 14102  1A69  083F               	movf	(?___ftneg+1)^(0+128),w
 14103  1A6A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14104  1A6B  0840               	movf	(?___ftneg+2)^(0+128),w
 14105  1A6C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14106  1A6D  3190  2035  319A   	fcall	___ftadd
 14107  1A70  0021               	movlb	1	; select bank1
 14108  1A71  0841               	movf	?___ftadd^(0+128),w
 14109  1A72  00AE               	movwf	___ftmul@f1^(0+128)
 14110  1A73  0842               	movf	(?___ftadd+1)^(0+128),w
 14111  1A74  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14112  1A75  0843               	movf	(?___ftadd+2)^(0+128),w
 14113  1A76  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14114  1A77  085E               	movf	map@x^(0+128),w
 14115  1A78  00C1               	movwf	___ftadd@f1^(0+128)
 14116  1A79  085F               	movf	(map@x+1)^(0+128),w
 14117  1A7A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14118  1A7B  0860               	movf	(map@x+2)^(0+128),w
 14119  1A7C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14120  1A7D  0861               	movf	map@in_min^(0+128),w
 14121  1A7E  00BE               	movwf	___ftneg@f1^(0+128)
 14122  1A7F  0862               	movf	(map@in_min+1)^(0+128),w
 14123  1A80  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14124  1A81  0863               	movf	(map@in_min+2)^(0+128),w
 14125  1A82  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14126  1A83  31AC  24F8  319A   	fcall	___ftneg
 14127  1A86  0021               	movlb	1	; select bank1
 14128  1A87  083E               	movf	?___ftneg^(0+128),w
 14129  1A88  00C4               	movwf	___ftadd@f2^(0+128)
 14130  1A89  083F               	movf	(?___ftneg+1)^(0+128),w
 14131  1A8A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14132  1A8B  0840               	movf	(?___ftneg+2)^(0+128),w
 14133  1A8C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14134  1A8D  3190  2035  319A   	fcall	___ftadd
 14135  1A90  0021               	movlb	1	; select bank1
 14136  1A91  0841               	movf	?___ftadd^(0+128),w
 14137  1A92  00B1               	movwf	___ftmul@f2^(0+128)
 14138  1A93  0842               	movf	(?___ftadd+1)^(0+128),w
 14139  1A94  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14140  1A95  0843               	movf	(?___ftadd+2)^(0+128),w
 14141  1A96  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14142  1A97  319E  267B  319A   	fcall	___ftmul
 14143  1A9A  0021               	movlb	1	; select bank1
 14144  1A9B  082E               	movf	?___ftmul^(0+128),w
 14145  1A9C  00D1               	movwf	___ftdiv@f1^(0+128)
 14146  1A9D  082F               	movf	(?___ftmul+1)^(0+128),w
 14147  1A9E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14148  1A9F  0830               	movf	(?___ftmul+2)^(0+128),w
 14149  1AA0  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14150  1AA1  319C  2474  319A   	fcall	___ftdiv
 14151  1AA4  0021               	movlb	1	; select bank1
 14152  1AA5  084E               	movf	?___ftdiv^(0+128),w
 14153  1AA6  00ED               	movwf	_map$2842^(0+128)
 14154  1AA7  084F               	movf	(?___ftdiv+1)^(0+128),w
 14155  1AA8  00EE               	movwf	(_map$2842+1)^(0+128)
 14156  1AA9  0850               	movf	(?___ftdiv+2)^(0+128),w
 14157  1AAA  00EF               	movwf	(_map$2842+2)^(0+128)
 14158                           
 14159                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14160  1AAB  0867               	movf	map@out_min^(0+128),w
 14161  1AAC  00C1               	movwf	___ftadd@f1^(0+128)
 14162  1AAD  0868               	movf	(map@out_min+1)^(0+128),w
 14163  1AAE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14164  1AAF  0869               	movf	(map@out_min+2)^(0+128),w
 14165  1AB0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14166  1AB1  086D               	movf	_map$2842^(0+128),w
 14167  1AB2  00C4               	movwf	___ftadd@f2^(0+128)
 14168  1AB3  086E               	movf	(_map$2842+1)^(0+128),w
 14169  1AB4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14170  1AB5  086F               	movf	(_map$2842+2)^(0+128),w
 14171  1AB6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14172  1AB7  3190  2035         	fcall	___ftadd
 14173  1AB9  0021               	movlb	1	; select bank1
 14174  1ABA  0841               	movf	?___ftadd^(0+128),w
 14175  1ABB  00DE               	movwf	?_map^(0+128)
 14176  1ABC  0842               	movf	(?___ftadd+1)^(0+128),w
 14177  1ABD  00DF               	movwf	(?_map+1)^(0+128)
 14178  1ABE  0843               	movf	(?___ftadd+2)^(0+128),w
 14179  1ABF  00E0               	movwf	(?_map+2)^(0+128)
 14180  1AC0  0008               	return
 14181  1AC1                     __end_of_map:	
 14182                           
 14183                           	psect	text35
 14184  2D17                     __ptext35:	
 14185 ;; *************** function _initSwitchBypass *****************
 14186 ;; Defined at:
 14187 ;;		line 29 in file "SwitchBypass.c"
 14188 ;; Parameters:    Size  Location     Type
 14189 ;;		None
 14190 ;; Auto vars:     Size  Location     Type
 14191 ;;  initState       2   26[BANK1 ] int 
 14192 ;; Return value:  Size  Location     Type
 14193 ;;                  1    wreg      void 
 14194 ;; Registers used:
 14195 ;;		wreg, status,2, status,0, pclath, cstack
 14196 ;; Tracked objects:
 14197 ;;		On entry : 0/0
 14198 ;;		On exit  : 0/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14202 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14204 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14205 ;;Total ram usage:        2 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    7
 14208 ;; This function calls:
 14209 ;;		_getSwitchBypassState
 14210 ;;		_setSwitchBypassState
 14211 ;; This function is called by:
 14212 ;;		_main
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           
 14217                           ;psect for function _initSwitchBypass
 14218  2D17                     _initSwitchBypass:	
 14219                           
 14220                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14221                           
 14222                           ;incstack = 0
 14223                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14224  2D17  31AC  24E4  31AD   	fcall	_getSwitchBypassState
 14225  2D1A  0021               	movlb	1	; select bank1
 14226  2D1B  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14227  2D1C  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14228  2D1D  0820               	movf	?_getSwitchBypassState^(0+128),w
 14229  2D1E  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14230                           
 14231                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14232  2D1F  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14233  2D20  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14234  2D21  083A               	movf	initSwitchBypass@initState^(0+128),w
 14235  2D22  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14236  2D23  31AD  25E1         	fcall	_setSwitchBypassState
 14237  2D25  0008               	return
 14238  2D26                     __end_of_initSwitchBypass:	
 14239                           
 14240                           	psect	text36
 14241  2DE1                     __ptext36:	
 14242 ;; *************** function _setSwitchBypassState *****************
 14243 ;; Defined at:
 14244 ;;		line 141 in file "SwitchBypass.c"
 14245 ;; Parameters:    Size  Location     Type
 14246 ;;  f_state         2   22[BANK1 ] int 
 14247 ;; Auto vars:     Size  Location     Type
 14248 ;;		None
 14249 ;; Return value:  Size  Location     Type
 14250 ;;                  1    wreg      void 
 14251 ;; Registers used:
 14252 ;;		wreg, status,2, status,0, pclath, cstack
 14253 ;; Tracked objects:
 14254 ;;		On entry : 0/0
 14255 ;;		On exit  : 0/0
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14258 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14260 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14261 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14262 ;;Total ram usage:        4 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; Hardware stack levels required when called:    6
 14265 ;; This function calls:
 14266 ;;		_setSwitchBypassRelays
 14267 ;; This function is called by:
 14268 ;;		_initSwitchBypass
 14269 ;;		_updateSwitchBypass
 14270 ;; This function uses a non-reentrant model
 14271 ;;
 14272                           
 14273                           
 14274                           ;psect for function _setSwitchBypassState
 14275  2DE1                     _setSwitchBypassState:	
 14276                           
 14277                           ;SwitchBypass.c: 142: if (switchBypass_state == f_state) {return;}
 14278                           
 14279                           ;incstack = 0
 14280                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14281  2DE1  0020               	movlb	0	; select bank0
 14282  2DE2  0851               	movf	_switchBypass_state,w
 14283  2DE3  0021               	movlb	1	; select bank1
 14284  2DE4  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14285  2DE5  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14286  2DE6  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14287  2DE7  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14288  2DE8  1D03               	skipz
 14289  2DE9  2DEC               	goto	u9005
 14290  2DEA  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14291  2DEB  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14292  2DEC                     u9005:	
 14293  2DEC  1903               	btfsc	3,2
 14294  2DED  0008               	return
 14295                           
 14296                           ;SwitchBypass.c: 144: LATBbits.LATB2 = f_state;
 14297  2DEE  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14298  2DEF  0022               	movlb	2	; select bank2
 14299  2DF0  1C03               	skipc
 14300  2DF1  110D               	bcf	13,2	;volatile
 14301  2DF2  1803               	skipnc
 14302  2DF3  150D               	bsf	13,2	;volatile
 14303                           
 14304                           ;SwitchBypass.c: 145: LATBbits.LATB3 = 0;
 14305  2DF4  118D               	bcf	13,3	;volatile
 14306                           
 14307                           ;SwitchBypass.c: 146: setSwitchBypassRelays(f_state);
 14308  2DF5  0021               	movlb	1	; select bank1
 14309  2DF6  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14310  2DF7  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14311  2DF8  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14312  2DF9  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14313  2DFA  31AF  2792         	fcall	_setSwitchBypassRelays
 14314  2DFC  0008               	return
 14315  2DFD                     __end_of_setSwitchBypassState:	
 14316                           
 14317                           	psect	text37
 14318  2F92                     __ptext37:	
 14319 ;; *************** function _setSwitchBypassRelays *****************
 14320 ;; Defined at:
 14321 ;;		line 149 in file "SwitchBypass.c"
 14322 ;; Parameters:    Size  Location     Type
 14323 ;;  f_state         2   18[BANK1 ] int 
 14324 ;; Auto vars:     Size  Location     Type
 14325 ;;		None
 14326 ;; Return value:  Size  Location     Type
 14327 ;;                  1    wreg      void 
 14328 ;; Registers used:
 14329 ;;		wreg, status,2, status,0, pclath, cstack
 14330 ;; Tracked objects:
 14331 ;;		On entry : 0/0
 14332 ;;		On exit  : 0/0
 14333 ;;		Unchanged: 0/0
 14334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14335 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14337 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14338 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14339 ;;Total ram usage:        4 bytes
 14340 ;; Hardware stack levels used:    1
 14341 ;; Hardware stack levels required when called:    5
 14342 ;; This function calls:
 14343 ;;		_updateSwitchBypassState
 14344 ;;		_wait_ms
 14345 ;; This function is called by:
 14346 ;;		_updateSwitchBypass
 14347 ;;		_setSwitchBypassState
 14348 ;; This function uses a non-reentrant model
 14349 ;;
 14350                           
 14351                           
 14352                           ;psect for function _setSwitchBypassRelays
 14353  2F92                     _setSwitchBypassRelays:	
 14354                           
 14355                           ;SwitchBypass.c: 150: switchBypass_state = f_state;
 14356                           
 14357                           ;incstack = 0
 14358                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14359  2F92  0021               	movlb	1	; select bank1
 14360  2F93  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14361  2F94  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14362  2F95  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14363  2F96  0020               	movlb	0	; select bank0
 14364  2F97  00D1               	movwf	_switchBypass_state
 14365                           
 14366                           ;SwitchBypass.c: 151: LATGbits.LATG2 = f_state;
 14367  2F98  0021               	movlb	1	; select bank1
 14368  2F99  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14369  2F9A  0027               	movlb	7	; select bank7
 14370  2F9B  1C03               	skipc
 14371  2F9C  110D               	bcf	13,2	;volatile
 14372  2F9D  1803               	skipnc
 14373  2F9E  150D               	bsf	13,2	;volatile
 14374                           
 14375                           ;SwitchBypass.c: 152: LATGbits.LATG1 = !f_state;
 14376  2F9F  0021               	movlb	1	; select bank1
 14377  2FA0  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14378  2FA1  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14379  2FA2  1D03               	btfss	3,2
 14380  2FA3  2FA7               	goto	u8700
 14381  2FA4  0027               	movlb	7	; select bank7
 14382  2FA5  148D               	bsf	13,1	;volatile
 14383  2FA6  2FA9               	goto	l8248
 14384  2FA7                     u8700:	
 14385  2FA7  0027               	movlb	7	; select bank7
 14386  2FA8  108D               	bcf	13,1	;volatile
 14387  2FA9                     l8248:	
 14388                           
 14389                           ;SwitchBypass.c: 154: wait_ms(20);
 14390  2FA9  3014               	movlw	20
 14391  2FAA  0021               	movlb	1	; select bank1
 14392  2FAB  00AC               	movwf	wait_ms@timeSec^(0+128)
 14393  2FAC  3000               	movlw	0
 14394  2FAD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14395  2FAE  3190  2003  31AF   	fcall	_wait_ms
 14396                           
 14397                           ;SwitchBypass.c: 156: LATGbits.LATG2 = 0;
 14398  2FB1  0027               	movlb	7	; select bank7
 14399  2FB2  110D               	bcf	13,2	;volatile
 14400                           
 14401                           ;SwitchBypass.c: 157: LATGbits.LATG1 = 0;
 14402  2FB3  108D               	bcf	13,1	;volatile
 14403                           
 14404                           ;SwitchBypass.c: 159: updateSwitchBypassState(switchBypass_state);
 14405  2FB4  0020               	movlb	0	; select bank0
 14406  2FB5  0851               	movf	_switchBypass_state,w
 14407  2FB6  0021               	movlb	1	; select bank1
 14408  2FB7  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14409  2FB8  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14410  2FB9  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14411  2FBA  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14412  2FBB  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14413  2FBC  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14414  2FBD  3180  2002  31AF   	fcall	_updateSwitchBypassState
 14415                           
 14416                           ;SwitchBypass.c: 160: wait_ms(20);
 14417  2FC0  3014               	movlw	20
 14418  2FC1  0021               	movlb	1	; select bank1
 14419  2FC2  00AC               	movwf	wait_ms@timeSec^(0+128)
 14420  2FC3  3000               	movlw	0
 14421  2FC4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14422  2FC5  3190  2003         	fcall	_wait_ms
 14423  2FC7  0008               	return
 14424  2FC8                     __end_of_setSwitchBypassRelays:	
 14425                           
 14426                           	psect	text38
 14427  1003                     __ptext38:	
 14428 ;; *************** function _wait_ms *****************
 14429 ;; Defined at:
 14430 ;;		line 23 in file "system.c"
 14431 ;; Parameters:    Size  Location     Type
 14432 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  timemsl         4   14[BANK1 ] long 
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  1    wreg      void 
 14437 ;; Registers used:
 14438 ;;		wreg, status,2, status,0, pclath, cstack
 14439 ;; Tracked objects:
 14440 ;;		On entry : 0/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14444 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14445 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14447 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14448 ;;Total ram usage:        6 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    4
 14451 ;; This function calls:
 14452 ;;		___lmul
 14453 ;; This function is called by:
 14454 ;;		_ring_tactiles
 14455 ;;		_solidring_tactiles
 14456 ;;		_read_bottom_tactile
 14457 ;;		_read_top_tactile
 14458 ;;		_setSwitchBypassRelays
 14459 ;;		_setDoublePressState
 14460 ;;		_showError_Alternating
 14461 ;;		_show_error
 14462 ;;		_show_cancel
 14463 ;;		_star_tactiles
 14464 ;;		_initExpModeState
 14465 ;; This function uses a non-reentrant model
 14466 ;;
 14467                           
 14468                           
 14469                           ;psect for function _wait_ms
 14470  1003                     _wait_ms:	
 14471                           
 14472                           ;system.c: 25: long timemsl = 0;
 14473                           
 14474                           ;incstack = 0
 14475                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14476  1003  3000               	movlw	0
 14477  1004  0021               	movlb	1	; select bank1
 14478  1005  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14479  1006  3000               	movlw	0
 14480  1007  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14481  1008  3000               	movlw	0
 14482  1009  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14483  100A  3000               	movlw	0
 14484  100B  00AE               	movwf	wait_ms@timemsl^(0+128)
 14485                           
 14486                           ;system.c: 26: timemsl = timeSec * 1000l;
 14487  100C  082C               	movf	wait_ms@timeSec^(0+128),w
 14488  100D  00A0               	movwf	___lmul@multiplier^(0+128)
 14489  100E  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14490  100F  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14491  1010  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14492  1011  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14493  1012  3000               	movlw	0
 14494  1013  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14495  1014  3000               	movlw	0
 14496  1015  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14497  1016  3003               	movlw	3
 14498  1017  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14499  1018  30E8               	movlw	232
 14500  1019  00A4               	movwf	___lmul@multiplicand^(0+128)
 14501  101A  31A0  2005  3190   	fcall	___lmul
 14502  101D  0021               	movlb	1	; select bank1
 14503  101E  0823               	movf	(?___lmul+3)^(0+128),w
 14504  101F  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14505  1020  0822               	movf	(?___lmul+2)^(0+128),w
 14506  1021  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14507  1022  0821               	movf	(?___lmul+1)^(0+128),w
 14508  1023  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14509  1024  0820               	movf	?___lmul^(0+128),w
 14510  1025  00AE               	movwf	wait_ms@timemsl^(0+128)
 14511  1026                     l398:	
 14512                           ;system.c: 27: for( ; timemsl; timemsl--);
 14513                           
 14514  1026  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14515  1027  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14516  1028  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14517  1029  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14518  102A  1903               	btfsc	3,2
 14519  102B  0008               	return
 14520  102C  30FF               	movlw	255
 14521  102D  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14522  102E  30FF               	movlw	255
 14523  102F  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14524  1030  30FF               	movlw	255
 14525  1031  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14526  1032  30FF               	movlw	255
 14527  1033  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14528  1034  2826               	goto	l398
 14529  1035                     __end_of_wait_ms:	
 14530                           
 14531                           	psect	text39
 14532  2005                     __ptext39:	
 14533 ;; *************** function ___lmul *****************
 14534 ;; Defined at:
 14535 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14536 ;; Parameters:    Size  Location     Type
 14537 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14538 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;  product         4    8[BANK1 ] unsigned long 
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  4    0[BANK1 ] unsigned long 
 14543 ;; Registers used:
 14544 ;;		wreg, status,2, status,0
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14550 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14551 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14553 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14554 ;;Total ram usage:       12 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; Hardware stack levels required when called:    3
 14557 ;; This function calls:
 14558 ;;		Nothing
 14559 ;; This function is called by:
 14560 ;;		_wait_ms
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           
 14565                           ;psect for function ___lmul
 14566  2005                     ___lmul:	
 14567                           
 14568                           ;incstack = 0
 14569                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14570  2005  3000               	movlw	0
 14571  2006  0021               	movlb	1	; select bank1
 14572  2007  00AB               	movwf	(___lmul@product+3)^(0+128)
 14573  2008  3000               	movlw	0
 14574  2009  00AA               	movwf	(___lmul@product+2)^(0+128)
 14575  200A  3000               	movlw	0
 14576  200B  00A9               	movwf	(___lmul@product+1)^(0+128)
 14577  200C  3000               	movlw	0
 14578  200D  00A8               	movwf	___lmul@product^(0+128)
 14579  200E                     l7694:	
 14580  200E  1C20               	btfss	___lmul@multiplier^(0+128),0
 14581  200F  2818               	goto	l7698
 14582  2010  0824               	movf	___lmul@multiplicand^(0+128),w
 14583  2011  07A8               	addwf	___lmul@product^(0+128),f
 14584  2012  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14585  2013  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14586  2014  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14587  2015  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14588  2016  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14589  2017  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14590  2018                     l7698:	
 14591  2018  3001               	movlw	1
 14592  2019                     u7735:	
 14593  2019  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14594  201A  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14595  201B  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14596  201C  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14597  201D  0B89               	decfsz	9,f
 14598  201E  2819               	goto	u7735
 14599  201F  3001               	movlw	1
 14600  2020                     u7745:	
 14601  2020  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14602  2021  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14603  2022  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14604  2023  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14605  2024  0B89               	decfsz	9,f
 14606  2025  2820               	goto	u7745
 14607  2026  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14608  2027  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14609  2028  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14610  2029  0420               	iorwf	___lmul@multiplier^(0+128),w
 14611  202A  1D03               	skipz
 14612  202B  280E               	goto	l7694
 14613  202C  082B               	movf	(___lmul@product+3)^(0+128),w
 14614  202D  00A3               	movwf	(?___lmul+3)^(0+128)
 14615  202E  082A               	movf	(___lmul@product+2)^(0+128),w
 14616  202F  00A2               	movwf	(?___lmul+2)^(0+128)
 14617  2030  0829               	movf	(___lmul@product+1)^(0+128),w
 14618  2031  00A1               	movwf	(?___lmul+1)^(0+128)
 14619  2032  0828               	movf	___lmul@product^(0+128),w
 14620  2033  00A0               	movwf	?___lmul^(0+128)
 14621  2034  0008               	return
 14622  2035                     __end_of___lmul:	
 14623                           
 14624                           	psect	text40
 14625  0002                     __ptext40:	
 14626 ;; *************** function _updateSwitchBypassState *****************
 14627 ;; Defined at:
 14628 ;;		line 96 in file "state_manager.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;  state           2    0[BANK1 ] int 
 14631 ;; Auto vars:     Size  Location     Type
 14632 ;;		None
 14633 ;; Return value:  Size  Location     Type
 14634 ;;                  1    wreg      void 
 14635 ;; Registers used:
 14636 ;;		None
 14637 ;; Tracked objects:
 14638 ;;		On entry : 0/0
 14639 ;;		On exit  : 0/0
 14640 ;;		Unchanged: 0/0
 14641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14642 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14645 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14646 ;;Total ram usage:        2 bytes
 14647 ;; Hardware stack levels used:    1
 14648 ;; Hardware stack levels required when called:    3
 14649 ;; This function calls:
 14650 ;;		Nothing
 14651 ;; This function is called by:
 14652 ;;		_setSwitchBypassRelays
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           
 14657                           ;psect for function _updateSwitchBypassState
 14658  0002                     _updateSwitchBypassState:	
 14659                           
 14660                           ;incstack = 0
 14661                           ; Regs used in _updateSwitchBypassState: []
 14662  0002  0008               	return
 14663  0003                     __end_of_updateSwitchBypassState:	
 14664                           
 14665                           	psect	text41
 14666  2CE4                     __ptext41:	
 14667 ;; *************** function _getSwitchBypassState *****************
 14668 ;; Defined at:
 14669 ;;		line 103 in file "state_manager.c"
 14670 ;; Parameters:    Size  Location     Type
 14671 ;;		None
 14672 ;; Auto vars:     Size  Location     Type
 14673 ;;		None
 14674 ;; Return value:  Size  Location     Type
 14675 ;;                  2    0[BANK1 ] int 
 14676 ;; Registers used:
 14677 ;;		status,2
 14678 ;; Tracked objects:
 14679 ;;		On entry : 0/0
 14680 ;;		On exit  : 0/0
 14681 ;;		Unchanged: 0/0
 14682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14683 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14686 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14687 ;;Total ram usage:        2 bytes
 14688 ;; Hardware stack levels used:    1
 14689 ;; Hardware stack levels required when called:    3
 14690 ;; This function calls:
 14691 ;;		Nothing
 14692 ;; This function is called by:
 14693 ;;		_initSwitchBypass
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           
 14698                           ;psect for function _getSwitchBypassState
 14699  2CE4                     _getSwitchBypassState:	
 14700                           
 14701                           ;state_manager.c: 108: return 0;
 14702                           
 14703                           ;incstack = 0
 14704                           ; Regs used in _getSwitchBypassState: [status,2]
 14705  2CE4  0021               	movlb	1	; select bank1
 14706  2CE5  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14707  2CE6  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14708  2CE7  0008               	return
 14709  2CE8                     __end_of_getSwitchBypassState:	
 14710                           
 14711                           	psect	text42
 14712  24B6                     __ptext42:	
 14713 ;; *************** function _getModulationDelayTime *****************
 14714 ;; Defined at:
 14715 ;;		line 35 in file "modulation.c"
 14716 ;; Parameters:    Size  Location     Type
 14717 ;;		None
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;  subDiv          2   14[BANK2 ] int 
 14720 ;; Return value:  Size  Location     Type
 14721 ;;                  1    wreg      void 
 14722 ;; Registers used:
 14723 ;;		wreg, status,2, status,0, pclath, cstack
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14730 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14732 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14733 ;;Total ram usage:        2 bytes
 14734 ;; Hardware stack levels used:    1
 14735 ;; Hardware stack levels required when called:    5
 14736 ;; This function calls:
 14737 ;;		___altoft
 14738 ;;		___awtoft
 14739 ;;		___ftdiv
 14740 ;;		___fttol
 14741 ;;		_getModulationSubdivision
 14742 ;; This function is called by:
 14743 ;;		_main
 14744 ;; This function uses a non-reentrant model
 14745 ;;
 14746                           
 14747                           
 14748                           ;psect for function _getModulationDelayTime
 14749  24B6                     _getModulationDelayTime:	
 14750                           
 14751                           ;modulation.c: 36: adjust_mod_delay = 0;
 14752                           
 14753                           ;incstack = 0
 14754                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14755  24B6  0023               	movlb	3	; select bank3
 14756  24B7  01BE               	clrf	_adjust_mod_delay^(0+384)
 14757                           
 14758                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14759  24B8  31AF  2762  31A4   	fcall	_getModulationSubdivision
 14760  24BB  0021               	movlb	1	; select bank1
 14761  24BC  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14762  24BD  0022               	movlb	2	; select bank2
 14763  24BE  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14764  24BF  0021               	movlb	1	; select bank1
 14765  24C0  0820               	movf	?_getModulationSubdivision^(0+128),w
 14766  24C1  0022               	movlb	2	; select bank2
 14767  24C2  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14768                           
 14769                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14770  24C3  0020               	movlb	0	; select bank0
 14771  24C4  0847               	movf	_delay_time+3,w	;volatile
 14772  24C5  0021               	movlb	1	; select bank1
 14773  24C6  00AB               	movwf	(___altoft@c+3)^(0+128)
 14774  24C7  0020               	movlb	0	; select bank0
 14775  24C8  0846               	movf	_delay_time+2,w	;volatile
 14776  24C9  0021               	movlb	1	; select bank1
 14777  24CA  00AA               	movwf	(___altoft@c+2)^(0+128)
 14778  24CB  0020               	movlb	0	; select bank0
 14779  24CC  0845               	movf	_delay_time+1,w	;volatile
 14780  24CD  0021               	movlb	1	; select bank1
 14781  24CE  00A9               	movwf	(___altoft@c+1)^(0+128)
 14782  24CF  0020               	movlb	0	; select bank0
 14783  24D0  0844               	movf	_delay_time,w	;volatile
 14784  24D1  0021               	movlb	1	; select bank1
 14785  24D2  00A8               	movwf	___altoft@c^(0+128)
 14786  24D3  31A0  20E6  31A4   	fcall	___altoft
 14787  24D6  0021               	movlb	1	; select bank1
 14788  24D7  0828               	movf	?___altoft^(0+128),w
 14789  24D8  00D1               	movwf	___ftdiv@f1^(0+128)
 14790  24D9  0829               	movf	(?___altoft+1)^(0+128),w
 14791  24DA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14792  24DB  082A               	movf	(?___altoft+2)^(0+128),w
 14793  24DC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14794  24DD  0022               	movlb	2	; select bank2
 14795  24DE  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14796  24DF  0021               	movlb	1	; select bank1
 14797  24E0  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14798  24E1  0022               	movlb	2	; select bank2
 14799  24E2  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14800  24E3  0021               	movlb	1	; select bank1
 14801  24E4  00A8               	movwf	___awtoft@c^(0+128)
 14802  24E5  31AE  263A  31A4   	fcall	___awtoft
 14803  24E8  0021               	movlb	1	; select bank1
 14804  24E9  0828               	movf	?___awtoft^(0+128),w
 14805  24EA  00CE               	movwf	___ftdiv@f2^(0+128)
 14806  24EB  0829               	movf	(?___awtoft+1)^(0+128),w
 14807  24EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14808  24ED  082A               	movf	(?___awtoft+2)^(0+128),w
 14809  24EE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14810  24EF  319C  2474  31A4   	fcall	___ftdiv
 14811  24F2  0021               	movlb	1	; select bank1
 14812  24F3  084E               	movf	?___ftdiv^(0+128),w
 14813  24F4  0022               	movlb	2	; select bank2
 14814  24F5  00A0               	movwf	___fttol@f1^(0+256)
 14815  24F6  0021               	movlb	1	; select bank1
 14816  24F7  084F               	movf	(?___ftdiv+1)^(0+128),w
 14817  24F8  0022               	movlb	2	; select bank2
 14818  24F9  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14819  24FA  0021               	movlb	1	; select bank1
 14820  24FB  0850               	movf	(?___ftdiv+2)^(0+128),w
 14821  24FC  0022               	movlb	2	; select bank2
 14822  24FD  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14823  24FE  3199  21AF         	fcall	___fttol
 14824  2500  0022               	movlb	2	; select bank2
 14825  2501  0821               	movf	(?___fttol^(0+256)+1),w
 14826  2502  0023               	movlb	3	; select bank3
 14827  2503  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14828  2504  0022               	movlb	2	; select bank2
 14829  2505  0820               	movf	?___fttol^(0+256),w
 14830  2506  0023               	movlb	3	; select bank3
 14831  2507  00D9               	movwf	_mod_delay_time^(0+384)
 14832  2508  0008               	return
 14833  2509                     __end_of_getModulationDelayTime:	
 14834                           
 14835                           	psect	text43
 14836  2F62                     __ptext43:	
 14837 ;; *************** function _getModulationSubdivision *****************
 14838 ;; Defined at:
 14839 ;;		line 26 in file "modulation.c"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;		None
 14842 ;; Auto vars:     Size  Location     Type
 14843 ;;		None
 14844 ;; Return value:  Size  Location     Type
 14845 ;;                  2    0[BANK1 ] int 
 14846 ;; Registers used:
 14847 ;;		wreg, status,2, status,0
 14848 ;; Tracked objects:
 14849 ;;		On entry : 0/0
 14850 ;;		On exit  : 0/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14853 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14856 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14857 ;;Total ram usage:        2 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; Hardware stack levels required when called:    3
 14860 ;; This function calls:
 14861 ;;		Nothing
 14862 ;; This function is called by:
 14863 ;;		_getModulationDelayTime
 14864 ;;		_updateModulationArray
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           
 14869                           ;psect for function _getModulationSubdivision
 14870  2F62                     _getModulationSubdivision:	
 14871                           
 14872                           ;modulation.c: 27: if (delay_time >= 2400) {
 14873                           
 14874                           ;incstack = 0
 14875                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14876  2F62  0020               	movlb	0	; select bank0
 14877  2F63  1BC7               	btfsc	_delay_time+3,7	;volatile
 14878  2F64  2F77               	goto	l8412
 14879  2F65  0847               	movf	_delay_time+3,w	;volatile
 14880  2F66  1D03               	btfss	3,2
 14881  2F67  2F71               	goto	l8406
 14882  2F68  0846               	movf	_delay_time+2,w	;volatile
 14883  2F69  1D03               	btfss	3,2
 14884  2F6A  2F71               	goto	l8406
 14885  2F6B  3060               	movlw	96
 14886  2F6C  0244               	subwf	_delay_time,w	;volatile
 14887  2F6D  3009               	movlw	9
 14888  2F6E  3B45               	subwfb	_delay_time+1,w	;volatile
 14889  2F6F  1C03               	btfss	3,0
 14890  2F70  2F77               	goto	l8412
 14891  2F71                     l8406:	
 14892                           
 14893                           ;modulation.c: 28: return 120;
 14894  2F71  3078               	movlw	120
 14895  2F72  0021               	movlb	1	; select bank1
 14896  2F73  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14897  2F74  3000               	movlw	0
 14898  2F75  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14899                           
 14900                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14901  2F76  0008               	return
 14902  2F77                     l8412:	
 14903  2F77  0020               	movlb	0	; select bank0
 14904  2F78  1BC7               	btfsc	_delay_time+3,7	;volatile
 14905  2F79  2F8C               	goto	l8420
 14906  2F7A  0847               	movf	_delay_time+3,w	;volatile
 14907  2F7B  1D03               	btfss	3,2
 14908  2F7C  2F86               	goto	l8414
 14909  2F7D  0846               	movf	_delay_time+2,w	;volatile
 14910  2F7E  1D03               	btfss	3,2
 14911  2F7F  2F86               	goto	l8414
 14912  2F80  3058               	movlw	88
 14913  2F81  0244               	subwf	_delay_time,w	;volatile
 14914  2F82  3002               	movlw	2
 14915  2F83  3B45               	subwfb	_delay_time+1,w	;volatile
 14916  2F84  1C03               	btfss	3,0
 14917  2F85  2F8C               	goto	l8420
 14918  2F86                     l8414:	
 14919                           
 14920                           ;modulation.c: 30: return 60;
 14921  2F86  303C               	movlw	60
 14922  2F87  0021               	movlb	1	; select bank1
 14923  2F88  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14924  2F89  3000               	movlw	0
 14925  2F8A  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14926                           
 14927                           ;modulation.c: 31: } else {
 14928  2F8B  0008               	return
 14929  2F8C                     l8420:	
 14930                           
 14931                           ;modulation.c: 32: return 30;
 14932  2F8C  301E               	movlw	30
 14933  2F8D  0021               	movlb	1	; select bank1
 14934  2F8E  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14935  2F8F  3000               	movlw	0
 14936  2F90  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14937  2F91  0008               	return
 14938  2F92                     __end_of_getModulationSubdivision:	
 14939                           
 14940                           	psect	text44
 14941  277F                     __ptext44:	
 14942 ;; *************** function _calcCosArray *****************
 14943 ;; Defined at:
 14944 ;;		line 18 in file "modulation.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;		None
 14947 ;; Auto vars:     Size  Location     Type
 14948 ;;  tmpVal          3   54[BANK2 ] int 
 14949 ;;  iAngle          1   57[BANK2 ] unsigned char 
 14950 ;; Return value:  Size  Location     Type
 14951 ;;                  1    wreg      void 
 14952 ;; Registers used:
 14953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : 0/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14960 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14961 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14962 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14963 ;;Total ram usage:        8 bytes
 14964 ;; Hardware stack levels used:    1
 14965 ;; Hardware stack levels required when called:    8
 14966 ;; This function calls:
 14967 ;;		___awtoft
 14968 ;;		___ftdiv
 14969 ;;		___ftmul
 14970 ;;		___wmul
 14971 ;;		_cos
 14972 ;; This function is called by:
 14973 ;;		_main
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           
 14978                           ;psect for function _calcCosArray
 14979  277F                     _calcCosArray:	
 14980                           
 14981                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14982                           
 14983                           ;incstack = 0
 14984                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14985  277F  0022               	movlb	2	; select bank2
 14986  2780  01D9               	clrf	calcCosArray@iAngle^(0+256)
 14987  2781                     L17:	
 14988  2781  3078               	movlw	120
 14989  2782  0259               	subwf	calcCosArray@iAngle^(0+256),w
 14990  2783  1803               	btfsc	3,0
 14991  2784  0008               	return
 14992                           
 14993                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14994  2785  3000               	movlw	0
 14995  2786  0021               	movlb	1	; select bank1
 14996  2787  00CE               	movwf	___ftdiv@f2^(0+128)
 14997  2788  3034               	movlw	52
 14998  2789  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14999  278A  3043               	movlw	67
 15000  278B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15001  278C  3010               	movlw	16
 15002  278D  00AE               	movwf	___ftmul@f1^(0+128)
 15003  278E  3049               	movlw	73
 15004  278F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15005  2790  3040               	movlw	64
 15006  2791  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15007  2792  0022               	movlb	2	; select bank2
 15008  2793  0859               	movf	calcCosArray@iAngle^(0+256),w
 15009  2794  00D2               	movwf	??_calcCosArray^(0+256)
 15010  2795  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15011  2796  0852               	movf	??_calcCosArray^(0+256),w
 15012  2797  00AE               	movwf	___wmul@multiplier^(0+256)
 15013  2798  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15014  2799  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15015  279A  3003               	movlw	3
 15016  279B  00B0               	movwf	___wmul@multiplicand^(0+256)
 15017  279C  3000               	movlw	0
 15018  279D  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15019  279E  31AD  25C5  31A7   	fcall	___wmul
 15020  27A1  0022               	movlb	2	; select bank2
 15021  27A2  082F               	movf	(?___wmul+1)^(0+256),w
 15022  27A3  0021               	movlb	1	; select bank1
 15023  27A4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15024  27A5  0022               	movlb	2	; select bank2
 15025  27A6  082E               	movf	?___wmul^(0+256),w
 15026  27A7  0021               	movlb	1	; select bank1
 15027  27A8  00A8               	movwf	___awtoft@c^(0+128)
 15028  27A9  31AE  263A  31A7   	fcall	___awtoft
 15029  27AC  0021               	movlb	1	; select bank1
 15030  27AD  0828               	movf	?___awtoft^(0+128),w
 15031  27AE  00B1               	movwf	___ftmul@f2^(0+128)
 15032  27AF  0829               	movf	(?___awtoft+1)^(0+128),w
 15033  27B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15034  27B1  082A               	movf	(?___awtoft+2)^(0+128),w
 15035  27B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15036  27B3  319E  267B  31A7   	fcall	___ftmul
 15037  27B6  0021               	movlb	1	; select bank1
 15038  27B7  082E               	movf	?___ftmul^(0+128),w
 15039  27B8  00D1               	movwf	___ftdiv@f1^(0+128)
 15040  27B9  082F               	movf	(?___ftmul+1)^(0+128),w
 15041  27BA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15042  27BB  0830               	movf	(?___ftmul+2)^(0+128),w
 15043  27BC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15044  27BD  319C  2474  31A7   	fcall	___ftdiv
 15045  27C0  0021               	movlb	1	; select bank1
 15046  27C1  084E               	movf	?___ftdiv^(0+128),w
 15047  27C2  0022               	movlb	2	; select bank2
 15048  27C3  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15049  27C4  0021               	movlb	1	; select bank1
 15050  27C5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15051  27C6  0022               	movlb	2	; select bank2
 15052  27C7  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15053  27C8  0021               	movlb	1	; select bank1
 15054  27C9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15055  27CA  0022               	movlb	2	; select bank2
 15056  27CB  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15057                           
 15058                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 15059  27CC  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15060  27CD  00CC               	movwf	cos@f^(0+256)
 15061  27CE  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15062  27CF  00CD               	movwf	(cos@f+1)^(0+256)
 15063  27D0  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15064  27D1  00CE               	movwf	(cos@f+2)^(0+256)
 15065  27D2  31A7  2703  31A7   	fcall	_cos
 15066  27D5  0022               	movlb	2	; select bank2
 15067  27D6  084C               	movf	?_cos^(0+256),w
 15068  27D7  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 15069  27D8  084D               	movf	(?_cos+1)^(0+256),w
 15070  27D9  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 15071  27DA  084E               	movf	(?_cos+2)^(0+256),w
 15072  27DB  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 15073                           
 15074                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 15075  27DC  0859               	movf	calcCosArray@iAngle^(0+256),w
 15076  27DD  00D2               	movwf	??_calcCosArray^(0+256)
 15077  27DE  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 15078  27DF  0852               	movf	??_calcCosArray^(0+256),w
 15079  27E0  00AE               	movwf	___wmul@multiplier^(0+256)
 15080  27E1  0853               	movf	(??_calcCosArray+1)^(0+256),w
 15081  27E2  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15082  27E3  3003               	movlw	3
 15083  27E4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15084  27E5  3000               	movlw	0
 15085  27E6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15086  27E7  31AD  25C5  31A7   	fcall	___wmul
 15087  27EA  3082               	movlw	130
 15088  27EB  0022               	movlb	2	; select bank2
 15089  27EC  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 15090  27ED  3024               	movlw	36
 15091  27EE  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 15092  27EF  082E               	movf	?___wmul^(0+256),w
 15093  27F0  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 15094  27F1  0086               	movwf	6
 15095  27F2  082F               	movf	(?___wmul+1)^(0+256),w
 15096  27F3  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 15097  27F4  0087               	movwf	7
 15098  27F5  0856               	movf	calcCosArray@tmpVal^(0+256),w
 15099  27F6  3FC0               	movwi [0]fsr1
 15100  27F7  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 15101  27F8  3FC1               	movwi [1]fsr1
 15102  27F9  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 15103  27FA  3FC2               	movwi [2]fsr1
 15104  27FB  3001               	movlw	1
 15105  27FC  00D2               	movwf	??_calcCosArray^(0+256)
 15106  27FD  0852               	movf	??_calcCosArray^(0+256),w
 15107  27FE  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 15108  27FF  2F81               	goto	L17
 15109  2800                     __end_of_calcCosArray:	
 15110                           
 15111                           	psect	text45
 15112  2703                     __ptext45:	
 15113 ;; *************** function _cos *****************
 15114 ;; Defined at:
 15115 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 15116 ;; Parameters:    Size  Location     Type
 15117 ;;  f               3   44[BANK2 ] void 
 15118 ;; Auto vars:     Size  Location     Type
 15119 ;;		None
 15120 ;; Return value:  Size  Location     Type
 15121 ;;                  3   44[BANK2 ] void 
 15122 ;; Registers used:
 15123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15124 ;; Tracked objects:
 15125 ;;		On entry : 0/0
 15126 ;;		On exit  : 0/0
 15127 ;;		Unchanged: 0/0
 15128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15129 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15130 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15132 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15133 ;;Total ram usage:        6 bytes
 15134 ;; Hardware stack levels used:    1
 15135 ;; Hardware stack levels required when called:    7
 15136 ;; This function calls:
 15137 ;;		___ftadd
 15138 ;;		___ftge
 15139 ;;		_sin
 15140 ;; This function is called by:
 15141 ;;		_calcCosArray
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145                           
 15146                           ;psect for function _cos
 15147  2703                     _cos:	
 15148                           
 15149                           ;incstack = 0
 15150                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15151  2703  3010               	movlw	16
 15152  2704  0021               	movlb	1	; select bank1
 15153  2705  00A0               	movwf	___ftge@ff1^(0+128)
 15154  2706  3049               	movlw	73
 15155  2707  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15156  2708  3040               	movlw	64
 15157  2709  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15158  270A  0022               	movlb	2	; select bank2
 15159  270B  084C               	movf	cos@f^(0+256),w
 15160  270C  0021               	movlb	1	; select bank1
 15161  270D  00A3               	movwf	___ftge@ff2^(0+128)
 15162  270E  0022               	movlb	2	; select bank2
 15163  270F  084D               	movf	(cos@f+1)^(0+256),w
 15164  2710  0021               	movlb	1	; select bank1
 15165  2711  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15166  2712  0022               	movlb	2	; select bank2
 15167  2713  084E               	movf	(cos@f+2)^(0+256),w
 15168  2714  0021               	movlb	1	; select bank1
 15169  2715  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15170  2716  31A0  20AA  31A7   	fcall	___ftge
 15171  2719  1803               	btfsc	3,0
 15172  271A  2F4D               	goto	l8582
 15173  271B  30CC               	movlw	204
 15174  271C  0021               	movlb	1	; select bank1
 15175  271D  00C1               	movwf	___ftadd@f1^(0+128)
 15176  271E  3096               	movlw	150
 15177  271F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15178  2720  30C0               	movlw	192
 15179  2721  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15180  2722  0022               	movlb	2	; select bank2
 15181  2723  084C               	movf	cos@f^(0+256),w
 15182  2724  0021               	movlb	1	; select bank1
 15183  2725  00C4               	movwf	___ftadd@f2^(0+128)
 15184  2726  0022               	movlb	2	; select bank2
 15185  2727  084D               	movf	(cos@f+1)^(0+256),w
 15186  2728  0021               	movlb	1	; select bank1
 15187  2729  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15188  272A  0022               	movlb	2	; select bank2
 15189  272B  084E               	movf	(cos@f+2)^(0+256),w
 15190  272C  0021               	movlb	1	; select bank1
 15191  272D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15192  272E  3190  2035  31A7   	fcall	___ftadd
 15193  2731  0021               	movlb	1	; select bank1
 15194  2732  0841               	movf	?___ftadd^(0+128),w
 15195  2733  0022               	movlb	2	; select bank2
 15196  2734  00CF               	movwf	_cos$2856^(0+256)
 15197  2735  0021               	movlb	1	; select bank1
 15198  2736  0842               	movf	(?___ftadd+1)^(0+128),w
 15199  2737  0022               	movlb	2	; select bank2
 15200  2738  00D0               	movwf	(_cos$2856+1)^(0+256)
 15201  2739  0021               	movlb	1	; select bank1
 15202  273A  0843               	movf	(?___ftadd+2)^(0+128),w
 15203  273B  0022               	movlb	2	; select bank2
 15204  273C  00D1               	movwf	(_cos$2856+2)^(0+256)
 15205  273D  084F               	movf	_cos$2856^(0+256),w
 15206  273E  00BE               	movwf	sin@f^(0+256)
 15207  273F  0850               	movf	(_cos$2856+1)^(0+256),w
 15208  2740  00BF               	movwf	(sin@f+1)^(0+256)
 15209  2741  0851               	movf	(_cos$2856+2)^(0+256),w
 15210  2742  00C0               	movwf	(sin@f+2)^(0+256)
 15211  2743  3188  2020         	fcall	_sin
 15212  2745  0022               	movlb	2	; select bank2
 15213  2746  083E               	movf	?_sin^(0+256),w
 15214  2747  00CC               	movwf	?_cos^(0+256)
 15215  2748  083F               	movf	(?_sin+1)^(0+256),w
 15216  2749  00CD               	movwf	(?_cos+1)^(0+256)
 15217  274A  0840               	movf	(?_sin+2)^(0+256),w
 15218  274B  00CE               	movwf	(?_cos+2)^(0+256)
 15219  274C  0008               	return
 15220  274D                     l8582:	
 15221  274D  3010               	movlw	16
 15222  274E  0021               	movlb	1	; select bank1
 15223  274F  00C1               	movwf	___ftadd@f1^(0+128)
 15224  2750  30C9               	movlw	201
 15225  2751  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15226  2752  303F               	movlw	63
 15227  2753  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15228  2754  0022               	movlb	2	; select bank2
 15229  2755  084C               	movf	cos@f^(0+256),w
 15230  2756  0021               	movlb	1	; select bank1
 15231  2757  00C4               	movwf	___ftadd@f2^(0+128)
 15232  2758  0022               	movlb	2	; select bank2
 15233  2759  084D               	movf	(cos@f+1)^(0+256),w
 15234  275A  0021               	movlb	1	; select bank1
 15235  275B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15236  275C  0022               	movlb	2	; select bank2
 15237  275D  084E               	movf	(cos@f+2)^(0+256),w
 15238  275E  0021               	movlb	1	; select bank1
 15239  275F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15240  2760  3190  2035  31A7   	fcall	___ftadd
 15241  2763  0021               	movlb	1	; select bank1
 15242  2764  0841               	movf	?___ftadd^(0+128),w
 15243  2765  0022               	movlb	2	; select bank2
 15244  2766  00CF               	movwf	_cos$2856^(0+256)
 15245  2767  0021               	movlb	1	; select bank1
 15246  2768  0842               	movf	(?___ftadd+1)^(0+128),w
 15247  2769  0022               	movlb	2	; select bank2
 15248  276A  00D0               	movwf	(_cos$2856+1)^(0+256)
 15249  276B  0021               	movlb	1	; select bank1
 15250  276C  0843               	movf	(?___ftadd+2)^(0+128),w
 15251  276D  0022               	movlb	2	; select bank2
 15252  276E  00D1               	movwf	(_cos$2856+2)^(0+256)
 15253  276F  084F               	movf	_cos$2856^(0+256),w
 15254  2770  00BE               	movwf	sin@f^(0+256)
 15255  2771  0850               	movf	(_cos$2856+1)^(0+256),w
 15256  2772  00BF               	movwf	(sin@f+1)^(0+256)
 15257  2773  0851               	movf	(_cos$2856+2)^(0+256),w
 15258  2774  00C0               	movwf	(sin@f+2)^(0+256)
 15259  2775  3188  2020         	fcall	_sin
 15260  2777  0022               	movlb	2	; select bank2
 15261  2778  083E               	movf	?_sin^(0+256),w
 15262  2779  00CC               	movwf	?_cos^(0+256)
 15263  277A  083F               	movf	(?_sin+1)^(0+256),w
 15264  277B  00CD               	movwf	(?_cos+1)^(0+256)
 15265  277C  0840               	movf	(?_sin+2)^(0+256),w
 15266  277D  00CE               	movwf	(?_cos+2)^(0+256)
 15267  277E  0008               	return
 15268  277F                     __end_of_cos:	
 15269                           
 15270                           	psect	text46
 15271  0820                     __ptext46:	
 15272 ;; *************** function _sin *****************
 15273 ;; Defined at:
 15274 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15275 ;; Parameters:    Size  Location     Type
 15276 ;;  f               3   30[BANK2 ] void 
 15277 ;; Auto vars:     Size  Location     Type
 15278 ;;  x2              3   40[BANK2 ] void 
 15279 ;;  y               3   34[BANK2 ] void 
 15280 ;;  sgn             1   43[BANK2 ] unsigned char 
 15281 ;; Return value:  Size  Location     Type
 15282 ;;                  3   30[BANK2 ] unsigned char 
 15283 ;; Registers used:
 15284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15285 ;; Tracked objects:
 15286 ;;		On entry : 0/0
 15287 ;;		On exit  : 0/0
 15288 ;;		Unchanged: 0/0
 15289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15290 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15291 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15292 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15293 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15294 ;;Total ram usage:       14 bytes
 15295 ;; Hardware stack levels used:    1
 15296 ;; Hardware stack levels required when called:    6
 15297 ;; This function calls:
 15298 ;;		___ftadd
 15299 ;;		___ftdiv
 15300 ;;		___ftge
 15301 ;;		___ftmul
 15302 ;;		___ftneg
 15303 ;;		___ftsub
 15304 ;;		_eval_poly
 15305 ;;		_floor
 15306 ;; This function is called by:
 15307 ;;		_cos
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           
 15312                           ;psect for function _sin
 15313  0820                     _sin:	
 15314                           
 15315                           ;incstack = 0
 15316                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15317  0820  0022               	movlb	2	; select bank2
 15318  0821  01CB               	clrf	sin@sgn^(0+256)
 15319  0822  083E               	movf	sin@f^(0+256),w
 15320  0823  0021               	movlb	1	; select bank1
 15321  0824  00A0               	movwf	___ftge@ff1^(0+128)
 15322  0825  0022               	movlb	2	; select bank2
 15323  0826  083F               	movf	(sin@f+1)^(0+256),w
 15324  0827  0021               	movlb	1	; select bank1
 15325  0828  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15326  0829  0022               	movlb	2	; select bank2
 15327  082A  0840               	movf	(sin@f+2)^(0+256),w
 15328  082B  0021               	movlb	1	; select bank1
 15329  082C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15330  082D  3000               	movlw	0
 15331  082E  00A3               	movwf	___ftge@ff2^(0+128)
 15332  082F  3000               	movlw	0
 15333  0830  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15334  0831  3000               	movlw	0
 15335  0832  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15336  0833  31A0  20AA  3188   	fcall	___ftge
 15337  0836  1803               	btfsc	3,0
 15338  0837  2855               	goto	l8292
 15339  0838  0022               	movlb	2	; select bank2
 15340  0839  083E               	movf	sin@f^(0+256),w
 15341  083A  0021               	movlb	1	; select bank1
 15342  083B  00BE               	movwf	___ftneg@f1^(0+128)
 15343  083C  0022               	movlb	2	; select bank2
 15344  083D  083F               	movf	(sin@f+1)^(0+256),w
 15345  083E  0021               	movlb	1	; select bank1
 15346  083F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15347  0840  0022               	movlb	2	; select bank2
 15348  0841  0840               	movf	(sin@f+2)^(0+256),w
 15349  0842  0021               	movlb	1	; select bank1
 15350  0843  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15351  0844  31AC  24F8  3188   	fcall	___ftneg
 15352  0847  0021               	movlb	1	; select bank1
 15353  0848  083E               	movf	?___ftneg^(0+128),w
 15354  0849  0022               	movlb	2	; select bank2
 15355  084A  00BE               	movwf	sin@f^(0+256)
 15356  084B  0021               	movlb	1	; select bank1
 15357  084C  083F               	movf	(?___ftneg+1)^(0+128),w
 15358  084D  0022               	movlb	2	; select bank2
 15359  084E  00BF               	movwf	(sin@f+1)^(0+256)
 15360  084F  0021               	movlb	1	; select bank1
 15361  0850  0840               	movf	(?___ftneg+2)^(0+128),w
 15362  0851  0022               	movlb	2	; select bank2
 15363  0852  00C0               	movwf	(sin@f+2)^(0+256)
 15364  0853  01CB               	clrf	sin@sgn^(0+256)
 15365  0854  0ACB               	incf	sin@sgn^(0+256),f
 15366  0855                     l8292:	
 15367  0855  30FA               	movlw	250
 15368  0856  0021               	movlb	1	; select bank1
 15369  0857  00AE               	movwf	___ftmul@f1^(0+128)
 15370  0858  3022               	movlw	34
 15371  0859  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15372  085A  303E               	movlw	62
 15373  085B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15374  085C  0022               	movlb	2	; select bank2
 15375  085D  083E               	movf	sin@f^(0+256),w
 15376  085E  0021               	movlb	1	; select bank1
 15377  085F  00B1               	movwf	___ftmul@f2^(0+128)
 15378  0860  0022               	movlb	2	; select bank2
 15379  0861  083F               	movf	(sin@f+1)^(0+256),w
 15380  0862  0021               	movlb	1	; select bank1
 15381  0863  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15382  0864  0022               	movlb	2	; select bank2
 15383  0865  0840               	movf	(sin@f+2)^(0+256),w
 15384  0866  0021               	movlb	1	; select bank1
 15385  0867  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15386  0868  319E  267B  3188   	fcall	___ftmul
 15387  086B  0021               	movlb	1	; select bank1
 15388  086C  082E               	movf	?___ftmul^(0+128),w
 15389  086D  0022               	movlb	2	; select bank2
 15390  086E  00BE               	movwf	sin@f^(0+256)
 15391  086F  0021               	movlb	1	; select bank1
 15392  0870  082F               	movf	(?___ftmul+1)^(0+128),w
 15393  0871  0022               	movlb	2	; select bank2
 15394  0872  00BF               	movwf	(sin@f+1)^(0+256)
 15395  0873  0021               	movlb	1	; select bank1
 15396  0874  0830               	movf	(?___ftmul+2)^(0+128),w
 15397  0875  0022               	movlb	2	; select bank2
 15398  0876  00C0               	movwf	(sin@f+2)^(0+256)
 15399  0877  083E               	movf	sin@f^(0+256),w
 15400  0878  00AE               	movwf	floor@x^(0+256)
 15401  0879  083F               	movf	(sin@f+1)^(0+256),w
 15402  087A  00AF               	movwf	(floor@x+1)^(0+256)
 15403  087B  0840               	movf	(sin@f+2)^(0+256),w
 15404  087C  00B0               	movwf	(floor@x+2)^(0+256)
 15405  087D  319D  25C8  3188   	fcall	_floor
 15406  0880  0022               	movlb	2	; select bank2
 15407  0881  082E               	movf	?_floor^(0+256),w
 15408  0882  00B7               	movwf	___ftsub@f2^(0+256)
 15409  0883  082F               	movf	(?_floor+1)^(0+256),w
 15410  0884  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15411  0885  0830               	movf	(?_floor+2)^(0+256),w
 15412  0886  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15413  0887  083E               	movf	sin@f^(0+256),w
 15414  0888  00BA               	movwf	___ftsub@f1^(0+256)
 15415  0889  083F               	movf	(sin@f+1)^(0+256),w
 15416  088A  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15417  088B  0840               	movf	(sin@f+2)^(0+256),w
 15418  088C  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15419  088D  31AE  26D5  3188   	fcall	___ftsub
 15420  0890  0022               	movlb	2	; select bank2
 15421  0891  0837               	movf	?___ftsub^(0+256),w
 15422  0892  00BE               	movwf	sin@f^(0+256)
 15423  0893  0838               	movf	(?___ftsub+1)^(0+256),w
 15424  0894  00BF               	movwf	(sin@f+1)^(0+256)
 15425  0895  0839               	movf	(?___ftsub+2)^(0+256),w
 15426  0896  00C0               	movwf	(sin@f+2)^(0+256)
 15427  0897  3000               	movlw	0
 15428  0898  0021               	movlb	1	; select bank1
 15429  0899  00AE               	movwf	___ftmul@f1^(0+128)
 15430  089A  3080               	movlw	128
 15431  089B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15432  089C  3040               	movlw	64
 15433  089D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15434  089E  0022               	movlb	2	; select bank2
 15435  089F  083E               	movf	sin@f^(0+256),w
 15436  08A0  0021               	movlb	1	; select bank1
 15437  08A1  00B1               	movwf	___ftmul@f2^(0+128)
 15438  08A2  0022               	movlb	2	; select bank2
 15439  08A3  083F               	movf	(sin@f+1)^(0+256),w
 15440  08A4  0021               	movlb	1	; select bank1
 15441  08A5  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15442  08A6  0022               	movlb	2	; select bank2
 15443  08A7  0840               	movf	(sin@f+2)^(0+256),w
 15444  08A8  0021               	movlb	1	; select bank1
 15445  08A9  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15446  08AA  319E  267B  3188   	fcall	___ftmul
 15447  08AD  0021               	movlb	1	; select bank1
 15448  08AE  082E               	movf	?___ftmul^(0+128),w
 15449  08AF  0022               	movlb	2	; select bank2
 15450  08B0  00BE               	movwf	sin@f^(0+256)
 15451  08B1  0021               	movlb	1	; select bank1
 15452  08B2  082F               	movf	(?___ftmul+1)^(0+128),w
 15453  08B3  0022               	movlb	2	; select bank2
 15454  08B4  00BF               	movwf	(sin@f+1)^(0+256)
 15455  08B5  0021               	movlb	1	; select bank1
 15456  08B6  0830               	movf	(?___ftmul+2)^(0+128),w
 15457  08B7  0022               	movlb	2	; select bank2
 15458  08B8  00C0               	movwf	(sin@f+2)^(0+256)
 15459  08B9  3000               	movlw	0
 15460  08BA  0021               	movlb	1	; select bank1
 15461  08BB  00A0               	movwf	___ftge@ff1^(0+128)
 15462  08BC  3000               	movlw	0
 15463  08BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15464  08BE  3040               	movlw	64
 15465  08BF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15466  08C0  0022               	movlb	2	; select bank2
 15467  08C1  083E               	movf	sin@f^(0+256),w
 15468  08C2  0021               	movlb	1	; select bank1
 15469  08C3  00A3               	movwf	___ftge@ff2^(0+128)
 15470  08C4  0022               	movlb	2	; select bank2
 15471  08C5  083F               	movf	(sin@f+1)^(0+256),w
 15472  08C6  0021               	movlb	1	; select bank1
 15473  08C7  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15474  08C8  0022               	movlb	2	; select bank2
 15475  08C9  0840               	movf	(sin@f+2)^(0+256),w
 15476  08CA  0021               	movlb	1	; select bank1
 15477  08CB  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15478  08CC  31A0  20AA  3188   	fcall	___ftge
 15479  08CF  1803               	btfsc	3,0
 15480  08D0  28F1               	goto	l8304
 15481  08D1  3000               	movlw	0
 15482  08D2  0022               	movlb	2	; select bank2
 15483  08D3  00B7               	movwf	___ftsub@f2^(0+256)
 15484  08D4  3000               	movlw	0
 15485  08D5  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15486  08D6  3040               	movlw	64
 15487  08D7  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15488  08D8  083E               	movf	sin@f^(0+256),w
 15489  08D9  00BA               	movwf	___ftsub@f1^(0+256)
 15490  08DA  083F               	movf	(sin@f+1)^(0+256),w
 15491  08DB  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15492  08DC  0840               	movf	(sin@f+2)^(0+256),w
 15493  08DD  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15494  08DE  31AE  26D5  3188   	fcall	___ftsub
 15495  08E1  0022               	movlb	2	; select bank2
 15496  08E2  0837               	movf	?___ftsub^(0+256),w
 15497  08E3  00BE               	movwf	sin@f^(0+256)
 15498  08E4  0838               	movf	(?___ftsub+1)^(0+256),w
 15499  08E5  00BF               	movwf	(sin@f+1)^(0+256)
 15500  08E6  0839               	movf	(?___ftsub+2)^(0+256),w
 15501  08E7  00C0               	movwf	(sin@f+2)^(0+256)
 15502  08E8  084B               	movf	sin@sgn^(0+256),w
 15503  08E9  1D03               	btfss	3,2
 15504  08EA  28ED               	goto	u8760
 15505  08EB  3001               	movlw	1
 15506  08EC  28EE               	goto	u8770
 15507  08ED                     u8760:	
 15508  08ED  3000               	movlw	0
 15509  08EE                     u8770:	
 15510  08EE  00C1               	movwf	??_sin^(0+256)
 15511  08EF  0841               	movf	??_sin^(0+256),w
 15512  08F0  00CB               	movwf	sin@sgn^(0+256)
 15513  08F1                     l8304:	
 15514  08F1  3000               	movlw	0
 15515  08F2  0021               	movlb	1	; select bank1
 15516  08F3  00A0               	movwf	___ftge@ff1^(0+128)
 15517  08F4  3080               	movlw	128
 15518  08F5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15519  08F6  303F               	movlw	63
 15520  08F7  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15521  08F8  0022               	movlb	2	; select bank2
 15522  08F9  083E               	movf	sin@f^(0+256),w
 15523  08FA  0021               	movlb	1	; select bank1
 15524  08FB  00A3               	movwf	___ftge@ff2^(0+128)
 15525  08FC  0022               	movlb	2	; select bank2
 15526  08FD  083F               	movf	(sin@f+1)^(0+256),w
 15527  08FE  0021               	movlb	1	; select bank1
 15528  08FF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15529  0900  0022               	movlb	2	; select bank2
 15530  0901  0840               	movf	(sin@f+2)^(0+256),w
 15531  0902  0021               	movlb	1	; select bank1
 15532  0903  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15533  0904  31A0  20AA  3188   	fcall	___ftge
 15534  0907  1803               	btfsc	3,0
 15535  0908  2935               	goto	l2378
 15536  0909  3000               	movlw	0
 15537  090A  0021               	movlb	1	; select bank1
 15538  090B  00C1               	movwf	___ftadd@f1^(0+128)
 15539  090C  3000               	movlw	0
 15540  090D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15541  090E  3040               	movlw	64
 15542  090F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15543  0910  0022               	movlb	2	; select bank2
 15544  0911  083E               	movf	sin@f^(0+256),w
 15545  0912  0021               	movlb	1	; select bank1
 15546  0913  00BE               	movwf	___ftneg@f1^(0+128)
 15547  0914  0022               	movlb	2	; select bank2
 15548  0915  083F               	movf	(sin@f+1)^(0+256),w
 15549  0916  0021               	movlb	1	; select bank1
 15550  0917  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15551  0918  0022               	movlb	2	; select bank2
 15552  0919  0840               	movf	(sin@f+2)^(0+256),w
 15553  091A  0021               	movlb	1	; select bank1
 15554  091B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15555  091C  31AC  24F8  3188   	fcall	___ftneg
 15556  091F  0021               	movlb	1	; select bank1
 15557  0920  083E               	movf	?___ftneg^(0+128),w
 15558  0921  00C4               	movwf	___ftadd@f2^(0+128)
 15559  0922  083F               	movf	(?___ftneg+1)^(0+128),w
 15560  0923  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15561  0924  0840               	movf	(?___ftneg+2)^(0+128),w
 15562  0925  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15563  0926  3190  2035  3188   	fcall	___ftadd
 15564  0929  0021               	movlb	1	; select bank1
 15565  092A  0841               	movf	?___ftadd^(0+128),w
 15566  092B  0022               	movlb	2	; select bank2
 15567  092C  00BE               	movwf	sin@f^(0+256)
 15568  092D  0021               	movlb	1	; select bank1
 15569  092E  0842               	movf	(?___ftadd+1)^(0+128),w
 15570  092F  0022               	movlb	2	; select bank2
 15571  0930  00BF               	movwf	(sin@f+1)^(0+256)
 15572  0931  0021               	movlb	1	; select bank1
 15573  0932  0843               	movf	(?___ftadd+2)^(0+128),w
 15574  0933  0022               	movlb	2	; select bank2
 15575  0934  00C0               	movwf	(sin@f+2)^(0+256)
 15576  0935                     l2378:	
 15577  0935  0022               	movlb	2	; select bank2
 15578  0936  083E               	movf	sin@f^(0+256),w
 15579  0937  0021               	movlb	1	; select bank1
 15580  0938  00AE               	movwf	___ftmul@f1^(0+128)
 15581  0939  0022               	movlb	2	; select bank2
 15582  093A  083F               	movf	(sin@f+1)^(0+256),w
 15583  093B  0021               	movlb	1	; select bank1
 15584  093C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15585  093D  0022               	movlb	2	; select bank2
 15586  093E  0840               	movf	(sin@f+2)^(0+256),w
 15587  093F  0021               	movlb	1	; select bank1
 15588  0940  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15589  0941  0022               	movlb	2	; select bank2
 15590  0942  083E               	movf	sin@f^(0+256),w
 15591  0943  0021               	movlb	1	; select bank1
 15592  0944  00B1               	movwf	___ftmul@f2^(0+128)
 15593  0945  0022               	movlb	2	; select bank2
 15594  0946  083F               	movf	(sin@f+1)^(0+256),w
 15595  0947  0021               	movlb	1	; select bank1
 15596  0948  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15597  0949  0022               	movlb	2	; select bank2
 15598  094A  0840               	movf	(sin@f+2)^(0+256),w
 15599  094B  0021               	movlb	1	; select bank1
 15600  094C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15601  094D  319E  267B  3188   	fcall	___ftmul
 15602  0950  0021               	movlb	1	; select bank1
 15603  0951  082E               	movf	?___ftmul^(0+128),w
 15604  0952  0022               	movlb	2	; select bank2
 15605  0953  00C8               	movwf	sin@x2^(0+256)
 15606  0954  0021               	movlb	1	; select bank1
 15607  0955  082F               	movf	(?___ftmul+1)^(0+128),w
 15608  0956  0022               	movlb	2	; select bank2
 15609  0957  00C9               	movwf	(sin@x2+1)^(0+256)
 15610  0958  0021               	movlb	1	; select bank1
 15611  0959  0830               	movf	(?___ftmul+2)^(0+128),w
 15612  095A  0022               	movlb	2	; select bank2
 15613  095B  00CA               	movwf	(sin@x2+2)^(0+256)
 15614  095C  0848               	movf	sin@x2^(0+256),w
 15615  095D  00B4               	movwf	eval_poly@x^(0+256)
 15616  095E  0849               	movf	(sin@x2+1)^(0+256),w
 15617  095F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15618  0960  084A               	movf	(sin@x2+2)^(0+256),w
 15619  0961  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15620  0962  3048               	movlw	low (sin@coeff_b| (0+32768))
 15621  0963  00B7               	movwf	eval_poly@d^(0+256)
 15622  0964  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15623  0965  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15624  0966  3003               	movlw	3
 15625  0967  00B9               	movwf	eval_poly@n^(0+256)
 15626  0968  3000               	movlw	0
 15627  0969  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15628  096A  31A6  261B  3188   	fcall	_eval_poly
 15629  096D  0022               	movlb	2	; select bank2
 15630  096E  0834               	movf	?_eval_poly^(0+256),w
 15631  096F  00C2               	movwf	sin@y^(0+256)
 15632  0970  0835               	movf	(?_eval_poly+1)^(0+256),w
 15633  0971  00C3               	movwf	(sin@y+1)^(0+256)
 15634  0972  0836               	movf	(?_eval_poly+2)^(0+256),w
 15635  0973  00C4               	movwf	(sin@y+2)^(0+256)
 15636  0974  3004               	movlw	4
 15637  0975  00B9               	movwf	eval_poly@n^(0+256)
 15638  0976  3000               	movlw	0
 15639  0977  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15640  0978  3039               	movlw	low (sin@coeff_a| (0+32768))
 15641  0979  00B7               	movwf	eval_poly@d^(0+256)
 15642  097A  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15643  097B  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15644  097C  0848               	movf	sin@x2^(0+256),w
 15645  097D  00B4               	movwf	eval_poly@x^(0+256)
 15646  097E  0849               	movf	(sin@x2+1)^(0+256),w
 15647  097F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15648  0980  084A               	movf	(sin@x2+2)^(0+256),w
 15649  0981  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15650  0982  31A6  261B  3188   	fcall	_eval_poly
 15651  0985  0022               	movlb	2	; select bank2
 15652  0986  0834               	movf	?_eval_poly^(0+256),w
 15653  0987  0021               	movlb	1	; select bank1
 15654  0988  00D1               	movwf	___ftdiv@f1^(0+128)
 15655  0989  0022               	movlb	2	; select bank2
 15656  098A  0835               	movf	(?_eval_poly+1)^(0+256),w
 15657  098B  0021               	movlb	1	; select bank1
 15658  098C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15659  098D  0022               	movlb	2	; select bank2
 15660  098E  0836               	movf	(?_eval_poly+2)^(0+256),w
 15661  098F  0021               	movlb	1	; select bank1
 15662  0990  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15663  0991  0022               	movlb	2	; select bank2
 15664  0992  0842               	movf	sin@y^(0+256),w
 15665  0993  0021               	movlb	1	; select bank1
 15666  0994  00CE               	movwf	___ftdiv@f2^(0+128)
 15667  0995  0022               	movlb	2	; select bank2
 15668  0996  0843               	movf	(sin@y+1)^(0+256),w
 15669  0997  0021               	movlb	1	; select bank1
 15670  0998  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15671  0999  0022               	movlb	2	; select bank2
 15672  099A  0844               	movf	(sin@y+2)^(0+256),w
 15673  099B  0021               	movlb	1	; select bank1
 15674  099C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15675  099D  319C  2474  3188   	fcall	___ftdiv
 15676  09A0  0021               	movlb	1	; select bank1
 15677  09A1  084E               	movf	?___ftdiv^(0+128),w
 15678  09A2  0022               	movlb	2	; select bank2
 15679  09A3  00C5               	movwf	_sin$2859^(0+256)
 15680  09A4  0021               	movlb	1	; select bank1
 15681  09A5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15682  09A6  0022               	movlb	2	; select bank2
 15683  09A7  00C6               	movwf	(_sin$2859+1)^(0+256)
 15684  09A8  0021               	movlb	1	; select bank1
 15685  09A9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15686  09AA  0022               	movlb	2	; select bank2
 15687  09AB  00C7               	movwf	(_sin$2859+2)^(0+256)
 15688  09AC  0845               	movf	_sin$2859^(0+256),w
 15689  09AD  0021               	movlb	1	; select bank1
 15690  09AE  00AE               	movwf	___ftmul@f1^(0+128)
 15691  09AF  0022               	movlb	2	; select bank2
 15692  09B0  0846               	movf	(_sin$2859+1)^(0+256),w
 15693  09B1  0021               	movlb	1	; select bank1
 15694  09B2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15695  09B3  0022               	movlb	2	; select bank2
 15696  09B4  0847               	movf	(_sin$2859+2)^(0+256),w
 15697  09B5  0021               	movlb	1	; select bank1
 15698  09B6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15699  09B7  0022               	movlb	2	; select bank2
 15700  09B8  083E               	movf	sin@f^(0+256),w
 15701  09B9  0021               	movlb	1	; select bank1
 15702  09BA  00B1               	movwf	___ftmul@f2^(0+128)
 15703  09BB  0022               	movlb	2	; select bank2
 15704  09BC  083F               	movf	(sin@f+1)^(0+256),w
 15705  09BD  0021               	movlb	1	; select bank1
 15706  09BE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15707  09BF  0022               	movlb	2	; select bank2
 15708  09C0  0840               	movf	(sin@f+2)^(0+256),w
 15709  09C1  0021               	movlb	1	; select bank1
 15710  09C2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15711  09C3  319E  267B  3188   	fcall	___ftmul
 15712  09C6  0021               	movlb	1	; select bank1
 15713  09C7  082E               	movf	?___ftmul^(0+128),w
 15714  09C8  0022               	movlb	2	; select bank2
 15715  09C9  00BE               	movwf	sin@f^(0+256)
 15716  09CA  0021               	movlb	1	; select bank1
 15717  09CB  082F               	movf	(?___ftmul+1)^(0+128),w
 15718  09CC  0022               	movlb	2	; select bank2
 15719  09CD  00BF               	movwf	(sin@f+1)^(0+256)
 15720  09CE  0021               	movlb	1	; select bank1
 15721  09CF  0830               	movf	(?___ftmul+2)^(0+128),w
 15722  09D0  0022               	movlb	2	; select bank2
 15723  09D1  00C0               	movwf	(sin@f+2)^(0+256)
 15724  09D2  084B               	movf	sin@sgn^(0+256),w
 15725  09D3  1903               	btfsc	3,2
 15726  09D4  0008               	return
 15727  09D5  083E               	movf	sin@f^(0+256),w
 15728  09D6  0021               	movlb	1	; select bank1
 15729  09D7  00BE               	movwf	___ftneg@f1^(0+128)
 15730  09D8  0022               	movlb	2	; select bank2
 15731  09D9  083F               	movf	(sin@f+1)^(0+256),w
 15732  09DA  0021               	movlb	1	; select bank1
 15733  09DB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15734  09DC  0022               	movlb	2	; select bank2
 15735  09DD  0840               	movf	(sin@f+2)^(0+256),w
 15736  09DE  0021               	movlb	1	; select bank1
 15737  09DF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15738  09E0  31AC  24F8         	fcall	___ftneg
 15739  09E2  0021               	movlb	1	; select bank1
 15740  09E3  083E               	movf	?___ftneg^(0+128),w
 15741  09E4  0022               	movlb	2	; select bank2
 15742  09E5  00BE               	movwf	?_sin^(0+256)
 15743  09E6  0021               	movlb	1	; select bank1
 15744  09E7  083F               	movf	(?___ftneg+1)^(0+128),w
 15745  09E8  0022               	movlb	2	; select bank2
 15746  09E9  00BF               	movwf	(?_sin+1)^(0+256)
 15747  09EA  0021               	movlb	1	; select bank1
 15748  09EB  0840               	movf	(?___ftneg+2)^(0+128),w
 15749  09EC  0022               	movlb	2	; select bank2
 15750  09ED  00C0               	movwf	(?_sin+2)^(0+256)
 15751  09EE  0008               	return
 15752  09EF                     __end_of_sin:	
 15753                           
 15754                           	psect	text47
 15755  1DC8                     __ptext47:	
 15756 ;; *************** function _floor *****************
 15757 ;; Defined at:
 15758 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15759 ;; Parameters:    Size  Location     Type
 15760 ;;  x               3   14[BANK2 ] unsigned char 
 15761 ;; Auto vars:     Size  Location     Type
 15762 ;;  i               3   18[BANK2 ] unsigned char 
 15763 ;;  expon           2   21[BANK2 ] int 
 15764 ;; Return value:  Size  Location     Type
 15765 ;;                  3   14[BANK2 ] int 
 15766 ;; Registers used:
 15767 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15768 ;; Tracked objects:
 15769 ;;		On entry : 0/0
 15770 ;;		On exit  : 0/0
 15771 ;;		Unchanged: 0/0
 15772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15773 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15774 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15775 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15776 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15777 ;;Total ram usage:        9 bytes
 15778 ;; Hardware stack levels used:    1
 15779 ;; Hardware stack levels required when called:    5
 15780 ;; This function calls:
 15781 ;;		___altoft
 15782 ;;		___ftadd
 15783 ;;		___ftge
 15784 ;;		___fttol
 15785 ;;		_frexp
 15786 ;; This function is called by:
 15787 ;;		_sin
 15788 ;;		_exp
 15789 ;; This function uses a non-reentrant model
 15790 ;;
 15791                           
 15792                           
 15793                           ;psect for function _floor
 15794  1DC8                     _floor:	
 15795                           
 15796                           ;incstack = 0
 15797                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15798  1DC8  0022               	movlb	2	; select bank2
 15799  1DC9  082E               	movf	floor@x^(0+256),w
 15800  1DCA  0021               	movlb	1	; select bank1
 15801  1DCB  00A0               	movwf	frexp@value^(0+128)
 15802  1DCC  0022               	movlb	2	; select bank2
 15803  1DCD  082F               	movf	(floor@x+1)^(0+256),w
 15804  1DCE  0021               	movlb	1	; select bank1
 15805  1DCF  00A1               	movwf	(frexp@value+1)^(0+128)
 15806  1DD0  0022               	movlb	2	; select bank2
 15807  1DD1  0830               	movf	(floor@x+2)^(0+256),w
 15808  1DD2  0021               	movlb	1	; select bank1
 15809  1DD3  00A2               	movwf	(frexp@value+2)^(0+128)
 15810  1DD4  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15811  1DD5  0022               	movlb	2	; select bank2
 15812  1DD6  00B1               	movwf	??_floor^(0+256)
 15813  1DD7  0831               	movf	??_floor^(0+256),w
 15814  1DD8  0021               	movlb	1	; select bank1
 15815  1DD9  00A3               	movwf	frexp@eptr^(0+128)
 15816  1DDA  31A1  219D  319D   	fcall	_frexp
 15817  1DDD  0022               	movlb	2	; select bank2
 15818  1DDE  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15819  1DDF  2E06               	goto	l8140
 15820  1DE0  082E               	movf	floor@x^(0+256),w
 15821  1DE1  0021               	movlb	1	; select bank1
 15822  1DE2  00A0               	movwf	___ftge@ff1^(0+128)
 15823  1DE3  0022               	movlb	2	; select bank2
 15824  1DE4  082F               	movf	(floor@x+1)^(0+256),w
 15825  1DE5  0021               	movlb	1	; select bank1
 15826  1DE6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15827  1DE7  0022               	movlb	2	; select bank2
 15828  1DE8  0830               	movf	(floor@x+2)^(0+256),w
 15829  1DE9  0021               	movlb	1	; select bank1
 15830  1DEA  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15831  1DEB  3000               	movlw	0
 15832  1DEC  00A3               	movwf	___ftge@ff2^(0+128)
 15833  1DED  3000               	movlw	0
 15834  1DEE  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15835  1DEF  3000               	movlw	0
 15836  1DF0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15837  1DF1  31A0  20AA  319D   	fcall	___ftge
 15838  1DF4  1803               	btfsc	3,0
 15839  1DF5  2DFE               	goto	l8136
 15840  1DF6  3000               	movlw	0
 15841  1DF7  0022               	movlb	2	; select bank2
 15842  1DF8  00AE               	movwf	?_floor^(0+256)
 15843  1DF9  3080               	movlw	128
 15844  1DFA  00AF               	movwf	(?_floor+1)^(0+256)
 15845  1DFB  30BF               	movlw	191
 15846  1DFC  00B0               	movwf	(?_floor+2)^(0+256)
 15847  1DFD  0008               	return
 15848  1DFE                     l8136:	
 15849  1DFE  3000               	movlw	0
 15850  1DFF  0022               	movlb	2	; select bank2
 15851  1E00  00AE               	movwf	?_floor^(0+256)
 15852  1E01  3000               	movlw	0
 15853  1E02  00AF               	movwf	(?_floor+1)^(0+256)
 15854  1E03  3000               	movlw	0
 15855  1E04  00B0               	movwf	(?_floor+2)^(0+256)
 15856  1E05  0008               	return
 15857  1E06                     l8140:	
 15858  1E06  3000               	movlw	0
 15859  1E07  0236               	subwf	(floor@expon+1)^(0+256),w
 15860  1E08  3015               	movlw	21
 15861  1E09  1903               	skipnz
 15862  1E0A  0235               	subwf	floor@expon^(0+256),w
 15863  1E0B  1803               	btfsc	3,0
 15864  1E0C  0008               	return
 15865  1E0D  082E               	movf	floor@x^(0+256),w
 15866  1E0E  00A0               	movwf	___fttol@f1^(0+256)
 15867  1E0F  082F               	movf	(floor@x+1)^(0+256),w
 15868  1E10  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15869  1E11  0830               	movf	(floor@x+2)^(0+256),w
 15870  1E12  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15871  1E13  3199  21AF  319D   	fcall	___fttol
 15872  1E16  0022               	movlb	2	; select bank2
 15873  1E17  0823               	movf	(?___fttol+3)^(0+256),w
 15874  1E18  0021               	movlb	1	; select bank1
 15875  1E19  00AB               	movwf	(___altoft@c+3)^(0+128)
 15876  1E1A  0022               	movlb	2	; select bank2
 15877  1E1B  0822               	movf	(?___fttol+2)^(0+256),w
 15878  1E1C  0021               	movlb	1	; select bank1
 15879  1E1D  00AA               	movwf	(___altoft@c+2)^(0+128)
 15880  1E1E  0022               	movlb	2	; select bank2
 15881  1E1F  0821               	movf	(?___fttol+1)^(0+256),w
 15882  1E20  0021               	movlb	1	; select bank1
 15883  1E21  00A9               	movwf	(___altoft@c+1)^(0+128)
 15884  1E22  0022               	movlb	2	; select bank2
 15885  1E23  0820               	movf	?___fttol^(0+256),w
 15886  1E24  0021               	movlb	1	; select bank1
 15887  1E25  00A8               	movwf	___altoft@c^(0+128)
 15888  1E26  31A0  20E6  319D   	fcall	___altoft
 15889  1E29  0021               	movlb	1	; select bank1
 15890  1E2A  0828               	movf	?___altoft^(0+128),w
 15891  1E2B  0022               	movlb	2	; select bank2
 15892  1E2C  00B2               	movwf	floor@i^(0+256)
 15893  1E2D  0021               	movlb	1	; select bank1
 15894  1E2E  0829               	movf	(?___altoft+1)^(0+128),w
 15895  1E2F  0022               	movlb	2	; select bank2
 15896  1E30  00B3               	movwf	(floor@i+1)^(0+256)
 15897  1E31  0021               	movlb	1	; select bank1
 15898  1E32  082A               	movf	(?___altoft+2)^(0+128),w
 15899  1E33  0022               	movlb	2	; select bank2
 15900  1E34  00B4               	movwf	(floor@i+2)^(0+256)
 15901  1E35  082E               	movf	floor@x^(0+256),w
 15902  1E36  0021               	movlb	1	; select bank1
 15903  1E37  00A0               	movwf	___ftge@ff1^(0+128)
 15904  1E38  0022               	movlb	2	; select bank2
 15905  1E39  082F               	movf	(floor@x+1)^(0+256),w
 15906  1E3A  0021               	movlb	1	; select bank1
 15907  1E3B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15908  1E3C  0022               	movlb	2	; select bank2
 15909  1E3D  0830               	movf	(floor@x+2)^(0+256),w
 15910  1E3E  0021               	movlb	1	; select bank1
 15911  1E3F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15912  1E40  0022               	movlb	2	; select bank2
 15913  1E41  0832               	movf	floor@i^(0+256),w
 15914  1E42  0021               	movlb	1	; select bank1
 15915  1E43  00A3               	movwf	___ftge@ff2^(0+128)
 15916  1E44  0022               	movlb	2	; select bank2
 15917  1E45  0833               	movf	(floor@i+1)^(0+256),w
 15918  1E46  0021               	movlb	1	; select bank1
 15919  1E47  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15920  1E48  0022               	movlb	2	; select bank2
 15921  1E49  0834               	movf	(floor@i+2)^(0+256),w
 15922  1E4A  0021               	movlb	1	; select bank1
 15923  1E4B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15924  1E4C  31A0  20AA  319D   	fcall	___ftge
 15925  1E4F  1803               	btfsc	3,0
 15926  1E50  2E73               	goto	l8150
 15927  1E51  3000               	movlw	0
 15928  1E52  0021               	movlb	1	; select bank1
 15929  1E53  00C1               	movwf	___ftadd@f1^(0+128)
 15930  1E54  3080               	movlw	128
 15931  1E55  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15932  1E56  30BF               	movlw	191
 15933  1E57  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15934  1E58  0022               	movlb	2	; select bank2
 15935  1E59  0832               	movf	floor@i^(0+256),w
 15936  1E5A  0021               	movlb	1	; select bank1
 15937  1E5B  00C4               	movwf	___ftadd@f2^(0+128)
 15938  1E5C  0022               	movlb	2	; select bank2
 15939  1E5D  0833               	movf	(floor@i+1)^(0+256),w
 15940  1E5E  0021               	movlb	1	; select bank1
 15941  1E5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15942  1E60  0022               	movlb	2	; select bank2
 15943  1E61  0834               	movf	(floor@i+2)^(0+256),w
 15944  1E62  0021               	movlb	1	; select bank1
 15945  1E63  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15946  1E64  3190  2035         	fcall	___ftadd
 15947  1E66  0021               	movlb	1	; select bank1
 15948  1E67  0841               	movf	?___ftadd^(0+128),w
 15949  1E68  0022               	movlb	2	; select bank2
 15950  1E69  00AE               	movwf	?_floor^(0+256)
 15951  1E6A  0021               	movlb	1	; select bank1
 15952  1E6B  0842               	movf	(?___ftadd+1)^(0+128),w
 15953  1E6C  0022               	movlb	2	; select bank2
 15954  1E6D  00AF               	movwf	(?_floor+1)^(0+256)
 15955  1E6E  0021               	movlb	1	; select bank1
 15956  1E6F  0843               	movf	(?___ftadd+2)^(0+128),w
 15957  1E70  0022               	movlb	2	; select bank2
 15958  1E71  00B0               	movwf	(?_floor+2)^(0+256)
 15959  1E72  0008               	return
 15960  1E73                     l8150:	
 15961  1E73  0022               	movlb	2	; select bank2
 15962  1E74  0832               	movf	floor@i^(0+256),w
 15963  1E75  00AE               	movwf	?_floor^(0+256)
 15964  1E76  0833               	movf	(floor@i+1)^(0+256),w
 15965  1E77  00AF               	movwf	(?_floor+1)^(0+256)
 15966  1E78  0834               	movf	(floor@i+2)^(0+256),w
 15967  1E79  00B0               	movwf	(?_floor+2)^(0+256)
 15968  1E7A  0008               	return
 15969  1E7B                     __end_of_floor:	
 15970                           
 15971                           	psect	text48
 15972  219D                     __ptext48:	
 15973 ;; *************** function _frexp *****************
 15974 ;; Defined at:
 15975 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15976 ;; Parameters:    Size  Location     Type
 15977 ;;  value           3    0[BANK1 ] int 
 15978 ;;  eptr            1    3[BANK1 ] PTR int 
 15979 ;;		 -> log@exponent(2), floor@expon(2), 
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;		None
 15982 ;; Return value:  Size  Location     Type
 15983 ;;                  3    0[BANK1 ] PTR int 
 15984 ;; Registers used:
 15985 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15986 ;; Tracked objects:
 15987 ;;		On entry : 0/0
 15988 ;;		On exit  : 0/0
 15989 ;;		Unchanged: 0/0
 15990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15991 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15993 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15994 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15995 ;;Total ram usage:        6 bytes
 15996 ;; Hardware stack levels used:    1
 15997 ;; Hardware stack levels required when called:    3
 15998 ;; This function calls:
 15999 ;;		Nothing
 16000 ;; This function is called by:
 16001 ;;		_floor
 16002 ;;		_log
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           
 16007                           ;psect for function _frexp
 16008  219D                     _frexp:	
 16009                           
 16010                           ;incstack = 0
 16011                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 16012  219D  0021               	movlb	1	; select bank1
 16013  219E  0822               	movf	(frexp@value+2)^(0+128),w
 16014  219F  0421               	iorwf	(frexp@value+1)^(0+128),w
 16015  21A0  0420               	iorwf	frexp@value^(0+128),w
 16016  21A1  1D03               	skipz
 16017  21A2  29B1               	goto	l8002
 16018  21A3  0823               	movf	frexp@eptr^(0+128),w
 16019  21A4  0086               	movwf	6
 16020  21A5  3001               	movlw	1	; select bank2/3
 16021  21A6  0087               	movwf	7
 16022  21A7  3000               	movlw	0
 16023  21A8  3FC0               	movwi [0]fsr1
 16024  21A9  3FC1               	movwi [1]fsr1
 16025  21AA  3000               	movlw	0
 16026  21AB  00A0               	movwf	?_frexp^(0+128)
 16027  21AC  3000               	movlw	0
 16028  21AD  00A1               	movwf	(?_frexp+1)^(0+128)
 16029  21AE  3000               	movlw	0
 16030  21AF  00A2               	movwf	(?_frexp+2)^(0+128)
 16031  21B0  0008               	return
 16032  21B1                     l8002:	
 16033  21B1  0822               	movf	(frexp@value^(0+128)+2),w
 16034  21B2  397F               	andlw	127
 16035  21B3  00A4               	movwf	??_frexp^(0+128)
 16036  21B4  01A5               	clrf	(??_frexp^(0+128)+1)
 16037  21B5  35A4               	lslf	??_frexp^(0+128),f
 16038  21B6  0DA5               	rlf	(??_frexp^(0+128)+1),f
 16039  21B7  0823               	movf	frexp@eptr^(0+128),w
 16040  21B8  0086               	movwf	6
 16041  21B9  3001               	movlw	1	; select bank2/3
 16042  21BA  0087               	movwf	7
 16043  21BB  0824               	movf	??_frexp^(0+128),w
 16044  21BC  3FC0               	movwi [0]fsr1
 16045  21BD  0825               	movf	(??_frexp+1)^(0+128),w
 16046  21BE  3FC1               	movwi [1]fsr1
 16047  21BF  0D21               	rlf	(frexp@value^(0+128)+1),w
 16048  21C0  0D21               	rlf	(frexp@value^(0+128)+1),w
 16049  21C1  3901               	andlw	1
 16050  21C2  00A4               	movwf	??_frexp^(0+128)
 16051  21C3  01A5               	clrf	(??_frexp^(0+128)+1)
 16052  21C4  0823               	movf	frexp@eptr^(0+128),w
 16053  21C5  0086               	movwf	6
 16054  21C6  3001               	movlw	1	; select bank2/3
 16055  21C7  0087               	movwf	7
 16056  21C8  0824               	movf	??_frexp^(0+128),w
 16057  21C9  0481               	iorwf	1,f
 16058  21CA  3141               	addfsr 1,1
 16059  21CB  0825               	movf	(??_frexp+1)^(0+128),w
 16060  21CC  0481               	iorwf	1,f
 16061  21CD  0823               	movf	frexp@eptr^(0+128),w
 16062  21CE  0086               	movwf	6
 16063  21CF  3001               	movlw	1	; select bank2/3
 16064  21D0  0087               	movwf	7
 16065  21D1  3082               	movlw	130
 16066  21D2  0781               	addwf	1,f
 16067  21D3  3141               	addfsr 1,1
 16068  21D4  30FF               	movlw	255
 16069  21D5  3D81               	addwfc	1,f
 16070  21D6  317F               	addfsr 1,-1
 16071  21D7  0822               	movf	(frexp@value^(0+128)+2),w
 16072  21D8  3980               	andlw	-128
 16073  21D9  383F               	iorlw	63
 16074  21DA  00A2               	movwf	(frexp@value^(0+128)+2)
 16075  21DB  13A1               	bcf	(frexp@value^(0+128)+1),7
 16076  21DC  0008               	return
 16077  21DD                     __end_of_frexp:	
 16078                           
 16079                           	psect	text49
 16080  19AF                     __ptext49:	
 16081 ;; *************** function ___fttol *****************
 16082 ;; Defined at:
 16083 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 16084 ;; Parameters:    Size  Location     Type
 16085 ;;  f1              3    0[BANK2 ] float 
 16086 ;; Auto vars:     Size  Location     Type
 16087 ;;  lval            4    9[BANK2 ] unsigned long 
 16088 ;;  exp1            1   13[BANK2 ] unsigned char 
 16089 ;;  sign1           1    8[BANK2 ] unsigned char 
 16090 ;; Return value:  Size  Location     Type
 16091 ;;                  4    0[BANK2 ] long 
 16092 ;; Registers used:
 16093 ;;		wreg, status,2, status,0
 16094 ;; Tracked objects:
 16095 ;;		On entry : 0/0
 16096 ;;		On exit  : 0/0
 16097 ;;		Unchanged: 0/0
 16098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16099 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16100 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16101 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16102 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16103 ;;Total ram usage:       14 bytes
 16104 ;; Hardware stack levels used:    1
 16105 ;; Hardware stack levels required when called:    3
 16106 ;; This function calls:
 16107 ;;		Nothing
 16108 ;; This function is called by:
 16109 ;;		_main
 16110 ;;		_set_subdivision
 16111 ;;		_scaleA100kPot
 16112 ;;		_scaleA10kPot
 16113 ;;		_scaleiA10kPot
 16114 ;;		_getModulationDelayTime
 16115 ;;		_modCos
 16116 ;;		_modTri
 16117 ;;		_modSaw
 16118 ;;		_pow
 16119 ;;		_exp
 16120 ;;		_floor
 16121 ;;		_scaleiA100kPot
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           
 16126                           ;psect for function ___fttol
 16127  19AF                     ___fttol:	
 16128                           
 16129                           ;incstack = 0
 16130                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16131  19AF  0022               	movlb	2	; select bank2
 16132  19B0  0820               	movf	___fttol@f1^(0+256),w
 16133  19B1  00A4               	movwf	??___fttol^(0+256)
 16134  19B2  0821               	movf	(___fttol@f1+1)^(0+256),w
 16135  19B3  00A5               	movwf	(??___fttol^(0+256)+1)
 16136  19B4  0822               	movf	(___fttol@f1+2)^(0+256),w
 16137  19B5  00A6               	movwf	(??___fttol^(0+256)+2)
 16138  19B6  1003               	clrc
 16139  19B7  0D25               	rlf	(??___fttol^(0+256)+1),w
 16140  19B8  0D26               	rlf	(??___fttol^(0+256)+2),w
 16141  19B9  00A7               	movwf	(??___fttol+3)^(0+256)
 16142  19BA  0827               	movf	(??___fttol+3)^(0+256),w
 16143  19BB  00AD               	movwf	___fttol@exp1^(0+256)
 16144  19BC  082D               	movf	___fttol@exp1^(0+256),w
 16145  19BD  1D03               	btfss	3,2
 16146  19BE  29C8               	goto	l7958
 16147  19BF  3000               	movlw	0
 16148  19C0  00A3               	movwf	(?___fttol+3)^(0+256)
 16149  19C1  3000               	movlw	0
 16150  19C2  00A2               	movwf	(?___fttol+2)^(0+256)
 16151  19C3  3000               	movlw	0
 16152  19C4  00A1               	movwf	(?___fttol+1)^(0+256)
 16153  19C5  3000               	movlw	0
 16154  19C6  00A0               	movwf	?___fttol^(0+256)
 16155  19C7  0008               	return
 16156  19C8                     l7958:	
 16157  19C8  0820               	movf	___fttol@f1^(0+256),w
 16158  19C9  00A4               	movwf	??___fttol^(0+256)
 16159  19CA  0821               	movf	(___fttol@f1+1)^(0+256),w
 16160  19CB  00A5               	movwf	(??___fttol^(0+256)+1)
 16161  19CC  0822               	movf	(___fttol@f1+2)^(0+256),w
 16162  19CD  00A6               	movwf	(??___fttol^(0+256)+2)
 16163  19CE  3017               	movlw	23
 16164  19CF                     u8365:	
 16165  19CF  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16166  19D0  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16167  19D1  0CA4               	rrf	??___fttol^(0+256),f
 16168  19D2  0B89               	decfsz	9,f
 16169  19D3  29CF               	goto	u8365
 16170  19D4  0824               	movf	??___fttol^(0+256),w
 16171  19D5  00A7               	movwf	(??___fttol+3)^(0+256)
 16172  19D6  0827               	movf	(??___fttol+3)^(0+256),w
 16173  19D7  00A8               	movwf	___fttol@sign1^(0+256)
 16174  19D8  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16175  19D9  30FF               	movlw	255
 16176  19DA  05A0               	andwf	___fttol@f1^(0+256),f
 16177  19DB  30FF               	movlw	255
 16178  19DC  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16179  19DD  3000               	movlw	0
 16180  19DE  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16181  19DF  0820               	movf	___fttol@f1^(0+256),w
 16182  19E0  00A9               	movwf	___fttol@lval^(0+256)
 16183  19E1  0821               	movf	(___fttol@f1+1)^(0+256),w
 16184  19E2  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16185  19E3  0822               	movf	(___fttol@f1+2)^(0+256),w
 16186  19E4  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16187  19E5  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16188  19E6  308E               	movlw	142
 16189  19E7  02AD               	subwf	___fttol@exp1^(0+256),f
 16190  19E8  1FAD               	btfss	___fttol@exp1^(0+256),7
 16191  19E9  2A06               	goto	l7978
 16192  19EA  082D               	movf	___fttol@exp1^(0+256),w
 16193  19EB  3A80               	xorlw	128
 16194  19EC  3E8F               	addlw	143
 16195  19ED  1803               	skipnc
 16196  19EE  29F8               	goto	l7976
 16197  19EF  3000               	movlw	0
 16198  19F0  00A3               	movwf	(?___fttol+3)^(0+256)
 16199  19F1  3000               	movlw	0
 16200  19F2  00A2               	movwf	(?___fttol+2)^(0+256)
 16201  19F3  3000               	movlw	0
 16202  19F4  00A1               	movwf	(?___fttol+1)^(0+256)
 16203  19F5  3000               	movlw	0
 16204  19F6  00A0               	movwf	?___fttol^(0+256)
 16205  19F7  0008               	return
 16206  19F8                     l7976:	
 16207  19F8  3001               	movlw	1
 16208  19F9                     u8395:	
 16209  19F9  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16210  19FA  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16211  19FB  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16212  19FC  0CA9               	rrf	___fttol@lval^(0+256),f
 16213  19FD  0B89               	decfsz	9,f
 16214  19FE  29F9               	goto	u8395
 16215  19FF  3001               	movlw	1
 16216  1A00  00A4               	movwf	??___fttol^(0+256)
 16217  1A01  0824               	movf	??___fttol^(0+256),w
 16218  1A02  07AD               	addwf	___fttol@exp1^(0+256),f
 16219  1A03  1903               	btfsc	3,2
 16220  1A04  2A1F               	goto	l7986
 16221  1A05  29F8               	goto	l7976
 16222  1A06                     l7978:	
 16223  1A06  3018               	movlw	24
 16224  1A07  022D               	subwf	___fttol@exp1^(0+256),w
 16225  1A08  1C03               	skipc
 16226  1A09  2A1C               	goto	l2248
 16227  1A0A  3000               	movlw	0
 16228  1A0B  00A3               	movwf	(?___fttol+3)^(0+256)
 16229  1A0C  3000               	movlw	0
 16230  1A0D  00A2               	movwf	(?___fttol+2)^(0+256)
 16231  1A0E  3000               	movlw	0
 16232  1A0F  00A1               	movwf	(?___fttol+1)^(0+256)
 16233  1A10  3000               	movlw	0
 16234  1A11  00A0               	movwf	?___fttol^(0+256)
 16235  1A12  0008               	return
 16236  1A13                     l7984:	
 16237  1A13  3001               	movlw	1
 16238  1A14                     u8425:	
 16239  1A14  35A9               	lslf	___fttol@lval^(0+256),f
 16240  1A15  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16241  1A16  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16242  1A17  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16243  1A18  0B89               	decfsz	9,f
 16244  1A19  2A14               	goto	u8425
 16245  1A1A  3001               	movlw	1
 16246  1A1B  02AD               	subwf	___fttol@exp1^(0+256),f
 16247  1A1C                     l2248:	
 16248  1A1C  082D               	movf	___fttol@exp1^(0+256),w
 16249  1A1D  1D03               	btfss	3,2
 16250  1A1E  2A13               	goto	l7984
 16251  1A1F                     l7986:	
 16252  1A1F  0828               	movf	___fttol@sign1^(0+256),w
 16253  1A20  1903               	btfsc	3,2
 16254  1A21  2A2D               	goto	l7990
 16255  1A22  09A9               	comf	___fttol@lval^(0+256),f
 16256  1A23  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16257  1A24  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16258  1A25  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16259  1A26  0AA9               	incf	___fttol@lval^(0+256),f
 16260  1A27  1903               	skipnz
 16261  1A28  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16262  1A29  1903               	skipnz
 16263  1A2A  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16264  1A2B  1903               	skipnz
 16265  1A2C  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16266  1A2D                     l7990:	
 16267  1A2D  082C               	movf	(___fttol@lval+3)^(0+256),w
 16268  1A2E  00A3               	movwf	(?___fttol+3)^(0+256)
 16269  1A2F  082B               	movf	(___fttol@lval+2)^(0+256),w
 16270  1A30  00A2               	movwf	(?___fttol+2)^(0+256)
 16271  1A31  082A               	movf	(___fttol@lval+1)^(0+256),w
 16272  1A32  00A1               	movwf	(?___fttol+1)^(0+256)
 16273  1A33  0829               	movf	___fttol@lval^(0+256),w
 16274  1A34  00A0               	movwf	?___fttol^(0+256)
 16275  1A35  0008               	return
 16276  1A36                     __end_of___fttol:	
 16277                           
 16278                           	psect	text50
 16279  20AA                     __ptext50:	
 16280 ;; *************** function ___ftge *****************
 16281 ;; Defined at:
 16282 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;  ff1             3    0[BANK1 ] float 
 16285 ;;  ff2             3    3[BANK1 ] float 
 16286 ;; Auto vars:     Size  Location     Type
 16287 ;;		None
 16288 ;; Return value:  Size  Location     Type
 16289 ;;		None               void
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, status,0
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16297 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16299 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16300 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16301 ;;Total ram usage:        9 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    3
 16304 ;; This function calls:
 16305 ;;		Nothing
 16306 ;; This function is called by:
 16307 ;;		_modCos
 16308 ;;		_modTri
 16309 ;;		_modSaw
 16310 ;;		_modSquare
 16311 ;;		_cos
 16312 ;;		_pow
 16313 ;;		_sin
 16314 ;;		_exp
 16315 ;;		_floor
 16316 ;;		_ldexp
 16317 ;;		_log
 16318 ;; This function uses a non-reentrant model
 16319 ;;
 16320                           
 16321                           
 16322                           ;psect for function ___ftge
 16323  20AA                     ___ftge:	
 16324                           
 16325                           ;incstack = 0
 16326                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16327  20AA  0021               	movlb	1	; select bank1
 16328  20AB  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16329  20AC  28C1               	goto	l7878
 16330  20AD  0920               	comf	___ftge@ff1^(0+128),w
 16331  20AE  00A6               	movwf	??___ftge^(0+128)
 16332  20AF  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16333  20B0  00A7               	movwf	(??___ftge^(0+128)+1)
 16334  20B1  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16335  20B2  00A8               	movwf	(??___ftge^(0+128)+2)
 16336  20B3  0AA6               	incf	??___ftge^(0+128),f
 16337  20B4  1903               	skipnz
 16338  20B5  0AA7               	incf	(??___ftge^(0+128)+1),f
 16339  20B6  1903               	skipnz
 16340  20B7  0AA8               	incf	(??___ftge^(0+128)+2),f
 16341  20B8  3000               	movlw	0
 16342  20B9  0726               	addwf	??___ftge^(0+128),w
 16343  20BA  00A0               	movwf	___ftge@ff1^(0+128)
 16344  20BB  3000               	movlw	0
 16345  20BC  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16346  20BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16347  20BE  3080               	movlw	128
 16348  20BF  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16349  20C0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16350  20C1                     l7878:	
 16351  20C1  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16352  20C2  28D7               	goto	l7882
 16353  20C3  0923               	comf	___ftge@ff2^(0+128),w
 16354  20C4  00A6               	movwf	??___ftge^(0+128)
 16355  20C5  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16356  20C6  00A7               	movwf	(??___ftge^(0+128)+1)
 16357  20C7  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16358  20C8  00A8               	movwf	(??___ftge^(0+128)+2)
 16359  20C9  0AA6               	incf	??___ftge^(0+128),f
 16360  20CA  1903               	skipnz
 16361  20CB  0AA7               	incf	(??___ftge^(0+128)+1),f
 16362  20CC  1903               	skipnz
 16363  20CD  0AA8               	incf	(??___ftge^(0+128)+2),f
 16364  20CE  3000               	movlw	0
 16365  20CF  0726               	addwf	??___ftge^(0+128),w
 16366  20D0  00A3               	movwf	___ftge@ff2^(0+128)
 16367  20D1  3000               	movlw	0
 16368  20D2  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16369  20D3  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16370  20D4  3080               	movlw	128
 16371  20D5  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16372  20D6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16373  20D7                     l7882:	
 16374  20D7  3080               	movlw	128
 16375  20D8  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16376  20D9  3080               	movlw	128
 16377  20DA  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16378  20DB  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16379  20DC  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16380  20DD  1D03               	skipz
 16381  20DE  0008               	return
 16382  20DF  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16383  20E0  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16384  20E1  1D03               	skipz
 16385  20E2  0008               	return
 16386  20E3  0823               	movf	___ftge@ff2^(0+128),w
 16387  20E4  0220               	subwf	___ftge@ff1^(0+128),w
 16388  20E5  0008               	return
 16389  20E6                     __end_of___ftge:	
 16390                           
 16391                           	psect	text51
 16392  20E6                     __ptext51:	
 16393 ;; *************** function ___altoft *****************
 16394 ;; Defined at:
 16395 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;  c               4    8[BANK1 ] long 
 16398 ;; Auto vars:     Size  Location     Type
 16399 ;;  sign            1   15[BANK1 ] unsigned char 
 16400 ;;  exp             1   14[BANK1 ] unsigned char 
 16401 ;; Return value:  Size  Location     Type
 16402 ;;                  3    8[BANK1 ] float 
 16403 ;; Registers used:
 16404 ;;		wreg, status,2, status,0, pclath, cstack
 16405 ;; Tracked objects:
 16406 ;;		On entry : 0/0
 16407 ;;		On exit  : 0/0
 16408 ;;		Unchanged: 0/0
 16409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16410 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16411 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16412 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16413 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16414 ;;Total ram usage:        8 bytes
 16415 ;; Hardware stack levels used:    1
 16416 ;; Hardware stack levels required when called:    4
 16417 ;; This function calls:
 16418 ;;		___ftpack
 16419 ;; This function is called by:
 16420 ;;		_getModulationDelayTime
 16421 ;;		_floor
 16422 ;; This function uses a non-reentrant model
 16423 ;;
 16424                           
 16425                           
 16426                           ;psect for function ___altoft
 16427  20E6                     ___altoft:	
 16428                           
 16429                           ;incstack = 0
 16430                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16431  20E6  0021               	movlb	1	; select bank1
 16432  20E7  01AF               	clrf	___altoft@sign^(0+128)
 16433  20E8  308E               	movlw	142
 16434  20E9  00AC               	movwf	??___altoft^(0+128)
 16435  20EA  082C               	movf	??___altoft^(0+128),w
 16436  20EB  00AE               	movwf	___altoft@exp^(0+128)
 16437  20EC  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16438  20ED  28FB               	goto	l7798
 16439  20EE  09A8               	comf	___altoft@c^(0+128),f
 16440  20EF  09A9               	comf	(___altoft@c+1)^(0+128),f
 16441  20F0  09AA               	comf	(___altoft@c+2)^(0+128),f
 16442  20F1  09AB               	comf	(___altoft@c+3)^(0+128),f
 16443  20F2  0AA8               	incf	___altoft@c^(0+128),f
 16444  20F3  1903               	skipnz
 16445  20F4  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16446  20F5  1903               	skipnz
 16447  20F6  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16448  20F7  1903               	skipnz
 16449  20F8  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16450  20F9  01AF               	clrf	___altoft@sign^(0+128)
 16451  20FA  0AAF               	incf	___altoft@sign^(0+128),f
 16452  20FB                     l7798:	
 16453  20FB  30FF               	movlw	255
 16454  20FC  052B               	andwf	(___altoft@c+3)^(0+128),w
 16455  20FD  1903               	btfsc	3,2
 16456  20FE  290B               	goto	l7800
 16457  20FF  3001               	movlw	1
 16458  2100                     u7945:	
 16459  2100  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16460  2101  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16461  2102  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16462  2103  0CA8               	rrf	___altoft@c^(0+128),f
 16463  2104  0B89               	decfsz	9,f
 16464  2105  2900               	goto	u7945
 16465  2106  3001               	movlw	1
 16466  2107  00AC               	movwf	??___altoft^(0+128)
 16467  2108  082C               	movf	??___altoft^(0+128),w
 16468  2109  07AE               	addwf	___altoft@exp^(0+128),f
 16469  210A  28FB               	goto	l7798
 16470  210B                     l7800:	
 16471  210B  0828               	movf	___altoft@c^(0+128),w
 16472  210C  00A0               	movwf	___ftpack@arg^(0+128)
 16473  210D  0829               	movf	(___altoft@c+1)^(0+128),w
 16474  210E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16475  210F  082A               	movf	(___altoft@c+2)^(0+128),w
 16476  2110  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16477  2111  082E               	movf	___altoft@exp^(0+128),w
 16478  2112  00AC               	movwf	??___altoft^(0+128)
 16479  2113  082C               	movf	??___altoft^(0+128),w
 16480  2114  00A3               	movwf	___ftpack@exp^(0+128)
 16481  2115  082F               	movf	___altoft@sign^(0+128),w
 16482  2116  00AD               	movwf	(??___altoft+1)^(0+128)
 16483  2117  082D               	movf	(??___altoft+1)^(0+128),w
 16484  2118  00A4               	movwf	___ftpack@sign^(0+128)
 16485  2119  31A5  25B6         	fcall	___ftpack
 16486  211B  0021               	movlb	1	; select bank1
 16487  211C  0820               	movf	?___ftpack^(0+128),w
 16488  211D  00A8               	movwf	?___altoft^(0+128)
 16489  211E  0821               	movf	(?___ftpack+1)^(0+128),w
 16490  211F  00A9               	movwf	(?___altoft+1)^(0+128)
 16491  2120  0822               	movf	(?___ftpack+2)^(0+128),w
 16492  2121  00AA               	movwf	(?___altoft+2)^(0+128)
 16493  2122  0008               	return
 16494  2123                     __end_of___altoft:	
 16495                           
 16496                           	psect	text52
 16497  261B                     __ptext52:	
 16498 ;; *************** function _eval_poly *****************
 16499 ;; Defined at:
 16500 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16501 ;; Parameters:    Size  Location     Type
 16502 ;;  x               3   20[BANK2 ] float 
 16503 ;;  d               2   23[BANK2 ] PTR const 
 16504 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16505 ;;  n               2   25[BANK2 ] int 
 16506 ;; Auto vars:     Size  Location     Type
 16507 ;;  res             3   27[BANK2 ] int 
 16508 ;; Return value:  Size  Location     Type
 16509 ;;                  3   20[BANK2 ] int 
 16510 ;; Registers used:
 16511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16512 ;; Tracked objects:
 16513 ;;		On entry : 0/0
 16514 ;;		On exit  : 0/0
 16515 ;;		Unchanged: 0/0
 16516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16517 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16518 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16520 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16521 ;;Total ram usage:       10 bytes
 16522 ;; Hardware stack levels used:    1
 16523 ;; Hardware stack levels required when called:    5
 16524 ;; This function calls:
 16525 ;;		___ftadd
 16526 ;;		___ftmul
 16527 ;;		___wmul
 16528 ;; This function is called by:
 16529 ;;		_sin
 16530 ;;		_exp
 16531 ;;		_log
 16532 ;; This function uses a non-reentrant model
 16533 ;;
 16534                           
 16535                           
 16536                           ;psect for function _eval_poly
 16537  261B                     _eval_poly:	
 16538                           
 16539                           ;incstack = 0
 16540                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16541  261B  0022               	movlb	2	; select bank2
 16542  261C  083A               	movf	(eval_poly@n+1)^(0+256),w
 16543  261D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16544  261E  0839               	movf	eval_poly@n^(0+256),w
 16545  261F  00AE               	movwf	___wmul@multiplier^(0+256)
 16546  2620  3003               	movlw	3
 16547  2621  00B0               	movwf	___wmul@multiplicand^(0+256)
 16548  2622  3000               	movlw	0
 16549  2623  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16550  2624  31AD  25C5  31A6   	fcall	___wmul
 16551  2627  0022               	movlb	2	; select bank2
 16552  2628  0837               	movf	eval_poly@d^(0+256),w
 16553  2629  072E               	addwf	?___wmul^(0+256),w
 16554  262A  0084               	movwf	4
 16555  262B  0838               	movf	(eval_poly@d+1)^(0+256),w
 16556  262C  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16557  262D  0085               	movwf	5
 16558  262E  3F00               	moviw [0]fsr0
 16559  262F  00BB               	movwf	eval_poly@res^(0+256)
 16560  2630  3F01               	moviw [1]fsr0
 16561  2631  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16562  2632  3F02               	moviw [2]fsr0
 16563  2633                     L19:	
 16564  2633  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16565  2634  0839               	movf	eval_poly@n^(0+256),w
 16566  2635  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16567  2636  1903               	btfsc	3,2
 16568  2637  2E86               	goto	l8160
 16569  2638  30FF               	movlw	255
 16570  2639  07B9               	addwf	eval_poly@n^(0+256),f
 16571  263A  30FF               	movlw	255
 16572  263B  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16573  263C  083A               	movf	(eval_poly@n+1)^(0+256),w
 16574  263D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16575  263E  0839               	movf	eval_poly@n^(0+256),w
 16576  263F  00AE               	movwf	___wmul@multiplier^(0+256)
 16577  2640  3003               	movlw	3
 16578  2641  00B0               	movwf	___wmul@multiplicand^(0+256)
 16579  2642  3000               	movlw	0
 16580  2643  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16581  2644  31AD  25C5  31A6   	fcall	___wmul
 16582  2647  0022               	movlb	2	; select bank2
 16583  2648  0837               	movf	eval_poly@d^(0+256),w
 16584  2649  072E               	addwf	?___wmul^(0+256),w
 16585  264A  0084               	movwf	4
 16586  264B  0838               	movf	(eval_poly@d+1)^(0+256),w
 16587  264C  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16588  264D  0085               	movwf	5
 16589  264E  3F00               	moviw [0]fsr0
 16590  264F  0021               	movlb	1	; select bank1
 16591  2650  00C1               	movwf	___ftadd@f1^(0+128)
 16592  2651  3F01               	moviw [1]fsr0
 16593  2652  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16594  2653  3F02               	moviw [2]fsr0
 16595  2654  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16596  2655  0022               	movlb	2	; select bank2
 16597  2656  083B               	movf	eval_poly@res^(0+256),w
 16598  2657  0021               	movlb	1	; select bank1
 16599  2658  00AE               	movwf	___ftmul@f1^(0+128)
 16600  2659  0022               	movlb	2	; select bank2
 16601  265A  083C               	movf	(eval_poly@res+1)^(0+256),w
 16602  265B  0021               	movlb	1	; select bank1
 16603  265C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16604  265D  0022               	movlb	2	; select bank2
 16605  265E  083D               	movf	(eval_poly@res+2)^(0+256),w
 16606  265F  0021               	movlb	1	; select bank1
 16607  2660  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16608  2661  0022               	movlb	2	; select bank2
 16609  2662  0834               	movf	eval_poly@x^(0+256),w
 16610  2663  0021               	movlb	1	; select bank1
 16611  2664  00B1               	movwf	___ftmul@f2^(0+128)
 16612  2665  0022               	movlb	2	; select bank2
 16613  2666  0835               	movf	(eval_poly@x+1)^(0+256),w
 16614  2667  0021               	movlb	1	; select bank1
 16615  2668  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16616  2669  0022               	movlb	2	; select bank2
 16617  266A  0836               	movf	(eval_poly@x+2)^(0+256),w
 16618  266B  0021               	movlb	1	; select bank1
 16619  266C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16620  266D  319E  267B  31A6   	fcall	___ftmul
 16621  2670  0021               	movlb	1	; select bank1
 16622  2671  082E               	movf	?___ftmul^(0+128),w
 16623  2672  00C4               	movwf	___ftadd@f2^(0+128)
 16624  2673  082F               	movf	(?___ftmul+1)^(0+128),w
 16625  2674  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16626  2675  0830               	movf	(?___ftmul+2)^(0+128),w
 16627  2676  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16628  2677  3190  2035  31A6   	fcall	___ftadd
 16629  267A  0021               	movlb	1	; select bank1
 16630  267B  0841               	movf	?___ftadd^(0+128),w
 16631  267C  0022               	movlb	2	; select bank2
 16632  267D  00BB               	movwf	eval_poly@res^(0+256)
 16633  267E  0021               	movlb	1	; select bank1
 16634  267F  0842               	movf	(?___ftadd+1)^(0+128),w
 16635  2680  0022               	movlb	2	; select bank2
 16636  2681  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16637  2682  0021               	movlb	1	; select bank1
 16638  2683  0843               	movf	(?___ftadd+2)^(0+128),w
 16639  2684  0022               	movlb	2	; select bank2
 16640  2685  2E33               	goto	L19
 16641  2686                     l8160:	
 16642  2686  083B               	movf	eval_poly@res^(0+256),w
 16643  2687  00B4               	movwf	?_eval_poly^(0+256)
 16644  2688  083C               	movf	(eval_poly@res+1)^(0+256),w
 16645  2689  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16646  268A  083D               	movf	(eval_poly@res+2)^(0+256),w
 16647  268B  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16648  268C  0008               	return
 16649  268D                     __end_of_eval_poly:	
 16650                           
 16651                           	psect	text53
 16652  2DC5                     __ptext53:	
 16653 ;; *************** function ___wmul *****************
 16654 ;; Defined at:
 16655 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16658 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;  product         2   18[BANK2 ] unsigned int 
 16661 ;; Return value:  Size  Location     Type
 16662 ;;                  2   14[BANK2 ] unsigned int 
 16663 ;; Registers used:
 16664 ;;		wreg, status,2, status,0
 16665 ;; Tracked objects:
 16666 ;;		On entry : 0/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16670 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16671 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16673 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16674 ;;Total ram usage:        6 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    3
 16677 ;; This function calls:
 16678 ;;		Nothing
 16679 ;; This function is called by:
 16680 ;;		_calcCosArray
 16681 ;;		_updateModulationArray
 16682 ;;		_modCos
 16683 ;;		_eval_poly
 16684 ;; This function uses a non-reentrant model
 16685 ;;
 16686                           
 16687                           
 16688                           ;psect for function ___wmul
 16689  2DC5                     ___wmul:	
 16690                           
 16691                           ;incstack = 0
 16692                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16693  2DC5  0022               	movlb	2	; select bank2
 16694  2DC6  01B2               	clrf	___wmul@product^(0+256)
 16695  2DC7  01B3               	clrf	(___wmul@product+1)^(0+256)
 16696  2DC8                     l7776:	
 16697  2DC8  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16698  2DC9  2DCE               	goto	l1990
 16699  2DCA  0830               	movf	___wmul@multiplicand^(0+256),w
 16700  2DCB  07B2               	addwf	___wmul@product^(0+256),f
 16701  2DCC  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16702  2DCD  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16703  2DCE                     l1990:	
 16704  2DCE  3001               	movlw	1
 16705  2DCF                     u7905:	
 16706  2DCF  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16707  2DD0  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16708  2DD1  0B89               	decfsz	9,f
 16709  2DD2  2DCF               	goto	u7905
 16710  2DD3  3001               	movlw	1
 16711  2DD4                     u7915:	
 16712  2DD4  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16713  2DD5  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16714  2DD6  0B89               	decfsz	9,f
 16715  2DD7  2DD4               	goto	u7915
 16716  2DD8  082E               	movf	___wmul@multiplier^(0+256),w
 16717  2DD9  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16718  2DDA  1D03               	btfss	3,2
 16719  2DDB  2DC8               	goto	l7776
 16720  2DDC  0833               	movf	(___wmul@product+1)^(0+256),w
 16721  2DDD  00AF               	movwf	(?___wmul+1)^(0+256)
 16722  2DDE  0832               	movf	___wmul@product^(0+256),w
 16723  2DDF  00AE               	movwf	?___wmul^(0+256)
 16724  2DE0  0008               	return
 16725  2DE1                     __end_of___wmul:	
 16726                           
 16727                           	psect	text54
 16728  1E7B                     __ptext54:	
 16729 ;; *************** function ___ftmul *****************
 16730 ;; Defined at:
 16731 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16732 ;; Parameters:    Size  Location     Type
 16733 ;;  f1              3   14[BANK1 ] float 
 16734 ;;  f2              3   17[BANK1 ] float 
 16735 ;; Auto vars:     Size  Location     Type
 16736 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16737 ;;  sign            1   29[BANK1 ] unsigned char 
 16738 ;;  cntr            1   28[BANK1 ] unsigned char 
 16739 ;;  exp             1   24[BANK1 ] unsigned char 
 16740 ;; Return value:  Size  Location     Type
 16741 ;;                  3   14[BANK1 ] float 
 16742 ;; Registers used:
 16743 ;;		wreg, status,2, status,0, pclath, cstack
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16749 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16750 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16751 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16752 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16753 ;;Total ram usage:       16 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:    4
 16756 ;; This function calls:
 16757 ;;		___ftpack
 16758 ;; This function is called by:
 16759 ;;		_set_subdivision
 16760 ;;		_map
 16761 ;;		_scaleA100kPot
 16762 ;;		_scaleA10kPot
 16763 ;;		_scaleiA10kPot
 16764 ;;		_calcCosArray
 16765 ;;		_modCos
 16766 ;;		_modTri
 16767 ;;		_modSaw
 16768 ;;		_pow
 16769 ;;		_sin
 16770 ;;		_eval_poly
 16771 ;;		_exp
 16772 ;;		_log
 16773 ;;		_scalePotValue
 16774 ;;		_scaleiA100kPot
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           
 16779                           ;psect for function ___ftmul
 16780  1E7B                     ___ftmul:	
 16781                           
 16782                           ;incstack = 0
 16783                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16784  1E7B  0021               	movlb	1	; select bank1
 16785  1E7C  082E               	movf	___ftmul@f1^(0+128),w
 16786  1E7D  00B4               	movwf	??___ftmul^(0+128)
 16787  1E7E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16788  1E7F  00B5               	movwf	(??___ftmul^(0+128)+1)
 16789  1E80  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16790  1E81  00B6               	movwf	(??___ftmul^(0+128)+2)
 16791  1E82  1003               	clrc
 16792  1E83  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16793  1E84  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16794  1E85  00B7               	movwf	(??___ftmul+3)^(0+128)
 16795  1E86  0837               	movf	(??___ftmul+3)^(0+128),w
 16796  1E87  00B8               	movwf	___ftmul@exp^(0+128)
 16797  1E88  0838               	movf	___ftmul@exp^(0+128),w
 16798  1E89  1D03               	btfss	3,2
 16799  1E8A  2E92               	goto	l7900
 16800  1E8B  3000               	movlw	0
 16801  1E8C  00AE               	movwf	?___ftmul^(0+128)
 16802  1E8D  3000               	movlw	0
 16803  1E8E  00AF               	movwf	(?___ftmul+1)^(0+128)
 16804  1E8F  3000               	movlw	0
 16805  1E90  00B0               	movwf	(?___ftmul+2)^(0+128)
 16806  1E91  0008               	return
 16807  1E92                     l7900:	
 16808  1E92  0831               	movf	___ftmul@f2^(0+128),w
 16809  1E93  00B4               	movwf	??___ftmul^(0+128)
 16810  1E94  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16811  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 16812  1E96  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16813  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 16814  1E98  1003               	clrc
 16815  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16816  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16817  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16818  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 16819  1E9D  00BD               	movwf	___ftmul@sign^(0+128)
 16820  1E9E  083D               	movf	___ftmul@sign^(0+128),w
 16821  1E9F  1D03               	btfss	3,2
 16822  1EA0  2EA8               	goto	l7906
 16823  1EA1  3000               	movlw	0
 16824  1EA2  00AE               	movwf	?___ftmul^(0+128)
 16825  1EA3  3000               	movlw	0
 16826  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 16827  1EA5  3000               	movlw	0
 16828  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 16829  1EA7  0008               	return
 16830  1EA8                     l7906:	
 16831  1EA8  083D               	movf	___ftmul@sign^(0+128),w
 16832  1EA9  3E7B               	addlw	123
 16833  1EAA  00B4               	movwf	??___ftmul^(0+128)
 16834  1EAB  0834               	movf	??___ftmul^(0+128),w
 16835  1EAC  07B8               	addwf	___ftmul@exp^(0+128),f
 16836  1EAD  082E               	movf	___ftmul@f1^(0+128),w
 16837  1EAE  00B4               	movwf	??___ftmul^(0+128)
 16838  1EAF  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16839  1EB0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16840  1EB1  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16841  1EB2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16842  1EB3  3010               	movlw	16
 16843  1EB4                     u8245:	
 16844  1EB4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16845  1EB5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16846  1EB6  0CB4               	rrf	??___ftmul^(0+128),f
 16847  1EB7  0B89               	decfsz	9,f
 16848  1EB8  2EB4               	goto	u8245
 16849  1EB9  0834               	movf	??___ftmul^(0+128),w
 16850  1EBA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16851  1EBB  0837               	movf	(??___ftmul+3)^(0+128),w
 16852  1EBC  00BD               	movwf	___ftmul@sign^(0+128)
 16853  1EBD  0831               	movf	___ftmul@f2^(0+128),w
 16854  1EBE  00B4               	movwf	??___ftmul^(0+128)
 16855  1EBF  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16856  1EC0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16857  1EC1  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16858  1EC2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16859  1EC3  3010               	movlw	16
 16860  1EC4                     u8255:	
 16861  1EC4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16862  1EC5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16863  1EC6  0CB4               	rrf	??___ftmul^(0+128),f
 16864  1EC7  0B89               	decfsz	9,f
 16865  1EC8  2EC4               	goto	u8255
 16866  1EC9  0834               	movf	??___ftmul^(0+128),w
 16867  1ECA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16868  1ECB  0837               	movf	(??___ftmul+3)^(0+128),w
 16869  1ECC  06BD               	xorwf	___ftmul@sign^(0+128),f
 16870  1ECD  3080               	movlw	128
 16871  1ECE  00B4               	movwf	??___ftmul^(0+128)
 16872  1ECF  0834               	movf	??___ftmul^(0+128),w
 16873  1ED0  05BD               	andwf	___ftmul@sign^(0+128),f
 16874  1ED1  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16875  1ED2  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16876  1ED3  30FF               	movlw	255
 16877  1ED4  05B1               	andwf	___ftmul@f2^(0+128),f
 16878  1ED5  30FF               	movlw	255
 16879  1ED6  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16880  1ED7  3000               	movlw	0
 16881  1ED8  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16882  1ED9  3000               	movlw	0
 16883  1EDA  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16884  1EDB  3000               	movlw	0
 16885  1EDC  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16886  1EDD  3000               	movlw	0
 16887  1EDE  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16888  1EDF  3007               	movlw	7
 16889  1EE0  00B4               	movwf	??___ftmul^(0+128)
 16890  1EE1  0834               	movf	??___ftmul^(0+128),w
 16891  1EE2  00BC               	movwf	___ftmul@cntr^(0+128)
 16892  1EE3                     l7918:	
 16893  1EE3  1C2E               	btfss	___ftmul@f1^(0+128),0
 16894  1EE4  2EEB               	goto	l7922
 16895  1EE5  0831               	movf	___ftmul@f2^(0+128),w
 16896  1EE6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16897  1EE7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16898  1EE8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16899  1EE9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16900  1EEA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16901  1EEB                     l7922:	
 16902  1EEB  3001               	movlw	1
 16903  1EEC                     u8275:	
 16904  1EEC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16905  1EED  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16906  1EEE  0CAE               	rrf	___ftmul@f1^(0+128),f
 16907  1EEF  0B89               	decfsz	9,f
 16908  1EF0  2EEC               	goto	u8275
 16909  1EF1  3001               	movlw	1
 16910  1EF2                     u8285:	
 16911  1EF2  35B1               	lslf	___ftmul@f2^(0+128),f
 16912  1EF3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16913  1EF4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16914  1EF5  0B89               	decfsz	9,f
 16915  1EF6  2EF2               	goto	u8285
 16916  1EF7  3001               	movlw	1
 16917  1EF8  02BC               	subwf	___ftmul@cntr^(0+128),f
 16918  1EF9  1D03               	btfss	3,2
 16919  1EFA  2EE3               	goto	l7918
 16920  1EFB  3009               	movlw	9
 16921  1EFC  00B4               	movwf	??___ftmul^(0+128)
 16922  1EFD  0834               	movf	??___ftmul^(0+128),w
 16923  1EFE  00BC               	movwf	___ftmul@cntr^(0+128)
 16924  1EFF                     l7930:	
 16925  1EFF  1C2E               	btfss	___ftmul@f1^(0+128),0
 16926  1F00  2F07               	goto	l7934
 16927  1F01  0831               	movf	___ftmul@f2^(0+128),w
 16928  1F02  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16929  1F03  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16930  1F04  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16931  1F05  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16932  1F06  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16933  1F07                     l7934:	
 16934  1F07  3001               	movlw	1
 16935  1F08                     u8315:	
 16936  1F08  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16937  1F09  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16938  1F0A  0CAE               	rrf	___ftmul@f1^(0+128),f
 16939  1F0B  0B89               	decfsz	9,f
 16940  1F0C  2F08               	goto	u8315
 16941  1F0D  3001               	movlw	1
 16942  1F0E                     u8325:	
 16943  1F0E  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16944  1F0F  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16945  1F10  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16946  1F11  0B89               	decfsz	9,f
 16947  1F12  2F0E               	goto	u8325
 16948  1F13  3001               	movlw	1
 16949  1F14  02BC               	subwf	___ftmul@cntr^(0+128),f
 16950  1F15  1D03               	btfss	3,2
 16951  1F16  2EFF               	goto	l7930
 16952  1F17  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16953  1F18  00A0               	movwf	___ftpack@arg^(0+128)
 16954  1F19  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16955  1F1A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16956  1F1B  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16957  1F1C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16958  1F1D  0838               	movf	___ftmul@exp^(0+128),w
 16959  1F1E  00B4               	movwf	??___ftmul^(0+128)
 16960  1F1F  0834               	movf	??___ftmul^(0+128),w
 16961  1F20  00A3               	movwf	___ftpack@exp^(0+128)
 16962  1F21  083D               	movf	___ftmul@sign^(0+128),w
 16963  1F22  00B5               	movwf	(??___ftmul+1)^(0+128)
 16964  1F23  0835               	movf	(??___ftmul+1)^(0+128),w
 16965  1F24  00A4               	movwf	___ftpack@sign^(0+128)
 16966  1F25  31A5  25B6         	fcall	___ftpack
 16967  1F27  0021               	movlb	1	; select bank1
 16968  1F28  0820               	movf	?___ftpack^(0+128),w
 16969  1F29  00AE               	movwf	?___ftmul^(0+128)
 16970  1F2A  0821               	movf	(?___ftpack+1)^(0+128),w
 16971  1F2B  00AF               	movwf	(?___ftmul+1)^(0+128)
 16972  1F2C  0822               	movf	(?___ftpack+2)^(0+128),w
 16973  1F2D  00B0               	movwf	(?___ftmul+2)^(0+128)
 16974  1F2E  0008               	return
 16975  1F2F                     __end_of___ftmul:	
 16976                           
 16977                           	psect	text55
 16978  2ED5                     __ptext55:	
 16979 ;; *************** function ___ftsub *****************
 16980 ;; Defined at:
 16981 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  f2              3   23[BANK2 ] float 
 16984 ;;  f1              3   26[BANK2 ] float 
 16985 ;; Auto vars:     Size  Location     Type
 16986 ;;		None
 16987 ;; Return value:  Size  Location     Type
 16988 ;;                  3   23[BANK2 ] float 
 16989 ;; Registers used:
 16990 ;;		wreg, status,2, status,0, pclath, cstack
 16991 ;; Tracked objects:
 16992 ;;		On entry : 0/0
 16993 ;;		On exit  : 0/0
 16994 ;;		Unchanged: 0/0
 16995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16996 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16999 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17000 ;;Total ram usage:        6 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:    5
 17003 ;; This function calls:
 17004 ;;		___ftadd
 17005 ;; This function is called by:
 17006 ;;		_sin
 17007 ;;		_exp
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           
 17012                           ;psect for function ___ftsub
 17013  2ED5                     ___ftsub:	
 17014                           
 17015                           ;incstack = 0
 17016                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 17017  2ED5  0022               	movlb	2	; select bank2
 17018  2ED6  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17019  2ED7  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 17020  2ED8  0437               	iorwf	___ftsub@f2^(0+256),w
 17021  2ED9  1903               	skipnz
 17022  2EDA  2EDD               	goto	l8122
 17023  2EDB  3080               	movlw	128
 17024  2EDC  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 17025  2EDD                     l8122:	
 17026  2EDD  083A               	movf	___ftsub@f1^(0+256),w
 17027  2EDE  0021               	movlb	1	; select bank1
 17028  2EDF  00C1               	movwf	___ftadd@f1^(0+128)
 17029  2EE0  0022               	movlb	2	; select bank2
 17030  2EE1  083B               	movf	(___ftsub@f1+1)^(0+256),w
 17031  2EE2  0021               	movlb	1	; select bank1
 17032  2EE3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17033  2EE4  0022               	movlb	2	; select bank2
 17034  2EE5  083C               	movf	(___ftsub@f1+2)^(0+256),w
 17035  2EE6  0021               	movlb	1	; select bank1
 17036  2EE7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17037  2EE8  0022               	movlb	2	; select bank2
 17038  2EE9  0837               	movf	___ftsub@f2^(0+256),w
 17039  2EEA  0021               	movlb	1	; select bank1
 17040  2EEB  00C4               	movwf	___ftadd@f2^(0+128)
 17041  2EEC  0022               	movlb	2	; select bank2
 17042  2EED  0838               	movf	(___ftsub@f2+1)^(0+256),w
 17043  2EEE  0021               	movlb	1	; select bank1
 17044  2EEF  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17045  2EF0  0022               	movlb	2	; select bank2
 17046  2EF1  0839               	movf	(___ftsub@f2+2)^(0+256),w
 17047  2EF2  0021               	movlb	1	; select bank1
 17048  2EF3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17049  2EF4  3190  2035         	fcall	___ftadd
 17050  2EF6  0021               	movlb	1	; select bank1
 17051  2EF7  0841               	movf	?___ftadd^(0+128),w
 17052  2EF8  0022               	movlb	2	; select bank2
 17053  2EF9  00B7               	movwf	?___ftsub^(0+256)
 17054  2EFA  0021               	movlb	1	; select bank1
 17055  2EFB  0842               	movf	(?___ftadd+1)^(0+128),w
 17056  2EFC  0022               	movlb	2	; select bank2
 17057  2EFD  00B8               	movwf	(?___ftsub+1)^(0+256)
 17058  2EFE  0021               	movlb	1	; select bank1
 17059  2EFF  0843               	movf	(?___ftadd+2)^(0+128),w
 17060  2F00  0022               	movlb	2	; select bank2
 17061  2F01  00B9               	movwf	(?___ftsub+2)^(0+256)
 17062  2F02  0008               	return
 17063  2F03                     __end_of___ftsub:	
 17064                           
 17065                           	psect	text56
 17066  1035                     __ptext56:	
 17067 ;; *************** function ___ftadd *****************
 17068 ;; Defined at:
 17069 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;  f1              3   33[BANK1 ] float 
 17072 ;;  f2              3   36[BANK1 ] float 
 17073 ;; Auto vars:     Size  Location     Type
 17074 ;;  exp1            1   45[BANK1 ] unsigned char 
 17075 ;;  exp2            1   44[BANK1 ] unsigned char 
 17076 ;;  sign            1   43[BANK1 ] unsigned char 
 17077 ;; Return value:  Size  Location     Type
 17078 ;;                  3   33[BANK1 ] float 
 17079 ;; Registers used:
 17080 ;;		wreg, status,2, status,0, pclath, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17086 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17087 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17088 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17089 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17090 ;;Total ram usage:       13 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    4
 17093 ;; This function calls:
 17094 ;;		___ftpack
 17095 ;; This function is called by:
 17096 ;;		_map
 17097 ;;		_scaleiA10kPot
 17098 ;;		_modCos
 17099 ;;		_modTri
 17100 ;;		_modSaw
 17101 ;;		_cos
 17102 ;;		___ftsub
 17103 ;;		_sin
 17104 ;;		_eval_poly
 17105 ;;		_floor
 17106 ;;		_log
 17107 ;;		_scalePotValue
 17108 ;; This function uses a non-reentrant model
 17109 ;;
 17110                           
 17111                           
 17112                           ;psect for function ___ftadd
 17113  1035                     ___ftadd:	
 17114                           
 17115                           ;incstack = 0
 17116                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17117  1035  0021               	movlb	1	; select bank1
 17118  1036  0841               	movf	___ftadd@f1^(0+128),w
 17119  1037  00C7               	movwf	??___ftadd^(0+128)
 17120  1038  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17121  1039  00C8               	movwf	(??___ftadd^(0+128)+1)
 17122  103A  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17123  103B  00C9               	movwf	(??___ftadd^(0+128)+2)
 17124  103C  1003               	clrc
 17125  103D  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17126  103E  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17127  103F  00CA               	movwf	(??___ftadd+3)^(0+128)
 17128  1040  084A               	movf	(??___ftadd+3)^(0+128),w
 17129  1041  00CD               	movwf	___ftadd@exp1^(0+128)
 17130  1042  0844               	movf	___ftadd@f2^(0+128),w
 17131  1043  00C7               	movwf	??___ftadd^(0+128)
 17132  1044  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17133  1045  00C8               	movwf	(??___ftadd^(0+128)+1)
 17134  1046  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17135  1047  00C9               	movwf	(??___ftadd^(0+128)+2)
 17136  1048  1003               	clrc
 17137  1049  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17138  104A  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17139  104B  00CA               	movwf	(??___ftadd+3)^(0+128)
 17140  104C  084A               	movf	(??___ftadd+3)^(0+128),w
 17141  104D  00CC               	movwf	___ftadd@exp2^(0+128)
 17142  104E  084D               	movf	___ftadd@exp1^(0+128),w
 17143  104F  1903               	btfsc	3,2
 17144  1050  285D               	goto	l7810
 17145  1051  084C               	movf	___ftadd@exp2^(0+128),w
 17146  1052  024D               	subwf	___ftadd@exp1^(0+128),w
 17147  1053  1803               	skipnc
 17148  1054  2864               	goto	l7814
 17149  1055  034D               	decf	___ftadd@exp1^(0+128),w
 17150  1056  3AFF               	xorlw	255
 17151  1057  074C               	addwf	___ftadd@exp2^(0+128),w
 17152  1058  00C7               	movwf	??___ftadd^(0+128)
 17153  1059  3019               	movlw	25
 17154  105A  0247               	subwf	??___ftadd^(0+128),w
 17155  105B  1C03               	skipc
 17156  105C  2864               	goto	l7814
 17157  105D                     l7810:	
 17158  105D  0844               	movf	___ftadd@f2^(0+128),w
 17159  105E  00C1               	movwf	?___ftadd^(0+128)
 17160  105F  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17161  1060  00C2               	movwf	(?___ftadd+1)^(0+128)
 17162  1061  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17163  1062  00C3               	movwf	(?___ftadd+2)^(0+128)
 17164  1063  0008               	return
 17165  1064                     l7814:	
 17166  1064  084C               	movf	___ftadd@exp2^(0+128),w
 17167  1065  1903               	btfsc	3,2
 17168  1066  0008               	return
 17169  1067  084D               	movf	___ftadd@exp1^(0+128),w
 17170  1068  024C               	subwf	___ftadd@exp2^(0+128),w
 17171  1069  1803               	skipnc
 17172  106A  2873               	goto	l7820
 17173  106B  034C               	decf	___ftadd@exp2^(0+128),w
 17174  106C  3AFF               	xorlw	255
 17175  106D  074D               	addwf	___ftadd@exp1^(0+128),w
 17176  106E  00C7               	movwf	??___ftadd^(0+128)
 17177  106F  3019               	movlw	25
 17178  1070  0247               	subwf	??___ftadd^(0+128),w
 17179  1071  1803               	btfsc	3,0
 17180  1072  0008               	return
 17181  1073                     l7820:	
 17182  1073  3006               	movlw	6
 17183  1074  00C7               	movwf	??___ftadd^(0+128)
 17184  1075  0847               	movf	??___ftadd^(0+128),w
 17185  1076  00CB               	movwf	___ftadd@sign^(0+128)
 17186  1077  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17187  1078  17CB               	bsf	___ftadd@sign^(0+128),7
 17188  1079  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17189  107A  174B               	bsf	___ftadd@sign^(0+128),6
 17190  107B  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17191  107C  30FF               	movlw	255
 17192  107D  05C1               	andwf	___ftadd@f1^(0+128),f
 17193  107E  30FF               	movlw	255
 17194  107F  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17195  1080  3000               	movlw	0
 17196  1081  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17197  1082  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17198  1083  30FF               	movlw	255
 17199  1084  05C4               	andwf	___ftadd@f2^(0+128),f
 17200  1085  30FF               	movlw	255
 17201  1086  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17202  1087  3000               	movlw	0
 17203  1088  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17204  1089  084C               	movf	___ftadd@exp2^(0+128),w
 17205  108A  024D               	subwf	___ftadd@exp1^(0+128),w
 17206  108B  1803               	skipnc
 17207  108C  28AF               	goto	l7842
 17208  108D                     l7832:	
 17209  108D  3001               	movlw	1
 17210  108E                     u8055:	
 17211  108E  35C4               	lslf	___ftadd@f2^(0+128),f
 17212  108F  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17213  1090  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17214  1091  0B89               	decfsz	9,f
 17215  1092  288E               	goto	u8055
 17216  1093  3001               	movlw	1
 17217  1094  02CC               	subwf	___ftadd@exp2^(0+128),f
 17218  1095  084C               	movf	___ftadd@exp2^(0+128),w
 17219  1096  064D               	xorwf	___ftadd@exp1^(0+128),w
 17220  1097  1903               	skipnz
 17221  1098  28AA               	goto	l7840
 17222  1099  3001               	movlw	1
 17223  109A  02CB               	subwf	___ftadd@sign^(0+128),f
 17224  109B  084B               	movf	___ftadd@sign^(0+128),w
 17225  109C  3907               	andlw	7
 17226  109D  1903               	btfsc	3,2
 17227  109E  28AA               	goto	l7840
 17228  109F  288D               	goto	l7832
 17229  10A0                     l7838:	
 17230  10A0  3001               	movlw	1
 17231  10A1                     u8085:	
 17232  10A1  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17233  10A2  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17234  10A3  0CC1               	rrf	___ftadd@f1^(0+128),f
 17235  10A4  0B89               	decfsz	9,f
 17236  10A5  28A1               	goto	u8085
 17237  10A6  3001               	movlw	1
 17238  10A7  00C7               	movwf	??___ftadd^(0+128)
 17239  10A8  0847               	movf	??___ftadd^(0+128),w
 17240  10A9  07CD               	addwf	___ftadd@exp1^(0+128),f
 17241  10AA                     l7840:	
 17242  10AA  084D               	movf	___ftadd@exp1^(0+128),w
 17243  10AB  064C               	xorwf	___ftadd@exp2^(0+128),w
 17244  10AC  1903               	btfsc	3,2
 17245  10AD  28D4               	goto	l2188
 17246  10AE  28A0               	goto	l7838
 17247  10AF                     l7842:	
 17248  10AF  084D               	movf	___ftadd@exp1^(0+128),w
 17249  10B0  024C               	subwf	___ftadd@exp2^(0+128),w
 17250  10B1  1803               	skipnc
 17251  10B2  28D4               	goto	l2188
 17252  10B3                     l7844:	
 17253  10B3  3001               	movlw	1
 17254  10B4                     u8115:	
 17255  10B4  35C1               	lslf	___ftadd@f1^(0+128),f
 17256  10B5  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17257  10B6  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17258  10B7  0B89               	decfsz	9,f
 17259  10B8  28B4               	goto	u8115
 17260  10B9  3001               	movlw	1
 17261  10BA  02CD               	subwf	___ftadd@exp1^(0+128),f
 17262  10BB  084C               	movf	___ftadd@exp2^(0+128),w
 17263  10BC  064D               	xorwf	___ftadd@exp1^(0+128),w
 17264  10BD  1903               	skipnz
 17265  10BE  28D0               	goto	l7852
 17266  10BF  3001               	movlw	1
 17267  10C0  02CB               	subwf	___ftadd@sign^(0+128),f
 17268  10C1  084B               	movf	___ftadd@sign^(0+128),w
 17269  10C2  3907               	andlw	7
 17270  10C3  1903               	btfsc	3,2
 17271  10C4  28D0               	goto	l7852
 17272  10C5  28B3               	goto	l7844
 17273  10C6                     l7850:	
 17274  10C6  3001               	movlw	1
 17275  10C7                     u8145:	
 17276  10C7  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17277  10C8  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17278  10C9  0CC4               	rrf	___ftadd@f2^(0+128),f
 17279  10CA  0B89               	decfsz	9,f
 17280  10CB  28C7               	goto	u8145
 17281  10CC  3001               	movlw	1
 17282  10CD  00C7               	movwf	??___ftadd^(0+128)
 17283  10CE  0847               	movf	??___ftadd^(0+128),w
 17284  10CF  07CC               	addwf	___ftadd@exp2^(0+128),f
 17285  10D0                     l7852:	
 17286  10D0  084D               	movf	___ftadd@exp1^(0+128),w
 17287  10D1  064C               	xorwf	___ftadd@exp2^(0+128),w
 17288  10D2  1D03               	skipz
 17289  10D3  28C6               	goto	l7850
 17290  10D4                     l2188:	
 17291  10D4  1FCB               	btfss	___ftadd@sign^(0+128),7
 17292  10D5  28E6               	goto	l7856
 17293  10D6  30FF               	movlw	255
 17294  10D7  06C1               	xorwf	___ftadd@f1^(0+128),f
 17295  10D8  30FF               	movlw	255
 17296  10D9  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17297  10DA  30FF               	movlw	255
 17298  10DB  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17299  10DC  3001               	movlw	1
 17300  10DD  07C1               	addwf	___ftadd@f1^(0+128),f
 17301  10DE  3000               	movlw	0
 17302  10DF  1803               	skipnc
 17303  10E0  3001               	movlw	1
 17304  10E1  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17305  10E2  3000               	movlw	0
 17306  10E3  1803               	skipnc
 17307  10E4  3001               	movlw	1
 17308  10E5  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17309  10E6                     l7856:	
 17310  10E6  1F4B               	btfss	___ftadd@sign^(0+128),6
 17311  10E7  28F8               	goto	l7860
 17312  10E8  30FF               	movlw	255
 17313  10E9  06C4               	xorwf	___ftadd@f2^(0+128),f
 17314  10EA  30FF               	movlw	255
 17315  10EB  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17316  10EC  30FF               	movlw	255
 17317  10ED  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17318  10EE  3001               	movlw	1
 17319  10EF  07C4               	addwf	___ftadd@f2^(0+128),f
 17320  10F0  3000               	movlw	0
 17321  10F1  1803               	skipnc
 17322  10F2  3001               	movlw	1
 17323  10F3  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17324  10F4  3000               	movlw	0
 17325  10F5  1803               	skipnc
 17326  10F6  3001               	movlw	1
 17327  10F7  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17328  10F8                     l7860:	
 17329  10F8  01CB               	clrf	___ftadd@sign^(0+128)
 17330  10F9  0841               	movf	___ftadd@f1^(0+128),w
 17331  10FA  07C4               	addwf	___ftadd@f2^(0+128),f
 17332  10FB  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17333  10FC  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17334  10FD  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17335  10FE  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17336  10FF  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17337  1100  2913               	goto	l7870
 17338  1101  30FF               	movlw	255
 17339  1102  06C4               	xorwf	___ftadd@f2^(0+128),f
 17340  1103  30FF               	movlw	255
 17341  1104  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17342  1105  30FF               	movlw	255
 17343  1106  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17344  1107  3001               	movlw	1
 17345  1108  07C4               	addwf	___ftadd@f2^(0+128),f
 17346  1109  3000               	movlw	0
 17347  110A  1803               	skipnc
 17348  110B  3001               	movlw	1
 17349  110C  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17350  110D  3000               	movlw	0
 17351  110E  1803               	skipnc
 17352  110F  3001               	movlw	1
 17353  1110  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17354  1111  01CB               	clrf	___ftadd@sign^(0+128)
 17355  1112  0ACB               	incf	___ftadd@sign^(0+128),f
 17356  1113                     l7870:	
 17357  1113  0844               	movf	___ftadd@f2^(0+128),w
 17358  1114  00A0               	movwf	___ftpack@arg^(0+128)
 17359  1115  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17360  1116  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17361  1117  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17362  1118  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17363  1119  084D               	movf	___ftadd@exp1^(0+128),w
 17364  111A  00C7               	movwf	??___ftadd^(0+128)
 17365  111B  0847               	movf	??___ftadd^(0+128),w
 17366  111C  00A3               	movwf	___ftpack@exp^(0+128)
 17367  111D  084B               	movf	___ftadd@sign^(0+128),w
 17368  111E  00C8               	movwf	(??___ftadd+1)^(0+128)
 17369  111F  0848               	movf	(??___ftadd+1)^(0+128),w
 17370  1120  00A4               	movwf	___ftpack@sign^(0+128)
 17371  1121  31A5  25B6         	fcall	___ftpack
 17372  1123  0021               	movlb	1	; select bank1
 17373  1124  0820               	movf	?___ftpack^(0+128),w
 17374  1125  00C1               	movwf	?___ftadd^(0+128)
 17375  1126  0821               	movf	(?___ftpack+1)^(0+128),w
 17376  1127  00C2               	movwf	(?___ftadd+1)^(0+128)
 17377  1128  0822               	movf	(?___ftpack+2)^(0+128),w
 17378  1129  00C3               	movwf	(?___ftadd+2)^(0+128)
 17379  112A  0008               	return
 17380  112B                     __end_of___ftadd:	
 17381                           
 17382                           	psect	text57
 17383  2CF8                     __ptext57:	
 17384 ;; *************** function ___ftneg *****************
 17385 ;; Defined at:
 17386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17387 ;; Parameters:    Size  Location     Type
 17388 ;;  f1              3   30[BANK1 ] float 
 17389 ;; Auto vars:     Size  Location     Type
 17390 ;;		None
 17391 ;; Return value:  Size  Location     Type
 17392 ;;                  3   30[BANK1 ] float 
 17393 ;; Registers used:
 17394 ;;		wreg
 17395 ;; Tracked objects:
 17396 ;;		On entry : 0/0
 17397 ;;		On exit  : 0/0
 17398 ;;		Unchanged: 0/0
 17399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17400 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17403 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17404 ;;Total ram usage:        3 bytes
 17405 ;; Hardware stack levels used:    1
 17406 ;; Hardware stack levels required when called:    3
 17407 ;; This function calls:
 17408 ;;		Nothing
 17409 ;; This function is called by:
 17410 ;;		_map
 17411 ;;		_scaleiA10kPot
 17412 ;;		_modCos
 17413 ;;		_modTri
 17414 ;;		_modSaw
 17415 ;;		_pow
 17416 ;;		_sin
 17417 ;;		_exp
 17418 ;;		_ldexp
 17419 ;;		_scalePotValue
 17420 ;; This function uses a non-reentrant model
 17421 ;;
 17422                           
 17423                           
 17424                           ;psect for function ___ftneg
 17425  2CF8                     ___ftneg:	
 17426                           
 17427                           ;incstack = 0
 17428                           ; Regs used in ___ftneg: [wreg]
 17429  2CF8  0021               	movlb	1	; select bank1
 17430  2CF9  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17431  2CFA  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17432  2CFB  043E               	iorwf	___ftneg@f1^(0+128),w
 17433  2CFC  1903               	skipnz
 17434  2CFD  0008               	return
 17435  2CFE  3080               	movlw	128
 17436  2CFF  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17437  2D00  0008               	return
 17438  2D01                     __end_of___ftneg:	
 17439                           
 17440                           	psect	text58
 17441  1C74                     __ptext58:	
 17442 ;; *************** function ___ftdiv *****************
 17443 ;; Defined at:
 17444 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17445 ;; Parameters:    Size  Location     Type
 17446 ;;  f2              3   46[BANK1 ] float 
 17447 ;;  f1              3   49[BANK1 ] float 
 17448 ;; Auto vars:     Size  Location     Type
 17449 ;;  f3              3   57[BANK1 ] float 
 17450 ;;  sign            1   61[BANK1 ] unsigned char 
 17451 ;;  exp             1   60[BANK1 ] unsigned char 
 17452 ;;  cntr            1   56[BANK1 ] unsigned char 
 17453 ;; Return value:  Size  Location     Type
 17454 ;;                  3   46[BANK1 ] float 
 17455 ;; Registers used:
 17456 ;;		wreg, status,2, status,0, pclath, cstack
 17457 ;; Tracked objects:
 17458 ;;		On entry : 0/0
 17459 ;;		On exit  : 0/0
 17460 ;;		Unchanged: 0/0
 17461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17462 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17463 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17464 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17465 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17466 ;;Total ram usage:       16 bytes
 17467 ;; Hardware stack levels used:    1
 17468 ;; Hardware stack levels required when called:    4
 17469 ;; This function calls:
 17470 ;;		___ftpack
 17471 ;; This function is called by:
 17472 ;;		_map
 17473 ;;		_scaleA100kPot
 17474 ;;		_scaleA10kPot
 17475 ;;		_scaleiA10kPot
 17476 ;;		_calcCosArray
 17477 ;;		_getModulationDelayTime
 17478 ;;		_modCos
 17479 ;;		_modTri
 17480 ;;		_modSaw
 17481 ;;		_sin
 17482 ;;		_exp
 17483 ;;		_scalePotValue
 17484 ;;		_scaleiA100kPot
 17485 ;; This function uses a non-reentrant model
 17486 ;;
 17487                           
 17488                           
 17489                           ;psect for function ___ftdiv
 17490  1C74                     ___ftdiv:	
 17491                           
 17492                           ;incstack = 0
 17493                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17494  1C74  0021               	movlb	1	; select bank1
 17495  1C75  0851               	movf	___ftdiv@f1^(0+128),w
 17496  1C76  00D4               	movwf	??___ftdiv^(0+128)
 17497  1C77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17498  1C78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17499  1C79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17500  1C7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17501  1C7B  1003               	clrc
 17502  1C7C  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17503  1C7D  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17504  1C7E  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17505  1C7F  0857               	movf	(??___ftdiv+3)^(0+128),w
 17506  1C80  00DC               	movwf	___ftdiv@exp^(0+128)
 17507  1C81  085C               	movf	___ftdiv@exp^(0+128),w
 17508  1C82  1D03               	btfss	3,2
 17509  1C83  2C8B               	goto	l8082
 17510  1C84  3000               	movlw	0
 17511  1C85  00CE               	movwf	?___ftdiv^(0+128)
 17512  1C86  3000               	movlw	0
 17513  1C87  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17514  1C88  3000               	movlw	0
 17515  1C89  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17516  1C8A  0008               	return
 17517  1C8B                     l8082:	
 17518  1C8B  084E               	movf	___ftdiv@f2^(0+128),w
 17519  1C8C  00D4               	movwf	??___ftdiv^(0+128)
 17520  1C8D  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17521  1C8E  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17522  1C8F  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17523  1C90  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17524  1C91  1003               	clrc
 17525  1C92  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17526  1C93  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17527  1C94  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17528  1C95  0857               	movf	(??___ftdiv+3)^(0+128),w
 17529  1C96  00DD               	movwf	___ftdiv@sign^(0+128)
 17530  1C97  085D               	movf	___ftdiv@sign^(0+128),w
 17531  1C98  1D03               	btfss	3,2
 17532  1C99  2CA1               	goto	l8088
 17533  1C9A  3000               	movlw	0
 17534  1C9B  00CE               	movwf	?___ftdiv^(0+128)
 17535  1C9C  3000               	movlw	0
 17536  1C9D  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17537  1C9E  3000               	movlw	0
 17538  1C9F  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17539  1CA0  0008               	return
 17540  1CA1                     l8088:	
 17541  1CA1  3000               	movlw	0
 17542  1CA2  00D9               	movwf	___ftdiv@f3^(0+128)
 17543  1CA3  3000               	movlw	0
 17544  1CA4  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17545  1CA5  3000               	movlw	0
 17546  1CA6  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17547  1CA7  3089               	movlw	137
 17548  1CA8  075D               	addwf	___ftdiv@sign^(0+128),w
 17549  1CA9  00D4               	movwf	??___ftdiv^(0+128)
 17550  1CAA  0854               	movf	??___ftdiv^(0+128),w
 17551  1CAB  02DC               	subwf	___ftdiv@exp^(0+128),f
 17552  1CAC  0851               	movf	___ftdiv@f1^(0+128),w
 17553  1CAD  00D4               	movwf	??___ftdiv^(0+128)
 17554  1CAE  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17555  1CAF  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17556  1CB0  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17557  1CB1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17558  1CB2  3010               	movlw	16
 17559  1CB3                     u8545:	
 17560  1CB3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17561  1CB4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17562  1CB5  0CD4               	rrf	??___ftdiv^(0+128),f
 17563  1CB6  0B89               	decfsz	9,f
 17564  1CB7  2CB3               	goto	u8545
 17565  1CB8  0854               	movf	??___ftdiv^(0+128),w
 17566  1CB9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17567  1CBA  0857               	movf	(??___ftdiv+3)^(0+128),w
 17568  1CBB  00DD               	movwf	___ftdiv@sign^(0+128)
 17569  1CBC  084E               	movf	___ftdiv@f2^(0+128),w
 17570  1CBD  00D4               	movwf	??___ftdiv^(0+128)
 17571  1CBE  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17572  1CBF  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17573  1CC0  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17574  1CC1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17575  1CC2  3010               	movlw	16
 17576  1CC3                     u8555:	
 17577  1CC3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17578  1CC4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17579  1CC5  0CD4               	rrf	??___ftdiv^(0+128),f
 17580  1CC6  0B89               	decfsz	9,f
 17581  1CC7  2CC3               	goto	u8555
 17582  1CC8  0854               	movf	??___ftdiv^(0+128),w
 17583  1CC9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17584  1CCA  0857               	movf	(??___ftdiv+3)^(0+128),w
 17585  1CCB  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17586  1CCC  3080               	movlw	128
 17587  1CCD  00D4               	movwf	??___ftdiv^(0+128)
 17588  1CCE  0854               	movf	??___ftdiv^(0+128),w
 17589  1CCF  05DD               	andwf	___ftdiv@sign^(0+128),f
 17590  1CD0  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17591  1CD1  30FF               	movlw	255
 17592  1CD2  05D1               	andwf	___ftdiv@f1^(0+128),f
 17593  1CD3  30FF               	movlw	255
 17594  1CD4  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17595  1CD5  3000               	movlw	0
 17596  1CD6  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17597  1CD7  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17598  1CD8  30FF               	movlw	255
 17599  1CD9  05CE               	andwf	___ftdiv@f2^(0+128),f
 17600  1CDA  30FF               	movlw	255
 17601  1CDB  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17602  1CDC  3000               	movlw	0
 17603  1CDD  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17604  1CDE  3018               	movlw	24
 17605  1CDF  00D4               	movwf	??___ftdiv^(0+128)
 17606  1CE0  0854               	movf	??___ftdiv^(0+128),w
 17607  1CE1  00D8               	movwf	___ftdiv@cntr^(0+128)
 17608  1CE2                     l8102:	
 17609  1CE2  3001               	movlw	1
 17610  1CE3                     u8565:	
 17611  1CE3  35D9               	lslf	___ftdiv@f3^(0+128),f
 17612  1CE4  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17613  1CE5  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17614  1CE6  0B89               	decfsz	9,f
 17615  1CE7  2CE3               	goto	u8565
 17616  1CE8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17617  1CE9  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17618  1CEA  1D03               	skipz
 17619  1CEB  2CF2               	goto	u8575
 17620  1CEC  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17621  1CED  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17622  1CEE  1D03               	skipz
 17623  1CEF  2CF2               	goto	u8575
 17624  1CF0  084E               	movf	___ftdiv@f2^(0+128),w
 17625  1CF1  0251               	subwf	___ftdiv@f1^(0+128),w
 17626  1CF2                     u8575:	
 17627  1CF2  1C03               	skipc
 17628  1CF3  2CFB               	goto	l8110
 17629  1CF4  084E               	movf	___ftdiv@f2^(0+128),w
 17630  1CF5  02D1               	subwf	___ftdiv@f1^(0+128),f
 17631  1CF6  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17632  1CF7  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17633  1CF8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17634  1CF9  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17635  1CFA  1459               	bsf	___ftdiv@f3^(0+128),0
 17636  1CFB                     l8110:	
 17637  1CFB  3001               	movlw	1
 17638  1CFC                     u8585:	
 17639  1CFC  35D1               	lslf	___ftdiv@f1^(0+128),f
 17640  1CFD  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17641  1CFE  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17642  1CFF  0B89               	decfsz	9,f
 17643  1D00  2CFC               	goto	u8585
 17644  1D01  3001               	movlw	1
 17645  1D02  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17646  1D03  1D03               	btfss	3,2
 17647  1D04  2CE2               	goto	l8102
 17648  1D05  0859               	movf	___ftdiv@f3^(0+128),w
 17649  1D06  00A0               	movwf	___ftpack@arg^(0+128)
 17650  1D07  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17651  1D08  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17652  1D09  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17653  1D0A  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17654  1D0B  085C               	movf	___ftdiv@exp^(0+128),w
 17655  1D0C  00D4               	movwf	??___ftdiv^(0+128)
 17656  1D0D  0854               	movf	??___ftdiv^(0+128),w
 17657  1D0E  00A3               	movwf	___ftpack@exp^(0+128)
 17658  1D0F  085D               	movf	___ftdiv@sign^(0+128),w
 17659  1D10  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17660  1D11  0855               	movf	(??___ftdiv+1)^(0+128),w
 17661  1D12  00A4               	movwf	___ftpack@sign^(0+128)
 17662  1D13  31A5  25B6         	fcall	___ftpack
 17663  1D15  0021               	movlb	1	; select bank1
 17664  1D16  0820               	movf	?___ftpack^(0+128),w
 17665  1D17  00CE               	movwf	?___ftdiv^(0+128)
 17666  1D18  0821               	movf	(?___ftpack+1)^(0+128),w
 17667  1D19  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17668  1D1A  0822               	movf	(?___ftpack+2)^(0+128),w
 17669  1D1B  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17670  1D1C  0008               	return
 17671  1D1D                     __end_of___ftdiv:	
 17672                           
 17673                           	psect	text59
 17674  2E3A                     __ptext59:	
 17675 ;; *************** function ___awtoft *****************
 17676 ;; Defined at:
 17677 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  c               2    8[BANK1 ] int 
 17680 ;; Auto vars:     Size  Location     Type
 17681 ;;  sign            1   13[BANK1 ] unsigned char 
 17682 ;; Return value:  Size  Location     Type
 17683 ;;                  3    8[BANK1 ] float 
 17684 ;; Registers used:
 17685 ;;		wreg, status,2, status,0, pclath, cstack
 17686 ;; Tracked objects:
 17687 ;;		On entry : 0/0
 17688 ;;		On exit  : 0/0
 17689 ;;		Unchanged: 0/0
 17690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17691 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17692 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17693 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17694 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17695 ;;Total ram usage:        6 bytes
 17696 ;; Hardware stack levels used:    1
 17697 ;; Hardware stack levels required when called:    4
 17698 ;; This function calls:
 17699 ;;		___ftpack
 17700 ;; This function is called by:
 17701 ;;		_main
 17702 ;;		_set_subdivision
 17703 ;;		_calcCosArray
 17704 ;;		_getModulationDelayTime
 17705 ;;		_updateModulationArray
 17706 ;;		_exp
 17707 ;;		_log
 17708 ;; This function uses a non-reentrant model
 17709 ;;
 17710                           
 17711                           
 17712                           ;psect for function ___awtoft
 17713  2E3A                     ___awtoft:	
 17714                           
 17715                           ;incstack = 0
 17716                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17717  2E3A  0021               	movlb	1	; select bank1
 17718  2E3B  01AD               	clrf	___awtoft@sign^(0+128)
 17719  2E3C  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17720  2E3D  2E45               	goto	l8072
 17721  2E3E  09A8               	comf	___awtoft@c^(0+128),f
 17722  2E3F  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17723  2E40  0AA8               	incf	___awtoft@c^(0+128),f
 17724  2E41  1903               	skipnz
 17725  2E42  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17726  2E43  01AD               	clrf	___awtoft@sign^(0+128)
 17727  2E44  0AAD               	incf	___awtoft@sign^(0+128),f
 17728  2E45                     l8072:	
 17729  2E45  0828               	movf	___awtoft@c^(0+128),w
 17730  2E46  00A0               	movwf	___ftpack@arg^(0+128)
 17731  2E47  0829               	movf	(___awtoft@c+1)^(0+128),w
 17732  2E48  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17733  2E49  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17734  2E4A  308E               	movlw	142
 17735  2E4B  00AB               	movwf	??___awtoft^(0+128)
 17736  2E4C  082B               	movf	??___awtoft^(0+128),w
 17737  2E4D  00A3               	movwf	___ftpack@exp^(0+128)
 17738  2E4E  082D               	movf	___awtoft@sign^(0+128),w
 17739  2E4F  00AC               	movwf	(??___awtoft+1)^(0+128)
 17740  2E50  082C               	movf	(??___awtoft+1)^(0+128),w
 17741  2E51  00A4               	movwf	___ftpack@sign^(0+128)
 17742  2E52  31A5  25B6         	fcall	___ftpack
 17743  2E54  0021               	movlb	1	; select bank1
 17744  2E55  0820               	movf	?___ftpack^(0+128),w
 17745  2E56  00A8               	movwf	?___awtoft^(0+128)
 17746  2E57  0821               	movf	(?___ftpack+1)^(0+128),w
 17747  2E58  00A9               	movwf	(?___awtoft+1)^(0+128)
 17748  2E59  0822               	movf	(?___ftpack+2)^(0+128),w
 17749  2E5A  00AA               	movwf	(?___awtoft+2)^(0+128)
 17750  2E5B  0008               	return
 17751  2E5C                     __end_of___awtoft:	
 17752                           
 17753                           	psect	text60
 17754  25B6                     __ptext60:	
 17755 ;; *************** function ___ftpack *****************
 17756 ;; Defined at:
 17757 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17758 ;; Parameters:    Size  Location     Type
 17759 ;;  arg             3    0[BANK1 ] unsigned um
 17760 ;;  exp             1    3[BANK1 ] unsigned char 
 17761 ;;  sign            1    4[BANK1 ] unsigned char 
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;		None
 17764 ;; Return value:  Size  Location     Type
 17765 ;;                  3    0[BANK1 ] float 
 17766 ;; Registers used:
 17767 ;;		wreg, status,2, status,0
 17768 ;; Tracked objects:
 17769 ;;		On entry : 0/0
 17770 ;;		On exit  : 0/0
 17771 ;;		Unchanged: 0/0
 17772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17773 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17775 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17776 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17777 ;;Total ram usage:        8 bytes
 17778 ;; Hardware stack levels used:    1
 17779 ;; Hardware stack levels required when called:    3
 17780 ;; This function calls:
 17781 ;;		Nothing
 17782 ;; This function is called by:
 17783 ;;		___altoft
 17784 ;;		___awtoft
 17785 ;;		___ftadd
 17786 ;;		___ftdiv
 17787 ;;		___ftmul
 17788 ;;		___lltoft
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           
 17793                           ;psect for function ___ftpack
 17794  25B6                     ___ftpack:	
 17795                           
 17796                           ;incstack = 0
 17797                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17798  25B6  0021               	movlb	1	; select bank1
 17799  25B7  0823               	movf	___ftpack@exp^(0+128),w
 17800  25B8  1903               	btfsc	3,2
 17801  25B9  2DBF               	goto	l7710
 17802  25BA  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17803  25BB  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17804  25BC  0420               	iorwf	___ftpack@arg^(0+128),w
 17805  25BD  1D03               	skipz
 17806  25BE  2DD0               	goto	l7716
 17807  25BF                     l7710:	
 17808  25BF  3000               	movlw	0
 17809  25C0  00A0               	movwf	?___ftpack^(0+128)
 17810  25C1  3000               	movlw	0
 17811  25C2  00A1               	movwf	(?___ftpack+1)^(0+128)
 17812  25C3  3000               	movlw	0
 17813  25C4  00A2               	movwf	(?___ftpack+2)^(0+128)
 17814  25C5  0008               	return
 17815  25C6                     l7714:	
 17816  25C6  3001               	movlw	1
 17817  25C7  00A5               	movwf	??___ftpack^(0+128)
 17818  25C8  0825               	movf	??___ftpack^(0+128),w
 17819  25C9  07A3               	addwf	___ftpack@exp^(0+128),f
 17820  25CA  3001               	movlw	1
 17821  25CB                     u7785:	
 17822  25CB  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17823  25CC  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17824  25CD  0CA0               	rrf	___ftpack@arg^(0+128),f
 17825  25CE  0B89               	decfsz	9,f
 17826  25CF  2DCB               	goto	u7785
 17827  25D0                     l7716:	
 17828  25D0  30FE               	movlw	254
 17829  25D1  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17830  25D2  1903               	btfsc	3,2
 17831  25D3  2DE9               	goto	l2157
 17832  25D4  2DC6               	goto	l7714
 17833  25D5                     l7718:	
 17834  25D5  3001               	movlw	1
 17835  25D6  00A5               	movwf	??___ftpack^(0+128)
 17836  25D7  0825               	movf	??___ftpack^(0+128),w
 17837  25D8  07A3               	addwf	___ftpack@exp^(0+128),f
 17838  25D9  3001               	movlw	1
 17839  25DA  07A0               	addwf	___ftpack@arg^(0+128),f
 17840  25DB  3000               	movlw	0
 17841  25DC  1803               	skipnc
 17842  25DD  3001               	movlw	1
 17843  25DE  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17844  25DF  3000               	movlw	0
 17845  25E0  1803               	skipnc
 17846  25E1  3001               	movlw	1
 17847  25E2  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17848  25E3  3001               	movlw	1
 17849  25E4                     u7805:	
 17850  25E4  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17851  25E5  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17852  25E6  0CA0               	rrf	___ftpack@arg^(0+128),f
 17853  25E7  0B89               	decfsz	9,f
 17854  25E8  2DE4               	goto	u7805
 17855  25E9                     l2157:	
 17856  25E9  30FF               	movlw	255
 17857  25EA  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17858  25EB  1903               	btfsc	3,2
 17859  25EC  2DF6               	goto	l7726
 17860  25ED  2DD5               	goto	l7718
 17861  25EE                     l7724:	
 17862  25EE  3001               	movlw	1
 17863  25EF  02A3               	subwf	___ftpack@exp^(0+128),f
 17864  25F0  3001               	movlw	1
 17865  25F1                     u7825:	
 17866  25F1  35A0               	lslf	___ftpack@arg^(0+128),f
 17867  25F2  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17868  25F3  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17869  25F4  0B89               	decfsz	9,f
 17870  25F5  2DF1               	goto	u7825
 17871  25F6                     l7726:	
 17872  25F6  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17873  25F7  2DFC               	goto	l2164
 17874  25F8  3002               	movlw	2
 17875  25F9  0223               	subwf	___ftpack@exp^(0+128),w
 17876  25FA  1803               	skipnc
 17877  25FB  2DEE               	goto	l7724
 17878  25FC                     l2164:	
 17879  25FC  1823               	btfsc	___ftpack@exp^(0+128),0
 17880  25FD  2E04               	goto	l2165
 17881  25FE  30FF               	movlw	255
 17882  25FF  05A0               	andwf	___ftpack@arg^(0+128),f
 17883  2600  307F               	movlw	127
 17884  2601  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17885  2602  30FF               	movlw	255
 17886  2603  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17887  2604                     l2165:	
 17888  2604  1003               	clrc
 17889  2605  0CA3               	rrf	___ftpack@exp^(0+128),f
 17890  2606  0823               	movf	___ftpack@exp^(0+128),w
 17891  2607  00A5               	movwf	??___ftpack^(0+128)
 17892  2608  01A6               	clrf	(??___ftpack^(0+128)+1)
 17893  2609  01A7               	clrf	(??___ftpack^(0+128)+2)
 17894  260A  3010               	movlw	16
 17895  260B                     u7865:	
 17896  260B  35A5               	lslf	??___ftpack^(0+128),f
 17897  260C  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17898  260D  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17899  260E  0B89               	decfsz	9,f
 17900  260F  2E0B               	goto	u7865
 17901  2610  0825               	movf	??___ftpack^(0+128),w
 17902  2611  04A0               	iorwf	___ftpack@arg^(0+128),f
 17903  2612  0826               	movf	(??___ftpack+1)^(0+128),w
 17904  2613  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17905  2614  0827               	movf	(??___ftpack+2)^(0+128),w
 17906  2615  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17907  2616  0824               	movf	___ftpack@sign^(0+128),w
 17908  2617  1903               	btfsc	3,2
 17909  2618  0008               	return
 17910  2619  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17911  261A  0008               	return
 17912  261B                     __end_of___ftpack:	
 17913                           
 17914                           	psect	text61
 17915  2D38                     __ptext61:	
 17916 ;; *************** function _adc_convert *****************
 17917 ;; Defined at:
 17918 ;;		line 122 in file "user.c"
 17919 ;; Parameters:    Size  Location     Type
 17920 ;;  channel         1    wreg     unsigned char 
 17921 ;; Auto vars:     Size  Location     Type
 17922 ;;  channel         1    3[BANK1 ] unsigned char 
 17923 ;; Return value:  Size  Location     Type
 17924 ;;                  2    0[BANK1 ] unsigned int 
 17925 ;; Registers used:
 17926 ;;		wreg, status,2, status,0
 17927 ;; Tracked objects:
 17928 ;;		On entry : 0/0
 17929 ;;		On exit  : 0/0
 17930 ;;		Unchanged: 0/0
 17931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17932 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17933 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17934 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17935 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17936 ;;Total ram usage:        4 bytes
 17937 ;; Hardware stack levels used:    1
 17938 ;; Hardware stack levels required when called:    3
 17939 ;; This function calls:
 17940 ;;		Nothing
 17941 ;; This function is called by:
 17942 ;;		_main
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           
 17947                           ;psect for function _adc_convert
 17948  2D38                     _adc_convert:	
 17949                           
 17950                           ;incstack = 0
 17951                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17952                           ;adc_convert@channel stored from wreg
 17953  2D38  0021               	movlb	1	; select bank1
 17954  2D39  00A3               	movwf	adc_convert@channel^(0+128)
 17955                           
 17956                           ;user.c: 123: ADCON0bits.CHS = channel;
 17957  2D3A  0823               	movf	adc_convert@channel^(0+128),w
 17958  2D3B  00A2               	movwf	??_adc_convert^(0+128)
 17959  2D3C  0DA2               	rlf	??_adc_convert^(0+128),f
 17960  2D3D  0DA2               	rlf	??_adc_convert^(0+128),f
 17961  2D3E  081D               	movf	29,w	;volatile
 17962  2D3F  0622               	xorwf	??_adc_convert^(0+128),w
 17963  2D40  3983               	andlw	-125
 17964  2D41  0622               	xorwf	??_adc_convert^(0+128),w
 17965  2D42  009D               	movwf	29	;volatile
 17966                           
 17967                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17968  2D43  149D               	bsf	29,1	;volatile
 17969  2D44                     l602:	
 17970                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17971                           
 17972  2D44  189D               	btfsc	29,1	;volatile
 17973  2D45  2D44               	goto	l602
 17974                           
 17975                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17976  2D46  081C               	movf	28,w	;volatile
 17977  2D47  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17978  2D48  081B               	movf	27,w	;volatile
 17979  2D49  00A0               	movwf	?_adc_convert^(0+128)
 17980  2D4A  0008               	return
 17981  2D4B                     __end_of_adc_convert:	
 17982                           
 17983                           	psect	text62
 17984  229F                     __ptext62:	
 17985 ;; *************** function _USARTInit *****************
 17986 ;; Defined at:
 17987 ;;		line 31 in file "usart_pic16.c"
 17988 ;; Parameters:    Size  Location     Type
 17989 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17990 ;; Auto vars:     Size  Location     Type
 17991 ;;		None
 17992 ;; Return value:  Size  Location     Type
 17993 ;;                  1    wreg      void 
 17994 ;; Registers used:
 17995 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17996 ;; Tracked objects:
 17997 ;;		On entry : 0/0
 17998 ;;		On exit  : 0/0
 17999 ;;		Unchanged: 0/0
 18000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18001 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18003 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18004 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18005 ;;Total ram usage:        3 bytes
 18006 ;; Hardware stack levels used:    1
 18007 ;; Hardware stack levels required when called:    3
 18008 ;; This function calls:
 18009 ;;		Nothing
 18010 ;; This function is called by:
 18011 ;;		_main
 18012 ;; This function uses a non-reentrant model
 18013 ;;
 18014                           
 18015                           
 18016                           ;psect for function _USARTInit
 18017  229F                     _USARTInit:	
 18018                           
 18019                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 18020                           
 18021                           ;incstack = 0
 18022                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 18023  229F  30FF               	movlw	255
 18024  22A0  0020               	movlb	0	; select bank0
 18025  22A1  00DA               	movwf	_UQEnd	;volatile
 18026  22A2  0021               	movlb	1	; select bank1
 18027  22A3  00A2               	movwf	??_USARTInit^(0+128)
 18028  22A4  0822               	movf	??_USARTInit^(0+128),w
 18029  22A5  0020               	movlb	0	; select bank0
 18030  22A6  00DB               	movwf	_UQFront	;volatile
 18031                           
 18032                           ;usart_pic16.c: 37: switch(baud_rate)
 18033  22A7  2AB2               	goto	l8728
 18034  22A8                     l8718:	
 18035                           ;usart_pic16.c: 38: {
 18036                           ;usart_pic16.c: 39: case 9600:
 18037                           
 18038                           
 18039                           ;usart_pic16.c: 40: SPBRG=103;
 18040  22A8  3067               	movlw	103
 18041  22A9  2AAF               	goto	L22
 18042  22AA                     l8720:	
 18043                           ;usart_pic16.c: 42: case 19200:
 18044                           
 18045                           ;usart_pic16.c: 41: break;
 18046                           
 18047                           
 18048                           ;usart_pic16.c: 43: SPBRG=51;
 18049  22AA  3033               	movlw	51
 18050  22AB  2AAF               	goto	L22
 18051  22AC                     l8722:	
 18052                           ;usart_pic16.c: 45: case 31250:
 18053                           
 18054                           ;usart_pic16.c: 44: break;
 18055                           
 18056                           
 18057                           ;usart_pic16.c: 46: SPBRG = 31;
 18058  22AC  301F               	movlw	31
 18059  22AD  2AAF               	goto	L22
 18060  22AE                     l8724:	
 18061                           ;usart_pic16.c: 48: case 38400:
 18062                           
 18063                           ;usart_pic16.c: 47: break;
 18064                           
 18065                           
 18066                           ;usart_pic16.c: 49: SPBRG=25;
 18067  22AE  3019               	movlw	25
 18068  22AF                     L22:	
 18069  22AF  0023               	movlb	3	; select bank3
 18070  22B0  009B               	movwf	27	;volatile
 18071                           
 18072                           ;usart_pic16.c: 51: }
 18073                           
 18074                           ;usart_pic16.c: 50: break;
 18075  22B1  2AD5               	goto	l1740
 18076  22B2                     l8728:	
 18077                           
 18078                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18079                           ; Switch size 1, requested type "space"
 18080                           ; Number of cases is 4, Range of values is 37 to 150
 18081                           ; switch strategies available:
 18082                           ; Name         Instructions Cycles
 18083                           ; simple_byte           13     7 (average)
 18084                           ; direct_byte          237     9 (fixed)
 18085                           ; jumptable            263     9 (fixed)
 18086                           ;	Chosen strategy is simple_byte
 18087  22B2  0021               	movlb	1	; select bank1
 18088  22B3  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 18089  22B4  3A25               	xorlw	37	; case 37
 18090  22B5  1903               	skipnz
 18091  22B6  2AC1               	goto	l9844
 18092  22B7  3A6E               	xorlw	110	; case 75
 18093  22B8  1903               	skipnz
 18094  22B9  2AC6               	goto	l9846
 18095  22BA  3A31               	xorlw	49	; case 122
 18096  22BB  1903               	skipnz
 18097  22BC  2ACB               	goto	l9848
 18098  22BD  3AEC               	xorlw	236	; case 150
 18099  22BE  1903               	skipnz
 18100  22BF  2AD0               	goto	l9850
 18101  22C0  2AD5               	goto	l1740
 18102  22C1                     l9844:	
 18103                           
 18104                           ; Switch size 1, requested type "space"
 18105                           ; Number of cases is 1, Range of values is 128 to 128
 18106                           ; switch strategies available:
 18107                           ; Name         Instructions Cycles
 18108                           ; simple_byte            4     3 (average)
 18109                           ; direct_byte           11     9 (fixed)
 18110                           ; jumptable            263     9 (fixed)
 18111                           ;	Chosen strategy is simple_byte
 18112  22C1  0820               	movf	USARTInit@baud_rate^(0+128),w
 18113  22C2  3A80               	xorlw	128	; case 128
 18114  22C3  1903               	skipnz
 18115  22C4  2AA8               	goto	l8718
 18116  22C5  2AD5               	goto	l1740
 18117  22C6                     l9846:	
 18118                           
 18119                           ; Switch size 1, requested type "space"
 18120                           ; Number of cases is 1, Range of values is 0 to 0
 18121                           ; switch strategies available:
 18122                           ; Name         Instructions Cycles
 18123                           ; simple_byte            4     3 (average)
 18124                           ; direct_byte            8     6 (fixed)
 18125                           ; jumptable            260     6 (fixed)
 18126                           ;	Chosen strategy is simple_byte
 18127  22C6  0820               	movf	USARTInit@baud_rate^(0+128),w
 18128  22C7  3A00               	xorlw	0	; case 0
 18129  22C8  1903               	skipnz
 18130  22C9  2AAA               	goto	l8720
 18131  22CA  2AD5               	goto	l1740
 18132  22CB                     l9848:	
 18133                           
 18134                           ; Switch size 1, requested type "space"
 18135                           ; Number of cases is 1, Range of values is 18 to 18
 18136                           ; switch strategies available:
 18137                           ; Name         Instructions Cycles
 18138                           ; simple_byte            4     3 (average)
 18139                           ; direct_byte           11     9 (fixed)
 18140                           ; jumptable            263     9 (fixed)
 18141                           ;	Chosen strategy is simple_byte
 18142  22CB  0820               	movf	USARTInit@baud_rate^(0+128),w
 18143  22CC  3A12               	xorlw	18	; case 18
 18144  22CD  1903               	skipnz
 18145  22CE  2AAC               	goto	l8722
 18146  22CF  2AD5               	goto	l1740
 18147  22D0                     l9850:	
 18148                           
 18149                           ; Switch size 1, requested type "space"
 18150                           ; Number of cases is 1, Range of values is 0 to 0
 18151                           ; switch strategies available:
 18152                           ; Name         Instructions Cycles
 18153                           ; simple_byte            4     3 (average)
 18154                           ; direct_byte            8     6 (fixed)
 18155                           ; jumptable            260     6 (fixed)
 18156                           ;	Chosen strategy is simple_byte
 18157  22D0  0820               	movf	USARTInit@baud_rate^(0+128),w
 18158  22D1  3A00               	xorlw	0	; case 0
 18159  22D2  1903               	skipnz
 18160  22D3  2AAE               	goto	l8724
 18161  22D4  2AD5               	goto	l1740
 18162  22D5                     l1740:	
 18163                           
 18164                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18165  22D5  0023               	movlb	3	; select bank3
 18166  22D6  131E               	bcf	30,6	;volatile
 18167                           
 18168                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18169  22D7  169E               	bsf	30,5	;volatile
 18170                           
 18171                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18172  22D8  121E               	bcf	30,4	;volatile
 18173                           
 18174                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18175  22D9  151E               	bsf	30,2	;volatile
 18176                           
 18177                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18178  22DA  179D               	bsf	29,7	;volatile
 18179                           
 18180                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18181  22DB  131D               	bcf	29,6	;volatile
 18182                           
 18183                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18184  22DC  161D               	bsf	29,4	;volatile
 18185                           
 18186                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18187  22DD  119D               	bcf	29,3	;volatile
 18188                           
 18189                           ;usart_pic16.c: 65: RCIE=1;
 18190  22DE  0021               	movlb	1	; select bank1
 18191  22DF  1691               	bsf	17,5	;volatile
 18192                           
 18193                           ;usart_pic16.c: 66: PEIE=1;
 18194  22E0  170B               	bsf	11,6	;volatile
 18195                           
 18196                           ;usart_pic16.c: 68: (GIE = 1);
 18197  22E1  178B               	bsf	11,7	;volatile
 18198  22E2  0008               	return
 18199  22E3                     __end_of_USARTInit:	
 18200                           
 18201                           	psect	text63
 18202  268D                     __ptext63:	
 18203 ;; *************** function _ReadSavedSettings *****************
 18204 ;; Defined at:
 18205 ;;		line 234 in file "user.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;		None
 18208 ;; Auto vars:     Size  Location     Type
 18209 ;;		None
 18210 ;; Return value:  Size  Location     Type
 18211 ;;                  1    wreg      void 
 18212 ;; Registers used:
 18213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18214 ;; Tracked objects:
 18215 ;;		On entry : 0/0
 18216 ;;		On exit  : 0/0
 18217 ;;		Unchanged: 0/0
 18218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18221 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18222 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18223 ;;Total ram usage:        1 bytes
 18224 ;; Hardware stack levels used:    1
 18225 ;; Hardware stack levels required when called:    4
 18226 ;; This function calls:
 18227 ;;		_FLASH_ReadWord
 18228 ;;		_set_leds_bottom
 18229 ;;		_set_leds_top
 18230 ;; This function is called by:
 18231 ;;		_main
 18232 ;; This function uses a non-reentrant model
 18233 ;;
 18234                           
 18235                           
 18236                           ;psect for function _ReadSavedSettings
 18237  268D                     _ReadSavedSettings:	
 18238                           
 18239                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18240                           
 18241                           ;incstack = 0
 18242                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18243  268D  3081               	movlw	129
 18244  268E  0021               	movlb	1	; select bank1
 18245  268F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18246  2690  301F               	movlw	31
 18247  2691  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18248  2692  3188  2000  31A6   	fcall	_FLASH_ReadWord
 18249  2695  0021               	movlb	1	; select bank1
 18250  2696  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18251  2697  0020               	movlb	0	; select bank0
 18252  2698  00CD               	movwf	_top_push_state+1
 18253  2699  0021               	movlb	1	; select bank1
 18254  269A  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18255  269B  0020               	movlb	0	; select bank0
 18256  269C  00CC               	movwf	_top_push_state
 18257                           
 18258                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18259  269D  3082               	movlw	130
 18260  269E  0021               	movlb	1	; select bank1
 18261  269F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18262  26A0  301F               	movlw	31
 18263  26A1  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18264  26A2  3188  2000  31A6   	fcall	_FLASH_ReadWord
 18265  26A5  0021               	movlb	1	; select bank1
 18266  26A6  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18267  26A7  0020               	movlb	0	; select bank0
 18268  26A8  00C9               	movwf	_bottom_push_state+1
 18269  26A9  0021               	movlb	1	; select bank1
 18270  26AA  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18271  26AB  0020               	movlb	0	; select bank0
 18272  26AC  00C8               	movwf	_bottom_push_state
 18273                           
 18274                           ;user.c: 239: if (top_push_state > 6) {
 18275  26AD  084D               	movf	_top_push_state+1,w
 18276  26AE  3A80               	xorlw	128
 18277  26AF  0021               	movlb	1	; select bank1
 18278  26B0  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18279  26B1  3080               	movlw	128
 18280  26B2  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18281  26B3  1D03               	skipz
 18282  26B4  2EB8               	goto	u9365
 18283  26B5  3007               	movlw	7
 18284  26B6  0020               	movlb	0	; select bank0
 18285  26B7  024C               	subwf	_top_push_state,w
 18286  26B8                     u9365:	
 18287  26B8  1C03               	skipc
 18288  26B9  2EBF               	goto	l649
 18289                           
 18290                           ;user.c: 241: top_push_state = 6;
 18291  26BA  3006               	movlw	6
 18292  26BB  0020               	movlb	0	; select bank0
 18293  26BC  00CC               	movwf	_top_push_state
 18294  26BD  3000               	movlw	0
 18295  26BE  00CD               	movwf	_top_push_state+1
 18296  26BF                     l649:	
 18297                           
 18298                           ;user.c: 242: }
 18299                           ;user.c: 243: if (bottom_push_state > 5) {
 18300  26BF  0020               	movlb	0	; select bank0
 18301  26C0  0849               	movf	_bottom_push_state+1,w
 18302  26C1  3A80               	xorlw	128
 18303  26C2  0021               	movlb	1	; select bank1
 18304  26C3  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18305  26C4  3080               	movlw	128
 18306  26C5  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18307  26C6  1D03               	skipz
 18308  26C7  2ECB               	goto	u9375
 18309  26C8  3006               	movlw	6
 18310  26C9  0020               	movlb	0	; select bank0
 18311  26CA  0248               	subwf	_bottom_push_state,w
 18312  26CB                     u9375:	
 18313  26CB  1C03               	skipc
 18314  26CC  2ED2               	goto	l8782
 18315                           
 18316                           ;user.c: 245: bottom_push_state = 1;
 18317  26CD  3001               	movlw	1
 18318  26CE  0020               	movlb	0	; select bank0
 18319  26CF  00C8               	movwf	_bottom_push_state
 18320  26D0  3000               	movlw	0
 18321  26D1  00C9               	movwf	_bottom_push_state+1
 18322  26D2                     l8782:	
 18323                           
 18324                           ;user.c: 246: }
 18325                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18326  26D2  0020               	movlb	0	; select bank0
 18327  26D3  0851               	movf	_switchBypass_state,w
 18328  26D4  1D03               	btfss	3,2
 18329  26D5  2ED9               	goto	u9380
 18330  26D6  0027               	movlb	7	; select bank7
 18331  26D7  148D               	bsf	13,1	;volatile
 18332  26D8  2EDB               	goto	l8784
 18333  26D9                     u9380:	
 18334  26D9  0027               	movlb	7	; select bank7
 18335  26DA  108D               	bcf	13,1	;volatile
 18336  26DB                     l8784:	
 18337                           
 18338                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18339  26DB  0020               	movlb	0	; select bank0
 18340  26DC  0C51               	rrf	_switchBypass_state,w
 18341  26DD  0027               	movlb	7	; select bank7
 18342  26DE  1C03               	skipc
 18343  26DF  110D               	bcf	13,2	;volatile
 18344  26E0  1803               	skipnc
 18345  26E1  150D               	bsf	13,2	;volatile
 18346                           
 18347                           ;user.c: 251: LATBbits.LATB2 = 0;
 18348  26E2  0022               	movlb	2	; select bank2
 18349  26E3  110D               	bcf	13,2	;volatile
 18350                           
 18351                           ;user.c: 252: LATBbits.LATB3 = 0;
 18352  26E4  118D               	bcf	13,3	;volatile
 18353                           
 18354                           ;user.c: 254: LATBbits.LATB4 = 0;
 18355  26E5  120D               	bcf	13,4	;volatile
 18356                           
 18357                           ;user.c: 255: LATBbits.LATB5 = 0;
 18358  26E6  128D               	bcf	13,5	;volatile
 18359                           
 18360                           ;user.c: 257: LATBbits.LATB1 = 0;
 18361  26E7  108D               	bcf	13,1	;volatile
 18362                           
 18363                           ;user.c: 258: LATBbits.LATB0 = 0;
 18364  26E8  100D               	bcf	13,0	;volatile
 18365                           
 18366                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18367  26E9  0020               	movlb	0	; select bank0
 18368  26EA  084D               	movf	_top_push_state+1,w
 18369  26EB  0021               	movlb	1	; select bank1
 18370  26EC  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18371  26ED  0020               	movlb	0	; select bank0
 18372  26EE  084C               	movf	_top_push_state,w
 18373  26EF  0021               	movlb	1	; select bank1
 18374  26F0  00A0               	movwf	set_leds_top@x^(0+128)
 18375  26F1  3001               	movlw	1
 18376  26F2  00A2               	movwf	set_leds_top@ledState^(0+128)
 18377  26F3  3000               	movlw	0
 18378  26F4  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18379  26F5  31A5  2509  31A6   	fcall	_set_leds_top
 18380                           
 18381                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18382  26F8  0020               	movlb	0	; select bank0
 18383  26F9  0849               	movf	_bottom_push_state+1,w
 18384  26FA  0021               	movlb	1	; select bank1
 18385  26FB  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18386  26FC  0020               	movlb	0	; select bank0
 18387  26FD  0848               	movf	_bottom_push_state,w
 18388  26FE  0021               	movlb	1	; select bank1
 18389  26FF  00A0               	movwf	set_leds_bottom@x^(0+128)
 18390  2700  31A0  206F         	fcall	_set_leds_bottom
 18391  2702  0008               	return
 18392  2703                     __end_of_ReadSavedSettings:	
 18393                           
 18394                           	psect	text64
 18395  2509                     __ptext64:	
 18396 ;; *************** function _set_leds_top *****************
 18397 ;; Defined at:
 18398 ;;		line 16 in file "LEDs.c"
 18399 ;; Parameters:    Size  Location     Type
 18400 ;;  x               2    0[BANK1 ] int 
 18401 ;;  ledState        2    2[BANK1 ] int 
 18402 ;; Auto vars:     Size  Location     Type
 18403 ;;		None
 18404 ;; Return value:  Size  Location     Type
 18405 ;;                  1    wreg      void 
 18406 ;; Registers used:
 18407 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18408 ;; Tracked objects:
 18409 ;;		On entry : 0/0
 18410 ;;		On exit  : 0/0
 18411 ;;		Unchanged: 0/0
 18412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18413 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18416 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18417 ;;Total ram usage:        4 bytes
 18418 ;; Hardware stack levels used:    1
 18419 ;; Hardware stack levels required when called:    3
 18420 ;; This function calls:
 18421 ;;		Nothing
 18422 ;; This function is called by:
 18423 ;;		_ReadSavedSettings
 18424 ;;		_ring_tactiles
 18425 ;;		_solidring_tactiles
 18426 ;;		_read_top_tactile
 18427 ;;		_setPresetDisplay
 18428 ;;		_resetRingLEDs
 18429 ;;		_setExpressionDisplay
 18430 ;;		_star_tactiles
 18431 ;; This function uses a non-reentrant model
 18432 ;;
 18433                           
 18434                           
 18435                           ;psect for function _set_leds_top
 18436  2509                     _set_leds_top:	
 18437                           
 18438                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18439                           
 18440                           ;incstack = 0
 18441                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18442  2509  0027               	movlb	7	; select bank7
 18443  250A  100C               	bcf	12,0	;volatile
 18444                           
 18445                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18446  250B  108C               	bcf	12,1	;volatile
 18447                           
 18448                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18449  250C  110C               	bcf	12,2	;volatile
 18450                           
 18451                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18452  250D  118C               	bcf	12,3	;volatile
 18453                           
 18454                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18455  250E  120C               	bcf	12,4	;volatile
 18456                           
 18457                           ;LEDs.c: 22: switch (x) {
 18458  250F  2D3F               	goto	l7752
 18459  2510                     l7740:	
 18460                           ;LEDs.c: 23: case 1:
 18461                           
 18462                           
 18463                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18464  2510  0021               	movlb	1	; select bank1
 18465  2511  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18466  2512  0027               	movlb	7	; select bank7
 18467  2513  1C03               	skipc
 18468  2514  100C               	bcf	12,0	;volatile
 18469  2515  1803               	skipnc
 18470  2516  140C               	bsf	12,0	;volatile
 18471                           
 18472                           ;LEDs.c: 25: break;
 18473  2517  0008               	return
 18474  2518                     l7742:	
 18475                           ;LEDs.c: 26: case 2:
 18476                           
 18477                           
 18478                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18479  2518  0021               	movlb	1	; select bank1
 18480  2519  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18481  251A  0027               	movlb	7	; select bank7
 18482  251B  1C03               	skipc
 18483  251C  108C               	bcf	12,1	;volatile
 18484  251D  1803               	skipnc
 18485  251E  148C               	bsf	12,1	;volatile
 18486                           
 18487                           ;LEDs.c: 28: break;
 18488  251F  0008               	return
 18489  2520                     l7744:	
 18490                           ;LEDs.c: 29: case 3:
 18491                           
 18492                           
 18493                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18494  2520  0021               	movlb	1	; select bank1
 18495  2521  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18496  2522  0027               	movlb	7	; select bank7
 18497  2523  1C03               	skipc
 18498  2524  110C               	bcf	12,2	;volatile
 18499  2525  1803               	skipnc
 18500  2526  150C               	bsf	12,2	;volatile
 18501                           
 18502                           ;LEDs.c: 31: break;
 18503  2527  0008               	return
 18504  2528                     l7746:	
 18505                           ;LEDs.c: 32: case 4:
 18506                           
 18507                           
 18508                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18509  2528  0021               	movlb	1	; select bank1
 18510  2529  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18511  252A  0027               	movlb	7	; select bank7
 18512  252B  1C03               	skipc
 18513  252C  118C               	bcf	12,3	;volatile
 18514  252D  1803               	skipnc
 18515  252E  158C               	bsf	12,3	;volatile
 18516                           
 18517                           ;LEDs.c: 34: break;
 18518  252F  0008               	return
 18519  2530                     l7748:	
 18520                           ;LEDs.c: 35: case 5:
 18521                           
 18522                           
 18523                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18524  2530  0021               	movlb	1	; select bank1
 18525  2531  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18526  2532  0027               	movlb	7	; select bank7
 18527  2533  1C03               	skipc
 18528  2534  120C               	bcf	12,4	;volatile
 18529  2535  1803               	skipnc
 18530  2536  160C               	bsf	12,4	;volatile
 18531                           
 18532                           ;LEDs.c: 39: break;
 18533                           
 18534                           ;LEDs.c: 38: case 6:
 18535                           
 18536                           ;LEDs.c: 37: break;
 18537  2537  0008               	return
 18538  2538                     l810:	
 18539                           ;LEDs.c: 40: case 100:
 18540                           
 18541                           
 18542                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18543  2538  0027               	movlb	7	; select bank7
 18544  2539  140C               	bsf	12,0	;volatile
 18545                           
 18546                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18547  253A  148C               	bsf	12,1	;volatile
 18548                           
 18549                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18550  253B  150C               	bsf	12,2	;volatile
 18551                           
 18552                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18553  253C  158C               	bsf	12,3	;volatile
 18554                           
 18555                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18556  253D  160C               	bsf	12,4	;volatile
 18557                           
 18558                           ;LEDs.c: 47: }
 18559                           
 18560                           ;LEDs.c: 46: break;
 18561  253E  0008               	return
 18562  253F                     l7752:	
 18563                           
 18564                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18565                           ; Switch size 1, requested type "space"
 18566                           ; Number of cases is 1, Range of values is 0 to 0
 18567                           ; switch strategies available:
 18568                           ; Name         Instructions Cycles
 18569                           ; simple_byte            4     3 (average)
 18570                           ; direct_byte            8     6 (fixed)
 18571                           ; jumptable            260     6 (fixed)
 18572                           ;	Chosen strategy is simple_byte
 18573  253F  0021               	movlb	1	; select bank1
 18574  2540  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18575  2541  3A00               	xorlw	0	; case 0
 18576  2542  1903               	skipnz
 18577  2543  2D45               	goto	l9852
 18578  2544  2D5C               	goto	l811
 18579  2545                     l9852:	
 18580                           
 18581                           ; Switch size 1, requested type "space"
 18582                           ; Number of cases is 7, Range of values is 1 to 100
 18583                           ; switch strategies available:
 18584                           ; Name         Instructions Cycles
 18585                           ; simple_byte           22    12 (average)
 18586                           ; direct_byte          209     9 (fixed)
 18587                           ; jumptable            263     9 (fixed)
 18588                           ;	Chosen strategy is simple_byte
 18589  2545  0820               	movf	set_leds_top@x^(0+128),w
 18590  2546  3A01               	xorlw	1	; case 1
 18591  2547  1903               	skipnz
 18592  2548  2D10               	goto	l7740
 18593  2549  3A03               	xorlw	3	; case 2
 18594  254A  1903               	skipnz
 18595  254B  2D18               	goto	l7742
 18596  254C  3A01               	xorlw	1	; case 3
 18597  254D  1903               	skipnz
 18598  254E  2D20               	goto	l7744
 18599  254F  3A07               	xorlw	7	; case 4
 18600  2550  1903               	skipnz
 18601  2551  2D28               	goto	l7746
 18602  2552  3A01               	xorlw	1	; case 5
 18603  2553  1903               	skipnz
 18604  2554  2D30               	goto	l7748
 18605  2555  3A03               	xorlw	3	; case 6
 18606  2556  1903               	skipnz
 18607  2557  2D5C               	goto	l811
 18608  2558  3A62               	xorlw	98	; case 100
 18609  2559  1903               	skipnz
 18610  255A  2D38               	goto	l810
 18611  255B  2D5C               	goto	l811
 18612  255C                     l811:	
 18613  255C  0008               	return
 18614  255D                     __end_of_set_leds_top:	
 18615                           
 18616                           	psect	text65
 18617  206F                     __ptext65:	
 18618 ;; *************** function _set_leds_bottom *****************
 18619 ;; Defined at:
 18620 ;;		line 51 in file "LEDs.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;  x               2    0[BANK1 ] int 
 18623 ;; Auto vars:     Size  Location     Type
 18624 ;;		None
 18625 ;; Return value:  Size  Location     Type
 18626 ;;                  1    wreg      void 
 18627 ;; Registers used:
 18628 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18629 ;; Tracked objects:
 18630 ;;		On entry : 0/0
 18631 ;;		On exit  : 0/0
 18632 ;;		Unchanged: 0/0
 18633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18634 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18637 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18638 ;;Total ram usage:        2 bytes
 18639 ;; Hardware stack levels used:    1
 18640 ;; Hardware stack levels required when called:    3
 18641 ;; This function calls:
 18642 ;;		Nothing
 18643 ;; This function is called by:
 18644 ;;		_ReadSavedSettings
 18645 ;;		_ring_tactiles
 18646 ;;		_solidring_tactiles
 18647 ;;		_read_bottom_tactile
 18648 ;;		_setPresetDisplay
 18649 ;;		_resetRingLEDs
 18650 ;;		_setExpressionDisplay
 18651 ;;		_star_tactiles
 18652 ;; This function uses a non-reentrant model
 18653 ;;
 18654                           
 18655                           
 18656                           ;psect for function _set_leds_bottom
 18657  206F                     _set_leds_bottom:	
 18658                           
 18659                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18660                           
 18661                           ;incstack = 0
 18662                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18663  206F  0022               	movlb	2	; select bank2
 18664  2070  100F               	bcf	15,0	;volatile
 18665                           
 18666                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18667  2071  108F               	bcf	15,1	;volatile
 18668                           
 18669                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18670  2072  110F               	bcf	15,2	;volatile
 18671                           
 18672                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18673  2073  118F               	bcf	15,3	;volatile
 18674                           
 18675                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18676  2074  120F               	bcf	15,4	;volatile
 18677                           
 18678                           ;LEDs.c: 57: switch (x) {
 18679  2075  288C               	goto	l7768
 18680  2076                     l815:	
 18681                           ;LEDs.c: 58: case 1:
 18682                           
 18683                           
 18684                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18685  2076  0022               	movlb	2	; select bank2
 18686  2077  140F               	bsf	15,0	;volatile
 18687                           
 18688                           ;LEDs.c: 60: break;
 18689  2078  0008               	return
 18690  2079                     l817:	
 18691                           ;LEDs.c: 61: case 2:
 18692                           
 18693                           
 18694                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18695  2079  0022               	movlb	2	; select bank2
 18696  207A  148F               	bsf	15,1	;volatile
 18697                           
 18698                           ;LEDs.c: 63: break;
 18699  207B  0008               	return
 18700  207C                     l818:	
 18701                           ;LEDs.c: 64: case 3:
 18702                           
 18703                           
 18704                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18705  207C  0022               	movlb	2	; select bank2
 18706  207D  150F               	bsf	15,2	;volatile
 18707                           
 18708                           ;LEDs.c: 66: break;
 18709  207E  0008               	return
 18710  207F                     l819:	
 18711                           ;LEDs.c: 67: case 4:
 18712                           
 18713                           
 18714                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18715  207F  0022               	movlb	2	; select bank2
 18716  2080  158F               	bsf	15,3	;volatile
 18717                           
 18718                           ;LEDs.c: 69: break;
 18719  2081  0008               	return
 18720  2082                     l820:	
 18721                           ;LEDs.c: 70: case 5:
 18722                           
 18723                           
 18724                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18725  2082  0022               	movlb	2	; select bank2
 18726  2083  160F               	bsf	15,4	;volatile
 18727                           
 18728                           ;LEDs.c: 74: break;
 18729                           
 18730                           ;LEDs.c: 73: case 6:
 18731                           
 18732                           ;LEDs.c: 72: break;
 18733  2084  0008               	return
 18734  2085                     l822:	
 18735                           ;LEDs.c: 75: case 100:
 18736                           
 18737                           
 18738                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18739  2085  0022               	movlb	2	; select bank2
 18740  2086  140F               	bsf	15,0	;volatile
 18741                           
 18742                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18743  2087  148F               	bsf	15,1	;volatile
 18744                           
 18745                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18746  2088  150F               	bsf	15,2	;volatile
 18747                           
 18748                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18749  2089  158F               	bsf	15,3	;volatile
 18750                           
 18751                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18752  208A  160F               	bsf	15,4	;volatile
 18753                           
 18754                           ;LEDs.c: 82: }
 18755                           
 18756                           ;LEDs.c: 81: break;
 18757  208B  0008               	return
 18758  208C                     l7768:	
 18759                           
 18760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18761                           ; Switch size 1, requested type "space"
 18762                           ; Number of cases is 1, Range of values is 0 to 0
 18763                           ; switch strategies available:
 18764                           ; Name         Instructions Cycles
 18765                           ; simple_byte            4     3 (average)
 18766                           ; direct_byte            8     6 (fixed)
 18767                           ; jumptable            260     6 (fixed)
 18768                           ;	Chosen strategy is simple_byte
 18769  208C  0021               	movlb	1	; select bank1
 18770  208D  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18771  208E  3A00               	xorlw	0	; case 0
 18772  208F  1903               	skipnz
 18773  2090  2892               	goto	l9854
 18774  2091  28A9               	goto	l823
 18775  2092                     l9854:	
 18776                           
 18777                           ; Switch size 1, requested type "space"
 18778                           ; Number of cases is 7, Range of values is 1 to 100
 18779                           ; switch strategies available:
 18780                           ; Name         Instructions Cycles
 18781                           ; simple_byte           22    12 (average)
 18782                           ; direct_byte          209     9 (fixed)
 18783                           ; jumptable            263     9 (fixed)
 18784                           ;	Chosen strategy is simple_byte
 18785  2092  0820               	movf	set_leds_bottom@x^(0+128),w
 18786  2093  3A01               	xorlw	1	; case 1
 18787  2094  1903               	skipnz
 18788  2095  2876               	goto	l815
 18789  2096  3A03               	xorlw	3	; case 2
 18790  2097  1903               	skipnz
 18791  2098  2879               	goto	l817
 18792  2099  3A01               	xorlw	1	; case 3
 18793  209A  1903               	skipnz
 18794  209B  287C               	goto	l818
 18795  209C  3A07               	xorlw	7	; case 4
 18796  209D  1903               	skipnz
 18797  209E  287F               	goto	l819
 18798  209F  3A01               	xorlw	1	; case 5
 18799  20A0  1903               	skipnz
 18800  20A1  2882               	goto	l820
 18801  20A2  3A03               	xorlw	3	; case 6
 18802  20A3  1903               	skipnz
 18803  20A4  28A9               	goto	l823
 18804  20A5  3A62               	xorlw	98	; case 100
 18805  20A6  1903               	skipnz
 18806  20A7  2885               	goto	l822
 18807  20A8  28A9               	goto	l823
 18808  20A9                     l823:	
 18809  20A9  0008               	return
 18810  20AA                     __end_of_set_leds_bottom:	
 18811                           
 18812                           	psect	text66
 18813  0800                     __ptext66:	
 18814 ;; *************** function _FLASH_ReadWord *****************
 18815 ;; Defined at:
 18816 ;;		line 58 in file "memory.c"
 18817 ;; Parameters:    Size  Location     Type
 18818 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18819 ;; Auto vars:     Size  Location     Type
 18820 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18821 ;; Return value:  Size  Location     Type
 18822 ;;                  2    0[BANK1 ] unsigned int 
 18823 ;; Registers used:
 18824 ;;		wreg, status,2, status,0
 18825 ;; Tracked objects:
 18826 ;;		On entry : 0/0
 18827 ;;		On exit  : 0/0
 18828 ;;		Unchanged: 0/0
 18829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18830 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18831 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18833 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18834 ;;Total ram usage:        3 bytes
 18835 ;; Hardware stack levels used:    1
 18836 ;; Hardware stack levels required when called:    3
 18837 ;; This function calls:
 18838 ;;		Nothing
 18839 ;; This function is called by:
 18840 ;;		_ReadSavedSettings
 18841 ;;		_FLASH_WriteWord
 18842 ;; This function uses a non-reentrant model
 18843 ;;
 18844                           
 18845                           
 18846                           ;psect for function _FLASH_ReadWord
 18847  0800                     _FLASH_ReadWord:	
 18848                           
 18849                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18850                           
 18851                           ;incstack = 0
 18852                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18853  0800  3000               	movlw	0
 18854  0801  1B8B               	btfsc	11,7	;volatile
 18855  0802  3001               	movlw	1
 18856  0803  0021               	movlb	1	; select bank1
 18857  0804  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18858                           
 18859                           ;memory.c: 61: INTCONbits.GIE = 0;
 18860  0805  138B               	bcf	11,7	;volatile
 18861                           
 18862                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18863  0806  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18864  0807  0023               	movlb	3	; select bank3
 18865  0808  0091               	movwf	17	;volatile
 18866                           
 18867                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18868  0809  0021               	movlb	1	; select bank1
 18869  080A  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18870  080B  0023               	movlb	3	; select bank3
 18871  080C  0092               	movwf	18	;volatile
 18872                           
 18873                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18874  080D  1315               	bcf	21,6	;volatile
 18875                           
 18876                           ;memory.c: 66: PMCON1bits.RD = 1;
 18877  080E  1415               	bsf	21,0	;volatile
 18878                           
 18879                           ;memory.c: 67: __nop();
 18880  080F  0000               	nop
 18881                           
 18882                           ;memory.c: 68: __nop();
 18883  0810  0000               	nop
 18884                           
 18885                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18886  0811  0021               	movlb	1	; select bank1
 18887  0812  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18888  0813  1C03               	skipc
 18889  0814  138B               	bcf	11,7	;volatile
 18890  0815  1803               	skipnc
 18891  0816  178B               	bsf	11,7	;volatile
 18892                           
 18893                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18894  0817  0023               	movlb	3	; select bank3
 18895  0818  0814               	movf	20,w	;volatile
 18896  0819  0021               	movlb	1	; select bank1
 18897  081A  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18898  081B  0023               	movlb	3	; select bank3
 18899  081C  0813               	movf	19,w	;volatile
 18900  081D  0021               	movlb	1	; select bank1
 18901  081E  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18902  081F  0008               	return
 18903  0820                     __end_of_FLASH_ReadWord:	
 18904                           
 18905                           	psect	text67
 18906  1800                     __ptext67:	
 18907 ;; *************** function _InitializeTaps *****************
 18908 ;; Defined at:
 18909 ;;		line 228 in file "user.c"
 18910 ;; Parameters:    Size  Location     Type
 18911 ;;		None
 18912 ;; Auto vars:     Size  Location     Type
 18913 ;;  itap            2    1[BANK1 ] int 
 18914 ;; Return value:  Size  Location     Type
 18915 ;;                  1    wreg      void 
 18916 ;; Registers used:
 18917 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18918 ;; Tracked objects:
 18919 ;;		On entry : 0/0
 18920 ;;		On exit  : 0/0
 18921 ;;		Unchanged: 0/0
 18922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18924 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18925 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18926 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18927 ;;Total ram usage:        3 bytes
 18928 ;; Hardware stack levels used:    1
 18929 ;; Hardware stack levels required when called:    3
 18930 ;; This function calls:
 18931 ;;		Nothing
 18932 ;; This function is called by:
 18933 ;;		_main
 18934 ;; This function uses a non-reentrant model
 18935 ;;
 18936                           
 18937                           
 18938                           ;psect for function _InitializeTaps
 18939  1800                     _InitializeTaps:	
 18940                           
 18941                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18942                           
 18943                           ;incstack = 0
 18944                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18945  1800  0021               	movlb	1	; select bank1
 18946  1801  01A1               	clrf	InitializeTaps@itap^(0+128)
 18947  1802  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18948  1803                     L23:	
 18949  1803  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18950  1804  3A80               	xorlw	128
 18951  1805  00A0               	movwf	??_InitializeTaps^(0+128)
 18952  1806  3080               	movlw	128
 18953  1807  0220               	subwf	??_InitializeTaps^(0+128),w
 18954  1808  1D03               	skipz
 18955  1809  280C               	goto	u9335
 18956  180A  300C               	movlw	12
 18957  180B  0221               	subwf	InitializeTaps@itap^(0+128),w
 18958  180C                     u9335:	
 18959  180C  1803               	btfsc	3,0
 18960  180D  0008               	return
 18961                           
 18962                           ;user.c: 230: tap[itap] = 0;
 18963  180E  0021               	movlb	1	; select bank1
 18964  180F  0821               	movf	InitializeTaps@itap^(0+128),w
 18965  1810  00A0               	movwf	??_InitializeTaps^(0+128)
 18966  1811  3001               	movlw	1
 18967  1812                     u9345:	
 18968  1812  35A0               	lslf	??_InitializeTaps^(0+128),f
 18969  1813  3EFF               	addlw	-1
 18970  1814  1D03               	skipz
 18971  1815  2812               	goto	u9345
 18972  1816  3520               	lslf	??_InitializeTaps^(0+128),w
 18973  1817  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18974  1818  0086               	movwf	6
 18975  1819  3002               	movlw	2	; select bank5/6
 18976  181A  0087               	movwf	7
 18977  181B  3000               	movlw	0
 18978  181C  3FC0               	movwi [0]fsr1
 18979  181D  3000               	movlw	0
 18980  181E  3FC1               	movwi [1]fsr1
 18981  181F  3FC2               	movwi [2]fsr1
 18982  1820  3FC3               	movwi [3]fsr1
 18983  1821  3001               	movlw	1
 18984  1822  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18985  1823  3000               	movlw	0
 18986  1824  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18987  1825  2803               	goto	L23
 18988  1826                     __end_of_InitializeTaps:	
 18989                           
 18990                           	psect	text68
 18991  2F32                     __ptext68:	
 18992 ;; *************** function _InitApp *****************
 18993 ;; Defined at:
 18994 ;;		line 23 in file "user.c"
 18995 ;; Parameters:    Size  Location     Type
 18996 ;;		None
 18997 ;; Auto vars:     Size  Location     Type
 18998 ;;		None
 18999 ;; Return value:  Size  Location     Type
 19000 ;;                  1    wreg      void 
 19001 ;; Registers used:
 19002 ;;		wreg, status,2, status,0, pclath, cstack
 19003 ;; Tracked objects:
 19004 ;;		On entry : 0/0
 19005 ;;		On exit  : 0/0
 19006 ;;		Unchanged: 0/0
 19007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19012 ;;Total ram usage:        0 bytes
 19013 ;; Hardware stack levels used:    1
 19014 ;; Hardware stack levels required when called:    5
 19015 ;; This function calls:
 19016 ;;		_init_adc
 19017 ;;		_init_pwm
 19018 ;; This function is called by:
 19019 ;;		_main
 19020 ;; This function uses a non-reentrant model
 19021 ;;
 19022                           
 19023                           
 19024                           ;psect for function _InitApp
 19025  2F32                     _InitApp:	
 19026                           
 19027                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 19028                           
 19029                           ;incstack = 0
 19030                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 19031  2F32  0021               	movlb	1	; select bank1
 19032  2F33  100D               	bcf	13,0	;volatile
 19033                           
 19034                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 19035  2F34  108D               	bcf	13,1	;volatile
 19036                           
 19037                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 19038  2F35  110D               	bcf	13,2	;volatile
 19039                           
 19040                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 19041  2F36  118D               	bcf	13,3	;volatile
 19042                           
 19043                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 19044  2F37  120D               	bcf	13,4	;volatile
 19045                           
 19046                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 19047  2F38  128D               	bcf	13,5	;volatile
 19048                           
 19049                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 19050  2F39  140E               	bsf	14,0	;volatile
 19051                           
 19052                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 19053  2F3A  120E               	bcf	14,4	;volatile
 19054                           
 19055                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 19056  2F3B  128E               	bcf	14,5	;volatile
 19057                           
 19058                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 19059  2F3C  100F               	bcf	15,0	;volatile
 19060                           
 19061                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 19062  2F3D  108F               	bcf	15,1	;volatile
 19063                           
 19064                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 19065  2F3E  110F               	bcf	15,2	;volatile
 19066                           
 19067                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 19068  2F3F  118F               	bcf	15,3	;volatile
 19069                           
 19070                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 19071  2F40  120F               	bcf	15,4	;volatile
 19072                           
 19073                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 19074  2F41  168F               	bsf	15,5	;volatile
 19075                           
 19076                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 19077  2F42  170F               	bsf	15,6	;volatile
 19078                           
 19079                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 19080  2F43  178F               	bsf	15,7	;volatile
 19081                           
 19082                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 19083  2F44  1410               	bsf	16,0	;volatile
 19084                           
 19085                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 19086  2F45  1490               	bsf	16,1	;volatile
 19087                           
 19088                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 19089  2F46  0023               	movlb	3	; select bank3
 19090  2F47  1010               	bcf	16,0	;volatile
 19091                           
 19092                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 19093  2F48  1090               	bcf	16,1	;volatile
 19094                           
 19095                           ;user.c: 53: PORTEbits.RE0 = 0;
 19096  2F49  0020               	movlb	0	; select bank0
 19097  2F4A  1010               	bcf	16,0	;volatile
 19098                           
 19099                           ;user.c: 54: PORTEbits.RE1 = 0;
 19100  2F4B  1090               	bcf	16,1	;volatile
 19101                           
 19102                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 19103  2F4C  0026               	movlb	6	; select bank6
 19104  2F4D  100C               	bcf	12,0	;volatile
 19105                           
 19106                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 19107  2F4E  108C               	bcf	12,1	;volatile
 19108                           
 19109                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 19110  2F4F  110C               	bcf	12,2	;volatile
 19111                           
 19112                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 19113  2F50  118C               	bcf	12,3	;volatile
 19114                           
 19115                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 19116  2F51  120C               	bcf	12,4	;volatile
 19117                           
 19118                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 19119  2F52  128C               	bcf	12,5	;volatile
 19120                           
 19121                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 19122  2F53  170C               	bsf	12,6	;volatile
 19123                           
 19124                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 19125  2F54  0028               	movlb	8	; select bank8
 19126  2F55  130C               	bcf	12,6	;volatile
 19127                           
 19128                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 19129  2F56  0026               	movlb	6	; select bank6
 19130  2F57  108D               	bcf	13,1	;volatile
 19131                           
 19132                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 19133  2F58  110D               	bcf	13,2	;volatile
 19134                           
 19135                           ;user.c: 68: init_adc();
 19136  2F59  31AD  2501  31AF   	fcall	_init_adc
 19137                           
 19138                           ;user.c: 69: init_pwm();
 19139  2F5C  31A2  225E         	fcall	_init_pwm
 19140                           
 19141                           ;user.c: 71: INTCONbits.GIE = 0b1;
 19142  2F5E  178B               	bsf	11,7	;volatile
 19143                           
 19144                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 19145  2F5F  168B               	bsf	11,5	;volatile
 19146                           
 19147                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19148  2F60  110B               	bcf	11,2	;volatile
 19149  2F61  0008               	return
 19150  2F62                     __end_of_InitApp:	
 19151                           
 19152                           	psect	text69
 19153  225E                     __ptext69:	
 19154 ;; *************** function _init_pwm *****************
 19155 ;; Defined at:
 19156 ;;		line 129 in file "user.c"
 19157 ;; Parameters:    Size  Location     Type
 19158 ;;		None
 19159 ;; Auto vars:     Size  Location     Type
 19160 ;;		None
 19161 ;; Return value:  Size  Location     Type
 19162 ;;                  1    wreg      void 
 19163 ;; Registers used:
 19164 ;;		wreg, status,2, status,0, pclath, cstack
 19165 ;; Tracked objects:
 19166 ;;		On entry : 0/0
 19167 ;;		On exit  : 0/0
 19168 ;;		Unchanged: 0/0
 19169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19174 ;;Total ram usage:        0 bytes
 19175 ;; Hardware stack levels used:    1
 19176 ;; Hardware stack levels required when called:    4
 19177 ;; This function calls:
 19178 ;;		_init_timer0
 19179 ;;		_init_timer2
 19180 ;; This function is called by:
 19181 ;;		_InitApp
 19182 ;; This function uses a non-reentrant model
 19183 ;;
 19184                           
 19185                           
 19186                           ;psect for function _init_pwm
 19187  225E                     _init_pwm:	
 19188                           
 19189                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19190                           
 19191                           ;incstack = 0
 19192                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19193  225E  0022               	movlb	2	; select bank2
 19194  225F  101D               	bcf	29,0	;volatile
 19195                           
 19196                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19197  2260  0021               	movlb	1	; select bank1
 19198  2261  110E               	bcf	14,2	;volatile
 19199                           
 19200                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19201  2262  108E               	bcf	14,1	;volatile
 19202                           
 19203                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19204  2263  0026               	movlb	6	; select bank6
 19205  2264  100D               	bcf	13,0	;volatile
 19206                           
 19207                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19208  2265  118D               	bcf	13,3	;volatile
 19209                           
 19210                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19211  2266  120D               	bcf	13,4	;volatile
 19212                           
 19213                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19214  2267  0021               	movlb	1	; select bank1
 19215  2268  1310               	bcf	16,6	;volatile
 19216                           
 19217                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19218  2269  1290               	bcf	16,5	;volatile
 19219                           
 19220                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19221  226A  1210               	bcf	16,4	;volatile
 19222                           
 19223                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19224  226B  1190               	bcf	16,3	;volatile
 19225                           
 19226                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19227  226C  1110               	bcf	16,2	;volatile
 19228                           
 19229                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19230  226D  300F               	movlw	15
 19231  226E  0025               	movlb	5	; select bank5
 19232  226F  0493               	iorwf	19,f	;volatile
 19233                           
 19234                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19235  2270  300F               	movlw	15
 19236  2271  049A               	iorwf	26,f	;volatile
 19237                           
 19238                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19239  2272  300F               	movlw	15
 19240  2273  0026               	movlb	6	; select bank6
 19241  2274  0493               	iorwf	19,f	;volatile
 19242                           
 19243                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19244  2275  300F               	movlw	15
 19245  2276  049A               	iorwf	26,f	;volatile
 19246                           
 19247                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19248  2277  300F               	movlw	15
 19249  2278  049E               	iorwf	30,f	;volatile
 19250                           
 19251                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19252  2279  300F               	movlw	15
 19253  227A  002C               	movlb	12	; select bank12
 19254  227B  0493               	iorwf	19,f	;volatile
 19255                           
 19256                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19257  227C  300F               	movlw	15
 19258  227D  0496               	iorwf	22,f	;volatile
 19259                           
 19260                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19261  227E  300F               	movlw	15
 19262  227F  0499               	iorwf	25,f	;volatile
 19263                           
 19264                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19265  2280  300F               	movlw	15
 19266  2281  049C               	iorwf	28,f	;volatile
 19267                           
 19268                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19269  2282  300F               	movlw	15
 19270  2283  049F               	iorwf	31,f	;volatile
 19271                           
 19272                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19273  2284  0025               	movlb	5	; select bank5
 19274  2285  019D               	clrf	29	;volatile
 19275                           
 19276                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19277  2286  019E               	clrf	30	;volatile
 19278                           
 19279                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19280  2287  019F               	clrf	31	;volatile
 19281                           
 19282                           ;user.c: 154: CCPR1 = 50;
 19283  2288  3000               	movlw	0
 19284  2289  0092               	movwf	18	;volatile
 19285  228A  3032               	movlw	50
 19286  228B  0091               	movwf	17	;volatile
 19287                           
 19288                           ;user.c: 155: CCPR2 = 100;
 19289  228C  3000               	movlw	0
 19290  228D  0099               	movwf	25	;volatile
 19291  228E  3064               	movlw	100
 19292  228F  0098               	movwf	24	;volatile
 19293                           
 19294                           ;user.c: 156: CCPR3 = 150;
 19295  2290  3000               	movlw	0
 19296  2291  0026               	movlb	6	; select bank6
 19297  2292  0092               	movwf	18	;volatile
 19298  2293  3096               	movlw	150
 19299  2294  0091               	movwf	17	;volatile
 19300                           
 19301                           ;user.c: 157: CCPR4 = 200;
 19302  2295  3000               	movlw	0
 19303  2296  0099               	movwf	25	;volatile
 19304  2297  30C8               	movlw	200
 19305  2298  0098               	movwf	24	;volatile
 19306                           
 19307                           ;user.c: 158: init_timer2();
 19308  2299  31AC  24EF  31A2   	fcall	_init_timer2
 19309                           
 19310                           ;user.c: 159: init_timer0();
 19311  229C  31AC  24E8         	fcall	_init_timer0
 19312  229E  0008               	return
 19313  229F                     __end_of_init_pwm:	
 19314                           
 19315                           	psect	text70
 19316  2CEF                     __ptext70:	
 19317 ;; *************** function _init_timer2 *****************
 19318 ;; Defined at:
 19319 ;;		line 162 in file "user.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;		None
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;		None
 19324 ;; Return value:  Size  Location     Type
 19325 ;;                  1    wreg      void 
 19326 ;; Registers used:
 19327 ;;		wreg, status,2, status,0
 19328 ;; Tracked objects:
 19329 ;;		On entry : 0/0
 19330 ;;		On exit  : 0/0
 19331 ;;		Unchanged: 0/0
 19332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19337 ;;Total ram usage:        0 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; Hardware stack levels required when called:    3
 19340 ;; This function calls:
 19341 ;;		Nothing
 19342 ;; This function is called by:
 19343 ;;		_init_pwm
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           
 19348                           ;psect for function _init_timer2
 19349  2CEF                     _init_timer2:	
 19350                           
 19351                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19352                           
 19353                           ;incstack = 0
 19354                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19355  2CEF  3087               	movlw	-121
 19356  2CF0  0020               	movlb	0	; select bank0
 19357  2CF1  059C               	andwf	28,f	;volatile
 19358                           
 19359                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19360  2CF2  30FC               	movlw	-4
 19361  2CF3  059C               	andwf	28,f	;volatile
 19362                           
 19363                           ;user.c: 165: PR2 = 0xFF;
 19364  2CF4  30FF               	movlw	255
 19365  2CF5  009B               	movwf	27	;volatile
 19366                           
 19367                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19368  2CF6  151C               	bsf	28,2	;volatile
 19369  2CF7  0008               	return
 19370  2CF8                     __end_of_init_timer2:	
 19371                           
 19372                           	psect	text71
 19373  2CE8                     __ptext71:	
 19374 ;; *************** function _init_timer0 *****************
 19375 ;; Defined at:
 19376 ;;		line 169 in file "user.c"
 19377 ;; Parameters:    Size  Location     Type
 19378 ;;		None
 19379 ;; Auto vars:     Size  Location     Type
 19380 ;;		None
 19381 ;; Return value:  Size  Location     Type
 19382 ;;                  1    wreg      void 
 19383 ;; Registers used:
 19384 ;;		None
 19385 ;; Tracked objects:
 19386 ;;		On entry : 0/0
 19387 ;;		On exit  : 0/0
 19388 ;;		Unchanged: 0/0
 19389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19394 ;;Total ram usage:        0 bytes
 19395 ;; Hardware stack levels used:    1
 19396 ;; Hardware stack levels required when called:    3
 19397 ;; This function calls:
 19398 ;;		Nothing
 19399 ;; This function is called by:
 19400 ;;		_init_pwm
 19401 ;; This function uses a non-reentrant model
 19402 ;;
 19403                           
 19404                           
 19405                           ;psect for function _init_timer0
 19406  2CE8                     _init_timer0:	
 19407                           
 19408                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19409                           
 19410                           ;incstack = 0
 19411                           ; Regs used in _init_timer0: []
 19412  2CE8  0021               	movlb	1	; select bank1
 19413  2CE9  1295               	bcf	21,5	;volatile
 19414                           
 19415                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19416  2CEA  1195               	bcf	21,3	;volatile
 19417                           
 19418                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19419  2CEB  1015               	bcf	21,0	;volatile
 19420                           
 19421                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19422  2CEC  1495               	bsf	21,1	;volatile
 19423                           
 19424                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19425  2CED  1115               	bcf	21,2	;volatile
 19426  2CEE  0008               	return
 19427  2CEF                     __end_of_init_timer0:	
 19428                           
 19429                           	psect	text72
 19430  2D01                     __ptext72:	
 19431 ;; *************** function _init_adc *****************
 19432 ;; Defined at:
 19433 ;;		line 115 in file "user.c"
 19434 ;; Parameters:    Size  Location     Type
 19435 ;;		None
 19436 ;; Auto vars:     Size  Location     Type
 19437 ;;		None
 19438 ;; Return value:  Size  Location     Type
 19439 ;;                  1    wreg      void 
 19440 ;; Registers used:
 19441 ;;		wreg, status,2, status,0
 19442 ;; Tracked objects:
 19443 ;;		On entry : 0/0
 19444 ;;		On exit  : 0/0
 19445 ;;		Unchanged: 0/0
 19446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19451 ;;Total ram usage:        0 bytes
 19452 ;; Hardware stack levels used:    1
 19453 ;; Hardware stack levels required when called:    3
 19454 ;; This function calls:
 19455 ;;		Nothing
 19456 ;; This function is called by:
 19457 ;;		_InitApp
 19458 ;; This function uses a non-reentrant model
 19459 ;;
 19460                           
 19461                           
 19462                           ;psect for function _init_adc
 19463  2D01                     _init_adc:	
 19464                           
 19465                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19466                           
 19467                           ;incstack = 0
 19468                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19469  2D01  0021               	movlb	1	; select bank1
 19470  2D02  179E               	bsf	30,7	;volatile
 19471                           
 19472                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19473  2D03  081E               	movf	30,w	;volatile
 19474  2D04  398F               	andlw	-113
 19475  2D05  3860               	iorlw	96
 19476  2D06  009E               	movwf	30	;volatile
 19477                           
 19478                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19479  2D07  30FC               	movlw	-4
 19480  2D08  059E               	andwf	30,f	;volatile
 19481                           
 19482                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19483  2D09  141D               	bsf	29,0	;volatile
 19484  2D0A  0008               	return
 19485  2D0B                     __end_of_init_adc:	
 19486                           
 19487                           	psect	text73
 19488  2CE0                     __ptext73:	
 19489 ;; *************** function _ConfigureOscillator *****************
 19490 ;; Defined at:
 19491 ;;		line 18 in file "system.c"
 19492 ;; Parameters:    Size  Location     Type
 19493 ;;		None
 19494 ;; Auto vars:     Size  Location     Type
 19495 ;;		None
 19496 ;; Return value:  Size  Location     Type
 19497 ;;                  1    wreg      void 
 19498 ;; Registers used:
 19499 ;;		wreg, status,2, status,0
 19500 ;; Tracked objects:
 19501 ;;		On entry : 0/0
 19502 ;;		On exit  : 0/0
 19503 ;;		Unchanged: 0/0
 19504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19509 ;;Total ram usage:        0 bytes
 19510 ;; Hardware stack levels used:    1
 19511 ;; Hardware stack levels required when called:    3
 19512 ;; This function calls:
 19513 ;;		Nothing
 19514 ;; This function is called by:
 19515 ;;		_main
 19516 ;; This function uses a non-reentrant model
 19517 ;;
 19518                           
 19519                           
 19520                           ;psect for function _ConfigureOscillator
 19521  2CE0                     _ConfigureOscillator:	
 19522                           
 19523                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19524                           
 19525                           ;incstack = 0
 19526                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19527  2CE0  30FC               	movlw	-4
 19528  2CE1  0021               	movlb	1	; select bank1
 19529  2CE2  0599               	andwf	25,f	;volatile
 19530  2CE3  0008               	return
 19531  2CE4                     __end_of_ConfigureOscillator:	
 19532                           
 19533                           	psect	intentry
 19534  0004                     __pintentry:	
 19535 ;; *************** function _isr *****************
 19536 ;; Defined at:
 19537 ;;		line 28 in file "interrupts.c"
 19538 ;; Parameters:    Size  Location     Type
 19539 ;;		None
 19540 ;; Auto vars:     Size  Location     Type
 19541 ;;  subDiv          1   13[COMMON] unsigned char 
 19542 ;; Return value:  Size  Location     Type
 19543 ;;                  1    wreg      void 
 19544 ;; Registers used:
 19545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19546 ;; Tracked objects:
 19547 ;;		On entry : 0/0
 19548 ;;		On exit  : 0/0
 19549 ;;		Unchanged: 0/0
 19550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19553 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19554 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19555 ;;Total ram usage:        7 bytes
 19556 ;; Hardware stack levels used:    1
 19557 ;; Hardware stack levels required when called:    2
 19558 ;; This function calls:
 19559 ;;		_modulation
 19560 ;;		i1___awdiv
 19561 ;;		i1_getModulationSubdivision
 19562 ;;		i1_set_leds_top
 19563 ;; This function is called by:
 19564 ;;		Interrupt level 1
 19565 ;; This function uses a non-reentrant model
 19566 ;;
 19567                           
 19568  0004                     _isr:	
 19569                           
 19570                           ;incstack = 0
 19571                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19572  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19573  0005  3180               	pagesel	$
 19574  0006  0020               	movlb	0	; select bank0
 19575  0007  087F               	movf	127,w
 19576  0008  00BF               	movwf	??_isr+5
 19577                           
 19578                           ;interrupts.c: 31: extern char isInitialized;
 19579                           ;interrupts.c: 32: extern volatile long timer;
 19580                           ;interrupts.c: 33: extern volatile long sub_timer;
 19581                           ;interrupts.c: 34: extern volatile long tap_timer;
 19582                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19583                           ;interrupts.c: 36: extern int mod_delay_time;
 19584                           ;interrupts.c: 40: extern int top_push_state;
 19585                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19586                           ;interrupts.c: 42: extern volatile long mod_timer;
 19587                           ;interrupts.c: 43: extern volatile long delay_time;
 19588                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19589  0009  1D0B               	btfss	11,2	;volatile
 19590  000A  2AEE               	goto	i1l137
 19591                           
 19592                           ;interrupts.c: 47: if (isInitialized == 0) {
 19593  000B  0023               	movlb	3	; select bank3
 19594  000C  0841               	movf	_isInitialized^(0+384),w
 19595  000D  1903               	btfsc	3,2
 19596  000E  2AED               	goto	i1l7026
 19597                           
 19598                           ;interrupts.c: 52: }
 19599                           ;interrupts.c: 63: if (timer == 0) {
 19600                           
 19601                           ;interrupts.c: 51: return;
 19602                           
 19603                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19604  000F  0020               	movlb	0	; select bank0
 19605  0010  0859               	movf	_timer+3,w	;volatile
 19606  0011  0458               	iorwf	_timer+2,w	;volatile
 19607  0012  0457               	iorwf	_timer+1,w	;volatile
 19608  0013  0456               	iorwf	_timer,w	;volatile
 19609  0014  1D03               	skipz
 19610  0015  281B               	goto	i1l138
 19611                           
 19612                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19613  0016  0023               	movlb	3	; select bank3
 19614  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19615  0018  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19616  0019  0859               	movf	_mod_delay_time^(0+384),w
 19617  001A  00BC               	movwf	_tmpModDelay^(0+384)
 19618  001B                     i1l138:	
 19619                           
 19620                           ;interrupts.c: 65: }
 19621                           ;interrupts.c: 70: timer = timer + 1;
 19622  001B  3001               	movlw	1
 19623  001C  0020               	movlb	0	; select bank0
 19624  001D  00BA               	movwf	??_isr
 19625  001E  3000               	movlw	0
 19626  001F  00BB               	movwf	??_isr+1
 19627  0020  3000               	movlw	0
 19628  0021  00BC               	movwf	??_isr+2
 19629  0022  3000               	movlw	0
 19630  0023  00BD               	movwf	??_isr+3
 19631  0024  0856               	movf	_timer,w	;volatile
 19632  0025  07BA               	addwf	??_isr,f
 19633  0026  0857               	movf	_timer+1,w	;volatile
 19634  0027  3DBB               	addwfc	??_isr+1,f
 19635  0028  0858               	movf	_timer+2,w	;volatile
 19636  0029  3DBC               	addwfc	??_isr+2,f
 19637  002A  0859               	movf	_timer+3,w	;volatile
 19638  002B  3DBD               	addwfc	??_isr+3,f
 19639  002C  083D               	movf	??_isr+3,w
 19640  002D  00D9               	movwf	_timer+3	;volatile
 19641  002E  083C               	movf	??_isr+2,w
 19642  002F  00D8               	movwf	_timer+2	;volatile
 19643  0030  083B               	movf	??_isr+1,w
 19644  0031  00D7               	movwf	_timer+1	;volatile
 19645  0032  083A               	movf	??_isr,w
 19646  0033  00D6               	movwf	_timer	;volatile
 19647                           
 19648                           ;interrupts.c: 71: sub_timer = sub_timer + 1;
 19649  0034  3001               	movlw	1
 19650  0035  00BA               	movwf	??_isr
 19651  0036  3000               	movlw	0
 19652  0037  00BB               	movwf	??_isr+1
 19653  0038  3000               	movlw	0
 19654  0039  00BC               	movwf	??_isr+2
 19655  003A  3000               	movlw	0
 19656  003B  00BD               	movwf	??_isr+3
 19657  003C  0023               	movlb	3	; select bank3
 19658  003D  0828               	movf	_sub_timer^(0+384),w	;volatile
 19659  003E  0020               	movlb	0	; select bank0
 19660  003F  07BA               	addwf	??_isr,f
 19661  0040  0023               	movlb	3	; select bank3
 19662  0041  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19663  0042  0020               	movlb	0	; select bank0
 19664  0043  3DBB               	addwfc	??_isr+1,f
 19665  0044  0023               	movlb	3	; select bank3
 19666  0045  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19667  0046  0020               	movlb	0	; select bank0
 19668  0047  3DBC               	addwfc	??_isr+2,f
 19669  0048  0023               	movlb	3	; select bank3
 19670  0049  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19671  004A  0020               	movlb	0	; select bank0
 19672  004B  3DBD               	addwfc	??_isr+3,f
 19673  004C  083D               	movf	??_isr+3,w
 19674  004D  0023               	movlb	3	; select bank3
 19675  004E  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19676  004F  0020               	movlb	0	; select bank0
 19677  0050  083C               	movf	??_isr+2,w
 19678  0051  0023               	movlb	3	; select bank3
 19679  0052  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19680  0053  0020               	movlb	0	; select bank0
 19681  0054  083B               	movf	??_isr+1,w
 19682  0055  0023               	movlb	3	; select bank3
 19683  0056  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19684  0057  0020               	movlb	0	; select bank0
 19685  0058  083A               	movf	??_isr,w
 19686  0059  0023               	movlb	3	; select bank3
 19687  005A  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19688                           
 19689                           ;interrupts.c: 72: tap_timer = tap_timer + 1;
 19690  005B  3001               	movlw	1
 19691  005C  0020               	movlb	0	; select bank0
 19692  005D  00BA               	movwf	??_isr
 19693  005E  3000               	movlw	0
 19694  005F  00BB               	movwf	??_isr+1
 19695  0060  3000               	movlw	0
 19696  0061  00BC               	movwf	??_isr+2
 19697  0062  3000               	movlw	0
 19698  0063  00BD               	movwf	??_isr+3
 19699  0064  0852               	movf	_tap_timer,w	;volatile
 19700  0065  07BA               	addwf	??_isr,f
 19701  0066  0853               	movf	_tap_timer+1,w	;volatile
 19702  0067  3DBB               	addwfc	??_isr+1,f
 19703  0068  0854               	movf	_tap_timer+2,w	;volatile
 19704  0069  3DBC               	addwfc	??_isr+2,f
 19705  006A  0855               	movf	_tap_timer+3,w	;volatile
 19706  006B  3DBD               	addwfc	??_isr+3,f
 19707  006C  083D               	movf	??_isr+3,w
 19708  006D  00D5               	movwf	_tap_timer+3	;volatile
 19709  006E  083C               	movf	??_isr+2,w
 19710  006F  00D4               	movwf	_tap_timer+2	;volatile
 19711  0070  083B               	movf	??_isr+1,w
 19712  0071  00D3               	movwf	_tap_timer+1	;volatile
 19713  0072  083A               	movf	??_isr,w
 19714  0073  00D2               	movwf	_tap_timer	;volatile
 19715                           
 19716                           ;interrupts.c: 73: mod_timer = mod_timer + 1;
 19717  0074  3001               	movlw	1
 19718  0075  00BA               	movwf	??_isr
 19719  0076  3000               	movlw	0
 19720  0077  00BB               	movwf	??_isr+1
 19721  0078  3000               	movlw	0
 19722  0079  00BC               	movwf	??_isr+2
 19723  007A  3000               	movlw	0
 19724  007B  00BD               	movwf	??_isr+3
 19725  007C  0023               	movlb	3	; select bank3
 19726  007D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19727  007E  0020               	movlb	0	; select bank0
 19728  007F  07BA               	addwf	??_isr,f
 19729  0080  0023               	movlb	3	; select bank3
 19730  0081  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19731  0082  0020               	movlb	0	; select bank0
 19732  0083  3DBB               	addwfc	??_isr+1,f
 19733  0084  0023               	movlb	3	; select bank3
 19734  0085  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19735  0086  0020               	movlb	0	; select bank0
 19736  0087  3DBC               	addwfc	??_isr+2,f
 19737  0088  0023               	movlb	3	; select bank3
 19738  0089  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19739  008A  0020               	movlb	0	; select bank0
 19740  008B  3DBD               	addwfc	??_isr+3,f
 19741  008C  083D               	movf	??_isr+3,w
 19742  008D  0023               	movlb	3	; select bank3
 19743  008E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19744  008F  0020               	movlb	0	; select bank0
 19745  0090  083C               	movf	??_isr+2,w
 19746  0091  0023               	movlb	3	; select bank3
 19747  0092  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19748  0093  0020               	movlb	0	; select bank0
 19749  0094  083B               	movf	??_isr+1,w
 19750  0095  0023               	movlb	3	; select bank3
 19751  0096  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19752  0097  0020               	movlb	0	; select bank0
 19753  0098  083A               	movf	??_isr,w
 19754  0099  0023               	movlb	3	; select bank3
 19755  009A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19756                           
 19757                           ;interrupts.c: 74: double_timer++;
 19758  009B  3001               	movlw	1
 19759  009C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19760  009D  3000               	movlw	0
 19761  009E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19762  009F  3000               	movlw	0
 19763  00A0  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19764  00A1  3000               	movlw	0
 19765  00A2  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19766                           
 19767                           ;interrupts.c: 77: char subDiv = getModulationSubdivision();
 19768  00A3  31AE  26A9  3180   	fcall	i1_getModulationSubdivision
 19769  00A6  0870               	movf	?i1_getModulationSubdivision,w
 19770  00A7  0020               	movlb	0	; select bank0
 19771  00A8  00BA               	movwf	??_isr
 19772  00A9  083A               	movf	??_isr,w
 19773  00AA  00FD               	movwf	isr@subDiv
 19774                           
 19775                           ;interrupts.c: 82: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19776  00AB  0023               	movlb	3	; select bank3
 19777  00AC  083C               	movf	_tmpModDelay^(0+384),w
 19778  00AD  0020               	movlb	0	; select bank0
 19779  00AE  00BA               	movwf	??_isr
 19780  00AF  0023               	movlb	3	; select bank3
 19781  00B0  083D               	movf	(_tmpModDelay+1)^(0+384),w
 19782  00B1  0020               	movlb	0	; select bank0
 19783  00B2  00BB               	movwf	??_isr+1
 19784  00B3  3000               	movlw	0
 19785  00B4  1BBB               	btfsc	??_isr+1,7
 19786  00B5  30FF               	movlw	255
 19787  00B6  00BC               	movwf	??_isr+2
 19788  00B7  00BD               	movwf	??_isr+3
 19789  00B8  0023               	movlb	3	; select bank3
 19790  00B9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19791  00BA  3A80               	xorlw	128
 19792  00BB  0020               	movlb	0	; select bank0
 19793  00BC  00BE               	movwf	??_isr+4
 19794  00BD  083D               	movf	??_isr+3,w
 19795  00BE  3A80               	xorlw	128
 19796  00BF  023E               	subwf	??_isr+4,w
 19797  00C0  0023               	movlb	3	; select bank3
 19798  00C1  1D03               	skipz
 19799  00C2  28D3               	goto	u678_23
 19800  00C3  0020               	movlb	0	; select bank0
 19801  00C4  083C               	movf	??_isr+2,w
 19802  00C5  0023               	movlb	3	; select bank3
 19803  00C6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19804  00C7  1D03               	skipz
 19805  00C8  28D3               	goto	u678_23
 19806  00C9  0020               	movlb	0	; select bank0
 19807  00CA  083B               	movf	??_isr+1,w
 19808  00CB  0023               	movlb	3	; select bank3
 19809  00CC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19810  00CD  1D03               	skipz
 19811  00CE  28D3               	goto	u678_23
 19812  00CF  0020               	movlb	0	; select bank0
 19813  00D0  083A               	movf	??_isr,w
 19814  00D1  0023               	movlb	3	; select bank3
 19815  00D2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19816  00D3                     u678_23:	
 19817  00D3  1C03               	skipc
 19818  00D4  2901               	goto	i1l139
 19819  00D5  087D               	movf	isr@subDiv,w
 19820  00D6  0020               	movlb	0	; select bank0
 19821  00D7  00BA               	movwf	??_isr
 19822  00D8  01BB               	clrf	??_isr+1
 19823  00D9  0023               	movlb	3	; select bank3
 19824  00DA  0858               	movf	(_mod_counter+1)^(0+384),w
 19825  00DB  0020               	movlb	0	; select bank0
 19826  00DC  063B               	xorwf	??_isr+1,w
 19827  00DD  1D03               	skipz
 19828  00DE  28E3               	goto	u679_25
 19829  00DF  0023               	movlb	3	; select bank3
 19830  00E0  0857               	movf	_mod_counter^(0+384),w
 19831  00E1  0020               	movlb	0	; select bank0
 19832  00E2  063A               	xorwf	??_isr,w
 19833  00E3                     u679_25:	
 19834  00E3  1D03               	skipz
 19835  00E4  2901               	goto	i1l139
 19836  00E5  0023               	movlb	3	; select bank3
 19837  00E6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19838  00E7  063D               	xorwf	(_tmpModDelay+1)^(0+384),w
 19839  00E8  1D03               	skipz
 19840  00E9  28EC               	goto	u680_25
 19841  00EA  0859               	movf	_mod_delay_time^(0+384),w
 19842  00EB  063C               	xorwf	_tmpModDelay^(0+384),w
 19843  00EC                     u680_25:	
 19844  00EC  1D03               	skipz
 19845  00ED  2901               	goto	i1l139
 19846                           
 19847                           ;interrupts.c: 83: tmpModDelay = (delay_time - sub_timer);
 19848  00EE  0928               	comf	_sub_timer^(0+384),w	;volatile
 19849  00EF  0020               	movlb	0	; select bank0
 19850  00F0  00BA               	movwf	??_isr
 19851  00F1  0023               	movlb	3	; select bank3
 19852  00F2  0929               	comf	(_sub_timer+1)^(0+384),w	;volatile
 19853  00F3  0020               	movlb	0	; select bank0
 19854  00F4  00BB               	movwf	??_isr+1
 19855  00F5  0ABA               	incf	??_isr,f
 19856  00F6  1903               	skipnz
 19857  00F7  0ABB               	incf	??_isr+1,f
 19858  00F8  0844               	movf	_delay_time,w	;volatile
 19859  00F9  073A               	addwf	??_isr,w
 19860  00FA  0023               	movlb	3	; select bank3
 19861  00FB  00BC               	movwf	_tmpModDelay^(0+384)
 19862  00FC  0020               	movlb	0	; select bank0
 19863  00FD  0845               	movf	_delay_time+1,w	;volatile
 19864  00FE  3D3B               	addwfc	??_isr+1,w
 19865  00FF  0023               	movlb	3	; select bank3
 19866  0100  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19867  0101                     i1l139:	
 19868                           
 19869                           ;interrupts.c: 84: }
 19870                           ;interrupts.c: 86: if (longBypass_start == 1) {
 19871  0101  0023               	movlb	3	; select bank3
 19872  0102  0344               	decf	_longBypass_start^(0+384),w
 19873  0103  1D03               	btfss	3,2
 19874  0104  291B               	goto	i1l6930
 19875                           
 19876                           ;interrupts.c: 87: longBypass_timer++;
 19877  0105  3001               	movlw	1
 19878  0106  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19879  0107  3000               	movlw	0
 19880  0108  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19881                           
 19882                           ;interrupts.c: 88: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19883  0109  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19884  010A  0020               	movlb	0	; select bank0
 19885  010B  024B               	subwf	_long_press_limit+1,w
 19886  010C  1D03               	skipz
 19887  010D  2912               	goto	u682_25
 19888  010E  0023               	movlb	3	; select bank3
 19889  010F  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19890  0110  0020               	movlb	0	; select bank0
 19891  0111  024A               	subwf	_long_press_limit,w
 19892  0112                     u682_25:	
 19893  0112  1803               	skipnc
 19894  0113  291B               	goto	i1l6930
 19895  0114  084B               	movf	_long_press_limit+1,w
 19896  0115  0023               	movlb	3	; select bank3
 19897  0116  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19898  0117  0020               	movlb	0	; select bank0
 19899  0118  084A               	movf	_long_press_limit,w
 19900  0119  0023               	movlb	3	; select bank3
 19901  011A  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19902  011B                     i1l6930:	
 19903                           
 19904                           ;interrupts.c: 89: }
 19905                           ;interrupts.c: 90: if (longTap_start == 1) {
 19906  011B  0023               	movlb	3	; select bank3
 19907  011C  0345               	decf	_longTap_start^(0+384),w
 19908  011D  1D03               	btfss	3,2
 19909  011E  2935               	goto	i1l6936
 19910                           
 19911                           ;interrupts.c: 91: longTap_timer++;
 19912  011F  3001               	movlw	1
 19913  0120  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19914  0121  3000               	movlw	0
 19915  0122  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19916                           
 19917                           ;interrupts.c: 92: if (longTap_timer > long_press_limit) {
 19918  0123  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19919  0124  0020               	movlb	0	; select bank0
 19920  0125  024B               	subwf	_long_press_limit+1,w
 19921  0126  1D03               	skipz
 19922  0127  292C               	goto	u684_25
 19923  0128  0023               	movlb	3	; select bank3
 19924  0129  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19925  012A  0020               	movlb	0	; select bank0
 19926  012B  024A               	subwf	_long_press_limit,w
 19927  012C                     u684_25:	
 19928  012C  1803               	skipnc
 19929  012D  2935               	goto	i1l6936
 19930                           
 19931                           ;interrupts.c: 93: longTap_timer = long_press_limit;
 19932  012E  084B               	movf	_long_press_limit+1,w
 19933  012F  0023               	movlb	3	; select bank3
 19934  0130  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19935  0131  0020               	movlb	0	; select bank0
 19936  0132  084A               	movf	_long_press_limit,w
 19937  0133  0023               	movlb	3	; select bank3
 19938  0134  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 19939  0135                     i1l6936:	
 19940                           
 19941                           ;interrupts.c: 94: }
 19942                           ;interrupts.c: 95: }
 19943                           ;interrupts.c: 97: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19944  0135  0020               	movlb	0	; select bank0
 19945  0136  084F               	movf	_longTap_state,w	;volatile
 19946  0137  1D03               	btfss	3,2
 19947  0138  2993               	goto	i1l6962
 19948  0139  085C               	movf	_doubleTap_state,w	;volatile
 19949  013A  1D03               	btfss	3,2
 19950  013B  2993               	goto	i1l6962
 19951  013C  085F               	movf	_presetSaveMode,w
 19952  013D  1D03               	btfss	3,2
 19953  013E  2993               	goto	i1l6962
 19954                           
 19955                           ;interrupts.c: 99: if (timer >= baseline_mod_time) {
 19956  013F  0859               	movf	_timer+3,w	;volatile
 19957  0140  3A80               	xorlw	128
 19958  0141  00BA               	movwf	??_isr
 19959  0142  0843               	movf	_baseline_mod_time+3,w	;volatile
 19960  0143  3A80               	xorlw	128
 19961  0144  023A               	subwf	??_isr,w
 19962  0145  1D03               	skipz
 19963  0146  2951               	goto	u688_23
 19964  0147  0842               	movf	_baseline_mod_time+2,w	;volatile
 19965  0148  0258               	subwf	_timer+2,w	;volatile
 19966  0149  1D03               	skipz
 19967  014A  2951               	goto	u688_23
 19968  014B  0841               	movf	_baseline_mod_time+1,w	;volatile
 19969  014C  0257               	subwf	_timer+1,w	;volatile
 19970  014D  1D03               	skipz
 19971  014E  2951               	goto	u688_23
 19972  014F  0840               	movf	_baseline_mod_time,w	;volatile
 19973  0150  0256               	subwf	_timer,w	;volatile
 19974  0151                     u688_23:	
 19975  0151  1C03               	skipc
 19976  0152  2981               	goto	i1l6958
 19977                           
 19978                           ;interrupts.c: 102: LATBbits.LATB4 = 1;
 19979  0153  0022               	movlb	2	; select bank2
 19980  0154  160D               	bsf	13,4	;volatile
 19981                           
 19982                           ;interrupts.c: 104: timer = 0;
 19983  0155  3000               	movlw	0
 19984  0156  0020               	movlb	0	; select bank0
 19985  0157  00D9               	movwf	_timer+3	;volatile
 19986  0158  3000               	movlw	0
 19987  0159  00D8               	movwf	_timer+2	;volatile
 19988  015A  3000               	movlw	0
 19989  015B  00D7               	movwf	_timer+1	;volatile
 19990  015C  3000               	movlw	0
 19991  015D  00D6               	movwf	_timer	;volatile
 19992                           
 19993                           ;interrupts.c: 106: if (modulation_changed == 1) {
 19994  015E  0023               	movlb	3	; select bank3
 19995  015F  0347               	decf	_modulation_changed^(0+384),w
 19996  0160  1D03               	btfss	3,2
 19997  0161  2981               	goto	i1l6958
 19998                           
 19999                           ;interrupts.c: 109: modulation_changed = 0;
 20000  0162  01C7               	clrf	_modulation_changed^(0+384)
 20001                           
 20002                           ;interrupts.c: 110: mod_time_changed = 0;
 20003  0163  01E4               	clrf	_mod_time_changed^(0+384)
 20004                           
 20005                           ;interrupts.c: 111: sub_timer = delay_time;
 20006  0164  0020               	movlb	0	; select bank0
 20007  0165  0847               	movf	_delay_time+3,w	;volatile
 20008  0166  0023               	movlb	3	; select bank3
 20009  0167  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20010  0168  0020               	movlb	0	; select bank0
 20011  0169  0846               	movf	_delay_time+2,w	;volatile
 20012  016A  0023               	movlb	3	; select bank3
 20013  016B  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20014  016C  0020               	movlb	0	; select bank0
 20015  016D  0845               	movf	_delay_time+1,w	;volatile
 20016  016E  0023               	movlb	3	; select bank3
 20017  016F  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20018  0170  0020               	movlb	0	; select bank0
 20019  0171  0844               	movf	_delay_time,w	;volatile
 20020  0172  0023               	movlb	3	; select bank3
 20021  0173  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20022                           
 20023                           ;interrupts.c: 112: tmpModDelay = mod_delay_time;
 20024  0174  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20025  0175  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20026  0176  0859               	movf	_mod_delay_time^(0+384),w
 20027  0177  00BC               	movwf	_tmpModDelay^(0+384)
 20028                           
 20029                           ;interrupts.c: 113: mod_timer = tmpModDelay;
 20030  0178  083C               	movf	_tmpModDelay^(0+384),w
 20031  0179  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20032  017A  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20033  017B  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20034  017C  0D89               	rlf	9,f
 20035  017D  3B89               	subwfb	9,f
 20036  017E  0989               	comf	9,f
 20037  017F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20038  0180  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20039  0181                     i1l6958:	
 20040                           
 20041                           ;interrupts.c: 121: }
 20042                           ;interrupts.c: 122: }
 20043                           ;interrupts.c: 124: if (timer >= 30) {
 20044  0181  0020               	movlb	0	; select bank0
 20045  0182  1BD9               	btfsc	_timer+3,7	;volatile
 20046  0183  2993               	goto	i1l6962
 20047  0184  0859               	movf	_timer+3,w	;volatile
 20048  0185  1D03               	btfss	3,2
 20049  0186  2991               	goto	i1l6960
 20050  0187  0858               	movf	_timer+2,w	;volatile
 20051  0188  1D03               	btfss	3,2
 20052  0189  2991               	goto	i1l6960
 20053  018A  0857               	movf	_timer+1,w	;volatile
 20054  018B  1D03               	btfss	3,2
 20055  018C  2991               	goto	i1l6960
 20056  018D  301E               	movlw	30
 20057  018E  0256               	subwf	_timer,w	;volatile
 20058  018F  1C03               	btfss	3,0
 20059  0190  2993               	goto	i1l6962
 20060  0191                     i1l6960:	
 20061                           
 20062                           ;interrupts.c: 126: LATBbits.LATB4 = 0;
 20063  0191  0022               	movlb	2	; select bank2
 20064  0192  120D               	bcf	13,4	;volatile
 20065  0193                     i1l6962:	
 20066                           
 20067                           ;interrupts.c: 128: }
 20068                           ;interrupts.c: 129: }
 20069                           ;interrupts.c: 138: if (presetSaveMode < 1 && mode2_state == 0) {
 20070  0193  0020               	movlb	0	; select bank0
 20071  0194  085F               	movf	_presetSaveMode,w
 20072  0195  1D03               	btfss	3,2
 20073  0196  29EE               	goto	i1l6980
 20074  0197  085E               	movf	_mode2_state,w
 20075  0198  1D03               	btfss	3,2
 20076  0199  29EE               	goto	i1l6980
 20077                           
 20078                           ;interrupts.c: 139: if (sub_timer >= delay_time ) {
 20079  019A  0023               	movlb	3	; select bank3
 20080  019B  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20081  019C  3A80               	xorlw	128
 20082  019D  0020               	movlb	0	; select bank0
 20083  019E  00BA               	movwf	??_isr
 20084  019F  0847               	movf	_delay_time+3,w	;volatile
 20085  01A0  3A80               	xorlw	128
 20086  01A1  023A               	subwf	??_isr,w
 20087  01A2  0023               	movlb	3	; select bank3
 20088  01A3  1D03               	skipz
 20089  01A4  29B5               	goto	u693_23
 20090  01A5  0020               	movlb	0	; select bank0
 20091  01A6  0846               	movf	_delay_time+2,w	;volatile
 20092  01A7  0023               	movlb	3	; select bank3
 20093  01A8  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 20094  01A9  1D03               	skipz
 20095  01AA  29B5               	goto	u693_23
 20096  01AB  0020               	movlb	0	; select bank0
 20097  01AC  0845               	movf	_delay_time+1,w	;volatile
 20098  01AD  0023               	movlb	3	; select bank3
 20099  01AE  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 20100  01AF  1D03               	skipz
 20101  01B0  29B5               	goto	u693_23
 20102  01B1  0020               	movlb	0	; select bank0
 20103  01B2  0844               	movf	_delay_time,w	;volatile
 20104  01B3  0023               	movlb	3	; select bank3
 20105  01B4  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20106  01B5                     u693_23:	
 20107  01B5  1C03               	skipc
 20108  01B6  29D0               	goto	i1l6974
 20109                           
 20110                           ;interrupts.c: 140: if (suspend_blink == 0) {
 20111  01B7  0022               	movlb	2	; select bank2
 20112  01B8  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20113  01B9  1D03               	btfss	3,2
 20114  01BA  29C7               	goto	i1l6972
 20115                           
 20116                           ;interrupts.c: 141: set_leds_top(top_push_state, 1);
 20117  01BB  0020               	movlb	0	; select bank0
 20118  01BC  084D               	movf	_top_push_state+1,w
 20119  01BD  00F1               	movwf	i1set_leds_top@x+1
 20120  01BE  084C               	movf	_top_push_state,w
 20121  01BF  00F0               	movwf	i1set_leds_top@x
 20122  01C0  3001               	movlw	1
 20123  01C1  00F2               	movwf	i1set_leds_top@ledState
 20124  01C2  3000               	movlw	0
 20125  01C3  00F3               	movwf	i1set_leds_top@ledState+1
 20126  01C4  31A2  22E3  3180   	fcall	i1_set_leds_top
 20127  01C7                     i1l6972:	
 20128                           
 20129                           ;interrupts.c: 142: }
 20130                           ;interrupts.c: 144: sub_timer = 0;
 20131  01C7  3000               	movlw	0
 20132  01C8  0023               	movlb	3	; select bank3
 20133  01C9  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20134  01CA  3000               	movlw	0
 20135  01CB  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20136  01CC  3000               	movlw	0
 20137  01CD  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20138  01CE  3000               	movlw	0
 20139  01CF  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20140  01D0                     i1l6974:	
 20141                           
 20142                           ;interrupts.c: 145: }
 20143                           ;interrupts.c: 147: if (sub_timer >= 20) {
 20144  01D0  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20145  01D1  29EE               	goto	i1l6980
 20146  01D2  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20147  01D3  1D03               	btfss	3,2
 20148  01D4  29DF               	goto	i1l6976
 20149  01D5  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20150  01D6  1D03               	btfss	3,2
 20151  01D7  29DF               	goto	i1l6976
 20152  01D8  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20153  01D9  1D03               	btfss	3,2
 20154  01DA  29DF               	goto	i1l6976
 20155  01DB  3014               	movlw	20
 20156  01DC  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20157  01DD  1C03               	btfss	3,0
 20158  01DE  29EE               	goto	i1l6980
 20159  01DF                     i1l6976:	
 20160                           
 20161                           ;interrupts.c: 148: if (suspend_blink == 0) {
 20162  01DF  0022               	movlb	2	; select bank2
 20163  01E0  086A               	movf	_suspend_blink^(0+256),w	;volatile
 20164  01E1  1D03               	btfss	3,2
 20165  01E2  29EE               	goto	i1l6980
 20166                           
 20167                           ;interrupts.c: 149: set_leds_top(top_push_state, 0);
 20168  01E3  0020               	movlb	0	; select bank0
 20169  01E4  084D               	movf	_top_push_state+1,w
 20170  01E5  00F1               	movwf	i1set_leds_top@x+1
 20171  01E6  084C               	movf	_top_push_state,w
 20172  01E7  00F0               	movwf	i1set_leds_top@x
 20173  01E8  3000               	movlw	0
 20174  01E9  00F2               	movwf	i1set_leds_top@ledState
 20175  01EA  00F3               	movwf	i1set_leds_top@ledState+1
 20176  01EB  31A2  22E3  3180   	fcall	i1_set_leds_top
 20177  01EE                     i1l6980:	
 20178                           
 20179                           ;interrupts.c: 150: }
 20180                           ;interrupts.c: 151: }
 20181                           ;interrupts.c: 152: }
 20182                           ;interrupts.c: 157: if (presetSaveMode == 1) {
 20183  01EE  0020               	movlb	0	; select bank0
 20184  01EF  035F               	decf	_presetSaveMode,w
 20185  01F0  1D03               	btfss	3,2
 20186  01F1  2A1E               	goto	i1l6992
 20187                           
 20188                           ;interrupts.c: 158: if (double_timer >= 250) {
 20189  01F2  0023               	movlb	3	; select bank3
 20190  01F3  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20191  01F4  2A0D               	goto	i1l6988
 20192  01F5  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20193  01F6  1D03               	btfss	3,2
 20194  01F7  2A02               	goto	i1l6984
 20195  01F8  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20196  01F9  1D03               	btfss	3,2
 20197  01FA  2A02               	goto	i1l6984
 20198  01FB  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20199  01FC  1D03               	btfss	3,2
 20200  01FD  2A02               	goto	i1l6984
 20201  01FE  30FA               	movlw	250
 20202  01FF  0220               	subwf	_double_timer^(0+384),w	;volatile
 20203  0200  1C03               	btfss	3,0
 20204  0201  2A0D               	goto	i1l6988
 20205  0202                     i1l6984:	
 20206                           
 20207                           ;interrupts.c: 159: LATBbits.LATB0 = 1;
 20208  0202  0022               	movlb	2	; select bank2
 20209  0203  140D               	bsf	13,0	;volatile
 20210                           
 20211                           ;interrupts.c: 160: double_timer = 0;
 20212  0204  3000               	movlw	0
 20213  0205  0023               	movlb	3	; select bank3
 20214  0206  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20215  0207  3000               	movlw	0
 20216  0208  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20217  0209  3000               	movlw	0
 20218  020A  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20219  020B  3000               	movlw	0
 20220  020C  00A0               	movwf	_double_timer^(0+384)	;volatile
 20221  020D                     i1l6988:	
 20222                           
 20223                           ;interrupts.c: 161: }
 20224                           ;interrupts.c: 162: if (double_timer >= 30) {
 20225  020D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20226  020E  2A1E               	goto	i1l6992
 20227  020F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20228  0210  1D03               	btfss	3,2
 20229  0211  2A1C               	goto	i1l6990
 20230  0212  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20231  0213  1D03               	btfss	3,2
 20232  0214  2A1C               	goto	i1l6990
 20233  0215  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20234  0216  1D03               	btfss	3,2
 20235  0217  2A1C               	goto	i1l6990
 20236  0218  301E               	movlw	30
 20237  0219  0220               	subwf	_double_timer^(0+384),w	;volatile
 20238  021A  1C03               	btfss	3,0
 20239  021B  2A1E               	goto	i1l6992
 20240  021C                     i1l6990:	
 20241                           
 20242                           ;interrupts.c: 163: LATBbits.LATB0 = 0;
 20243  021C  0022               	movlb	2	; select bank2
 20244  021D  100D               	bcf	13,0	;volatile
 20245  021E                     i1l6992:	
 20246                           
 20247                           ;interrupts.c: 164: }
 20248                           ;interrupts.c: 165: }
 20249                           ;interrupts.c: 184: if (mod_timer >= tmpModDelay) {
 20250  021E  0023               	movlb	3	; select bank3
 20251  021F  083C               	movf	_tmpModDelay^(0+384),w
 20252  0220  0020               	movlb	0	; select bank0
 20253  0221  00BA               	movwf	??_isr
 20254  0222  0023               	movlb	3	; select bank3
 20255  0223  083D               	movf	(_tmpModDelay+1)^(0+384),w
 20256  0224  0020               	movlb	0	; select bank0
 20257  0225  00BB               	movwf	??_isr+1
 20258  0226  3000               	movlw	0
 20259  0227  1BBB               	btfsc	??_isr+1,7
 20260  0228  30FF               	movlw	255
 20261  0229  00BC               	movwf	??_isr+2
 20262  022A  00BD               	movwf	??_isr+3
 20263  022B  0023               	movlb	3	; select bank3
 20264  022C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20265  022D  3A80               	xorlw	128
 20266  022E  0020               	movlb	0	; select bank0
 20267  022F  00BE               	movwf	??_isr+4
 20268  0230  083D               	movf	??_isr+3,w
 20269  0231  3A80               	xorlw	128
 20270  0232  023E               	subwf	??_isr+4,w
 20271  0233  0023               	movlb	3	; select bank3
 20272  0234  1D03               	skipz
 20273  0235  2A46               	goto	u700_23
 20274  0236  0020               	movlb	0	; select bank0
 20275  0237  083C               	movf	??_isr+2,w
 20276  0238  0023               	movlb	3	; select bank3
 20277  0239  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20278  023A  1D03               	skipz
 20279  023B  2A46               	goto	u700_23
 20280  023C  0020               	movlb	0	; select bank0
 20281  023D  083B               	movf	??_isr+1,w
 20282  023E  0023               	movlb	3	; select bank3
 20283  023F  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20284  0240  1D03               	skipz
 20285  0241  2A46               	goto	u700_23
 20286  0242  0020               	movlb	0	; select bank0
 20287  0243  083A               	movf	??_isr,w
 20288  0244  0023               	movlb	3	; select bank3
 20289  0245  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20290  0246                     u700_23:	
 20291  0246  1C03               	skipc
 20292  0247  2AB6               	goto	i1l7008
 20293                           
 20294                           ;interrupts.c: 185: mod_timer = 0;
 20295  0248  3000               	movlw	0
 20296  0249  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20297  024A  3000               	movlw	0
 20298  024B  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20299  024C  3000               	movlw	0
 20300  024D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20301  024E  3000               	movlw	0
 20302  024F  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20303                           
 20304                           ;interrupts.c: 187: if (mod_counter >= subDiv) {
 20305  0250  0858               	movf	(_mod_counter+1)^(0+384),w
 20306  0251  3A80               	xorlw	128
 20307  0252  0020               	movlb	0	; select bank0
 20308  0253  00BA               	movwf	??_isr
 20309  0254  3080               	movlw	128
 20310  0255  023A               	subwf	??_isr,w
 20311  0256  1D03               	skipz
 20312  0257  2A5B               	goto	u701_25
 20313  0258  087D               	movf	isr@subDiv,w
 20314  0259  0023               	movlb	3	; select bank3
 20315  025A  0257               	subwf	_mod_counter^(0+384),w
 20316  025B                     u701_25:	
 20317  025B  1C03               	skipc
 20318  025C  2A64               	goto	i1l7000
 20319                           
 20320                           ;interrupts.c: 188: mod_counter = 0;
 20321  025D  0023               	movlb	3	; select bank3
 20322  025E  01D7               	clrf	_mod_counter^(0+384)
 20323  025F  01D8               	clrf	(_mod_counter+1)^(0+384)
 20324                           
 20325                           ;interrupts.c: 189: tmpModDelay = mod_delay_time;
 20326  0260  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20327  0261  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 20328  0262  0859               	movf	_mod_delay_time^(0+384),w
 20329  0263  00BC               	movwf	_tmpModDelay^(0+384)
 20330  0264                     i1l7000:	
 20331                           
 20332                           ;interrupts.c: 193: }
 20333                           ;interrupts.c: 197: mod_value = modArray[mod_counter];
 20334  0264  0023               	movlb	3	; select bank3
 20335  0265  0858               	movf	(_mod_counter+1)^(0+384),w
 20336  0266  0020               	movlb	0	; select bank0
 20337  0267  00BB               	movwf	??_isr+1
 20338  0268  0023               	movlb	3	; select bank3
 20339  0269  0857               	movf	_mod_counter^(0+384),w
 20340  026A  0020               	movlb	0	; select bank0
 20341  026B  00BA               	movwf	??_isr
 20342  026C  35BA               	lslf	??_isr,f
 20343  026D  0DBB               	rlf	??_isr+1,f
 20344  026E  308A               	movlw	138
 20345  026F  00BC               	movwf	??_isr+2
 20346  0270  3023               	movlw	35
 20347  0271  00BD               	movwf	??_isr+3
 20348  0272  083A               	movf	??_isr,w
 20349  0273  073C               	addwf	??_isr+2,w
 20350  0274  0086               	movwf	6
 20351  0275  083B               	movf	??_isr+1,w
 20352  0276  3D3D               	addwfc	??_isr+3,w
 20353  0277  0087               	movwf	7
 20354  0278  3F40               	moviw [0]fsr1
 20355  0279  0024               	movlb	4	; select bank4
 20356  027A  00D3               	movwf	_mod_value^(0+512)
 20357  027B  3F41               	moviw [1]fsr1
 20358  027C  00D4               	movwf	(_mod_value+1)^(0+512)
 20359                           
 20360                           ;interrupts.c: 204: mod_value = modulation(mod_value, adjusted_pot_value);
 20361  027D  0853               	movf	_mod_value^(0+512),w
 20362  027E  0020               	movlb	0	; select bank0
 20363  027F  00AE               	movwf	modulation@x
 20364  0280  0024               	movlb	4	; select bank4
 20365  0281  0854               	movf	(_mod_value+1)^(0+512),w
 20366  0282  0020               	movlb	0	; select bank0
 20367  0283  00AF               	movwf	modulation@x+1
 20368  0284  0D89               	rlf	9,f
 20369  0285  3B89               	subwfb	9,f
 20370  0286  0989               	comf	9,f
 20371  0287  00B0               	movwf	modulation@x+2
 20372  0288  00B1               	movwf	modulation@x+3
 20373  0289  0024               	movlb	4	; select bank4
 20374  028A  0845               	movf	_adjusted_pot_value^(0+512),w
 20375  028B  0020               	movlb	0	; select bank0
 20376  028C  00B2               	movwf	modulation@y
 20377  028D  0024               	movlb	4	; select bank4
 20378  028E  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 20379  028F  0020               	movlb	0	; select bank0
 20380  0290  00B3               	movwf	modulation@y+1
 20381  0291  0D89               	rlf	9,f
 20382  0292  3B89               	subwfb	9,f
 20383  0293  0989               	comf	9,f
 20384  0294  00B4               	movwf	modulation@y+2
 20385  0295  00B5               	movwf	modulation@y+3
 20386  0296  31A2  221D  3180   	fcall	_modulation
 20387  0299  0020               	movlb	0	; select bank0
 20388  029A  082F               	movf	?_modulation+1,w
 20389  029B  0024               	movlb	4	; select bank4
 20390  029C  00D4               	movwf	(_mod_value+1)^(0+512)
 20391  029D  0020               	movlb	0	; select bank0
 20392  029E  082E               	movf	?_modulation,w
 20393  029F  0024               	movlb	4	; select bank4
 20394  02A0  00D3               	movwf	_mod_value^(0+512)
 20395                           
 20396                           ;interrupts.c: 205: CCPR3 = mod_value / 2;
 20397  02A1  3002               	movlw	2
 20398  02A2  00F0               	movwf	i1___awdiv@divisor
 20399  02A3  3000               	movlw	0
 20400  02A4  00F1               	movwf	i1___awdiv@divisor+1
 20401  02A5  0854               	movf	(_mod_value+1)^(0+512),w
 20402  02A6  00F3               	movwf	i1___awdiv@dividend+1
 20403  02A7  0853               	movf	_mod_value^(0+512),w
 20404  02A8  00F2               	movwf	i1___awdiv@dividend
 20405  02A9  31A4  2413  3180   	fcall	i1___awdiv
 20406  02AC  0871               	movf	?i1___awdiv+1,w
 20407  02AD  0026               	movlb	6	; select bank6
 20408  02AE  0092               	movwf	18	;volatile
 20409  02AF  0870               	movf	?i1___awdiv,w
 20410  02B0  0091               	movwf	17	;volatile
 20411                           
 20412                           ;interrupts.c: 206: mod_counter++;
 20413  02B1  3001               	movlw	1
 20414  02B2  0023               	movlb	3	; select bank3
 20415  02B3  07D7               	addwf	_mod_counter^(0+384),f
 20416  02B4  3000               	movlw	0
 20417  02B5  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20418  02B6                     i1l7008:	
 20419                           
 20420                           ;interrupts.c: 208: }
 20421                           ;interrupts.c: 210: if (preset_programmning_on == 1) {
 20422  02B6  0349               	decf	_preset_programmning_on^(0+384),w
 20423  02B7  1D03               	btfss	3,2
 20424  02B8  2AE6               	goto	i1l7020
 20425                           
 20426                           ;interrupts.c: 211: preset_blink++;
 20427  02B9  3001               	movlw	1
 20428  02BA  0020               	movlb	0	; select bank0
 20429  02BB  00BA               	movwf	??_isr
 20430  02BC  083A               	movf	??_isr,w
 20431  02BD  0023               	movlb	3	; select bank3
 20432  02BE  07C8               	addwf	_preset_blink^(0+384),f
 20433                           
 20434                           ;interrupts.c: 213: if (preset_blink >= blink_delay) {
 20435  02BF  0024               	movlb	4	; select bank4
 20436  02C0  0867               	movf	(_blink_delay+1)^(0+512),w
 20437  02C1  3A80               	xorlw	128
 20438  02C2  3C80               	sublw	128
 20439  02C3  1D03               	skipz
 20440  02C4  2AC8               	goto	u703_25
 20441  02C5  0866               	movf	_blink_delay^(0+512),w
 20442  02C6  0023               	movlb	3	; select bank3
 20443  02C7  0248               	subwf	_preset_blink^(0+384),w
 20444  02C8                     u703_25:	
 20445  02C8  1C03               	skipc
 20446  02C9  2AEB               	goto	i1l7024
 20447                           
 20448                           ;interrupts.c: 214: LATBbits.LATB1 = 1;
 20449  02CA  0022               	movlb	2	; select bank2
 20450  02CB  148D               	bsf	13,1	;volatile
 20451                           
 20452                           ;interrupts.c: 215: if (preset_blink > blink_delay*2) {
 20453  02CC  0024               	movlb	4	; select bank4
 20454  02CD  0867               	movf	(_blink_delay+1)^(0+512),w
 20455  02CE  0020               	movlb	0	; select bank0
 20456  02CF  00BB               	movwf	??_isr+1
 20457  02D0  0024               	movlb	4	; select bank4
 20458  02D1  0866               	movf	_blink_delay^(0+512),w
 20459  02D2  0020               	movlb	0	; select bank0
 20460  02D3  00BA               	movwf	??_isr
 20461  02D4  35BA               	lslf	??_isr,f
 20462  02D5  0DBB               	rlf	??_isr+1,f
 20463  02D6  083B               	movf	??_isr+1,w
 20464  02D7  3A80               	xorlw	128
 20465  02D8  00BC               	movwf	??_isr+2
 20466  02D9  3080               	movlw	128
 20467  02DA  023C               	subwf	??_isr+2,w
 20468  02DB  1D03               	skipz
 20469  02DC  2AE1               	goto	u704_25
 20470  02DD  0023               	movlb	3	; select bank3
 20471  02DE  0848               	movf	_preset_blink^(0+384),w
 20472  02DF  0020               	movlb	0	; select bank0
 20473  02E0  023A               	subwf	??_isr,w
 20474  02E1                     u704_25:	
 20475  02E1  1803               	skipnc
 20476  02E2  2AED               	goto	i1l7026
 20477                           
 20478                           ;interrupts.c: 216: preset_blink = 0;
 20479  02E3  0023               	movlb	3	; select bank3
 20480  02E4  01C8               	clrf	_preset_blink^(0+384)
 20481                           
 20482                           ;interrupts.c: 217: }
 20483                           ;interrupts.c: 219: } else {
 20484  02E5  2AED               	goto	i1l7026
 20485  02E6                     i1l7020:	
 20486                           ;interrupts.c: 221: }
 20487                           ;interrupts.c: 223: } else {
 20488                           
 20489                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 20490                           
 20491                           
 20492                           ;interrupts.c: 224: if (preset_blink > 0) {
 20493  02E6  0023               	movlb	3	; select bank3
 20494  02E7  0848               	movf	_preset_blink^(0+384),w
 20495  02E8  1903               	btfsc	3,2
 20496  02E9  2AED               	goto	i1l7026
 20497                           
 20498                           ;interrupts.c: 225: preset_blink = 0;
 20499  02EA  01C8               	clrf	_preset_blink^(0+384)
 20500  02EB                     i1l7024:	
 20501                           
 20502                           ;interrupts.c: 226: LATBbits.LATB1 = 0;
 20503  02EB  0022               	movlb	2	; select bank2
 20504  02EC  108D               	bcf	13,1	;volatile
 20505  02ED                     i1l7026:	
 20506                           
 20507                           ;interrupts.c: 227: }
 20508                           ;interrupts.c: 228: }
 20509                           ;interrupts.c: 232: INTCONbits.TMR0IF = 0;
 20510  02ED  110B               	bcf	11,2	;volatile
 20511  02EE                     i1l137:	
 20512  02EE  0020               	movlb	0	; select bank0
 20513  02EF  083F               	movf	??_isr+5,w
 20514  02F0  00FF               	movwf	127
 20515  02F1  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20516  02F2  0009               	retfie
 20517  02F3                     __end_of_isr:	
 20518                           
 20519                           	psect	text75
 20520  22E3                     __ptext75:	
 20521 ;; *************** function i1_set_leds_top *****************
 20522 ;; Defined at:
 20523 ;;		line 16 in file "LEDs.c"
 20524 ;; Parameters:    Size  Location     Type
 20525 ;;  x               2    0[COMMON] int 
 20526 ;;  ledState        2    2[COMMON] int 
 20527 ;; Auto vars:     Size  Location     Type
 20528 ;;		None
 20529 ;; Return value:  Size  Location     Type
 20530 ;;                  1    wreg      void 
 20531 ;; Registers used:
 20532 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20533 ;; Tracked objects:
 20534 ;;		On entry : 0/0
 20535 ;;		On exit  : 0/0
 20536 ;;		Unchanged: 0/0
 20537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20538 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20542 ;;Total ram usage:        4 bytes
 20543 ;; Hardware stack levels used:    1
 20544 ;; This function calls:
 20545 ;;		Nothing
 20546 ;; This function is called by:
 20547 ;;		_isr
 20548 ;; This function uses a non-reentrant model
 20549 ;;
 20550                           
 20551                           
 20552                           ;psect for function i1_set_leds_top
 20553  22E3                     i1_set_leds_top:	
 20554                           
 20555                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20556                           
 20557                           ;incstack = 0
 20558                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20559  22E3  0027               	movlb	7	; select bank7
 20560  22E4  100C               	bcf	12,0	;volatile
 20561                           
 20562                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20563  22E5  108C               	bcf	12,1	;volatile
 20564                           
 20565                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20566  22E6  110C               	bcf	12,2	;volatile
 20567                           
 20568                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20569  22E7  118C               	bcf	12,3	;volatile
 20570                           
 20571                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20572  22E8  120C               	bcf	12,4	;volatile
 20573                           
 20574                           ;LEDs.c: 22: switch (x) {
 20575  22E9  2B0E               	goto	i1l6836
 20576  22EA                     i1l6824:	
 20577                           ;LEDs.c: 23: case 1:
 20578                           
 20579                           
 20580                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20581  22EA  0C72               	rrf	i1set_leds_top@ledState,w
 20582  22EB  1C03               	skipc
 20583  22EC  100C               	bcf	12,0	;volatile
 20584  22ED  1803               	skipnc
 20585  22EE  140C               	bsf	12,0	;volatile
 20586                           
 20587                           ;LEDs.c: 25: break;
 20588  22EF  0008               	return
 20589  22F0                     i1l6826:	
 20590                           ;LEDs.c: 26: case 2:
 20591                           
 20592                           
 20593                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20594  22F0  0C72               	rrf	i1set_leds_top@ledState,w
 20595  22F1  1C03               	skipc
 20596  22F2  108C               	bcf	12,1	;volatile
 20597  22F3  1803               	skipnc
 20598  22F4  148C               	bsf	12,1	;volatile
 20599                           
 20600                           ;LEDs.c: 28: break;
 20601  22F5  0008               	return
 20602  22F6                     i1l6828:	
 20603                           ;LEDs.c: 29: case 3:
 20604                           
 20605                           
 20606                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20607  22F6  0C72               	rrf	i1set_leds_top@ledState,w
 20608  22F7  1C03               	skipc
 20609  22F8  110C               	bcf	12,2	;volatile
 20610  22F9  1803               	skipnc
 20611  22FA  150C               	bsf	12,2	;volatile
 20612                           
 20613                           ;LEDs.c: 31: break;
 20614  22FB  0008               	return
 20615  22FC                     i1l6830:	
 20616                           ;LEDs.c: 32: case 4:
 20617                           
 20618                           
 20619                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20620  22FC  0C72               	rrf	i1set_leds_top@ledState,w
 20621  22FD  1C03               	skipc
 20622  22FE  118C               	bcf	12,3	;volatile
 20623  22FF  1803               	skipnc
 20624  2300  158C               	bsf	12,3	;volatile
 20625                           
 20626                           ;LEDs.c: 34: break;
 20627  2301  0008               	return
 20628  2302                     i1l6832:	
 20629                           ;LEDs.c: 35: case 5:
 20630                           
 20631                           
 20632                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20633  2302  0C72               	rrf	i1set_leds_top@ledState,w
 20634  2303  1C03               	skipc
 20635  2304  120C               	bcf	12,4	;volatile
 20636  2305  1803               	skipnc
 20637  2306  160C               	bsf	12,4	;volatile
 20638                           
 20639                           ;LEDs.c: 39: break;
 20640                           
 20641                           ;LEDs.c: 38: case 6:
 20642                           
 20643                           ;LEDs.c: 37: break;
 20644  2307  0008               	return
 20645  2308                     i1l810:	
 20646                           ;LEDs.c: 40: case 100:
 20647                           
 20648                           
 20649                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20650  2308  140C               	bsf	12,0	;volatile
 20651                           
 20652                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20653  2309  148C               	bsf	12,1	;volatile
 20654                           
 20655                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20656  230A  150C               	bsf	12,2	;volatile
 20657                           
 20658                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20659  230B  158C               	bsf	12,3	;volatile
 20660                           
 20661                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20662  230C  160C               	bsf	12,4	;volatile
 20663                           
 20664                           ;LEDs.c: 47: }
 20665                           
 20666                           ;LEDs.c: 46: break;
 20667  230D  0008               	return
 20668  230E                     i1l6836:	
 20669                           
 20670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20671                           ; Switch size 1, requested type "space"
 20672                           ; Number of cases is 1, Range of values is 0 to 0
 20673                           ; switch strategies available:
 20674                           ; Name         Instructions Cycles
 20675                           ; simple_byte            4     3 (average)
 20676                           ; direct_byte            8     6 (fixed)
 20677                           ; jumptable            260     6 (fixed)
 20678                           ;	Chosen strategy is simple_byte
 20679  230E  0871               	movf	i1set_leds_top@x+1,w
 20680  230F  3A00               	xorlw	0	; case 0
 20681  2310  1903               	skipnz
 20682  2311  2B13               	goto	i1l9856
 20683  2312  2B2A               	goto	i1l811
 20684  2313                     i1l9856:	
 20685                           
 20686                           ; Switch size 1, requested type "space"
 20687                           ; Number of cases is 7, Range of values is 1 to 100
 20688                           ; switch strategies available:
 20689                           ; Name         Instructions Cycles
 20690                           ; simple_byte           22    12 (average)
 20691                           ; direct_byte          209     9 (fixed)
 20692                           ; jumptable            263     9 (fixed)
 20693                           ;	Chosen strategy is simple_byte
 20694  2313  0870               	movf	i1set_leds_top@x,w
 20695  2314  3A01               	xorlw	1	; case 1
 20696  2315  1903               	skipnz
 20697  2316  2AEA               	goto	i1l6824
 20698  2317  3A03               	xorlw	3	; case 2
 20699  2318  1903               	skipnz
 20700  2319  2AF0               	goto	i1l6826
 20701  231A  3A01               	xorlw	1	; case 3
 20702  231B  1903               	skipnz
 20703  231C  2AF6               	goto	i1l6828
 20704  231D  3A07               	xorlw	7	; case 4
 20705  231E  1903               	skipnz
 20706  231F  2AFC               	goto	i1l6830
 20707  2320  3A01               	xorlw	1	; case 5
 20708  2321  1903               	skipnz
 20709  2322  2B02               	goto	i1l6832
 20710  2323  3A03               	xorlw	3	; case 6
 20711  2324  1903               	skipnz
 20712  2325  2B2A               	goto	i1l811
 20713  2326  3A62               	xorlw	98	; case 100
 20714  2327  1903               	skipnz
 20715  2328  2B08               	goto	i1l810
 20716  2329  2B2A               	goto	i1l811
 20717  232A                     i1l811:	
 20718  232A  0008               	return
 20719  232B                     __end_ofi1_set_leds_top:	
 20720                           
 20721                           	psect	text76
 20722  2EA9                     __ptext76:	
 20723 ;; *************** function i1_getModulationSubdivision *****************
 20724 ;; Defined at:
 20725 ;;		line 26 in file "modulation.c"
 20726 ;; Parameters:    Size  Location     Type
 20727 ;;		None
 20728 ;; Auto vars:     Size  Location     Type
 20729 ;;		None
 20730 ;; Return value:  Size  Location     Type
 20731 ;;                  2    0[COMMON] int 
 20732 ;; Registers used:
 20733 ;;		wreg, status,2, status,0
 20734 ;; Tracked objects:
 20735 ;;		On entry : 0/0
 20736 ;;		On exit  : 0/0
 20737 ;;		Unchanged: 0/0
 20738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20743 ;;Total ram usage:        2 bytes
 20744 ;; Hardware stack levels used:    1
 20745 ;; This function calls:
 20746 ;;		Nothing
 20747 ;; This function is called by:
 20748 ;;		_isr
 20749 ;; This function uses a non-reentrant model
 20750 ;;
 20751                           
 20752                           
 20753                           ;psect for function i1_getModulationSubdivision
 20754  2EA9                     i1_getModulationSubdivision:	
 20755                           
 20756                           ;modulation.c: 27: if (delay_time >= 2400) {
 20757                           
 20758                           ;incstack = 0
 20759                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20760  2EA9  0020               	movlb	0	; select bank0
 20761  2EAA  1BC7               	btfsc	_delay_time+3,7	;volatile
 20762  2EAB  2EBD               	goto	i1l6850
 20763  2EAC  0847               	movf	_delay_time+3,w	;volatile
 20764  2EAD  1D03               	btfss	3,2
 20765  2EAE  2EB8               	goto	i1l6844
 20766  2EAF  0846               	movf	_delay_time+2,w	;volatile
 20767  2EB0  1D03               	btfss	3,2
 20768  2EB1  2EB8               	goto	i1l6844
 20769  2EB2  3060               	movlw	96
 20770  2EB3  0244               	subwf	_delay_time,w	;volatile
 20771  2EB4  3009               	movlw	9
 20772  2EB5  3B45               	subwfb	_delay_time+1,w	;volatile
 20773  2EB6  1C03               	btfss	3,0
 20774  2EB7  2EBD               	goto	i1l6850
 20775  2EB8                     i1l6844:	
 20776                           
 20777                           ;modulation.c: 28: return 120;
 20778  2EB8  3078               	movlw	120
 20779  2EB9  00F0               	movwf	?i1_getModulationSubdivision
 20780  2EBA  3000               	movlw	0
 20781  2EBB  00F1               	movwf	?i1_getModulationSubdivision+1
 20782                           
 20783                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20784  2EBC  0008               	return
 20785  2EBD                     i1l6850:	
 20786  2EBD  1BC7               	btfsc	_delay_time+3,7	;volatile
 20787  2EBE  2ED0               	goto	i1l6858
 20788  2EBF  0847               	movf	_delay_time+3,w	;volatile
 20789  2EC0  1D03               	btfss	3,2
 20790  2EC1  2ECB               	goto	i1l6852
 20791  2EC2  0846               	movf	_delay_time+2,w	;volatile
 20792  2EC3  1D03               	btfss	3,2
 20793  2EC4  2ECB               	goto	i1l6852
 20794  2EC5  3058               	movlw	88
 20795  2EC6  0244               	subwf	_delay_time,w	;volatile
 20796  2EC7  3002               	movlw	2
 20797  2EC8  3B45               	subwfb	_delay_time+1,w	;volatile
 20798  2EC9  1C03               	btfss	3,0
 20799  2ECA  2ED0               	goto	i1l6858
 20800  2ECB                     i1l6852:	
 20801                           
 20802                           ;modulation.c: 30: return 60;
 20803  2ECB  303C               	movlw	60
 20804  2ECC  00F0               	movwf	?i1_getModulationSubdivision
 20805  2ECD  3000               	movlw	0
 20806  2ECE  00F1               	movwf	?i1_getModulationSubdivision+1
 20807                           
 20808                           ;modulation.c: 31: } else {
 20809  2ECF  0008               	return
 20810  2ED0                     i1l6858:	
 20811                           
 20812                           ;modulation.c: 32: return 30;
 20813  2ED0  301E               	movlw	30
 20814  2ED1  00F0               	movwf	?i1_getModulationSubdivision
 20815  2ED2  3000               	movlw	0
 20816  2ED3  00F1               	movwf	?i1_getModulationSubdivision+1
 20817  2ED4  0008               	return
 20818  2ED5                     __end_ofi1_getModulationSubdivision:	
 20819                           
 20820                           	psect	text77
 20821  2413                     __ptext77:	
 20822 ;; *************** function i1___awdiv *****************
 20823 ;; Defined at:
 20824 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20825 ;; Parameters:    Size  Location     Type
 20826 ;;  divisor         2    0[COMMON] int 
 20827 ;;  dividend        2    2[COMMON] int 
 20828 ;; Auto vars:     Size  Location     Type
 20829 ;;  __awdiv         2    7[COMMON] int 
 20830 ;;  __awdiv         1    6[COMMON] unsigned char 
 20831 ;;  __awdiv         1    5[COMMON] unsigned char 
 20832 ;; Return value:  Size  Location     Type
 20833 ;;                  2    0[COMMON] int 
 20834 ;; Registers used:
 20835 ;;		wreg, status,2, status,0
 20836 ;; Tracked objects:
 20837 ;;		On entry : 0/0
 20838 ;;		On exit  : 0/0
 20839 ;;		Unchanged: 0/0
 20840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20842 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20844 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20845 ;;Total ram usage:        9 bytes
 20846 ;; Hardware stack levels used:    1
 20847 ;; This function calls:
 20848 ;;		Nothing
 20849 ;; This function is called by:
 20850 ;;		_isr
 20851 ;; This function uses a non-reentrant model
 20852 ;;
 20853                           
 20854                           
 20855                           ;psect for function i1___awdiv
 20856  2413                     i1___awdiv:	
 20857                           
 20858                           ;incstack = 0
 20859                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20860  2413  01F6               	clrf	i1___awdiv@sign
 20861  2414  1FF1               	btfss	i1___awdiv@divisor+1,7
 20862  2415  2C1D               	goto	i1l6870
 20863  2416  09F0               	comf	i1___awdiv@divisor,f
 20864  2417  09F1               	comf	i1___awdiv@divisor+1,f
 20865  2418  0AF0               	incf	i1___awdiv@divisor,f
 20866  2419  1903               	skipnz
 20867  241A  0AF1               	incf	i1___awdiv@divisor+1,f
 20868  241B  01F6               	clrf	i1___awdiv@sign
 20869  241C  0AF6               	incf	i1___awdiv@sign,f
 20870  241D                     i1l6870:	
 20871  241D  1FF3               	btfss	i1___awdiv@dividend+1,7
 20872  241E  2C28               	goto	i1l6876
 20873  241F  09F2               	comf	i1___awdiv@dividend,f
 20874  2420  09F3               	comf	i1___awdiv@dividend+1,f
 20875  2421  0AF2               	incf	i1___awdiv@dividend,f
 20876  2422  1903               	skipnz
 20877  2423  0AF3               	incf	i1___awdiv@dividend+1,f
 20878  2424  3001               	movlw	1
 20879  2425  00F4               	movwf	??i1___awdiv
 20880  2426  0874               	movf	??i1___awdiv,w
 20881  2427  06F6               	xorwf	i1___awdiv@sign,f
 20882  2428                     i1l6876:	
 20883  2428  01F7               	clrf	i1___awdiv@quotient
 20884  2429  01F8               	clrf	i1___awdiv@quotient+1
 20885  242A  0870               	movf	i1___awdiv@divisor,w
 20886  242B  0471               	iorwf	i1___awdiv@divisor+1,w
 20887  242C  1903               	btfsc	3,2
 20888  242D  2C57               	goto	i1l6898
 20889  242E  01F5               	clrf	i1___awdiv@counter
 20890  242F  0AF5               	incf	i1___awdiv@counter,f
 20891  2430                     i1l6886:	
 20892  2430  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20893  2431  2C3C               	goto	i1l6888
 20894  2432  3001               	movlw	1
 20895  2433                     u668_25:	
 20896  2433  35F0               	lslf	i1___awdiv@divisor,f
 20897  2434  0DF1               	rlf	i1___awdiv@divisor+1,f
 20898  2435  0B89               	decfsz	9,f
 20899  2436  2C33               	goto	u668_25
 20900  2437  3001               	movlw	1
 20901  2438  00F4               	movwf	??i1___awdiv
 20902  2439  0874               	movf	??i1___awdiv,w
 20903  243A  07F5               	addwf	i1___awdiv@counter,f
 20904  243B  2C30               	goto	i1l6886
 20905  243C                     i1l6888:	
 20906  243C  3001               	movlw	1
 20907  243D                     u670_25:	
 20908  243D  35F7               	lslf	i1___awdiv@quotient,f
 20909  243E  0DF8               	rlf	i1___awdiv@quotient+1,f
 20910  243F  0B89               	decfsz	9,f
 20911  2440  2C3D               	goto	u670_25
 20912  2441  0871               	movf	i1___awdiv@divisor+1,w
 20913  2442  0273               	subwf	i1___awdiv@dividend+1,w
 20914  2443  1D03               	skipz
 20915  2444  2C47               	goto	u671_25
 20916  2445  0870               	movf	i1___awdiv@divisor,w
 20917  2446  0272               	subwf	i1___awdiv@dividend,w
 20918  2447                     u671_25:	
 20919  2447  1C03               	skipc
 20920  2448  2C4E               	goto	i1l6894
 20921  2449  0870               	movf	i1___awdiv@divisor,w
 20922  244A  02F2               	subwf	i1___awdiv@dividend,f
 20923  244B  0871               	movf	i1___awdiv@divisor+1,w
 20924  244C  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20925  244D  1477               	bsf	i1___awdiv@quotient,0
 20926  244E                     i1l6894:	
 20927  244E  3001               	movlw	1
 20928  244F                     u672_25:	
 20929  244F  36F1               	lsrf	i1___awdiv@divisor+1,f
 20930  2450  0CF0               	rrf	i1___awdiv@divisor,f
 20931  2451  0B89               	decfsz	9,f
 20932  2452  2C4F               	goto	u672_25
 20933  2453  3001               	movlw	1
 20934  2454  02F5               	subwf	i1___awdiv@counter,f
 20935  2455  1D03               	btfss	3,2
 20936  2456  2C3C               	goto	i1l6888
 20937  2457                     i1l6898:	
 20938  2457  0876               	movf	i1___awdiv@sign,w
 20939  2458  1903               	btfsc	3,2
 20940  2459  2C5F               	goto	i1l6902
 20941  245A  09F7               	comf	i1___awdiv@quotient,f
 20942  245B  09F8               	comf	i1___awdiv@quotient+1,f
 20943  245C  0AF7               	incf	i1___awdiv@quotient,f
 20944  245D  1903               	skipnz
 20945  245E  0AF8               	incf	i1___awdiv@quotient+1,f
 20946  245F                     i1l6902:	
 20947  245F  0878               	movf	i1___awdiv@quotient+1,w
 20948  2460  00F1               	movwf	?i1___awdiv+1
 20949  2461  0877               	movf	i1___awdiv@quotient,w
 20950  2462  00F0               	movwf	?i1___awdiv
 20951  2463  0008               	return
 20952  2464                     __end_ofi1___awdiv:	
 20953                           
 20954                           	psect	text78
 20955  221D                     __ptext78:	
 20956 ;; *************** function _modulation *****************
 20957 ;; Defined at:
 20958 ;;		line 222 in file "user.c"
 20959 ;; Parameters:    Size  Location     Type
 20960 ;;  x               4   14[BANK0 ] long 
 20961 ;;  y               4   18[BANK0 ] long 
 20962 ;; Auto vars:     Size  Location     Type
 20963 ;;		None
 20964 ;; Return value:  Size  Location     Type
 20965 ;;                  4   14[BANK0 ] long 
 20966 ;; Registers used:
 20967 ;;		wreg, status,2, status,0, pclath, cstack
 20968 ;; Tracked objects:
 20969 ;;		On entry : 0/0
 20970 ;;		On exit  : 0/0
 20971 ;;		Unchanged: 0/0
 20972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20973 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20975 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20976 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20977 ;;Total ram usage:       12 bytes
 20978 ;; Hardware stack levels used:    1
 20979 ;; Hardware stack levels required when called:    1
 20980 ;; This function calls:
 20981 ;;		i1___aldiv
 20982 ;;		i1___lmul
 20983 ;; This function is called by:
 20984 ;;		_isr
 20985 ;; This function uses a non-reentrant model
 20986 ;;
 20987                           
 20988                           
 20989                           ;psect for function _modulation
 20990  221D                     _modulation:	
 20991                           
 20992                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20993                           
 20994                           ;incstack = 0
 20995                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20996  221D  3000               	movlw	0
 20997  221E  0020               	movlb	0	; select bank0
 20998  221F  00A3               	movwf	i1___aldiv@divisor+3
 20999  2220  3000               	movlw	0
 21000  2221  00A2               	movwf	i1___aldiv@divisor+2
 21001  2222  3003               	movlw	3
 21002  2223  00A1               	movwf	i1___aldiv@divisor+1
 21003  2224  30E8               	movlw	232
 21004  2225  00A0               	movwf	i1___aldiv@divisor
 21005  2226  300C               	movlw	12
 21006  2227  00B6               	movwf	??_modulation
 21007  2228  30F2               	movlw	242
 21008  2229  00B7               	movwf	??_modulation+1
 21009  222A  3001               	movlw	1
 21010  222B  00B8               	movwf	??_modulation+2
 21011  222C  3000               	movlw	0
 21012  222D  00B9               	movwf	??_modulation+3
 21013  222E  0835               	movf	modulation@y+3,w
 21014  222F  00F3               	movwf	i1___lmul@multiplier+3
 21015  2230  0834               	movf	modulation@y+2,w
 21016  2231  00F2               	movwf	i1___lmul@multiplier+2
 21017  2232  0833               	movf	modulation@y+1,w
 21018  2233  00F1               	movwf	i1___lmul@multiplier+1
 21019  2234  0832               	movf	modulation@y,w
 21020  2235  00F0               	movwf	i1___lmul@multiplier
 21021  2236  0831               	movf	modulation@x+3,w
 21022  2237  00F7               	movwf	i1___lmul@multiplicand+3
 21023  2238  0830               	movf	modulation@x+2,w
 21024  2239  00F6               	movwf	i1___lmul@multiplicand+2
 21025  223A  082F               	movf	modulation@x+1,w
 21026  223B  00F5               	movwf	i1___lmul@multiplicand+1
 21027  223C  082E               	movf	modulation@x,w
 21028  223D  00F4               	movwf	i1___lmul@multiplicand
 21029  223E  31AF  2703  31A2   	fcall	i1___lmul
 21030  2241  0870               	movf	?i1___lmul,w
 21031  2242  0020               	movlb	0	; select bank0
 21032  2243  07B6               	addwf	??_modulation,f
 21033  2244  0871               	movf	?i1___lmul+1,w
 21034  2245  3DB7               	addwfc	??_modulation+1,f
 21035  2246  0872               	movf	?i1___lmul+2,w
 21036  2247  3DB8               	addwfc	??_modulation+2,f
 21037  2248  0873               	movf	?i1___lmul+3,w
 21038  2249  3DB9               	addwfc	??_modulation+3,f
 21039  224A  0839               	movf	??_modulation+3,w
 21040  224B  00A7               	movwf	i1___aldiv@dividend+3
 21041  224C  0838               	movf	??_modulation+2,w
 21042  224D  00A6               	movwf	i1___aldiv@dividend+2
 21043  224E  0837               	movf	??_modulation+1,w
 21044  224F  00A5               	movwf	i1___aldiv@dividend+1
 21045  2250  0836               	movf	??_modulation,w
 21046  2251  00A4               	movwf	i1___aldiv@dividend
 21047  2252  3198  2026         	fcall	i1___aldiv
 21048  2254  0020               	movlb	0	; select bank0
 21049  2255  0823               	movf	?i1___aldiv+3,w
 21050  2256  00B1               	movwf	?_modulation+3
 21051  2257  0822               	movf	?i1___aldiv+2,w
 21052  2258  00B0               	movwf	?_modulation+2
 21053  2259  0821               	movf	?i1___aldiv+1,w
 21054  225A  00AF               	movwf	?_modulation+1
 21055  225B  0820               	movf	?i1___aldiv,w
 21056  225C  00AE               	movwf	?_modulation
 21057  225D  0008               	return
 21058  225E                     __end_of_modulation:	
 21059                           
 21060                           	psect	text79
 21061  2F03                     __ptext79:	
 21062 ;; *************** function i1___lmul *****************
 21063 ;; Defined at:
 21064 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 21065 ;; Parameters:    Size  Location     Type
 21066 ;;  multiplier      4    0[COMMON] unsigned long 
 21067 ;;  multiplicand    4    4[COMMON] unsigned long 
 21068 ;; Auto vars:     Size  Location     Type
 21069 ;;  __lmul          4    8[COMMON] unsigned long 
 21070 ;; Return value:  Size  Location     Type
 21071 ;;                  4    0[COMMON] unsigned long 
 21072 ;; Registers used:
 21073 ;;		wreg, status,2, status,0
 21074 ;; Tracked objects:
 21075 ;;		On entry : 0/0
 21076 ;;		On exit  : 0/0
 21077 ;;		Unchanged: 0/0
 21078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21079 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21080 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21082 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21083 ;;Total ram usage:       12 bytes
 21084 ;; Hardware stack levels used:    1
 21085 ;; This function calls:
 21086 ;;		Nothing
 21087 ;; This function is called by:
 21088 ;;		_modulation
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           
 21093                           ;psect for function i1___lmul
 21094  2F03                     i1___lmul:	
 21095                           
 21096                           ;incstack = 0
 21097                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 21098  2F03  3000               	movlw	0
 21099  2F04  00FB               	movwf	i1___lmul@product+3
 21100  2F05  3000               	movlw	0
 21101  2F06  00FA               	movwf	i1___lmul@product+2
 21102  2F07  3000               	movlw	0
 21103  2F08  00F9               	movwf	i1___lmul@product+1
 21104  2F09  3000               	movlw	0
 21105  2F0A  00F8               	movwf	i1___lmul@product
 21106  2F0B                     i1l6128:	
 21107  2F0B  1C70               	btfss	i1___lmul@multiplier,0
 21108  2F0C  2F15               	goto	i1l6132
 21109  2F0D  0874               	movf	i1___lmul@multiplicand,w
 21110  2F0E  07F8               	addwf	i1___lmul@product,f
 21111  2F0F  0875               	movf	i1___lmul@multiplicand+1,w
 21112  2F10  3DF9               	addwfc	i1___lmul@product+1,f
 21113  2F11  0876               	movf	i1___lmul@multiplicand+2,w
 21114  2F12  3DFA               	addwfc	i1___lmul@product+2,f
 21115  2F13  0877               	movf	i1___lmul@multiplicand+3,w
 21116  2F14  3DFB               	addwfc	i1___lmul@product+3,f
 21117  2F15                     i1l6132:	
 21118  2F15  3001               	movlw	1
 21119  2F16                     u544_25:	
 21120  2F16  35F4               	lslf	i1___lmul@multiplicand,f
 21121  2F17  0DF5               	rlf	i1___lmul@multiplicand+1,f
 21122  2F18  0DF6               	rlf	i1___lmul@multiplicand+2,f
 21123  2F19  0DF7               	rlf	i1___lmul@multiplicand+3,f
 21124  2F1A  0B89               	decfsz	9,f
 21125  2F1B  2F16               	goto	u544_25
 21126  2F1C  3001               	movlw	1
 21127  2F1D                     u545_25:	
 21128  2F1D  36F3               	lsrf	i1___lmul@multiplier+3,f
 21129  2F1E  0CF2               	rrf	i1___lmul@multiplier+2,f
 21130  2F1F  0CF1               	rrf	i1___lmul@multiplier+1,f
 21131  2F20  0CF0               	rrf	i1___lmul@multiplier,f
 21132  2F21  0B89               	decfsz	9,f
 21133  2F22  2F1D               	goto	u545_25
 21134  2F23  0873               	movf	i1___lmul@multiplier+3,w
 21135  2F24  0472               	iorwf	i1___lmul@multiplier+2,w
 21136  2F25  0471               	iorwf	i1___lmul@multiplier+1,w
 21137  2F26  0470               	iorwf	i1___lmul@multiplier,w
 21138  2F27  1D03               	skipz
 21139  2F28  2F0B               	goto	i1l6128
 21140  2F29  087B               	movf	i1___lmul@product+3,w
 21141  2F2A  00F3               	movwf	?i1___lmul+3
 21142  2F2B  087A               	movf	i1___lmul@product+2,w
 21143  2F2C  00F2               	movwf	?i1___lmul+2
 21144  2F2D  0879               	movf	i1___lmul@product+1,w
 21145  2F2E  00F1               	movwf	?i1___lmul+1
 21146  2F2F  0878               	movf	i1___lmul@product,w
 21147  2F30  00F0               	movwf	?i1___lmul
 21148  2F31  0008               	return
 21149  2F32                     __end_ofi1___lmul:	
 21150                           
 21151                           	psect	text80
 21152  1826                     __ptext80:	
 21153 ;; *************** function i1___aldiv *****************
 21154 ;; Defined at:
 21155 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 21156 ;; Parameters:    Size  Location     Type
 21157 ;;  divisor         4    0[BANK0 ] long 
 21158 ;;  dividend        4    4[BANK0 ] long 
 21159 ;; Auto vars:     Size  Location     Type
 21160 ;;  __aldiv         4   10[BANK0 ] long 
 21161 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21162 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21163 ;; Return value:  Size  Location     Type
 21164 ;;                  4    0[BANK0 ] long 
 21165 ;; Registers used:
 21166 ;;		wreg, status,2, status,0
 21167 ;; Tracked objects:
 21168 ;;		On entry : 0/0
 21169 ;;		On exit  : 0/0
 21170 ;;		Unchanged: 0/0
 21171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21172 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21173 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21174 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21175 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21176 ;;Total ram usage:       15 bytes
 21177 ;; Hardware stack levels used:    1
 21178 ;; This function calls:
 21179 ;;		Nothing
 21180 ;; This function is called by:
 21181 ;;		_modulation
 21182 ;; This function uses a non-reentrant model
 21183 ;;
 21184                           
 21185                           
 21186                           ;psect for function i1___aldiv
 21187  1826                     i1___aldiv:	
 21188                           
 21189                           ;incstack = 0
 21190                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21191  1826  0020               	movlb	0	; select bank0
 21192  1827  01A9               	clrf	i1___aldiv@sign
 21193  1828  1FA3               	btfss	i1___aldiv@divisor+3,7
 21194  1829  2837               	goto	i1l2045
 21195  182A  09A0               	comf	i1___aldiv@divisor,f
 21196  182B  09A1               	comf	i1___aldiv@divisor+1,f
 21197  182C  09A2               	comf	i1___aldiv@divisor+2,f
 21198  182D  09A3               	comf	i1___aldiv@divisor+3,f
 21199  182E  0AA0               	incf	i1___aldiv@divisor,f
 21200  182F  1903               	skipnz
 21201  1830  0AA1               	incf	i1___aldiv@divisor+1,f
 21202  1831  1903               	skipnz
 21203  1832  0AA2               	incf	i1___aldiv@divisor+2,f
 21204  1833  1903               	skipnz
 21205  1834  0AA3               	incf	i1___aldiv@divisor+3,f
 21206  1835  01A9               	clrf	i1___aldiv@sign
 21207  1836  0AA9               	incf	i1___aldiv@sign,f
 21208  1837                     i1l2045:	
 21209  1837  1FA7               	btfss	i1___aldiv@dividend+3,7
 21210  1838  2848               	goto	i1l6150
 21211  1839  09A4               	comf	i1___aldiv@dividend,f
 21212  183A  09A5               	comf	i1___aldiv@dividend+1,f
 21213  183B  09A6               	comf	i1___aldiv@dividend+2,f
 21214  183C  09A7               	comf	i1___aldiv@dividend+3,f
 21215  183D  0AA4               	incf	i1___aldiv@dividend,f
 21216  183E  1903               	skipnz
 21217  183F  0AA5               	incf	i1___aldiv@dividend+1,f
 21218  1840  1903               	skipnz
 21219  1841  0AA6               	incf	i1___aldiv@dividend+2,f
 21220  1842  1903               	skipnz
 21221  1843  0AA7               	incf	i1___aldiv@dividend+3,f
 21222  1844  3001               	movlw	1
 21223  1845  00FC               	movwf	??i1___aldiv
 21224  1846  087C               	movf	??i1___aldiv,w
 21225  1847  06A9               	xorwf	i1___aldiv@sign,f
 21226  1848                     i1l6150:	
 21227  1848  3000               	movlw	0
 21228  1849  00AD               	movwf	i1___aldiv@quotient+3
 21229  184A  3000               	movlw	0
 21230  184B  00AC               	movwf	i1___aldiv@quotient+2
 21231  184C  3000               	movlw	0
 21232  184D  00AB               	movwf	i1___aldiv@quotient+1
 21233  184E  3000               	movlw	0
 21234  184F  00AA               	movwf	i1___aldiv@quotient
 21235  1850  0823               	movf	i1___aldiv@divisor+3,w
 21236  1851  0422               	iorwf	i1___aldiv@divisor+2,w
 21237  1852  0421               	iorwf	i1___aldiv@divisor+1,w
 21238  1853  0420               	iorwf	i1___aldiv@divisor,w
 21239  1854  1903               	skipnz
 21240  1855  2891               	goto	i1l6172
 21241  1856  01A8               	clrf	i1___aldiv@counter
 21242  1857  0AA8               	incf	i1___aldiv@counter,f
 21243  1858                     i1l6158:	
 21244  1858  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21245  1859  2866               	goto	i1l6160
 21246  185A  3001               	movlw	1
 21247  185B                     u550_25:	
 21248  185B  35A0               	lslf	i1___aldiv@divisor,f
 21249  185C  0DA1               	rlf	i1___aldiv@divisor+1,f
 21250  185D  0DA2               	rlf	i1___aldiv@divisor+2,f
 21251  185E  0DA3               	rlf	i1___aldiv@divisor+3,f
 21252  185F  0B89               	decfsz	9,f
 21253  1860  285B               	goto	u550_25
 21254  1861  3001               	movlw	1
 21255  1862  00FC               	movwf	??i1___aldiv
 21256  1863  087C               	movf	??i1___aldiv,w
 21257  1864  07A8               	addwf	i1___aldiv@counter,f
 21258  1865  2858               	goto	i1l6158
 21259  1866                     i1l6160:	
 21260  1866  3001               	movlw	1
 21261  1867                     u552_25:	
 21262  1867  35AA               	lslf	i1___aldiv@quotient,f
 21263  1868  0DAB               	rlf	i1___aldiv@quotient+1,f
 21264  1869  0DAC               	rlf	i1___aldiv@quotient+2,f
 21265  186A  0DAD               	rlf	i1___aldiv@quotient+3,f
 21266  186B  0B89               	decfsz	9,f
 21267  186C  2867               	goto	u552_25
 21268  186D  0823               	movf	i1___aldiv@divisor+3,w
 21269  186E  0227               	subwf	i1___aldiv@dividend+3,w
 21270  186F  1D03               	skipz
 21271  1870  287B               	goto	u553_25
 21272  1871  0822               	movf	i1___aldiv@divisor+2,w
 21273  1872  0226               	subwf	i1___aldiv@dividend+2,w
 21274  1873  1D03               	skipz
 21275  1874  287B               	goto	u553_25
 21276  1875  0821               	movf	i1___aldiv@divisor+1,w
 21277  1876  0225               	subwf	i1___aldiv@dividend+1,w
 21278  1877  1D03               	skipz
 21279  1878  287B               	goto	u553_25
 21280  1879  0820               	movf	i1___aldiv@divisor,w
 21281  187A  0224               	subwf	i1___aldiv@dividend,w
 21282  187B                     u553_25:	
 21283  187B  1C03               	skipc
 21284  187C  2886               	goto	i1l6168
 21285  187D  0820               	movf	i1___aldiv@divisor,w
 21286  187E  02A4               	subwf	i1___aldiv@dividend,f
 21287  187F  0821               	movf	i1___aldiv@divisor+1,w
 21288  1880  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21289  1881  0822               	movf	i1___aldiv@divisor+2,w
 21290  1882  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21291  1883  0823               	movf	i1___aldiv@divisor+3,w
 21292  1884  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21293  1885  142A               	bsf	i1___aldiv@quotient,0
 21294  1886                     i1l6168:	
 21295  1886  3001               	movlw	1
 21296  1887                     u554_25:	
 21297  1887  36A3               	lsrf	i1___aldiv@divisor+3,f
 21298  1888  0CA2               	rrf	i1___aldiv@divisor+2,f
 21299  1889  0CA1               	rrf	i1___aldiv@divisor+1,f
 21300  188A  0CA0               	rrf	i1___aldiv@divisor,f
 21301  188B  0B89               	decfsz	9,f
 21302  188C  2887               	goto	u554_25
 21303  188D  3001               	movlw	1
 21304  188E  02A8               	subwf	i1___aldiv@counter,f
 21305  188F  1D03               	btfss	3,2
 21306  1890  2866               	goto	i1l6160
 21307  1891                     i1l6172:	
 21308  1891  0829               	movf	i1___aldiv@sign,w
 21309  1892  1903               	btfsc	3,2
 21310  1893  289F               	goto	i1l6176
 21311  1894  09AA               	comf	i1___aldiv@quotient,f
 21312  1895  09AB               	comf	i1___aldiv@quotient+1,f
 21313  1896  09AC               	comf	i1___aldiv@quotient+2,f
 21314  1897  09AD               	comf	i1___aldiv@quotient+3,f
 21315  1898  0AAA               	incf	i1___aldiv@quotient,f
 21316  1899  1903               	skipnz
 21317  189A  0AAB               	incf	i1___aldiv@quotient+1,f
 21318  189B  1903               	skipnz
 21319  189C  0AAC               	incf	i1___aldiv@quotient+2,f
 21320  189D  1903               	skipnz
 21321  189E  0AAD               	incf	i1___aldiv@quotient+3,f
 21322  189F                     i1l6176:	
 21323  189F  082D               	movf	i1___aldiv@quotient+3,w
 21324  18A0  00A3               	movwf	?i1___aldiv+3
 21325  18A1  082C               	movf	i1___aldiv@quotient+2,w
 21326  18A2  00A2               	movwf	?i1___aldiv+2
 21327  18A3  082B               	movf	i1___aldiv@quotient+1,w
 21328  18A4  00A1               	movwf	?i1___aldiv+1
 21329  18A5  082A               	movf	i1___aldiv@quotient,w
 21330  18A6  00A0               	movwf	?i1___aldiv
 21331  18A7  0008               	return
 21332  18A8                     __end_ofi1___aldiv:	
 21333  007E                     btemp	set	126	;btemp
 21334  007E                     int$flags	set	126
 21335  007E                     wtemp	set	126
 21336  007E                     wtemp0	set	126
 21337  0080                     wtemp1	set	128
 21338  0082                     wtemp2	set	130
 21339  0084                     wtemp3	set	132
 21340  0086                     wtemp4	set	134
 21341  0088                     wtemp5	set	136
 21342  007F                     wtemp6	set	127
 21343  007E                     ttemp	set	126
 21344  007E                     ttemp0	set	126
 21345  0081                     ttemp1	set	129
 21346  0084                     ttemp2	set	132
 21347  0087                     ttemp3	set	135
 21348  007F                     ttemp4	set	127
 21349  007E                     ltemp	set	126
 21350  007E                     ltemp0	set	126
 21351  0082                     ltemp1	set	130
 21352  0086                     ltemp2	set	134
 21353  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         295
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80      9      80
    BANK4            80      8      74
    BANK5            80      9      53
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  888938
                                              0 BANK4      8     8      0
                                              0 BANK5      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  162398
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29916
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34282
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   31031
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   30187
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   29971
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163760
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  153110
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  153159
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  137191
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42795
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   76054
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26100
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  104328
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   84615
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   72910
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18319
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      4A      13       92.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      9      35      15       66.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     23A      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     23A      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 20:08:22 2017

                        _update_mode 2FC8                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01CC  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0BD2  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l602 2D44  
                                l372 05F5                                  l382 072A  
                                l366 0545                                  l376 062F  
                                l810 2538                                  l811 255C  
               __size_of_adc_convert 0013                                  l820 2082  
                                l822 2085                                  l398 1026  
                                l823 20A9                                  l815 2076  
                                l817 2079                                  l649 26BF  
                                l818 207C                                  l819 207F  
                                l982 2340                                  l986 236A  
                                l994 238A                                  _GIE 005F  
                                l998 23B8                                  _RB1 0069  
                                _PR2 001B         solidring_tactiles@ring_delay 00B4  
                                _cos 2703                                  _map 1A36  
                                _exp 1363                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 0820                                  _pow 112B  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0135              __end_of_set_leds_bottom 20AA  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1020 2E6A                                 l1021 2E7E  
                               l1024 2564                                 l1017 2E5D  
                               l1009 2FF8                                 l1019 2E63  
                               l1035 25AE                                 l2045 18B9  
                               l1442 0BE9                                 l2164 25FC  
                               l2165 2604                                 l2157 25E9  
                               l2248 1A1C                                 l2360 114F  
                               l1456 0CA4                                 l1740 22D5  
                               l2188 10D4                                 l2378 0935  
                               ?_cos 014C                                 l1990 2DCE  
                               ?_map 00DE                                 l8002 21B1  
                               l8110 1CFB                                 l8102 1CE2  
                               l8200 1C54                                 l8040 23F7  
                               l8032 23D3                                 l8122 2EDD  
                               l8140 1E06                                 l9100 237F  
                               l8204 1C5C                                 l8060 2051  
                               l9004 0C45                                 l9020 0C75  
                               ?_exp 0148                                 ?_log 013E  
                               l8150 1E73                                 l9110 23A6  
                               l9030 0C9C                                 l9022 0C84  
                               l8072 2E45                                 l8160 2686  
                               l8136 1DFE                                 l8304 08F1  
                               l8400 149C                                 l9200 1AE1  
                               l8240 2E72                                 l8082 1C8B  
                               l8322 2E84                                 l8170 1BEA  
                               l9130 1B57                                 l9202 1AE7  
                               l9018 0C6D                                 l8420 2F8C  
                               l8412 2F77                                 l8324 2E94  
                               l8180 1C0C                                 l8340 1F66  
                               l9052 0D63                                 l9060 0DA1  
                               ?_isr 0070                                 l7710 25BF  
                               l8414 2F86                                 l8406 2F71  
                               l8334 1F53                                 l9214 1B46  
                               l9206 1AEE                                 l9046 0CF3  
                               l9038 0CE7                                 l8088 1CA1  
                               l7800 210B                                 l8248 2FA9  
                               l9136 1B64                                 l9152 1D26  
                               l9208 1B07                                 l8264 1689  
                               l9048 0D3D                                 l9320 03B6  
                               l9304 0397                                 l7714 25C6  
                               l7810 105D                                 l9250 0F04  
                               l9410 07EA                                 l9314 03A7  
                               l7740 2510                                 l7724 25EE  
                               l7716 25D0                                 l7820 1073  
                               l7900 1E92                                 l8292 0855  
                               l8372 13B9                                 l8356 1370  
                               l9172 1936                                 l9252 0F4A  
                               l9260 0FBB                                 l9244 0E32  
                               l7742 2518                                 l7726 25F6  
                               l7718 25D5                                 l7814 1064  
                               l9078 2335                                 l8366 1395  
                               l8462 1157                                 l9158 1D35  
                               l8278 14F1                                 l9254 0F90  
                               l9246 0E78                                 l9262 0E14  
                               l9238 0DFD                                 l9334 0431  
                               l7744 2520                                 l7752 253F  
                               l8720 22AA                                 l7840 10AA  
                               l7832 108D                                 l9088 235C  
                               l8480 11DD                                 l9192 1ACF  
                               l8608 215A                                 l9264 0FC1  
                               l9248 0EBE                                 l9344 048F  
                               l7746 2528                                 l8722 22AC  
                               l7850 10C6                                 l7842 10AF  
                               l7930 1EFF                                 l7922 1EEB  
                               l7906 1EA8                                 l8378 13F4  
                               l9194 1AD5                                 l9274 0FE4  
                               l9258 0FA4                                 l8634 18DA  
                               l8626 18CA                                 l9362 058D  
                               l7748 2530                                 l8724 22AE  
                               l7860 10F8                                 l7852 10D0  
                               l7844 10B3                                 l8476 11BD  
                               l8468 1163                                 l9196 1AD9  
                               l9268 0FCA                                 l8556 218A  
                               l8564 2195                                 l8548 217A  
                               l8900 12BF                                 l8652 1921  
                               l8644 1908                                 l8636 18E8  
                               l8820 2FF5                                 l9372 05F7  
                               l9348 04CF                                 ?_sin 013E  
                               l8718 22A8                                 l7870 1113  
                               l7838 10A0                                 l7934 1F07  
                               l7918 1EE3                                 l8582 274D  
                               l7694 200E                                 l9198 1ADD  
                               l8670 247A                                 l8814 2FEB  
                               l8822 2FFC                                 l9390 072D  
                               l9382 067A                                 l7768 208C  
                               l8728 22B2                                 l7856 10E6  
                               l7776 2DC8                                 l8680 2482  
                               l8664 246F                                 l8912 12D9  
                               l8648 1913                                 l9376 0632  
                               l7882 20D7                                 l7698 2018  
                               l8682 248E                                 l8594 0A24  
                               l8842 2593                                 l9394 076D  
                               l9386 06C9                                 l8692 24A9  
                               l8940 1327                                 l8932 130D  
                               l8924 12EE                                 l8852 25AA  
                               l8844 2598                                 l8836 2587  
                               l9388 0700                                 ?_pow 0155  
                               l8782 26D2                                 l7798 20FB  
                               l7878 20C1                                 l7990 1A2D  
                               l7958 19C8                                 l8598 0B66  
                               l8942 132D                                 l8950 1341  
                               l8926 12F2                                 l8862 1257  
                               l8854 25B2                                 l9398 07B7  
                               l8784 26DB                                 l7984 1A13  
                               l7976 19F8                                 l8696 24B1  
                               l8688 24A0                                 l9840 0FAA  
                               l9850 22D0                                 l7986 1A1F  
                               l7978 1A06                                 l9842 1AF3  
                               l8874 1276                                 l8866 126A  
                               l9852 2545                                 l9844 22C1  
                               l8956 134D                                 l9854 2092  
                               l9846 22C6                                 l8894 12A5  
                               l8982 0BFB                                 l9848 22CB  
                               l8976 0BDE                                 l8898 12B7  
                               l8996 0C1D                                 l8998 0C3A  
                               _PEIE 005E                                 _RCIE 048D  
                               u8115 10B4                                 u9005 2DEC  
                               u8055 108E                                 u9015 2E24  
                               u8145 10C7                                 u9025 216B  
                               u8315 1F08                                 u8085 10A1  
                               u8325 1F0E                                 u8245 1EB4  
                               u8255 1EC4                                 u8425 1A14  
                               u9145 18DD                                 u9065 2D9C  
                               u8275 1EEC                                 u8700 2FA7  
                               u7805 25E4                                 u8285 1EF2  
                               u8365 19CF                                 u9245 2485  
                               u9165 18E9                                 u9335 180C  
                               u7735 2019                                 u9175 18FD  
                               u9415 2FDB                                 u9345 1812  
                               u7825 25F1                                 u8545 1CB3  
                               u7905 2DCF                                 u7745 2020  
                               u9265 248F                                 u8465 23D1  
                               u9185 1909                                 u8555 1CC3  
                               u7915 2DD4                                 u8395 19F9  
                               u9275 2499                                 u8475 23F5  
                               u9380 26D9                                 u9365 26B8  
                               u8565 1CE3                                 u8805 2E89  
                               u9285 24A1                                 u9605 1280  
                               u9375 26CB                                 u8575 1CF2  
                               u8760 08ED                                 u7865 260B  
                               u7785 25CB                                 u8585 1CFC  
                               u7945 2100                                 u8770 08EE  
                               u8915 1493                                 u9715 12FE  
                               u8685 1C15                                 u9565 1250  
                               u9485 2576                                 u8870 13D2  
                               u9575 1263                                 u8880 13D3  
                               u9855 0C26                                 u8985 11AE  
                               u9965 0CB5                                 u9885 0C4F  
                               u9975 0CCC                                 u9985 0CFC  
                               u9995 0D11                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2848 01EA                    _scaleA10kPot$2849 01ED  
                               _iCnt 025D                                 _main 0376  
                       ___ftpack@arg 00A0                                 cos@f 014C  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02F3  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2CE8                      _expressModeCnst 01E2  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2DFD  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2F62                         ___fttol@exp1 012D  
                              ??_cos 00F0                                ??_map 00ED  
              __size_of_calcCosArray 0081                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 0268  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 192A  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 012E                      __end_of___awdiv 24B6  
                    __end_of___ftadd 112B                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1D1D  
                    __end_of___ftneg 2D01                                u10005 0D25  
                              u10025 0D42                                u10145 239F  
                              u10225 1B41                                u10235 0DD7  
                    __end_of___ftmul 1F2F                                u10085 2355  
                              u10245 0DEB                                u10405 0611  
                              u10325 040F                                u10255 0DFB  
                              u10415 062D                                u10335 042F  
                              u10265 0E1B                                u10425 0658  
                              u10345 04AD                                u10435 0678  
                              u10355 04CD                      ___awdiv@divisor 00A0  
                              u10365 056B                                u10375 058B  
                              u10465 074B                                u10385 05E2  
                    __end_of___ftsub 2F03                                u10475 076B  
                              u10395 05F0                      __end_of___fttol 1A36  
                              i1l137 02EE                                i1l138 001B  
                              i1l139 0101                                i1l810 2308  
                              i1l811 232A                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 005A  
                _ConfigureOscillator 2CE0          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 2035                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1DC8                                _ldexp 1BDD  
                              _frexp 219D                                _myBuf 03A0  
                              _errno 0251             _getModulationSubdivision 2F62  
                      ___ftpack@sign 00A4                                _timer 0056  
                   __end_ofi1___lmul 2F32                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 1035                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 2375                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 2FC8                         _calcCosArray 277F  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 1241                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0DBA                      __initialization 02F5  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 0002                         __end_of_main 07F4  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                          modCos@angle 0134  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1538 00B5                          modCos@shift 013F  
                    _set_subdivision 1AC1          updateModulationArray@subDiv 0157  
                             ??_main 025E                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2ED5           i1_getModulationSubdivision 2EA9  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 221D  
                   ?_set_leds_bottom 00A0                               ?_floor 012E  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 2123                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2E5C                     __end_of___ftpack 261B  
               ??_updateSwitchBypass 00BC                     __end_of___lltoft 2EA9  
                             i1l2045 1837                               i1l7000 0264  
                             i1l6132 2F15                               i1l7020 02E6  
                             i1l6150 1848                               i1l6160 1866  
                             i1l6128 2F0B                               i1l7024 02EB  
                             i1l7008 02B6                               i1l7026 02ED  
                             i1l6172 1891                               i1l6158 1858  
                             i1l6176 189F                               i1l6168 1886  
                             i1l6902 245F                               i1l6830 22FC  
                             i1l6832 2302                               i1l6824 22EA  
                             i1l6850 2EBD                               i1l6826 22F0  
                             i1l6930 011B                               i1l6852 2ECB  
                             i1l6844 2EB8                               i1l6828 22F6  
                             i1l6836 230E                               i1l6870 241D  
                             i1l6960 0191                               i1l6936 0135  
                             i1l6858 2ED0                               i1l6962 0193  
                             i1l6876 2428                               i1l6972 01C7  
                             i1l6980 01EE                               i1l6894 244E  
                             i1l6886 2430                               i1l6990 021C  
                             i1l6974 01D0                               i1l6958 0181  
                             i1l6888 243C                               i1l6984 0202  
                             i1l6992 021E                               i1l6976 01DF  
                             i1l6898 2457                               i1l6988 020D  
                             i1l9856 2313                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u700_23 0246                               u701_25 025B  
                             u550_25 185B                               u703_25 02C8  
                             u552_25 1867                               u544_25 2F16  
                             u704_25 02E1                               u553_25 187B  
                             u545_25 2F1D                               u554_25 1887  
                             u670_25 243D                               u671_25 2447  
                             u672_25 244F                               u680_25 00EC  
                             u682_25 0112                               u668_25 2433  
                             u684_25 012C                               u693_23 01B5  
                             u678_23 00D3                               u679_25 00E3  
                             u688_23 0151                       _debounce_count 0249  
                        modSaw@angle 012E                       _debounce_mode1 024B  
                     _debounce_mode2 024D                          modSaw@shift 013C  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 23C3  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                             ___ftge 20AA                               ___lmul 2005  
                          ??___aldiv 00A8                               ___wmul 2DC5  
                  _update_selectMode 255D                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                             _modCos 1654                     __end_of_init_adc 2D0B  
                             _modSaw 14BC                               _modTri 09EF  
                   __end_of_init_pwm 229F                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2D91                               _tmpVal 025B  
                  __end_of_USARTInit 22E3                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 18A8                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 2464              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2D5F  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2CE4  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2DE1  
                      _scaleA100kPot 192A         __end_of_setExpressionDisplay 2D77  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 0372                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 2509                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01C0  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 004C            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0259  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 2413  
          __end_of_update_selectMode 25B6              __end_of_set_subdivision 1B4C  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2D26                         __pidataBANK2 0003  
                       __pidataBANK3 2DAB                         __pidataBANK4 2001  
                         ___lltoft@c 00A8                        __end_of_floor 1E7B  
                      __end_of_ldexp 1C74                        __end_of_frexp 21DD  
                   _initSwitchBypass 2D17                            ?i1___lmul 0070  
              _updateModulationArray 0DBA                      _doubleTap_state 005C  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0052                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 206F                           _delay_time 0044  
                   _long_press_limit 004A         __size_of_setDoublePressState 003D  
                         _delayfound 024F                           __pmaintext 0376  
                     _InitializeTaps 1800                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0159                           __pintentry 0004  
                      _scaleiA10kPot 1D1D                           _blink_rate 004E  
                      ??_adc_convert 00A2                              ?_modCos 0134  
                          ?___altoft 00A8                              ?_modSaw 012E  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2D91                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 0800  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 0003  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2648 0145                      _debounce_bypass 0247  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 016A         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 005B  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BE                              _InitApp 2F32  
               __end_of_scaleA10kPot 1BDD               __end_of_InitializeTaps 1826  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 18A8                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 2464  
                    __size_of___lmul 0030                              ___ftadd 1035  
                            ___ftdiv 1C74                              ___ftneg 2CF8  
                         _knob_1_pos 01AC                           _knob_2_pos 01AE  
                    __size_of___wmul 001C                              ___ftmul 1E7B  
                         _knob_3_pos 01B0                              ___ftsub 2ED5  
                            ___fttol 19AF                           _knob_4_pos 01B2  
                         _knob_5_pos 01B4                    _switchTap_pressed 016B  
                         ??___altoft 00AC                 _setExpressionDisplay 2D5F  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 0820                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                    __end_of_eval_poly 268D  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 255D                              __ptext2 2FC8  
                            __ptext3 0BD2                              __ptext4 2D91  
                            __ptext5 18A8                              __ptext6 1241  
                            __ptext7 2E19                              __ptext8 2160  
                            __ptext9 2D4B           __end_of_setLongBypassState 2E3A  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2E19                            _T2CONbits 001C  
                       __size_of_cos 007C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02EF               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2D4B                         modTri@period 013A  
                  __end_of_modSquare 2160                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 1003                              clrloop0 07F5  
               end_of_initialization 0372                              exp@sign 0154  
                         _modulation 221D                              init_ram 2D0B  
                         ??_init_adc 00A0                              initloop 2D0C  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 21DD                        _longTap_timer 01B8  
                      _longTap_state 004F                        _longTap_start 01C5  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2DAB  
              _setSwitchBypassRelays 2F92               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B6                     ___aldiv@quotient 00AB  
                   _longBypass_state 005D                     _longBypass_start 01C4  
       __size_of_read_bottom_tactile 004A                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 01E3  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                         _test_timer 0241                            _USARTInit 229F  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                            _TRISGbits 030D  
                          i1___aldiv 1826                            i1___awdiv 2413  
               ??_solidring_tactiles 00B2          __end_of_ConfigureOscillator 2CE4  
                         map@out_max 00EA                           map@out_min 00E7  
        __size_of_updateSwitchBypass 0122             __end_of_initSwitchBypass 2D26  
                        _CCP1CONbits 0293                          ___ftdiv@exp 00DC  
           __size_of_set_leds_bottom 003B                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 01BA  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                          _CCP9CONbits 061C  
               set_leds_top@ledState 00A2                       __end_of___ftge 20E6  
               __end_of_setPedalMode 2E7F                       __end_of___lmul 2035  
                     __end_of___wmul 2DE1                         _double_timer 01A0  
                        _adc_convert 2D38     __end_of_getModulationSubdivision 2F92  
                     _switchTap_down 01CB                       __end_of_modCos 1800  
                     __end_of_modSaw 1654                       __end_of_modTri 0BD2  
                     modSawRev@angle 0142                           floor@expon 0135  
              i1___lmul@multiplicand 0074                    __size_ofi1___lmul 002F  
                start_initialization 02F5                           ?_USARTInit 00A0  
                         eval_poly@d 0137                           eval_poly@n 0139  
                         eval_poly@x 0134                _bottomTactile_pressed 01BF  
                _setDoublePressState 2160                           ldexp@value 013E  
                         ?i1___aldiv 0020                          __end_of_cos 277F  
                        __end_of_map 1AC1                          __end_of_exp 14BC  
                        __end_of_log 2000                          __end_of_isr 02F3  
                         ?i1___awdiv 0070                          __end_of_sin 09EF  
                        __end_of_pow 1241                __size_of_scaleA10kPot 0091  
                 _adjusted_pot_value 0245                          ?_modulation 002E  
                 scaleiA10kPot@input 0167                           frexp@value 00A0  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
               ?_setDoublePressState 00B8  __size_ofi1_getModulationSubdivision 002C  
                   ?_setLongTapState 00A0                    ?_setPresetDisplay 0070  
                           ??___ftge 00A6                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                 ??_setPresetDisplay 00A4                          __pdataBANK0 0040  
                        __pdataBANK2 016C                          __pdataBANK3 01CD  
                        __pdataBANK4 0266                             ??_modCos 013A  
                           ??_modSaw 00F0                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0                        _tap_iteration 01DD  
           __size_of_updateSwitchTap 01E8                    __size_of___altoft 003D  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                        __pbssBIGRAM 238A                         _scaleA10kPot 1B4C  
                  __size_of___lltoft 002A                        ??_init_timer0 00A0  
                      ??_init_timer2 00A0                 __end_of_set_leds_top 255D  
                          ___latbits 0003       setExpressionDisplay@ledChannel 00A6  
                 _switchBypass_state 0051                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
                      __pcstackBANK3 01E7                        __pcstackBANK4 025E  
                      __pcstackBANK5 02CC               __size_of_ring_tactiles 0050  
                     _expSwitchState 01E1     updateModulationArray@iAngle_2347 0156  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E7  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                   modCos@inflection 0137                        ?_calcCosArray 0070  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2840 02CF                            _main$2841 02D2  
                          _main$2839 02CC              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01E0                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C7  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2844 01EA  
                 _scaleA100kPot$2845 01ED                    i1___awdiv@counter 0075  
                        _blink_delay 0266                  __size_of_modulation 0041  
                      _resetRingLEDs 2D77                          _blink_state 01DF  
                          _eval_poly 261B                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 2DFD             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 232B                       __size_of_floor 00B3  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 2123                   calcCosArray@iAngle 0159  
                     _presetModeCnst 01E5                   _setLongBypassState 2E19  
                __end_of_init_timer0 2CEF                  __end_of_init_timer2 2CF8  
                          _mod_value 0253                            _mod_timer 01A4  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 0030                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 005F  
                     ___wmul@product 0132                       ??_calcCosArray 0152  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01D9                            clear_ram0 07F4  
                 calcCosArray@tmpVal 0156                            _tap_timer 0052  
                ?_setLongBypassState 00A0                            _tap_total 023D  
              __size_of_setPedalMode 0023                        set_leds_top@x 00A0  
                           _PIR1bits 0011                        _ring_tactiles 23C3  
                    _longBypass_down 01C2                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 01C3                 ?_read_bottom_tactile 0070  
            __size_ofi1_set_leds_top 0048            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 01A8  
                         _ADCON0bits 009D                             i1___lmul 2F03  
                         _ADCON1bits 009E             __size_of_set_subdivision 008B  
                  ___wmul@multiplier 012E                     set_subdivision@x 012E  
                   set_subdivision@y 0130            __size_of_read_top_tactile 004E  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004                          _modCos$2852 013C  
      __size_of_setSwitchBypassState 001C                           ?_modSawRev 0142  
              __end_of_scaleA100kPot 19AF                    ??_updateSwitchTap 00BC  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 2E5C  
                  _ReadSavedSettings 268D                    ?_initSwitchBypass 0070  
                  ring_tactiles@iLed 00B3                          _oldBaseTime 0255  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2854 0134                          _modSaw$2855 0137  
                     wait_ms@timemsl 00AE                            frexp@eptr 00A3  
        setSwitchBypassState@f_state 00B6                   ??_initSwitchBypass 00BA  
                   __size_of_InitApp 0030                       ?_ring_tactiles 0070  
                          modSaw@mod 013A                          _mode1_state 01C6  
                      ??_update_mode 00A7                          _mode2_state 005E  
                          isr@subDiv 007D                ??_read_bottom_tactile 00B2  
                        _modTri$2853 0134                  updateSwitchTap@iCnt 00C4  
                ??_ReadSavedSettings 00A4                           _APFCONbits 011D  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 20E6                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           _cos$2856 014F                             ___awtoft 2E3A  
              __size_of_set_leds_top 0054                             ___ftpack 25B6  
                  _baseline_mod_time 0040                             _map$2842 00ED  
                           ___lltoft 2E7F               _preset_programmning_on 01C9  
                         _ANSELEbits 0190                           _ANSELFbits 040C  
                   modTri@inflection 0131                     set_leds_bottom@x 00A0  
                           _exp$2611 014F                             _exp$2860 014C  
                        _init_timer0 2CE8                          _init_timer2 2CEF  
                           _cosArray 2482           __end_of_updateSwitchBypass 1363  
                           __ptext10 21DD                             __ptext11 23C3  
                           __ptext20 2DFD                             __ptext12 2E5C  
                           __ptext21 14BC                             __ptext13 2035  
                           __ptext30 1BDD                             __ptext22 2464  
                           __ptext14 2D5F                             __ptext31 2E7F  
                           __ptext23 1AC1                             __ptext15 2D77  
                           __ptext40 0002                             __ptext32 2375  
                           __ptext24 1D1D                             __ptext16 0DBA  
                           __ptext41 2CE4                             __ptext33 232B  
                           __ptext25 1B4C                             __ptext17 09EF  
                           __ptext50 20AA                             __ptext42 24B6  
                           __ptext34 1A36                             __ptext26 192A  
                           __ptext18 2123                             __ptext51 20E6  
                           __ptext43 2F62                             __ptext35 2D17  
                           __ptext27 112B                             __ptext19 1654  
                           __ptext60 25B6                             __ptext52 261B  
                           __ptext44 277F                             __ptext36 2DE1  
                           __ptext28 1F2F                             __ptext61 2D38  
                           __ptext53 2DC5                             __ptext45 2703  
                           __ptext37 2F92                             __ptext29 1363  
                           __ptext70 2CEF                             __ptext62 229F  
                           __ptext54 1E7B                             __ptext46 0820  
                           __ptext38 1003                             __ptext71 2CE8  
                           __ptext63 268D                             __ptext55 2ED5  
                           __ptext47 1DC8                             __ptext39 2005  
                           __ptext80 1826                             __ptext72 2D01  
                           __ptext64 2509                             __ptext56 1035  
                           __ptext48 219D                             __ptext73 2CE0  
                           __ptext65 206F                             __ptext57 2CF8  
                           __ptext49 19AF                             __ptext66 0800  
                           __ptext58 1C74                             __ptext75 22E3  
                           __ptext67 1800                             __ptext59 2E3A  
                           __ptext76 2EA9                             __ptext68 2F32  
                           __ptext77 2413                             __ptext69 225E  
                           __ptext78 221D                             __ptext79 2F03  
                           _sin$2859 0145            __end_of_ReadSavedSettings 2703  
                   __size_of_wait_ms 0032          __size_of_solidring_tactiles 0040  
    __size_of_getModulationDelayTime 0053                             _ledState 0239  
                           _pow$2857 015C                             _pow$2858 015F  
                      _presetChannel 016C                         ??_modulation 0036  
                        _mod_counter 01D7                             _modArray 238A  
                        _oldSymmetry 0257              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2D01                        __size_of_main 047E  
                           _init_pwm 225E     updateModulationArray@angleFactor 0154  
       __size_of_ConfigureOscillator 0004                         _set_leds_top 2509  
                           _showSave 2D4B                             _num_taps 0050  
              __end_of_scaleiA10kPot 1DC8                             int$flags 007E  
                    ??_resetRingLEDs 00A4                      i1set_leds_top@x 0070  
                     modSquare@angle 0148                  __end_of_update_mode 3000  
                           exp@coeff 2800                             _symmetry 01DB  
                modSawRev@inflection 0145                             log@coeff 281E  
                 __end_of_modulation 225E                 __end_of_calcCosArray 2800  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 0148                    ??_set_subdivision 00F0  
                        ??_modSquare 00F0                             intlevel1 0000  
                    _set_leds_bottom 206F                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01CA                           _OSCCONbits 0099  
                       _preset_blink 01C8               _getModulationDelayTime 24B6  
                     i1_set_leds_top 22E3       __size_of_updateModulationArray 0246  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
                      _isInitialized 01C1        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2850 01EA                   _scaleiA10kPot$2851 01ED  
           __size_of_setLongTapState 001A                          _tmpModDelay 01BC  
                   _read_top_tactile 2375         ??i1_getModulationSubdivision 0072  
                       ___aldiv@sign 00AA           __size_of_ReadSavedSettings 0076  
        __end_of_setDoublePressState 219D                         _CCP10CONbits 061F  
                  _bottom_push_state 0048           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 232B  
