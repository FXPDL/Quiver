

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 13 18:02:53 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	intentry,global,class=CODE,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	dabs	1,0x920,80
   106                           	dabs	1,0x8A0,80
   107                           	dabs	1,0x820,80
   108                           	dabs	1,0x7A0,80
   109                           	dabs	1,0x742,46
   110                           	dabs	1,0x720,34
   111                           	dabs	1,0x6A0,80
   112                           	dabs	1,0x620,80
   113                           	dabs	1,0x5BE,50
   114                           	dabs	1,0x2482,0,_sinArray
   115                           	dabs	1,0x238E,0,_modArray
   116                           	dabs	1,0x7E,2
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  008F                     	;# 
   151  0090                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0095                     	;# 
   157  0096                     	;# 
   158  0097                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  0110                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  011D                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  018F                     	;# 
   177  0190                     	;# 
   178  0191                     	;# 
   179  0191                     	;# 
   180  0192                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0197                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  0199                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019A                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  020F                     	;# 
   212  0210                     	;# 
   213  0211                     	;# 
   214  0211                     	;# 
   215  0212                     	;# 
   216  0212                     	;# 
   217  0213                     	;# 
   218  0213                     	;# 
   219  0214                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0216                     	;# 
   225  0216                     	;# 
   226  0217                     	;# 
   227  0217                     	;# 
   228  0219                     	;# 
   229  021A                     	;# 
   230  021B                     	;# 
   231  021C                     	;# 
   232  021D                     	;# 
   233  021E                     	;# 
   234  021F                     	;# 
   235  028C                     	;# 
   236  028D                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029D                     	;# 
   246  029E                     	;# 
   247  029F                     	;# 
   248  030C                     	;# 
   249  030D                     	;# 
   250  0311                     	;# 
   251  0311                     	;# 
   252  0312                     	;# 
   253  0313                     	;# 
   254  0318                     	;# 
   255  0318                     	;# 
   256  0319                     	;# 
   257  031A                     	;# 
   258  031C                     	;# 
   259  031C                     	;# 
   260  031D                     	;# 
   261  031E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  040C                     	;# 
   268  040D                     	;# 
   269  0411                     	;# 
   270  0411                     	;# 
   271  0412                     	;# 
   272  0413                     	;# 
   273  0414                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  0418                     	;# 
   278  0418                     	;# 
   279  0419                     	;# 
   280  041A                     	;# 
   281  041B                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  048D                     	;# 
   286  0491                     	;# 
   287  0491                     	;# 
   288  0492                     	;# 
   289  0492                     	;# 
   290  0493                     	;# 
   291  0493                     	;# 
   292  0493                     	;# 
   293  0494                     	;# 
   294  0494                     	;# 
   295  0495                     	;# 
   296  0495                     	;# 
   297  0496                     	;# 
   298  0496                     	;# 
   299  0497                     	;# 
   300  0497                     	;# 
   301  0595                     	;# 
   302  0596                     	;# 
   303  0597                     	;# 
   304  059C                     	;# 
   305  059D                     	;# 
   306  059E                     	;# 
   307  0611                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  0614                     	;# 
   313  0615                     	;# 
   314  0616                     	;# 
   315  0617                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061A                     	;# 
   321  061B                     	;# 
   322  061C                     	;# 
   323  061D                     	;# 
   324  061D                     	;# 
   325  061E                     	;# 
   326  061F                     	;# 
   327  0FE4                     	;# 
   328  0FE5                     	;# 
   329  0FE6                     	;# 
   330  0FE7                     	;# 
   331  0FE8                     	;# 
   332  0FE9                     	;# 
   333  0FEA                     	;# 
   334  0FEB                     	;# 
   335  0FED                     	;# 
   336  0FEE                     	;# 
   337  0FEF                     	;# 
   338  0000                     	;# 
   339  0001                     	;# 
   340  0002                     	;# 
   341  0003                     	;# 
   342  0004                     	;# 
   343  0005                     	;# 
   344  0006                     	;# 
   345  0007                     	;# 
   346  0008                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000F                     	;# 
   354  0010                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0014                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  008F                     	;# 
   372  0090                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0095                     	;# 
   378  0096                     	;# 
   379  0097                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009B                     	;# 
   384  009C                     	;# 
   385  009D                     	;# 
   386  009E                     	;# 
   387  010C                     	;# 
   388  010D                     	;# 
   389  010E                     	;# 
   390  010F                     	;# 
   391  0110                     	;# 
   392  0116                     	;# 
   393  0117                     	;# 
   394  011D                     	;# 
   395  018C                     	;# 
   396  018D                     	;# 
   397  018F                     	;# 
   398  0190                     	;# 
   399  0191                     	;# 
   400  0191                     	;# 
   401  0192                     	;# 
   402  0193                     	;# 
   403  0193                     	;# 
   404  0194                     	;# 
   405  0195                     	;# 
   406  0196                     	;# 
   407  0197                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  0199                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019A                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019C                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019D                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  019F                     	;# 
   431  020D                     	;# 
   432  020F                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0219                     	;# 
   450  021A                     	;# 
   451  021B                     	;# 
   452  021C                     	;# 
   453  021D                     	;# 
   454  021E                     	;# 
   455  021F                     	;# 
   456  028C                     	;# 
   457  028D                     	;# 
   458  0291                     	;# 
   459  0291                     	;# 
   460  0292                     	;# 
   461  0293                     	;# 
   462  0298                     	;# 
   463  0298                     	;# 
   464  0299                     	;# 
   465  029A                     	;# 
   466  029D                     	;# 
   467  029E                     	;# 
   468  029F                     	;# 
   469  030C                     	;# 
   470  030D                     	;# 
   471  0311                     	;# 
   472  0311                     	;# 
   473  0312                     	;# 
   474  0313                     	;# 
   475  0318                     	;# 
   476  0318                     	;# 
   477  0319                     	;# 
   478  031A                     	;# 
   479  031C                     	;# 
   480  031C                     	;# 
   481  031D                     	;# 
   482  031E                     	;# 
   483  038C                     	;# 
   484  038D                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  040C                     	;# 
   489  040D                     	;# 
   490  0411                     	;# 
   491  0411                     	;# 
   492  0412                     	;# 
   493  0413                     	;# 
   494  0414                     	;# 
   495  0415                     	;# 
   496  0416                     	;# 
   497  0417                     	;# 
   498  0418                     	;# 
   499  0418                     	;# 
   500  0419                     	;# 
   501  041A                     	;# 
   502  041B                     	;# 
   503  041C                     	;# 
   504  041D                     	;# 
   505  041E                     	;# 
   506  048D                     	;# 
   507  0491                     	;# 
   508  0491                     	;# 
   509  0492                     	;# 
   510  0492                     	;# 
   511  0493                     	;# 
   512  0493                     	;# 
   513  0493                     	;# 
   514  0494                     	;# 
   515  0494                     	;# 
   516  0495                     	;# 
   517  0495                     	;# 
   518  0496                     	;# 
   519  0496                     	;# 
   520  0497                     	;# 
   521  0497                     	;# 
   522  0595                     	;# 
   523  0596                     	;# 
   524  0597                     	;# 
   525  059C                     	;# 
   526  059D                     	;# 
   527  059E                     	;# 
   528  0611                     	;# 
   529  0611                     	;# 
   530  0612                     	;# 
   531  0613                     	;# 
   532  0614                     	;# 
   533  0614                     	;# 
   534  0615                     	;# 
   535  0616                     	;# 
   536  0617                     	;# 
   537  0617                     	;# 
   538  0618                     	;# 
   539  0619                     	;# 
   540  061A                     	;# 
   541  061A                     	;# 
   542  061B                     	;# 
   543  061C                     	;# 
   544  061D                     	;# 
   545  061D                     	;# 
   546  061E                     	;# 
   547  061F                     	;# 
   548  0FE4                     	;# 
   549  0FE5                     	;# 
   550  0FE6                     	;# 
   551  0FE7                     	;# 
   552  0FE8                     	;# 
   553  0FE9                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEF                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0008                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  000F                     	;# 
   575  0010                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0013                     	;# 
   579  0014                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  008F                     	;# 
   593  0090                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0093                     	;# 
   597  0094                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0097                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  010C                     	;# 
   609  010D                     	;# 
   610  010E                     	;# 
   611  010F                     	;# 
   612  0110                     	;# 
   613  0116                     	;# 
   614  0117                     	;# 
   615  011D                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018F                     	;# 
   619  0190                     	;# 
   620  0191                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0197                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  020F                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  028C                     	;# 
   678  028D                     	;# 
   679  0291                     	;# 
   680  0291                     	;# 
   681  0292                     	;# 
   682  0293                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029D                     	;# 
   688  029E                     	;# 
   689  029F                     	;# 
   690  030C                     	;# 
   691  030D                     	;# 
   692  0311                     	;# 
   693  0311                     	;# 
   694  0312                     	;# 
   695  0313                     	;# 
   696  0318                     	;# 
   697  0318                     	;# 
   698  0319                     	;# 
   699  031A                     	;# 
   700  031C                     	;# 
   701  031C                     	;# 
   702  031D                     	;# 
   703  031E                     	;# 
   704  038C                     	;# 
   705  038D                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  040C                     	;# 
   710  040D                     	;# 
   711  0411                     	;# 
   712  0411                     	;# 
   713  0412                     	;# 
   714  0413                     	;# 
   715  0414                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  0418                     	;# 
   720  0418                     	;# 
   721  0419                     	;# 
   722  041A                     	;# 
   723  041B                     	;# 
   724  041C                     	;# 
   725  041D                     	;# 
   726  041E                     	;# 
   727  048D                     	;# 
   728  0491                     	;# 
   729  0491                     	;# 
   730  0492                     	;# 
   731  0492                     	;# 
   732  0493                     	;# 
   733  0493                     	;# 
   734  0493                     	;# 
   735  0494                     	;# 
   736  0494                     	;# 
   737  0495                     	;# 
   738  0495                     	;# 
   739  0496                     	;# 
   740  0496                     	;# 
   741  0497                     	;# 
   742  0497                     	;# 
   743  0595                     	;# 
   744  0596                     	;# 
   745  0597                     	;# 
   746  059C                     	;# 
   747  059D                     	;# 
   748  059E                     	;# 
   749  0611                     	;# 
   750  0611                     	;# 
   751  0612                     	;# 
   752  0613                     	;# 
   753  0614                     	;# 
   754  0614                     	;# 
   755  0615                     	;# 
   756  0616                     	;# 
   757  0617                     	;# 
   758  0617                     	;# 
   759  0618                     	;# 
   760  0619                     	;# 
   761  061A                     	;# 
   762  061A                     	;# 
   763  061B                     	;# 
   764  061C                     	;# 
   765  061D                     	;# 
   766  061D                     	;# 
   767  061E                     	;# 
   768  061F                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000F                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0096                     	;# 
   821  0097                     	;# 
   822  0099                     	;# 
   823  009A                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010E                     	;# 
   832  010F                     	;# 
   833  0110                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  011D                     	;# 
   837  018C                     	;# 
   838  018D                     	;# 
   839  018F                     	;# 
   840  0190                     	;# 
   841  0191                     	;# 
   842  0191                     	;# 
   843  0192                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0197                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019A                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019C                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019D                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  020D                     	;# 
   874  020F                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0219                     	;# 
   892  021A                     	;# 
   893  021B                     	;# 
   894  021C                     	;# 
   895  021D                     	;# 
   896  021E                     	;# 
   897  021F                     	;# 
   898  028C                     	;# 
   899  028D                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0298                     	;# 
   905  0298                     	;# 
   906  0299                     	;# 
   907  029A                     	;# 
   908  029D                     	;# 
   909  029E                     	;# 
   910  029F                     	;# 
   911  030C                     	;# 
   912  030D                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  031C                     	;# 
   922  031C                     	;# 
   923  031D                     	;# 
   924  031E                     	;# 
   925  038C                     	;# 
   926  038D                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  040C                     	;# 
   931  040D                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  048D                     	;# 
   949  0491                     	;# 
   950  0491                     	;# 
   951  0492                     	;# 
   952  0492                     	;# 
   953  0493                     	;# 
   954  0493                     	;# 
   955  0493                     	;# 
   956  0494                     	;# 
   957  0494                     	;# 
   958  0495                     	;# 
   959  0495                     	;# 
   960  0496                     	;# 
   961  0496                     	;# 
   962  0497                     	;# 
   963  0497                     	;# 
   964  0595                     	;# 
   965  0596                     	;# 
   966  0597                     	;# 
   967  059C                     	;# 
   968  059D                     	;# 
   969  059E                     	;# 
   970  0611                     	;# 
   971  0611                     	;# 
   972  0612                     	;# 
   973  0613                     	;# 
   974  0614                     	;# 
   975  0614                     	;# 
   976  0615                     	;# 
   977  0616                     	;# 
   978  0617                     	;# 
   979  0617                     	;# 
   980  0618                     	;# 
   981  0619                     	;# 
   982  061A                     	;# 
   983  061A                     	;# 
   984  061B                     	;# 
   985  061C                     	;# 
   986  061D                     	;# 
   987  061D                     	;# 
   988  061E                     	;# 
   989  061F                     	;# 
   990  0FE4                     	;# 
   991  0FE5                     	;# 
   992  0FE6                     	;# 
   993  0FE7                     	;# 
   994  0FE8                     	;# 
   995  0FE9                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEF                     	;# 
  1001  0000                     	;# 
  1002  0001                     	;# 
  1003  0002                     	;# 
  1004  0003                     	;# 
  1005  0004                     	;# 
  1006  0005                     	;# 
  1007  0006                     	;# 
  1008  0007                     	;# 
  1009  0008                     	;# 
  1010  0009                     	;# 
  1011  000A                     	;# 
  1012  000B                     	;# 
  1013  000C                     	;# 
  1014  000D                     	;# 
  1015  000E                     	;# 
  1016  000F                     	;# 
  1017  0010                     	;# 
  1018  0011                     	;# 
  1019  0012                     	;# 
  1020  0013                     	;# 
  1021  0014                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  008C                     	;# 
  1032  008D                     	;# 
  1033  008E                     	;# 
  1034  008F                     	;# 
  1035  0090                     	;# 
  1036  0091                     	;# 
  1037  0092                     	;# 
  1038  0093                     	;# 
  1039  0094                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0099                     	;# 
  1044  009A                     	;# 
  1045  009B                     	;# 
  1046  009B                     	;# 
  1047  009C                     	;# 
  1048  009D                     	;# 
  1049  009E                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0110                     	;# 
  1055  0116                     	;# 
  1056  0117                     	;# 
  1057  011D                     	;# 
  1058  018C                     	;# 
  1059  018D                     	;# 
  1060  018F                     	;# 
  1061  0190                     	;# 
  1062  0191                     	;# 
  1063  0191                     	;# 
  1064  0192                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0197                     	;# 
  1071  0199                     	;# 
  1072  0199                     	;# 
  1073  0199                     	;# 
  1074  019A                     	;# 
  1075  019A                     	;# 
  1076  019A                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019C                     	;# 
  1085  019D                     	;# 
  1086  019D                     	;# 
  1087  019D                     	;# 
  1088  019E                     	;# 
  1089  019E                     	;# 
  1090  019E                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  019F                     	;# 
  1094  020D                     	;# 
  1095  020F                     	;# 
  1096  0210                     	;# 
  1097  0211                     	;# 
  1098  0211                     	;# 
  1099  0212                     	;# 
  1100  0212                     	;# 
  1101  0213                     	;# 
  1102  0213                     	;# 
  1103  0214                     	;# 
  1104  0214                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0216                     	;# 
  1109  0216                     	;# 
  1110  0217                     	;# 
  1111  0217                     	;# 
  1112  0219                     	;# 
  1113  021A                     	;# 
  1114  021B                     	;# 
  1115  021C                     	;# 
  1116  021D                     	;# 
  1117  021E                     	;# 
  1118  021F                     	;# 
  1119  028C                     	;# 
  1120  028D                     	;# 
  1121  0291                     	;# 
  1122  0291                     	;# 
  1123  0292                     	;# 
  1124  0293                     	;# 
  1125  0298                     	;# 
  1126  0298                     	;# 
  1127  0299                     	;# 
  1128  029A                     	;# 
  1129  029D                     	;# 
  1130  029E                     	;# 
  1131  029F                     	;# 
  1132  030C                     	;# 
  1133  030D                     	;# 
  1134  0311                     	;# 
  1135  0311                     	;# 
  1136  0312                     	;# 
  1137  0313                     	;# 
  1138  0318                     	;# 
  1139  0318                     	;# 
  1140  0319                     	;# 
  1141  031A                     	;# 
  1142  031C                     	;# 
  1143  031C                     	;# 
  1144  031D                     	;# 
  1145  031E                     	;# 
  1146  038C                     	;# 
  1147  038D                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  040C                     	;# 
  1152  040D                     	;# 
  1153  0411                     	;# 
  1154  0411                     	;# 
  1155  0412                     	;# 
  1156  0413                     	;# 
  1157  0414                     	;# 
  1158  0415                     	;# 
  1159  0416                     	;# 
  1160  0417                     	;# 
  1161  0418                     	;# 
  1162  0418                     	;# 
  1163  0419                     	;# 
  1164  041A                     	;# 
  1165  041B                     	;# 
  1166  041C                     	;# 
  1167  041D                     	;# 
  1168  041E                     	;# 
  1169  048D                     	;# 
  1170  0491                     	;# 
  1171  0491                     	;# 
  1172  0492                     	;# 
  1173  0492                     	;# 
  1174  0493                     	;# 
  1175  0493                     	;# 
  1176  0493                     	;# 
  1177  0494                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0495                     	;# 
  1181  0496                     	;# 
  1182  0496                     	;# 
  1183  0497                     	;# 
  1184  0497                     	;# 
  1185  0595                     	;# 
  1186  0596                     	;# 
  1187  0597                     	;# 
  1188  059C                     	;# 
  1189  059D                     	;# 
  1190  059E                     	;# 
  1191  0611                     	;# 
  1192  0611                     	;# 
  1193  0612                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0614                     	;# 
  1197  0615                     	;# 
  1198  0616                     	;# 
  1199  0617                     	;# 
  1200  0617                     	;# 
  1201  0618                     	;# 
  1202  0619                     	;# 
  1203  061A                     	;# 
  1204  061A                     	;# 
  1205  061B                     	;# 
  1206  061C                     	;# 
  1207  061D                     	;# 
  1208  061D                     	;# 
  1209  061E                     	;# 
  1210  061F                     	;# 
  1211  0FE4                     	;# 
  1212  0FE5                     	;# 
  1213  0FE6                     	;# 
  1214  0FE7                     	;# 
  1215  0FE8                     	;# 
  1216  0FE9                     	;# 
  1217  0FEA                     	;# 
  1218  0FEB                     	;# 
  1219  0FED                     	;# 
  1220  0FEE                     	;# 
  1221  0FEF                     	;# 
  1222  0000                     	;# 
  1223  0001                     	;# 
  1224  0002                     	;# 
  1225  0003                     	;# 
  1226  0004                     	;# 
  1227  0005                     	;# 
  1228  0006                     	;# 
  1229  0007                     	;# 
  1230  0008                     	;# 
  1231  0009                     	;# 
  1232  000A                     	;# 
  1233  000B                     	;# 
  1234  000C                     	;# 
  1235  000D                     	;# 
  1236  000E                     	;# 
  1237  000F                     	;# 
  1238  0010                     	;# 
  1239  0011                     	;# 
  1240  0012                     	;# 
  1241  0013                     	;# 
  1242  0014                     	;# 
  1243  0015                     	;# 
  1244  0016                     	;# 
  1245  0016                     	;# 
  1246  0017                     	;# 
  1247  0018                     	;# 
  1248  0019                     	;# 
  1249  001A                     	;# 
  1250  001B                     	;# 
  1251  001C                     	;# 
  1252  008C                     	;# 
  1253  008D                     	;# 
  1254  008E                     	;# 
  1255  008F                     	;# 
  1256  0090                     	;# 
  1257  0091                     	;# 
  1258  0092                     	;# 
  1259  0093                     	;# 
  1260  0094                     	;# 
  1261  0095                     	;# 
  1262  0096                     	;# 
  1263  0097                     	;# 
  1264  0099                     	;# 
  1265  009A                     	;# 
  1266  009B                     	;# 
  1267  009B                     	;# 
  1268  009C                     	;# 
  1269  009D                     	;# 
  1270  009E                     	;# 
  1271  010C                     	;# 
  1272  010D                     	;# 
  1273  010E                     	;# 
  1274  010F                     	;# 
  1275  0110                     	;# 
  1276  0116                     	;# 
  1277  0117                     	;# 
  1278  011D                     	;# 
  1279  018C                     	;# 
  1280  018D                     	;# 
  1281  018F                     	;# 
  1282  0190                     	;# 
  1283  0191                     	;# 
  1284  0191                     	;# 
  1285  0192                     	;# 
  1286  0193                     	;# 
  1287  0193                     	;# 
  1288  0194                     	;# 
  1289  0195                     	;# 
  1290  0196                     	;# 
  1291  0197                     	;# 
  1292  0199                     	;# 
  1293  0199                     	;# 
  1294  0199                     	;# 
  1295  019A                     	;# 
  1296  019A                     	;# 
  1297  019A                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019B                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019C                     	;# 
  1306  019D                     	;# 
  1307  019D                     	;# 
  1308  019D                     	;# 
  1309  019E                     	;# 
  1310  019E                     	;# 
  1311  019E                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  019F                     	;# 
  1315  020D                     	;# 
  1316  020F                     	;# 
  1317  0210                     	;# 
  1318  0211                     	;# 
  1319  0211                     	;# 
  1320  0212                     	;# 
  1321  0212                     	;# 
  1322  0213                     	;# 
  1323  0213                     	;# 
  1324  0214                     	;# 
  1325  0214                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0219                     	;# 
  1334  021A                     	;# 
  1335  021B                     	;# 
  1336  021C                     	;# 
  1337  021D                     	;# 
  1338  021E                     	;# 
  1339  021F                     	;# 
  1340  028C                     	;# 
  1341  028D                     	;# 
  1342  0291                     	;# 
  1343  0291                     	;# 
  1344  0292                     	;# 
  1345  0293                     	;# 
  1346  0298                     	;# 
  1347  0298                     	;# 
  1348  0299                     	;# 
  1349  029A                     	;# 
  1350  029D                     	;# 
  1351  029E                     	;# 
  1352  029F                     	;# 
  1353  030C                     	;# 
  1354  030D                     	;# 
  1355  0311                     	;# 
  1356  0311                     	;# 
  1357  0312                     	;# 
  1358  0313                     	;# 
  1359  0318                     	;# 
  1360  0318                     	;# 
  1361  0319                     	;# 
  1362  031A                     	;# 
  1363  031C                     	;# 
  1364  031C                     	;# 
  1365  031D                     	;# 
  1366  031E                     	;# 
  1367  038C                     	;# 
  1368  038D                     	;# 
  1369  0394                     	;# 
  1370  0395                     	;# 
  1371  0396                     	;# 
  1372  040C                     	;# 
  1373  040D                     	;# 
  1374  0411                     	;# 
  1375  0411                     	;# 
  1376  0412                     	;# 
  1377  0413                     	;# 
  1378  0414                     	;# 
  1379  0415                     	;# 
  1380  0416                     	;# 
  1381  0417                     	;# 
  1382  0418                     	;# 
  1383  0418                     	;# 
  1384  0419                     	;# 
  1385  041A                     	;# 
  1386  041B                     	;# 
  1387  041C                     	;# 
  1388  041D                     	;# 
  1389  041E                     	;# 
  1390  048D                     	;# 
  1391  0491                     	;# 
  1392  0491                     	;# 
  1393  0492                     	;# 
  1394  0492                     	;# 
  1395  0493                     	;# 
  1396  0493                     	;# 
  1397  0493                     	;# 
  1398  0494                     	;# 
  1399  0494                     	;# 
  1400  0495                     	;# 
  1401  0495                     	;# 
  1402  0496                     	;# 
  1403  0496                     	;# 
  1404  0497                     	;# 
  1405  0497                     	;# 
  1406  0595                     	;# 
  1407  0596                     	;# 
  1408  0597                     	;# 
  1409  059C                     	;# 
  1410  059D                     	;# 
  1411  059E                     	;# 
  1412  0611                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0614                     	;# 
  1418  0615                     	;# 
  1419  0616                     	;# 
  1420  0617                     	;# 
  1421  0617                     	;# 
  1422  0618                     	;# 
  1423  0619                     	;# 
  1424  061A                     	;# 
  1425  061A                     	;# 
  1426  061B                     	;# 
  1427  061C                     	;# 
  1428  061D                     	;# 
  1429  061D                     	;# 
  1430  061E                     	;# 
  1431  061F                     	;# 
  1432  0FE4                     	;# 
  1433  0FE5                     	;# 
  1434  0FE6                     	;# 
  1435  0FE7                     	;# 
  1436  0FE8                     	;# 
  1437  0FE9                     	;# 
  1438  0FEA                     	;# 
  1439  0FEB                     	;# 
  1440  0FED                     	;# 
  1441  0FEE                     	;# 
  1442  0FEF                     	;# 
  1443  0000                     	;# 
  1444  0001                     	;# 
  1445  0002                     	;# 
  1446  0003                     	;# 
  1447  0004                     	;# 
  1448  0005                     	;# 
  1449  0006                     	;# 
  1450  0007                     	;# 
  1451  0008                     	;# 
  1452  0009                     	;# 
  1453  000A                     	;# 
  1454  000B                     	;# 
  1455  000C                     	;# 
  1456  000D                     	;# 
  1457  000E                     	;# 
  1458  000F                     	;# 
  1459  0010                     	;# 
  1460  0011                     	;# 
  1461  0012                     	;# 
  1462  0013                     	;# 
  1463  0014                     	;# 
  1464  0015                     	;# 
  1465  0016                     	;# 
  1466  0016                     	;# 
  1467  0017                     	;# 
  1468  0018                     	;# 
  1469  0019                     	;# 
  1470  001A                     	;# 
  1471  001B                     	;# 
  1472  001C                     	;# 
  1473  008C                     	;# 
  1474  008D                     	;# 
  1475  008E                     	;# 
  1476  008F                     	;# 
  1477  0090                     	;# 
  1478  0091                     	;# 
  1479  0092                     	;# 
  1480  0093                     	;# 
  1481  0094                     	;# 
  1482  0095                     	;# 
  1483  0096                     	;# 
  1484  0097                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  010F                     	;# 
  1496  0110                     	;# 
  1497  0116                     	;# 
  1498  0117                     	;# 
  1499  011D                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018F                     	;# 
  1503  0190                     	;# 
  1504  0191                     	;# 
  1505  0191                     	;# 
  1506  0192                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0197                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  020D                     	;# 
  1537  020F                     	;# 
  1538  0210                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0216                     	;# 
  1551  0216                     	;# 
  1552  0217                     	;# 
  1553  0217                     	;# 
  1554  0219                     	;# 
  1555  021A                     	;# 
  1556  021B                     	;# 
  1557  021C                     	;# 
  1558  021D                     	;# 
  1559  021E                     	;# 
  1560  021F                     	;# 
  1561  028C                     	;# 
  1562  028D                     	;# 
  1563  0291                     	;# 
  1564  0291                     	;# 
  1565  0292                     	;# 
  1566  0293                     	;# 
  1567  0298                     	;# 
  1568  0298                     	;# 
  1569  0299                     	;# 
  1570  029A                     	;# 
  1571  029D                     	;# 
  1572  029E                     	;# 
  1573  029F                     	;# 
  1574  030C                     	;# 
  1575  030D                     	;# 
  1576  0311                     	;# 
  1577  0311                     	;# 
  1578  0312                     	;# 
  1579  0313                     	;# 
  1580  0318                     	;# 
  1581  0318                     	;# 
  1582  0319                     	;# 
  1583  031A                     	;# 
  1584  031C                     	;# 
  1585  031C                     	;# 
  1586  031D                     	;# 
  1587  031E                     	;# 
  1588  038C                     	;# 
  1589  038D                     	;# 
  1590  0394                     	;# 
  1591  0395                     	;# 
  1592  0396                     	;# 
  1593  040C                     	;# 
  1594  040D                     	;# 
  1595  0411                     	;# 
  1596  0411                     	;# 
  1597  0412                     	;# 
  1598  0413                     	;# 
  1599  0414                     	;# 
  1600  0415                     	;# 
  1601  0416                     	;# 
  1602  0417                     	;# 
  1603  0418                     	;# 
  1604  0418                     	;# 
  1605  0419                     	;# 
  1606  041A                     	;# 
  1607  041B                     	;# 
  1608  041C                     	;# 
  1609  041D                     	;# 
  1610  041E                     	;# 
  1611  048D                     	;# 
  1612  0491                     	;# 
  1613  0491                     	;# 
  1614  0492                     	;# 
  1615  0492                     	;# 
  1616  0493                     	;# 
  1617  0493                     	;# 
  1618  0493                     	;# 
  1619  0494                     	;# 
  1620  0494                     	;# 
  1621  0495                     	;# 
  1622  0495                     	;# 
  1623  0496                     	;# 
  1624  0496                     	;# 
  1625  0497                     	;# 
  1626  0497                     	;# 
  1627  0595                     	;# 
  1628  0596                     	;# 
  1629  0597                     	;# 
  1630  059C                     	;# 
  1631  059D                     	;# 
  1632  059E                     	;# 
  1633  0611                     	;# 
  1634  0611                     	;# 
  1635  0612                     	;# 
  1636  0613                     	;# 
  1637  0614                     	;# 
  1638  0614                     	;# 
  1639  0615                     	;# 
  1640  0616                     	;# 
  1641  0617                     	;# 
  1642  0617                     	;# 
  1643  0618                     	;# 
  1644  0619                     	;# 
  1645  061A                     	;# 
  1646  061A                     	;# 
  1647  061B                     	;# 
  1648  061C                     	;# 
  1649  061D                     	;# 
  1650  061D                     	;# 
  1651  061E                     	;# 
  1652  061F                     	;# 
  1653  0FE4                     	;# 
  1654  0FE5                     	;# 
  1655  0FE6                     	;# 
  1656  0FE7                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEB                     	;# 
  1661  0FED                     	;# 
  1662  0FEE                     	;# 
  1663  0FEF                     	;# 
  1664  0000                     	;# 
  1665  0001                     	;# 
  1666  0002                     	;# 
  1667  0003                     	;# 
  1668  0004                     	;# 
  1669  0005                     	;# 
  1670  0006                     	;# 
  1671  0007                     	;# 
  1672  0008                     	;# 
  1673  0009                     	;# 
  1674  000A                     	;# 
  1675  000B                     	;# 
  1676  000C                     	;# 
  1677  000D                     	;# 
  1678  000E                     	;# 
  1679  000F                     	;# 
  1680  0010                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0014                     	;# 
  1685  0015                     	;# 
  1686  0016                     	;# 
  1687  0016                     	;# 
  1688  0017                     	;# 
  1689  0018                     	;# 
  1690  0019                     	;# 
  1691  001A                     	;# 
  1692  001B                     	;# 
  1693  001C                     	;# 
  1694  008C                     	;# 
  1695  008D                     	;# 
  1696  008E                     	;# 
  1697  008F                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0092                     	;# 
  1701  0093                     	;# 
  1702  0094                     	;# 
  1703  0095                     	;# 
  1704  0096                     	;# 
  1705  0097                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009B                     	;# 
  1710  009C                     	;# 
  1711  009D                     	;# 
  1712  009E                     	;# 
  1713  010C                     	;# 
  1714  010D                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  011D                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018F                     	;# 
  1724  0190                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0197                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  0199                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019D                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  020D                     	;# 
  1758  020F                     	;# 
  1759  0210                     	;# 
  1760  0211                     	;# 
  1761  0211                     	;# 
  1762  0212                     	;# 
  1763  0212                     	;# 
  1764  0213                     	;# 
  1765  0213                     	;# 
  1766  0214                     	;# 
  1767  0214                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0216                     	;# 
  1772  0216                     	;# 
  1773  0217                     	;# 
  1774  0217                     	;# 
  1775  0219                     	;# 
  1776  021A                     	;# 
  1777  021B                     	;# 
  1778  021C                     	;# 
  1779  021D                     	;# 
  1780  021E                     	;# 
  1781  021F                     	;# 
  1782  028C                     	;# 
  1783  028D                     	;# 
  1784  0291                     	;# 
  1785  0291                     	;# 
  1786  0292                     	;# 
  1787  0293                     	;# 
  1788  0298                     	;# 
  1789  0298                     	;# 
  1790  0299                     	;# 
  1791  029A                     	;# 
  1792  029D                     	;# 
  1793  029E                     	;# 
  1794  029F                     	;# 
  1795  030C                     	;# 
  1796  030D                     	;# 
  1797  0311                     	;# 
  1798  0311                     	;# 
  1799  0312                     	;# 
  1800  0313                     	;# 
  1801  0318                     	;# 
  1802  0318                     	;# 
  1803  0319                     	;# 
  1804  031A                     	;# 
  1805  031C                     	;# 
  1806  031C                     	;# 
  1807  031D                     	;# 
  1808  031E                     	;# 
  1809  038C                     	;# 
  1810  038D                     	;# 
  1811  0394                     	;# 
  1812  0395                     	;# 
  1813  0396                     	;# 
  1814  040C                     	;# 
  1815  040D                     	;# 
  1816  0411                     	;# 
  1817  0411                     	;# 
  1818  0412                     	;# 
  1819  0413                     	;# 
  1820  0414                     	;# 
  1821  0415                     	;# 
  1822  0416                     	;# 
  1823  0417                     	;# 
  1824  0418                     	;# 
  1825  0418                     	;# 
  1826  0419                     	;# 
  1827  041A                     	;# 
  1828  041B                     	;# 
  1829  041C                     	;# 
  1830  041D                     	;# 
  1831  041E                     	;# 
  1832  048D                     	;# 
  1833  0491                     	;# 
  1834  0491                     	;# 
  1835  0492                     	;# 
  1836  0492                     	;# 
  1837  0493                     	;# 
  1838  0493                     	;# 
  1839  0493                     	;# 
  1840  0494                     	;# 
  1841  0494                     	;# 
  1842  0495                     	;# 
  1843  0495                     	;# 
  1844  0496                     	;# 
  1845  0496                     	;# 
  1846  0497                     	;# 
  1847  0497                     	;# 
  1848  0595                     	;# 
  1849  0596                     	;# 
  1850  0597                     	;# 
  1851  059C                     	;# 
  1852  059D                     	;# 
  1853  059E                     	;# 
  1854  0611                     	;# 
  1855  0611                     	;# 
  1856  0612                     	;# 
  1857  0613                     	;# 
  1858  0614                     	;# 
  1859  0614                     	;# 
  1860  0615                     	;# 
  1861  0616                     	;# 
  1862  0617                     	;# 
  1863  0617                     	;# 
  1864  0618                     	;# 
  1865  0619                     	;# 
  1866  061A                     	;# 
  1867  061A                     	;# 
  1868  061B                     	;# 
  1869  061C                     	;# 
  1870  061D                     	;# 
  1871  061D                     	;# 
  1872  061E                     	;# 
  1873  061F                     	;# 
  1874  0FE4                     	;# 
  1875  0FE5                     	;# 
  1876  0FE6                     	;# 
  1877  0FE7                     	;# 
  1878  0FE8                     	;# 
  1879  0FE9                     	;# 
  1880  0FEA                     	;# 
  1881  0FEB                     	;# 
  1882  0FED                     	;# 
  1883  0FEE                     	;# 
  1884  0FEF                     	;# 
  1885  0000                     	;# 
  1886  0001                     	;# 
  1887  0002                     	;# 
  1888  0003                     	;# 
  1889  0004                     	;# 
  1890  0005                     	;# 
  1891  0006                     	;# 
  1892  0007                     	;# 
  1893  0008                     	;# 
  1894  0009                     	;# 
  1895  000A                     	;# 
  1896  000B                     	;# 
  1897  000C                     	;# 
  1898  000D                     	;# 
  1899  000E                     	;# 
  1900  000F                     	;# 
  1901  0010                     	;# 
  1902  0011                     	;# 
  1903  0012                     	;# 
  1904  0013                     	;# 
  1905  0014                     	;# 
  1906  0015                     	;# 
  1907  0016                     	;# 
  1908  0016                     	;# 
  1909  0017                     	;# 
  1910  0018                     	;# 
  1911  0019                     	;# 
  1912  001A                     	;# 
  1913  001B                     	;# 
  1914  001C                     	;# 
  1915  008C                     	;# 
  1916  008D                     	;# 
  1917  008E                     	;# 
  1918  008F                     	;# 
  1919  0090                     	;# 
  1920  0091                     	;# 
  1921  0092                     	;# 
  1922  0093                     	;# 
  1923  0094                     	;# 
  1924  0095                     	;# 
  1925  0096                     	;# 
  1926  0097                     	;# 
  1927  0099                     	;# 
  1928  009A                     	;# 
  1929  009B                     	;# 
  1930  009B                     	;# 
  1931  009C                     	;# 
  1932  009D                     	;# 
  1933  009E                     	;# 
  1934  010C                     	;# 
  1935  010D                     	;# 
  1936  010E                     	;# 
  1937  010F                     	;# 
  1938  0110                     	;# 
  1939  0116                     	;# 
  1940  0117                     	;# 
  1941  011D                     	;# 
  1942  018C                     	;# 
  1943  018D                     	;# 
  1944  018F                     	;# 
  1945  0190                     	;# 
  1946  0191                     	;# 
  1947  0191                     	;# 
  1948  0192                     	;# 
  1949  0193                     	;# 
  1950  0193                     	;# 
  1951  0194                     	;# 
  1952  0195                     	;# 
  1953  0196                     	;# 
  1954  0197                     	;# 
  1955  0199                     	;# 
  1956  0199                     	;# 
  1957  0199                     	;# 
  1958  019A                     	;# 
  1959  019A                     	;# 
  1960  019A                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019B                     	;# 
  1964  019B                     	;# 
  1965  019B                     	;# 
  1966  019C                     	;# 
  1967  019C                     	;# 
  1968  019C                     	;# 
  1969  019D                     	;# 
  1970  019D                     	;# 
  1971  019D                     	;# 
  1972  019E                     	;# 
  1973  019E                     	;# 
  1974  019E                     	;# 
  1975  019F                     	;# 
  1976  019F                     	;# 
  1977  019F                     	;# 
  1978  020D                     	;# 
  1979  020F                     	;# 
  1980  0210                     	;# 
  1981  0211                     	;# 
  1982  0211                     	;# 
  1983  0212                     	;# 
  1984  0212                     	;# 
  1985  0213                     	;# 
  1986  0213                     	;# 
  1987  0214                     	;# 
  1988  0214                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0215                     	;# 
  1992  0216                     	;# 
  1993  0216                     	;# 
  1994  0217                     	;# 
  1995  0217                     	;# 
  1996  0219                     	;# 
  1997  021A                     	;# 
  1998  021B                     	;# 
  1999  021C                     	;# 
  2000  021D                     	;# 
  2001  021E                     	;# 
  2002  021F                     	;# 
  2003  028C                     	;# 
  2004  028D                     	;# 
  2005  0291                     	;# 
  2006  0291                     	;# 
  2007  0292                     	;# 
  2008  0293                     	;# 
  2009  0298                     	;# 
  2010  0298                     	;# 
  2011  0299                     	;# 
  2012  029A                     	;# 
  2013  029D                     	;# 
  2014  029E                     	;# 
  2015  029F                     	;# 
  2016  030C                     	;# 
  2017  030D                     	;# 
  2018  0311                     	;# 
  2019  0311                     	;# 
  2020  0312                     	;# 
  2021  0313                     	;# 
  2022  0318                     	;# 
  2023  0318                     	;# 
  2024  0319                     	;# 
  2025  031A                     	;# 
  2026  031C                     	;# 
  2027  031C                     	;# 
  2028  031D                     	;# 
  2029  031E                     	;# 
  2030  038C                     	;# 
  2031  038D                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  040C                     	;# 
  2036  040D                     	;# 
  2037  0411                     	;# 
  2038  0411                     	;# 
  2039  0412                     	;# 
  2040  0413                     	;# 
  2041  0414                     	;# 
  2042  0415                     	;# 
  2043  0416                     	;# 
  2044  0417                     	;# 
  2045  0418                     	;# 
  2046  0418                     	;# 
  2047  0419                     	;# 
  2048  041A                     	;# 
  2049  041B                     	;# 
  2050  041C                     	;# 
  2051  041D                     	;# 
  2052  041E                     	;# 
  2053  048D                     	;# 
  2054  0491                     	;# 
  2055  0491                     	;# 
  2056  0492                     	;# 
  2057  0492                     	;# 
  2058  0493                     	;# 
  2059  0493                     	;# 
  2060  0493                     	;# 
  2061  0494                     	;# 
  2062  0494                     	;# 
  2063  0495                     	;# 
  2064  0495                     	;# 
  2065  0496                     	;# 
  2066  0496                     	;# 
  2067  0497                     	;# 
  2068  0497                     	;# 
  2069  0595                     	;# 
  2070  0596                     	;# 
  2071  0597                     	;# 
  2072  059C                     	;# 
  2073  059D                     	;# 
  2074  059E                     	;# 
  2075  0611                     	;# 
  2076  0611                     	;# 
  2077  0612                     	;# 
  2078  0613                     	;# 
  2079  0614                     	;# 
  2080  0614                     	;# 
  2081  0615                     	;# 
  2082  0616                     	;# 
  2083  0617                     	;# 
  2084  0617                     	;# 
  2085  0618                     	;# 
  2086  0619                     	;# 
  2087  061A                     	;# 
  2088  061A                     	;# 
  2089  061B                     	;# 
  2090  061C                     	;# 
  2091  061D                     	;# 
  2092  061D                     	;# 
  2093  061E                     	;# 
  2094  061F                     	;# 
  2095  0FE4                     	;# 
  2096  0FE5                     	;# 
  2097  0FE6                     	;# 
  2098  0FE7                     	;# 
  2099  0FE8                     	;# 
  2100  0FE9                     	;# 
  2101  0FEA                     	;# 
  2102  0FEB                     	;# 
  2103  0FED                     	;# 
  2104  0FEE                     	;# 
  2105  0FEF                     	;# 
  2106  0000                     	;# 
  2107  0001                     	;# 
  2108  0002                     	;# 
  2109  0003                     	;# 
  2110  0004                     	;# 
  2111  0005                     	;# 
  2112  0006                     	;# 
  2113  0007                     	;# 
  2114  0008                     	;# 
  2115  0009                     	;# 
  2116  000A                     	;# 
  2117  000B                     	;# 
  2118  000C                     	;# 
  2119  000D                     	;# 
  2120  000E                     	;# 
  2121  000F                     	;# 
  2122  0010                     	;# 
  2123  0011                     	;# 
  2124  0012                     	;# 
  2125  0013                     	;# 
  2126  0014                     	;# 
  2127  0015                     	;# 
  2128  0016                     	;# 
  2129  0016                     	;# 
  2130  0017                     	;# 
  2131  0018                     	;# 
  2132  0019                     	;# 
  2133  001A                     	;# 
  2134  001B                     	;# 
  2135  001C                     	;# 
  2136  008C                     	;# 
  2137  008D                     	;# 
  2138  008E                     	;# 
  2139  008F                     	;# 
  2140  0090                     	;# 
  2141  0091                     	;# 
  2142  0092                     	;# 
  2143  0093                     	;# 
  2144  0094                     	;# 
  2145  0095                     	;# 
  2146  0096                     	;# 
  2147  0097                     	;# 
  2148  0099                     	;# 
  2149  009A                     	;# 
  2150  009B                     	;# 
  2151  009B                     	;# 
  2152  009C                     	;# 
  2153  009D                     	;# 
  2154  009E                     	;# 
  2155  010C                     	;# 
  2156  010D                     	;# 
  2157  010E                     	;# 
  2158  010F                     	;# 
  2159  0110                     	;# 
  2160  0116                     	;# 
  2161  0117                     	;# 
  2162  011D                     	;# 
  2163  018C                     	;# 
  2164  018D                     	;# 
  2165  018F                     	;# 
  2166  0190                     	;# 
  2167  0191                     	;# 
  2168  0191                     	;# 
  2169  0192                     	;# 
  2170  0193                     	;# 
  2171  0193                     	;# 
  2172  0194                     	;# 
  2173  0195                     	;# 
  2174  0196                     	;# 
  2175  0197                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  0199                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019A                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019B                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019C                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019D                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019E                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  019F                     	;# 
  2199  020D                     	;# 
  2200  020F                     	;# 
  2201  0210                     	;# 
  2202  0211                     	;# 
  2203  0211                     	;# 
  2204  0212                     	;# 
  2205  0212                     	;# 
  2206  0213                     	;# 
  2207  0213                     	;# 
  2208  0214                     	;# 
  2209  0214                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0215                     	;# 
  2213  0216                     	;# 
  2214  0216                     	;# 
  2215  0217                     	;# 
  2216  0217                     	;# 
  2217  0219                     	;# 
  2218  021A                     	;# 
  2219  021B                     	;# 
  2220  021C                     	;# 
  2221  021D                     	;# 
  2222  021E                     	;# 
  2223  021F                     	;# 
  2224  028C                     	;# 
  2225  028D                     	;# 
  2226  0291                     	;# 
  2227  0291                     	;# 
  2228  0292                     	;# 
  2229  0293                     	;# 
  2230  0298                     	;# 
  2231  0298                     	;# 
  2232  0299                     	;# 
  2233  029A                     	;# 
  2234  029D                     	;# 
  2235  029E                     	;# 
  2236  029F                     	;# 
  2237  030C                     	;# 
  2238  030D                     	;# 
  2239  0311                     	;# 
  2240  0311                     	;# 
  2241  0312                     	;# 
  2242  0313                     	;# 
  2243  0318                     	;# 
  2244  0318                     	;# 
  2245  0319                     	;# 
  2246  031A                     	;# 
  2247  031C                     	;# 
  2248  031C                     	;# 
  2249  031D                     	;# 
  2250  031E                     	;# 
  2251  038C                     	;# 
  2252  038D                     	;# 
  2253  0394                     	;# 
  2254  0395                     	;# 
  2255  0396                     	;# 
  2256  040C                     	;# 
  2257  040D                     	;# 
  2258  0411                     	;# 
  2259  0411                     	;# 
  2260  0412                     	;# 
  2261  0413                     	;# 
  2262  0414                     	;# 
  2263  0415                     	;# 
  2264  0416                     	;# 
  2265  0417                     	;# 
  2266  0418                     	;# 
  2267  0418                     	;# 
  2268  0419                     	;# 
  2269  041A                     	;# 
  2270  041B                     	;# 
  2271  041C                     	;# 
  2272  041D                     	;# 
  2273  041E                     	;# 
  2274  048D                     	;# 
  2275  0491                     	;# 
  2276  0491                     	;# 
  2277  0492                     	;# 
  2278  0492                     	;# 
  2279  0493                     	;# 
  2280  0493                     	;# 
  2281  0493                     	;# 
  2282  0494                     	;# 
  2283  0494                     	;# 
  2284  0495                     	;# 
  2285  0495                     	;# 
  2286  0496                     	;# 
  2287  0496                     	;# 
  2288  0497                     	;# 
  2289  0497                     	;# 
  2290  0595                     	;# 
  2291  0596                     	;# 
  2292  0597                     	;# 
  2293  059C                     	;# 
  2294  059D                     	;# 
  2295  059E                     	;# 
  2296  0611                     	;# 
  2297  0611                     	;# 
  2298  0612                     	;# 
  2299  0613                     	;# 
  2300  0614                     	;# 
  2301  0614                     	;# 
  2302  0615                     	;# 
  2303  0616                     	;# 
  2304  0617                     	;# 
  2305  0617                     	;# 
  2306  0618                     	;# 
  2307  0619                     	;# 
  2308  061A                     	;# 
  2309  061A                     	;# 
  2310  061B                     	;# 
  2311  061C                     	;# 
  2312  061D                     	;# 
  2313  061D                     	;# 
  2314  061E                     	;# 
  2315  061F                     	;# 
  2316  0FE4                     	;# 
  2317  0FE5                     	;# 
  2318  0FE6                     	;# 
  2319  0FE7                     	;# 
  2320  0FE8                     	;# 
  2321  0FE9                     	;# 
  2322  0FEA                     	;# 
  2323  0FEB                     	;# 
  2324  0FED                     	;# 
  2325  0FEE                     	;# 
  2326  0FEF                     	;# 
  2327  0000                     	;# 
  2328  0001                     	;# 
  2329  0002                     	;# 
  2330  0003                     	;# 
  2331  0004                     	;# 
  2332  0005                     	;# 
  2333  0006                     	;# 
  2334  0007                     	;# 
  2335  0008                     	;# 
  2336  0009                     	;# 
  2337  000A                     	;# 
  2338  000B                     	;# 
  2339  000C                     	;# 
  2340  000D                     	;# 
  2341  000E                     	;# 
  2342  000F                     	;# 
  2343  0010                     	;# 
  2344  0011                     	;# 
  2345  0012                     	;# 
  2346  0013                     	;# 
  2347  0014                     	;# 
  2348  0015                     	;# 
  2349  0016                     	;# 
  2350  0016                     	;# 
  2351  0017                     	;# 
  2352  0018                     	;# 
  2353  0019                     	;# 
  2354  001A                     	;# 
  2355  001B                     	;# 
  2356  001C                     	;# 
  2357  008C                     	;# 
  2358  008D                     	;# 
  2359  008E                     	;# 
  2360  008F                     	;# 
  2361  0090                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0094                     	;# 
  2366  0095                     	;# 
  2367  0096                     	;# 
  2368  0097                     	;# 
  2369  0099                     	;# 
  2370  009A                     	;# 
  2371  009B                     	;# 
  2372  009B                     	;# 
  2373  009C                     	;# 
  2374  009D                     	;# 
  2375  009E                     	;# 
  2376  010C                     	;# 
  2377  010D                     	;# 
  2378  010E                     	;# 
  2379  010F                     	;# 
  2380  0110                     	;# 
  2381  0116                     	;# 
  2382  0117                     	;# 
  2383  011D                     	;# 
  2384  018C                     	;# 
  2385  018D                     	;# 
  2386  018F                     	;# 
  2387  0190                     	;# 
  2388  0191                     	;# 
  2389  0191                     	;# 
  2390  0192                     	;# 
  2391  0193                     	;# 
  2392  0193                     	;# 
  2393  0194                     	;# 
  2394  0195                     	;# 
  2395  0196                     	;# 
  2396  0197                     	;# 
  2397  0199                     	;# 
  2398  0199                     	;# 
  2399  0199                     	;# 
  2400  019A                     	;# 
  2401  019A                     	;# 
  2402  019A                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019B                     	;# 
  2408  019C                     	;# 
  2409  019C                     	;# 
  2410  019C                     	;# 
  2411  019D                     	;# 
  2412  019D                     	;# 
  2413  019D                     	;# 
  2414  019E                     	;# 
  2415  019E                     	;# 
  2416  019E                     	;# 
  2417  019F                     	;# 
  2418  019F                     	;# 
  2419  019F                     	;# 
  2420  020D                     	;# 
  2421  020F                     	;# 
  2422  0210                     	;# 
  2423  0211                     	;# 
  2424  0211                     	;# 
  2425  0212                     	;# 
  2426  0212                     	;# 
  2427  0213                     	;# 
  2428  0213                     	;# 
  2429  0214                     	;# 
  2430  0214                     	;# 
  2431  0215                     	;# 
  2432  0215                     	;# 
  2433  0215                     	;# 
  2434  0216                     	;# 
  2435  0216                     	;# 
  2436  0217                     	;# 
  2437  0217                     	;# 
  2438  0219                     	;# 
  2439  021A                     	;# 
  2440  021B                     	;# 
  2441  021C                     	;# 
  2442  021D                     	;# 
  2443  021E                     	;# 
  2444  021F                     	;# 
  2445  028C                     	;# 
  2446  028D                     	;# 
  2447  0291                     	;# 
  2448  0291                     	;# 
  2449  0292                     	;# 
  2450  0293                     	;# 
  2451  0298                     	;# 
  2452  0298                     	;# 
  2453  0299                     	;# 
  2454  029A                     	;# 
  2455  029D                     	;# 
  2456  029E                     	;# 
  2457  029F                     	;# 
  2458  030C                     	;# 
  2459  030D                     	;# 
  2460  0311                     	;# 
  2461  0311                     	;# 
  2462  0312                     	;# 
  2463  0313                     	;# 
  2464  0318                     	;# 
  2465  0318                     	;# 
  2466  0319                     	;# 
  2467  031A                     	;# 
  2468  031C                     	;# 
  2469  031C                     	;# 
  2470  031D                     	;# 
  2471  031E                     	;# 
  2472  038C                     	;# 
  2473  038D                     	;# 
  2474  0394                     	;# 
  2475  0395                     	;# 
  2476  0396                     	;# 
  2477  040C                     	;# 
  2478  040D                     	;# 
  2479  0411                     	;# 
  2480  0411                     	;# 
  2481  0412                     	;# 
  2482  0413                     	;# 
  2483  0414                     	;# 
  2484  0415                     	;# 
  2485  0416                     	;# 
  2486  0417                     	;# 
  2487  0418                     	;# 
  2488  0418                     	;# 
  2489  0419                     	;# 
  2490  041A                     	;# 
  2491  041B                     	;# 
  2492  041C                     	;# 
  2493  041D                     	;# 
  2494  041E                     	;# 
  2495  048D                     	;# 
  2496  0491                     	;# 
  2497  0491                     	;# 
  2498  0492                     	;# 
  2499  0492                     	;# 
  2500  0493                     	;# 
  2501  0493                     	;# 
  2502  0493                     	;# 
  2503  0494                     	;# 
  2504  0494                     	;# 
  2505  0495                     	;# 
  2506  0495                     	;# 
  2507  0496                     	;# 
  2508  0496                     	;# 
  2509  0497                     	;# 
  2510  0497                     	;# 
  2511  0595                     	;# 
  2512  0596                     	;# 
  2513  0597                     	;# 
  2514  059C                     	;# 
  2515  059D                     	;# 
  2516  059E                     	;# 
  2517  0611                     	;# 
  2518  0611                     	;# 
  2519  0612                     	;# 
  2520  0613                     	;# 
  2521  0614                     	;# 
  2522  0614                     	;# 
  2523  0615                     	;# 
  2524  0616                     	;# 
  2525  0617                     	;# 
  2526  0617                     	;# 
  2527  0618                     	;# 
  2528  0619                     	;# 
  2529  061A                     	;# 
  2530  061A                     	;# 
  2531  061B                     	;# 
  2532  061C                     	;# 
  2533  061D                     	;# 
  2534  061D                     	;# 
  2535  061E                     	;# 
  2536  061F                     	;# 
  2537  0FE4                     	;# 
  2538  0FE5                     	;# 
  2539  0FE6                     	;# 
  2540  0FE7                     	;# 
  2541  0FE8                     	;# 
  2542  0FE9                     	;# 
  2543  0FEA                     	;# 
  2544  0FEB                     	;# 
  2545  0FED                     	;# 
  2546  0FEE                     	;# 
  2547  0FEF                     	;# 
  2548  0000                     	;# 
  2549  0001                     	;# 
  2550  0002                     	;# 
  2551  0003                     	;# 
  2552  0004                     	;# 
  2553  0005                     	;# 
  2554  0006                     	;# 
  2555  0007                     	;# 
  2556  0008                     	;# 
  2557  0009                     	;# 
  2558  000A                     	;# 
  2559  000B                     	;# 
  2560  000C                     	;# 
  2561  000D                     	;# 
  2562  000E                     	;# 
  2563  000F                     	;# 
  2564  0010                     	;# 
  2565  0011                     	;# 
  2566  0012                     	;# 
  2567  0013                     	;# 
  2568  0014                     	;# 
  2569  0015                     	;# 
  2570  0016                     	;# 
  2571  0016                     	;# 
  2572  0017                     	;# 
  2573  0018                     	;# 
  2574  0019                     	;# 
  2575  001A                     	;# 
  2576  001B                     	;# 
  2577  001C                     	;# 
  2578  008C                     	;# 
  2579  008D                     	;# 
  2580  008E                     	;# 
  2581  008F                     	;# 
  2582  0090                     	;# 
  2583  0091                     	;# 
  2584  0092                     	;# 
  2585  0093                     	;# 
  2586  0094                     	;# 
  2587  0095                     	;# 
  2588  0096                     	;# 
  2589  0097                     	;# 
  2590  0099                     	;# 
  2591  009A                     	;# 
  2592  009B                     	;# 
  2593  009B                     	;# 
  2594  009C                     	;# 
  2595  009D                     	;# 
  2596  009E                     	;# 
  2597  010C                     	;# 
  2598  010D                     	;# 
  2599  010E                     	;# 
  2600  010F                     	;# 
  2601  0110                     	;# 
  2602  0116                     	;# 
  2603  0117                     	;# 
  2604  011D                     	;# 
  2605  018C                     	;# 
  2606  018D                     	;# 
  2607  018F                     	;# 
  2608  0190                     	;# 
  2609  0191                     	;# 
  2610  0191                     	;# 
  2611  0192                     	;# 
  2612  0193                     	;# 
  2613  0193                     	;# 
  2614  0194                     	;# 
  2615  0195                     	;# 
  2616  0196                     	;# 
  2617  0197                     	;# 
  2618  0199                     	;# 
  2619  0199                     	;# 
  2620  0199                     	;# 
  2621  019A                     	;# 
  2622  019A                     	;# 
  2623  019A                     	;# 
  2624  019B                     	;# 
  2625  019B                     	;# 
  2626  019B                     	;# 
  2627  019B                     	;# 
  2628  019B                     	;# 
  2629  019C                     	;# 
  2630  019C                     	;# 
  2631  019C                     	;# 
  2632  019D                     	;# 
  2633  019D                     	;# 
  2634  019D                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019E                     	;# 
  2638  019F                     	;# 
  2639  019F                     	;# 
  2640  019F                     	;# 
  2641  020D                     	;# 
  2642  020F                     	;# 
  2643  0210                     	;# 
  2644  0211                     	;# 
  2645  0211                     	;# 
  2646  0212                     	;# 
  2647  0212                     	;# 
  2648  0213                     	;# 
  2649  0213                     	;# 
  2650  0214                     	;# 
  2651  0214                     	;# 
  2652  0215                     	;# 
  2653  0215                     	;# 
  2654  0215                     	;# 
  2655  0216                     	;# 
  2656  0216                     	;# 
  2657  0217                     	;# 
  2658  0217                     	;# 
  2659  0219                     	;# 
  2660  021A                     	;# 
  2661  021B                     	;# 
  2662  021C                     	;# 
  2663  021D                     	;# 
  2664  021E                     	;# 
  2665  021F                     	;# 
  2666  028C                     	;# 
  2667  028D                     	;# 
  2668  0291                     	;# 
  2669  0291                     	;# 
  2670  0292                     	;# 
  2671  0293                     	;# 
  2672  0298                     	;# 
  2673  0298                     	;# 
  2674  0299                     	;# 
  2675  029A                     	;# 
  2676  029D                     	;# 
  2677  029E                     	;# 
  2678  029F                     	;# 
  2679  030C                     	;# 
  2680  030D                     	;# 
  2681  0311                     	;# 
  2682  0311                     	;# 
  2683  0312                     	;# 
  2684  0313                     	;# 
  2685  0318                     	;# 
  2686  0318                     	;# 
  2687  0319                     	;# 
  2688  031A                     	;# 
  2689  031C                     	;# 
  2690  031C                     	;# 
  2691  031D                     	;# 
  2692  031E                     	;# 
  2693  038C                     	;# 
  2694  038D                     	;# 
  2695  0394                     	;# 
  2696  0395                     	;# 
  2697  0396                     	;# 
  2698  040C                     	;# 
  2699  040D                     	;# 
  2700  0411                     	;# 
  2701  0411                     	;# 
  2702  0412                     	;# 
  2703  0413                     	;# 
  2704  0414                     	;# 
  2705  0415                     	;# 
  2706  0416                     	;# 
  2707  0417                     	;# 
  2708  0418                     	;# 
  2709  0418                     	;# 
  2710  0419                     	;# 
  2711  041A                     	;# 
  2712  041B                     	;# 
  2713  041C                     	;# 
  2714  041D                     	;# 
  2715  041E                     	;# 
  2716  048D                     	;# 
  2717  0491                     	;# 
  2718  0491                     	;# 
  2719  0492                     	;# 
  2720  0492                     	;# 
  2721  0493                     	;# 
  2722  0493                     	;# 
  2723  0493                     	;# 
  2724  0494                     	;# 
  2725  0494                     	;# 
  2726  0495                     	;# 
  2727  0495                     	;# 
  2728  0496                     	;# 
  2729  0496                     	;# 
  2730  0497                     	;# 
  2731  0497                     	;# 
  2732  0595                     	;# 
  2733  0596                     	;# 
  2734  0597                     	;# 
  2735  059C                     	;# 
  2736  059D                     	;# 
  2737  059E                     	;# 
  2738  0611                     	;# 
  2739  0611                     	;# 
  2740  0612                     	;# 
  2741  0613                     	;# 
  2742  0614                     	;# 
  2743  0614                     	;# 
  2744  0615                     	;# 
  2745  0616                     	;# 
  2746  0617                     	;# 
  2747  0617                     	;# 
  2748  0618                     	;# 
  2749  0619                     	;# 
  2750  061A                     	;# 
  2751  061A                     	;# 
  2752  061B                     	;# 
  2753  061C                     	;# 
  2754  061D                     	;# 
  2755  061D                     	;# 
  2756  061E                     	;# 
  2757  061F                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769  0000                     	;# 
  2770  0001                     	;# 
  2771  0002                     	;# 
  2772  0003                     	;# 
  2773  0004                     	;# 
  2774  0005                     	;# 
  2775  0006                     	;# 
  2776  0007                     	;# 
  2777  0008                     	;# 
  2778  0009                     	;# 
  2779  000A                     	;# 
  2780  000B                     	;# 
  2781  000C                     	;# 
  2782  000D                     	;# 
  2783  000E                     	;# 
  2784  000F                     	;# 
  2785  0010                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0014                     	;# 
  2790  0015                     	;# 
  2791  0016                     	;# 
  2792  0016                     	;# 
  2793  0017                     	;# 
  2794  0018                     	;# 
  2795  0019                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001C                     	;# 
  2799  008C                     	;# 
  2800  008D                     	;# 
  2801  008E                     	;# 
  2802  008F                     	;# 
  2803  0090                     	;# 
  2804  0091                     	;# 
  2805  0092                     	;# 
  2806  0093                     	;# 
  2807  0094                     	;# 
  2808  0095                     	;# 
  2809  0096                     	;# 
  2810  0097                     	;# 
  2811  0099                     	;# 
  2812  009A                     	;# 
  2813  009B                     	;# 
  2814  009B                     	;# 
  2815  009C                     	;# 
  2816  009D                     	;# 
  2817  009E                     	;# 
  2818  010C                     	;# 
  2819  010D                     	;# 
  2820  010E                     	;# 
  2821  010F                     	;# 
  2822  0110                     	;# 
  2823  0116                     	;# 
  2824  0117                     	;# 
  2825  011D                     	;# 
  2826  018C                     	;# 
  2827  018D                     	;# 
  2828  018F                     	;# 
  2829  0190                     	;# 
  2830  0191                     	;# 
  2831  0191                     	;# 
  2832  0192                     	;# 
  2833  0193                     	;# 
  2834  0193                     	;# 
  2835  0194                     	;# 
  2836  0195                     	;# 
  2837  0196                     	;# 
  2838  0197                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  0199                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019A                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019B                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019C                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019D                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019E                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  019F                     	;# 
  2862  020D                     	;# 
  2863  020F                     	;# 
  2864  0210                     	;# 
  2865  0211                     	;# 
  2866  0211                     	;# 
  2867  0212                     	;# 
  2868  0212                     	;# 
  2869  0213                     	;# 
  2870  0213                     	;# 
  2871  0214                     	;# 
  2872  0214                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0215                     	;# 
  2876  0216                     	;# 
  2877  0216                     	;# 
  2878  0217                     	;# 
  2879  0217                     	;# 
  2880  0219                     	;# 
  2881  021A                     	;# 
  2882  021B                     	;# 
  2883  021C                     	;# 
  2884  021D                     	;# 
  2885  021E                     	;# 
  2886  021F                     	;# 
  2887  028C                     	;# 
  2888  028D                     	;# 
  2889  0291                     	;# 
  2890  0291                     	;# 
  2891  0292                     	;# 
  2892  0293                     	;# 
  2893  0298                     	;# 
  2894  0298                     	;# 
  2895  0299                     	;# 
  2896  029A                     	;# 
  2897  029D                     	;# 
  2898  029E                     	;# 
  2899  029F                     	;# 
  2900  030C                     	;# 
  2901  030D                     	;# 
  2902  0311                     	;# 
  2903  0311                     	;# 
  2904  0312                     	;# 
  2905  0313                     	;# 
  2906  0318                     	;# 
  2907  0318                     	;# 
  2908  0319                     	;# 
  2909  031A                     	;# 
  2910  031C                     	;# 
  2911  031C                     	;# 
  2912  031D                     	;# 
  2913  031E                     	;# 
  2914  038C                     	;# 
  2915  038D                     	;# 
  2916  0394                     	;# 
  2917  0395                     	;# 
  2918  0396                     	;# 
  2919  040C                     	;# 
  2920  040D                     	;# 
  2921  0411                     	;# 
  2922  0411                     	;# 
  2923  0412                     	;# 
  2924  0413                     	;# 
  2925  0414                     	;# 
  2926  0415                     	;# 
  2927  0416                     	;# 
  2928  0417                     	;# 
  2929  0418                     	;# 
  2930  0418                     	;# 
  2931  0419                     	;# 
  2932  041A                     	;# 
  2933  041B                     	;# 
  2934  041C                     	;# 
  2935  041D                     	;# 
  2936  041E                     	;# 
  2937  048D                     	;# 
  2938  0491                     	;# 
  2939  0491                     	;# 
  2940  0492                     	;# 
  2941  0492                     	;# 
  2942  0493                     	;# 
  2943  0493                     	;# 
  2944  0493                     	;# 
  2945  0494                     	;# 
  2946  0494                     	;# 
  2947  0495                     	;# 
  2948  0495                     	;# 
  2949  0496                     	;# 
  2950  0496                     	;# 
  2951  0497                     	;# 
  2952  0497                     	;# 
  2953  0595                     	;# 
  2954  0596                     	;# 
  2955  0597                     	;# 
  2956  059C                     	;# 
  2957  059D                     	;# 
  2958  059E                     	;# 
  2959  0611                     	;# 
  2960  0611                     	;# 
  2961  0612                     	;# 
  2962  0613                     	;# 
  2963  0614                     	;# 
  2964  0614                     	;# 
  2965  0615                     	;# 
  2966  0616                     	;# 
  2967  0617                     	;# 
  2968  0617                     	;# 
  2969  0618                     	;# 
  2970  0619                     	;# 
  2971  061A                     	;# 
  2972  061A                     	;# 
  2973  061B                     	;# 
  2974  061C                     	;# 
  2975  061D                     	;# 
  2976  061D                     	;# 
  2977  061E                     	;# 
  2978  061F                     	;# 
  2979  0FE4                     	;# 
  2980  0FE5                     	;# 
  2981  0FE6                     	;# 
  2982  0FE7                     	;# 
  2983  0FE8                     	;# 
  2984  0FE9                     	;# 
  2985  0FEA                     	;# 
  2986  0FEB                     	;# 
  2987  0FED                     	;# 
  2988  0FEE                     	;# 
  2989  0FEF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000D                     	;# 
  3004  000E                     	;# 
  3005  000F                     	;# 
  3006  0010                     	;# 
  3007  0011                     	;# 
  3008  0012                     	;# 
  3009  0013                     	;# 
  3010  0014                     	;# 
  3011  0015                     	;# 
  3012  0016                     	;# 
  3013  0016                     	;# 
  3014  0017                     	;# 
  3015  0018                     	;# 
  3016  0019                     	;# 
  3017  001A                     	;# 
  3018  001B                     	;# 
  3019  001C                     	;# 
  3020  008C                     	;# 
  3021  008D                     	;# 
  3022  008E                     	;# 
  3023  008F                     	;# 
  3024  0090                     	;# 
  3025  0091                     	;# 
  3026  0092                     	;# 
  3027  0093                     	;# 
  3028  0094                     	;# 
  3029  0095                     	;# 
  3030  0096                     	;# 
  3031  0097                     	;# 
  3032  0099                     	;# 
  3033  009A                     	;# 
  3034  009B                     	;# 
  3035  009B                     	;# 
  3036  009C                     	;# 
  3037  009D                     	;# 
  3038  009E                     	;# 
  3039  010C                     	;# 
  3040  010D                     	;# 
  3041  010E                     	;# 
  3042  010F                     	;# 
  3043  0110                     	;# 
  3044  0116                     	;# 
  3045  0117                     	;# 
  3046  011D                     	;# 
  3047  018C                     	;# 
  3048  018D                     	;# 
  3049  018F                     	;# 
  3050  0190                     	;# 
  3051  0191                     	;# 
  3052  0191                     	;# 
  3053  0192                     	;# 
  3054  0193                     	;# 
  3055  0193                     	;# 
  3056  0194                     	;# 
  3057  0195                     	;# 
  3058  0196                     	;# 
  3059  0197                     	;# 
  3060  0199                     	;# 
  3061  0199                     	;# 
  3062  0199                     	;# 
  3063  019A                     	;# 
  3064  019A                     	;# 
  3065  019A                     	;# 
  3066  019B                     	;# 
  3067  019B                     	;# 
  3068  019B                     	;# 
  3069  019B                     	;# 
  3070  019B                     	;# 
  3071  019C                     	;# 
  3072  019C                     	;# 
  3073  019C                     	;# 
  3074  019D                     	;# 
  3075  019D                     	;# 
  3076  019D                     	;# 
  3077  019E                     	;# 
  3078  019E                     	;# 
  3079  019E                     	;# 
  3080  019F                     	;# 
  3081  019F                     	;# 
  3082  019F                     	;# 
  3083  020D                     	;# 
  3084  020F                     	;# 
  3085  0210                     	;# 
  3086  0211                     	;# 
  3087  0211                     	;# 
  3088  0212                     	;# 
  3089  0212                     	;# 
  3090  0213                     	;# 
  3091  0213                     	;# 
  3092  0214                     	;# 
  3093  0214                     	;# 
  3094  0215                     	;# 
  3095  0215                     	;# 
  3096  0215                     	;# 
  3097  0216                     	;# 
  3098  0216                     	;# 
  3099  0217                     	;# 
  3100  0217                     	;# 
  3101  0219                     	;# 
  3102  021A                     	;# 
  3103  021B                     	;# 
  3104  021C                     	;# 
  3105  021D                     	;# 
  3106  021E                     	;# 
  3107  021F                     	;# 
  3108  028C                     	;# 
  3109  028D                     	;# 
  3110  0291                     	;# 
  3111  0291                     	;# 
  3112  0292                     	;# 
  3113  0293                     	;# 
  3114  0298                     	;# 
  3115  0298                     	;# 
  3116  0299                     	;# 
  3117  029A                     	;# 
  3118  029D                     	;# 
  3119  029E                     	;# 
  3120  029F                     	;# 
  3121  030C                     	;# 
  3122  030D                     	;# 
  3123  0311                     	;# 
  3124  0311                     	;# 
  3125  0312                     	;# 
  3126  0313                     	;# 
  3127  0318                     	;# 
  3128  0318                     	;# 
  3129  0319                     	;# 
  3130  031A                     	;# 
  3131  031C                     	;# 
  3132  031C                     	;# 
  3133  031D                     	;# 
  3134  031E                     	;# 
  3135  038C                     	;# 
  3136  038D                     	;# 
  3137  0394                     	;# 
  3138  0395                     	;# 
  3139  0396                     	;# 
  3140  040C                     	;# 
  3141  040D                     	;# 
  3142  0411                     	;# 
  3143  0411                     	;# 
  3144  0412                     	;# 
  3145  0413                     	;# 
  3146  0414                     	;# 
  3147  0415                     	;# 
  3148  0416                     	;# 
  3149  0417                     	;# 
  3150  0418                     	;# 
  3151  0418                     	;# 
  3152  0419                     	;# 
  3153  041A                     	;# 
  3154  041B                     	;# 
  3155  041C                     	;# 
  3156  041D                     	;# 
  3157  041E                     	;# 
  3158  048D                     	;# 
  3159  0491                     	;# 
  3160  0491                     	;# 
  3161  0492                     	;# 
  3162  0492                     	;# 
  3163  0493                     	;# 
  3164  0493                     	;# 
  3165  0493                     	;# 
  3166  0494                     	;# 
  3167  0494                     	;# 
  3168  0495                     	;# 
  3169  0495                     	;# 
  3170  0496                     	;# 
  3171  0496                     	;# 
  3172  0497                     	;# 
  3173  0497                     	;# 
  3174  0595                     	;# 
  3175  0596                     	;# 
  3176  0597                     	;# 
  3177  059C                     	;# 
  3178  059D                     	;# 
  3179  059E                     	;# 
  3180  0611                     	;# 
  3181  0611                     	;# 
  3182  0612                     	;# 
  3183  0613                     	;# 
  3184  0614                     	;# 
  3185  0614                     	;# 
  3186  0615                     	;# 
  3187  0616                     	;# 
  3188  0617                     	;# 
  3189  0617                     	;# 
  3190  0618                     	;# 
  3191  0619                     	;# 
  3192  061A                     	;# 
  3193  061A                     	;# 
  3194  061B                     	;# 
  3195  061C                     	;# 
  3196  061D                     	;# 
  3197  061D                     	;# 
  3198  061E                     	;# 
  3199  061F                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000D                     	;# 
  3225  000E                     	;# 
  3226  000F                     	;# 
  3227  0010                     	;# 
  3228  0011                     	;# 
  3229  0012                     	;# 
  3230  0013                     	;# 
  3231  0014                     	;# 
  3232  0015                     	;# 
  3233  0016                     	;# 
  3234  0016                     	;# 
  3235  0017                     	;# 
  3236  0018                     	;# 
  3237  0019                     	;# 
  3238  001A                     	;# 
  3239  001B                     	;# 
  3240  001C                     	;# 
  3241  008C                     	;# 
  3242  008D                     	;# 
  3243  008E                     	;# 
  3244  008F                     	;# 
  3245  0090                     	;# 
  3246  0091                     	;# 
  3247  0092                     	;# 
  3248  0093                     	;# 
  3249  0094                     	;# 
  3250  0095                     	;# 
  3251  0096                     	;# 
  3252  0097                     	;# 
  3253  0099                     	;# 
  3254  009A                     	;# 
  3255  009B                     	;# 
  3256  009B                     	;# 
  3257  009C                     	;# 
  3258  009D                     	;# 
  3259  009E                     	;# 
  3260  010C                     	;# 
  3261  010D                     	;# 
  3262  010E                     	;# 
  3263  010F                     	;# 
  3264  0110                     	;# 
  3265  0116                     	;# 
  3266  0117                     	;# 
  3267  011D                     	;# 
  3268  018C                     	;# 
  3269  018D                     	;# 
  3270  018F                     	;# 
  3271  0190                     	;# 
  3272  0191                     	;# 
  3273  0191                     	;# 
  3274  0192                     	;# 
  3275  0193                     	;# 
  3276  0193                     	;# 
  3277  0194                     	;# 
  3278  0195                     	;# 
  3279  0196                     	;# 
  3280  0197                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  0199                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019A                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019B                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019C                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019D                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019E                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  019F                     	;# 
  3304  020D                     	;# 
  3305  020F                     	;# 
  3306  0210                     	;# 
  3307  0211                     	;# 
  3308  0211                     	;# 
  3309  0212                     	;# 
  3310  0212                     	;# 
  3311  0213                     	;# 
  3312  0213                     	;# 
  3313  0214                     	;# 
  3314  0214                     	;# 
  3315  0215                     	;# 
  3316  0215                     	;# 
  3317  0215                     	;# 
  3318  0216                     	;# 
  3319  0216                     	;# 
  3320  0217                     	;# 
  3321  0217                     	;# 
  3322  0219                     	;# 
  3323  021A                     	;# 
  3324  021B                     	;# 
  3325  021C                     	;# 
  3326  021D                     	;# 
  3327  021E                     	;# 
  3328  021F                     	;# 
  3329  028C                     	;# 
  3330  028D                     	;# 
  3331  0291                     	;# 
  3332  0291                     	;# 
  3333  0292                     	;# 
  3334  0293                     	;# 
  3335  0298                     	;# 
  3336  0298                     	;# 
  3337  0299                     	;# 
  3338  029A                     	;# 
  3339  029D                     	;# 
  3340  029E                     	;# 
  3341  029F                     	;# 
  3342  030C                     	;# 
  3343  030D                     	;# 
  3344  0311                     	;# 
  3345  0311                     	;# 
  3346  0312                     	;# 
  3347  0313                     	;# 
  3348  0318                     	;# 
  3349  0318                     	;# 
  3350  0319                     	;# 
  3351  031A                     	;# 
  3352  031C                     	;# 
  3353  031C                     	;# 
  3354  031D                     	;# 
  3355  031E                     	;# 
  3356  038C                     	;# 
  3357  038D                     	;# 
  3358  0394                     	;# 
  3359  0395                     	;# 
  3360  0396                     	;# 
  3361  040C                     	;# 
  3362  040D                     	;# 
  3363  0411                     	;# 
  3364  0411                     	;# 
  3365  0412                     	;# 
  3366  0413                     	;# 
  3367  0414                     	;# 
  3368  0415                     	;# 
  3369  0416                     	;# 
  3370  0417                     	;# 
  3371  0418                     	;# 
  3372  0418                     	;# 
  3373  0419                     	;# 
  3374  041A                     	;# 
  3375  041B                     	;# 
  3376  041C                     	;# 
  3377  041D                     	;# 
  3378  041E                     	;# 
  3379  048D                     	;# 
  3380  0491                     	;# 
  3381  0491                     	;# 
  3382  0492                     	;# 
  3383  0492                     	;# 
  3384  0493                     	;# 
  3385  0493                     	;# 
  3386  0493                     	;# 
  3387  0494                     	;# 
  3388  0494                     	;# 
  3389  0495                     	;# 
  3390  0495                     	;# 
  3391  0496                     	;# 
  3392  0496                     	;# 
  3393  0497                     	;# 
  3394  0497                     	;# 
  3395  0595                     	;# 
  3396  0596                     	;# 
  3397  0597                     	;# 
  3398  059C                     	;# 
  3399  059D                     	;# 
  3400  059E                     	;# 
  3401  0611                     	;# 
  3402  0611                     	;# 
  3403  0612                     	;# 
  3404  0613                     	;# 
  3405  0614                     	;# 
  3406  0614                     	;# 
  3407  0615                     	;# 
  3408  0616                     	;# 
  3409  0617                     	;# 
  3410  0617                     	;# 
  3411  0618                     	;# 
  3412  0619                     	;# 
  3413  061A                     	;# 
  3414  061A                     	;# 
  3415  061B                     	;# 
  3416  061C                     	;# 
  3417  061D                     	;# 
  3418  061D                     	;# 
  3419  061E                     	;# 
  3420  061F                     	;# 
  3421  0FE4                     	;# 
  3422  0FE5                     	;# 
  3423  0FE6                     	;# 
  3424  0FE7                     	;# 
  3425  0FE8                     	;# 
  3426  0FE9                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEF                     	;_modArray
  3432                           
  3433                           	psect	idataBANK0
  3434  2F75                     __pidataBANK0:	
  3435                           
  3436                           ;initializer for _baseline_delay_time
  3437  2F75  34D0               	retlw	208
  3438  2F76  3407               	retlw	7
  3439  2F77  3400               	retlw	0
  3440  2F78  3400               	retlw	0
  3441                           
  3442                           ;initializer for _delay_time
  3443  2F79  34D0               	retlw	208
  3444  2F7A  3407               	retlw	7
  3445  2F7B  3400               	retlw	0
  3446  2F7C  3400               	retlw	0
  3447                           
  3448                           ;initializer for _bottom_push_state
  3449  2F7D  3401               	retlw	1
  3450  2F7E  3400               	retlw	0
  3451                           
  3452                           ;initializer for _long_press_limit
  3453  2F7F  34E8               	retlw	232
  3454  2F80  3403               	retlw	3
  3455                           
  3456                           ;initializer for _top_push_state
  3457  2F81  3406               	retlw	6
  3458  2F82  3400               	retlw	0
  3459                           
  3460                           ;initializer for _blink_rate
  3461  2F83  3414               	retlw	20
  3462                           
  3463                           ;initializer for _longTap_state
  3464  2F84  34FF               	retlw	255
  3465                           
  3466                           ;initializer for _num_taps
  3467  2F85  3404               	retlw	4
  3468                           
  3469                           ;initializer for _presetChannel
  3470  2F86  3401               	retlw	1
  3471                           
  3472                           ;initializer for _switchBypass_state
  3473  2F87  34FF               	retlw	255
  3474                           
  3475                           	psect	idataBANK3
  3476  2FB4                     __pidataBANK3:	
  3477                           
  3478                           ;initializer for _blink_delay
  3479  2FB4  3464               	retlw	100
  3480  2FB5  3400               	retlw	0
  3481                           
  3482                           ;initializer for _knob1_prev
  3483  2FB6  34D0               	retlw	208
  3484  2FB7  3407               	retlw	7
  3485                           
  3486                           ;initializer for _knob2_prev
  3487  2FB8  34D0               	retlw	208
  3488  2FB9  3407               	retlw	7
  3489                           
  3490                           ;initializer for _knob3_prev
  3491  2FBA  34D0               	retlw	208
  3492  2FBB  3407               	retlw	7
  3493                           
  3494                           ;initializer for _knob4_prev
  3495  2FBC  34D0               	retlw	208
  3496  2FBD  3407               	retlw	7
  3497                           
  3498                           ;initializer for _knob5_prev
  3499  2FBE  34D0               	retlw	208
  3500  2FBF  3407               	retlw	7
  3501                           
  3502                           ;initializer for _symmetry
  3503  2FC0  34B4               	retlw	180
  3504  2FC1  3400               	retlw	0
  3505                           
  3506                           ;initializer for _tap_iteration
  3507  2FC2  3401               	retlw	1
  3508  2FC3  3400               	retlw	0
  3509                           
  3510                           ;initializer for _blink_state
  3511  2FC4  3401               	retlw	1
  3512                           
  3513                           ;initializer for _currentBypassState
  3514  2FC5  34FF               	retlw	255
  3515                           
  3516                           ;initializer for _delay_time_changed
  3517  2FC6  3401               	retlw	1
  3518                           
  3519                           ;initializer for _expSwitchState
  3520  2FC7  34FF               	retlw	255
  3521                           
  3522                           ;initializer for _expressModeCnst
  3523  2FC8  3402               	retlw	2
  3524                           
  3525                           ;initializer for _expressionChannel
  3526  2FC9  3401               	retlw	1
  3527                           
  3528                           ;initializer for _presetModeCnst
  3529  2FCA  3401               	retlw	1
  3530                           
  3531                           ;initializer for _switchTap_state
  3532  2FCB  34FF               	retlw	255
  3533                           
  3534                           	psect	idataBANK4
  3535  07FA                     __pidataBANK4:	
  3536                           
  3537                           ;initializer for _mod_delay_time
  3538  07FA  34D0               	retlw	208
  3539  07FB  3407               	retlw	7
  3540                           
  3541                           ;initializer for _switchBypass_up
  3542  07FC  3401               	retlw	1
  3543  07FD  3400               	retlw	0
  3544                           
  3545                           	psect	stringtext
  3546  2800                     __pstringtext:	
  3547  2800                     exp@coeff:	
  3548  2800  3400               	retlw	0
  3549  2801  3480               	retlw	128
  3550  2802  343F               	retlw	63
  3551  2803  3472               	retlw	114
  3552  2804  3431               	retlw	49
  3553  2805  343F               	retlw	63
  3554  2806  34FE               	retlw	254
  3555  2807  3475               	retlw	117
  3556  2808  343E               	retlw	62
  3557  2809  3458               	retlw	88
  3558  280A  3463               	retlw	99
  3559  280B  343D               	retlw	61
  3560  280C  3495               	retlw	149
  3561  280D  341D               	retlw	29
  3562  280E  343C               	retlw	60
  3563  280F  34C5               	retlw	197
  3564  2810  34AE               	retlw	174
  3565  2811  343A               	retlw	58
  3566  2812  3479               	retlw	121
  3567  2813  3421               	retlw	33
  3568  2814  3439               	retlw	57
  3569  2815  3494               	retlw	148
  3570  2816  3480               	retlw	128
  3571  2817  3437               	retlw	55
  3572  2818  3493               	retlw	147
  3573  2819  34A7               	retlw	167
  3574  281A  3435               	retlw	53
  3575  281B  3456               	retlw	86
  3576  281C  3415               	retlw	21
  3577  281D  3434               	retlw	52
  3578  281E                     __end_ofexp@coeff:	
  3579  281E                     log@coeff:	
  3580  281E  3400               	retlw	0
  3581  281F  3400               	retlw	0
  3582  2820  3400               	retlw	0
  3583  2821  3400               	retlw	0
  3584  2822  3480               	retlw	128
  3585  2823  343F               	retlw	63
  3586  2824  34F0               	retlw	240
  3587  2825  34FF               	retlw	255
  3588  2826  34BE               	retlw	190
  3589  2827  34E2               	retlw	226
  3590  2828  34A9               	retlw	169
  3591  2829  343E               	retlw	62
  3592  282A  3483               	retlw	131
  3593  282B  3476               	retlw	118
  3594  282C  34BE               	retlw	190
  3595  282D  34AE               	retlw	174
  3596  282E  342B               	retlw	43
  3597  282F  343E               	retlw	62
  3598  2830  343C               	retlw	60
  3599  2831  34C3               	retlw	195
  3600  2832  34BD               	retlw	189
  3601  2833  34D2               	retlw	210
  3602  2834  3413               	retlw	19
  3603  2835  343D               	retlw	61
  3604  2836  3478               	retlw	120
  3605  2837  34D3               	retlw	211
  3606  2838  34BB               	retlw	187
  3607  2839                     __end_oflog@coeff:	
  3608  2839                     sin@coeff_a:	
  3609  2839  34F4               	retlw	244
  3610  283A  344A               	retlw	74
  3611  283B  3448               	retlw	72
  3612  283C  3495               	retlw	149
  3613  283D  3495               	retlw	149
  3614  283E  34C7               	retlw	199
  3615  283F  34C1               	retlw	193
  3616  2840  34DC               	retlw	220
  3617  2841  3445               	retlw	69
  3618  2842  34DC               	retlw	220
  3619  2843  346D               	retlw	109
  3620  2844  34C3               	retlw	195
  3621  2845  34B3               	retlw	179
  3622  2846  3433               	retlw	51
  3623  2847  3440               	retlw	64
  3624  2848                     __end_ofsin@coeff_a:	
  3625  2848                     sin@coeff_b:	
  3626  2848  3434               	retlw	52
  3627  2849  3401               	retlw	1
  3628  284A  3448               	retlw	72
  3629  284B  349D               	retlw	157
  3630  284C  34B0               	retlw	176
  3631  284D  3445               	retlw	69
  3632  284E  3400               	retlw	0
  3633  284F  34DA               	retlw	218
  3634  2850  3442               	retlw	66
  3635  2851  3400               	retlw	0
  3636  2852  3480               	retlw	128
  3637  2853  343F               	retlw	63
  3638  2854                     __end_ofsin@coeff_b:	
  3639  000B                     _INTCONbits	set	11
  3640  0011                     _PIR1bits	set	17
  3641  000C                     _PORTAbits	set	12
  3642  000E                     _PORTCbits	set	14
  3643  000F                     _PORTDbits	set	15
  3644  0010                     _PORTEbits	set	16
  3645  001B                     _PR2	set	27
  3646  001C                     _T2CONbits	set	28
  3647  005F                     _GIE	set	95
  3648  005E                     _PEIE	set	94
  3649  0069                     _RB1	set	105
  3650  009D                     _ADCON0bits	set	157
  3651  009E                     _ADCON1bits	set	158
  3652  009C                     _ADRESH	set	156
  3653  009B                     _ADRESL	set	155
  3654  0095                     _OPTION_REGbits	set	149
  3655  0099                     _OSCCONbits	set	153
  3656  008D                     _TRISBbits	set	141
  3657  008E                     _TRISCbits	set	142
  3658  008F                     _TRISDbits	set	143
  3659  0090                     _TRISEbits	set	144
  3660  048D                     _RCIE	set	1165
  3661  011D                     _APFCONbits	set	285
  3662  010D                     _LATBbits	set	269
  3663  010F                     _LATDbits	set	271
  3664  0190                     _ANSELEbits	set	400
  3665  0192                     _PMADRH	set	402
  3666  0191                     _PMADRL	set	401
  3667  0195                     _PMCON1bits	set	405
  3668  0196                     _PMCON2	set	406
  3669  0194                     _PMDATH	set	404
  3670  0193                     _PMDATL	set	403
  3671  0199                     _RCREG	set	409
  3672  019D                     _RCSTAbits	set	413
  3673  019B                     _SPBRG	set	411
  3674  019A                     _TXREG	set	410
  3675  019E                     _TXSTAbits	set	414
  3676  0291                     _CCPR1	set	657
  3677  0298                     _CCPR2	set	664
  3678  0293                     _CCP1CONbits	set	659
  3679  029A                     _CCP2CONbits	set	666
  3680  029D                     _CCPTMRS0	set	669
  3681  029E                     _CCPTMRS1	set	670
  3682  029F                     _CCPTMRS2	set	671
  3683  0311                     _CCPR3	set	785
  3684  0318                     _CCPR4	set	792
  3685  031C                     _CCPR5	set	796
  3686  0313                     _CCP3CONbits	set	787
  3687  031A                     _CCP4CONbits	set	794
  3688  031E                     _CCP5CONbits	set	798
  3689  030C                     _TRISFbits	set	780
  3690  030D                     _TRISGbits	set	781
  3691  038C                     _LATFbits	set	908
  3692  038D                     _LATGbits	set	909
  3693  040C                     _ANSELFbits	set	1036
  3694  061F                     _CCP10CONbits	set	1567
  3695  0613                     _CCP6CONbits	set	1555
  3696  0616                     _CCP7CONbits	set	1558
  3697  0619                     _CCP8CONbits	set	1561
  3698  061C                     _CCP9CONbits	set	1564
  3699                           
  3700                           ; #config settings
  3701  0000                     
  3702                           	psect	cinit
  3703  02E5                     start_initialization:	
  3704  02E5                     __initialization:		;BIGRAM
  3705                           
  3706                           ; Clear objects allocated to BIGRAM
  3707  02E5  308E               	movlw	low (0+9102)
  3708  02E6  0084               	movwf	4
  3709  02E7  3023               	movlw	high (0+9102)
  3710  02E8  0085               	movwf	5
  3711  02E9  3062               	movlw	98
  3712  02EA  00FE               	movwf	btemp
  3713  02EB  3002               	movlw	2
  3714  02EC  00FF               	movwf	btemp+1
  3715  02ED  31AF  2747  3182   	fcall	clear_ram0
  3716                           
  3717                           ; Clear objects allocated to COMMON
  3718  02F0  01FD               	clrf	__pbssCOMMON& (0+127)
  3719                           
  3720                           ; Clear objects allocated to BANK0
  3721  02F1  3058               	movlw	low __pbssBANK0
  3722  02F2  0084               	movwf	4
  3723  02F3  3000               	movlw	high __pbssBANK0
  3724  02F4  0085               	movwf	5
  3725  02F5  3012               	movlw	18
  3726  02F6  00FE               	movwf	btemp
  3727  02F7  3000               	movlw	0
  3728  02F8  00FF               	movwf	btemp+1
  3729  02F9  31AF  2747  3182   	fcall	clear_ram0
  3730                           
  3731                           ; Clear objects allocated to BANK2
  3732  02FC  0022               	movlb	2	; select bank2
  3733  02FD  01EA               	clrf	__pbssBANK2& (0+127)
  3734  02FE  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3735  02FF  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3736                           
  3737                           ; Clear objects allocated to BANK3
  3738  0300  30A0               	movlw	low __pbssBANK3
  3739  0301  0084               	movwf	4
  3740  0302  3001               	movlw	high __pbssBANK3
  3741  0303  0085               	movwf	5
  3742  0304  3029               	movlw	41
  3743  0305  00FE               	movwf	btemp
  3744  0306  3000               	movlw	0
  3745  0307  00FF               	movwf	btemp+1
  3746  0308  31AF  2747  3182   	fcall	clear_ram0
  3747                           
  3748                           ; Clear objects allocated to BANK4
  3749  030B  3020               	movlw	low __pbssBANK4
  3750  030C  0084               	movwf	4
  3751  030D  3002               	movlw	high __pbssBANK4
  3752  030E  0085               	movwf	5
  3753  030F  3039               	movlw	57
  3754  0310  00FE               	movwf	btemp
  3755  0311  3000               	movlw	0
  3756  0312  00FF               	movwf	btemp+1
  3757  0313  31AF  2747  3182   	fcall	clear_ram0
  3758                           
  3759                           ; Clear objects allocated to BANK5
  3760  0316  30A0               	movlw	low __pbssBANK5
  3761  0317  0084               	movwf	4
  3762  0318  3002               	movlw	high __pbssBANK5
  3763  0319  0085               	movwf	5
  3764  031A  302C               	movlw	44
  3765  031B  00FE               	movwf	btemp
  3766  031C  3000               	movlw	0
  3767  031D  00FF               	movwf	btemp+1
  3768  031E  31AF  2747  3182   	fcall	clear_ram0
  3769                           
  3770                           ; Clear objects allocated to BANK6
  3771  0321  3020               	movlw	low __pbssBANK6
  3772  0322  0084               	movwf	4
  3773  0323  3003               	movlw	high __pbssBANK6
  3774  0324  0085               	movwf	5
  3775  0325  3040               	movlw	64
  3776  0326  00FE               	movwf	btemp
  3777  0327  3000               	movlw	0
  3778  0328  00FF               	movwf	btemp+1
  3779  0329  31AF  2747  3182   	fcall	clear_ram0
  3780                           
  3781                           ; Clear objects allocated to BANK7
  3782  032C  30A0               	movlw	low __pbssBANK7
  3783  032D  0084               	movwf	4
  3784  032E  3003               	movlw	high __pbssBANK7
  3785  032F  0085               	movwf	5
  3786  0330  3040               	movlw	64
  3787  0331  00FE               	movwf	btemp
  3788  0332  3000               	movlw	0
  3789  0333  00FF               	movwf	btemp+1
  3790  0334  31AF  2747  3182   	fcall	clear_ram0
  3791                           
  3792                           ; Initialize objects allocated to BANK0
  3793  0337  3075               	movlw	low __pidataBANK0
  3794  0338  0084               	movwf	4
  3795  0339  30AF               	movlw	(high __pidataBANK0)| (0+128)
  3796  033A  0085               	movwf	5
  3797  033B  3045               	movlw	low __pdataBANK0
  3798  033C  0086               	movwf	6
  3799  033D  3000               	movlw	high __pdataBANK0
  3800  033E  0087               	movwf	7
  3801  033F  3000               	movlw	0
  3802  0340  00FF               	movwf	btemp+1
  3803  0341  3013               	movlw	19
  3804  0342  31AF  273B  3182   	fcall	init_ram
  3805                           
  3806                           ; Initialize objects allocated to BANK3
  3807  0345  30B4               	movlw	low __pidataBANK3
  3808  0346  0084               	movwf	4
  3809  0347  30AF               	movlw	(high __pidataBANK3)| (0+128)
  3810  0348  0085               	movwf	5
  3811  0349  30C9               	movlw	low __pdataBANK3
  3812  034A  0086               	movwf	6
  3813  034B  3001               	movlw	high __pdataBANK3
  3814  034C  0087               	movwf	7
  3815  034D  3000               	movlw	0
  3816  034E  00FF               	movwf	btemp+1
  3817  034F  3018               	movlw	24
  3818  0350  31AF  273B  3182   	fcall	init_ram
  3819                           
  3820                           ; Initialize objects allocated to BANK4
  3821  0353  30FA               	movlw	low __pidataBANK4
  3822  0354  0084               	movwf	4
  3823  0355  3087               	movlw	(high __pidataBANK4)| (0+128)
  3824  0356  0085               	movwf	5
  3825  0357  3062               	movlw	low __pdataBANK4
  3826  0358  0086               	movwf	6
  3827  0359  3002               	movlw	high __pdataBANK4
  3828  035A  0087               	movwf	7
  3829  035B  3000               	movlw	0
  3830  035C  00FF               	movwf	btemp+1
  3831  035D  3004               	movlw	4
  3832  035E  31AF  273B         	fcall	init_ram
  3833  0360                     end_of_initialization:	
  3834                           ;End of C runtime variable initialization code
  3835                           
  3836  0360                     __end_of__initialization:	
  3837  0360  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3838  0361  0020               	movlb	0
  3839  0362  3183  2B64         	ljmp	_main	;jump to C main() function
  3840                           
  3841                           	psect	bssCOMMON
  3842  007D                     __pbssCOMMON:	
  3843  007D                     _UQFront:	
  3844  007D                     	ds	1
  3845                           
  3846                           	psect	bssBANK0
  3847  0058                     __pbssBANK0:	
  3848  0058                     _sub_timer:	
  3849  0058                     	ds	4
  3850  005C                     _tap_timer:	
  3851  005C                     	ds	4
  3852  0060                     _timer:	
  3853  0060                     	ds	4
  3854  0064                     _UQEnd:	
  3855  0064                     	ds	1
  3856  0065                     _doubleTap_state:	
  3857  0065                     	ds	1
  3858  0066                     _longBypass_state:	
  3859  0066                     	ds	1
  3860  0067                     _mode2_state:	
  3861  0067                     	ds	1
  3862  0068                     _presetSaveMode:	
  3863  0068                     	ds	1
  3864  0069                     _suspend_blink:	
  3865  0069                     	ds	1
  3866                           
  3867                           	psect	dataBANK0
  3868  0045                     __pdataBANK0:	
  3869  0045                     _baseline_delay_time:	
  3870  0045                     	ds	4
  3871  0049                     _delay_time:	
  3872  0049                     	ds	4
  3873  004D                     _bottom_push_state:	
  3874  004D                     	ds	2
  3875  004F                     _long_press_limit:	
  3876  004F                     	ds	2
  3877  0051                     _top_push_state:	
  3878  0051                     	ds	2
  3879  0053                     _blink_rate:	
  3880  0053                     	ds	1
  3881  0054                     _longTap_state:	
  3882  0054                     	ds	1
  3883  0055                     _num_taps:	
  3884  0055                     	ds	1
  3885  0056                     _presetChannel:	
  3886  0056                     	ds	1
  3887  0057                     _switchBypass_state:	
  3888  0057                     	ds	1
  3889                           
  3890                           	psect	bssBANK2
  3891  016A                     __pbssBANK2:	
  3892  016A                     _longBypass_start:	
  3893  016A                     	ds	1
  3894  016B                     _longTap_start:	
  3895  016B                     	ds	1
  3896  016C                     _switchTap_pressed:	
  3897  016C                     	ds	1
  3898                           
  3899                           	psect	bssBANK3
  3900  01A0                     __pbssBANK3:	
  3901  01A0                     _double_timer:	
  3902  01A0                     	ds	4
  3903  01A4                     _mod_timer:	
  3904  01A4                     	ds	4
  3905  01A8                     _knob_1_pos:	
  3906  01A8                     	ds	2
  3907  01AA                     _knob_2_pos:	
  3908  01AA                     	ds	2
  3909  01AC                     _knob_3_pos:	
  3910  01AC                     	ds	2
  3911  01AE                     _knob_4_pos:	
  3912  01AE                     	ds	2
  3913  01B0                     _knob_5_pos:	
  3914  01B0                     	ds	2
  3915  01B2                     _longBypass_timer:	
  3916  01B2                     	ds	2
  3917  01B4                     _longTap_timer:	
  3918  01B4                     	ds	2
  3919  01B6                     _mod_counter:	
  3920  01B6                     	ds	2
  3921  01B8                     _mod_value:	
  3922  01B8                     	ds	2
  3923  01BA                     _switchBypass_pressed:	
  3924  01BA                     	ds	2
  3925  01BC                     _adjust_sub_delay:	
  3926  01BC                     	ds	1
  3927  01BD                     _bottomTactile_pressed:	
  3928  01BD                     	ds	1
  3929  01BE                     _bypass_turning_on:	
  3930  01BE                     	ds	1
  3931  01BF                     _iCnt:	
  3932  01BF                     	ds	1
  3933  01C0                     _longBypass_down:	
  3934  01C0                     	ds	1
  3935  01C1                     _longBypass_save:	
  3936  01C1                     	ds	1
  3937  01C2                     _mode1_state:	
  3938  01C2                     	ds	1
  3939  01C3                     _modulation_changed:	
  3940  01C3                     	ds	1
  3941  01C4                     _preset_blink:	
  3942  01C4                     	ds	1
  3943  01C5                     _preset_programmning_on:	
  3944  01C5                     	ds	1
  3945  01C6                     _reset_sub_delay:	
  3946  01C6                     	ds	1
  3947  01C7                     _switchTap_down:	
  3948  01C7                     	ds	1
  3949  01C8                     _topTactile_pressed:	
  3950  01C8                     	ds	1
  3951                           
  3952                           	psect	dataBANK3
  3953  01C9                     __pdataBANK3:	
  3954  01C9                     _blink_delay:	
  3955  01C9                     	ds	2
  3956  01CB                     _knob1_prev:	
  3957  01CB                     	ds	2
  3958  01CD                     _knob2_prev:	
  3959  01CD                     	ds	2
  3960  01CF                     _knob3_prev:	
  3961  01CF                     	ds	2
  3962  01D1                     _knob4_prev:	
  3963  01D1                     	ds	2
  3964  01D3                     _knob5_prev:	
  3965  01D3                     	ds	2
  3966  01D5                     _symmetry:	
  3967  01D5                     	ds	2
  3968  01D7                     _tap_iteration:	
  3969  01D7                     	ds	2
  3970  01D9                     _blink_state:	
  3971  01D9                     	ds	1
  3972  01DA                     _currentBypassState:	
  3973  01DA                     	ds	1
  3974  01DB                     _delay_time_changed:	
  3975  01DB                     	ds	1
  3976  01DC                     _expSwitchState:	
  3977  01DC                     	ds	1
  3978  01DD                     _expressModeCnst:	
  3979  01DD                     	ds	1
  3980  01DE                     _expressionChannel:	
  3981  01DE                     	ds	1
  3982  01DF                     _presetModeCnst:	
  3983  01DF                     	ds	1
  3984  01E0                     _switchTap_state:	
  3985  01E0                     	ds	1
  3986                           
  3987                           	psect	bssBANK4
  3988  0220                     __pbssBANK4:	
  3989  0220                     _tap_history:	
  3990  0220                     	ds	20
  3991  0234                     USARTWriteInt@F3536:	
  3992  0234                     	ds	5
  3993  0239                     _ledState:	
  3994  0239                     	ds	4
  3995  023D                     _tap_total:	
  3996  023D                     	ds	4
  3997  0241                     _test_timer:	
  3998  0241                     	ds	4
  3999  0245                     _adjusted_pot_value:	
  4000  0245                     	ds	2
  4001  0247                     _debounce_bypass:	
  4002  0247                     	ds	2
  4003  0249                     _debounce_count:	
  4004  0249                     	ds	2
  4005  024B                     _debounce_mode1:	
  4006  024B                     	ds	2
  4007  024D                     _debounce_mode2:	
  4008  024D                     	ds	2
  4009  024F                     _delay_counter:	
  4010  024F                     	ds	2
  4011  0251                     _delayfound:	
  4012  0251                     	ds	2
  4013  0253                     _errno:	
  4014  0253                     	ds	2
  4015  0255                     _switchBypass_toggle:	
  4016  0255                     	ds	2
  4017  0257                     _tmpVal:	
  4018  0257                     	ds	2
  4019                           
  4020                           	psect	dataBANK4
  4021  0262                     __pdataBANK4:	
  4022  0262                     _mod_delay_time:	
  4023  0262                     	ds	2
  4024  0264                     _switchBypass_up:	
  4025  0264                     	ds	2
  4026                           
  4027                           	psect	bssBANK5
  4028  02A0                     __pbssBANK5:	
  4029  02A0                     _tap:	
  4030  02A0                     	ds	44
  4031                           
  4032                           	psect	bssBANK6
  4033  0320                     __pbssBANK6:	
  4034  0320                     _URBuff:	
  4035  0320                     	ds	64
  4036                           
  4037                           	psect	bssBANK7
  4038  03A0                     __pbssBANK7:	
  4039  03A0                     _myBuf:	
  4040  03A0                     	ds	64
  4041                           
  4042                           	psect	clrtext
  4043  2F47                     clear_ram0:	
  4044                           ;	Called with FSR0 containing the base address, and
  4045                           ;	btemp/btemp+1 has the size to clear
  4046                           
  4047  2F47  0064               	clrwdt	;clear the watchdog before getting into this loop
  4048  2F48                     clrloop0:	
  4049  2F48  0180               	clrf	0	;clear RAM location pointed to by FSR
  4050  2F49  3101               	addfsr 0,1
  4051  2F4A  3001               	movlw	1
  4052  2F4B  02FE               	subwf	126,f
  4053  2F4C  3000               	movlw	0
  4054  2F4D  3BFF               	subwfb	127,f
  4055  2F4E  087F               	movf	127,w
  4056  2F4F  047E               	iorwf	126,w
  4057  2F50  1903               	btfsc	3,2
  4058  2F51  3400               	retlw	0	;all done for this memory range, return
  4059  2F52  2F48               	goto	clrloop0	;have we reached the end yet?
  4060                           
  4061                           	psect	inittext
  4062  2F3B                     init_ram:	
  4063  2F3B  00FE               	movwf	126
  4064  2F3C                     initloop:	
  4065  2F3C  0012               	moviw fsr0++
  4066  2F3D  001E               	movwi fsr1++
  4067  2F3E  3001               	movlw	1
  4068  2F3F  02FE               	subwf	126,f
  4069  2F40  3000               	movlw	0
  4070  2F41  3BFF               	subwfb	127,f
  4071  2F42  087F               	movf	127,w
  4072  2F43  047E               	iorwf	126,w
  4073  2F44  1903               	btfsc	3,2
  4074  2F45  3400               	retlw	0
  4075  2F46  2F3C               	goto	initloop
  4076                           
  4077                           	psect	cstackBANK4
  4078  0259                     __pcstackBANK4:	
  4079  0259                     _main$2829:	
  4080                           
  4081                           ; 3 bytes @ 0x0
  4082  0259                     	ds	3
  4083  025C                     _main$2830:	
  4084                           
  4085                           ; 3 bytes @ 0x3
  4086  025C                     	ds	3
  4087  025F                     _main$2831:	
  4088                           
  4089                           ; 3 bytes @ 0x6
  4090  025F                     	ds	3
  4091                           
  4092                           	psect	cstackBANK3
  4093  01E1                     __pcstackBANK3:	
  4094  01E1                     scaleA100kPot@pwm:	
  4095  01E1                     scaleA10kPot@pwm:	
  4096                           ; 3 bytes @ 0x0
  4097                           
  4098  01E1                     scaleiA10kPot@pwm:	
  4099                           ; 3 bytes @ 0x0
  4100                           
  4101                           
  4102                           ; 3 bytes @ 0x0
  4103  01E1                     	ds	3
  4104  01E4                     _scaleA100kPot$2834:	
  4105  01E4                     _scaleA10kPot$2838:	
  4106                           ; 3 bytes @ 0x3
  4107                           
  4108  01E4                     _scaleiA10kPot$2840:	
  4109                           ; 3 bytes @ 0x3
  4110                           
  4111                           
  4112                           ; 3 bytes @ 0x3
  4113  01E4                     	ds	3
  4114  01E7                     _scaleA100kPot$2835:	
  4115  01E7                     _scaleA10kPot$2839:	
  4116                           ; 3 bytes @ 0x6
  4117                           
  4118  01E7                     _scaleiA10kPot$2841:	
  4119                           ; 3 bytes @ 0x6
  4120                           
  4121                           
  4122                           ; 3 bytes @ 0x6
  4123  01E7                     	ds	3
  4124  01EA                     ??_main:	
  4125                           
  4126                           ; 1 bytes @ 0x9
  4127  01EA                     	ds	5
  4128                           
  4129                           	psect	cstackBANK2
  4130  0120                     __pcstackBANK2:	
  4131  0120                     ?___fttol:	
  4132  0120                     ___fttol@f1:	
  4133                           ; 4 bytes @ 0x0
  4134                           
  4135                           
  4136                           ; 3 bytes @ 0x0
  4137  0120                     	ds	4
  4138  0124                     ??___fttol:	
  4139                           
  4140                           ; 1 bytes @ 0x4
  4141  0124                     	ds	4
  4142  0128                     ___fttol@sign1:	
  4143                           
  4144                           ; 1 bytes @ 0x8
  4145  0128                     	ds	1
  4146  0129                     ___fttol@lval:	
  4147                           
  4148                           ; 4 bytes @ 0x9
  4149  0129                     	ds	4
  4150  012D                     ___fttol@exp1:	
  4151                           
  4152                           ; 1 bytes @ 0xD
  4153  012D                     	ds	1
  4154  012E                     ?_modTri:	
  4155  012E                     ?_modSaw:	
  4156                           ; 2 bytes @ 0xE
  4157                           
  4158  012E                     ?___wmul:	
  4159                           ; 2 bytes @ 0xE
  4160                           
  4161  012E                     ?___altoft:	
  4162                           ; 2 bytes @ 0xE
  4163                           
  4164  012E                     ___wmul@multiplier:	
  4165                           ; 3 bytes @ 0xE
  4166                           
  4167  012E                     modTri@angle:	
  4168                           ; 2 bytes @ 0xE
  4169                           
  4170  012E                     modSaw@angle:	
  4171                           ; 3 bytes @ 0xE
  4172                           
  4173  012E                     ___altoft@c:	
  4174                           ; 3 bytes @ 0xE
  4175                           
  4176                           
  4177                           ; 4 bytes @ 0xE
  4178  012E                     	ds	2
  4179  0130                     ___wmul@multiplicand:	
  4180                           
  4181                           ; 2 bytes @ 0x10
  4182  0130                     	ds	1
  4183  0131                     modTri@inflection:	
  4184  0131                     modSaw@inflection:	
  4185                           ; 3 bytes @ 0x11
  4186                           
  4187                           
  4188                           ; 3 bytes @ 0x11
  4189  0131                     	ds	1
  4190  0132                     ??___altoft:	
  4191  0132                     ___wmul@product:	
  4192                           ; 1 bytes @ 0x12
  4193                           
  4194                           
  4195                           ; 2 bytes @ 0x12
  4196  0132                     	ds	2
  4197  0134                     ?_modSin:	
  4198  0134                     ?_eval_poly:	
  4199                           ; 2 bytes @ 0x14
  4200                           
  4201  0134                     ___altoft@exp:	
  4202                           ; 3 bytes @ 0x14
  4203                           
  4204  0134                     modSin@angle:	
  4205                           ; 1 bytes @ 0x14
  4206                           
  4207  0134                     eval_poly@x:	
  4208                           ; 3 bytes @ 0x14
  4209                           
  4210  0134                     _modTri$2843:	
  4211                           ; 3 bytes @ 0x14
  4212                           
  4213  0134                     _modSaw$2844:	
  4214                           ; 3 bytes @ 0x14
  4215                           
  4216                           
  4217                           ; 3 bytes @ 0x14
  4218  0134                     	ds	1
  4219  0135                     ___altoft@sign:	
  4220                           
  4221                           ; 1 bytes @ 0x15
  4222  0135                     	ds	1
  4223  0136                     ?_trunc:	
  4224  0136                     ?_floor:	
  4225                           ; 3 bytes @ 0x16
  4226                           
  4227  0136                     trunc@x:	
  4228                           ; 3 bytes @ 0x16
  4229                           
  4230  0136                     floor@x:	
  4231                           ; 3 bytes @ 0x16
  4232                           
  4233                           
  4234                           ; 3 bytes @ 0x16
  4235  0136                     	ds	1
  4236  0137                     eval_poly@d:	
  4237  0137                     modSin@inflection:	
  4238                           ; 2 bytes @ 0x17
  4239                           
  4240  0137                     modTri@shift:	
  4241                           ; 3 bytes @ 0x17
  4242                           
  4243  0137                     _modSaw$2845:	
  4244                           ; 3 bytes @ 0x17
  4245                           
  4246                           
  4247                           ; 3 bytes @ 0x17
  4248  0137                     	ds	2
  4249  0139                     ??_trunc:	
  4250  0139                     ??_floor:	
  4251                           ; 1 bytes @ 0x19
  4252                           
  4253  0139                     eval_poly@n:	
  4254                           ; 1 bytes @ 0x19
  4255                           
  4256                           
  4257                           ; 2 bytes @ 0x19
  4258  0139                     	ds	1
  4259  013A                     ??_modSin:	
  4260  013A                     modTri@period:	
  4261                           ; 1 bytes @ 0x1A
  4262                           
  4263  013A                     trunc@i:	
  4264                           ; 3 bytes @ 0x1A
  4265                           
  4266  013A                     floor@i:	
  4267                           ; 3 bytes @ 0x1A
  4268                           
  4269  013A                     _modSaw$2846:	
  4270                           ; 3 bytes @ 0x1A
  4271                           
  4272                           
  4273                           ; 3 bytes @ 0x1A
  4274  013A                     	ds	1
  4275  013B                     eval_poly@res:	
  4276                           
  4277                           ; 3 bytes @ 0x1B
  4278  013B                     	ds	1
  4279  013C                     _modSin$2842:	
  4280                           
  4281                           ; 3 bytes @ 0x1C
  4282  013C                     	ds	1
  4283  013D                     modSaw@mod:	
  4284  013D                     trunc@expon:	
  4285                           ; 2 bytes @ 0x1D
  4286                           
  4287  013D                     floor@expon:	
  4288                           ; 2 bytes @ 0x1D
  4289                           
  4290  013D                     modTri@tmpVal:	
  4291                           ; 2 bytes @ 0x1D
  4292                           
  4293                           
  4294                           ; 3 bytes @ 0x1D
  4295  013D                     	ds	1
  4296  013E                     ?_log:	
  4297  013E                     ?_ldexp:	
  4298                           ; 3 bytes @ 0x1E
  4299                           
  4300  013E                     ldexp@value:	
  4301                           ; 3 bytes @ 0x1E
  4302                           
  4303  013E                     log@x:	
  4304                           ; 3 bytes @ 0x1E
  4305                           
  4306                           
  4307                           ; 3 bytes @ 0x1E
  4308  013E                     	ds	1
  4309  013F                     ?_set_subdivision:	
  4310  013F                     ?___ftsub:	
  4311                           ; 2 bytes @ 0x1F
  4312                           
  4313  013F                     set_subdivision@x:	
  4314                           ; 3 bytes @ 0x1F
  4315                           
  4316  013F                     modSin@shift:	
  4317                           ; 2 bytes @ 0x1F
  4318                           
  4319  013F                     modSaw@shift:	
  4320                           ; 3 bytes @ 0x1F
  4321                           
  4322  013F                     ___ftsub@f2:	
  4323                           ; 3 bytes @ 0x1F
  4324                           
  4325                           
  4326                           ; 3 bytes @ 0x1F
  4327  013F                     	ds	2
  4328  0141                     ??_log:	
  4329  0141                     set_subdivision@y:	
  4330                           ; 1 bytes @ 0x21
  4331                           
  4332  0141                     ldexp@newexp:	
  4333                           ; 2 bytes @ 0x21
  4334                           
  4335                           
  4336                           ; 2 bytes @ 0x21
  4337  0141                     	ds	1
  4338  0142                     log@exponent:	
  4339  0142                     modSin@period:	
  4340                           ; 2 bytes @ 0x22
  4341                           
  4342  0142                     modSaw@period:	
  4343                           ; 3 bytes @ 0x22
  4344                           
  4345  0142                     ___ftsub@f1:	
  4346                           ; 3 bytes @ 0x22
  4347                           
  4348                           
  4349                           ; 3 bytes @ 0x22
  4350  0142                     	ds	1
  4351  0143                     ??_set_subdivision:	
  4352  0143                     ??_ldexp:	
  4353                           ; 1 bytes @ 0x23
  4354                           
  4355                           
  4356                           ; 1 bytes @ 0x23
  4357  0143                     	ds	2
  4358  0145                     ?_modSawRev:	
  4359  0145                     ?_sin:	
  4360                           ; 2 bytes @ 0x25
  4361                           
  4362  0145                     modSin@tmpVal:	
  4363                           ; 3 bytes @ 0x25
  4364                           
  4365  0145                     modSawRev@angle:	
  4366                           ; 3 bytes @ 0x25
  4367                           
  4368  0145                     sin@f:	
  4369                           ; 3 bytes @ 0x25
  4370                           
  4371  0145                     _ldexp$2638:	
  4372                           ; 3 bytes @ 0x25
  4373                           
  4374                           
  4375                           ; 3 bytes @ 0x25
  4376  0145                     	ds	1
  4377  0146                     set_subdivision@scalar:	
  4378                           
  4379                           ; 3 bytes @ 0x26
  4380  0146                     	ds	2
  4381  0148                     ??_sin:	
  4382  0148                     ?_modSquare:	
  4383                           ; 1 bytes @ 0x28
  4384                           
  4385  0148                     ?_exp:	
  4386                           ; 2 bytes @ 0x28
  4387                           
  4388  0148                     modSawRev@inflection:	
  4389                           ; 3 bytes @ 0x28
  4390                           
  4391  0148                     modSquare@angle:	
  4392                           ; 3 bytes @ 0x28
  4393                           
  4394  0148                     exp@x:	
  4395                           ; 3 bytes @ 0x28
  4396                           
  4397                           
  4398                           ; 3 bytes @ 0x28
  4399  0148                     	ds	1
  4400  0149                     set_subdivision@tmpX:	
  4401  0149                     sin@y:	
  4402                           ; 2 bytes @ 0x29
  4403                           
  4404                           
  4405                           ; 3 bytes @ 0x29
  4406  0149                     	ds	2
  4407  014B                     ??_modSawRev:	
  4408  014B                     ??_exp:	
  4409                           ; 1 bytes @ 0x2B
  4410                           
  4411  014B                     modSquare@inflection:	
  4412                           ; 1 bytes @ 0x2B
  4413                           
  4414                           
  4415                           ; 3 bytes @ 0x2B
  4416  014B                     	ds	1
  4417  014C                     _sin$2849:	
  4418  014C                     _exp$2850:	
  4419                           ; 3 bytes @ 0x2C
  4420                           
  4421                           
  4422                           ; 3 bytes @ 0x2C
  4423  014C                     	ds	2
  4424  014E                     modSquare@tmpVal:	
  4425                           
  4426                           ; 2 bytes @ 0x2E
  4427  014E                     	ds	1
  4428  014F                     sin@x2:	
  4429  014F                     _exp$2606:	
  4430                           ; 3 bytes @ 0x2F
  4431                           
  4432                           
  4433                           ; 3 bytes @ 0x2F
  4434  014F                     	ds	1
  4435  0150                     ??_updateModulationArray:	
  4436                           
  4437                           ; 1 bytes @ 0x30
  4438  0150                     	ds	2
  4439  0152                     sin@sgn:	
  4440  0152                     exp@exponent:	
  4441                           ; 1 bytes @ 0x32
  4442                           
  4443                           
  4444                           ; 2 bytes @ 0x32
  4445  0152                     	ds	1
  4446  0153                     ??_calcSinArray:	
  4447                           
  4448                           ; 1 bytes @ 0x33
  4449  0153                     	ds	1
  4450  0154                     exp@sign:	
  4451  0154                     updateModulationArray@thisAngle:	
  4452                           ; 1 bytes @ 0x34
  4453                           
  4454                           
  4455                           ; 2 bytes @ 0x34
  4456  0154                     	ds	1
  4457  0155                     ?_pow:	
  4458  0155                     pow@x:	
  4459                           ; 3 bytes @ 0x35
  4460                           
  4461                           
  4462                           ; 3 bytes @ 0x35
  4463  0155                     	ds	1
  4464  0156                     updateModulationArray@iAngle:	
  4465                           
  4466                           ; 1 bytes @ 0x36
  4467  0156                     	ds	1
  4468  0157                     calcSinArray@x:	
  4469                           
  4470                           ; 1 bytes @ 0x37
  4471  0157                     	ds	1
  4472  0158                     calcSinArray@tmpVal:	
  4473  0158                     pow@y:	
  4474                           ; 3 bytes @ 0x38
  4475                           
  4476                           
  4477                           ; 3 bytes @ 0x38
  4478  0158                     	ds	3
  4479  015B                     ??_pow:	
  4480  015B                     calcSinArray@iAngle:	
  4481                           ; 1 bytes @ 0x3B
  4482                           
  4483                           
  4484                           ; 1 bytes @ 0x3B
  4485  015B                     	ds	1
  4486  015C                     _pow$2847:	
  4487                           
  4488                           ; 3 bytes @ 0x3C
  4489  015C                     	ds	3
  4490  015F                     _pow$2848:	
  4491                           
  4492                           ; 3 bytes @ 0x3F
  4493  015F                     	ds	3
  4494  0162                     pow@sign:	
  4495                           
  4496                           ; 1 bytes @ 0x42
  4497  0162                     	ds	1
  4498  0163                     pow@yi:	
  4499                           
  4500                           ; 4 bytes @ 0x43
  4501  0163                     	ds	4
  4502  0167                     ?_scaleA10kPot:	
  4503  0167                     ?_scaleiA10kPot:	
  4504                           ; 2 bytes @ 0x47
  4505                           
  4506  0167                     ?_scaleA100kPot:	
  4507                           ; 2 bytes @ 0x47
  4508                           
  4509  0167                     scaleA100kPot@input:	
  4510                           ; 2 bytes @ 0x47
  4511                           
  4512  0167                     scaleA10kPot@input:	
  4513                           ; 3 bytes @ 0x47
  4514                           
  4515  0167                     scaleiA10kPot@input:	
  4516                           ; 3 bytes @ 0x47
  4517                           
  4518                           
  4519                           ; 3 bytes @ 0x47
  4520  0167                     	ds	3
  4521                           
  4522                           	psect	cstackBANK1
  4523  00A0                     __pcstackBANK1:	
  4524  00A0                     ?___ftge:	
  4525  00A0                     ?_set_leds_top:	
  4526                           ; 1 bit 
  4527                           
  4528  00A0                     ?_USARTInit:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  00A0                     ??_ConfigureOscillator:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  00A0                     ??_InitApp:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  00A0                     ??_InitializeTaps:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  00A0                     ??_init_adc:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  00A0                     ??_init_pwm:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  00A0                     ??_init_timer2:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  00A0                     ??_init_timer0:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  00A0                     ?_set_leds_bottom:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  00A0                     ?_setLongBypassState:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  00A0                     ?_setLongTapState:	
  4559                           ; 1 bytes @ 0x0
  4560                           
  4561  00A0                     ?_updateSwitchBypassState:	
  4562                           ; 1 bytes @ 0x0
  4563                           
  4564  00A0                     ?_adc_convert:	
  4565                           ; 1 bytes @ 0x0
  4566                           
  4567  00A0                     ?_FLASH_ReadWord:	
  4568                           ; 2 bytes @ 0x0
  4569                           
  4570  00A0                     ?_getSwitchBypassState:	
  4571                           ; 2 bytes @ 0x0
  4572                           
  4573  00A0                     ?___ftpack:	
  4574                           ; 2 bytes @ 0x0
  4575                           
  4576  00A0                     ?_frexp:	
  4577                           ; 3 bytes @ 0x0
  4578                           
  4579  00A0                     ?___lmul:	
  4580                           ; 3 bytes @ 0x0
  4581                           
  4582  00A0                     ?___aldiv:	
  4583                           ; 4 bytes @ 0x0
  4584                           
  4585  00A0                     FLASH_ReadWord@flashAddr:	
  4586                           ; 4 bytes @ 0x0
  4587                           
  4588  00A0                     set_leds_top@x:	
  4589                           ; 2 bytes @ 0x0
  4590                           
  4591  00A0                     set_leds_bottom@x:	
  4592                           ; 2 bytes @ 0x0
  4593                           
  4594  00A0                     updateSwitchBypassState@state:	
  4595                           ; 2 bytes @ 0x0
  4596                           
  4597  00A0                     setLongBypassState@f_state:	
  4598                           ; 2 bytes @ 0x0
  4599                           
  4600  00A0                     setLongTapState@f_state:	
  4601                           ; 2 bytes @ 0x0
  4602                           
  4603  00A0                     USARTInit@baud_rate:	
  4604                           ; 2 bytes @ 0x0
  4605                           
  4606  00A0                     ___ftpack@arg:	
  4607                           ; 2 bytes @ 0x0
  4608                           
  4609  00A0                     ___ftge@ff1:	
  4610                           ; 3 bytes @ 0x0
  4611                           
  4612  00A0                     frexp@value:	
  4613                           ; 3 bytes @ 0x0
  4614                           
  4615  00A0                     ___lmul@multiplier:	
  4616                           ; 3 bytes @ 0x0
  4617                           
  4618  00A0                     ___aldiv@divisor:	
  4619                           ; 4 bytes @ 0x0
  4620                           
  4621                           
  4622                           ; 4 bytes @ 0x0
  4623  00A0                     	ds	1
  4624  00A1                     InitializeTaps@itap:	
  4625                           
  4626                           ; 2 bytes @ 0x1
  4627  00A1                     	ds	1
  4628  00A2                     ??_USARTInit:	
  4629  00A2                     ??_adc_convert:	
  4630                           ; 1 bytes @ 0x2
  4631                           
  4632  00A2                     ??_FLASH_ReadWord:	
  4633                           ; 1 bytes @ 0x2
  4634                           
  4635  00A2                     ??_set_leds_bottom:	
  4636                           ; 1 bytes @ 0x2
  4637                           
  4638  00A2                     ??_setLongBypassState:	
  4639                           ; 1 bytes @ 0x2
  4640                           
  4641  00A2                     ??_setLongTapState:	
  4642                           ; 1 bytes @ 0x2
  4643                           
  4644  00A2                     ??_updateSwitchBypassState:	
  4645                           ; 1 bytes @ 0x2
  4646                           
  4647  00A2                     ??_getSwitchBypassState:	
  4648                           ; 1 bytes @ 0x2
  4649                           
  4650  00A2                     FLASH_ReadWord@GIEBitValue:	
  4651                           ; 1 bytes @ 0x2
  4652                           
  4653  00A2                     set_leds_top@ledState:	
  4654                           ; 1 bytes @ 0x2
  4655                           
  4656                           
  4657                           ; 2 bytes @ 0x2
  4658  00A2                     	ds	1
  4659  00A3                     adc_convert@channel:	
  4660  00A3                     ___ftpack@exp:	
  4661                           ; 1 bytes @ 0x3
  4662                           
  4663  00A3                     frexp@eptr:	
  4664                           ; 1 bytes @ 0x3
  4665                           
  4666  00A3                     ___ftge@ff2:	
  4667                           ; 1 bytes @ 0x3
  4668                           
  4669                           
  4670                           ; 3 bytes @ 0x3
  4671  00A3                     	ds	1
  4672  00A4                     ??_set_leds_top:	
  4673  00A4                     ??_ReadSavedSettings:	
  4674                           ; 1 bytes @ 0x4
  4675                           
  4676  00A4                     ??_resetRingLEDs:	
  4677                           ; 1 bytes @ 0x4
  4678                           
  4679  00A4                     ??_setPresetDisplay:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  00A4                     ??_setExpressionDisplay:	
  4683                           ; 1 bytes @ 0x4
  4684                           
  4685  00A4                     ??_frexp:	
  4686                           ; 1 bytes @ 0x4
  4687                           
  4688  00A4                     ___ftpack@sign:	
  4689                           ; 1 bytes @ 0x4
  4690                           
  4691  00A4                     ___lmul@multiplicand:	
  4692                           ; 1 bytes @ 0x4
  4693                           
  4694  00A4                     ___aldiv@dividend:	
  4695                           ; 4 bytes @ 0x4
  4696                           
  4697                           
  4698                           ; 4 bytes @ 0x4
  4699  00A4                     	ds	1
  4700  00A5                     ??___ftpack:	
  4701                           
  4702                           ; 1 bytes @ 0x5
  4703  00A5                     	ds	1
  4704  00A6                     ??___ftge:	
  4705  00A6                     setPresetDisplay@ledChannel:	
  4706                           ; 1 bytes @ 0x6
  4707                           
  4708  00A6                     setExpressionDisplay@ledChannel:	
  4709                           ; 1 bytes @ 0x6
  4710                           
  4711                           
  4712                           ; 1 bytes @ 0x6
  4713  00A6                     	ds	1
  4714  00A7                     ??_update_mode:	
  4715  00A7                     ??_update_selectMode:	
  4716                           ; 1 bytes @ 0x7
  4717                           
  4718  00A7                     ??_setPedalMode:	
  4719                           ; 1 bytes @ 0x7
  4720                           
  4721                           
  4722                           ; 1 bytes @ 0x7
  4723  00A7                     	ds	1
  4724  00A8                     ??___lmul:	
  4725  00A8                     ??___aldiv:	
  4726                           ; 1 bytes @ 0x8
  4727                           
  4728  00A8                     ?___awtoft:	
  4729                           ; 1 bytes @ 0x8
  4730                           
  4731  00A8                     ?___lltoft:	
  4732                           ; 3 bytes @ 0x8
  4733                           
  4734  00A8                     ___awtoft@c:	
  4735                           ; 3 bytes @ 0x8
  4736                           
  4737  00A8                     ___lmul@product:	
  4738                           ; 2 bytes @ 0x8
  4739                           
  4740  00A8                     ___lltoft@c:	
  4741                           ; 4 bytes @ 0x8
  4742                           
  4743                           
  4744                           ; 4 bytes @ 0x8
  4745  00A8                     	ds	1
  4746  00A9                     ___aldiv@counter:	
  4747                           
  4748                           ; 1 bytes @ 0x9
  4749  00A9                     	ds	1
  4750  00AA                     ___aldiv@sign:	
  4751                           
  4752                           ; 1 bytes @ 0xA
  4753  00AA                     	ds	1
  4754  00AB                     ??___awtoft:	
  4755  00AB                     ___aldiv@quotient:	
  4756                           ; 1 bytes @ 0xB
  4757                           
  4758                           
  4759                           ; 4 bytes @ 0xB
  4760  00AB                     	ds	1
  4761  00AC                     ?_wait_ms:	
  4762  00AC                     ??___lltoft:	
  4763                           ; 1 bytes @ 0xC
  4764                           
  4765  00AC                     wait_ms@timeSec:	
  4766                           ; 1 bytes @ 0xC
  4767                           
  4768                           
  4769                           ; 2 bytes @ 0xC
  4770  00AC                     	ds	1
  4771  00AD                     ___awtoft@sign:	
  4772  00AD                     ___lltoft@exp:	
  4773                           ; 1 bytes @ 0xD
  4774                           
  4775                           
  4776                           ; 1 bytes @ 0xD
  4777  00AD                     	ds	1
  4778  00AE                     ??_wait_ms:	
  4779  00AE                     ?___ftmul:	
  4780                           ; 1 bytes @ 0xE
  4781                           
  4782  00AE                     ___ftmul@f1:	
  4783                           ; 3 bytes @ 0xE
  4784                           
  4785  00AE                     wait_ms@timemsl:	
  4786                           ; 3 bytes @ 0xE
  4787                           
  4788                           
  4789                           ; 4 bytes @ 0xE
  4790  00AE                     	ds	3
  4791  00B1                     ___ftmul@f2:	
  4792                           
  4793                           ; 3 bytes @ 0x11
  4794  00B1                     	ds	1
  4795  00B2                     ??_read_bottom_tactile:	
  4796  00B2                     ??_read_top_tactile:	
  4797                           ; 1 bytes @ 0x12
  4798                           
  4799  00B2                     ??_solidring_tactiles:	
  4800                           ; 1 bytes @ 0x12
  4801                           
  4802  00B2                     ??_ring_tactiles:	
  4803                           ; 1 bytes @ 0x12
  4804                           
  4805  00B2                     ?_setSwitchBypassRelays:	
  4806                           ; 1 bytes @ 0x12
  4807                           
  4808  00B2                     setSwitchBypassRelays@f_state:	
  4809                           ; 1 bytes @ 0x12
  4810                           
  4811                           
  4812                           ; 2 bytes @ 0x12
  4813  00B2                     	ds	1
  4814  00B3                     ring_tactiles@iLed:	
  4815                           
  4816                           ; 2 bytes @ 0x13
  4817  00B3                     	ds	1
  4818  00B4                     ??_setSwitchBypassRelays:	
  4819  00B4                     ??___ftmul:	
  4820                           ; 1 bytes @ 0x14
  4821                           
  4822  00B4                     solidring_tactiles@ring_delay:	
  4823                           ; 1 bytes @ 0x14
  4824                           
  4825                           
  4826                           ; 1 bytes @ 0x14
  4827  00B4                     	ds	1
  4828  00B5                     ring_tactiles@iLed_1529:	
  4829                           
  4830                           ; 2 bytes @ 0x15
  4831  00B5                     	ds	1
  4832  00B6                     ?_setSwitchBypassState:	
  4833  00B6                     setSwitchBypassState@f_state:	
  4834                           ; 1 bytes @ 0x16
  4835                           
  4836                           
  4837                           ; 2 bytes @ 0x16
  4838  00B6                     	ds	1
  4839  00B7                     ??_showSave:	
  4840                           
  4841                           ; 1 bytes @ 0x17
  4842  00B7                     	ds	1
  4843  00B8                     ??_setSwitchBypassState:	
  4844  00B8                     ?_setDoublePressState:	
  4845                           ; 1 bytes @ 0x18
  4846                           
  4847  00B8                     ___ftmul@exp:	
  4848                           ; 1 bytes @ 0x18
  4849                           
  4850  00B8                     setDoublePressState@f_state:	
  4851                           ; 1 bytes @ 0x18
  4852                           
  4853                           
  4854                           ; 2 bytes @ 0x18
  4855  00B8                     	ds	1
  4856  00B9                     ___ftmul@f3_as_product:	
  4857                           
  4858                           ; 3 bytes @ 0x19
  4859  00B9                     	ds	1
  4860  00BA                     ??_initSwitchBypass:	
  4861  00BA                     ??_setDoublePressState:	
  4862                           ; 1 bytes @ 0x1A
  4863                           
  4864  00BA                     initSwitchBypass@initState:	
  4865                           ; 1 bytes @ 0x1A
  4866                           
  4867                           
  4868                           ; 2 bytes @ 0x1A
  4869  00BA                     	ds	2
  4870  00BC                     ??_updateSwitchBypass:	
  4871  00BC                     ??_updateSwitchTap:	
  4872                           ; 1 bytes @ 0x1C
  4873                           
  4874  00BC                     ___ftmul@cntr:	
  4875                           ; 1 bytes @ 0x1C
  4876                           
  4877                           
  4878                           ; 1 bytes @ 0x1C
  4879  00BC                     	ds	1
  4880  00BD                     ___ftmul@sign:	
  4881                           
  4882                           ; 1 bytes @ 0x1D
  4883  00BD                     	ds	1
  4884  00BE                     ?___ftneg:	
  4885  00BE                     ___ftneg@f1:	
  4886                           ; 3 bytes @ 0x1E
  4887                           
  4888                           
  4889                           ; 3 bytes @ 0x1E
  4890  00BE                     	ds	3
  4891  00C1                     ??___ftneg:	
  4892  00C1                     ?___ftadd:	
  4893                           ; 1 bytes @ 0x21
  4894                           
  4895  00C1                     ___ftadd@f1:	
  4896                           ; 3 bytes @ 0x21
  4897                           
  4898                           
  4899                           ; 3 bytes @ 0x21
  4900  00C1                     	ds	1
  4901  00C2                     updateSwitchTap@tapCntDivisor:	
  4902                           
  4903                           ; 2 bytes @ 0x22
  4904  00C2                     	ds	2
  4905  00C4                     updateSwitchTap@iCnt:	
  4906  00C4                     ___ftadd@f2:	
  4907                           ; 1 bytes @ 0x24
  4908                           
  4909                           
  4910                           ; 3 bytes @ 0x24
  4911  00C4                     	ds	3
  4912  00C7                     ??___ftadd:	
  4913                           
  4914                           ; 1 bytes @ 0x27
  4915  00C7                     	ds	4
  4916  00CB                     ___ftadd@sign:	
  4917                           
  4918                           ; 1 bytes @ 0x2B
  4919  00CB                     	ds	1
  4920  00CC                     ___ftadd@exp2:	
  4921                           
  4922                           ; 1 bytes @ 0x2C
  4923  00CC                     	ds	1
  4924  00CD                     ___ftadd@exp1:	
  4925                           
  4926                           ; 1 bytes @ 0x2D
  4927  00CD                     	ds	1
  4928  00CE                     ?___ftdiv:	
  4929  00CE                     ___ftdiv@f2:	
  4930                           ; 3 bytes @ 0x2E
  4931                           
  4932                           
  4933                           ; 3 bytes @ 0x2E
  4934  00CE                     	ds	3
  4935  00D1                     ___ftdiv@f1:	
  4936                           
  4937                           ; 3 bytes @ 0x31
  4938  00D1                     	ds	3
  4939  00D4                     ??___ftdiv:	
  4940                           
  4941                           ; 1 bytes @ 0x34
  4942  00D4                     	ds	4
  4943  00D8                     ___ftdiv@cntr:	
  4944                           
  4945                           ; 1 bytes @ 0x38
  4946  00D8                     	ds	1
  4947  00D9                     ___ftdiv@f3:	
  4948                           
  4949                           ; 3 bytes @ 0x39
  4950  00D9                     	ds	3
  4951  00DC                     ___ftdiv@exp:	
  4952                           
  4953                           ; 1 bytes @ 0x3C
  4954  00DC                     	ds	1
  4955  00DD                     ___ftdiv@sign:	
  4956                           
  4957                           ; 1 bytes @ 0x3D
  4958  00DD                     	ds	1
  4959  00DE                     ?_map:	
  4960  00DE                     map@x:	
  4961                           ; 3 bytes @ 0x3E
  4962                           
  4963                           
  4964                           ; 3 bytes @ 0x3E
  4965  00DE                     	ds	3
  4966  00E1                     map@in_min:	
  4967                           
  4968                           ; 3 bytes @ 0x41
  4969  00E1                     	ds	3
  4970  00E4                     map@in_max:	
  4971                           
  4972                           ; 3 bytes @ 0x44
  4973  00E4                     	ds	3
  4974  00E7                     map@out_min:	
  4975                           
  4976                           ; 3 bytes @ 0x47
  4977  00E7                     	ds	3
  4978  00EA                     map@out_max:	
  4979                           
  4980                           ; 3 bytes @ 0x4A
  4981  00EA                     	ds	3
  4982  00ED                     ??_map:	
  4983  00ED                     _map$2832:	
  4984                           ; 1 bytes @ 0x4D
  4985                           
  4986                           
  4987                           ; 3 bytes @ 0x4D
  4988  00ED                     	ds	3
  4989  00F0                     ??_scaleA10kPot:	
  4990  00F0                     ??_scaleiA10kPot:	
  4991                           ; 1 bytes @ 0x50
  4992                           
  4993  00F0                     ??_scaleA100kPot:	
  4994                           ; 1 bytes @ 0x50
  4995                           
  4996  00F0                     ??_modTri:	
  4997                           ; 1 bytes @ 0x50
  4998                           
  4999  00F0                     ??_modSquare:	
  5000                           ; 1 bytes @ 0x50
  5001                           
  5002  00F0                     ??_modSaw:	
  5003                           ; 1 bytes @ 0x50
  5004                           
  5005  00F0                     ??_eval_poly:	
  5006                           ; 1 bytes @ 0x50
  5007                           
  5008  00F0                     ??___wmul:	
  5009                           ; 1 bytes @ 0x50
  5010                           
  5011  00F0                     ??___ftsub:	
  5012                           ; 1 bytes @ 0x50
  5013                           
  5014                           
  5015                           	psect	cstackCOMMON
  5016  0070                     __pcstackCOMMON:	
  5017                           ; 1 bytes @ 0x50
  5018                           
  5019  0070                     ?_calcSinArray:	
  5020  0070                     ?_ConfigureOscillator:	
  5021                           ; 1 bytes @ 0x0
  5022                           
  5023  0070                     ?_InitApp:	
  5024                           ; 1 bytes @ 0x0
  5025                           
  5026  0070                     ?_InitializeTaps:	
  5027                           ; 1 bytes @ 0x0
  5028                           
  5029  0070                     ?_initSwitchBypass:	
  5030                           ; 1 bytes @ 0x0
  5031                           
  5032  0070                     ?_ReadSavedSettings:	
  5033                           ; 1 bytes @ 0x0
  5034                           
  5035  0070                     ?_updateModulationArray:	
  5036                           ; 1 bytes @ 0x0
  5037                           
  5038  0070                     ?_update_mode:	
  5039                           ; 1 bytes @ 0x0
  5040                           
  5041  0070                     ?_update_selectMode:	
  5042                           ; 1 bytes @ 0x0
  5043                           
  5044  0070                     ?_updateSwitchBypass:	
  5045                           ; 1 bytes @ 0x0
  5046                           
  5047  0070                     ?_updateSwitchTap:	
  5048                           ; 1 bytes @ 0x0
  5049                           
  5050  0070                     ?_read_bottom_tactile:	
  5051                           ; 1 bytes @ 0x0
  5052                           
  5053  0070                     ?_read_top_tactile:	
  5054                           ; 1 bytes @ 0x0
  5055                           
  5056  0070                     ?_init_adc:	
  5057                           ; 1 bytes @ 0x0
  5058                           
  5059  0070                     ?_init_pwm:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_init_timer2:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_init_timer0:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_solidring_tactiles:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_ring_tactiles:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_resetRingLEDs:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?_setPedalMode:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?_setPresetDisplay:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?_setExpressionDisplay:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     ?_isr:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     ?_main:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     ?_showSave:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     ?i1_set_leds_top:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     ?___awdiv:	
  5099                           ; 1 bytes @ 0x0
  5100                           
  5101  0070                     ?i1___lmul:	
  5102                           ; 2 bytes @ 0x0
  5103                           
  5104  0070                     ___awdiv@divisor:	
  5105                           ; 4 bytes @ 0x0
  5106                           
  5107  0070                     i1set_leds_top@x:	
  5108                           ; 2 bytes @ 0x0
  5109                           
  5110  0070                     i1___lmul@multiplier:	
  5111                           ; 2 bytes @ 0x0
  5112                           
  5113                           
  5114                           ; 4 bytes @ 0x0
  5115  0070                     	ds	2
  5116  0072                     ___awdiv@dividend:	
  5117  0072                     i1set_leds_top@ledState:	
  5118                           ; 2 bytes @ 0x2
  5119                           
  5120                           
  5121                           ; 2 bytes @ 0x2
  5122  0072                     	ds	2
  5123  0074                     ??___awdiv:	
  5124  0074                     ??i1_set_leds_top:	
  5125                           ; 1 bytes @ 0x4
  5126                           
  5127  0074                     i1___lmul@multiplicand:	
  5128                           ; 1 bytes @ 0x4
  5129                           
  5130                           
  5131                           ; 4 bytes @ 0x4
  5132  0074                     	ds	1
  5133  0075                     ___awdiv@counter:	
  5134                           
  5135                           ; 1 bytes @ 0x5
  5136  0075                     	ds	1
  5137  0076                     ___awdiv@sign:	
  5138                           
  5139                           ; 1 bytes @ 0x6
  5140  0076                     	ds	1
  5141  0077                     ___awdiv@quotient:	
  5142                           
  5143                           ; 2 bytes @ 0x7
  5144  0077                     	ds	1
  5145  0078                     ??i1___lmul:	
  5146  0078                     i1___lmul@product:	
  5147                           ; 1 bytes @ 0x8
  5148                           
  5149                           
  5150                           ; 4 bytes @ 0x8
  5151  0078                     	ds	4
  5152  007C                     ??i1___aldiv:	
  5153                           
  5154                           ; 1 bytes @ 0xC
  5155  007C                     	ds	1
  5156                           
  5157                           	psect	cstackBANK0
  5158  0020                     __pcstackBANK0:	
  5159  0020                     ?i1___aldiv:	
  5160  0020                     i1___aldiv@divisor:	
  5161                           ; 4 bytes @ 0x0
  5162                           
  5163                           
  5164                           ; 4 bytes @ 0x0
  5165  0020                     	ds	4
  5166  0024                     i1___aldiv@dividend:	
  5167                           
  5168                           ; 4 bytes @ 0x4
  5169  0024                     	ds	4
  5170  0028                     i1___aldiv@counter:	
  5171                           
  5172                           ; 1 bytes @ 0x8
  5173  0028                     	ds	1
  5174  0029                     i1___aldiv@sign:	
  5175                           
  5176                           ; 1 bytes @ 0x9
  5177  0029                     	ds	1
  5178  002A                     i1___aldiv@quotient:	
  5179                           
  5180                           ; 4 bytes @ 0xA
  5181  002A                     	ds	4
  5182  002E                     ?_modulation:	
  5183  002E                     modulation@x:	
  5184                           ; 4 bytes @ 0xE
  5185                           
  5186                           
  5187                           ; 4 bytes @ 0xE
  5188  002E                     	ds	4
  5189  0032                     modulation@y:	
  5190                           
  5191                           ; 4 bytes @ 0x12
  5192  0032                     	ds	4
  5193  0036                     ??_modulation:	
  5194                           
  5195                           ; 1 bytes @ 0x16
  5196  0036                     	ds	4
  5197  003A                     ??_isr:	
  5198                           
  5199                           ; 1 bytes @ 0x1A
  5200  003A                     	ds	9
  5201  0043                     isr@tmpSubDelay:	
  5202                           
  5203                           ; 2 bytes @ 0x23
  5204  0043                     	ds	2
  5205                           
  5206                           	psect	maintext
  5207  0364                     __pmaintext:	
  5208 ;;
  5209 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5210 ;;
  5211 ;; *************** function _main *****************
  5212 ;; Defined at:
  5213 ;;		line 68 in file "main.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : B1F/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5228 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5230 ;;      Totals:         0       0       0       0       5       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5231 ;;Total ram usage:       14 bytes
  5232 ;; Hardware stack levels required when called:    9
  5233 ;; This function calls:
  5234 ;;		_ConfigureOscillator
  5235 ;;		_InitApp
  5236 ;;		_InitializeTaps
  5237 ;;		_ReadSavedSettings
  5238 ;;		_USARTInit
  5239 ;;		___awtoft
  5240 ;;		___fttol
  5241 ;;		_adc_convert
  5242 ;;		_calcSinArray
  5243 ;;		_initSwitchBypass
  5244 ;;		_map
  5245 ;;		_read_bottom_tactile
  5246 ;;		_read_top_tactile
  5247 ;;		_scaleA100kPot
  5248 ;;		_scaleA10kPot
  5249 ;;		_scaleiA10kPot
  5250 ;;		_set_subdivision
  5251 ;;		_updateModulationArray
  5252 ;;		_updateSwitchBypass
  5253 ;;		_updateSwitchTap
  5254 ;;		_update_mode
  5255 ;;		_update_selectMode
  5256 ;; This function is called by:
  5257 ;;		Startup code after reset
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _main
  5263  0364                     _main:	
  5264                           
  5265                           ;main.c: 70: calcSinArray();
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5269  0364  319A  225C  3183   	fcall	_calcSinArray
  5270                           
  5271                           ;main.c: 82: USARTInit(31250);
  5272  0367  3012               	movlw	18
  5273  0368  0021               	movlb	1	; select bank1
  5274  0369  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5275  036A  307A               	movlw	122
  5276  036B  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5277  036C  31A4  24B8  3183   	fcall	_USARTInit
  5278                           
  5279                           ;main.c: 83: ConfigureOscillator();
  5280  036F  31AF  271A  3183   	fcall	_ConfigureOscillator
  5281                           
  5282                           ;main.c: 84: InitApp();
  5283  0372  31A1  218A  3183   	fcall	_InitApp
  5284                           
  5285                           ;main.c: 86: PORTEbits.RE0 = 1;
  5286  0375  0020               	movlb	0	; select bank0
  5287  0376  1410               	bsf	16,0	;volatile
  5288                           
  5289                           ;main.c: 87: PORTEbits.RE1 = 1;
  5290  0377  1490               	bsf	16,1	;volatile
  5291                           
  5292                           ;main.c: 88: PORTDbits.RD6 = 1;
  5293  0378  170F               	bsf	15,6	;volatile
  5294                           
  5295                           ;main.c: 89: PORTDbits.RD5 = 1;
  5296  0379  168F               	bsf	15,5	;volatile
  5297                           
  5298                           ;main.c: 90: PORTCbits.RC0 = 1;
  5299  037A  140E               	bsf	14,0	;volatile
  5300                           
  5301                           ;main.c: 91: PORTDbits.RD7 = 1;
  5302  037B  178F               	bsf	15,7	;volatile
  5303                           
  5304                           ;main.c: 93: InitializeTaps();
  5305  037C  31A0  20DD  3183   	fcall	_InitializeTaps
  5306                           
  5307                           ;main.c: 94: initSwitchBypass();
  5308  037F  31AF  2753  3183   	fcall	_initSwitchBypass
  5309                           
  5310                           ;main.c: 97: ReadSavedSettings();
  5311  0382  31A7  278A  3183   	fcall	_ReadSavedSettings
  5312                           
  5313                           ;main.c: 98: updateModulationArray();
  5314  0385  318A  2236  3183   	fcall	_updateModulationArray
  5315  0388                     l8973:	
  5316                           ;main.c: 99: while (1) {
  5317                           
  5318                           
  5319                           ;main.c: 102: update_mode();
  5320  0388  31A2  2252  3183   	fcall	_update_mode
  5321                           
  5322                           ;main.c: 103: update_selectMode();
  5323  038B  3190  200B  3183   	fcall	_update_selectMode
  5324                           
  5325                           ;main.c: 106: updateSwitchBypass();
  5326  038E  3192  222B  3183   	fcall	_updateSwitchBypass
  5327                           
  5328                           ;main.c: 107: if (presetSaveMode != 1) {
  5329  0391  0020               	movlb	0	; select bank0
  5330  0392  0368               	decf	_presetSaveMode,w
  5331  0393  1903               	btfsc	3,2
  5332  0394  2B98               	goto	l8983
  5333                           
  5334                           ;main.c: 108: updateSwitchTap();
  5335  0395  318C  241D  3183   	fcall	_updateSwitchTap
  5336  0398                     l8983:	
  5337                           
  5338                           ;main.c: 109: }
  5339                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5340  0398  0020               	movlb	0	; select bank0
  5341  0399  0368               	decf	_presetSaveMode,w
  5342  039A  1903               	btfsc	3,2
  5343  039B  2BA7               	goto	l8989
  5344  039C  0867               	movf	_mode2_state,w
  5345  039D  0023               	movlb	3	; select bank3
  5346  039E  065F               	xorwf	_presetModeCnst^(0+384),w
  5347  039F  1903               	skipnz
  5348  03A0  2BA7               	goto	l8989
  5349                           
  5350                           ;main.c: 112: read_bottom_tactile();
  5351  03A1  31A5  258B  3183   	fcall	_read_bottom_tactile
  5352                           
  5353                           ;main.c: 113: read_top_tactile();
  5354  03A4  31A5  25D5  3183   	fcall	_read_top_tactile
  5355  03A7                     l8989:	
  5356                           
  5357                           ;main.c: 114: }
  5358                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5359  03A7  3000               	movlw	0
  5360  03A8  31AF  2762  3183   	fcall	_adc_convert
  5361  03AB  0021               	movlb	1	; select bank1
  5362  03AC  0821               	movf	(?_adc_convert+1)^(0+128),w
  5363  03AD  0023               	movlb	3	; select bank3
  5364  03AE  00A9               	movwf	(_knob_1_pos+1)^(0+384)
  5365  03AF  0021               	movlb	1	; select bank1
  5366  03B0  0820               	movf	?_adc_convert^(0+128),w
  5367  03B1  0023               	movlb	3	; select bank3
  5368  03B2  00A8               	movwf	_knob_1_pos^(0+384)
  5369                           
  5370                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5371  03B3  3001               	movlw	1
  5372  03B4  31AF  2762  3183   	fcall	_adc_convert
  5373  03B7  0021               	movlb	1	; select bank1
  5374  03B8  0821               	movf	(?_adc_convert+1)^(0+128),w
  5375  03B9  0023               	movlb	3	; select bank3
  5376  03BA  00AB               	movwf	(_knob_2_pos+1)^(0+384)
  5377  03BB  0021               	movlb	1	; select bank1
  5378  03BC  0820               	movf	?_adc_convert^(0+128),w
  5379  03BD  0023               	movlb	3	; select bank3
  5380  03BE  00AA               	movwf	_knob_2_pos^(0+384)
  5381                           
  5382                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5383  03BF  3002               	movlw	2
  5384  03C0  31AF  2762  3183   	fcall	_adc_convert
  5385  03C3  0021               	movlb	1	; select bank1
  5386  03C4  0821               	movf	(?_adc_convert+1)^(0+128),w
  5387  03C5  0023               	movlb	3	; select bank3
  5388  03C6  00AD               	movwf	(_knob_3_pos+1)^(0+384)
  5389  03C7  0021               	movlb	1	; select bank1
  5390  03C8  0820               	movf	?_adc_convert^(0+128),w
  5391  03C9  0023               	movlb	3	; select bank3
  5392  03CA  00AC               	movwf	_knob_3_pos^(0+384)
  5393                           
  5394                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5395  03CB  3003               	movlw	3
  5396  03CC  31AF  2762  3183   	fcall	_adc_convert
  5397  03CF  0021               	movlb	1	; select bank1
  5398  03D0  0821               	movf	(?_adc_convert+1)^(0+128),w
  5399  03D1  0023               	movlb	3	; select bank3
  5400  03D2  00AF               	movwf	(_knob_4_pos+1)^(0+384)
  5401  03D3  0021               	movlb	1	; select bank1
  5402  03D4  0820               	movf	?_adc_convert^(0+128),w
  5403  03D5  0023               	movlb	3	; select bank3
  5404  03D6  00AE               	movwf	_knob_4_pos^(0+384)
  5405                           
  5406                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5407  03D7  3004               	movlw	4
  5408  03D8  31AF  2762  3183   	fcall	_adc_convert
  5409  03DB  0021               	movlb	1	; select bank1
  5410  03DC  0821               	movf	(?_adc_convert+1)^(0+128),w
  5411  03DD  0023               	movlb	3	; select bank3
  5412  03DE  00B1               	movwf	(_knob_5_pos+1)^(0+384)
  5413  03DF  0021               	movlb	1	; select bank1
  5414  03E0  0820               	movf	?_adc_convert^(0+128),w
  5415  03E1  0023               	movlb	3	; select bank3
  5416  03E2  00B0               	movwf	_knob_5_pos^(0+384)
  5417                           
  5418                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5419  03E3  094B               	comf	_knob1_prev^(0+384),w	;volatile
  5420  03E4  00EA               	movwf	??_main^(0+384)
  5421  03E5  094C               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5422  03E6  00EB               	movwf	(??_main^(0+384)+1)
  5423  03E7  0AEA               	incf	??_main^(0+384),f
  5424  03E8  1903               	skipnz
  5425  03E9  0AEB               	incf	(??_main^(0+384)+1),f
  5426  03EA  0828               	movf	_knob_1_pos^(0+384),w
  5427  03EB  076A               	addwf	??_main^(0+384),w
  5428  03EC  00EC               	movwf	(??_main+2)^(0+384)
  5429  03ED  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5430  03EE  3D6B               	addwfc	(??_main+1)^(0+384),w
  5431  03EF  00ED               	movwf	(??_main+3)^(0+384)
  5432  03F0  086D               	movf	(??_main+3)^(0+384),w
  5433  03F1  3A80               	xorlw	128
  5434  03F2  00EE               	movwf	(??_main+4)^(0+384)
  5435  03F3  3080               	movlw	128
  5436  03F4  026E               	subwf	(??_main+4)^(0+384),w
  5437  03F5  1D03               	skipz
  5438  03F6  2BF9               	goto	u9825
  5439  03F7  3004               	movlw	4
  5440  03F8  026C               	subwf	(??_main+2)^(0+384),w
  5441  03F9                     u9825:	
  5442  03F9  1803               	skipnc
  5443  03FA  2C14               	goto	l9003
  5444  03FB  0023               	movlb	3	; select bank3
  5445  03FC  094B               	comf	_knob1_prev^(0+384),w	;volatile
  5446  03FD  00EA               	movwf	??_main^(0+384)
  5447  03FE  094C               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5448  03FF  00EB               	movwf	(??_main^(0+384)+1)
  5449  0400  0AEA               	incf	??_main^(0+384),f
  5450  0401  1903               	skipnz
  5451  0402  0AEB               	incf	(??_main^(0+384)+1),f
  5452  0403  0828               	movf	_knob_1_pos^(0+384),w
  5453  0404  076A               	addwf	??_main^(0+384),w
  5454  0405  00EC               	movwf	(??_main+2)^(0+384)
  5455  0406  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5456  0407  3D6B               	addwfc	(??_main+1)^(0+384),w
  5457  0408  00ED               	movwf	(??_main+3)^(0+384)
  5458  0409  086D               	movf	(??_main+3)^(0+384),w
  5459  040A  3A80               	xorlw	128
  5460  040B  00EE               	movwf	(??_main+4)^(0+384)
  5461  040C  307F               	movlw	127
  5462  040D  026E               	subwf	(??_main+4)^(0+384),w
  5463  040E  1D03               	skipz
  5464  040F  2C12               	goto	u9835
  5465  0410  30FD               	movlw	253
  5466  0411  026C               	subwf	(??_main+2)^(0+384),w
  5467  0412                     u9835:	
  5468  0412  1803               	skipnc
  5469  0413  2C72               	goto	l9013
  5470  0414                     l9003:	
  5471                           
  5472                           ;main.c: 126: knob1_prev = knob_1_pos;
  5473  0414  0023               	movlb	3	; select bank3
  5474  0415  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5475  0416  00CC               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5476  0417  0828               	movf	_knob_1_pos^(0+384),w
  5477  0418  00CB               	movwf	_knob1_prev^(0+384)	;volatile
  5478                           
  5479                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5480  0419  084C               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5481  041A  0021               	movlb	1	; select bank1
  5482  041B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5483  041C  0023               	movlb	3	; select bank3
  5484  041D  084B               	movf	_knob1_prev^(0+384),w	;volatile
  5485  041E  0021               	movlb	1	; select bank1
  5486  041F  00A8               	movwf	___awtoft@c^(0+128)
  5487  0420  31A0  2097  3183   	fcall	___awtoft
  5488  0423  0021               	movlb	1	; select bank1
  5489  0424  0828               	movf	?___awtoft^(0+128),w
  5490  0425  0024               	movlb	4	; select bank4
  5491  0426  00D9               	movwf	_main$2829^(0+512)
  5492  0427  0021               	movlb	1	; select bank1
  5493  0428  0829               	movf	(?___awtoft+1)^(0+128),w
  5494  0429  0024               	movlb	4	; select bank4
  5495  042A  00DA               	movwf	(_main$2829+1)^(0+512)
  5496  042B  0021               	movlb	1	; select bank1
  5497  042C  082A               	movf	(?___awtoft+2)^(0+128),w
  5498  042D  0024               	movlb	4	; select bank4
  5499  042E  00DB               	movwf	(_main$2829+2)^(0+512)
  5500                           
  5501                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5502  042F  0859               	movf	_main$2829^(0+512),w
  5503  0430  0022               	movlb	2	; select bank2
  5504  0431  00E7               	movwf	scaleA10kPot@input^(0+256)
  5505  0432  0024               	movlb	4	; select bank4
  5506  0433  085A               	movf	(_main$2829+1)^(0+512),w
  5507  0434  0022               	movlb	2	; select bank2
  5508  0435  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5509  0436  0024               	movlb	4	; select bank4
  5510  0437  085B               	movf	(_main$2829+2)^(0+512),w
  5511  0438  0022               	movlb	2	; select bank2
  5512  0439  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5513  043A  319B  236E  3183   	fcall	_scaleA10kPot
  5514  043D  0022               	movlb	2	; select bank2
  5515  043E  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5516  043F  0026               	movlb	6	; select bank6
  5517  0440  0099               	movwf	25	;volatile
  5518  0441  0022               	movlb	2	; select bank2
  5519  0442  0867               	movf	?_scaleA10kPot^(0+256),w
  5520  0443  0026               	movlb	6	; select bank6
  5521  0444  0098               	movwf	24	;volatile
  5522                           
  5523                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5524  0445  0023               	movlb	3	; select bank3
  5525  0446  084C               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5526  0447  0021               	movlb	1	; select bank1
  5527  0448  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5528  0449  0023               	movlb	3	; select bank3
  5529  044A  084B               	movf	_knob1_prev^(0+384),w	;volatile
  5530  044B  0021               	movlb	1	; select bank1
  5531  044C  00A8               	movwf	___awtoft@c^(0+128)
  5532  044D  31A0  2097  3183   	fcall	___awtoft
  5533  0450  0021               	movlb	1	; select bank1
  5534  0451  0828               	movf	?___awtoft^(0+128),w
  5535  0452  0024               	movlb	4	; select bank4
  5536  0453  00DC               	movwf	_main$2830^(0+512)
  5537  0454  0021               	movlb	1	; select bank1
  5538  0455  0829               	movf	(?___awtoft+1)^(0+128),w
  5539  0456  0024               	movlb	4	; select bank4
  5540  0457  00DD               	movwf	(_main$2830+1)^(0+512)
  5541  0458  0021               	movlb	1	; select bank1
  5542  0459  082A               	movf	(?___awtoft+2)^(0+128),w
  5543  045A  0024               	movlb	4	; select bank4
  5544  045B  00DE               	movwf	(_main$2830+2)^(0+512)
  5545                           
  5546                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5547  045C  085C               	movf	_main$2830^(0+512),w
  5548  045D  0022               	movlb	2	; select bank2
  5549  045E  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5550  045F  0024               	movlb	4	; select bank4
  5551  0460  085D               	movf	(_main$2830+1)^(0+512),w
  5552  0461  0022               	movlb	2	; select bank2
  5553  0462  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5554  0463  0024               	movlb	4	; select bank4
  5555  0464  085E               	movf	(_main$2830+2)^(0+512),w
  5556  0465  0022               	movlb	2	; select bank2
  5557  0466  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5558  0467  319D  25E6  3183   	fcall	_scaleiA10kPot
  5559  046A  0022               	movlb	2	; select bank2
  5560  046B  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5561  046C  0026               	movlb	6	; select bank6
  5562  046D  009D               	movwf	29	;volatile
  5563  046E  0022               	movlb	2	; select bank2
  5564  046F  0867               	movf	?_scaleiA10kPot^(0+256),w
  5565  0470  0026               	movlb	6	; select bank6
  5566  0471  009C               	movwf	28	;volatile
  5567  0472                     l9013:	
  5568                           
  5569                           ;main.c: 130: }
  5570                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5571  0472  0023               	movlb	3	; select bank3
  5572  0473  094D               	comf	_knob2_prev^(0+384),w	;volatile
  5573  0474  00EA               	movwf	??_main^(0+384)
  5574  0475  094E               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5575  0476  00EB               	movwf	(??_main^(0+384)+1)
  5576  0477  0AEA               	incf	??_main^(0+384),f
  5577  0478  1903               	skipnz
  5578  0479  0AEB               	incf	(??_main^(0+384)+1),f
  5579  047A  082A               	movf	_knob_2_pos^(0+384),w
  5580  047B  076A               	addwf	??_main^(0+384),w
  5581  047C  00EC               	movwf	(??_main+2)^(0+384)
  5582  047D  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5583  047E  3D6B               	addwfc	(??_main+1)^(0+384),w
  5584  047F  00ED               	movwf	(??_main+3)^(0+384)
  5585  0480  086D               	movf	(??_main+3)^(0+384),w
  5586  0481  3A80               	xorlw	128
  5587  0482  00EE               	movwf	(??_main+4)^(0+384)
  5588  0483  3080               	movlw	128
  5589  0484  026E               	subwf	(??_main+4)^(0+384),w
  5590  0485  1D03               	skipz
  5591  0486  2C89               	goto	u9845
  5592  0487  3004               	movlw	4
  5593  0488  026C               	subwf	(??_main+2)^(0+384),w
  5594  0489                     u9845:	
  5595  0489  1803               	skipnc
  5596  048A  2CA4               	goto	l9017
  5597  048B  0023               	movlb	3	; select bank3
  5598  048C  094D               	comf	_knob2_prev^(0+384),w	;volatile
  5599  048D  00EA               	movwf	??_main^(0+384)
  5600  048E  094E               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5601  048F  00EB               	movwf	(??_main^(0+384)+1)
  5602  0490  0AEA               	incf	??_main^(0+384),f
  5603  0491  1903               	skipnz
  5604  0492  0AEB               	incf	(??_main^(0+384)+1),f
  5605  0493  082A               	movf	_knob_2_pos^(0+384),w
  5606  0494  076A               	addwf	??_main^(0+384),w
  5607  0495  00EC               	movwf	(??_main+2)^(0+384)
  5608  0496  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5609  0497  3D6B               	addwfc	(??_main+1)^(0+384),w
  5610  0498  00ED               	movwf	(??_main+3)^(0+384)
  5611  0499  086D               	movf	(??_main+3)^(0+384),w
  5612  049A  3A80               	xorlw	128
  5613  049B  00EE               	movwf	(??_main+4)^(0+384)
  5614  049C  307F               	movlw	127
  5615  049D  026E               	subwf	(??_main+4)^(0+384),w
  5616  049E  1D03               	skipz
  5617  049F  2CA2               	goto	u9855
  5618  04A0  30FD               	movlw	253
  5619  04A1  026C               	subwf	(??_main+2)^(0+384),w
  5620  04A2                     u9855:	
  5621  04A2  1803               	skipnc
  5622  04A3  2D14               	goto	l9027
  5623  04A4                     l9017:	
  5624                           
  5625                           ;main.c: 135: knob2_prev = knob_2_pos;
  5626  04A4  0023               	movlb	3	; select bank3
  5627  04A5  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5628  04A6  00CE               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5629  04A7  082A               	movf	_knob_2_pos^(0+384),w
  5630  04A8  00CD               	movwf	_knob2_prev^(0+384)	;volatile
  5631                           
  5632                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5633  04A9  094D               	comf	_knob2_prev^(0+384),w	;volatile
  5634  04AA  00EA               	movwf	??_main^(0+384)
  5635  04AB  094E               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5636  04AC  00EB               	movwf	(??_main^(0+384)+1)
  5637  04AD  0AEA               	incf	??_main^(0+384),f
  5638  04AE  1903               	skipnz
  5639  04AF  0AEB               	incf	(??_main^(0+384)+1),f
  5640  04B0  086A               	movf	??_main^(0+384),w
  5641  04B1  3EFF               	addlw	255
  5642  04B2  0021               	movlb	1	; select bank1
  5643  04B3  00A8               	movwf	___awtoft@c^(0+128)
  5644  04B4  3003               	movlw	3
  5645  04B5  0023               	movlb	3	; select bank3
  5646  04B6  3D6B               	addwfc	(??_main+1)^(0+384),w
  5647  04B7  0021               	movlb	1	; select bank1
  5648  04B8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5649  04B9  31A0  2097  3183   	fcall	___awtoft
  5650  04BC  0021               	movlb	1	; select bank1
  5651  04BD  0828               	movf	?___awtoft^(0+128),w
  5652  04BE  0024               	movlb	4	; select bank4
  5653  04BF  00DF               	movwf	_main$2831^(0+512)
  5654  04C0  0021               	movlb	1	; select bank1
  5655  04C1  0829               	movf	(?___awtoft+1)^(0+128),w
  5656  04C2  0024               	movlb	4	; select bank4
  5657  04C3  00E0               	movwf	(_main$2831+1)^(0+512)
  5658  04C4  0021               	movlb	1	; select bank1
  5659  04C5  082A               	movf	(?___awtoft+2)^(0+128),w
  5660  04C6  0024               	movlb	4	; select bank4
  5661  04C7  00E1               	movwf	(_main$2831+2)^(0+512)
  5662                           
  5663                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5664  04C8  085F               	movf	_main$2831^(0+512),w
  5665  04C9  0022               	movlb	2	; select bank2
  5666  04CA  00E7               	movwf	scaleA100kPot@input^(0+256)
  5667  04CB  0024               	movlb	4	; select bank4
  5668  04CC  0860               	movf	(_main$2831+1)^(0+512),w
  5669  04CD  0022               	movlb	2	; select bank2
  5670  04CE  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5671  04CF  0024               	movlb	4	; select bank4
  5672  04D0  0861               	movf	(_main$2831+2)^(0+512),w
  5673  04D1  0022               	movlb	2	; select bank2
  5674  04D2  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5675  04D3  3199  2150  3183   	fcall	_scaleA100kPot
  5676  04D6  0022               	movlb	2	; select bank2
  5677  04D7  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5678  04D8  0025               	movlb	5	; select bank5
  5679  04D9  0092               	movwf	18	;volatile
  5680  04DA  0022               	movlb	2	; select bank2
  5681  04DB  0867               	movf	?_scaleA100kPot^(0+256),w
  5682  04DC  0025               	movlb	5	; select bank5
  5683  04DD  0091               	movwf	17	;volatile
  5684                           
  5685                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5686  04DE  0023               	movlb	3	; select bank3
  5687  04DF  094D               	comf	_knob2_prev^(0+384),w	;volatile
  5688  04E0  00EA               	movwf	??_main^(0+384)
  5689  04E1  094E               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5690  04E2  00EB               	movwf	(??_main^(0+384)+1)
  5691  04E3  0AEA               	incf	??_main^(0+384),f
  5692  04E4  1903               	skipnz
  5693  04E5  0AEB               	incf	(??_main^(0+384)+1),f
  5694  04E6  086A               	movf	??_main^(0+384),w
  5695  04E7  3EFF               	addlw	255
  5696  04E8  0021               	movlb	1	; select bank1
  5697  04E9  00A8               	movwf	___awtoft@c^(0+128)
  5698  04EA  3003               	movlw	3
  5699  04EB  0023               	movlb	3	; select bank3
  5700  04EC  3D6B               	addwfc	(??_main+1)^(0+384),w
  5701  04ED  0021               	movlb	1	; select bank1
  5702  04EE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5703  04EF  31A0  2097  3183   	fcall	___awtoft
  5704  04F2  0021               	movlb	1	; select bank1
  5705  04F3  0828               	movf	?___awtoft^(0+128),w
  5706  04F4  0024               	movlb	4	; select bank4
  5707  04F5  00DF               	movwf	_main$2831^(0+512)
  5708  04F6  0021               	movlb	1	; select bank1
  5709  04F7  0829               	movf	(?___awtoft+1)^(0+128),w
  5710  04F8  0024               	movlb	4	; select bank4
  5711  04F9  00E0               	movwf	(_main$2831+1)^(0+512)
  5712  04FA  0021               	movlb	1	; select bank1
  5713  04FB  082A               	movf	(?___awtoft+2)^(0+128),w
  5714  04FC  0024               	movlb	4	; select bank4
  5715  04FD  00E1               	movwf	(_main$2831+2)^(0+512)
  5716                           
  5717                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5718  04FE  085F               	movf	_main$2831^(0+512),w
  5719  04FF  0022               	movlb	2	; select bank2
  5720  0500  00E7               	movwf	scaleA100kPot@input^(0+256)
  5721  0501  0024               	movlb	4	; select bank4
  5722  0502  0860               	movf	(_main$2831+1)^(0+512),w
  5723  0503  0022               	movlb	2	; select bank2
  5724  0504  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5725  0505  0024               	movlb	4	; select bank4
  5726  0506  0861               	movf	(_main$2831+2)^(0+512),w
  5727  0507  0022               	movlb	2	; select bank2
  5728  0508  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5729  0509  3199  2150  3183   	fcall	_scaleA100kPot
  5730  050C  0022               	movlb	2	; select bank2
  5731  050D  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5732  050E  0025               	movlb	5	; select bank5
  5733  050F  0099               	movwf	25	;volatile
  5734  0510  0022               	movlb	2	; select bank2
  5735  0511  0867               	movf	?_scaleA100kPot^(0+256),w
  5736  0512  0025               	movlb	5	; select bank5
  5737  0513  0098               	movwf	24	;volatile
  5738  0514                     l9027:	
  5739                           
  5740                           ;main.c: 138: }
  5741                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5742  0514  0023               	movlb	3	; select bank3
  5743  0515  094F               	comf	_knob3_prev^(0+384),w	;volatile
  5744  0516  00EA               	movwf	??_main^(0+384)
  5745  0517  0950               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5746  0518  00EB               	movwf	(??_main^(0+384)+1)
  5747  0519  0AEA               	incf	??_main^(0+384),f
  5748  051A  1903               	skipnz
  5749  051B  0AEB               	incf	(??_main^(0+384)+1),f
  5750  051C  082C               	movf	_knob_3_pos^(0+384),w
  5751  051D  076A               	addwf	??_main^(0+384),w
  5752  051E  00EC               	movwf	(??_main+2)^(0+384)
  5753  051F  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5754  0520  3D6B               	addwfc	(??_main+1)^(0+384),w
  5755  0521  00ED               	movwf	(??_main+3)^(0+384)
  5756  0522  086D               	movf	(??_main+3)^(0+384),w
  5757  0523  3A80               	xorlw	128
  5758  0524  00EE               	movwf	(??_main+4)^(0+384)
  5759  0525  3080               	movlw	128
  5760  0526  026E               	subwf	(??_main+4)^(0+384),w
  5761  0527  1D03               	skipz
  5762  0528  2D2B               	goto	u9865
  5763  0529  3004               	movlw	4
  5764  052A  026C               	subwf	(??_main+2)^(0+384),w
  5765  052B                     u9865:	
  5766  052B  1803               	skipnc
  5767  052C  2D46               	goto	l9031
  5768  052D  0023               	movlb	3	; select bank3
  5769  052E  094F               	comf	_knob3_prev^(0+384),w	;volatile
  5770  052F  00EA               	movwf	??_main^(0+384)
  5771  0530  0950               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5772  0531  00EB               	movwf	(??_main^(0+384)+1)
  5773  0532  0AEA               	incf	??_main^(0+384),f
  5774  0533  1903               	skipnz
  5775  0534  0AEB               	incf	(??_main^(0+384)+1),f
  5776  0535  082C               	movf	_knob_3_pos^(0+384),w
  5777  0536  076A               	addwf	??_main^(0+384),w
  5778  0537  00EC               	movwf	(??_main+2)^(0+384)
  5779  0538  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5780  0539  3D6B               	addwfc	(??_main+1)^(0+384),w
  5781  053A  00ED               	movwf	(??_main+3)^(0+384)
  5782  053B  086D               	movf	(??_main+3)^(0+384),w
  5783  053C  3A80               	xorlw	128
  5784  053D  00EE               	movwf	(??_main+4)^(0+384)
  5785  053E  307F               	movlw	127
  5786  053F  026E               	subwf	(??_main+4)^(0+384),w
  5787  0540  1D03               	skipz
  5788  0541  2D44               	goto	u9875
  5789  0542  30FD               	movlw	253
  5790  0543  026C               	subwf	(??_main+2)^(0+384),w
  5791  0544                     u9875:	
  5792  0544  1803               	skipnc
  5793  0545  2DAE               	goto	l9043
  5794  0546                     l9031:	
  5795                           
  5796                           ;main.c: 149: knob3_prev = knob_3_pos;
  5797  0546  0023               	movlb	3	; select bank3
  5798  0547  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5799  0548  00D0               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5800  0549  082C               	movf	_knob_3_pos^(0+384),w
  5801  054A  00CF               	movwf	_knob3_prev^(0+384)	;volatile
  5802                           
  5803                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5804  054B  3080               	movlw	128
  5805  054C  0021               	movlb	1	; select bank1
  5806  054D  00EA               	movwf	map@out_max^(0+128)
  5807  054E  309D               	movlw	157
  5808  054F  00EB               	movwf	(map@out_max+1)^(0+128)
  5809  0550  3043               	movlw	67
  5810  0551  00EC               	movwf	(map@out_max+2)^(0+128)
  5811  0552  3000               	movlw	0
  5812  0553  00E7               	movwf	map@out_min^(0+128)
  5813  0554  3034               	movlw	52
  5814  0555  00E8               	movwf	(map@out_min+1)^(0+128)
  5815  0556  3042               	movlw	66
  5816  0557  00E9               	movwf	(map@out_min+2)^(0+128)
  5817  0558  30C0               	movlw	192
  5818  0559  00E4               	movwf	map@in_max^(0+128)
  5819  055A  307F               	movlw	127
  5820  055B  00E5               	movwf	(map@in_max+1)^(0+128)
  5821  055C  3044               	movlw	68
  5822  055D  00E6               	movwf	(map@in_max+2)^(0+128)
  5823  055E  3000               	movlw	0
  5824  055F  00E1               	movwf	map@in_min^(0+128)
  5825  0560  3000               	movlw	0
  5826  0561  00E2               	movwf	(map@in_min+1)^(0+128)
  5827  0562  3000               	movlw	0
  5828  0563  00E3               	movwf	(map@in_min+2)^(0+128)
  5829  0564  0023               	movlb	3	; select bank3
  5830  0565  0850               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5831  0566  0021               	movlb	1	; select bank1
  5832  0567  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5833  0568  0023               	movlb	3	; select bank3
  5834  0569  084F               	movf	_knob3_prev^(0+384),w	;volatile
  5835  056A  0021               	movlb	1	; select bank1
  5836  056B  00A8               	movwf	___awtoft@c^(0+128)
  5837  056C  31A0  2097  3183   	fcall	___awtoft
  5838  056F  0021               	movlb	1	; select bank1
  5839  0570  0828               	movf	?___awtoft^(0+128),w
  5840  0571  00DE               	movwf	map@x^(0+128)
  5841  0572  0829               	movf	(?___awtoft+1)^(0+128),w
  5842  0573  00DF               	movwf	(map@x+1)^(0+128)
  5843  0574  082A               	movf	(?___awtoft+2)^(0+128),w
  5844  0575  00E0               	movwf	(map@x+2)^(0+128)
  5845  0576  319A  22E3  3183   	fcall	_map
  5846  0579  0021               	movlb	1	; select bank1
  5847  057A  085E               	movf	?_map^(0+128),w
  5848  057B  0022               	movlb	2	; select bank2
  5849  057C  00A0               	movwf	___fttol@f1^(0+256)
  5850  057D  0021               	movlb	1	; select bank1
  5851  057E  085F               	movf	(?_map+1)^(0+128),w
  5852  057F  0022               	movlb	2	; select bank2
  5853  0580  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5854  0581  0021               	movlb	1	; select bank1
  5855  0582  0860               	movf	(?_map+2)^(0+128),w
  5856  0583  0022               	movlb	2	; select bank2
  5857  0584  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5858  0585  3199  21D5  3183   	fcall	___fttol
  5859  0588  0022               	movlb	2	; select bank2
  5860  0589  0821               	movf	(?___fttol^(0+256)+1),w
  5861  058A  0023               	movlb	3	; select bank3
  5862  058B  00D6               	movwf	(_symmetry+1)^(0+384)
  5863  058C  0022               	movlb	2	; select bank2
  5864  058D  0820               	movf	?___fttol^(0+256),w
  5865  058E  0023               	movlb	3	; select bank3
  5866  058F  00D5               	movwf	_symmetry^(0+384)
  5867                           
  5868                           ;main.c: 152: modulation_changed = 1;
  5869  0590  01C3               	clrf	_modulation_changed^(0+384)
  5870  0591  0AC3               	incf	_modulation_changed^(0+384),f
  5871                           
  5872                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5873  0592  0856               	movf	(_symmetry+1)^(0+384),w
  5874  0593  3A80               	xorlw	128
  5875  0594  00EA               	movwf	??_main^(0+384)
  5876  0595  3080               	movlw	128
  5877  0596  026A               	subwf	??_main^(0+384),w
  5878  0597  1D03               	skipz
  5879  0598  2D9B               	goto	u9885
  5880  0599  30AF               	movlw	175
  5881  059A  0255               	subwf	_symmetry^(0+384),w
  5882  059B                     u9885:	
  5883  059B  1C03               	skipc
  5884  059C  2DAC               	goto	l362
  5885  059D  0023               	movlb	3	; select bank3
  5886  059E  0856               	movf	(_symmetry+1)^(0+384),w
  5887  059F  3A80               	xorlw	128
  5888  05A0  00EA               	movwf	??_main^(0+384)
  5889  05A1  3080               	movlw	128
  5890  05A2  026A               	subwf	??_main^(0+384),w
  5891  05A3  1D03               	skipz
  5892  05A4  2DA7               	goto	u9895
  5893  05A5  30B9               	movlw	185
  5894  05A6  0255               	subwf	_symmetry^(0+384),w
  5895  05A7                     u9895:	
  5896  05A7  1803               	skipnc
  5897  05A8  2DAC               	goto	l362
  5898                           
  5899                           ;main.c: 154: LATBbits.LATB1 = 1;
  5900  05A9  0022               	movlb	2	; select bank2
  5901  05AA  148D               	bsf	13,1	;volatile
  5902                           
  5903                           ;main.c: 155: } else {
  5904  05AB  2DAE               	goto	l9043
  5905  05AC                     l362:	
  5906                           
  5907                           ;main.c: 156: LATBbits.LATB1 = 0;
  5908  05AC  0022               	movlb	2	; select bank2
  5909  05AD  108D               	bcf	13,1	;volatile
  5910  05AE                     l9043:	
  5911                           
  5912                           ;main.c: 157: }
  5913                           ;main.c: 158: }
  5914                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5915  05AE  0023               	movlb	3	; select bank3
  5916  05AF  0951               	comf	_knob4_prev^(0+384),w	;volatile
  5917  05B0  00EA               	movwf	??_main^(0+384)
  5918  05B1  0952               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5919  05B2  00EB               	movwf	(??_main^(0+384)+1)
  5920  05B3  0AEA               	incf	??_main^(0+384),f
  5921  05B4  1903               	skipnz
  5922  05B5  0AEB               	incf	(??_main^(0+384)+1),f
  5923  05B6  082E               	movf	_knob_4_pos^(0+384),w
  5924  05B7  076A               	addwf	??_main^(0+384),w
  5925  05B8  00EC               	movwf	(??_main+2)^(0+384)
  5926  05B9  082F               	movf	(_knob_4_pos+1)^(0+384),w
  5927  05BA  3D6B               	addwfc	(??_main+1)^(0+384),w
  5928  05BB  00ED               	movwf	(??_main+3)^(0+384)
  5929  05BC  086D               	movf	(??_main+3)^(0+384),w
  5930  05BD  3A80               	xorlw	128
  5931  05BE  00EE               	movwf	(??_main+4)^(0+384)
  5932  05BF  3080               	movlw	128
  5933  05C0  026E               	subwf	(??_main+4)^(0+384),w
  5934  05C1  1D03               	skipz
  5935  05C2  2DC5               	goto	u9905
  5936  05C3  3004               	movlw	4
  5937  05C4  026C               	subwf	(??_main+2)^(0+384),w
  5938  05C5                     u9905:	
  5939  05C5  1803               	skipnc
  5940  05C6  2DE0               	goto	l9047
  5941  05C7  0023               	movlb	3	; select bank3
  5942  05C8  0951               	comf	_knob4_prev^(0+384),w	;volatile
  5943  05C9  00EA               	movwf	??_main^(0+384)
  5944  05CA  0952               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5945  05CB  00EB               	movwf	(??_main^(0+384)+1)
  5946  05CC  0AEA               	incf	??_main^(0+384),f
  5947  05CD  1903               	skipnz
  5948  05CE  0AEB               	incf	(??_main^(0+384)+1),f
  5949  05CF  082E               	movf	_knob_4_pos^(0+384),w
  5950  05D0  076A               	addwf	??_main^(0+384),w
  5951  05D1  00EC               	movwf	(??_main+2)^(0+384)
  5952  05D2  082F               	movf	(_knob_4_pos+1)^(0+384),w
  5953  05D3  3D6B               	addwfc	(??_main+1)^(0+384),w
  5954  05D4  00ED               	movwf	(??_main+3)^(0+384)
  5955  05D5  086D               	movf	(??_main+3)^(0+384),w
  5956  05D6  3A80               	xorlw	128
  5957  05D7  00EE               	movwf	(??_main+4)^(0+384)
  5958  05D8  307F               	movlw	127
  5959  05D9  026E               	subwf	(??_main+4)^(0+384),w
  5960  05DA  1D03               	skipz
  5961  05DB  2DDE               	goto	u9915
  5962  05DC  30FD               	movlw	253
  5963  05DD  026C               	subwf	(??_main+2)^(0+384),w
  5964  05DE                     u9915:	
  5965  05DE  1803               	skipnc
  5966  05DF  2E2A               	goto	l9051
  5967  05E0                     l9047:	
  5968                           
  5969                           ;main.c: 170: knob4_prev = knob_4_pos;
  5970  05E0  0023               	movlb	3	; select bank3
  5971  05E1  082F               	movf	(_knob_4_pos+1)^(0+384),w
  5972  05E2  00D2               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  5973  05E3  082E               	movf	_knob_4_pos^(0+384),w
  5974  05E4  00D1               	movwf	_knob4_prev^(0+384)	;volatile
  5975                           
  5976                           ;main.c: 172: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5977  05E5  3000               	movlw	0
  5978  05E6  0021               	movlb	1	; select bank1
  5979  05E7  00EA               	movwf	map@out_max^(0+128)
  5980  05E8  303C               	movlw	60
  5981  05E9  00EB               	movwf	(map@out_max+1)^(0+128)
  5982  05EA  3042               	movlw	66
  5983  05EB  00EC               	movwf	(map@out_max+2)^(0+128)
  5984  05EC  3000               	movlw	0
  5985  05ED  00E7               	movwf	map@out_min^(0+128)
  5986  05EE  3040               	movlw	64
  5987  05EF  00E8               	movwf	(map@out_min+1)^(0+128)
  5988  05F0  3040               	movlw	64
  5989  05F1  00E9               	movwf	(map@out_min+2)^(0+128)
  5990  05F2  30C0               	movlw	192
  5991  05F3  00E4               	movwf	map@in_max^(0+128)
  5992  05F4  307F               	movlw	127
  5993  05F5  00E5               	movwf	(map@in_max+1)^(0+128)
  5994  05F6  3044               	movlw	68
  5995  05F7  00E6               	movwf	(map@in_max+2)^(0+128)
  5996  05F8  3000               	movlw	0
  5997  05F9  00E1               	movwf	map@in_min^(0+128)
  5998  05FA  3000               	movlw	0
  5999  05FB  00E2               	movwf	(map@in_min+1)^(0+128)
  6000  05FC  3000               	movlw	0
  6001  05FD  00E3               	movwf	(map@in_min+2)^(0+128)
  6002  05FE  0023               	movlb	3	; select bank3
  6003  05FF  0852               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6004  0600  0021               	movlb	1	; select bank1
  6005  0601  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6006  0602  0023               	movlb	3	; select bank3
  6007  0603  0851               	movf	_knob4_prev^(0+384),w	;volatile
  6008  0604  0021               	movlb	1	; select bank1
  6009  0605  00A8               	movwf	___awtoft@c^(0+128)
  6010  0606  31A0  2097  3183   	fcall	___awtoft
  6011  0609  0021               	movlb	1	; select bank1
  6012  060A  0828               	movf	?___awtoft^(0+128),w
  6013  060B  00DE               	movwf	map@x^(0+128)
  6014  060C  0829               	movf	(?___awtoft+1)^(0+128),w
  6015  060D  00DF               	movwf	(map@x+1)^(0+128)
  6016  060E  082A               	movf	(?___awtoft+2)^(0+128),w
  6017  060F  00E0               	movwf	(map@x+2)^(0+128)
  6018  0610  319A  22E3  3183   	fcall	_map
  6019  0613  0021               	movlb	1	; select bank1
  6020  0614  085E               	movf	?_map^(0+128),w
  6021  0615  0022               	movlb	2	; select bank2
  6022  0616  00A0               	movwf	___fttol@f1^(0+256)
  6023  0617  0021               	movlb	1	; select bank1
  6024  0618  085F               	movf	(?_map+1)^(0+128),w
  6025  0619  0022               	movlb	2	; select bank2
  6026  061A  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6027  061B  0021               	movlb	1	; select bank1
  6028  061C  0860               	movf	(?_map+2)^(0+128),w
  6029  061D  0022               	movlb	2	; select bank2
  6030  061E  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6031  061F  3199  21D5  3183   	fcall	___fttol
  6032  0622  0022               	movlb	2	; select bank2
  6033  0623  0821               	movf	(?___fttol^(0+256)+1),w
  6034  0624  0024               	movlb	4	; select bank4
  6035  0625  00E3               	movwf	(_mod_delay_time+1)^(0+512)
  6036  0626  0022               	movlb	2	; select bank2
  6037  0627  0820               	movf	?___fttol^(0+256),w
  6038  0628  0024               	movlb	4	; select bank4
  6039  0629  00E2               	movwf	_mod_delay_time^(0+512)
  6040  062A                     l9051:	
  6041                           
  6042                           ;main.c: 173: }
  6043                           ;main.c: 178: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6044  062A  0023               	movlb	3	; select bank3
  6045  062B  0953               	comf	_knob5_prev^(0+384),w	;volatile
  6046  062C  00EA               	movwf	??_main^(0+384)
  6047  062D  0954               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6048  062E  00EB               	movwf	(??_main^(0+384)+1)
  6049  062F  0AEA               	incf	??_main^(0+384),f
  6050  0630  1903               	skipnz
  6051  0631  0AEB               	incf	(??_main^(0+384)+1),f
  6052  0632  0830               	movf	_knob_5_pos^(0+384),w
  6053  0633  076A               	addwf	??_main^(0+384),w
  6054  0634  00EC               	movwf	(??_main+2)^(0+384)
  6055  0635  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6056  0636  3D6B               	addwfc	(??_main+1)^(0+384),w
  6057  0637  00ED               	movwf	(??_main+3)^(0+384)
  6058  0638  086D               	movf	(??_main+3)^(0+384),w
  6059  0639  3A80               	xorlw	128
  6060  063A  00EE               	movwf	(??_main+4)^(0+384)
  6061  063B  3080               	movlw	128
  6062  063C  026E               	subwf	(??_main+4)^(0+384),w
  6063  063D  1D03               	skipz
  6064  063E  2E41               	goto	u9925
  6065  063F  3004               	movlw	4
  6066  0640  026C               	subwf	(??_main+2)^(0+384),w
  6067  0641                     u9925:	
  6068  0641  1803               	skipnc
  6069  0642  2E5C               	goto	l9055
  6070  0643  0023               	movlb	3	; select bank3
  6071  0644  0953               	comf	_knob5_prev^(0+384),w	;volatile
  6072  0645  00EA               	movwf	??_main^(0+384)
  6073  0646  0954               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6074  0647  00EB               	movwf	(??_main^(0+384)+1)
  6075  0648  0AEA               	incf	??_main^(0+384),f
  6076  0649  1903               	skipnz
  6077  064A  0AEB               	incf	(??_main^(0+384)+1),f
  6078  064B  0830               	movf	_knob_5_pos^(0+384),w
  6079  064C  076A               	addwf	??_main^(0+384),w
  6080  064D  00EC               	movwf	(??_main+2)^(0+384)
  6081  064E  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6082  064F  3D6B               	addwfc	(??_main+1)^(0+384),w
  6083  0650  00ED               	movwf	(??_main+3)^(0+384)
  6084  0651  086D               	movf	(??_main+3)^(0+384),w
  6085  0652  3A80               	xorlw	128
  6086  0653  00EE               	movwf	(??_main+4)^(0+384)
  6087  0654  307F               	movlw	127
  6088  0655  026E               	subwf	(??_main+4)^(0+384),w
  6089  0656  1D03               	skipz
  6090  0657  2E5A               	goto	u9935
  6091  0658  30FD               	movlw	253
  6092  0659  026C               	subwf	(??_main+2)^(0+384),w
  6093  065A                     u9935:	
  6094  065A  1803               	skipnc
  6095  065B  2EA6               	goto	l9059
  6096  065C                     l9055:	
  6097                           
  6098                           ;main.c: 179: knob5_prev = knob_5_pos;
  6099  065C  0023               	movlb	3	; select bank3
  6100  065D  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6101  065E  00D4               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6102  065F  0830               	movf	_knob_5_pos^(0+384),w
  6103  0660  00D3               	movwf	_knob5_prev^(0+384)	;volatile
  6104                           
  6105                           ;main.c: 180: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6106  0661  3000               	movlw	0
  6107  0662  0021               	movlb	1	; select bank1
  6108  0663  00EA               	movwf	map@out_max^(0+128)
  6109  0664  3000               	movlw	0
  6110  0665  00EB               	movwf	(map@out_max+1)^(0+128)
  6111  0666  3000               	movlw	0
  6112  0667  00EC               	movwf	(map@out_max+2)^(0+128)
  6113  0668  3060               	movlw	96
  6114  0669  00E7               	movwf	map@out_min^(0+128)
  6115  066A  309F               	movlw	159
  6116  066B  00E8               	movwf	(map@out_min+1)^(0+128)
  6117  066C  3044               	movlw	68
  6118  066D  00E9               	movwf	(map@out_min+2)^(0+128)
  6119  066E  30C0               	movlw	192
  6120  066F  00E4               	movwf	map@in_max^(0+128)
  6121  0670  307F               	movlw	127
  6122  0671  00E5               	movwf	(map@in_max+1)^(0+128)
  6123  0672  3044               	movlw	68
  6124  0673  00E6               	movwf	(map@in_max+2)^(0+128)
  6125  0674  3000               	movlw	0
  6126  0675  00E1               	movwf	map@in_min^(0+128)
  6127  0676  3000               	movlw	0
  6128  0677  00E2               	movwf	(map@in_min+1)^(0+128)
  6129  0678  3000               	movlw	0
  6130  0679  00E3               	movwf	(map@in_min+2)^(0+128)
  6131  067A  0023               	movlb	3	; select bank3
  6132  067B  0854               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6133  067C  0021               	movlb	1	; select bank1
  6134  067D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6135  067E  0023               	movlb	3	; select bank3
  6136  067F  0853               	movf	_knob5_prev^(0+384),w	;volatile
  6137  0680  0021               	movlb	1	; select bank1
  6138  0681  00A8               	movwf	___awtoft@c^(0+128)
  6139  0682  31A0  2097  3183   	fcall	___awtoft
  6140  0685  0021               	movlb	1	; select bank1
  6141  0686  0828               	movf	?___awtoft^(0+128),w
  6142  0687  00DE               	movwf	map@x^(0+128)
  6143  0688  0829               	movf	(?___awtoft+1)^(0+128),w
  6144  0689  00DF               	movwf	(map@x+1)^(0+128)
  6145  068A  082A               	movf	(?___awtoft+2)^(0+128),w
  6146  068B  00E0               	movwf	(map@x+2)^(0+128)
  6147  068C  319A  22E3  3183   	fcall	_map
  6148  068F  0021               	movlb	1	; select bank1
  6149  0690  085E               	movf	?_map^(0+128),w
  6150  0691  0022               	movlb	2	; select bank2
  6151  0692  00A0               	movwf	___fttol@f1^(0+256)
  6152  0693  0021               	movlb	1	; select bank1
  6153  0694  085F               	movf	(?_map+1)^(0+128),w
  6154  0695  0022               	movlb	2	; select bank2
  6155  0696  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6156  0697  0021               	movlb	1	; select bank1
  6157  0698  0860               	movf	(?_map+2)^(0+128),w
  6158  0699  0022               	movlb	2	; select bank2
  6159  069A  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6160  069B  3199  21D5  3183   	fcall	___fttol
  6161  069E  0022               	movlb	2	; select bank2
  6162  069F  0821               	movf	(?___fttol^(0+256)+1),w
  6163  06A0  0024               	movlb	4	; select bank4
  6164  06A1  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6165  06A2  0022               	movlb	2	; select bank2
  6166  06A3  0820               	movf	?___fttol^(0+256),w
  6167  06A4  0024               	movlb	4	; select bank4
  6168  06A5  00C5               	movwf	_adjusted_pot_value^(0+512)
  6169  06A6                     l9059:	
  6170                           
  6171                           ;main.c: 181: }
  6172                           ;main.c: 183: if (modulation_changed == 1) {
  6173  06A6  0023               	movlb	3	; select bank3
  6174  06A7  0343               	decf	_modulation_changed^(0+384),w
  6175  06A8  1D03               	btfss	3,2
  6176  06A9  2EAD               	goto	l9063
  6177                           
  6178                           ;main.c: 184: updateModulationArray();
  6179  06AA  318A  2236  3183   	fcall	_updateModulationArray
  6180  06AD                     l9063:	
  6181                           
  6182                           ;main.c: 185: }
  6183                           ;main.c: 188: if (delay_time_changed == 1) {
  6184  06AD  0023               	movlb	3	; select bank3
  6185  06AE  035B               	decf	_delay_time_changed^(0+384),w
  6186  06AF  1D03               	btfss	3,2
  6187  06B0  2B88               	goto	l8973
  6188                           
  6189                           ;main.c: 189: delay_time = baseline_delay_time;
  6190  06B1  0020               	movlb	0	; select bank0
  6191  06B2  0848               	movf	_baseline_delay_time+3,w	;volatile
  6192  06B3  00CC               	movwf	_delay_time+3	;volatile
  6193  06B4  0847               	movf	_baseline_delay_time+2,w	;volatile
  6194  06B5  00CB               	movwf	_delay_time+2	;volatile
  6195  06B6  0846               	movf	_baseline_delay_time+1,w	;volatile
  6196  06B7  00CA               	movwf	_delay_time+1	;volatile
  6197  06B8  0845               	movf	_baseline_delay_time,w	;volatile
  6198  06B9  00C9               	movwf	_delay_time	;volatile
  6199                           
  6200                           ;main.c: 190: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6201  06BA  0846               	movf	_baseline_delay_time+1,w	;volatile
  6202  06BB  0022               	movlb	2	; select bank2
  6203  06BC  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6204  06BD  0020               	movlb	0	; select bank0
  6205  06BE  0845               	movf	_baseline_delay_time,w	;volatile
  6206  06BF  0022               	movlb	2	; select bank2
  6207  06C0  00BF               	movwf	set_subdivision@x^(0+256)
  6208  06C1  0020               	movlb	0	; select bank0
  6209  06C2  0852               	movf	_top_push_state+1,w
  6210  06C3  0022               	movlb	2	; select bank2
  6211  06C4  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6212  06C5  0020               	movlb	0	; select bank0
  6213  06C6  0851               	movf	_top_push_state,w
  6214  06C7  0022               	movlb	2	; select bank2
  6215  06C8  00C1               	movwf	set_subdivision@y^(0+256)
  6216  06C9  319F  2745  3183   	fcall	_set_subdivision
  6217  06CC  0022               	movlb	2	; select bank2
  6218  06CD  083F               	movf	?_set_subdivision^(0+256),w
  6219  06CE  0020               	movlb	0	; select bank0
  6220  06CF  00C9               	movwf	_delay_time	;volatile
  6221  06D0  0022               	movlb	2	; select bank2
  6222  06D1  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6223  06D2  0020               	movlb	0	; select bank0
  6224  06D3  00CA               	movwf	_delay_time+1	;volatile
  6225  06D4  0D89               	rlf	9,f
  6226  06D5  3B89               	subwfb	9,f
  6227  06D6  0989               	comf	9,f
  6228  06D7  00CB               	movwf	_delay_time+2	;volatile
  6229  06D8  00CC               	movwf	_delay_time+3	;volatile
  6230                           
  6231                           ;main.c: 191: reset_sub_delay = 1;
  6232  06D9  0023               	movlb	3	; select bank3
  6233  06DA  01C6               	clrf	_reset_sub_delay^(0+384)
  6234  06DB  0AC6               	incf	_reset_sub_delay^(0+384),f
  6235                           
  6236                           ;main.c: 192: delayfound = 0;
  6237  06DC  0024               	movlb	4	; select bank4
  6238  06DD  01D1               	clrf	_delayfound^(0+512)
  6239  06DE  01D2               	clrf	(_delayfound+1)^(0+512)
  6240                           
  6241                           ;main.c: 193: delay_counter = 0;
  6242  06DF  01CF               	clrf	_delay_counter^(0+512)	;volatile
  6243  06E0  01D0               	clrf	(_delay_counter+1)^(0+512)	;volatile
  6244                           
  6245                           ;main.c: 205: delay_time_changed = 0;
  6246  06E1  0023               	movlb	3	; select bank3
  6247  06E2  01DB               	clrf	_delay_time_changed^(0+384)
  6248  06E3  2B88               	goto	l8973
  6249  06E4                     __end_of_main:	
  6250                           
  6251                           	psect	text1
  6252  100B                     __ptext1:	
  6253 ;; *************** function _update_selectMode *****************
  6254 ;; Defined at:
  6255 ;;		line 139 in file "tactiles.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6271 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6272 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6273 ;;Total ram usage:        1 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    5
  6276 ;; This function calls:
  6277 ;;		_setExpressionDisplay
  6278 ;;		_setPresetDisplay
  6279 ;; This function is called by:
  6280 ;;		_main
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           
  6285                           ;psect for function _update_selectMode
  6286  100B                     _update_selectMode:	
  6287                           
  6288                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6292  100B  0020               	movlb	0	; select bank0
  6293  100C  0867               	movf	_mode2_state,w
  6294  100D  1D03               	btfss	3,2
  6295  100E  2812               	goto	l1004
  6296  100F  0368               	decf	_presetSaveMode,w
  6297  1010  1D03               	btfss	3,2
  6298  1011  0008               	return
  6299  1012                     l1004:	
  6300                           ;tactiles.c: 142: return;
  6301                           
  6302                           
  6303                           ;tactiles.c: 143: }
  6304                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6305  1012  1B8F               	btfsc	15,7	;volatile
  6306  1013  2860               	goto	l8579
  6307                           
  6308                           ;tactiles.c: 145: debounce_mode1++;
  6309  1014  3001               	movlw	1
  6310  1015  0024               	movlb	4	; select bank4
  6311  1016  07CB               	addwf	_debounce_mode1^(0+512),f
  6312  1017  3000               	movlw	0
  6313  1018  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6314                           
  6315                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6316  1019  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6317  101A  3A80               	xorlw	128
  6318  101B  0021               	movlb	1	; select bank1
  6319  101C  00A7               	movwf	??_update_selectMode^(0+128)
  6320  101D  3080               	movlw	128
  6321  101E  0227               	subwf	??_update_selectMode^(0+128),w
  6322  101F  1D03               	skipz
  6323  1020  2824               	goto	u9045
  6324  1021  301A               	movlw	26
  6325  1022  0024               	movlb	4	; select bank4
  6326  1023  024B               	subwf	_debounce_mode1^(0+512),w
  6327  1024                     u9045:	
  6328  1024  1C03               	skipc
  6329  1025  0008               	return
  6330                           
  6331                           ;tactiles.c: 147: debounce_mode1 = 25;
  6332  1026  3019               	movlw	25
  6333  1027  0024               	movlb	4	; select bank4
  6334  1028  00CB               	movwf	_debounce_mode1^(0+512)
  6335  1029  3000               	movlw	0
  6336  102A  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6337                           
  6338                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6339  102B  0020               	movlb	0	; select bank0
  6340  102C  0867               	movf	_mode2_state,w
  6341  102D  0023               	movlb	3	; select bank3
  6342  102E  065F               	xorwf	_presetModeCnst^(0+384),w
  6343  102F  1903               	skipnz
  6344  1030  2835               	goto	l8561
  6345  1031  0020               	movlb	0	; select bank0
  6346  1032  0368               	decf	_presetSaveMode,w
  6347  1033  1D03               	btfss	3,2
  6348  1034  2846               	goto	l8569
  6349  1035                     l8561:	
  6350                           
  6351                           ;tactiles.c: 149: presetChannel++;
  6352  1035  3001               	movlw	1
  6353  1036  0021               	movlb	1	; select bank1
  6354  1037  00A7               	movwf	??_update_selectMode^(0+128)
  6355  1038  0827               	movf	??_update_selectMode^(0+128),w
  6356  1039  0020               	movlb	0	; select bank0
  6357  103A  07D6               	addwf	_presetChannel,f
  6358                           
  6359                           ;tactiles.c: 150: if (presetChannel > 10) {
  6360  103B  300B               	movlw	11
  6361  103C  0256               	subwf	_presetChannel,w
  6362  103D  1C03               	skipc
  6363  103E  2841               	goto	l8567
  6364                           
  6365                           ;tactiles.c: 151: presetChannel = 1;
  6366  103F  01D6               	clrf	_presetChannel
  6367  1040  0AD6               	incf	_presetChannel,f
  6368  1041                     l8567:	
  6369                           
  6370                           ;tactiles.c: 152: }
  6371                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6372  1041  0856               	movf	_presetChannel,w
  6373  1042  31A2  228A  3190   	fcall	_setPresetDisplay
  6374                           
  6375                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6376  1045  285C               	goto	l1015
  6377  1046                     l8569:	
  6378  1046  0020               	movlb	0	; select bank0
  6379  1047  0867               	movf	_mode2_state,w
  6380  1048  0023               	movlb	3	; select bank3
  6381  1049  065D               	xorwf	_expressModeCnst^(0+384),w
  6382  104A  1D03               	skipz
  6383  104B  285C               	goto	l1015
  6384                           
  6385                           ;tactiles.c: 155: expressionChannel++;
  6386  104C  3001               	movlw	1
  6387  104D  0021               	movlb	1	; select bank1
  6388  104E  00A7               	movwf	??_update_selectMode^(0+128)
  6389  104F  0827               	movf	??_update_selectMode^(0+128),w
  6390  1050  0023               	movlb	3	; select bank3
  6391  1051  07DE               	addwf	_expressionChannel^(0+384),f
  6392                           
  6393                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6394  1052  3006               	movlw	6
  6395  1053  025E               	subwf	_expressionChannel^(0+384),w
  6396  1054  1C03               	skipc
  6397  1055  2858               	goto	l8577
  6398                           
  6399                           ;tactiles.c: 157: expressionChannel = 1;
  6400  1056  01DE               	clrf	_expressionChannel^(0+384)
  6401  1057  0ADE               	incf	_expressionChannel^(0+384),f
  6402  1058                     l8577:	
  6403                           
  6404                           ;tactiles.c: 158: }
  6405                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6406  1058  085E               	movf	_expressionChannel^(0+384),w
  6407  1059  31AF  279C  3190   	fcall	_setExpressionDisplay
  6408  105C                     l1015:	
  6409                           ;tactiles.c: 160: }
  6410                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6411                           
  6412  105C  0020               	movlb	0	; select bank0
  6413  105D  1B8F               	btfsc	15,7	;volatile
  6414  105E  0008               	return
  6415  105F  285C               	goto	l1015
  6416  1060                     l8579:	
  6417                           ;tactiles.c: 168: }
  6418                           ;tactiles.c: 169: }
  6419                           ;tactiles.c: 170: } else {
  6420                           
  6421                           
  6422                           ;tactiles.c: 171: debounce_mode1 = 0;
  6423  1060  0024               	movlb	4	; select bank4
  6424  1061  01CB               	clrf	_debounce_mode1^(0+512)
  6425  1062  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6426  1063  0008               	return
  6427  1064                     __end_of_update_selectMode:	
  6428                           
  6429                           	psect	text2
  6430  2252                     __ptext2:	
  6431 ;; *************** function _update_mode *****************
  6432 ;; Defined at:
  6433 ;;		line 87 in file "tactiles.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6449 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6450 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6451 ;;Total ram usage:        1 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    6
  6454 ;; This function calls:
  6455 ;;		_resetRingLEDs
  6456 ;;		_setPedalMode
  6457 ;; This function is called by:
  6458 ;;		_main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _update_mode
  6464  2252                     _update_mode:	
  6465                           
  6466                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6470  2252  0020               	movlb	0	; select bank0
  6471  2253  180E               	btfsc	14,0	;volatile
  6472  2254  2A86               	goto	l8547
  6473                           
  6474                           ;tactiles.c: 95: debounce_mode2++;
  6475  2255  3001               	movlw	1
  6476  2256  0024               	movlb	4	; select bank4
  6477  2257  07CD               	addwf	_debounce_mode2^(0+512),f
  6478  2258  3000               	movlw	0
  6479  2259  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6480                           
  6481                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6482  225A  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6483  225B  3A80               	xorlw	128
  6484  225C  0021               	movlb	1	; select bank1
  6485  225D  00A7               	movwf	??_update_mode^(0+128)
  6486  225E  3080               	movlw	128
  6487  225F  0227               	subwf	??_update_mode^(0+128),w
  6488  2260  1D03               	skipz
  6489  2261  2A65               	goto	u8975
  6490  2262  301A               	movlw	26
  6491  2263  0024               	movlb	4	; select bank4
  6492  2264  024D               	subwf	_debounce_mode2^(0+512),w
  6493  2265                     u8975:	
  6494  2265  1C03               	skipc
  6495  2266  0008               	return
  6496                           
  6497                           ;tactiles.c: 97: debounce_mode2 = 25;
  6498  2267  3019               	movlw	25
  6499  2268  0024               	movlb	4	; select bank4
  6500  2269  00CD               	movwf	_debounce_mode2^(0+512)
  6501  226A  3000               	movlw	0
  6502  226B  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6503                           
  6504                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6505  226C  0020               	movlb	0	; select bank0
  6506  226D  0368               	decf	_presetSaveMode,w
  6507  226E  1D03               	btfss	3,2
  6508  226F  2A75               	goto	l8539
  6509                           
  6510                           ;tactiles.c: 100: presetSaveMode = 0;
  6511  2270  01E8               	clrf	_presetSaveMode
  6512                           
  6513                           ;tactiles.c: 101: resetRingLEDs();
  6514  2271  31AF  27CC  31A2   	fcall	_resetRingLEDs
  6515                           
  6516                           ;tactiles.c: 102: } else {
  6517  2274  2A7F               	goto	l8545
  6518  2275                     l8539:	
  6519                           
  6520                           ;tactiles.c: 103: mode2_state++;
  6521  2275  3001               	movlw	1
  6522  2276  0021               	movlb	1	; select bank1
  6523  2277  00A7               	movwf	??_update_mode^(0+128)
  6524  2278  0827               	movf	??_update_mode^(0+128),w
  6525  2279  0020               	movlb	0	; select bank0
  6526  227A  07E7               	addwf	_mode2_state,f
  6527                           
  6528                           ;tactiles.c: 104: if (mode2_state > 2) {
  6529  227B  3003               	movlw	3
  6530  227C  0267               	subwf	_mode2_state,w
  6531  227D  1803               	btfsc	3,0
  6532                           
  6533                           ;tactiles.c: 105: mode2_state = 0;
  6534  227E  01E7               	clrf	_mode2_state
  6535  227F                     l8545:	
  6536                           
  6537                           ;tactiles.c: 106: }
  6538                           ;tactiles.c: 107: }
  6539                           ;tactiles.c: 109: setPedalMode();
  6540  227F  31A0  20B9  31A2   	fcall	_setPedalMode
  6541  2282                     l989:	
  6542                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6543                           
  6544  2282  0020               	movlb	0	; select bank0
  6545  2283  180E               	btfsc	14,0	;volatile
  6546  2284  0008               	return
  6547  2285  2A82               	goto	l989
  6548  2286                     l8547:	
  6549                           ;tactiles.c: 111: }
  6550                           ;tactiles.c: 112: }
  6551                           ;tactiles.c: 113: } else {
  6552                           
  6553                           
  6554                           ;tactiles.c: 114: debounce_mode2 = 0;
  6555  2286  0024               	movlb	4	; select bank4
  6556  2287  01CD               	clrf	_debounce_mode2^(0+512)
  6557  2288  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6558  2289  0008               	return
  6559  228A                     __end_of_update_mode:	
  6560                           
  6561                           	psect	text3
  6562  0C1D                     __ptext3:	
  6563 ;; *************** function _updateSwitchTap *****************
  6564 ;; Defined at:
  6565 ;;		line 48 in file "SwitchTap.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;		None
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6570 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6581 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6582 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6583 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6584 ;;Total ram usage:        9 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    8
  6587 ;; This function calls:
  6588 ;;		___aldiv
  6589 ;;		_setDoublePressState
  6590 ;;		_setLongTapState
  6591 ;; This function is called by:
  6592 ;;		_main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           
  6597                           ;psect for function _updateSwitchTap
  6598  0C1D                     _updateSwitchTap:	
  6599                           
  6600                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6604  0C1D  0021               	movlb	1	; select bank1
  6605  0C1E  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6606                           
  6607                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6608  0C1F  0020               	movlb	0	; select bank0
  6609  0C20  1810               	btfsc	16,0	;volatile
  6610  0C21  2C29               	goto	l8703
  6611                           
  6612                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6613  0C22  0022               	movlb	2	; select bank2
  6614  0C23  086C               	movf	_switchTap_pressed^(0+256),w
  6615  0C24  1903               	btfsc	3,2
  6616  0C25  2C34               	goto	l1418
  6617                           
  6618                           ;SwitchTap.c: 59: switchTap_pressed--;
  6619  0C26  3001               	movlw	1
  6620  0C27  02EC               	subwf	_switchTap_pressed^(0+256),f
  6621                           
  6622                           ;SwitchTap.c: 60: }
  6623                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6624  0C28  2C34               	goto	l1418
  6625  0C29                     l8703:	
  6626  0C29  3019               	movlw	25
  6627  0C2A  0022               	movlb	2	; select bank2
  6628  0C2B  026C               	subwf	_switchTap_pressed^(0+256),w
  6629  0C2C  1803               	skipnc
  6630  0C2D  2C34               	goto	l1418
  6631                           
  6632                           ;SwitchTap.c: 62: switchTap_pressed++;
  6633  0C2E  3001               	movlw	1
  6634  0C2F  0021               	movlb	1	; select bank1
  6635  0C30  00BC               	movwf	??_updateSwitchTap^(0+128)
  6636  0C31  083C               	movf	??_updateSwitchTap^(0+128),w
  6637  0C32  0022               	movlb	2	; select bank2
  6638  0C33  07EC               	addwf	_switchTap_pressed^(0+256),f
  6639  0C34                     l1418:	
  6640                           
  6641                           ;SwitchTap.c: 63: }
  6642                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6643  0C34  086C               	movf	_switchTap_pressed^(0+256),w
  6644  0C35  1D03               	btfss	3,2
  6645  0C36  2DEB               	goto	l8787
  6646                           
  6647                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6648  0C37  0020               	movlb	0	; select bank0
  6649  0C38  1BDF               	btfsc	_tap_timer+3,7	;volatile
  6650  0C39  2CBF               	goto	l8747
  6651  0C3A  085F               	movf	_tap_timer+3,w	;volatile
  6652  0C3B  1D03               	btfss	3,2
  6653  0C3C  2C46               	goto	l8709
  6654  0C3D  085E               	movf	_tap_timer+2,w	;volatile
  6655  0C3E  1D03               	btfss	3,2
  6656  0C3F  2C46               	goto	l8709
  6657  0C40  301B               	movlw	27
  6658  0C41  025C               	subwf	_tap_timer,w	;volatile
  6659  0C42  3006               	movlw	6
  6660  0C43  3B5D               	subwfb	_tap_timer+1,w	;volatile
  6661  0C44  1C03               	btfss	3,0
  6662  0C45  2CBF               	goto	l8747
  6663  0C46                     l8709:	
  6664                           
  6665                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6666  0C46  0023               	movlb	3	; select bank3
  6667  0C47  0347               	decf	_switchTap_down^(0+384),w
  6668  0C48  1903               	btfsc	3,2
  6669  0C49  2C85               	goto	l8725
  6670                           
  6671                           ;SwitchTap.c: 78: switchTap_down = 1;
  6672  0C4A  01C7               	clrf	_switchTap_down^(0+384)
  6673  0C4B  0AC7               	incf	_switchTap_down^(0+384),f
  6674                           
  6675                           ;SwitchTap.c: 79: tap_timer = 0;
  6676  0C4C  3000               	movlw	0
  6677  0C4D  0020               	movlb	0	; select bank0
  6678  0C4E  00DF               	movwf	_tap_timer+3	;volatile
  6679  0C4F  3000               	movlw	0
  6680  0C50  00DE               	movwf	_tap_timer+2	;volatile
  6681  0C51  3000               	movlw	0
  6682  0C52  00DD               	movwf	_tap_timer+1	;volatile
  6683  0C53  3000               	movlw	0
  6684  0C54  00DC               	movwf	_tap_timer	;volatile
  6685                           
  6686                           ;SwitchTap.c: 80: tap_iteration = 1;
  6687  0C55  3001               	movlw	1
  6688  0C56  0023               	movlb	3	; select bank3
  6689  0C57  00D7               	movwf	_tap_iteration^(0+384)
  6690  0C58  3000               	movlw	0
  6691  0C59  00D8               	movwf	(_tap_iteration^(0+384)+1)
  6692                           
  6693                           ;SwitchTap.c: 81: tap_total = 0;
  6694  0C5A  3000               	movlw	0
  6695  0C5B  0024               	movlb	4	; select bank4
  6696  0C5C  00C0               	movwf	(_tap_total+3)^(0+512)
  6697  0C5D  3000               	movlw	0
  6698  0C5E  00BF               	movwf	(_tap_total+2)^(0+512)
  6699  0C5F  3000               	movlw	0
  6700  0C60  00BE               	movwf	(_tap_total+1)^(0+512)
  6701  0C61  3000               	movlw	0
  6702  0C62  00BD               	movwf	_tap_total^(0+512)
  6703                           
  6704                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6705  0C63  0023               	movlb	3	; select bank3
  6706  0C64  01DB               	clrf	_delay_time_changed^(0+384)
  6707                           
  6708                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6709  0C65  0021               	movlb	1	; select bank1
  6710  0C66  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6711  0C67  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6712  0C68                     l8723:	
  6713  0C68  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6714  0C69  0020               	movlb	0	; select bank0
  6715  0C6A  0255               	subwf	_num_taps,w
  6716  0C6B  1C03               	btfss	3,0
  6717  0C6C  2C85               	goto	l8725
  6718                           
  6719                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6720  0C6D  0021               	movlb	1	; select bank1
  6721  0C6E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6722  0C6F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6723  0C70  3001               	movlw	1
  6724  0C71                     u9415:	
  6725  0C71  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6726  0C72  3EFF               	addlw	-1
  6727  0C73  1D03               	skipz
  6728  0C74  2C71               	goto	u9415
  6729  0C75  353C               	lslf	??_updateSwitchTap^(0+128),w
  6730  0C76  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6731  0C77  0086               	movwf	6
  6732  0C78  3002               	movlw	2	; select bank4/5
  6733  0C79  0087               	movwf	7
  6734  0C7A  3000               	movlw	0
  6735  0C7B  3FC0               	movwi [0]fsr1
  6736  0C7C  3000               	movlw	0
  6737  0C7D  3FC1               	movwi [1]fsr1
  6738  0C7E  3FC2               	movwi [2]fsr1
  6739  0C7F  3FC3               	movwi [3]fsr1
  6740  0C80  3001               	movlw	1
  6741  0C81  00BC               	movwf	??_updateSwitchTap^(0+128)
  6742  0C82  083C               	movf	??_updateSwitchTap^(0+128),w
  6743  0C83  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6744  0C84  2C68               	goto	l8723
  6745  0C85                     l8725:	
  6746                           
  6747                           ;SwitchTap.c: 86: }
  6748                           ;SwitchTap.c: 87: }
  6749                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6750  0C85  0022               	movlb	2	; select bank2
  6751  0C86  086B               	movf	_longTap_start^(0+256),w
  6752  0C87  1D03               	btfss	3,2
  6753  0C88  2C90               	goto	l8731
  6754                           
  6755                           ;SwitchTap.c: 91: longTap_start = 1;
  6756  0C89  01EB               	clrf	_longTap_start^(0+256)
  6757  0C8A  0AEB               	incf	_longTap_start^(0+256),f
  6758                           
  6759                           ;SwitchTap.c: 92: longTap_state = 0;
  6760  0C8B  0020               	movlb	0	; select bank0
  6761  0C8C  01D4               	clrf	_longTap_state	;volatile
  6762                           
  6763                           ;SwitchTap.c: 93: longTap_timer = 0;
  6764  0C8D  0023               	movlb	3	; select bank3
  6765  0C8E  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6766  0C8F  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6767  0C90                     l8731:	
  6768                           
  6769                           ;SwitchTap.c: 94: }
  6770                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6771  0C90  0020               	movlb	0	; select bank0
  6772  0C91  0850               	movf	_long_press_limit+1,w
  6773  0C92  0023               	movlb	3	; select bank3
  6774  0C93  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6775  0C94  1D03               	skipz
  6776  0C95  2C9A               	goto	u9445
  6777  0C96  0020               	movlb	0	; select bank0
  6778  0C97  084F               	movf	_long_press_limit,w
  6779  0C98  0023               	movlb	3	; select bank3
  6780  0C99  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6781  0C9A                     u9445:	
  6782  0C9A  1C03               	skipc
  6783  0C9B  0008               	return
  6784  0C9C  0020               	movlb	0	; select bank0
  6785  0C9D  0854               	movf	_longTap_state,w	;volatile
  6786  0C9E  1D03               	btfss	3,2
  6787  0C9F  0008               	return
  6788  0CA0  0865               	movf	_doubleTap_state,w	;volatile
  6789  0CA1  1D03               	btfss	3,2
  6790  0CA2  0008               	return
  6791                           
  6792                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6793  0CA3  0850               	movf	_long_press_limit+1,w
  6794  0CA4  0023               	movlb	3	; select bank3
  6795  0CA5  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6796  0CA6  0020               	movlb	0	; select bank0
  6797  0CA7  084F               	movf	_long_press_limit,w
  6798  0CA8  0023               	movlb	3	; select bank3
  6799  0CA9  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6800                           
  6801                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6802  0CAA  0022               	movlb	2	; select bank2
  6803  0CAB  120D               	bcf	13,4	;volatile
  6804                           
  6805                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6806  0CAC  036A               	decf	_longBypass_start^(0+256),w
  6807  0CAD  1903               	btfsc	3,2
  6808  0CAE  2CB7               	goto	l8745
  6809                           
  6810                           ;SwitchTap.c: 104: setLongTapState(1);
  6811  0CAF  3001               	movlw	1
  6812  0CB0  0021               	movlb	1	; select bank1
  6813  0CB1  00A0               	movwf	setLongTapState@f_state^(0+128)
  6814  0CB2  3000               	movlw	0
  6815  0CB3  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6816  0CB4  31AF  27E6         	fcall	_setLongTapState
  6817                           
  6818                           ;SwitchTap.c: 105: } else {
  6819  0CB6  0008               	return
  6820  0CB7                     l8745:	
  6821                           
  6822                           ;SwitchTap.c: 106: setDoublePressState(1);
  6823  0CB7  3001               	movlw	1
  6824  0CB8  0021               	movlb	1	; select bank1
  6825  0CB9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6826  0CBA  3000               	movlw	0
  6827  0CBB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6828  0CBC  31A3  2378         	fcall	_setDoublePressState
  6829                           
  6830                           ;SwitchTap.c: 107: }
  6831                           ;SwitchTap.c: 108: }
  6832                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6833  0CBE  0008               	return
  6834  0CBF                     l8747:	
  6835  0CBF  0020               	movlb	0	; select bank0
  6836  0CC0  1BDF               	btfsc	_tap_timer+3,7	;volatile
  6837  0CC1  2CCE               	goto	l8749
  6838  0CC2  085F               	movf	_tap_timer+3,w	;volatile
  6839  0CC3  1D03               	btfss	3,2
  6840  0CC4  0008               	return
  6841  0CC5  085E               	movf	_tap_timer+2,w	;volatile
  6842  0CC6  1D03               	btfss	3,2
  6843  0CC7  0008               	return
  6844  0CC8  301B               	movlw	27
  6845  0CC9  025C               	subwf	_tap_timer,w	;volatile
  6846  0CCA  3006               	movlw	6
  6847  0CCB  3B5D               	subwfb	_tap_timer+1,w	;volatile
  6848  0CCC  1803               	btfsc	3,0
  6849  0CCD  0008               	return
  6850  0CCE                     l8749:	
  6851  0CCE  0854               	movf	_longTap_state,w	;volatile
  6852  0CCF  1D03               	btfss	3,2
  6853  0CD0  0008               	return
  6854  0CD1  0023               	movlb	3	; select bank3
  6855  0CD2  0347               	decf	_switchTap_down^(0+384),w
  6856  0CD3  1903               	btfsc	3,2
  6857  0CD4  0008               	return
  6858                           
  6859                           ;SwitchTap.c: 112: switchTap_down = 1;
  6860  0CD5  01C7               	clrf	_switchTap_down^(0+384)
  6861  0CD6  0AC7               	incf	_switchTap_down^(0+384),f
  6862                           
  6863                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6864  0CD7  0020               	movlb	0	; select bank0
  6865  0CD8  1BDF               	btfsc	_tap_timer+3,7	;volatile
  6866  0CD9  2CEE               	goto	l1432
  6867  0CDA  085F               	movf	_tap_timer+3,w	;volatile
  6868  0CDB  1D03               	btfss	3,2
  6869  0CDC  2CE6               	goto	l8757
  6870  0CDD  085E               	movf	_tap_timer+2,w	;volatile
  6871  0CDE  1D03               	btfss	3,2
  6872  0CDF  2CE6               	goto	l8757
  6873  0CE0  3094               	movlw	148
  6874  0CE1  025C               	subwf	_tap_timer,w	;volatile
  6875  0CE2  3004               	movlw	4
  6876  0CE3  3B5D               	subwfb	_tap_timer+1,w	;volatile
  6877  0CE4  1C03               	btfss	3,0
  6878  0CE5  2CEE               	goto	l1432
  6879  0CE6                     l8757:	
  6880                           
  6881                           ;SwitchTap.c: 114: tap_timer = 1172;
  6882  0CE6  3000               	movlw	0
  6883  0CE7  00DF               	movwf	_tap_timer+3	;volatile
  6884  0CE8  3000               	movlw	0
  6885  0CE9  00DE               	movwf	_tap_timer+2	;volatile
  6886  0CEA  3004               	movlw	4
  6887  0CEB  00DD               	movwf	_tap_timer+1	;volatile
  6888  0CEC  3094               	movlw	148
  6889  0CED  00DC               	movwf	_tap_timer	;volatile
  6890  0CEE                     l1432:	
  6891                           
  6892                           ;SwitchTap.c: 115: }
  6893                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6894  0CEE  0855               	movf	_num_taps,w
  6895  0CEF  0021               	movlb	1	; select bank1
  6896  0CF0  00BC               	movwf	??_updateSwitchTap^(0+128)
  6897  0CF1  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  6898  0CF2  083C               	movf	??_updateSwitchTap^(0+128),w
  6899  0CF3  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6900  0CF4  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  6901  0CF5  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6902                           
  6903                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6904  0CF6  0023               	movlb	3	; select bank3
  6905  0CF7  0858               	movf	(_tap_iteration+1)^(0+384),w
  6906  0CF8  3A80               	xorlw	128
  6907  0CF9  3C80               	sublw	128
  6908  0CFA  1D03               	skipz
  6909  0CFB  2CFF               	goto	u9525
  6910  0CFC  0857               	movf	_tap_iteration^(0+384),w
  6911  0CFD  0020               	movlb	0	; select bank0
  6912  0CFE  0255               	subwf	_num_taps,w
  6913  0CFF                     u9525:	
  6914  0CFF  1C03               	skipc
  6915  0D00  2D31               	goto	l8765
  6916                           
  6917                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6918  0D01  0020               	movlb	0	; select bank0
  6919  0D02  085C               	movf	_tap_timer,w	;volatile
  6920  0D03  0024               	movlb	4	; select bank4
  6921  0D04  07BD               	addwf	_tap_total^(0+512),f
  6922  0D05  0020               	movlb	0	; select bank0
  6923  0D06  085D               	movf	_tap_timer+1,w	;volatile
  6924  0D07  0024               	movlb	4	; select bank4
  6925  0D08  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6926  0D09  0020               	movlb	0	; select bank0
  6927  0D0A  085E               	movf	_tap_timer+2,w	;volatile
  6928  0D0B  0024               	movlb	4	; select bank4
  6929  0D0C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6930  0D0D  0020               	movlb	0	; select bank0
  6931  0D0E  085F               	movf	_tap_timer+3,w	;volatile
  6932  0D0F  0024               	movlb	4	; select bank4
  6933  0D10  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6934                           
  6935                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6936  0D11  0023               	movlb	3	; select bank3
  6937  0D12  0857               	movf	_tap_iteration^(0+384),w
  6938  0D13  0021               	movlb	1	; select bank1
  6939  0D14  00BC               	movwf	??_updateSwitchTap^(0+128)
  6940  0D15  3001               	movlw	1
  6941  0D16                     u9535:	
  6942  0D16  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6943  0D17  3EFF               	addlw	-1
  6944  0D18  1D03               	skipz
  6945  0D19  2D16               	goto	u9535
  6946  0D1A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6947  0D1B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6948  0D1C  0086               	movwf	6
  6949  0D1D  3002               	movlw	2	; select bank4/5
  6950  0D1E  0087               	movwf	7
  6951  0D1F  0020               	movlb	0	; select bank0
  6952  0D20  085C               	movf	_tap_timer,w	;volatile
  6953  0D21  3FC0               	movwi [0]fsr1
  6954  0D22  085D               	movf	_tap_timer+1,w	;volatile
  6955  0D23  3FC1               	movwi [1]fsr1
  6956  0D24  085E               	movf	_tap_timer+2,w	;volatile
  6957  0D25  3FC2               	movwi [2]fsr1
  6958  0D26  085F               	movf	_tap_timer+3,w	;volatile
  6959  0D27  3FC3               	movwi [3]fsr1
  6960                           
  6961                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6962  0D28  0023               	movlb	3	; select bank3
  6963  0D29  0858               	movf	(_tap_iteration+1)^(0+384),w
  6964  0D2A  0021               	movlb	1	; select bank1
  6965  0D2B  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6966  0D2C  0023               	movlb	3	; select bank3
  6967  0D2D  0857               	movf	_tap_iteration^(0+384),w
  6968  0D2E  0021               	movlb	1	; select bank1
  6969  0D2F  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6970                           
  6971                           ;SwitchTap.c: 122: } else {
  6972  0D30  2DAD               	goto	l8779
  6973  0D31                     l8765:	
  6974                           
  6975                           ;SwitchTap.c: 123: tap_total = 0;
  6976  0D31  3000               	movlw	0
  6977  0D32  0024               	movlb	4	; select bank4
  6978  0D33  00C0               	movwf	(_tap_total+3)^(0+512)
  6979  0D34  3000               	movlw	0
  6980  0D35  00BF               	movwf	(_tap_total+2)^(0+512)
  6981  0D36  3000               	movlw	0
  6982  0D37  00BE               	movwf	(_tap_total+1)^(0+512)
  6983  0D38  3000               	movlw	0
  6984  0D39  00BD               	movwf	_tap_total^(0+512)
  6985                           
  6986                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6987  0D3A  0021               	movlb	1	; select bank1
  6988  0D3B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6989  0D3C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6990  0D3D                     l8773:	
  6991  0D3D  0020               	movlb	0	; select bank0
  6992  0D3E  0855               	movf	_num_taps,w
  6993  0D3F  0021               	movlb	1	; select bank1
  6994  0D40  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  6995  0D41  1803               	btfsc	3,0
  6996  0D42  2D87               	goto	l8775
  6997                           
  6998                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6999  0D43  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7000  0D44  00BC               	movwf	??_updateSwitchTap^(0+128)
  7001  0D45  3001               	movlw	1
  7002  0D46                     u9545:	
  7003  0D46  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7004  0D47  3EFF               	addlw	-1
  7005  0D48  1D03               	skipz
  7006  0D49  2D46               	goto	u9545
  7007  0D4A  353C               	lslf	??_updateSwitchTap^(0+128),w
  7008  0D4B  3E04               	addlw	4
  7009  0D4C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7010  0D4D  0086               	movwf	6
  7011  0D4E  3002               	movlw	2	; select bank4/5
  7012  0D4F  0087               	movwf	7
  7013  0D50  3F40               	moviw [0]fsr1
  7014  0D51  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7015  0D52  3F41               	moviw [1]fsr1
  7016  0D53  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7017  0D54  3F42               	moviw [2]fsr1
  7018  0D55  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7019  0D56  3F43               	moviw [3]fsr1
  7020  0D57  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7021  0D58  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7022  0D59  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7023  0D5A  3001               	movlw	1
  7024  0D5B                     u9555:	
  7025  0D5B  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7026  0D5C  3EFF               	addlw	-1
  7027  0D5D  1D03               	skipz
  7028  0D5E  2D5B               	goto	u9555
  7029  0D5F  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7030  0D60  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7031  0D61  0086               	movwf	6
  7032  0D62  3002               	movlw	2	; select bank4/5
  7033  0D63  0087               	movwf	7
  7034  0D64  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7035  0D65  3FC0               	movwi [0]fsr1
  7036  0D66  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7037  0D67  3FC1               	movwi [1]fsr1
  7038  0D68  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7039  0D69  3FC2               	movwi [2]fsr1
  7040  0D6A  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7041  0D6B  3FC3               	movwi [3]fsr1
  7042                           
  7043                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7044  0D6C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7045  0D6D  00BC               	movwf	??_updateSwitchTap^(0+128)
  7046  0D6E  3001               	movlw	1
  7047  0D6F                     u9565:	
  7048  0D6F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7049  0D70  3EFF               	addlw	-1
  7050  0D71  1D03               	skipz
  7051  0D72  2D6F               	goto	u9565
  7052  0D73  353C               	lslf	??_updateSwitchTap^(0+128),w
  7053  0D74  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7054  0D75  0086               	movwf	6
  7055  0D76  3002               	movlw	2	; select bank4/5
  7056  0D77  0087               	movwf	7
  7057  0D78  3F40               	moviw [0]fsr1
  7058  0D79  0024               	movlb	4	; select bank4
  7059  0D7A  07BD               	addwf	_tap_total^(0+512),f
  7060  0D7B  3F41               	moviw [1]fsr1
  7061  0D7C  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7062  0D7D  3F42               	moviw [2]fsr1
  7063  0D7E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7064  0D7F  3F43               	moviw [3]fsr1
  7065  0D80  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7066  0D81  3001               	movlw	1
  7067  0D82  0021               	movlb	1	; select bank1
  7068  0D83  00BC               	movwf	??_updateSwitchTap^(0+128)
  7069  0D84  083C               	movf	??_updateSwitchTap^(0+128),w
  7070  0D85  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7071  0D86  2D3D               	goto	l8773
  7072  0D87                     l8775:	
  7073                           
  7074                           ;SwitchTap.c: 127: }
  7075                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7076  0D87  0020               	movlb	0	; select bank0
  7077  0D88  0855               	movf	_num_taps,w
  7078  0D89  0021               	movlb	1	; select bank1
  7079  0D8A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7080  0D8B  3001               	movlw	1
  7081  0D8C                     u9585:	
  7082  0D8C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7083  0D8D  3EFF               	addlw	-1
  7084  0D8E  1D03               	skipz
  7085  0D8F  2D8C               	goto	u9585
  7086  0D90  353C               	lslf	??_updateSwitchTap^(0+128),w
  7087  0D91  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7088  0D92  0086               	movwf	6
  7089  0D93  3002               	movlw	2	; select bank4/5
  7090  0D94  0087               	movwf	7
  7091  0D95  0020               	movlb	0	; select bank0
  7092  0D96  085C               	movf	_tap_timer,w	;volatile
  7093  0D97  3FC0               	movwi [0]fsr1
  7094  0D98  085D               	movf	_tap_timer+1,w	;volatile
  7095  0D99  3FC1               	movwi [1]fsr1
  7096  0D9A  085E               	movf	_tap_timer+2,w	;volatile
  7097  0D9B  3FC2               	movwi [2]fsr1
  7098  0D9C  085F               	movf	_tap_timer+3,w	;volatile
  7099  0D9D  3FC3               	movwi [3]fsr1
  7100                           
  7101                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7102  0D9E  085C               	movf	_tap_timer,w	;volatile
  7103  0D9F  0024               	movlb	4	; select bank4
  7104  0DA0  07BD               	addwf	_tap_total^(0+512),f
  7105  0DA1  0020               	movlb	0	; select bank0
  7106  0DA2  085D               	movf	_tap_timer+1,w	;volatile
  7107  0DA3  0024               	movlb	4	; select bank4
  7108  0DA4  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7109  0DA5  0020               	movlb	0	; select bank0
  7110  0DA6  085E               	movf	_tap_timer+2,w	;volatile
  7111  0DA7  0024               	movlb	4	; select bank4
  7112  0DA8  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7113  0DA9  0020               	movlb	0	; select bank0
  7114  0DAA  085F               	movf	_tap_timer+3,w	;volatile
  7115  0DAB  0024               	movlb	4	; select bank4
  7116  0DAC  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7117  0DAD                     l8779:	
  7118                           
  7119                           ;SwitchTap.c: 130: }
  7120                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7121  0DAD  0021               	movlb	1	; select bank1
  7122  0DAE  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7123  0DAF  00A0               	movwf	___aldiv@divisor^(0+128)
  7124  0DB0  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7125  0DB1  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7126  0DB2  0D89               	rlf	9,f
  7127  0DB3  3B89               	subwfb	9,f
  7128  0DB4  0989               	comf	9,f
  7129  0DB5  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7130  0DB6  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7131  0DB7  0024               	movlb	4	; select bank4
  7132  0DB8  0840               	movf	(_tap_total+3)^(0+512),w
  7133  0DB9  0021               	movlb	1	; select bank1
  7134  0DBA  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7135  0DBB  0024               	movlb	4	; select bank4
  7136  0DBC  083F               	movf	(_tap_total+2)^(0+512),w
  7137  0DBD  0021               	movlb	1	; select bank1
  7138  0DBE  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7139  0DBF  0024               	movlb	4	; select bank4
  7140  0DC0  083E               	movf	(_tap_total+1)^(0+512),w
  7141  0DC1  0021               	movlb	1	; select bank1
  7142  0DC2  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7143  0DC3  0024               	movlb	4	; select bank4
  7144  0DC4  083D               	movf	_tap_total^(0+512),w
  7145  0DC5  0021               	movlb	1	; select bank1
  7146  0DC6  00A4               	movwf	___aldiv@dividend^(0+128)
  7147  0DC7  3198  20CE         	fcall	___aldiv
  7148  0DC9  0021               	movlb	1	; select bank1
  7149  0DCA  0823               	movf	(?___aldiv+3)^(0+128),w
  7150  0DCB  0020               	movlb	0	; select bank0
  7151  0DCC  00C8               	movwf	_baseline_delay_time+3	;volatile
  7152  0DCD  0021               	movlb	1	; select bank1
  7153  0DCE  0822               	movf	(?___aldiv+2)^(0+128),w
  7154  0DCF  0020               	movlb	0	; select bank0
  7155  0DD0  00C7               	movwf	_baseline_delay_time+2	;volatile
  7156  0DD1  0021               	movlb	1	; select bank1
  7157  0DD2  0821               	movf	(?___aldiv+1)^(0+128),w
  7158  0DD3  0020               	movlb	0	; select bank0
  7159  0DD4  00C6               	movwf	_baseline_delay_time+1	;volatile
  7160  0DD5  0021               	movlb	1	; select bank1
  7161  0DD6  0820               	movf	?___aldiv^(0+128),w
  7162  0DD7  0020               	movlb	0	; select bank0
  7163  0DD8  00C5               	movwf	_baseline_delay_time	;volatile
  7164                           
  7165                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7166  0DD9  0023               	movlb	3	; select bank3
  7167  0DDA  01DB               	clrf	_delay_time_changed^(0+384)
  7168  0DDB  0ADB               	incf	_delay_time_changed^(0+384),f
  7169                           
  7170                           ;SwitchTap.c: 134: tap_timer = 0;
  7171  0DDC  3000               	movlw	0
  7172  0DDD  0020               	movlb	0	; select bank0
  7173  0DDE  00DF               	movwf	_tap_timer+3	;volatile
  7174  0DDF  3000               	movlw	0
  7175  0DE0  00DE               	movwf	_tap_timer+2	;volatile
  7176  0DE1  3000               	movlw	0
  7177  0DE2  00DD               	movwf	_tap_timer+1	;volatile
  7178  0DE3  3000               	movlw	0
  7179  0DE4  00DC               	movwf	_tap_timer	;volatile
  7180                           
  7181                           ;SwitchTap.c: 136: tap_iteration++;
  7182  0DE5  3001               	movlw	1
  7183  0DE6  0023               	movlb	3	; select bank3
  7184  0DE7  07D7               	addwf	_tap_iteration^(0+384),f
  7185  0DE8  3000               	movlw	0
  7186  0DE9  3DD8               	addwfc	(_tap_iteration+1)^(0+384),f
  7187                           
  7188                           ;SwitchTap.c: 137: }
  7189                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7190  0DEA  0008               	return
  7191  0DEB                     l8787:	
  7192  0DEB  3019               	movlw	25
  7193  0DEC  0022               	movlb	2	; select bank2
  7194  0DED  026C               	subwf	_switchTap_pressed^(0+256),w
  7195  0DEE  1C03               	skipc
  7196  0DEF  0008               	return
  7197                           
  7198                           ;SwitchTap.c: 140: switchTap_down = 0;
  7199  0DF0  0023               	movlb	3	; select bank3
  7200  0DF1  01C7               	clrf	_switchTap_down^(0+384)
  7201                           
  7202                           ;SwitchTap.c: 141: switchTap_state = 0;
  7203  0DF2  01E0               	clrf	_switchTap_state^(0+384)
  7204                           
  7205                           ;SwitchTap.c: 147: setLongTapState(0);
  7206  0DF3  3000               	movlw	0
  7207  0DF4  0021               	movlb	1	; select bank1
  7208  0DF5  00A0               	movwf	setLongTapState@f_state^(0+128)
  7209  0DF6  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7210  0DF7  31AF  27E6         	fcall	_setLongTapState
  7211                           
  7212                           ;SwitchTap.c: 149: longTap_timer = 0;
  7213  0DF9  0023               	movlb	3	; select bank3
  7214  0DFA  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7215  0DFB  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7216                           
  7217                           ;SwitchTap.c: 150: longTap_start = 0;
  7218  0DFC  0022               	movlb	2	; select bank2
  7219  0DFD  01EB               	clrf	_longTap_start^(0+256)
  7220                           
  7221                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7222  0DFE  3019               	movlw	25
  7223  0DFF  0021               	movlb	1	; select bank1
  7224  0E00  00BC               	movwf	??_updateSwitchTap^(0+128)
  7225  0E01  083C               	movf	??_updateSwitchTap^(0+128),w
  7226  0E02  0022               	movlb	2	; select bank2
  7227  0E03  00EC               	movwf	_switchTap_pressed^(0+256)
  7228  0E04  0008               	return
  7229  0E05                     __end_of_updateSwitchTap:	
  7230                           
  7231                           	psect	text4
  7232  2FE6                     __ptext4:	
  7233 ;; *************** function _setLongTapState *****************
  7234 ;; Defined at:
  7235 ;;		line 167 in file "SwitchTap.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  f_state         2    0[BANK1 ] int 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7249 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7251 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7252 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7253 ;;Total ram usage:        4 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    3
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_updateSwitchTap
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _setLongTapState
  7265  2FE6                     _setLongTapState:	
  7266                           
  7267                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _setLongTapState: [wreg+status,0]
  7271  2FE6  0020               	movlb	0	; select bank0
  7272  2FE7  0854               	movf	_longTap_state,w	;volatile
  7273  2FE8  0021               	movlb	1	; select bank1
  7274  2FE9  00A2               	movwf	??_setLongTapState^(0+128)
  7275  2FEA  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7276  2FEB  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7277  2FEC  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7278  2FED  1D03               	skipz
  7279  2FEE  2FF1               	goto	u8625
  7280  2FEF  0820               	movf	setLongTapState@f_state^(0+128),w
  7281  2FF0  0622               	xorwf	??_setLongTapState^(0+128),w
  7282  2FF1                     u8625:	
  7283  2FF1  1903               	btfsc	3,2
  7284  2FF2  0008               	return
  7285                           
  7286                           ;SwitchTap.c: 169: longTap_state = f_state;
  7287  2FF3  0820               	movf	setLongTapState@f_state^(0+128),w
  7288  2FF4  00A2               	movwf	??_setLongTapState^(0+128)
  7289  2FF5  0822               	movf	??_setLongTapState^(0+128),w
  7290  2FF6  0020               	movlb	0	; select bank0
  7291  2FF7  00D4               	movwf	_longTap_state	;volatile
  7292                           
  7293                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7294  2FF8  0021               	movlb	1	; select bank1
  7295  2FF9  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7296  2FFA  0022               	movlb	2	; select bank2
  7297  2FFB  1C03               	skipc
  7298  2FFC  128D               	bcf	13,5	;volatile
  7299  2FFD  1803               	skipnc
  7300  2FFE  168D               	bsf	13,5	;volatile
  7301  2FFF  0008               	return
  7302  3000                     __end_of_setLongTapState:	
  7303                           
  7304                           	psect	text5
  7305  18CE                     __ptext5:	
  7306 ;; *************** function ___aldiv *****************
  7307 ;; Defined at:
  7308 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  divisor         4    0[BANK1 ] long 
  7311 ;;  dividend        4    4[BANK1 ] long 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  quotient        4   11[BANK1 ] long 
  7314 ;;  sign            1   10[BANK1 ] unsigned char 
  7315 ;;  counter         1    9[BANK1 ] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  4    0[BANK1 ] long 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7325 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7329 ;;Total ram usage:       15 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    3
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_updateSwitchTap
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function ___aldiv
  7341  18CE                     ___aldiv:	
  7342                           
  7343                           ;incstack = 0
  7344                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7345  18CE  0021               	movlb	1	; select bank1
  7346  18CF  01AA               	clrf	___aldiv@sign^(0+128)
  7347  18D0  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7348  18D1  28DF               	goto	l1999
  7349  18D2  09A0               	comf	___aldiv@divisor^(0+128),f
  7350  18D3  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7351  18D4  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7352  18D5  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7353  18D6  0AA0               	incf	___aldiv@divisor^(0+128),f
  7354  18D7  1903               	skipnz
  7355  18D8  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7356  18D9  1903               	skipnz
  7357  18DA  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7358  18DB  1903               	skipnz
  7359  18DC  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7360  18DD  01AA               	clrf	___aldiv@sign^(0+128)
  7361  18DE  0AAA               	incf	___aldiv@sign^(0+128),f
  7362  18DF                     l1999:	
  7363  18DF  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7364  18E0  28F0               	goto	l8355
  7365  18E1  09A4               	comf	___aldiv@dividend^(0+128),f
  7366  18E2  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7367  18E3  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7368  18E4  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7369  18E5  0AA4               	incf	___aldiv@dividend^(0+128),f
  7370  18E6  1903               	skipnz
  7371  18E7  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7372  18E8  1903               	skipnz
  7373  18E9  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7374  18EA  1903               	skipnz
  7375  18EB  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7376  18EC  3001               	movlw	1
  7377  18ED  00A8               	movwf	??___aldiv^(0+128)
  7378  18EE  0828               	movf	??___aldiv^(0+128),w
  7379  18EF  06AA               	xorwf	___aldiv@sign^(0+128),f
  7380  18F0                     l8355:	
  7381  18F0  3000               	movlw	0
  7382  18F1  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7383  18F2  3000               	movlw	0
  7384  18F3  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7385  18F4  3000               	movlw	0
  7386  18F5  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7387  18F6  3000               	movlw	0
  7388  18F7  00AB               	movwf	___aldiv@quotient^(0+128)
  7389  18F8  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7390  18F9  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7391  18FA  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7392  18FB  0420               	iorwf	___aldiv@divisor^(0+128),w
  7393  18FC  1903               	skipnz
  7394  18FD  2939               	goto	l8377
  7395  18FE  01A9               	clrf	___aldiv@counter^(0+128)
  7396  18FF  0AA9               	incf	___aldiv@counter^(0+128),f
  7397  1900                     l8363:	
  7398  1900  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7399  1901  290E               	goto	l8365
  7400  1902  3001               	movlw	1
  7401  1903                     u8765:	
  7402  1903  35A0               	lslf	___aldiv@divisor^(0+128),f
  7403  1904  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7404  1905  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7405  1906  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7406  1907  0B89               	decfsz	9,f
  7407  1908  2903               	goto	u8765
  7408  1909  3001               	movlw	1
  7409  190A  00A8               	movwf	??___aldiv^(0+128)
  7410  190B  0828               	movf	??___aldiv^(0+128),w
  7411  190C  07A9               	addwf	___aldiv@counter^(0+128),f
  7412  190D  2900               	goto	l8363
  7413  190E                     l8365:	
  7414  190E  3001               	movlw	1
  7415  190F                     u8785:	
  7416  190F  35AB               	lslf	___aldiv@quotient^(0+128),f
  7417  1910  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7418  1911  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7419  1912  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7420  1913  0B89               	decfsz	9,f
  7421  1914  290F               	goto	u8785
  7422  1915  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7423  1916  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7424  1917  1D03               	skipz
  7425  1918  2923               	goto	u8795
  7426  1919  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7427  191A  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7428  191B  1D03               	skipz
  7429  191C  2923               	goto	u8795
  7430  191D  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7431  191E  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7432  191F  1D03               	skipz
  7433  1920  2923               	goto	u8795
  7434  1921  0820               	movf	___aldiv@divisor^(0+128),w
  7435  1922  0224               	subwf	___aldiv@dividend^(0+128),w
  7436  1923                     u8795:	
  7437  1923  1C03               	skipc
  7438  1924  292E               	goto	l8373
  7439  1925  0820               	movf	___aldiv@divisor^(0+128),w
  7440  1926  02A4               	subwf	___aldiv@dividend^(0+128),f
  7441  1927  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7442  1928  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7443  1929  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7444  192A  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7445  192B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7446  192C  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7447  192D  142B               	bsf	___aldiv@quotient^(0+128),0
  7448  192E                     l8373:	
  7449  192E  3001               	movlw	1
  7450  192F                     u8805:	
  7451  192F  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7452  1930  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7453  1931  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7454  1932  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7455  1933  0B89               	decfsz	9,f
  7456  1934  292F               	goto	u8805
  7457  1935  3001               	movlw	1
  7458  1936  02A9               	subwf	___aldiv@counter^(0+128),f
  7459  1937  1D03               	btfss	3,2
  7460  1938  290E               	goto	l8365
  7461  1939                     l8377:	
  7462  1939  082A               	movf	___aldiv@sign^(0+128),w
  7463  193A  1903               	btfsc	3,2
  7464  193B  2947               	goto	l8381
  7465  193C  09AB               	comf	___aldiv@quotient^(0+128),f
  7466  193D  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7467  193E  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7468  193F  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7469  1940  0AAB               	incf	___aldiv@quotient^(0+128),f
  7470  1941  1903               	skipnz
  7471  1942  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7472  1943  1903               	skipnz
  7473  1944  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7474  1945  1903               	skipnz
  7475  1946  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7476  1947                     l8381:	
  7477  1947  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7478  1948  00A3               	movwf	(?___aldiv+3)^(0+128)
  7479  1949  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7480  194A  00A2               	movwf	(?___aldiv+2)^(0+128)
  7481  194B  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7482  194C  00A1               	movwf	(?___aldiv+1)^(0+128)
  7483  194D  082B               	movf	___aldiv@quotient^(0+128),w
  7484  194E  00A0               	movwf	?___aldiv^(0+128)
  7485  194F  0008               	return
  7486  1950                     __end_of___aldiv:	
  7487                           
  7488                           	psect	text6
  7489  122B                     __ptext6:	
  7490 ;; *************** function _updateSwitchBypass *****************
  7491 ;; Defined at:
  7492 ;;		line 34 in file "SwitchBypass.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;		None
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      void 
  7499 ;; Registers used:
  7500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7508 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7509 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7510 ;;Total ram usage:        2 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    8
  7513 ;; This function calls:
  7514 ;;		_setDoublePressState
  7515 ;;		_setLongBypassState
  7516 ;;		_setSwitchBypassRelays
  7517 ;;		_setSwitchBypassState
  7518 ;; This function is called by:
  7519 ;;		_main
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           
  7524                           ;psect for function _updateSwitchBypass
  7525  122B                     _updateSwitchBypass:	
  7526                           
  7527                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7528                           
  7529                           ;incstack = 0
  7530                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7531  122B  0020               	movlb	0	; select bank0
  7532  122C  1890               	btfsc	16,1	;volatile
  7533  122D  2A41               	goto	l8587
  7534                           
  7535                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7536  122E  0023               	movlb	3	; select bank3
  7537  122F  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7538  1230  3A80               	xorlw	128
  7539  1231  0021               	movlb	1	; select bank1
  7540  1232  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7541  1233  3080               	movlw	128
  7542  1234  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7543  1235  1D03               	skipz
  7544  1236  2A3A               	goto	u9125
  7545  1237  3001               	movlw	1
  7546  1238  0023               	movlb	3	; select bank3
  7547  1239  023A               	subwf	_switchBypass_pressed^(0+384),w
  7548  123A                     u9125:	
  7549  123A  1C03               	skipc
  7550  123B  2A54               	goto	l8591
  7551                           
  7552                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7553  123C  30FF               	movlw	255
  7554  123D  0023               	movlb	3	; select bank3
  7555  123E  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7556  123F  30FF               	movlw	255
  7557  1240  2A53               	goto	L1
  7558  1241                     l8587:	
  7559                           ;SwitchBypass.c: 44: }
  7560                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7561                           
  7562  1241  0023               	movlb	3	; select bank3
  7563  1242  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7564  1243  3A80               	xorlw	128
  7565  1244  0021               	movlb	1	; select bank1
  7566  1245  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7567  1246  3080               	movlw	128
  7568  1247  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7569  1248  1D03               	skipz
  7570  1249  2A4D               	goto	u9135
  7571  124A  3019               	movlw	25
  7572  124B  0023               	movlb	3	; select bank3
  7573  124C  023A               	subwf	_switchBypass_pressed^(0+384),w
  7574  124D                     u9135:	
  7575  124D  1803               	skipnc
  7576  124E  2A54               	goto	l8591
  7577                           
  7578                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7579  124F  3001               	movlw	1
  7580  1250  0023               	movlb	3	; select bank3
  7581  1251  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7582  1252  3000               	movlw	0
  7583  1253                     L1:	
  7584  1253  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7585  1254                     l8591:	
  7586                           
  7587                           ;SwitchBypass.c: 47: }
  7588                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7589  1254  0023               	movlb	3	; select bank3
  7590  1255  083A               	movf	_switchBypass_pressed^(0+384),w
  7591  1256  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7592  1257  1D03               	btfss	3,2
  7593  1258  2ADF               	goto	l8653
  7594                           
  7595                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7596  1259  0022               	movlb	2	; select bank2
  7597  125A  086A               	movf	_longBypass_start^(0+256),w
  7598  125B  1D03               	btfss	3,2
  7599  125C  2A62               	goto	l8599
  7600                           
  7601                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7602  125D  01EA               	clrf	_longBypass_start^(0+256)
  7603  125E  0AEA               	incf	_longBypass_start^(0+256),f
  7604                           
  7605                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7606  125F  0023               	movlb	3	; select bank3
  7607  1260  01B2               	clrf	_longBypass_timer^(0+384)	;volatile
  7608  1261  01B3               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7609  1262                     l8599:	
  7610                           
  7611                           ;SwitchBypass.c: 59: }
  7612                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7613  1262  0020               	movlb	0	; select bank0
  7614  1263  0850               	movf	_long_press_limit+1,w
  7615  1264  0023               	movlb	3	; select bank3
  7616  1265  0233               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7617  1266  1D03               	skipz
  7618  1267  2A6C               	goto	u9165
  7619  1268  0020               	movlb	0	; select bank0
  7620  1269  084F               	movf	_long_press_limit,w
  7621  126A  0023               	movlb	3	; select bank3
  7622  126B  0232               	subwf	_longBypass_timer^(0+384),w	;volatile
  7623  126C                     u9165:	
  7624  126C  1C03               	skipc
  7625  126D  2AAA               	goto	l8625
  7626  126E  0840               	movf	_longBypass_down^(0+384),w
  7627  126F  1D03               	btfss	3,2
  7628  1270  2AAA               	goto	l8625
  7629  1271  0020               	movlb	0	; select bank0
  7630  1272  0865               	movf	_doubleTap_state,w	;volatile
  7631  1273  1D03               	btfss	3,2
  7632  1274  2AAA               	goto	l8625
  7633                           
  7634                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7635  1275  0022               	movlb	2	; select bank2
  7636  1276  110D               	bcf	13,2	;volatile
  7637                           
  7638                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7639  1277  036B               	decf	_longTap_start^(0+256),w
  7640  1278  1903               	btfsc	3,2
  7641  1279  2AA2               	goto	l8623
  7642                           
  7643                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7644  127A  0020               	movlb	0	; select bank0
  7645  127B  0357               	decf	_switchBypass_state,w
  7646  127C  1D03               	btfss	3,2
  7647  127D  2AAA               	goto	l8625
  7648                           
  7649                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7650  127E  0023               	movlb	3	; select bank3
  7651  127F  01C0               	clrf	_longBypass_down^(0+384)
  7652  1280  0AC0               	incf	_longBypass_down^(0+384),f
  7653                           
  7654                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7655  1281  0020               	movlb	0	; select bank0
  7656  1282  0866               	movf	_longBypass_state,w	;volatile
  7657  1283  1D03               	btfss	3,2
  7658  1284  2A90               	goto	l8619
  7659                           
  7660                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7661  1285  0022               	movlb	2	; select bank2
  7662  1286  110D               	bcf	13,2	;volatile
  7663                           
  7664                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7665  1287  3001               	movlw	1
  7666  1288  0021               	movlb	1	; select bank1
  7667  1289  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7668  128A  3000               	movlw	0
  7669  128B  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7670  128C  31A0  2076  3192   	fcall	_setLongBypassState
  7671                           
  7672                           ;SwitchBypass.c: 71: } else {
  7673  128F  2AAA               	goto	l8625
  7674  1290                     l8619:	
  7675                           
  7676                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7677  1290  3001               	movlw	1
  7678  1291  0021               	movlb	1	; select bank1
  7679  1292  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7680  1293  3000               	movlw	0
  7681  1294  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7682  1295  31A0  201E  3192   	fcall	_setSwitchBypassState
  7683                           
  7684                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7685  1298  3000               	movlw	0
  7686  1299  0021               	movlb	1	; select bank1
  7687  129A  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7688  129B  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7689  129C  31A0  2076  3192   	fcall	_setLongBypassState
  7690                           
  7691                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7692  129F  0022               	movlb	2	; select bank2
  7693  12A0  150D               	bsf	13,2	;volatile
  7694                           
  7695                           ;SwitchBypass.c: 75: }
  7696                           ;SwitchBypass.c: 76: }
  7697                           ;SwitchBypass.c: 77: } else {
  7698  12A1  2AAA               	goto	l8625
  7699  12A2                     l8623:	
  7700                           
  7701                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7702  12A2  3001               	movlw	1
  7703  12A3  0021               	movlb	1	; select bank1
  7704  12A4  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7705  12A5  3000               	movlw	0
  7706  12A6  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7707  12A7  31A3  2378  3192   	fcall	_setDoublePressState
  7708  12AA                     l8625:	
  7709                           
  7710                           ;SwitchBypass.c: 79: }
  7711                           ;SwitchBypass.c: 80: }
  7712                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7713  12AA  0022               	movlb	2	; select bank2
  7714  12AB  120F               	bcf	15,4	;volatile
  7715                           
  7716                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7717  12AC  0020               	movlb	0	; select bank0
  7718  12AD  0865               	movf	_doubleTap_state,w	;volatile
  7719  12AE  1D03               	btfss	3,2
  7720  12AF  2ADB               	goto	l8651
  7721  12B0  0023               	movlb	3	; select bank3
  7722  12B1  0840               	movf	_longBypass_down^(0+384),w
  7723  12B2  1D03               	btfss	3,2
  7724  12B3  2ADB               	goto	l8651
  7725                           
  7726                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7727  12B4  0020               	movlb	0	; select bank0
  7728  12B5  0357               	decf	_switchBypass_state,w
  7729  12B6  1D03               	btfss	3,2
  7730  12B7  2AC6               	goto	l8639
  7731                           
  7732                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7733  12B8  0024               	movlb	4	; select bank4
  7734  12B9  0364               	decf	_switchBypass_up^(0+512),w
  7735  12BA  0465               	iorwf	(_switchBypass_up+1)^(0+512),w
  7736  12BB  1D03               	btfss	3,2
  7737  12BC  2ADB               	goto	l8651
  7738                           
  7739                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7740  12BD  0023               	movlb	3	; select bank3
  7741  12BE  01DA               	clrf	_currentBypassState^(0+384)
  7742  12BF  0ADA               	incf	_currentBypassState^(0+384),f
  7743                           
  7744                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7745  12C0  3001               	movlw	1
  7746  12C1  0024               	movlb	4	; select bank4
  7747  12C2  00D5               	movwf	_switchBypass_toggle^(0+512)
  7748  12C3  3000               	movlw	0
  7749  12C4  00D6               	movwf	(_switchBypass_toggle^(0+512)+1)
  7750                           
  7751                           ;SwitchBypass.c: 88: }
  7752                           ;SwitchBypass.c: 89: } else {
  7753  12C5  2ADB               	goto	l8651
  7754  12C6                     l8639:	
  7755                           
  7756                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7757  12C6  0023               	movlb	3	; select bank3
  7758  12C7  033E               	decf	_bypass_turning_on^(0+384),w
  7759  12C8  1903               	btfsc	3,2
  7760  12C9  2ADB               	goto	l8651
  7761                           
  7762                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7763  12CA  01DA               	clrf	_currentBypassState^(0+384)
  7764                           
  7765                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7766  12CB  01BE               	clrf	_bypass_turning_on^(0+384)
  7767  12CC  0ABE               	incf	_bypass_turning_on^(0+384),f
  7768                           
  7769                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7770  12CD  0024               	movlb	4	; select bank4
  7771  12CE  01D5               	clrf	_switchBypass_toggle^(0+512)
  7772  12CF  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7773                           
  7774                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7775  12D0  0020               	movlb	0	; select bank0
  7776  12D1  0866               	movf	_longBypass_state,w	;volatile
  7777  12D2  0021               	movlb	1	; select bank1
  7778  12D3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7779  12D4  083C               	movf	??_updateSwitchBypass^(0+128),w
  7780  12D5  0023               	movlb	3	; select bank3
  7781  12D6  00C1               	movwf	_longBypass_save^(0+384)
  7782                           
  7783                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7784  12D7  0020               	movlb	0	; select bank0
  7785  12D8  01E6               	clrf	_longBypass_state	;volatile
  7786                           
  7787                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7788  12D9  0022               	movlb	2	; select bank2
  7789  12DA  01EA               	clrf	_longBypass_start^(0+256)
  7790  12DB                     l8651:	
  7791                           
  7792                           ;SwitchBypass.c: 100: }
  7793                           ;SwitchBypass.c: 101: }
  7794                           ;SwitchBypass.c: 103: }
  7795                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7796  12DB  0024               	movlb	4	; select bank4
  7797  12DC  01E4               	clrf	_switchBypass_up^(0+512)
  7798  12DD  01E5               	clrf	(_switchBypass_up+1)^(0+512)
  7799                           
  7800                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7801  12DE  0008               	return
  7802  12DF                     l8653:	
  7803  12DF  0023               	movlb	3	; select bank3
  7804  12E0  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7805  12E1  3A80               	xorlw	128
  7806  12E2  0021               	movlb	1	; select bank1
  7807  12E3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7808  12E4  3080               	movlw	128
  7809  12E5  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7810  12E6  1D03               	skipz
  7811  12E7  2AEB               	goto	u9275
  7812  12E8  3019               	movlw	25
  7813  12E9  0023               	movlb	3	; select bank3
  7814  12EA  023A               	subwf	_switchBypass_pressed^(0+384),w
  7815  12EB                     u9275:	
  7816  12EB  1C03               	skipc
  7817  12EC  0008               	return
  7818                           
  7819                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7820  12ED  0020               	movlb	0	; select bank0
  7821  12EE  0365               	decf	_doubleTap_state,w	;volatile
  7822  12EF  1D03               	btfss	3,2
  7823  12F0  2AFA               	goto	l8659
  7824                           
  7825                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7826  12F1  0023               	movlb	3	; select bank3
  7827  12F2  085A               	movf	_currentBypassState^(0+384),w
  7828  12F3  0021               	movlb	1	; select bank1
  7829  12F4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7830  12F5  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7831  12F6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7832  12F7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7833  12F8  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7834  12F9  2B2A               	goto	L2
  7835  12FA                     l8659:	
  7836                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7837                           
  7838  12FA  0023               	movlb	3	; select bank3
  7839  12FB  033E               	decf	_bypass_turning_on^(0+384),w
  7840  12FC  1D03               	btfss	3,2
  7841  12FD  2B1A               	goto	l8669
  7842                           
  7843                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7844  12FE  0341               	decf	_longBypass_save^(0+384),w
  7845  12FF  1D03               	btfss	3,2
  7846  1300  2B14               	goto	l8667
  7847                           
  7848                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7849  1301  0022               	movlb	2	; select bank2
  7850  1302  110D               	bcf	13,2	;volatile
  7851                           
  7852                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7853  1303  3001               	movlw	1
  7854  1304  0021               	movlb	1	; select bank1
  7855  1305  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7856  1306  3000               	movlw	0
  7857  1307  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7858  1308  31A0  2076  3192   	fcall	_setLongBypassState
  7859                           
  7860                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  7861  130B  3001               	movlw	1
  7862  130C  0021               	movlb	1	; select bank1
  7863  130D  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  7864  130E  3000               	movlw	0
  7865  130F  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  7866  1310  31A2  221C  3192   	fcall	_setSwitchBypassRelays
  7867                           
  7868                           ;SwitchBypass.c: 114: } else {
  7869  1313  2B2E               	goto	l8677
  7870  1314                     l8667:	
  7871                           
  7872                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  7873  1314  3001               	movlw	1
  7874  1315  0021               	movlb	1	; select bank1
  7875  1316  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7876  1317  3000               	movlw	0
  7877  1318  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7878  1319  2B2B               	goto	L3
  7879  131A                     l8669:	
  7880                           ;SwitchBypass.c: 116: }
  7881                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  7882                           
  7883  131A  0024               	movlb	4	; select bank4
  7884  131B  0355               	decf	_switchBypass_toggle^(0+512),w
  7885  131C  0456               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  7886  131D  1D03               	btfss	3,2
  7887  131E  2B2E               	goto	l8677
  7888  131F  0023               	movlb	3	; select bank3
  7889  1320  0840               	movf	_longBypass_down^(0+384),w
  7890  1321  1D03               	btfss	3,2
  7891  1322  2B2E               	goto	l8677
  7892  1323  0020               	movlb	0	; select bank0
  7893  1324  0865               	movf	_doubleTap_state,w	;volatile
  7894  1325  1D03               	btfss	3,2
  7895  1326  2B2E               	goto	l8677
  7896                           
  7897                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  7898  1327  3000               	movlw	0
  7899  1328  0021               	movlb	1	; select bank1
  7900  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7901  132A                     L2:	
  7902  132A  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7903  132B                     L3:	
  7904  132B  31A0  201E  3192   	fcall	_setSwitchBypassState
  7905  132E                     l8677:	
  7906                           
  7907                           ;SwitchBypass.c: 120: }
  7908                           ;SwitchBypass.c: 122: longBypass_down = 0;
  7909  132E  0023               	movlb	3	; select bank3
  7910  132F  01C0               	clrf	_longBypass_down^(0+384)
  7911                           
  7912                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  7913  1330  0020               	movlb	0	; select bank0
  7914  1331  0866               	movf	_longBypass_state,w	;volatile
  7915  1332  1D03               	btfss	3,2
  7916  1333  2B3A               	goto	l8683
  7917                           
  7918                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  7919  1334  0C57               	rrf	_switchBypass_state,w
  7920  1335  0022               	movlb	2	; select bank2
  7921  1336  1C03               	skipc
  7922  1337  110D               	bcf	13,2	;volatile
  7923  1338  1803               	skipnc
  7924  1339  150D               	bsf	13,2	;volatile
  7925  133A                     l8683:	
  7926                           
  7927                           ;SwitchBypass.c: 125: }
  7928                           ;SwitchBypass.c: 127: setDoublePressState(0);
  7929  133A  3000               	movlw	0
  7930  133B  0021               	movlb	1	; select bank1
  7931  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7932  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7933  133E  31A3  2378         	fcall	_setDoublePressState
  7934                           
  7935                           ;SwitchBypass.c: 128: longBypass_start = 0;
  7936  1340  0022               	movlb	2	; select bank2
  7937  1341  01EA               	clrf	_longBypass_start^(0+256)
  7938                           
  7939                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  7940  1342  0023               	movlb	3	; select bank3
  7941  1343  01BE               	clrf	_bypass_turning_on^(0+384)
  7942                           
  7943                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  7944  1344  0024               	movlb	4	; select bank4
  7945  1345  01D5               	clrf	_switchBypass_toggle^(0+512)
  7946  1346  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7947                           
  7948                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  7949  1347  3001               	movlw	1
  7950  1348  00E4               	movwf	_switchBypass_up^(0+512)
  7951  1349  3000               	movlw	0
  7952  134A  00E5               	movwf	(_switchBypass_up^(0+512)+1)
  7953                           
  7954                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  7955  134B  3019               	movlw	25
  7956  134C  0023               	movlb	3	; select bank3
  7957  134D  00BA               	movwf	_switchBypass_pressed^(0+384)
  7958  134E  3000               	movlw	0
  7959  134F  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  7960  1350  0008               	return
  7961  1351                     __end_of_updateSwitchBypass:	
  7962                           
  7963                           	psect	text7
  7964  2076                     __ptext7:	
  7965 ;; *************** function _setLongBypassState *****************
  7966 ;; Defined at:
  7967 ;;		line 163 in file "SwitchBypass.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  f_state         2    0[BANK1 ] int 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;		None
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  1    wreg      void 
  7974 ;; Registers used:
  7975 ;;		wreg, status,0
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7981 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7983 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7984 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7985 ;;Total ram usage:        4 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    3
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_updateSwitchBypass
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function _setLongBypassState
  7997  2076                     _setLongBypassState:	
  7998                           
  7999                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8003  2076  0020               	movlb	0	; select bank0
  8004  2077  0866               	movf	_longBypass_state,w	;volatile
  8005  2078  0021               	movlb	1	; select bank1
  8006  2079  00A2               	movwf	??_setLongBypassState^(0+128)
  8007  207A  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8008  207B  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8009  207C  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8010  207D  1D03               	skipz
  8011  207E  2881               	goto	u8575
  8012  207F  0820               	movf	setLongBypassState@f_state^(0+128),w
  8013  2080  0622               	xorwf	??_setLongBypassState^(0+128),w
  8014  2081                     u8575:	
  8015  2081  1903               	btfsc	3,2
  8016  2082  0008               	return
  8017                           
  8018                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8019  2083  0820               	movf	setLongBypassState@f_state^(0+128),w
  8020  2084  00A2               	movwf	??_setLongBypassState^(0+128)
  8021  2085  0822               	movf	??_setLongBypassState^(0+128),w
  8022  2086  0020               	movlb	0	; select bank0
  8023  2087  00E6               	movwf	_longBypass_state	;volatile
  8024                           
  8025                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8026  2088  0021               	movlb	1	; select bank1
  8027  2089  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8028  208A  0022               	movlb	2	; select bank2
  8029  208B  1C03               	skipc
  8030  208C  118D               	bcf	13,3	;volatile
  8031  208D  1803               	skipnc
  8032  208E  158D               	bsf	13,3	;volatile
  8033                           
  8034                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8035  208F  0021               	movlb	1	; select bank1
  8036  2090  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8037  2091  0020               	movlb	0	; select bank0
  8038  2092  1C03               	skipc
  8039  2093  120E               	bcf	14,4	;volatile
  8040  2094  1803               	skipnc
  8041  2095  160E               	bsf	14,4	;volatile
  8042  2096  0008               	return
  8043  2097                     __end_of_setLongBypassState:	
  8044                           
  8045                           	psect	text8
  8046  2378                     __ptext8:	
  8047 ;; *************** function _setDoublePressState *****************
  8048 ;; Defined at:
  8049 ;;		line 21 in file "preset_programming.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;  f_state         2   24[BANK1 ] int 
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;		None
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      void 
  8056 ;; Registers used:
  8057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8063 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8065 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8066 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8067 ;;Total ram usage:        4 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    7
  8070 ;; This function calls:
  8071 ;;		_resetRingLEDs
  8072 ;;		_setPedalMode
  8073 ;;		_setPresetDisplay
  8074 ;;		_showSave
  8075 ;;		_wait_ms
  8076 ;; This function is called by:
  8077 ;;		_updateSwitchBypass
  8078 ;;		_updateSwitchTap
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           
  8083                           ;psect for function _setDoublePressState
  8084  2378                     _setDoublePressState:	
  8085                           
  8086                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8087                           
  8088                           ;incstack = 0
  8089                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8090  2378  0020               	movlb	0	; select bank0
  8091  2379  0865               	movf	_doubleTap_state,w	;volatile
  8092  237A  0021               	movlb	1	; select bank1
  8093  237B  00BA               	movwf	??_setDoublePressState^(0+128)
  8094  237C  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8095  237D  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8096  237E  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8097  237F  1D03               	skipz
  8098  2380  2B83               	goto	u8585
  8099  2381  0838               	movf	setDoublePressState@f_state^(0+128),w
  8100  2382  063A               	xorwf	??_setDoublePressState^(0+128),w
  8101  2383                     u8585:	
  8102  2383  1903               	btfsc	3,2
  8103  2384  0008               	return
  8104                           
  8105                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8106  2385  0838               	movf	setDoublePressState@f_state^(0+128),w
  8107  2386  00BA               	movwf	??_setDoublePressState^(0+128)
  8108  2387  083A               	movf	??_setDoublePressState^(0+128),w
  8109  2388  0020               	movlb	0	; select bank0
  8110  2389  00E5               	movwf	_doubleTap_state	;volatile
  8111                           
  8112                           ;preset_programming.c: 24: if (f_state == 1) {
  8113  238A  0021               	movlb	1	; select bank1
  8114  238B  0338               	decf	setDoublePressState@f_state^(0+128),w
  8115  238C  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8116  238D  1D03               	btfss	3,2
  8117  238E  2B92               	goto	l8255
  8118                           
  8119                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8120  238F  0022               	movlb	2	; select bank2
  8121  2390  120D               	bcf	13,4	;volatile
  8122                           
  8123                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8124  2391  128D               	bcf	13,5	;volatile
  8125  2392                     l8255:	
  8126                           
  8127                           ;preset_programming.c: 30: }
  8128                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8129  2392  0020               	movlb	0	; select bank0
  8130  2393  0365               	decf	_doubleTap_state,w	;volatile
  8131  2394  1D03               	btfss	3,2
  8132  2395  2BAE               	goto	l8271
  8133                           
  8134                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8135  2396  0868               	movf	_presetSaveMode,w
  8136  2397  1D03               	btfss	3,2
  8137  2398  2BA3               	goto	l8263
  8138                           
  8139                           ;preset_programming.c: 34: presetSaveMode = 1;
  8140  2399  01E8               	clrf	_presetSaveMode
  8141  239A  0AE8               	incf	_presetSaveMode,f
  8142                           
  8143                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8144  239B  0022               	movlb	2	; select bank2
  8145  239C  108D               	bcf	13,1	;volatile
  8146                           
  8147                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8148  239D  0020               	movlb	0	; select bank0
  8149  239E  0856               	movf	_presetChannel,w
  8150  239F  31A2  228A  31A3   	fcall	_setPresetDisplay
  8151                           
  8152                           ;preset_programming.c: 37: } else {
  8153  23A2  2BAE               	goto	l8271
  8154  23A3                     l8263:	
  8155                           
  8156                           ;preset_programming.c: 39: presetSaveMode = 0;
  8157  23A3  0020               	movlb	0	; select bank0
  8158  23A4  01E8               	clrf	_presetSaveMode
  8159                           
  8160                           ;preset_programming.c: 40: setPedalMode();
  8161  23A5  31A0  20B9  31A3   	fcall	_setPedalMode
  8162                           
  8163                           ;preset_programming.c: 41: resetRingLEDs();
  8164  23A8  31AF  27CC  31A3   	fcall	_resetRingLEDs
  8165                           
  8166                           ;preset_programming.c: 42: showSave();
  8167  23AB  31AF  2788  31A3   	fcall	_showSave
  8168  23AE                     l8271:	
  8169                           
  8170                           ;preset_programming.c: 44: }
  8171                           ;preset_programming.c: 45: }
  8172                           ;preset_programming.c: 47: wait_ms(20);
  8173  23AE  3014               	movlw	20
  8174  23AF  0021               	movlb	1	; select bank1
  8175  23B0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8176  23B1  3000               	movlw	0
  8177  23B2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8178  23B3  31A1  21EA         	fcall	_wait_ms
  8179  23B5  0008               	return
  8180  23B6                     __end_of_setDoublePressState:	
  8181                           
  8182                           	psect	text9
  8183  2F88                     __ptext9:	
  8184 ;; *************** function _showSave *****************
  8185 ;; Defined at:
  8186 ;;		line 112 in file "LEDs.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;		None
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;		None
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8202 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8203 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8204 ;;Total ram usage:        1 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    6
  8207 ;; This function calls:
  8208 ;;		_ring_tactiles
  8209 ;;		_solidring_tactiles
  8210 ;; This function is called by:
  8211 ;;		_setDoublePressState
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _showSave
  8217  2F88                     _showSave:	
  8218                           
  8219                           ;LEDs.c: 113: suspend_blink = 1;
  8220                           
  8221                           ;incstack = 0
  8222                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8223  2F88  3001               	movlw	1
  8224  2F89  0021               	movlb	1	; select bank1
  8225  2F8A  00B7               	movwf	??_showSave^(0+128)
  8226  2F8B  0837               	movf	??_showSave^(0+128),w
  8227  2F8C  0020               	movlb	0	; select bank0
  8228  2F8D  00E9               	movwf	_suspend_blink	;volatile
  8229                           
  8230                           ;LEDs.c: 114: ring_tactiles();
  8231  2F8E  31A6  2623  31AF   	fcall	_ring_tactiles
  8232                           
  8233                           ;LEDs.c: 115: ring_tactiles();
  8234  2F91  31A6  2623  31AF   	fcall	_ring_tactiles
  8235                           
  8236                           ;LEDs.c: 116: solidring_tactiles();
  8237  2F94  31A3  23F6  31AF   	fcall	_solidring_tactiles
  8238                           
  8239                           ;LEDs.c: 117: solidring_tactiles();
  8240  2F97  31A3  23F6         	fcall	_solidring_tactiles
  8241                           
  8242                           ;LEDs.c: 118: suspend_blink = 0;
  8243  2F99  0020               	movlb	0	; select bank0
  8244  2F9A  01E9               	clrf	_suspend_blink	;volatile
  8245  2F9B  0008               	return
  8246  2F9C                     __end_of_showSave:	
  8247                           
  8248                           	psect	text10
  8249  23F6                     __ptext10:	
  8250 ;; *************** function _solidring_tactiles *****************
  8251 ;; Defined at:
  8252 ;;		line 208 in file "LEDs.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;		None
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      void 
  8259 ;; Registers used:
  8260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8267 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8268 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8269 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8270 ;;Total ram usage:        3 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    5
  8273 ;; This function calls:
  8274 ;;		_set_leds_bottom
  8275 ;;		_set_leds_top
  8276 ;;		_wait_ms
  8277 ;; This function is called by:
  8278 ;;		_showSave
  8279 ;;		_showBootSequence
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           
  8284                           ;psect for function _solidring_tactiles
  8285  23F6                     _solidring_tactiles:	
  8286                           
  8287                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8291  23F6  301E               	movlw	30
  8292  23F7  0021               	movlb	1	; select bank1
  8293  23F8  00B2               	movwf	??_solidring_tactiles^(0+128)
  8294  23F9  0832               	movf	??_solidring_tactiles^(0+128),w
  8295  23FA  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8296                           
  8297                           ;LEDs.c: 210: set_leds_top(100, 1);
  8298  23FB  3064               	movlw	100
  8299  23FC  00A0               	movwf	set_leds_top@x^(0+128)
  8300  23FD  3000               	movlw	0
  8301  23FE  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8302  23FF  3001               	movlw	1
  8303  2400  00A2               	movwf	set_leds_top@ledState^(0+128)
  8304  2401  3000               	movlw	0
  8305  2402  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8306  2403  31A6  26C4  31A3   	fcall	_set_leds_top
  8307                           
  8308                           ;LEDs.c: 211: set_leds_bottom(100);
  8309  2406  3064               	movlw	100
  8310  2407  0021               	movlb	1	; select bank1
  8311  2408  00A0               	movwf	set_leds_bottom@x^(0+128)
  8312  2409  3000               	movlw	0
  8313  240A  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8314  240B  31A2  22C4  31A3   	fcall	_set_leds_bottom
  8315                           
  8316                           ;LEDs.c: 212: wait_ms(ring_delay);
  8317  240E  0021               	movlb	1	; select bank1
  8318  240F  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8319  2410  00B2               	movwf	??_solidring_tactiles^(0+128)
  8320  2411  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8321  2412  0832               	movf	??_solidring_tactiles^(0+128),w
  8322  2413  00AC               	movwf	wait_ms@timeSec^(0+128)
  8323  2414  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8324  2415  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8325  2416  31A1  21EA  31A3   	fcall	_wait_ms
  8326                           
  8327                           ;LEDs.c: 214: set_leds_top(0, 1);
  8328  2419  3000               	movlw	0
  8329  241A  0021               	movlb	1	; select bank1
  8330  241B  00A0               	movwf	set_leds_top@x^(0+128)
  8331  241C  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8332  241D  3001               	movlw	1
  8333  241E  00A2               	movwf	set_leds_top@ledState^(0+128)
  8334  241F  3000               	movlw	0
  8335  2420  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8336  2421  31A6  26C4  31A3   	fcall	_set_leds_top
  8337                           
  8338                           ;LEDs.c: 215: set_leds_bottom(0);
  8339  2424  3000               	movlw	0
  8340  2425  0021               	movlb	1	; select bank1
  8341  2426  00A0               	movwf	set_leds_bottom@x^(0+128)
  8342  2427  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8343  2428  31A2  22C4  31A3   	fcall	_set_leds_bottom
  8344                           
  8345                           ;LEDs.c: 216: wait_ms(ring_delay);
  8346  242B  0021               	movlb	1	; select bank1
  8347  242C  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8348  242D  00B2               	movwf	??_solidring_tactiles^(0+128)
  8349  242E  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8350  242F  0832               	movf	??_solidring_tactiles^(0+128),w
  8351  2430  00AC               	movwf	wait_ms@timeSec^(0+128)
  8352  2431  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8353  2432  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8354  2433  31A1  21EA         	fcall	_wait_ms
  8355  2435  0008               	return
  8356  2436                     __end_of_solidring_tactiles:	
  8357                           
  8358                           	psect	text11
  8359  2623                     __ptext11:	
  8360 ;; *************** function _ring_tactiles *****************
  8361 ;; Defined at:
  8362 ;;		line 196 in file "LEDs.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;		None
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  iLed            2   21[BANK1 ] int 
  8367 ;;  iLed            2   19[BANK1 ] int 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  1    wreg      void 
  8370 ;; Registers used:
  8371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8378 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8379 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8380 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8381 ;;Total ram usage:        5 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    5
  8384 ;; This function calls:
  8385 ;;		_set_leds_bottom
  8386 ;;		_set_leds_top
  8387 ;;		_wait_ms
  8388 ;; This function is called by:
  8389 ;;		_showSave
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           
  8394                           ;psect for function _ring_tactiles
  8395  2623                     _ring_tactiles:	
  8396                           
  8397                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8398                           
  8399                           ;incstack = 0
  8400                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8401  2623  3001               	movlw	1
  8402  2624  0021               	movlb	1	; select bank1
  8403  2625  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8404  2626  3000               	movlw	0
  8405  2627  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8406  2628  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8407  2629  3A80               	xorlw	128
  8408  262A  00B2               	movwf	??_ring_tactiles^(0+128)
  8409  262B  3080               	movlw	128
  8410  262C  0232               	subwf	??_ring_tactiles^(0+128),w
  8411  262D  1D03               	skipz
  8412  262E  2E31               	goto	u8085
  8413  262F  3007               	movlw	7
  8414  2630  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8415  2631                     u8085:	
  8416  2631  1803               	btfsc	3,0
  8417  2632  2E57               	goto	l7783
  8418  2633                     l7775:	
  8419                           
  8420                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8421  2633  0021               	movlb	1	; select bank1
  8422  2634  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8423  2635  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8424  2636  0833               	movf	ring_tactiles@iLed^(0+128),w
  8425  2637  00A0               	movwf	set_leds_top@x^(0+128)
  8426  2638  3001               	movlw	1
  8427  2639  00A2               	movwf	set_leds_top@ledState^(0+128)
  8428  263A  3000               	movlw	0
  8429  263B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8430  263C  31A6  26C4  31A6   	fcall	_set_leds_top
  8431                           
  8432                           ;LEDs.c: 199: wait_ms(5);
  8433  263F  3005               	movlw	5
  8434  2640  0021               	movlb	1	; select bank1
  8435  2641  00AC               	movwf	wait_ms@timeSec^(0+128)
  8436  2642  3000               	movlw	0
  8437  2643  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8438  2644  31A1  21EA  31A6   	fcall	_wait_ms
  8439  2647  3001               	movlw	1
  8440  2648  0021               	movlb	1	; select bank1
  8441  2649  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8442  264A  3000               	movlw	0
  8443  264B  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8444  264C  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8445  264D  3A80               	xorlw	128
  8446  264E  00B2               	movwf	??_ring_tactiles^(0+128)
  8447  264F  3080               	movlw	128
  8448  2650  0232               	subwf	??_ring_tactiles^(0+128),w
  8449  2651  1D03               	skipz
  8450  2652  2E55               	goto	u8095
  8451  2653  3007               	movlw	7
  8452  2654  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8453  2655                     u8095:	
  8454  2655  1C03               	skipc
  8455  2656  2E33               	goto	l7775
  8456  2657                     l7783:	
  8457                           
  8458                           ;LEDs.c: 200: }
  8459                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8460  2657  3005               	movlw	5
  8461  2658  0021               	movlb	1	; select bank1
  8462  2659  00B5               	movwf	ring_tactiles@iLed_1529^(0+128)
  8463  265A  3000               	movlw	0
  8464  265B  00B6               	movwf	(ring_tactiles@iLed_1529^(0+128)+1)
  8465  265C                     L4:	
  8466  265C  1BB6               	btfsc	(ring_tactiles@iLed_1529+1)^(0+128),7
  8467  265D  0008               	return
  8468                           
  8469                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8470  265E  0836               	movf	(ring_tactiles@iLed_1529+1)^(0+128),w
  8471  265F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8472  2660  0835               	movf	ring_tactiles@iLed_1529^(0+128),w
  8473  2661  00A0               	movwf	set_leds_bottom@x^(0+128)
  8474  2662  31A2  22C4  31A6   	fcall	_set_leds_bottom
  8475                           
  8476                           ;LEDs.c: 203: wait_ms(5);
  8477  2665  3005               	movlw	5
  8478  2666  0021               	movlb	1	; select bank1
  8479  2667  00AC               	movwf	wait_ms@timeSec^(0+128)
  8480  2668  3000               	movlw	0
  8481  2669  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8482  266A  31A1  21EA  31A6   	fcall	_wait_ms
  8483  266D  30FF               	movlw	255
  8484  266E  0021               	movlb	1	; select bank1
  8485  266F  07B5               	addwf	ring_tactiles@iLed_1529^(0+128),f
  8486  2670  30FF               	movlw	255
  8487  2671  3DB6               	addwfc	(ring_tactiles@iLed_1529+1)^(0+128),f
  8488  2672  2E5C               	goto	L4
  8489  2673                     __end_of_ring_tactiles:	
  8490                           
  8491                           	psect	text12
  8492  20B9                     __ptext12:	
  8493 ;; *************** function _setPedalMode *****************
  8494 ;; Defined at:
  8495 ;;		line 119 in file "tactiles.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;		None
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;		None
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      void 
  8502 ;; Registers used:
  8503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8513 ;;Total ram usage:        0 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    5
  8516 ;; This function calls:
  8517 ;;		_resetRingLEDs
  8518 ;;		_setExpressionDisplay
  8519 ;;		_setPresetDisplay
  8520 ;; This function is called by:
  8521 ;;		_update_mode
  8522 ;;		_setDoublePressState
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function _setPedalMode
  8528  20B9                     _setPedalMode:	
  8529                           
  8530                           ;tactiles.c: 120: switch (mode2_state) {
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8534  20B9  28D0               	goto	l7983
  8535  20BA                     l997:	
  8536                           ;tactiles.c: 121: case 0:
  8537                           
  8538                           
  8539                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8540  20BA  0022               	movlb	2	; select bank2
  8541  20BB  108D               	bcf	13,1	;volatile
  8542                           
  8543                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8544  20BC  100D               	bcf	13,0	;volatile
  8545                           
  8546                           ;tactiles.c: 124: resetRingLEDs();
  8547  20BD  31AF  27CC         	fcall	_resetRingLEDs
  8548                           
  8549                           ;tactiles.c: 125: break;
  8550  20BF  0008               	return
  8551  20C0                     l999:	
  8552                           ;tactiles.c: 126: case 1:
  8553                           
  8554                           
  8555                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8556  20C0  0022               	movlb	2	; select bank2
  8557  20C1  108D               	bcf	13,1	;volatile
  8558                           
  8559                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8560  20C2  140D               	bsf	13,0	;volatile
  8561                           
  8562                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8563  20C3  0020               	movlb	0	; select bank0
  8564  20C4  0856               	movf	_presetChannel,w
  8565  20C5  31A2  228A         	fcall	_setPresetDisplay
  8566                           
  8567                           ;tactiles.c: 130: break;
  8568  20C7  0008               	return
  8569  20C8                     l1000:	
  8570                           ;tactiles.c: 131: case 2:
  8571                           
  8572                           
  8573                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8574  20C8  0022               	movlb	2	; select bank2
  8575  20C9  148D               	bsf	13,1	;volatile
  8576                           
  8577                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8578  20CA  100D               	bcf	13,0	;volatile
  8579                           
  8580                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8581  20CB  0023               	movlb	3	; select bank3
  8582  20CC  085E               	movf	_expressionChannel^(0+384),w
  8583  20CD  31AF  279C         	fcall	_setExpressionDisplay
  8584                           
  8585                           ;tactiles.c: 136: }
  8586                           
  8587                           ;tactiles.c: 135: break;
  8588  20CF  0008               	return
  8589  20D0                     l7983:	
  8590  20D0  0020               	movlb	0	; select bank0
  8591  20D1  0867               	movf	_mode2_state,w
  8592                           
  8593                           ; Switch size 1, requested type "space"
  8594                           ; Number of cases is 3, Range of values is 0 to 2
  8595                           ; switch strategies available:
  8596                           ; Name         Instructions Cycles
  8597                           ; simple_byte           10     6 (average)
  8598                           ; direct_byte           12     6 (fixed)
  8599                           ; jumptable            260     6 (fixed)
  8600                           ;	Chosen strategy is simple_byte
  8601  20D2  3A00               	xorlw	0	; case 0
  8602  20D3  1903               	skipnz
  8603  20D4  28BA               	goto	l997
  8604  20D5  3A01               	xorlw	1	; case 1
  8605  20D6  1903               	skipnz
  8606  20D7  28C0               	goto	l999
  8607  20D8  3A03               	xorlw	3	; case 2
  8608  20D9  1903               	skipnz
  8609  20DA  28C8               	goto	l1000
  8610  20DB  28DC               	goto	l1001
  8611  20DC                     l1001:	
  8612  20DC  0008               	return
  8613  20DD                     __end_of_setPedalMode:	
  8614                           
  8615                           	psect	text13
  8616  228A                     __ptext13:	
  8617 ;; *************** function _setPresetDisplay *****************
  8618 ;; Defined at:
  8619 ;;		line 51 in file "preset_programming.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;  ledChannel      1    wreg     unsigned char 
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      void 
  8626 ;; Registers used:
  8627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8634 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8635 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8636 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8637 ;;Total ram usage:        3 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    4
  8640 ;; This function calls:
  8641 ;;		_set_leds_bottom
  8642 ;;		_set_leds_top
  8643 ;; This function is called by:
  8644 ;;		_setPedalMode
  8645 ;;		_update_selectMode
  8646 ;;		_setDoublePressState
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           
  8651                           ;psect for function _setPresetDisplay
  8652  228A                     _setPresetDisplay:	
  8653                           
  8654                           ;incstack = 0
  8655                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8656                           ;setPresetDisplay@ledChannel stored from wreg
  8657  228A  0021               	movlb	1	; select bank1
  8658  228B  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8659                           
  8660                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8661  228C  3006               	movlw	6
  8662  228D  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8663  228E  1803               	skipnc
  8664  228F  2AA6               	goto	l7803
  8665                           
  8666                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8667  2290  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8668  2291  00A4               	movwf	??_setPresetDisplay^(0+128)
  8669  2292  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8670  2293  0824               	movf	??_setPresetDisplay^(0+128),w
  8671  2294  00A0               	movwf	set_leds_top@x^(0+128)
  8672  2295  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8673  2296  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8674  2297  3001               	movlw	1
  8675  2298  00A2               	movwf	set_leds_top@ledState^(0+128)
  8676  2299  3000               	movlw	0
  8677  229A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8678  229B  31A6  26C4  31A2   	fcall	_set_leds_top
  8679                           
  8680                           ;preset_programming.c: 54: set_leds_bottom(6);
  8681  229E  3006               	movlw	6
  8682  229F  0021               	movlb	1	; select bank1
  8683  22A0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8684  22A1  3000               	movlw	0
  8685  22A2  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8686  22A3  31A2  22C4         	fcall	_set_leds_bottom
  8687                           
  8688                           ;preset_programming.c: 55: } else {
  8689  22A5  0008               	return
  8690  22A6                     l7803:	
  8691                           
  8692                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8693  22A6  3006               	movlw	6
  8694  22A7  0021               	movlb	1	; select bank1
  8695  22A8  00A0               	movwf	set_leds_top@x^(0+128)
  8696  22A9  3000               	movlw	0
  8697  22AA  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8698  22AB  3001               	movlw	1
  8699  22AC  00A2               	movwf	set_leds_top@ledState^(0+128)
  8700  22AD  3000               	movlw	0
  8701  22AE  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8702  22AF  31A6  26C4  31A2   	fcall	_set_leds_top
  8703                           
  8704                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8705  22B2  0021               	movlb	1	; select bank1
  8706  22B3  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8707  22B4  00A4               	movwf	??_setPresetDisplay^(0+128)
  8708  22B5  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8709  22B6  09A4               	comf	??_setPresetDisplay^(0+128),f
  8710  22B7  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8711  22B8  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8712  22B9  1903               	skipnz
  8713  22BA  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8714  22BB  0824               	movf	??_setPresetDisplay^(0+128),w
  8715  22BC  3E0B               	addlw	11
  8716  22BD  00A0               	movwf	set_leds_bottom@x^(0+128)
  8717  22BE  3000               	movlw	0
  8718  22BF  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8719  22C0  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8720  22C1  31A2  22C4         	fcall	_set_leds_bottom
  8721  22C3  0008               	return
  8722  22C4                     __end_of_setPresetDisplay:	
  8723                           
  8724                           	psect	text14
  8725  2F9C                     __ptext14:	
  8726 ;; *************** function _setExpressionDisplay *****************
  8727 ;; Defined at:
  8728 ;;		line 66 in file "preset_programming.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;  ledChannel      1    wreg     unsigned char 
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  1    wreg      void 
  8735 ;; Registers used:
  8736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8743 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8744 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8745 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8746 ;;Total ram usage:        3 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    4
  8749 ;; This function calls:
  8750 ;;		_set_leds_bottom
  8751 ;;		_set_leds_top
  8752 ;; This function is called by:
  8753 ;;		_setPedalMode
  8754 ;;		_update_selectMode
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           
  8759                           ;psect for function _setExpressionDisplay
  8760  2F9C                     _setExpressionDisplay:	
  8761                           
  8762                           ;incstack = 0
  8763                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8764                           ;setExpressionDisplay@ledChannel stored from wreg
  8765  2F9C  0021               	movlb	1	; select bank1
  8766  2F9D  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8767                           
  8768                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8769  2F9E  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8770  2F9F  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8771  2FA0  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8772  2FA1  0824               	movf	??_setExpressionDisplay^(0+128),w
  8773  2FA2  00A0               	movwf	set_leds_top@x^(0+128)
  8774  2FA3  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8775  2FA4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8776  2FA5  3001               	movlw	1
  8777  2FA6  00A2               	movwf	set_leds_top@ledState^(0+128)
  8778  2FA7  3000               	movlw	0
  8779  2FA8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8780  2FA9  31A6  26C4  31AF   	fcall	_set_leds_top
  8781                           
  8782                           ;preset_programming.c: 68: set_leds_bottom(6);
  8783  2FAC  3006               	movlw	6
  8784  2FAD  0021               	movlb	1	; select bank1
  8785  2FAE  00A0               	movwf	set_leds_bottom@x^(0+128)
  8786  2FAF  3000               	movlw	0
  8787  2FB0  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8788  2FB1  31A2  22C4         	fcall	_set_leds_bottom
  8789  2FB3  0008               	return
  8790  2FB4                     __end_of_setExpressionDisplay:	
  8791                           
  8792                           	psect	text15
  8793  2FCC                     __ptext15:	
  8794 ;; *************** function _resetRingLEDs *****************
  8795 ;; Defined at:
  8796 ;;		line 61 in file "preset_programming.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;		None
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;		None
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8814 ;;Total ram usage:        0 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    4
  8817 ;; This function calls:
  8818 ;;		_set_leds_bottom
  8819 ;;		_set_leds_top
  8820 ;; This function is called by:
  8821 ;;		_update_mode
  8822 ;;		_setPedalMode
  8823 ;;		_setDoublePressState
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function _resetRingLEDs
  8829  2FCC                     _resetRingLEDs:	
  8830                           
  8831                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8832                           
  8833                           ;incstack = 0
  8834                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8835  2FCC  0020               	movlb	0	; select bank0
  8836  2FCD  0852               	movf	_top_push_state+1,w
  8837  2FCE  0021               	movlb	1	; select bank1
  8838  2FCF  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8839  2FD0  0020               	movlb	0	; select bank0
  8840  2FD1  0851               	movf	_top_push_state,w
  8841  2FD2  0021               	movlb	1	; select bank1
  8842  2FD3  00A0               	movwf	set_leds_top@x^(0+128)
  8843  2FD4  3001               	movlw	1
  8844  2FD5  00A2               	movwf	set_leds_top@ledState^(0+128)
  8845  2FD6  3000               	movlw	0
  8846  2FD7  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8847  2FD8  31A6  26C4  31AF   	fcall	_set_leds_top
  8848                           
  8849                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8850  2FDB  0020               	movlb	0	; select bank0
  8851  2FDC  084E               	movf	_bottom_push_state+1,w
  8852  2FDD  0021               	movlb	1	; select bank1
  8853  2FDE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8854  2FDF  0020               	movlb	0	; select bank0
  8855  2FE0  084D               	movf	_bottom_push_state,w
  8856  2FE1  0021               	movlb	1	; select bank1
  8857  2FE2  00A0               	movwf	set_leds_bottom@x^(0+128)
  8858  2FE3  31A2  22C4         	fcall	_set_leds_bottom
  8859  2FE5  0008               	return
  8860  2FE6                     __end_of_resetRingLEDs:	
  8861                           
  8862                           	psect	text16
  8863  0A36                     __ptext16:	
  8864 ;; *************** function _updateModulationArray *****************
  8865 ;; Defined at:
  8866 ;;		line 24 in file "modulation.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;		None
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  thisAngle       2   52[BANK2 ] int 
  8871 ;;  iAngle          1   54[BANK2 ] unsigned char 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      void 
  8874 ;; Registers used:
  8875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8882 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8883 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8884 ;;      Totals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8885 ;;Total ram usage:        7 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    7
  8888 ;; This function calls:
  8889 ;;		___awtoft
  8890 ;;		___wmul
  8891 ;;		_modSaw
  8892 ;;		_modSawRev
  8893 ;;		_modSin
  8894 ;;		_modSquare
  8895 ;;		_modTri
  8896 ;; This function is called by:
  8897 ;;		_main
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           
  8902                           ;psect for function _updateModulationArray
  8903  0A36                     _updateModulationArray:	
  8904                           
  8905                           ;modulation.c: 25: if (modArray[120] == bottom_push_state && modArray[121] == symmetry) 
      +                          {
  8906                           
  8907                           ;incstack = 0
  8908                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8909  0A36  307E               	movlw	126
  8910  0A37  0086               	movwf	6
  8911  0A38  3024               	movlw	36
  8912  0A39  0087               	movwf	7
  8913  0A3A  3F40               	moviw [0]fsr1
  8914  0A3B  0022               	movlb	2	; select bank2
  8915  0A3C  00D0               	movwf	??_updateModulationArray^(0+256)
  8916  0A3D  3F41               	moviw [1]fsr1
  8917  0A3E  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8918  0A3F  0020               	movlb	0	; select bank0
  8919  0A40  084E               	movf	_bottom_push_state+1,w
  8920  0A41  0022               	movlb	2	; select bank2
  8921  0A42  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8922  0A43  1D03               	skipz
  8923  0A44  2A49               	goto	u8925
  8924  0A45  0020               	movlb	0	; select bank0
  8925  0A46  084D               	movf	_bottom_push_state,w
  8926  0A47  0022               	movlb	2	; select bank2
  8927  0A48  0650               	xorwf	??_updateModulationArray^(0+256),w
  8928  0A49                     u8925:	
  8929  0A49  1D03               	skipz
  8930  0A4A  2A5F               	goto	l8493
  8931  0A4B  3080               	movlw	128
  8932  0A4C  0086               	movwf	6
  8933  0A4D  3024               	movlw	36
  8934  0A4E  0087               	movwf	7
  8935  0A4F  3F40               	moviw [0]fsr1
  8936  0A50  00D0               	movwf	??_updateModulationArray^(0+256)
  8937  0A51  3F41               	moviw [1]fsr1
  8938  0A52  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8939  0A53  0023               	movlb	3	; select bank3
  8940  0A54  0856               	movf	(_symmetry+1)^(0+384),w
  8941  0A55  0022               	movlb	2	; select bank2
  8942  0A56  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8943  0A57  1D03               	skipz
  8944  0A58  2A5D               	goto	u8935
  8945  0A59  0023               	movlb	3	; select bank3
  8946  0A5A  0855               	movf	_symmetry^(0+384),w
  8947  0A5B  0022               	movlb	2	; select bank2
  8948  0A5C  0650               	xorwf	??_updateModulationArray^(0+256),w
  8949  0A5D                     u8935:	
  8950  0A5D  1903               	btfsc	3,2
  8951  0A5E  0008               	return
  8952  0A5F                     l8493:	
  8953                           ;modulation.c: 27: return;
  8954                           
  8955                           
  8956                           ;modulation.c: 28: }
  8957                           ;modulation.c: 29: for (char iAngle = 0; iAngle < 60; iAngle++) {
  8958  0A5F  01D6               	clrf	updateModulationArray@iAngle^(0+256)
  8959  0A60  303C               	movlw	60
  8960  0A61  0256               	subwf	updateModulationArray@iAngle^(0+256),w
  8961  0A62  1803               	btfsc	3,0
  8962  0A63  2C0A               	goto	l8521
  8963  0A64                     l8499:	
  8964                           
  8965                           ;modulation.c: 30: int thisAngle = 6 * iAngle;
  8966  0A64  0856               	movf	updateModulationArray@iAngle^(0+256),w
  8967  0A65  00D0               	movwf	??_updateModulationArray^(0+256)
  8968  0A66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8969  0A67  0850               	movf	??_updateModulationArray^(0+256),w
  8970  0A68  00AE               	movwf	___wmul@multiplier^(0+256)
  8971  0A69  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8972  0A6A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  8973  0A6B  3006               	movlw	6
  8974  0A6C  00B0               	movwf	___wmul@multiplicand^(0+256)
  8975  0A6D  3000               	movlw	0
  8976  0A6E  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
  8977  0A6F  31A0  2002  318A   	fcall	___wmul
  8978  0A72  0022               	movlb	2	; select bank2
  8979  0A73  082F               	movf	(?___wmul+1)^(0+256),w
  8980  0A74  00D5               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  8981  0A75  082E               	movf	?___wmul^(0+256),w
  8982  0A76  00D4               	movwf	updateModulationArray@thisAngle^(0+256)
  8983                           
  8984                           ;modulation.c: 31: switch (bottom_push_state) {
  8985  0A77  2BEA               	goto	l8515
  8986  0A78                     l8501:	
  8987                           ;modulation.c: 32: case 1:
  8988                           
  8989                           
  8990                           ;modulation.c: 33: modArray[iAngle] = modSin(thisAngle, symmetry);
  8991  0A78  0022               	movlb	2	; select bank2
  8992  0A79  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8993  0A7A  0021               	movlb	1	; select bank1
  8994  0A7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8995  0A7C  0022               	movlb	2	; select bank2
  8996  0A7D  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  8997  0A7E  0021               	movlb	1	; select bank1
  8998  0A7F  00A8               	movwf	___awtoft@c^(0+128)
  8999  0A80  31A0  2097  318A   	fcall	___awtoft
  9000  0A83  0021               	movlb	1	; select bank1
  9001  0A84  0828               	movf	?___awtoft^(0+128),w
  9002  0A85  0022               	movlb	2	; select bank2
  9003  0A86  00B4               	movwf	modSin@angle^(0+256)
  9004  0A87  0021               	movlb	1	; select bank1
  9005  0A88  0829               	movf	(?___awtoft+1)^(0+128),w
  9006  0A89  0022               	movlb	2	; select bank2
  9007  0A8A  00B5               	movwf	(modSin@angle+1)^(0+256)
  9008  0A8B  0021               	movlb	1	; select bank1
  9009  0A8C  082A               	movf	(?___awtoft+2)^(0+128),w
  9010  0A8D  0022               	movlb	2	; select bank2
  9011  0A8E  00B6               	movwf	(modSin@angle+2)^(0+256)
  9012  0A8F  0023               	movlb	3	; select bank3
  9013  0A90  0856               	movf	(_symmetry+1)^(0+384),w
  9014  0A91  0021               	movlb	1	; select bank1
  9015  0A92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9016  0A93  0023               	movlb	3	; select bank3
  9017  0A94  0855               	movf	_symmetry^(0+384),w
  9018  0A95  0021               	movlb	1	; select bank1
  9019  0A96  00A8               	movwf	___awtoft@c^(0+128)
  9020  0A97  31A0  2097  318A   	fcall	___awtoft
  9021  0A9A  0021               	movlb	1	; select bank1
  9022  0A9B  0828               	movf	?___awtoft^(0+128),w
  9023  0A9C  0022               	movlb	2	; select bank2
  9024  0A9D  00B7               	movwf	modSin@inflection^(0+256)
  9025  0A9E  0021               	movlb	1	; select bank1
  9026  0A9F  0829               	movf	(?___awtoft+1)^(0+128),w
  9027  0AA0  0022               	movlb	2	; select bank2
  9028  0AA1  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9029  0AA2  0021               	movlb	1	; select bank1
  9030  0AA3  082A               	movf	(?___awtoft+2)^(0+128),w
  9031  0AA4  0022               	movlb	2	; select bank2
  9032  0AA5  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9033  0AA6  3196  2654  318A   	fcall	_modSin
  9034  0AA9  0022               	movlb	2	; select bank2
  9035  0AAA  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9036  0AAB  00D0               	movwf	??_updateModulationArray^(0+256)
  9037  0AAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9038  0AAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9039  0AAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9040  0AAF  308E               	movlw	142
  9041  0AB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9042  0AB1  3023               	movlw	35
  9043  0AB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9044  0AB3  0850               	movf	??_updateModulationArray^(0+256),w
  9045  0AB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9046  0AB5  0086               	movwf	6
  9047  0AB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9048  0AB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9049  0AB8  0087               	movwf	7
  9050  0AB9  0834               	movf	?_modSin^(0+256),w
  9051  0ABA  3FC0               	movwi [0]fsr1
  9052  0ABB  0835               	movf	(?_modSin+1)^(0+256),w
  9053  0ABC  3FC1               	movwi [1]fsr1
  9054                           
  9055                           ;modulation.c: 34: break;
  9056  0ABD  2C01               	goto	l8517
  9057  0ABE                     l8503:	
  9058                           ;modulation.c: 35: case 2:
  9059                           
  9060                           
  9061                           ;modulation.c: 36: modArray[iAngle] = modTri(thisAngle, symmetry);
  9062  0ABE  0022               	movlb	2	; select bank2
  9063  0ABF  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9064  0AC0  0021               	movlb	1	; select bank1
  9065  0AC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9066  0AC2  0022               	movlb	2	; select bank2
  9067  0AC3  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9068  0AC4  0021               	movlb	1	; select bank1
  9069  0AC5  00A8               	movwf	___awtoft@c^(0+128)
  9070  0AC6  31A0  2097  318A   	fcall	___awtoft
  9071  0AC9  0021               	movlb	1	; select bank1
  9072  0ACA  0828               	movf	?___awtoft^(0+128),w
  9073  0ACB  0022               	movlb	2	; select bank2
  9074  0ACC  00AE               	movwf	modTri@angle^(0+256)
  9075  0ACD  0021               	movlb	1	; select bank1
  9076  0ACE  0829               	movf	(?___awtoft+1)^(0+128),w
  9077  0ACF  0022               	movlb	2	; select bank2
  9078  0AD0  00AF               	movwf	(modTri@angle+1)^(0+256)
  9079  0AD1  0021               	movlb	1	; select bank1
  9080  0AD2  082A               	movf	(?___awtoft+2)^(0+128),w
  9081  0AD3  0022               	movlb	2	; select bank2
  9082  0AD4  00B0               	movwf	(modTri@angle+2)^(0+256)
  9083  0AD5  0023               	movlb	3	; select bank3
  9084  0AD6  0856               	movf	(_symmetry+1)^(0+384),w
  9085  0AD7  0021               	movlb	1	; select bank1
  9086  0AD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9087  0AD9  0023               	movlb	3	; select bank3
  9088  0ADA  0855               	movf	_symmetry^(0+384),w
  9089  0ADB  0021               	movlb	1	; select bank1
  9090  0ADC  00A8               	movwf	___awtoft@c^(0+128)
  9091  0ADD  31A0  2097  318A   	fcall	___awtoft
  9092  0AE0  0021               	movlb	1	; select bank1
  9093  0AE1  0828               	movf	?___awtoft^(0+128),w
  9094  0AE2  0022               	movlb	2	; select bank2
  9095  0AE3  00B1               	movwf	modTri@inflection^(0+256)
  9096  0AE4  0021               	movlb	1	; select bank1
  9097  0AE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9098  0AE6  0022               	movlb	2	; select bank2
  9099  0AE7  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9100  0AE8  0021               	movlb	1	; select bank1
  9101  0AE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9102  0AEA  0022               	movlb	2	; select bank2
  9103  0AEB  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9104  0AEC  318E  2605  318A   	fcall	_modTri
  9105  0AEF  0022               	movlb	2	; select bank2
  9106  0AF0  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9107  0AF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9108  0AF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9109  0AF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9110  0AF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9111  0AF5  308E               	movlw	142
  9112  0AF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9113  0AF7  3023               	movlw	35
  9114  0AF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9115  0AF9  0850               	movf	??_updateModulationArray^(0+256),w
  9116  0AFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9117  0AFB  0086               	movwf	6
  9118  0AFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9119  0AFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9120  0AFE  0087               	movwf	7
  9121  0AFF  082E               	movf	?_modTri^(0+256),w
  9122  0B00  3FC0               	movwi [0]fsr1
  9123  0B01  082F               	movf	(?_modTri+1)^(0+256),w
  9124  0B02  3FC1               	movwi [1]fsr1
  9125                           
  9126                           ;modulation.c: 37: break;
  9127  0B03  2C01               	goto	l8517
  9128  0B04                     l8505:	
  9129                           ;modulation.c: 38: case 3:
  9130                           
  9131                           
  9132                           ;modulation.c: 39: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9133  0B04  0022               	movlb	2	; select bank2
  9134  0B05  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9135  0B06  0021               	movlb	1	; select bank1
  9136  0B07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9137  0B08  0022               	movlb	2	; select bank2
  9138  0B09  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9139  0B0A  0021               	movlb	1	; select bank1
  9140  0B0B  00A8               	movwf	___awtoft@c^(0+128)
  9141  0B0C  31A0  2097  318A   	fcall	___awtoft
  9142  0B0F  0021               	movlb	1	; select bank1
  9143  0B10  0828               	movf	?___awtoft^(0+128),w
  9144  0B11  0022               	movlb	2	; select bank2
  9145  0B12  00C8               	movwf	modSquare@angle^(0+256)
  9146  0B13  0021               	movlb	1	; select bank1
  9147  0B14  0829               	movf	(?___awtoft+1)^(0+128),w
  9148  0B15  0022               	movlb	2	; select bank2
  9149  0B16  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9150  0B17  0021               	movlb	1	; select bank1
  9151  0B18  082A               	movf	(?___awtoft+2)^(0+128),w
  9152  0B19  0022               	movlb	2	; select bank2
  9153  0B1A  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9154  0B1B  0023               	movlb	3	; select bank3
  9155  0B1C  0856               	movf	(_symmetry+1)^(0+384),w
  9156  0B1D  0021               	movlb	1	; select bank1
  9157  0B1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9158  0B1F  0023               	movlb	3	; select bank3
  9159  0B20  0855               	movf	_symmetry^(0+384),w
  9160  0B21  0021               	movlb	1	; select bank1
  9161  0B22  00A8               	movwf	___awtoft@c^(0+128)
  9162  0B23  31A0  2097  318A   	fcall	___awtoft
  9163  0B26  0021               	movlb	1	; select bank1
  9164  0B27  0828               	movf	?___awtoft^(0+128),w
  9165  0B28  0022               	movlb	2	; select bank2
  9166  0B29  00CB               	movwf	modSquare@inflection^(0+256)
  9167  0B2A  0021               	movlb	1	; select bank1
  9168  0B2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9169  0B2C  0022               	movlb	2	; select bank2
  9170  0B2D  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9171  0B2E  0021               	movlb	1	; select bank1
  9172  0B2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9173  0B30  0022               	movlb	2	; select bank2
  9174  0B31  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9175  0B32  31A3  233B  318A   	fcall	_modSquare
  9176  0B35  0022               	movlb	2	; select bank2
  9177  0B36  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9178  0B37  00D0               	movwf	??_updateModulationArray^(0+256)
  9179  0B38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9180  0B39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9181  0B3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9182  0B3B  308E               	movlw	142
  9183  0B3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9184  0B3D  3023               	movlw	35
  9185  0B3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9186  0B3F  0850               	movf	??_updateModulationArray^(0+256),w
  9187  0B40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9188  0B41  0086               	movwf	6
  9189  0B42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9190  0B43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9191  0B44  0087               	movwf	7
  9192  0B45  0848               	movf	?_modSquare^(0+256),w
  9193  0B46  3FC0               	movwi [0]fsr1
  9194  0B47  0849               	movf	(?_modSquare+1)^(0+256),w
  9195  0B48  3FC1               	movwi [1]fsr1
  9196                           
  9197                           ;modulation.c: 40: break;
  9198  0B49  2C01               	goto	l8517
  9199  0B4A                     l8507:	
  9200                           ;modulation.c: 41: case 4:
  9201                           
  9202                           
  9203                           ;modulation.c: 42: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9204  0B4A  0022               	movlb	2	; select bank2
  9205  0B4B  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9206  0B4C  0021               	movlb	1	; select bank1
  9207  0B4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9208  0B4E  0022               	movlb	2	; select bank2
  9209  0B4F  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9210  0B50  0021               	movlb	1	; select bank1
  9211  0B51  00A8               	movwf	___awtoft@c^(0+128)
  9212  0B52  31A0  2097  318A   	fcall	___awtoft
  9213  0B55  0021               	movlb	1	; select bank1
  9214  0B56  0828               	movf	?___awtoft^(0+128),w
  9215  0B57  0022               	movlb	2	; select bank2
  9216  0B58  00C5               	movwf	modSawRev@angle^(0+256)
  9217  0B59  0021               	movlb	1	; select bank1
  9218  0B5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9219  0B5B  0022               	movlb	2	; select bank2
  9220  0B5C  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9221  0B5D  0021               	movlb	1	; select bank1
  9222  0B5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9223  0B5F  0022               	movlb	2	; select bank2
  9224  0B60  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9225  0B61  0023               	movlb	3	; select bank3
  9226  0B62  0856               	movf	(_symmetry+1)^(0+384),w
  9227  0B63  0021               	movlb	1	; select bank1
  9228  0B64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9229  0B65  0023               	movlb	3	; select bank3
  9230  0B66  0855               	movf	_symmetry^(0+384),w
  9231  0B67  0021               	movlb	1	; select bank1
  9232  0B68  00A8               	movwf	___awtoft@c^(0+128)
  9233  0B69  31A0  2097  318A   	fcall	___awtoft
  9234  0B6C  0021               	movlb	1	; select bank1
  9235  0B6D  0828               	movf	?___awtoft^(0+128),w
  9236  0B6E  0022               	movlb	2	; select bank2
  9237  0B6F  00C8               	movwf	modSawRev@inflection^(0+256)
  9238  0B70  0021               	movlb	1	; select bank1
  9239  0B71  0829               	movf	(?___awtoft+1)^(0+128),w
  9240  0B72  0022               	movlb	2	; select bank2
  9241  0B73  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9242  0B74  0021               	movlb	1	; select bank1
  9243  0B75  082A               	movf	(?___awtoft+2)^(0+128),w
  9244  0B76  0022               	movlb	2	; select bank2
  9245  0B77  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9246  0B78  31A0  203A  318A   	fcall	_modSawRev
  9247  0B7B  0022               	movlb	2	; select bank2
  9248  0B7C  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9249  0B7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9250  0B7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9251  0B7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9252  0B80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9253  0B81  308E               	movlw	142
  9254  0B82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9255  0B83  3023               	movlw	35
  9256  0B84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9257  0B85  0850               	movf	??_updateModulationArray^(0+256),w
  9258  0B86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9259  0B87  0086               	movwf	6
  9260  0B88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9261  0B89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9262  0B8A  0087               	movwf	7
  9263  0B8B  0845               	movf	?_modSawRev^(0+256),w
  9264  0B8C  3FC0               	movwi [0]fsr1
  9265  0B8D  0846               	movf	(?_modSawRev+1)^(0+256),w
  9266  0B8E  3FC1               	movwi [1]fsr1
  9267                           
  9268                           ;modulation.c: 43: break;
  9269  0B8F  2C01               	goto	l8517
  9270  0B90                     l8509:	
  9271                           ;modulation.c: 44: case 5:
  9272                           
  9273                           
  9274                           ;modulation.c: 45: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9275  0B90  0022               	movlb	2	; select bank2
  9276  0B91  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9277  0B92  0021               	movlb	1	; select bank1
  9278  0B93  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9279  0B94  0022               	movlb	2	; select bank2
  9280  0B95  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9281  0B96  0021               	movlb	1	; select bank1
  9282  0B97  00A8               	movwf	___awtoft@c^(0+128)
  9283  0B98  31A0  2097  318A   	fcall	___awtoft
  9284  0B9B  0021               	movlb	1	; select bank1
  9285  0B9C  0828               	movf	?___awtoft^(0+128),w
  9286  0B9D  0022               	movlb	2	; select bank2
  9287  0B9E  00AE               	movwf	modSaw@angle^(0+256)
  9288  0B9F  0021               	movlb	1	; select bank1
  9289  0BA0  0829               	movf	(?___awtoft+1)^(0+128),w
  9290  0BA1  0022               	movlb	2	; select bank2
  9291  0BA2  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9292  0BA3  0021               	movlb	1	; select bank1
  9293  0BA4  082A               	movf	(?___awtoft+2)^(0+128),w
  9294  0BA5  0022               	movlb	2	; select bank2
  9295  0BA6  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9296  0BA7  0023               	movlb	3	; select bank3
  9297  0BA8  0856               	movf	(_symmetry+1)^(0+384),w
  9298  0BA9  0021               	movlb	1	; select bank1
  9299  0BAA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9300  0BAB  0023               	movlb	3	; select bank3
  9301  0BAC  0855               	movf	_symmetry^(0+384),w
  9302  0BAD  0021               	movlb	1	; select bank1
  9303  0BAE  00A8               	movwf	___awtoft@c^(0+128)
  9304  0BAF  31A0  2097  318A   	fcall	___awtoft
  9305  0BB2  0021               	movlb	1	; select bank1
  9306  0BB3  0828               	movf	?___awtoft^(0+128),w
  9307  0BB4  0022               	movlb	2	; select bank2
  9308  0BB5  00B1               	movwf	modSaw@inflection^(0+256)
  9309  0BB6  0021               	movlb	1	; select bank1
  9310  0BB7  0829               	movf	(?___awtoft+1)^(0+128),w
  9311  0BB8  0022               	movlb	2	; select bank2
  9312  0BB9  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9313  0BBA  0021               	movlb	1	; select bank1
  9314  0BBB  082A               	movf	(?___awtoft+2)^(0+128),w
  9315  0BBC  0022               	movlb	2	; select bank2
  9316  0BBD  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9317  0BBE  3194  24AA  318A   	fcall	_modSaw
  9318  0BC1  0022               	movlb	2	; select bank2
  9319  0BC2  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9320  0BC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9321  0BC4  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9322  0BC5  35D0               	lslf	??_updateModulationArray^(0+256),f
  9323  0BC6  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9324  0BC7  308E               	movlw	142
  9325  0BC8  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9326  0BC9  3023               	movlw	35
  9327  0BCA  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9328  0BCB  0850               	movf	??_updateModulationArray^(0+256),w
  9329  0BCC  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9330  0BCD  0086               	movwf	6
  9331  0BCE  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9332  0BCF  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9333  0BD0  0087               	movwf	7
  9334  0BD1  082E               	movf	?_modSaw^(0+256),w
  9335  0BD2  3FC0               	movwi [0]fsr1
  9336  0BD3  082F               	movf	(?_modSaw+1)^(0+256),w
  9337  0BD4  3FC1               	movwi [1]fsr1
  9338                           
  9339                           ;modulation.c: 46: break;
  9340  0BD5  2C01               	goto	l8517
  9341  0BD6                     l8511:	
  9342                           ;modulation.c: 47: default:
  9343                           
  9344                           
  9345                           ;modulation.c: 48: modArray[iAngle] = 0;
  9346  0BD6  0022               	movlb	2	; select bank2
  9347  0BD7  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9348  0BD8  00D0               	movwf	??_updateModulationArray^(0+256)
  9349  0BD9  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9350  0BDA  35D0               	lslf	??_updateModulationArray^(0+256),f
  9351  0BDB  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9352  0BDC  308E               	movlw	142
  9353  0BDD  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9354  0BDE  3023               	movlw	35
  9355  0BDF  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9356  0BE0  0850               	movf	??_updateModulationArray^(0+256),w
  9357  0BE1  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9358  0BE2  0086               	movwf	6
  9359  0BE3  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9360  0BE4  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9361  0BE5  0087               	movwf	7
  9362  0BE6  3000               	movlw	0
  9363  0BE7  3FC0               	movwi [0]fsr1
  9364  0BE8  3FC1               	movwi [1]fsr1
  9365                           
  9366                           ;modulation.c: 50: }
  9367                           
  9368                           ;modulation.c: 49: break;
  9369  0BE9  2C01               	goto	l8517
  9370  0BEA                     l8515:	
  9371                           
  9372                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9373                           ; Switch size 1, requested type "space"
  9374                           ; Number of cases is 1, Range of values is 0 to 0
  9375                           ; switch strategies available:
  9376                           ; Name         Instructions Cycles
  9377                           ; simple_byte            4     3 (average)
  9378                           ; direct_byte            8     6 (fixed)
  9379                           ; jumptable            260     6 (fixed)
  9380                           ;	Chosen strategy is simple_byte
  9381  0BEA  0020               	movlb	0	; select bank0
  9382  0BEB  084E               	movf	_bottom_push_state+1,w
  9383  0BEC  3A00               	xorlw	0	; case 0
  9384  0BED  1903               	skipnz
  9385  0BEE  2BF0               	goto	l9449
  9386  0BEF  2BD6               	goto	l8511
  9387  0BF0                     l9449:	
  9388                           
  9389                           ; Switch size 1, requested type "space"
  9390                           ; Number of cases is 5, Range of values is 1 to 5
  9391                           ; switch strategies available:
  9392                           ; Name         Instructions Cycles
  9393                           ; simple_byte           16     9 (average)
  9394                           ; direct_byte           19     9 (fixed)
  9395                           ; jumptable            263     9 (fixed)
  9396                           ;	Chosen strategy is simple_byte
  9397  0BF0  084D               	movf	_bottom_push_state,w
  9398  0BF1  3A01               	xorlw	1	; case 1
  9399  0BF2  1903               	skipnz
  9400  0BF3  2A78               	goto	l8501
  9401  0BF4  3A03               	xorlw	3	; case 2
  9402  0BF5  1903               	skipnz
  9403  0BF6  2ABE               	goto	l8503
  9404  0BF7  3A01               	xorlw	1	; case 3
  9405  0BF8  1903               	skipnz
  9406  0BF9  2B04               	goto	l8505
  9407  0BFA  3A07               	xorlw	7	; case 4
  9408  0BFB  1903               	skipnz
  9409  0BFC  2B4A               	goto	l8507
  9410  0BFD  3A01               	xorlw	1	; case 5
  9411  0BFE  1903               	skipnz
  9412  0BFF  2B90               	goto	l8509
  9413  0C00  2BD6               	goto	l8511
  9414  0C01                     l8517:	
  9415  0C01  3001               	movlw	1
  9416  0C02  0022               	movlb	2	; select bank2
  9417  0C03  00D0               	movwf	??_updateModulationArray^(0+256)
  9418  0C04  0850               	movf	??_updateModulationArray^(0+256),w
  9419  0C05  07D6               	addwf	updateModulationArray@iAngle^(0+256),f
  9420  0C06  303C               	movlw	60
  9421  0C07  0256               	subwf	updateModulationArray@iAngle^(0+256),w
  9422  0C08  1C03               	skipc
  9423  0C09  2A64               	goto	l8499
  9424  0C0A                     l8521:	
  9425                           
  9426                           ;modulation.c: 51: }
  9427                           ;modulation.c: 52: modArray[120] = bottom_push_state;
  9428  0C0A  307E               	movlw	126
  9429  0C0B  0086               	movwf	6
  9430  0C0C  3024               	movlw	36
  9431  0C0D  0087               	movwf	7
  9432  0C0E  0020               	movlb	0	; select bank0
  9433  0C0F  084D               	movf	_bottom_push_state,w
  9434  0C10  3FC0               	movwi [0]fsr1
  9435  0C11  084E               	movf	_bottom_push_state+1,w
  9436  0C12  3FC1               	movwi [1]fsr1
  9437                           
  9438                           ;modulation.c: 53: modArray[121] = symmetry;
  9439  0C13  3080               	movlw	128
  9440  0C14  0086               	movwf	6
  9441  0C15  3024               	movlw	36
  9442  0C16  0087               	movwf	7
  9443  0C17  0023               	movlb	3	; select bank3
  9444  0C18  0855               	movf	_symmetry^(0+384),w
  9445  0C19  3FC0               	movwi [0]fsr1
  9446  0C1A  0856               	movf	(_symmetry+1)^(0+384),w
  9447  0C1B  3FC1               	movwi [1]fsr1
  9448  0C1C  0008               	return
  9449  0C1D                     __end_of_updateModulationArray:	
  9450                           
  9451                           	psect	text17
  9452  0E05                     __ptext17:	
  9453 ;; *************** function _modTri *****************
  9454 ;; Defined at:
  9455 ;;		line 72 in file "modulation.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;  angle           3   14[BANK2 ] void 
  9458 ;;  inflection      3   17[BANK2 ] void 
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;  tmpVal          3   29[BANK2 ] void 
  9461 ;;  period          3   26[BANK2 ] void 
  9462 ;;  shift           3   23[BANK2 ] void 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  2   14[BANK2 ] int 
  9465 ;; Registers used:
  9466 ;;		wreg, status,2, status,0, pclath, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9472 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9473 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9475 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9476 ;;Total ram usage:       18 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    5
  9479 ;; This function calls:
  9480 ;;		___ftadd
  9481 ;;		___ftdiv
  9482 ;;		___ftge
  9483 ;;		___ftmul
  9484 ;;		___ftneg
  9485 ;;		___fttol
  9486 ;; This function is called by:
  9487 ;;		_updateModulationArray
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _modTri
  9493  0E05                     _modTri:	
  9494                           
  9495                           ;modulation.c: 73: double period = 1.0;
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9499  0E05  3000               	movlw	0
  9500  0E06  0022               	movlb	2	; select bank2
  9501  0E07  00BA               	movwf	modTri@period^(0+256)
  9502  0E08  3080               	movlw	128
  9503  0E09  00BB               	movwf	(modTri@period+1)^(0+256)
  9504  0E0A  303F               	movlw	63
  9505  0E0B  00BC               	movwf	(modTri@period+2)^(0+256)
  9506                           
  9507                           ;modulation.c: 74: double shift = 0;
  9508  0E0C  3000               	movlw	0
  9509  0E0D  00B7               	movwf	modTri@shift^(0+256)
  9510  0E0E  3000               	movlw	0
  9511  0E0F  00B8               	movwf	(modTri@shift+1)^(0+256)
  9512  0E10  3000               	movlw	0
  9513  0E11  00B9               	movwf	(modTri@shift+2)^(0+256)
  9514                           
  9515                           ;modulation.c: 76: if(angle<=inflection) {
  9516  0E12  0831               	movf	modTri@inflection^(0+256),w
  9517  0E13  0021               	movlb	1	; select bank1
  9518  0E14  00A0               	movwf	___ftge@ff1^(0+128)
  9519  0E15  0022               	movlb	2	; select bank2
  9520  0E16  0832               	movf	(modTri@inflection+1)^(0+256),w
  9521  0E17  0021               	movlb	1	; select bank1
  9522  0E18  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9523  0E19  0022               	movlb	2	; select bank2
  9524  0E1A  0833               	movf	(modTri@inflection+2)^(0+256),w
  9525  0E1B  0021               	movlb	1	; select bank1
  9526  0E1C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9527  0E1D  0022               	movlb	2	; select bank2
  9528  0E1E  082E               	movf	modTri@angle^(0+256),w
  9529  0E1F  0021               	movlb	1	; select bank1
  9530  0E20  00A3               	movwf	___ftge@ff2^(0+128)
  9531  0E21  0022               	movlb	2	; select bank2
  9532  0E22  082F               	movf	(modTri@angle+1)^(0+256),w
  9533  0E23  0021               	movlb	1	; select bank1
  9534  0E24  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9535  0E25  0022               	movlb	2	; select bank2
  9536  0E26  0830               	movf	(modTri@angle+2)^(0+256),w
  9537  0E27  0021               	movlb	1	; select bank1
  9538  0E28  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9539  0E29  31A2  22FF  318E   	fcall	___ftge
  9540  0E2C  1C03               	btfss	3,0
  9541  0E2D  2E3A               	goto	l8321
  9542                           
  9543                           ;modulation.c: 77: period = 180.0/inflection;
  9544  0E2E  0022               	movlb	2	; select bank2
  9545  0E2F  0831               	movf	modTri@inflection^(0+256),w
  9546  0E30  0021               	movlb	1	; select bank1
  9547  0E31  00CE               	movwf	___ftdiv@f2^(0+128)
  9548  0E32  0022               	movlb	2	; select bank2
  9549  0E33  0832               	movf	(modTri@inflection+1)^(0+256),w
  9550  0E34  0021               	movlb	1	; select bank1
  9551  0E35  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9552  0E36  0022               	movlb	2	; select bank2
  9553  0E37  0833               	movf	(modTri@inflection+2)^(0+256),w
  9554  0E38  0021               	movlb	1	; select bank1
  9555  0E39  2EF5               	goto	L5
  9556  0E3A                     l8321:	
  9557                           ;modulation.c: 78: } else {
  9558                           
  9559                           
  9560                           ;modulation.c: 79: shift = -(360-inflection*2)*(180/(360-inflection));
  9561  0E3A  0022               	movlb	2	; select bank2
  9562  0E3B  0831               	movf	modTri@inflection^(0+256),w
  9563  0E3C  0021               	movlb	1	; select bank1
  9564  0E3D  00B1               	movwf	___ftmul@f2^(0+128)
  9565  0E3E  0022               	movlb	2	; select bank2
  9566  0E3F  0832               	movf	(modTri@inflection+1)^(0+256),w
  9567  0E40  0021               	movlb	1	; select bank1
  9568  0E41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9569  0E42  0022               	movlb	2	; select bank2
  9570  0E43  0833               	movf	(modTri@inflection+2)^(0+256),w
  9571  0E44  0021               	movlb	1	; select bank1
  9572  0E45  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9573  0E46  3000               	movlw	0
  9574  0E47  00AE               	movwf	___ftmul@f1^(0+128)
  9575  0E48  3000               	movlw	0
  9576  0E49  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9577  0E4A  3040               	movlw	64
  9578  0E4B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9579  0E4C  319E  2691  318E   	fcall	___ftmul
  9580  0E4F  0021               	movlb	1	; select bank1
  9581  0E50  082E               	movf	?___ftmul^(0+128),w
  9582  0E51  00BE               	movwf	___ftneg@f1^(0+128)
  9583  0E52  082F               	movf	(?___ftmul+1)^(0+128),w
  9584  0E53  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9585  0E54  0830               	movf	(?___ftmul+2)^(0+128),w
  9586  0E55  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9587  0E56  31AF  2732  318E   	fcall	___ftneg
  9588  0E59  0021               	movlb	1	; select bank1
  9589  0E5A  083E               	movf	?___ftneg^(0+128),w
  9590  0E5B  00C4               	movwf	___ftadd@f2^(0+128)
  9591  0E5C  083F               	movf	(?___ftneg+1)^(0+128),w
  9592  0E5D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9593  0E5E  0840               	movf	(?___ftneg+2)^(0+128),w
  9594  0E5F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9595  0E60  3000               	movlw	0
  9596  0E61  00C1               	movwf	___ftadd@f1^(0+128)
  9597  0E62  30B4               	movlw	180
  9598  0E63  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9599  0E64  3043               	movlw	67
  9600  0E65  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9601  0E66  3191  2135  318E   	fcall	___ftadd
  9602  0E69  0021               	movlb	1	; select bank1
  9603  0E6A  0841               	movf	?___ftadd^(0+128),w
  9604  0E6B  0022               	movlb	2	; select bank2
  9605  0E6C  00B4               	movwf	_modTri$2843^(0+256)
  9606  0E6D  0021               	movlb	1	; select bank1
  9607  0E6E  0842               	movf	(?___ftadd+1)^(0+128),w
  9608  0E6F  0022               	movlb	2	; select bank2
  9609  0E70  00B5               	movwf	(_modTri$2843+1)^(0+256)
  9610  0E71  0021               	movlb	1	; select bank1
  9611  0E72  0843               	movf	(?___ftadd+2)^(0+128),w
  9612  0E73  0022               	movlb	2	; select bank2
  9613  0E74  00B6               	movwf	(_modTri$2843+2)^(0+256)
  9614                           
  9615                           ;modulation.c: 79: shift = -(360-inflection*2)*(180/(360-inflection));
  9616  0E75  0834               	movf	_modTri$2843^(0+256),w
  9617  0E76  0021               	movlb	1	; select bank1
  9618  0E77  00BE               	movwf	___ftneg@f1^(0+128)
  9619  0E78  0022               	movlb	2	; select bank2
  9620  0E79  0835               	movf	(_modTri$2843+1)^(0+256),w
  9621  0E7A  0021               	movlb	1	; select bank1
  9622  0E7B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9623  0E7C  0022               	movlb	2	; select bank2
  9624  0E7D  0836               	movf	(_modTri$2843+2)^(0+256),w
  9625  0E7E  0021               	movlb	1	; select bank1
  9626  0E7F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9627  0E80  31AF  2732  318E   	fcall	___ftneg
  9628  0E83  0021               	movlb	1	; select bank1
  9629  0E84  083E               	movf	?___ftneg^(0+128),w
  9630  0E85  00AE               	movwf	___ftmul@f1^(0+128)
  9631  0E86  083F               	movf	(?___ftneg+1)^(0+128),w
  9632  0E87  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9633  0E88  0840               	movf	(?___ftneg+2)^(0+128),w
  9634  0E89  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9635  0E8A  3000               	movlw	0
  9636  0E8B  00C1               	movwf	___ftadd@f1^(0+128)
  9637  0E8C  30B4               	movlw	180
  9638  0E8D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9639  0E8E  3043               	movlw	67
  9640  0E8F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9641  0E90  0022               	movlb	2	; select bank2
  9642  0E91  0831               	movf	modTri@inflection^(0+256),w
  9643  0E92  0021               	movlb	1	; select bank1
  9644  0E93  00BE               	movwf	___ftneg@f1^(0+128)
  9645  0E94  0022               	movlb	2	; select bank2
  9646  0E95  0832               	movf	(modTri@inflection+1)^(0+256),w
  9647  0E96  0021               	movlb	1	; select bank1
  9648  0E97  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9649  0E98  0022               	movlb	2	; select bank2
  9650  0E99  0833               	movf	(modTri@inflection+2)^(0+256),w
  9651  0E9A  0021               	movlb	1	; select bank1
  9652  0E9B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9653  0E9C  31AF  2732  318E   	fcall	___ftneg
  9654  0E9F  0021               	movlb	1	; select bank1
  9655  0EA0  083E               	movf	?___ftneg^(0+128),w
  9656  0EA1  00C4               	movwf	___ftadd@f2^(0+128)
  9657  0EA2  083F               	movf	(?___ftneg+1)^(0+128),w
  9658  0EA3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9659  0EA4  0840               	movf	(?___ftneg+2)^(0+128),w
  9660  0EA5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9661  0EA6  3191  2135  318E   	fcall	___ftadd
  9662  0EA9  0021               	movlb	1	; select bank1
  9663  0EAA  0841               	movf	?___ftadd^(0+128),w
  9664  0EAB  00CE               	movwf	___ftdiv@f2^(0+128)
  9665  0EAC  0842               	movf	(?___ftadd+1)^(0+128),w
  9666  0EAD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9667  0EAE  0843               	movf	(?___ftadd+2)^(0+128),w
  9668  0EAF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9669  0EB0  3000               	movlw	0
  9670  0EB1  00D1               	movwf	___ftdiv@f1^(0+128)
  9671  0EB2  3034               	movlw	52
  9672  0EB3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9673  0EB4  3043               	movlw	67
  9674  0EB5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9675  0EB6  319D  253D  318E   	fcall	___ftdiv
  9676  0EB9  0021               	movlb	1	; select bank1
  9677  0EBA  084E               	movf	?___ftdiv^(0+128),w
  9678  0EBB  00B1               	movwf	___ftmul@f2^(0+128)
  9679  0EBC  084F               	movf	(?___ftdiv+1)^(0+128),w
  9680  0EBD  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9681  0EBE  0850               	movf	(?___ftdiv+2)^(0+128),w
  9682  0EBF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9683  0EC0  319E  2691  318E   	fcall	___ftmul
  9684  0EC3  0021               	movlb	1	; select bank1
  9685  0EC4  082E               	movf	?___ftmul^(0+128),w
  9686  0EC5  0022               	movlb	2	; select bank2
  9687  0EC6  00B7               	movwf	modTri@shift^(0+256)
  9688  0EC7  0021               	movlb	1	; select bank1
  9689  0EC8  082F               	movf	(?___ftmul+1)^(0+128),w
  9690  0EC9  0022               	movlb	2	; select bank2
  9691  0ECA  00B8               	movwf	(modTri@shift+1)^(0+256)
  9692  0ECB  0021               	movlb	1	; select bank1
  9693  0ECC  0830               	movf	(?___ftmul+2)^(0+128),w
  9694  0ECD  0022               	movlb	2	; select bank2
  9695  0ECE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9696                           
  9697                           ;modulation.c: 80: period = 180/(360-inflection);
  9698  0ECF  3000               	movlw	0
  9699  0ED0  0021               	movlb	1	; select bank1
  9700  0ED1  00C1               	movwf	___ftadd@f1^(0+128)
  9701  0ED2  30B4               	movlw	180
  9702  0ED3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9703  0ED4  3043               	movlw	67
  9704  0ED5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9705  0ED6  0022               	movlb	2	; select bank2
  9706  0ED7  0831               	movf	modTri@inflection^(0+256),w
  9707  0ED8  0021               	movlb	1	; select bank1
  9708  0ED9  00BE               	movwf	___ftneg@f1^(0+128)
  9709  0EDA  0022               	movlb	2	; select bank2
  9710  0EDB  0832               	movf	(modTri@inflection+1)^(0+256),w
  9711  0EDC  0021               	movlb	1	; select bank1
  9712  0EDD  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9713  0EDE  0022               	movlb	2	; select bank2
  9714  0EDF  0833               	movf	(modTri@inflection+2)^(0+256),w
  9715  0EE0  0021               	movlb	1	; select bank1
  9716  0EE1  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9717  0EE2  31AF  2732  318E   	fcall	___ftneg
  9718  0EE5  0021               	movlb	1	; select bank1
  9719  0EE6  083E               	movf	?___ftneg^(0+128),w
  9720  0EE7  00C4               	movwf	___ftadd@f2^(0+128)
  9721  0EE8  083F               	movf	(?___ftneg+1)^(0+128),w
  9722  0EE9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9723  0EEA  0840               	movf	(?___ftneg+2)^(0+128),w
  9724  0EEB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9725  0EEC  3191  2135  318E   	fcall	___ftadd
  9726  0EEF  0021               	movlb	1	; select bank1
  9727  0EF0  0841               	movf	?___ftadd^(0+128),w
  9728  0EF1  00CE               	movwf	___ftdiv@f2^(0+128)
  9729  0EF2  0842               	movf	(?___ftadd+1)^(0+128),w
  9730  0EF3  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9731  0EF4  0843               	movf	(?___ftadd+2)^(0+128),w
  9732  0EF5                     L5:	
  9733  0EF5  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9734  0EF6  3000               	movlw	0
  9735  0EF7  00D1               	movwf	___ftdiv@f1^(0+128)
  9736  0EF8  3034               	movlw	52
  9737  0EF9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9738  0EFA  3043               	movlw	67
  9739  0EFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9740  0EFC  319D  253D  318E   	fcall	___ftdiv
  9741  0EFF  0021               	movlb	1	; select bank1
  9742  0F00  084E               	movf	?___ftdiv^(0+128),w
  9743  0F01  0022               	movlb	2	; select bank2
  9744  0F02  00BA               	movwf	modTri@period^(0+256)
  9745  0F03  0021               	movlb	1	; select bank1
  9746  0F04  084F               	movf	(?___ftdiv+1)^(0+128),w
  9747  0F05  0022               	movlb	2	; select bank2
  9748  0F06  00BB               	movwf	(modTri@period+1)^(0+256)
  9749  0F07  0021               	movlb	1	; select bank1
  9750  0F08  0850               	movf	(?___ftdiv+2)^(0+128),w
  9751  0F09  0022               	movlb	2	; select bank2
  9752  0F0A  00BC               	movwf	(modTri@period+2)^(0+256)
  9753                           
  9754                           ;modulation.c: 82: }
  9755                           ;modulation.c: 83: double tmpVal = (period*angle-shift) ;
  9756  0F0B  0837               	movf	modTri@shift^(0+256),w
  9757  0F0C  0021               	movlb	1	; select bank1
  9758  0F0D  00BE               	movwf	___ftneg@f1^(0+128)
  9759  0F0E  0022               	movlb	2	; select bank2
  9760  0F0F  0838               	movf	(modTri@shift+1)^(0+256),w
  9761  0F10  0021               	movlb	1	; select bank1
  9762  0F11  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9763  0F12  0022               	movlb	2	; select bank2
  9764  0F13  0839               	movf	(modTri@shift+2)^(0+256),w
  9765  0F14  0021               	movlb	1	; select bank1
  9766  0F15  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9767  0F16  31AF  2732  318E   	fcall	___ftneg
  9768  0F19  0021               	movlb	1	; select bank1
  9769  0F1A  083E               	movf	?___ftneg^(0+128),w
  9770  0F1B  00C1               	movwf	___ftadd@f1^(0+128)
  9771  0F1C  083F               	movf	(?___ftneg+1)^(0+128),w
  9772  0F1D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9773  0F1E  0840               	movf	(?___ftneg+2)^(0+128),w
  9774  0F1F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9775  0F20  0022               	movlb	2	; select bank2
  9776  0F21  082E               	movf	modTri@angle^(0+256),w
  9777  0F22  0021               	movlb	1	; select bank1
  9778  0F23  00AE               	movwf	___ftmul@f1^(0+128)
  9779  0F24  0022               	movlb	2	; select bank2
  9780  0F25  082F               	movf	(modTri@angle+1)^(0+256),w
  9781  0F26  0021               	movlb	1	; select bank1
  9782  0F27  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9783  0F28  0022               	movlb	2	; select bank2
  9784  0F29  0830               	movf	(modTri@angle+2)^(0+256),w
  9785  0F2A  0021               	movlb	1	; select bank1
  9786  0F2B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9787  0F2C  0022               	movlb	2	; select bank2
  9788  0F2D  083A               	movf	modTri@period^(0+256),w
  9789  0F2E  0021               	movlb	1	; select bank1
  9790  0F2F  00B1               	movwf	___ftmul@f2^(0+128)
  9791  0F30  0022               	movlb	2	; select bank2
  9792  0F31  083B               	movf	(modTri@period+1)^(0+256),w
  9793  0F32  0021               	movlb	1	; select bank1
  9794  0F33  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9795  0F34  0022               	movlb	2	; select bank2
  9796  0F35  083C               	movf	(modTri@period+2)^(0+256),w
  9797  0F36  0021               	movlb	1	; select bank1
  9798  0F37  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9799  0F38  319E  2691  318E   	fcall	___ftmul
  9800  0F3B  0021               	movlb	1	; select bank1
  9801  0F3C  082E               	movf	?___ftmul^(0+128),w
  9802  0F3D  00C4               	movwf	___ftadd@f2^(0+128)
  9803  0F3E  082F               	movf	(?___ftmul+1)^(0+128),w
  9804  0F3F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9805  0F40  0830               	movf	(?___ftmul+2)^(0+128),w
  9806  0F41  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9807  0F42  3191  2135  318E   	fcall	___ftadd
  9808  0F45  0021               	movlb	1	; select bank1
  9809  0F46  0841               	movf	?___ftadd^(0+128),w
  9810  0F47  0022               	movlb	2	; select bank2
  9811  0F48  00BD               	movwf	modTri@tmpVal^(0+256)
  9812  0F49  0021               	movlb	1	; select bank1
  9813  0F4A  0842               	movf	(?___ftadd+1)^(0+128),w
  9814  0F4B  0022               	movlb	2	; select bank2
  9815  0F4C  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9816  0F4D  0021               	movlb	1	; select bank1
  9817  0F4E  0843               	movf	(?___ftadd+2)^(0+128),w
  9818  0F4F  0022               	movlb	2	; select bank2
  9819  0F50  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9820                           
  9821                           ;modulation.c: 84: if (tmpVal > 270) {
  9822  0F51  3000               	movlw	0
  9823  0F52  0021               	movlb	1	; select bank1
  9824  0F53  00A0               	movwf	___ftge@ff1^(0+128)
  9825  0F54  3087               	movlw	135
  9826  0F55  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9827  0F56  3043               	movlw	67
  9828  0F57  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9829  0F58  0022               	movlb	2	; select bank2
  9830  0F59  083D               	movf	modTri@tmpVal^(0+256),w
  9831  0F5A  0021               	movlb	1	; select bank1
  9832  0F5B  00A3               	movwf	___ftge@ff2^(0+128)
  9833  0F5C  0022               	movlb	2	; select bank2
  9834  0F5D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9835  0F5E  0021               	movlb	1	; select bank1
  9836  0F5F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9837  0F60  0022               	movlb	2	; select bank2
  9838  0F61  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9839  0F62  0021               	movlb	1	; select bank1
  9840  0F63  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9841  0F64  31A2  22FF  318E   	fcall	___ftge
  9842  0F67  1803               	btfsc	3,0
  9843  0F68  2F7C               	goto	l8325
  9844                           
  9845                           ;modulation.c: 85: tmpVal = tmpVal - 360.0;
  9846  0F69  3000               	movlw	0
  9847  0F6A  0021               	movlb	1	; select bank1
  9848  0F6B  00C1               	movwf	___ftadd@f1^(0+128)
  9849  0F6C  30B4               	movlw	180
  9850  0F6D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9851  0F6E  30C3               	movlw	195
  9852  0F6F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9853  0F70  0022               	movlb	2	; select bank2
  9854  0F71  083D               	movf	modTri@tmpVal^(0+256),w
  9855  0F72  0021               	movlb	1	; select bank1
  9856  0F73  00C4               	movwf	___ftadd@f2^(0+128)
  9857  0F74  0022               	movlb	2	; select bank2
  9858  0F75  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9859  0F76  0021               	movlb	1	; select bank1
  9860  0F77  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9861  0F78  0022               	movlb	2	; select bank2
  9862  0F79  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9863  0F7A  0021               	movlb	1	; select bank1
  9864  0F7B  2FB0               	goto	L7
  9865  0F7C                     l8325:	
  9866                           ;modulation.c: 86: } else if (tmpVal > 90) {
  9867                           
  9868  0F7C  3000               	movlw	0
  9869  0F7D  0021               	movlb	1	; select bank1
  9870  0F7E  00A0               	movwf	___ftge@ff1^(0+128)
  9871  0F7F  30B4               	movlw	180
  9872  0F80  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9873  0F81  3042               	movlw	66
  9874  0F82  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9875  0F83  0022               	movlb	2	; select bank2
  9876  0F84  083D               	movf	modTri@tmpVal^(0+256),w
  9877  0F85  0021               	movlb	1	; select bank1
  9878  0F86  00A3               	movwf	___ftge@ff2^(0+128)
  9879  0F87  0022               	movlb	2	; select bank2
  9880  0F88  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9881  0F89  0021               	movlb	1	; select bank1
  9882  0F8A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9883  0F8B  0022               	movlb	2	; select bank2
  9884  0F8C  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9885  0F8D  0021               	movlb	1	; select bank1
  9886  0F8E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9887  0F8F  31A2  22FF  318E   	fcall	___ftge
  9888  0F92  1803               	btfsc	3,0
  9889  0F93  2FC0               	goto	l1923
  9890                           
  9891                           ;modulation.c: 87: tmpVal = 180 - tmpVal;
  9892  0F94  3000               	movlw	0
  9893  0F95  0021               	movlb	1	; select bank1
  9894  0F96  00C1               	movwf	___ftadd@f1^(0+128)
  9895  0F97  3034               	movlw	52
  9896  0F98  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9897  0F99  3043               	movlw	67
  9898  0F9A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9899  0F9B  0022               	movlb	2	; select bank2
  9900  0F9C  083D               	movf	modTri@tmpVal^(0+256),w
  9901  0F9D  0021               	movlb	1	; select bank1
  9902  0F9E  00BE               	movwf	___ftneg@f1^(0+128)
  9903  0F9F  0022               	movlb	2	; select bank2
  9904  0FA0  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9905  0FA1  0021               	movlb	1	; select bank1
  9906  0FA2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9907  0FA3  0022               	movlb	2	; select bank2
  9908  0FA4  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9909  0FA5  0021               	movlb	1	; select bank1
  9910  0FA6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9911  0FA7  31AF  2732  318E   	fcall	___ftneg
  9912  0FAA  0021               	movlb	1	; select bank1
  9913  0FAB  083E               	movf	?___ftneg^(0+128),w
  9914  0FAC  00C4               	movwf	___ftadd@f2^(0+128)
  9915  0FAD  083F               	movf	(?___ftneg+1)^(0+128),w
  9916  0FAE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9917  0FAF  0840               	movf	(?___ftneg+2)^(0+128),w
  9918  0FB0                     L7:	
  9919  0FB0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9920  0FB1  3191  2135  318E   	fcall	___ftadd
  9921  0FB4  0021               	movlb	1	; select bank1
  9922  0FB5  0841               	movf	?___ftadd^(0+128),w
  9923  0FB6  0022               	movlb	2	; select bank2
  9924  0FB7  00BD               	movwf	modTri@tmpVal^(0+256)
  9925  0FB8  0021               	movlb	1	; select bank1
  9926  0FB9  0842               	movf	(?___ftadd+1)^(0+128),w
  9927  0FBA  0022               	movlb	2	; select bank2
  9928  0FBB  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9929  0FBC  0021               	movlb	1	; select bank1
  9930  0FBD  0843               	movf	(?___ftadd+2)^(0+128),w
  9931  0FBE  0022               	movlb	2	; select bank2
  9932  0FBF  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9933  0FC0                     l1923:	
  9934                           
  9935                           ;modulation.c: 88: }
  9936                           ;modulation.c: 89: tmpVal = tmpVal * 10/9;
  9937  0FC0  3000               	movlw	0
  9938  0FC1  0021               	movlb	1	; select bank1
  9939  0FC2  00CE               	movwf	___ftdiv@f2^(0+128)
  9940  0FC3  3010               	movlw	16
  9941  0FC4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9942  0FC5  3041               	movlw	65
  9943  0FC6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9944  0FC7  3000               	movlw	0
  9945  0FC8  00AE               	movwf	___ftmul@f1^(0+128)
  9946  0FC9  3020               	movlw	32
  9947  0FCA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9948  0FCB  3041               	movlw	65
  9949  0FCC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9950  0FCD  0022               	movlb	2	; select bank2
  9951  0FCE  083D               	movf	modTri@tmpVal^(0+256),w
  9952  0FCF  0021               	movlb	1	; select bank1
  9953  0FD0  00B1               	movwf	___ftmul@f2^(0+128)
  9954  0FD1  0022               	movlb	2	; select bank2
  9955  0FD2  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9956  0FD3  0021               	movlb	1	; select bank1
  9957  0FD4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9958  0FD5  0022               	movlb	2	; select bank2
  9959  0FD6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9960  0FD7  0021               	movlb	1	; select bank1
  9961  0FD8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9962  0FD9  319E  2691  318E   	fcall	___ftmul
  9963  0FDC  0021               	movlb	1	; select bank1
  9964  0FDD  082E               	movf	?___ftmul^(0+128),w
  9965  0FDE  00D1               	movwf	___ftdiv@f1^(0+128)
  9966  0FDF  082F               	movf	(?___ftmul+1)^(0+128),w
  9967  0FE0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9968  0FE1  0830               	movf	(?___ftmul+2)^(0+128),w
  9969  0FE2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9970  0FE3  319D  253D  318E   	fcall	___ftdiv
  9971  0FE6  0021               	movlb	1	; select bank1
  9972  0FE7  084E               	movf	?___ftdiv^(0+128),w
  9973  0FE8  0022               	movlb	2	; select bank2
  9974  0FE9  00BD               	movwf	modTri@tmpVal^(0+256)
  9975  0FEA  0021               	movlb	1	; select bank1
  9976  0FEB  084F               	movf	(?___ftdiv+1)^(0+128),w
  9977  0FEC  0022               	movlb	2	; select bank2
  9978  0FED  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9979  0FEE  0021               	movlb	1	; select bank1
  9980  0FEF  0850               	movf	(?___ftdiv+2)^(0+128),w
  9981  0FF0  0022               	movlb	2	; select bank2
  9982  0FF1  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9983                           
  9984                           ;modulation.c: 91: return (int)(tmpVal);
  9985  0FF2  083D               	movf	modTri@tmpVal^(0+256),w
  9986  0FF3  00A0               	movwf	___fttol@f1^(0+256)
  9987  0FF4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9988  0FF5  00A1               	movwf	(___fttol@f1+1)^(0+256)
  9989  0FF6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9990  0FF7  00A2               	movwf	(___fttol@f1+2)^(0+256)
  9991  0FF8  3199  21D5         	fcall	___fttol
  9992  0FFA  0022               	movlb	2	; select bank2
  9993  0FFB  0821               	movf	(?___fttol^(0+256)+1),w
  9994  0FFC  00AF               	movwf	(?_modTri+1)^(0+256)
  9995  0FFD  0820               	movf	?___fttol^(0+256),w
  9996  0FFE  00AE               	movwf	?_modTri^(0+256)
  9997  0FFF  0008               	return
  9998  1000                     __end_of_modTri:	
  9999                           
 10000                           	psect	text18
 10001  233B                     __ptext18:	
 10002 ;; *************** function _modSquare *****************
 10003 ;; Defined at:
 10004 ;;		line 117 in file "modulation.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;  angle           3   40[BANK2 ] int 
 10007 ;;  inflection      3   43[BANK2 ] int 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;  tmpVal          2   46[BANK2 ] int 
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  2   40[BANK2 ] int 
 10012 ;; Registers used:
 10013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10019 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10020 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10022 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10023 ;;Total ram usage:        8 bytes
 10024 ;; Hardware stack levels used:    1
 10025 ;; Hardware stack levels required when called:    6
 10026 ;; This function calls:
 10027 ;;		___ftge
 10028 ;;		_modSin
 10029 ;; This function is called by:
 10030 ;;		_updateModulationArray
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function _modSquare
 10036  233B                     _modSquare:	
 10037                           
 10038                           ;modulation.c: 118: int tmpVal = modSin(angle, inflection);
 10039                           
 10040                           ;incstack = 0
 10041                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10042  233B  0022               	movlb	2	; select bank2
 10043  233C  0848               	movf	modSquare@angle^(0+256),w
 10044  233D  00B4               	movwf	modSin@angle^(0+256)
 10045  233E  0849               	movf	(modSquare@angle+1)^(0+256),w
 10046  233F  00B5               	movwf	(modSin@angle+1)^(0+256)
 10047  2340  084A               	movf	(modSquare@angle+2)^(0+256),w
 10048  2341  00B6               	movwf	(modSin@angle+2)^(0+256)
 10049  2342  084B               	movf	modSquare@inflection^(0+256),w
 10050  2343  00B7               	movwf	modSin@inflection^(0+256)
 10051  2344  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10052  2345  00B8               	movwf	(modSin@inflection+1)^(0+256)
 10053  2346  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10054  2347  00B9               	movwf	(modSin@inflection+2)^(0+256)
 10055  2348  3196  2654  31A3   	fcall	_modSin
 10056  234B  0022               	movlb	2	; select bank2
 10057  234C  0835               	movf	(?_modSin+1)^(0+256),w
 10058  234D  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10059  234E  0834               	movf	?_modSin^(0+256),w
 10060  234F  00CE               	movwf	modSquare@tmpVal^(0+256)
 10061                           
 10062                           ;modulation.c: 120: return (angle <= inflection) ? 100 : -100;
 10063  2350  084B               	movf	modSquare@inflection^(0+256),w
 10064  2351  0021               	movlb	1	; select bank1
 10065  2352  00A0               	movwf	___ftge@ff1^(0+128)
 10066  2353  0022               	movlb	2	; select bank2
 10067  2354  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10068  2355  0021               	movlb	1	; select bank1
 10069  2356  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10070  2357  0022               	movlb	2	; select bank2
 10071  2358  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10072  2359  0021               	movlb	1	; select bank1
 10073  235A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10074  235B  0022               	movlb	2	; select bank2
 10075  235C  0848               	movf	modSquare@angle^(0+256),w
 10076  235D  0021               	movlb	1	; select bank1
 10077  235E  00A3               	movwf	___ftge@ff2^(0+128)
 10078  235F  0022               	movlb	2	; select bank2
 10079  2360  0849               	movf	(modSquare@angle+1)^(0+256),w
 10080  2361  0021               	movlb	1	; select bank1
 10081  2362  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10082  2363  0022               	movlb	2	; select bank2
 10083  2364  084A               	movf	(modSquare@angle+2)^(0+256),w
 10084  2365  0021               	movlb	1	; select bank1
 10085  2366  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10086  2367  31A2  22FF  31A3   	fcall	___ftge
 10087  236A  1803               	btfsc	3,0
 10088  236B  2B72               	goto	l8337
 10089  236C  309C               	movlw	156
 10090  236D  0022               	movlb	2	; select bank2
 10091  236E  00C8               	movwf	?_modSquare^(0+256)
 10092  236F  30FF               	movlw	255
 10093  2370  00C9               	movwf	(?_modSquare^(0+256)+1)
 10094  2371  0008               	return
 10095  2372                     l8337:	
 10096  2372  3064               	movlw	100
 10097  2373  0022               	movlb	2	; select bank2
 10098  2374  00C8               	movwf	?_modSquare^(0+256)
 10099  2375  3000               	movlw	0
 10100  2376  00C9               	movwf	(?_modSquare^(0+256)+1)
 10101  2377  0008               	return
 10102  2378                     __end_of_modSquare:	
 10103                           
 10104                           	psect	text19
 10105  1654                     __ptext19:	
 10106 ;; *************** function _modSin *****************
 10107 ;; Defined at:
 10108 ;;		line 56 in file "modulation.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;  angle           3   20[BANK2 ] int 
 10111 ;;  inflection      3   23[BANK2 ] int 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  tmpVal          3   37[BANK2 ] int 
 10114 ;;  period          3   34[BANK2 ] int 
 10115 ;;  shift           3   31[BANK2 ] int 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;                  2   20[BANK2 ] int 
 10118 ;; Registers used:
 10119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10125 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10126 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10127 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10128 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10129 ;;Total ram usage:       20 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    5
 10132 ;; This function calls:
 10133 ;;		___ftadd
 10134 ;;		___ftdiv
 10135 ;;		___ftge
 10136 ;;		___ftmul
 10137 ;;		___ftneg
 10138 ;;		___fttol
 10139 ;;		___wmul
 10140 ;; This function is called by:
 10141 ;;		_updateModulationArray
 10142 ;;		_modSquare
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function _modSin
 10148  1654                     _modSin:	
 10149                           
 10150                           ;modulation.c: 57: double period = 1.0;
 10151                           
 10152                           ;incstack = 0
 10153                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10154  1654  3000               	movlw	0
 10155  1655  0022               	movlb	2	; select bank2
 10156  1656  00C2               	movwf	modSin@period^(0+256)
 10157  1657  3080               	movlw	128
 10158  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10159  1659  303F               	movlw	63
 10160  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10161                           
 10162                           ;modulation.c: 58: double shift = 0.0;
 10163  165B  3000               	movlw	0
 10164  165C  00BF               	movwf	modSin@shift^(0+256)
 10165  165D  3000               	movlw	0
 10166  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10167  165F  3000               	movlw	0
 10168  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10169                           
 10170                           ;modulation.c: 60: if(angle<=inflection) {
 10171  1661  0837               	movf	modSin@inflection^(0+256),w
 10172  1662  0021               	movlb	1	; select bank1
 10173  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10174  1664  0022               	movlb	2	; select bank2
 10175  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10176  1666  0021               	movlb	1	; select bank1
 10177  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10178  1668  0022               	movlb	2	; select bank2
 10179  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10180  166A  0021               	movlb	1	; select bank1
 10181  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10182  166C  0022               	movlb	2	; select bank2
 10183  166D  0834               	movf	modSin@angle^(0+256),w
 10184  166E  0021               	movlb	1	; select bank1
 10185  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10186  1670  0022               	movlb	2	; select bank2
 10187  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10188  1672  0021               	movlb	1	; select bank1
 10189  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10190  1674  0022               	movlb	2	; select bank2
 10191  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10192  1676  0021               	movlb	1	; select bank1
 10193  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10194  1678  31A2  22FF  3196   	fcall	___ftge
 10195  167B  1C03               	btfss	3,0
 10196  167C  2E89               	goto	l8007
 10197                           
 10198                           ;modulation.c: 61: period = 180.0/inflection;
 10199  167D  0022               	movlb	2	; select bank2
 10200  167E  0837               	movf	modSin@inflection^(0+256),w
 10201  167F  0021               	movlb	1	; select bank1
 10202  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10203  1681  0022               	movlb	2	; select bank2
 10204  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10205  1683  0021               	movlb	1	; select bank1
 10206  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10207  1685  0022               	movlb	2	; select bank2
 10208  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10209  1687  0021               	movlb	1	; select bank1
 10210  1688  2F44               	goto	L8
 10211  1689                     l8007:	
 10212                           ;modulation.c: 62: } else {
 10213                           
 10214                           
 10215                           ;modulation.c: 63: shift = -(360-inflection*2)*(180/(360-inflection));
 10216  1689  0022               	movlb	2	; select bank2
 10217  168A  0837               	movf	modSin@inflection^(0+256),w
 10218  168B  0021               	movlb	1	; select bank1
 10219  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10220  168D  0022               	movlb	2	; select bank2
 10221  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10222  168F  0021               	movlb	1	; select bank1
 10223  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10224  1691  0022               	movlb	2	; select bank2
 10225  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10226  1693  0021               	movlb	1	; select bank1
 10227  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10228  1695  3000               	movlw	0
 10229  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10230  1697  3000               	movlw	0
 10231  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10232  1699  3040               	movlw	64
 10233  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10234  169B  319E  2691  3196   	fcall	___ftmul
 10235  169E  0021               	movlb	1	; select bank1
 10236  169F  082E               	movf	?___ftmul^(0+128),w
 10237  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10238  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10239  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10240  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10241  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10242  16A5  31AF  2732  3196   	fcall	___ftneg
 10243  16A8  0021               	movlb	1	; select bank1
 10244  16A9  083E               	movf	?___ftneg^(0+128),w
 10245  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10246  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10247  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10248  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10249  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10250  16AF  3000               	movlw	0
 10251  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10252  16B1  30B4               	movlw	180
 10253  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10254  16B3  3043               	movlw	67
 10255  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10256  16B5  3191  2135  3196   	fcall	___ftadd
 10257  16B8  0021               	movlb	1	; select bank1
 10258  16B9  0841               	movf	?___ftadd^(0+128),w
 10259  16BA  0022               	movlb	2	; select bank2
 10260  16BB  00BC               	movwf	_modSin$2842^(0+256)
 10261  16BC  0021               	movlb	1	; select bank1
 10262  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10263  16BE  0022               	movlb	2	; select bank2
 10264  16BF  00BD               	movwf	(_modSin$2842+1)^(0+256)
 10265  16C0  0021               	movlb	1	; select bank1
 10266  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10267  16C2  0022               	movlb	2	; select bank2
 10268  16C3  00BE               	movwf	(_modSin$2842+2)^(0+256)
 10269                           
 10270                           ;modulation.c: 63: shift = -(360-inflection*2)*(180/(360-inflection));
 10271  16C4  083C               	movf	_modSin$2842^(0+256),w
 10272  16C5  0021               	movlb	1	; select bank1
 10273  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10274  16C7  0022               	movlb	2	; select bank2
 10275  16C8  083D               	movf	(_modSin$2842+1)^(0+256),w
 10276  16C9  0021               	movlb	1	; select bank1
 10277  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10278  16CB  0022               	movlb	2	; select bank2
 10279  16CC  083E               	movf	(_modSin$2842+2)^(0+256),w
 10280  16CD  0021               	movlb	1	; select bank1
 10281  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10282  16CF  31AF  2732  3196   	fcall	___ftneg
 10283  16D2  0021               	movlb	1	; select bank1
 10284  16D3  083E               	movf	?___ftneg^(0+128),w
 10285  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10286  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10287  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10288  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10289  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10290  16D9  3000               	movlw	0
 10291  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10292  16DB  30B4               	movlw	180
 10293  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10294  16DD  3043               	movlw	67
 10295  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10296  16DF  0022               	movlb	2	; select bank2
 10297  16E0  0837               	movf	modSin@inflection^(0+256),w
 10298  16E1  0021               	movlb	1	; select bank1
 10299  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10300  16E3  0022               	movlb	2	; select bank2
 10301  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10302  16E5  0021               	movlb	1	; select bank1
 10303  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10304  16E7  0022               	movlb	2	; select bank2
 10305  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10306  16E9  0021               	movlb	1	; select bank1
 10307  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10308  16EB  31AF  2732  3196   	fcall	___ftneg
 10309  16EE  0021               	movlb	1	; select bank1
 10310  16EF  083E               	movf	?___ftneg^(0+128),w
 10311  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10312  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10313  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10314  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10315  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10316  16F5  3191  2135  3196   	fcall	___ftadd
 10317  16F8  0021               	movlb	1	; select bank1
 10318  16F9  0841               	movf	?___ftadd^(0+128),w
 10319  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10320  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10321  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10322  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10323  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10324  16FF  3000               	movlw	0
 10325  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10326  1701  3034               	movlw	52
 10327  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10328  1703  3043               	movlw	67
 10329  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10330  1705  319D  253D  3196   	fcall	___ftdiv
 10331  1708  0021               	movlb	1	; select bank1
 10332  1709  084E               	movf	?___ftdiv^(0+128),w
 10333  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10334  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10335  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10336  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10337  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10338  170F  319E  2691  3196   	fcall	___ftmul
 10339  1712  0021               	movlb	1	; select bank1
 10340  1713  082E               	movf	?___ftmul^(0+128),w
 10341  1714  0022               	movlb	2	; select bank2
 10342  1715  00BF               	movwf	modSin@shift^(0+256)
 10343  1716  0021               	movlb	1	; select bank1
 10344  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10345  1718  0022               	movlb	2	; select bank2
 10346  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10347  171A  0021               	movlb	1	; select bank1
 10348  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10349  171C  0022               	movlb	2	; select bank2
 10350  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10351                           
 10352                           ;modulation.c: 64: period = 180/(360-inflection);
 10353  171E  3000               	movlw	0
 10354  171F  0021               	movlb	1	; select bank1
 10355  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10356  1721  30B4               	movlw	180
 10357  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10358  1723  3043               	movlw	67
 10359  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10360  1725  0022               	movlb	2	; select bank2
 10361  1726  0837               	movf	modSin@inflection^(0+256),w
 10362  1727  0021               	movlb	1	; select bank1
 10363  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10364  1729  0022               	movlb	2	; select bank2
 10365  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10366  172B  0021               	movlb	1	; select bank1
 10367  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10368  172D  0022               	movlb	2	; select bank2
 10369  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10370  172F  0021               	movlb	1	; select bank1
 10371  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10372  1731  31AF  2732  3196   	fcall	___ftneg
 10373  1734  0021               	movlb	1	; select bank1
 10374  1735  083E               	movf	?___ftneg^(0+128),w
 10375  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10376  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10377  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10378  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10379  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10380  173B  3191  2135  3196   	fcall	___ftadd
 10381  173E  0021               	movlb	1	; select bank1
 10382  173F  0841               	movf	?___ftadd^(0+128),w
 10383  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10384  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10385  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10386  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10387  1744                     L8:	
 10388  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10389  1745  3000               	movlw	0
 10390  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10391  1747  3034               	movlw	52
 10392  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10393  1749  3043               	movlw	67
 10394  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10395  174B  319D  253D  3196   	fcall	___ftdiv
 10396  174E  0021               	movlb	1	; select bank1
 10397  174F  084E               	movf	?___ftdiv^(0+128),w
 10398  1750  0022               	movlb	2	; select bank2
 10399  1751  00C2               	movwf	modSin@period^(0+256)
 10400  1752  0021               	movlb	1	; select bank1
 10401  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10402  1754  0022               	movlb	2	; select bank2
 10403  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10404  1756  0021               	movlb	1	; select bank1
 10405  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10406  1758  0022               	movlb	2	; select bank2
 10407  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10408                           
 10409                           ;modulation.c: 66: }
 10410                           ;modulation.c: 67: double tmpVal = (period*angle-shift) /3;
 10411  175A  3000               	movlw	0
 10412  175B  0021               	movlb	1	; select bank1
 10413  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10414  175D  3040               	movlw	64
 10415  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10416  175F  3040               	movlw	64
 10417  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10418  1761  0022               	movlb	2	; select bank2
 10419  1762  083F               	movf	modSin@shift^(0+256),w
 10420  1763  0021               	movlb	1	; select bank1
 10421  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10422  1765  0022               	movlb	2	; select bank2
 10423  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10424  1767  0021               	movlb	1	; select bank1
 10425  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10426  1769  0022               	movlb	2	; select bank2
 10427  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10428  176B  0021               	movlb	1	; select bank1
 10429  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10430  176D  31AF  2732  3196   	fcall	___ftneg
 10431  1770  0021               	movlb	1	; select bank1
 10432  1771  083E               	movf	?___ftneg^(0+128),w
 10433  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10434  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10435  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10436  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10437  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10438  1777  0022               	movlb	2	; select bank2
 10439  1778  0834               	movf	modSin@angle^(0+256),w
 10440  1779  0021               	movlb	1	; select bank1
 10441  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10442  177B  0022               	movlb	2	; select bank2
 10443  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10444  177D  0021               	movlb	1	; select bank1
 10445  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10446  177F  0022               	movlb	2	; select bank2
 10447  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10448  1781  0021               	movlb	1	; select bank1
 10449  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10450  1783  0022               	movlb	2	; select bank2
 10451  1784  0842               	movf	modSin@period^(0+256),w
 10452  1785  0021               	movlb	1	; select bank1
 10453  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10454  1787  0022               	movlb	2	; select bank2
 10455  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10456  1789  0021               	movlb	1	; select bank1
 10457  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10458  178B  0022               	movlb	2	; select bank2
 10459  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10460  178D  0021               	movlb	1	; select bank1
 10461  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10462  178F  319E  2691  3196   	fcall	___ftmul
 10463  1792  0021               	movlb	1	; select bank1
 10464  1793  082E               	movf	?___ftmul^(0+128),w
 10465  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10466  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10467  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10468  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10469  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10470  1799  3191  2135  3196   	fcall	___ftadd
 10471  179C  0021               	movlb	1	; select bank1
 10472  179D  0841               	movf	?___ftadd^(0+128),w
 10473  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10474  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10475  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10476  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10477  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10478  17A3  319D  253D  3196   	fcall	___ftdiv
 10479  17A6  0021               	movlb	1	; select bank1
 10480  17A7  084E               	movf	?___ftdiv^(0+128),w
 10481  17A8  0022               	movlb	2	; select bank2
 10482  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10483  17AA  0021               	movlb	1	; select bank1
 10484  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10485  17AC  0022               	movlb	2	; select bank2
 10486  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10487  17AE  0021               	movlb	1	; select bank1
 10488  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10489  17B0  0022               	movlb	2	; select bank2
 10490  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10491                           
 10492                           ;modulation.c: 68: tmpVal = sinArray[(int)(tmpVal)];
 10493  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10494  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10495  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10496  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10497  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10498  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10499  17B8  3199  21D5  3196   	fcall	___fttol
 10500  17BB  0022               	movlb	2	; select bank2
 10501  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10502  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10503  17BE  0820               	movf	?___fttol^(0+256),w
 10504  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10505  17C0  3003               	movlw	3
 10506  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10507  17C2  3000               	movlw	0
 10508  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10509  17C4  31A0  2002  3196   	fcall	___wmul
 10510  17C7  3082               	movlw	130
 10511  17C8  0022               	movlb	2	; select bank2
 10512  17C9  00BA               	movwf	??_modSin^(0+256)
 10513  17CA  3024               	movlw	36
 10514  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10515  17CC  082E               	movf	?___wmul^(0+256),w
 10516  17CD  073A               	addwf	??_modSin^(0+256),w
 10517  17CE  0086               	movwf	6
 10518  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10519  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10520  17D1  0087               	movwf	7
 10521  17D2  3F40               	moviw [0]fsr1
 10522  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10523  17D4  3F41               	moviw [1]fsr1
 10524  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10525  17D6  3F42               	moviw [2]fsr1
 10526  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10527                           
 10528                           ;modulation.c: 69: return (int)(100.0 * tmpVal);
 10529  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10530  17D9  0021               	movlb	1	; select bank1
 10531  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10532  17DB  0022               	movlb	2	; select bank2
 10533  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10534  17DD  0021               	movlb	1	; select bank1
 10535  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10536  17DF  0022               	movlb	2	; select bank2
 10537  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10538  17E1  0021               	movlb	1	; select bank1
 10539  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10540  17E3  3000               	movlw	0
 10541  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10542  17E5  30C8               	movlw	200
 10543  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10544  17E7  3042               	movlw	66
 10545  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10546  17E9  319E  2691  3196   	fcall	___ftmul
 10547  17EC  0021               	movlb	1	; select bank1
 10548  17ED  082E               	movf	?___ftmul^(0+128),w
 10549  17EE  0022               	movlb	2	; select bank2
 10550  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10551  17F0  0021               	movlb	1	; select bank1
 10552  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10553  17F2  0022               	movlb	2	; select bank2
 10554  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10555  17F4  0021               	movlb	1	; select bank1
 10556  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10557  17F6  0022               	movlb	2	; select bank2
 10558  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10559  17F8  3199  21D5         	fcall	___fttol
 10560  17FA  0022               	movlb	2	; select bank2
 10561  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10562  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10563  17FD  0820               	movf	?___fttol^(0+256),w
 10564  17FE  00B4               	movwf	?_modSin^(0+256)
 10565  17FF  0008               	return
 10566  1800                     __end_of_modSin:	
 10567                           
 10568                           	psect	text20
 10569  203A                     __ptext20:	
 10570 ;; *************** function _modSawRev *****************
 10571 ;; Defined at:
 10572 ;;		line 111 in file "modulation.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  angle           3   37[BANK2 ] int 
 10575 ;;  inflection      3   40[BANK2 ] int 
 10576 ;; Auto vars:     Size  Location     Type
 10577 ;;		None
 10578 ;; Return value:  Size  Location     Type
 10579 ;;                  2   37[BANK2 ] int 
 10580 ;; Registers used:
 10581 ;;		wreg, status,2, status,0, pclath, cstack
 10582 ;; Tracked objects:
 10583 ;;		On entry : 0/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10587 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10589 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10590 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10591 ;;Total ram usage:        8 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; Hardware stack levels required when called:    6
 10594 ;; This function calls:
 10595 ;;		_modSaw
 10596 ;; This function is called by:
 10597 ;;		_updateModulationArray
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           
 10602                           ;psect for function _modSawRev
 10603  203A                     _modSawRev:	
 10604                           
 10605                           ;modulation.c: 112: return -1 * modSaw(angle, inflection);
 10606                           
 10607                           ;incstack = 0
 10608                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10609  203A  0022               	movlb	2	; select bank2
 10610  203B  0845               	movf	modSawRev@angle^(0+256),w
 10611  203C  00AE               	movwf	modSaw@angle^(0+256)
 10612  203D  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10613  203E  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10614  203F  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10615  2040  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10616  2041  0848               	movf	modSawRev@inflection^(0+256),w
 10617  2042  00B1               	movwf	modSaw@inflection^(0+256)
 10618  2043  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10619  2044  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10620  2045  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10621  2046  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10622  2047  3194  24AA         	fcall	_modSaw
 10623  2049  0022               	movlb	2	; select bank2
 10624  204A  092E               	comf	?_modSaw^(0+256),w
 10625  204B  00CB               	movwf	??_modSawRev^(0+256)
 10626  204C  092F               	comf	(?_modSaw+1)^(0+256),w
 10627  204D  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10628  204E  0ACB               	incf	??_modSawRev^(0+256),f
 10629  204F  1903               	skipnz
 10630  2050  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10631  2051  084B               	movf	??_modSawRev^(0+256),w
 10632  2052  00C5               	movwf	?_modSawRev^(0+256)
 10633  2053  084C               	movf	(??_modSawRev+1)^(0+256),w
 10634  2054  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10635  2055  0008               	return
 10636  2056                     __end_of_modSawRev:	
 10637                           
 10638                           	psect	text21
 10639  14AA                     __ptext21:	
 10640 ;; *************** function _modSaw *****************
 10641 ;; Defined at:
 10642 ;;		line 95 in file "modulation.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  angle           3   14[BANK2 ] int 
 10645 ;;  inflection      3   17[BANK2 ] int 
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  period          3   34[BANK2 ] int 
 10648 ;;  shift           3   31[BANK2 ] int 
 10649 ;;  mod             2   29[BANK2 ] int 
 10650 ;; Return value:  Size  Location     Type
 10651 ;;                  2   14[BANK2 ] int 
 10652 ;; Registers used:
 10653 ;;		wreg, status,2, status,0, pclath, cstack
 10654 ;; Tracked objects:
 10655 ;;		On entry : 0/0
 10656 ;;		On exit  : 0/0
 10657 ;;		Unchanged: 0/0
 10658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10659 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10660 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10662 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10663 ;;Total ram usage:       23 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; Hardware stack levels required when called:    5
 10666 ;; This function calls:
 10667 ;;		___ftadd
 10668 ;;		___ftdiv
 10669 ;;		___ftge
 10670 ;;		___ftmul
 10671 ;;		___ftneg
 10672 ;;		___fttol
 10673 ;; This function is called by:
 10674 ;;		_updateModulationArray
 10675 ;;		_modSawRev
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _modSaw
 10681  14AA                     _modSaw:	
 10682                           
 10683                           ;modulation.c: 96: double period = 1.0;
 10684                           
 10685                           ;incstack = 0
 10686                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10687  14AA  3000               	movlw	0
 10688  14AB  0022               	movlb	2	; select bank2
 10689  14AC  00C2               	movwf	modSaw@period^(0+256)
 10690  14AD  3080               	movlw	128
 10691  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10692  14AF  303F               	movlw	63
 10693  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10694                           
 10695                           ;modulation.c: 97: double shift = 0;
 10696  14B1  3000               	movlw	0
 10697  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10698  14B3  3000               	movlw	0
 10699  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10700  14B5  3000               	movlw	0
 10701  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10702                           
 10703                           ;modulation.c: 99: if(angle<=inflection) {
 10704  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10705  14B8  0021               	movlb	1	; select bank1
 10706  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10707  14BA  0022               	movlb	2	; select bank2
 10708  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10709  14BC  0021               	movlb	1	; select bank1
 10710  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10711  14BE  0022               	movlb	2	; select bank2
 10712  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10713  14C0  0021               	movlb	1	; select bank1
 10714  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10715  14C2  0022               	movlb	2	; select bank2
 10716  14C3  082E               	movf	modSaw@angle^(0+256),w
 10717  14C4  0021               	movlb	1	; select bank1
 10718  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10719  14C6  0022               	movlb	2	; select bank2
 10720  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10721  14C8  0021               	movlb	1	; select bank1
 10722  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10723  14CA  0022               	movlb	2	; select bank2
 10724  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10725  14CC  0021               	movlb	1	; select bank1
 10726  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10727  14CE  31A2  22FF  3194   	fcall	___ftge
 10728  14D1  1C03               	btfss	3,0
 10729  14D2  2CDF               	goto	l8021
 10730                           
 10731                           ;modulation.c: 100: period = 180.0/inflection;
 10732  14D3  0022               	movlb	2	; select bank2
 10733  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10734  14D5  0021               	movlb	1	; select bank1
 10735  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10736  14D7  0022               	movlb	2	; select bank2
 10737  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10738  14D9  0021               	movlb	1	; select bank1
 10739  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10740  14DB  0022               	movlb	2	; select bank2
 10741  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10742  14DD  0021               	movlb	1	; select bank1
 10743  14DE  2DBC               	goto	L9
 10744  14DF                     l8021:	
 10745                           ;modulation.c: 101: } else {
 10746                           
 10747                           
 10748                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10749  14DF  0022               	movlb	2	; select bank2
 10750  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10751  14E1  0021               	movlb	1	; select bank1
 10752  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10753  14E3  0022               	movlb	2	; select bank2
 10754  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10755  14E5  0021               	movlb	1	; select bank1
 10756  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10757  14E7  0022               	movlb	2	; select bank2
 10758  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10759  14E9  0021               	movlb	1	; select bank1
 10760  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10761  14EB  3000               	movlw	0
 10762  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10763  14ED  3000               	movlw	0
 10764  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10765  14EF  3040               	movlw	64
 10766  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10767  14F1  319E  2691  3194   	fcall	___ftmul
 10768  14F4  0021               	movlb	1	; select bank1
 10769  14F5  082E               	movf	?___ftmul^(0+128),w
 10770  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10771  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10772  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10773  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10774  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10775  14FB  31AF  2732  3194   	fcall	___ftneg
 10776  14FE  0021               	movlb	1	; select bank1
 10777  14FF  083E               	movf	?___ftneg^(0+128),w
 10778  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10779  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10780  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10781  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10782  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10783  1505  3000               	movlw	0
 10784  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10785  1507  30B4               	movlw	180
 10786  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10787  1509  3043               	movlw	67
 10788  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10789  150B  3191  2135  3194   	fcall	___ftadd
 10790  150E  0021               	movlb	1	; select bank1
 10791  150F  0841               	movf	?___ftadd^(0+128),w
 10792  1510  0022               	movlb	2	; select bank2
 10793  1511  00B4               	movwf	_modSaw$2844^(0+256)
 10794  1512  0021               	movlb	1	; select bank1
 10795  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10796  1514  0022               	movlb	2	; select bank2
 10797  1515  00B5               	movwf	(_modSaw$2844+1)^(0+256)
 10798  1516  0021               	movlb	1	; select bank1
 10799  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10800  1518  0022               	movlb	2	; select bank2
 10801  1519  00B6               	movwf	(_modSaw$2844+2)^(0+256)
 10802                           
 10803                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10804  151A  0834               	movf	_modSaw$2844^(0+256),w
 10805  151B  0021               	movlb	1	; select bank1
 10806  151C  00BE               	movwf	___ftneg@f1^(0+128)
 10807  151D  0022               	movlb	2	; select bank2
 10808  151E  0835               	movf	(_modSaw$2844+1)^(0+256),w
 10809  151F  0021               	movlb	1	; select bank1
 10810  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10811  1521  0022               	movlb	2	; select bank2
 10812  1522  0836               	movf	(_modSaw$2844+2)^(0+256),w
 10813  1523  0021               	movlb	1	; select bank1
 10814  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10815  1525  31AF  2732  3194   	fcall	___ftneg
 10816  1528  0021               	movlb	1	; select bank1
 10817  1529  083E               	movf	?___ftneg^(0+128),w
 10818  152A  00AE               	movwf	___ftmul@f1^(0+128)
 10819  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 10820  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10821  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 10822  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10823  152F  3000               	movlw	0
 10824  1530  00C1               	movwf	___ftadd@f1^(0+128)
 10825  1531  30B4               	movlw	180
 10826  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10827  1533  3043               	movlw	67
 10828  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10829  1535  0022               	movlb	2	; select bank2
 10830  1536  0831               	movf	modSaw@inflection^(0+256),w
 10831  1537  0021               	movlb	1	; select bank1
 10832  1538  00BE               	movwf	___ftneg@f1^(0+128)
 10833  1539  0022               	movlb	2	; select bank2
 10834  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10835  153B  0021               	movlb	1	; select bank1
 10836  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10837  153D  0022               	movlb	2	; select bank2
 10838  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10839  153F  0021               	movlb	1	; select bank1
 10840  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10841  1541  31AF  2732  3194   	fcall	___ftneg
 10842  1544  0021               	movlb	1	; select bank1
 10843  1545  083E               	movf	?___ftneg^(0+128),w
 10844  1546  00C4               	movwf	___ftadd@f2^(0+128)
 10845  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 10846  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10847  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 10848  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10849  154B  3191  2135  3194   	fcall	___ftadd
 10850  154E  0021               	movlb	1	; select bank1
 10851  154F  0841               	movf	?___ftadd^(0+128),w
 10852  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 10853  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 10854  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10855  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 10856  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10857  1555  3000               	movlw	0
 10858  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 10859  1557  3034               	movlw	52
 10860  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10861  1559  3043               	movlw	67
 10862  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10863  155B  319D  253D  3194   	fcall	___ftdiv
 10864  155E  0021               	movlb	1	; select bank1
 10865  155F  084E               	movf	?___ftdiv^(0+128),w
 10866  1560  00B1               	movwf	___ftmul@f2^(0+128)
 10867  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 10868  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10869  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 10870  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10871  1565  319E  2691  3194   	fcall	___ftmul
 10872  1568  0021               	movlb	1	; select bank1
 10873  1569  082E               	movf	?___ftmul^(0+128),w
 10874  156A  0022               	movlb	2	; select bank2
 10875  156B  00B7               	movwf	_modSaw$2845^(0+256)
 10876  156C  0021               	movlb	1	; select bank1
 10877  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 10878  156E  0022               	movlb	2	; select bank2
 10879  156F  00B8               	movwf	(_modSaw$2845+1)^(0+256)
 10880  1570  0021               	movlb	1	; select bank1
 10881  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 10882  1572  0022               	movlb	2	; select bank2
 10883  1573  00B9               	movwf	(_modSaw$2845+2)^(0+256)
 10884                           
 10885                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10886  1574  3000               	movlw	0
 10887  1575  0021               	movlb	1	; select bank1
 10888  1576  00C1               	movwf	___ftadd@f1^(0+128)
 10889  1577  30B4               	movlw	180
 10890  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10891  1579  3043               	movlw	67
 10892  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10893  157B  0022               	movlb	2	; select bank2
 10894  157C  0837               	movf	_modSaw$2845^(0+256),w
 10895  157D  0021               	movlb	1	; select bank1
 10896  157E  00C4               	movwf	___ftadd@f2^(0+128)
 10897  157F  0022               	movlb	2	; select bank2
 10898  1580  0838               	movf	(_modSaw$2845+1)^(0+256),w
 10899  1581  0021               	movlb	1	; select bank1
 10900  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10901  1583  0022               	movlb	2	; select bank2
 10902  1584  0839               	movf	(_modSaw$2845+2)^(0+256),w
 10903  1585  0021               	movlb	1	; select bank1
 10904  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10905  1587  3191  2135  3194   	fcall	___ftadd
 10906  158A  0021               	movlb	1	; select bank1
 10907  158B  0841               	movf	?___ftadd^(0+128),w
 10908  158C  0022               	movlb	2	; select bank2
 10909  158D  00BF               	movwf	modSaw@shift^(0+256)
 10910  158E  0021               	movlb	1	; select bank1
 10911  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 10912  1590  0022               	movlb	2	; select bank2
 10913  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10914  1592  0021               	movlb	1	; select bank1
 10915  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 10916  1594  0022               	movlb	2	; select bank2
 10917  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10918                           
 10919                           ;modulation.c: 103: period = 180/(360-inflection);
 10920  1596  3000               	movlw	0
 10921  1597  0021               	movlb	1	; select bank1
 10922  1598  00C1               	movwf	___ftadd@f1^(0+128)
 10923  1599  30B4               	movlw	180
 10924  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10925  159B  3043               	movlw	67
 10926  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10927  159D  0022               	movlb	2	; select bank2
 10928  159E  0831               	movf	modSaw@inflection^(0+256),w
 10929  159F  0021               	movlb	1	; select bank1
 10930  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 10931  15A1  0022               	movlb	2	; select bank2
 10932  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10933  15A3  0021               	movlb	1	; select bank1
 10934  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10935  15A5  0022               	movlb	2	; select bank2
 10936  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10937  15A7  0021               	movlb	1	; select bank1
 10938  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10939  15A9  31AF  2732  3194   	fcall	___ftneg
 10940  15AC  0021               	movlb	1	; select bank1
 10941  15AD  083E               	movf	?___ftneg^(0+128),w
 10942  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 10943  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 10944  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10945  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 10946  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10947  15B3  3191  2135  3194   	fcall	___ftadd
 10948  15B6  0021               	movlb	1	; select bank1
 10949  15B7  0841               	movf	?___ftadd^(0+128),w
 10950  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 10951  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 10952  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10953  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 10954  15BC                     L9:	
 10955  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10956  15BD  3000               	movlw	0
 10957  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 10958  15BF  3034               	movlw	52
 10959  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10960  15C1  3043               	movlw	67
 10961  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10962  15C3  319D  253D  3194   	fcall	___ftdiv
 10963  15C6  0021               	movlb	1	; select bank1
 10964  15C7  084E               	movf	?___ftdiv^(0+128),w
 10965  15C8  0022               	movlb	2	; select bank2
 10966  15C9  00C2               	movwf	modSaw@period^(0+256)
 10967  15CA  0021               	movlb	1	; select bank1
 10968  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10969  15CC  0022               	movlb	2	; select bank2
 10970  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 10971  15CE  0021               	movlb	1	; select bank1
 10972  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10973  15D0  0022               	movlb	2	; select bank2
 10974  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 10975                           
 10976                           ;modulation.c: 104: }
 10977                           ;modulation.c: 107: int mod = (int)((period*angle-shift)*5/9);
 10978  15D2  0842               	movf	modSaw@period^(0+256),w
 10979  15D3  0021               	movlb	1	; select bank1
 10980  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 10981  15D5  0022               	movlb	2	; select bank2
 10982  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 10983  15D7  0021               	movlb	1	; select bank1
 10984  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10985  15D9  0022               	movlb	2	; select bank2
 10986  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 10987  15DB  0021               	movlb	1	; select bank1
 10988  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10989  15DD  0022               	movlb	2	; select bank2
 10990  15DE  082E               	movf	modSaw@angle^(0+256),w
 10991  15DF  0021               	movlb	1	; select bank1
 10992  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 10993  15E1  0022               	movlb	2	; select bank2
 10994  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 10995  15E3  0021               	movlb	1	; select bank1
 10996  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10997  15E5  0022               	movlb	2	; select bank2
 10998  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 10999  15E7  0021               	movlb	1	; select bank1
 11000  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11001  15E9  319E  2691  3194   	fcall	___ftmul
 11002  15EC  0021               	movlb	1	; select bank1
 11003  15ED  082E               	movf	?___ftmul^(0+128),w
 11004  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 11005  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 11006  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11007  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 11008  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11009  15F3  0022               	movlb	2	; select bank2
 11010  15F4  083F               	movf	modSaw@shift^(0+256),w
 11011  15F5  0021               	movlb	1	; select bank1
 11012  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 11013  15F7  0022               	movlb	2	; select bank2
 11014  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 11015  15F9  0021               	movlb	1	; select bank1
 11016  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11017  15FB  0022               	movlb	2	; select bank2
 11018  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 11019  15FD  0021               	movlb	1	; select bank1
 11020  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11021  15FF  31AF  2732  3194   	fcall	___ftneg
 11022  1602  0021               	movlb	1	; select bank1
 11023  1603  083E               	movf	?___ftneg^(0+128),w
 11024  1604  00C1               	movwf	___ftadd@f1^(0+128)
 11025  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 11026  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11027  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 11028  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11029  1609  3191  2135  3194   	fcall	___ftadd
 11030  160C  0021               	movlb	1	; select bank1
 11031  160D  0841               	movf	?___ftadd^(0+128),w
 11032  160E  0022               	movlb	2	; select bank2
 11033  160F  00BA               	movwf	_modSaw$2846^(0+256)
 11034  1610  0021               	movlb	1	; select bank1
 11035  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 11036  1612  0022               	movlb	2	; select bank2
 11037  1613  00BB               	movwf	(_modSaw$2846+1)^(0+256)
 11038  1614  0021               	movlb	1	; select bank1
 11039  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 11040  1616  0022               	movlb	2	; select bank2
 11041  1617  00BC               	movwf	(_modSaw$2846+2)^(0+256)
 11042                           
 11043                           ;modulation.c: 104: }
 11044                           ;modulation.c: 107: int mod = (int)((period*angle-shift)*5/9);
 11045  1618  083A               	movf	_modSaw$2846^(0+256),w
 11046  1619  0021               	movlb	1	; select bank1
 11047  161A  00B1               	movwf	___ftmul@f2^(0+128)
 11048  161B  0022               	movlb	2	; select bank2
 11049  161C  083B               	movf	(_modSaw$2846+1)^(0+256),w
 11050  161D  0021               	movlb	1	; select bank1
 11051  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11052  161F  0022               	movlb	2	; select bank2
 11053  1620  083C               	movf	(_modSaw$2846+2)^(0+256),w
 11054  1621  0021               	movlb	1	; select bank1
 11055  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11056  1623  3000               	movlw	0
 11057  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11058  1625  30A0               	movlw	160
 11059  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11060  1627  3040               	movlw	64
 11061  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11062  1629  319E  2691  3194   	fcall	___ftmul
 11063  162C  0021               	movlb	1	; select bank1
 11064  162D  082E               	movf	?___ftmul^(0+128),w
 11065  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11066  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11067  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11068  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11069  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11070  1633  3000               	movlw	0
 11071  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11072  1635  3010               	movlw	16
 11073  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11074  1637  3041               	movlw	65
 11075  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11076  1639  319D  253D  3194   	fcall	___ftdiv
 11077  163C  0021               	movlb	1	; select bank1
 11078  163D  084E               	movf	?___ftdiv^(0+128),w
 11079  163E  0022               	movlb	2	; select bank2
 11080  163F  00A0               	movwf	___fttol@f1^(0+256)
 11081  1640  0021               	movlb	1	; select bank1
 11082  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11083  1642  0022               	movlb	2	; select bank2
 11084  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11085  1644  0021               	movlb	1	; select bank1
 11086  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11087  1646  0022               	movlb	2	; select bank2
 11088  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11089  1648  3199  21D5         	fcall	___fttol
 11090  164A  0022               	movlb	2	; select bank2
 11091  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11092  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11093  164D  0820               	movf	?___fttol^(0+256),w
 11094  164E  00BD               	movwf	modSaw@mod^(0+256)
 11095                           
 11096                           ;modulation.c: 108: return mod;
 11097  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 11098  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11099  1651  083D               	movf	modSaw@mod^(0+256),w
 11100  1652  00AE               	movwf	?_modSaw^(0+256)
 11101  1653  0008               	return
 11102  1654                     __end_of_modSaw:	
 11103                           
 11104                           	psect	text22
 11105  1F45                     __ptext22:	
 11106 ;; *************** function _set_subdivision *****************
 11107 ;; Defined at:
 11108 ;;		line 77 in file "user.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;  x               2   31[BANK2 ] int 
 11111 ;;  y               2   33[BANK2 ] int 
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;  scalar          3   38[BANK2 ] float 
 11114 ;;  tmpX            2   41[BANK2 ] int 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  2   31[BANK2 ] int 
 11117 ;; Registers used:
 11118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11124 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11125 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11126 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11127 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11128 ;;Total ram usage:       12 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    6
 11131 ;; This function calls:
 11132 ;;		___awtoft
 11133 ;;		___ftmul
 11134 ;;		___fttol
 11135 ;;		_trunc
 11136 ;; This function is called by:
 11137 ;;		_main
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           
 11142                           ;psect for function _set_subdivision
 11143  1F45                     _set_subdivision:	
 11144                           
 11145                           ;user.c: 81: adjust_sub_delay = 0;
 11146                           
 11147                           ;incstack = 0
 11148                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11149  1F45  0023               	movlb	3	; select bank3
 11150  1F46  01BC               	clrf	_adjust_sub_delay^(0+384)
 11151                           
 11152                           ;user.c: 82: int tmpX = x;
 11153  1F47  0022               	movlb	2	; select bank2
 11154  1F48  0840               	movf	(set_subdivision@x+1)^(0+256),w
 11155  1F49  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11156  1F4A  083F               	movf	set_subdivision@x^(0+256),w
 11157  1F4B  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11158                           
 11159                           ;user.c: 83: float scalar = 1.0;
 11160  1F4C  3000               	movlw	0
 11161  1F4D  00C6               	movwf	set_subdivision@scalar^(0+256)
 11162  1F4E  3080               	movlw	128
 11163  1F4F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11164  1F50  303F               	movlw	63
 11165  1F51  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11166                           
 11167                           ;user.c: 85: switch (y) {
 11168  1F52  2F6E               	goto	l8931
 11169  1F53                     l8919:	
 11170                           ;user.c: 86: case 1:
 11171                           
 11172                           
 11173                           ;user.c: 87: scalar = 2.0;
 11174  1F53  3000               	movlw	0
 11175  1F54  00C6               	movwf	set_subdivision@scalar^(0+256)
 11176  1F55  3000               	movlw	0
 11177  1F56  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11178  1F57  3040               	movlw	64
 11179  1F58  2F6C               	goto	L13
 11180  1F59                     l8921:	
 11181                           ;user.c: 89: case 2:
 11182                           
 11183                           ;user.c: 88: break;
 11184                           
 11185                           
 11186                           ;user.c: 90: scalar = 0.6666;
 11187  1F59  30A6               	movlw	166
 11188  1F5A  00C6               	movwf	set_subdivision@scalar^(0+256)
 11189  1F5B  302A               	movlw	42
 11190  1F5C  2F60               	goto	L15
 11191  1F5D                     l8923:	
 11192                           ;user.c: 92: case 3:
 11193                           
 11194                           ;user.c: 91: break;
 11195                           
 11196                           
 11197                           ;user.c: 93: scalar = .5;
 11198  1F5D  3000               	movlw	0
 11199  1F5E  00C6               	movwf	set_subdivision@scalar^(0+256)
 11200  1F5F  3000               	movlw	0
 11201  1F60                     L15:	
 11202  1F60  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11203  1F61  303F               	movlw	63
 11204  1F62  2F6C               	goto	L13
 11205  1F63                     l8925:	
 11206                           ;user.c: 95: case 4:
 11207                           
 11208                           ;user.c: 94: break;
 11209                           
 11210                           
 11211                           ;user.c: 96: scalar = 0.3333;
 11212  1F63  30A6               	movlw	166
 11213  1F64  00C6               	movwf	set_subdivision@scalar^(0+256)
 11214  1F65  30AA               	movlw	170
 11215  1F66  2F6A               	goto	L14
 11216  1F67                     l8927:	
 11217                           ;user.c: 98: case 5:
 11218                           
 11219                           ;user.c: 97: break;
 11220                           
 11221                           
 11222                           ;user.c: 99: scalar = 0.25;
 11223  1F67  3000               	movlw	0
 11224  1F68  00C6               	movwf	set_subdivision@scalar^(0+256)
 11225  1F69  3080               	movlw	128
 11226  1F6A                     L14:	
 11227  1F6A  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11228  1F6B  303E               	movlw	62
 11229  1F6C                     L13:	
 11230  1F6C  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11231                           
 11232                           ;user.c: 104: }
 11233                           
 11234                           ;user.c: 103: break;
 11235                           
 11236                           ;user.c: 101: case 6:
 11237                           
 11238                           ;user.c: 100: break;
 11239  1F6D  2F87               	goto	l8933
 11240  1F6E                     l8931:	
 11241                           
 11242                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11243                           ; Switch size 1, requested type "space"
 11244                           ; Number of cases is 1, Range of values is 0 to 0
 11245                           ; switch strategies available:
 11246                           ; Name         Instructions Cycles
 11247                           ; simple_byte            4     3 (average)
 11248                           ; direct_byte            8     6 (fixed)
 11249                           ; jumptable            260     6 (fixed)
 11250                           ;	Chosen strategy is simple_byte
 11251  1F6E  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11252  1F6F  3A00               	xorlw	0	; case 0
 11253  1F70  1903               	skipnz
 11254  1F71  2F73               	goto	l9451
 11255  1F72  2F87               	goto	l8933
 11256  1F73                     l9451:	
 11257                           
 11258                           ; Switch size 1, requested type "space"
 11259                           ; Number of cases is 6, Range of values is 1 to 6
 11260                           ; switch strategies available:
 11261                           ; Name         Instructions Cycles
 11262                           ; simple_byte           19    10 (average)
 11263                           ; direct_byte           21     9 (fixed)
 11264                           ; jumptable            263     9 (fixed)
 11265                           ;	Chosen strategy is simple_byte
 11266  1F73  0841               	movf	set_subdivision@y^(0+256),w
 11267  1F74  3A01               	xorlw	1	; case 1
 11268  1F75  1903               	skipnz
 11269  1F76  2F53               	goto	l8919
 11270  1F77  3A03               	xorlw	3	; case 2
 11271  1F78  1903               	skipnz
 11272  1F79  2F59               	goto	l8921
 11273  1F7A  3A01               	xorlw	1	; case 3
 11274  1F7B  1903               	skipnz
 11275  1F7C  2F5D               	goto	l8923
 11276  1F7D  3A07               	xorlw	7	; case 4
 11277  1F7E  1903               	skipnz
 11278  1F7F  2F63               	goto	l8925
 11279  1F80  3A01               	xorlw	1	; case 5
 11280  1F81  1903               	skipnz
 11281  1F82  2F67               	goto	l8927
 11282  1F83  3A03               	xorlw	3	; case 6
 11283  1F84  1903               	skipnz
 11284  1F85  2F87               	goto	l8933
 11285  1F86  2F87               	goto	l8933
 11286  1F87                     l8933:	
 11287                           
 11288                           ;user.c: 106: tmpX = tmpX * scalar;
 11289  1F87  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11290  1F88  0021               	movlb	1	; select bank1
 11291  1F89  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11292  1F8A  0022               	movlb	2	; select bank2
 11293  1F8B  0849               	movf	set_subdivision@tmpX^(0+256),w
 11294  1F8C  0021               	movlb	1	; select bank1
 11295  1F8D  00A8               	movwf	___awtoft@c^(0+128)
 11296  1F8E  31A0  2097  319F   	fcall	___awtoft
 11297  1F91  0021               	movlb	1	; select bank1
 11298  1F92  0828               	movf	?___awtoft^(0+128),w
 11299  1F93  00B1               	movwf	___ftmul@f2^(0+128)
 11300  1F94  0829               	movf	(?___awtoft+1)^(0+128),w
 11301  1F95  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11302  1F96  082A               	movf	(?___awtoft+2)^(0+128),w
 11303  1F97  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11304  1F98  0022               	movlb	2	; select bank2
 11305  1F99  0846               	movf	set_subdivision@scalar^(0+256),w
 11306  1F9A  0021               	movlb	1	; select bank1
 11307  1F9B  00AE               	movwf	___ftmul@f1^(0+128)
 11308  1F9C  0022               	movlb	2	; select bank2
 11309  1F9D  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11310  1F9E  0021               	movlb	1	; select bank1
 11311  1F9F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11312  1FA0  0022               	movlb	2	; select bank2
 11313  1FA1  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11314  1FA2  0021               	movlb	1	; select bank1
 11315  1FA3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11316  1FA4  319E  2691  319F   	fcall	___ftmul
 11317  1FA7  0021               	movlb	1	; select bank1
 11318  1FA8  082E               	movf	?___ftmul^(0+128),w
 11319  1FA9  0022               	movlb	2	; select bank2
 11320  1FAA  00A0               	movwf	___fttol@f1^(0+256)
 11321  1FAB  0021               	movlb	1	; select bank1
 11322  1FAC  082F               	movf	(?___ftmul+1)^(0+128),w
 11323  1FAD  0022               	movlb	2	; select bank2
 11324  1FAE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11325  1FAF  0021               	movlb	1	; select bank1
 11326  1FB0  0830               	movf	(?___ftmul+2)^(0+128),w
 11327  1FB1  0022               	movlb	2	; select bank2
 11328  1FB2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11329  1FB3  3199  21D5  319F   	fcall	___fttol
 11330  1FB6  0022               	movlb	2	; select bank2
 11331  1FB7  0821               	movf	(?___fttol^(0+256)+1),w
 11332  1FB8  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11333  1FB9  0820               	movf	?___fttol^(0+256),w
 11334  1FBA  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11335                           
 11336                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11337  1FBB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11338  1FBC  0021               	movlb	1	; select bank1
 11339  1FBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11340  1FBE  0022               	movlb	2	; select bank2
 11341  1FBF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11342  1FC0  0021               	movlb	1	; select bank1
 11343  1FC1  00A8               	movwf	___awtoft@c^(0+128)
 11344  1FC2  31A0  2097  319F   	fcall	___awtoft
 11345  1FC5  0021               	movlb	1	; select bank1
 11346  1FC6  0828               	movf	?___awtoft^(0+128),w
 11347  1FC7  0022               	movlb	2	; select bank2
 11348  1FC8  00B6               	movwf	trunc@x^(0+256)
 11349  1FC9  0021               	movlb	1	; select bank1
 11350  1FCA  0829               	movf	(?___awtoft+1)^(0+128),w
 11351  1FCB  0022               	movlb	2	; select bank2
 11352  1FCC  00B7               	movwf	(trunc@x+1)^(0+256)
 11353  1FCD  0021               	movlb	1	; select bank1
 11354  1FCE  082A               	movf	(?___awtoft+2)^(0+128),w
 11355  1FCF  0022               	movlb	2	; select bank2
 11356  1FD0  00B8               	movwf	(trunc@x+2)^(0+256)
 11357  1FD1  31A5  2543  319F   	fcall	_trunc
 11358  1FD4  0022               	movlb	2	; select bank2
 11359  1FD5  0836               	movf	?_trunc^(0+256),w
 11360  1FD6  00C3               	movwf	??_set_subdivision^(0+256)
 11361  1FD7  0837               	movf	(?_trunc+1)^(0+256),w
 11362  1FD8  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11363  1FD9  0838               	movf	(?_trunc+2)^(0+256),w
 11364  1FDA  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11365  1FDB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11366  1FDC  0021               	movlb	1	; select bank1
 11367  1FDD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11368  1FDE  0022               	movlb	2	; select bank2
 11369  1FDF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11370  1FE0  0021               	movlb	1	; select bank1
 11371  1FE1  00A8               	movwf	___awtoft@c^(0+128)
 11372  1FE2  31A0  2097  319F   	fcall	___awtoft
 11373  1FE5  0021               	movlb	1	; select bank1
 11374  1FE6  082A               	movf	(?___awtoft+2)^(0+128),w
 11375  1FE7  0022               	movlb	2	; select bank2
 11376  1FE8  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11377  1FE9  1D03               	skipz
 11378  1FEA  2FF5               	goto	u9785
 11379  1FEB  0021               	movlb	1	; select bank1
 11380  1FEC  0829               	movf	(?___awtoft+1)^(0+128),w
 11381  1FED  0022               	movlb	2	; select bank2
 11382  1FEE  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11383  1FEF  1D03               	skipz
 11384  1FF0  2FF5               	goto	u9785
 11385  1FF1  0021               	movlb	1	; select bank1
 11386  1FF2  0828               	movf	?___awtoft^(0+128),w
 11387  1FF3  0022               	movlb	2	; select bank2
 11388  1FF4  0643               	xorwf	??_set_subdivision^(0+256),w
 11389  1FF5                     u9785:	
 11390  1FF5  1903               	skipnz
 11391  1FF6  2FFA               	goto	l8939
 11392                           
 11393                           ;user.c: 109: adjust_sub_delay = 1;
 11394  1FF7  0023               	movlb	3	; select bank3
 11395  1FF8  01BC               	clrf	_adjust_sub_delay^(0+384)
 11396  1FF9  0ABC               	incf	_adjust_sub_delay^(0+384),f
 11397  1FFA                     l8939:	
 11398                           
 11399                           ;user.c: 110: }
 11400                           ;user.c: 112: return tmpX;
 11401  1FFA  0022               	movlb	2	; select bank2
 11402  1FFB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11403  1FFC  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11404  1FFD  0849               	movf	set_subdivision@tmpX^(0+256),w
 11405  1FFE  00BF               	movwf	?_set_subdivision^(0+256)
 11406  1FFF  0008               	return
 11407  2000                     __end_of_set_subdivision:	
 11408                           
 11409                           	psect	text23
 11410  2543                     __ptext23:	
 11411 ;; *************** function _trunc *****************
 11412 ;; Defined at:
 11413 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;  x               3   22[BANK2 ] int 
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;  i               3   26[BANK2 ] int 
 11418 ;;  expon           2   29[BANK2 ] int 
 11419 ;; Return value:  Size  Location     Type
 11420 ;;                  3   22[BANK2 ] int 
 11421 ;; Registers used:
 11422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11428 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11429 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11430 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11431 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11432 ;;Total ram usage:        9 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    5
 11435 ;; This function calls:
 11436 ;;		___altoft
 11437 ;;		___fttol
 11438 ;;		_frexp
 11439 ;; This function is called by:
 11440 ;;		_set_subdivision
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           
 11445                           ;psect for function _trunc
 11446  2543                     _trunc:	
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11450  2543  0022               	movlb	2	; select bank2
 11451  2544  0836               	movf	trunc@x^(0+256),w
 11452  2545  0021               	movlb	1	; select bank1
 11453  2546  00A0               	movwf	frexp@value^(0+128)
 11454  2547  0022               	movlb	2	; select bank2
 11455  2548  0837               	movf	(trunc@x+1)^(0+256),w
 11456  2549  0021               	movlb	1	; select bank1
 11457  254A  00A1               	movwf	(frexp@value+1)^(0+128)
 11458  254B  0022               	movlb	2	; select bank2
 11459  254C  0838               	movf	(trunc@x+2)^(0+256),w
 11460  254D  0021               	movlb	1	; select bank1
 11461  254E  00A2               	movwf	(frexp@value+2)^(0+128)
 11462  254F  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11463  2550  0022               	movlb	2	; select bank2
 11464  2551  00B9               	movwf	??_trunc^(0+256)
 11465  2552  0839               	movf	??_trunc^(0+256),w
 11466  2553  0021               	movlb	1	; select bank1
 11467  2554  00A3               	movwf	frexp@eptr^(0+128)
 11468  2555  31A3  23B6  31A5   	fcall	_frexp
 11469  2558  0022               	movlb	2	; select bank2
 11470  2559  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11471  255A  2D62               	goto	l8149
 11472  255B  3000               	movlw	0
 11473  255C  00B6               	movwf	?_trunc^(0+256)
 11474  255D  3000               	movlw	0
 11475  255E  00B7               	movwf	(?_trunc+1)^(0+256)
 11476  255F  3000               	movlw	0
 11477  2560  00B8               	movwf	(?_trunc+2)^(0+256)
 11478  2561  0008               	return
 11479  2562                     l8149:	
 11480  2562  3000               	movlw	0
 11481  2563  023E               	subwf	(trunc@expon+1)^(0+256),w
 11482  2564  3015               	movlw	21
 11483  2565  1903               	skipnz
 11484  2566  023D               	subwf	trunc@expon^(0+256),w
 11485  2567  1803               	btfsc	3,0
 11486  2568  0008               	return
 11487  2569  0836               	movf	trunc@x^(0+256),w
 11488  256A  00A0               	movwf	___fttol@f1^(0+256)
 11489  256B  0837               	movf	(trunc@x+1)^(0+256),w
 11490  256C  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11491  256D  0838               	movf	(trunc@x+2)^(0+256),w
 11492  256E  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11493  256F  3199  21D5  31A5   	fcall	___fttol
 11494  2572  0022               	movlb	2	; select bank2
 11495  2573  0823               	movf	(?___fttol+3)^(0+256),w
 11496  2574  00B1               	movwf	(___altoft@c+3)^(0+256)
 11497  2575  0822               	movf	(?___fttol+2)^(0+256),w
 11498  2576  00B0               	movwf	(___altoft@c+2)^(0+256)
 11499  2577  0821               	movf	(?___fttol+1)^(0+256),w
 11500  2578  00AF               	movwf	(___altoft@c+1)^(0+256)
 11501  2579  0820               	movf	?___fttol^(0+256),w
 11502  257A  00AE               	movwf	___altoft@c^(0+256)
 11503  257B  3198  2001         	fcall	___altoft
 11504  257D  0022               	movlb	2	; select bank2
 11505  257E  082E               	movf	?___altoft^(0+256),w
 11506  257F  00BA               	movwf	trunc@i^(0+256)
 11507  2580  082F               	movf	(?___altoft+1)^(0+256),w
 11508  2581  00BB               	movwf	(trunc@i+1)^(0+256)
 11509  2582  0830               	movf	(?___altoft+2)^(0+256),w
 11510  2583  00BC               	movwf	(trunc@i+2)^(0+256)
 11511  2584  083A               	movf	trunc@i^(0+256),w
 11512  2585  00B6               	movwf	?_trunc^(0+256)
 11513  2586  083B               	movf	(trunc@i+1)^(0+256),w
 11514  2587  00B7               	movwf	(?_trunc+1)^(0+256)
 11515  2588  083C               	movf	(trunc@i+2)^(0+256),w
 11516  2589  00B8               	movwf	(?_trunc+2)^(0+256)
 11517  258A  0008               	return
 11518  258B                     __end_of_trunc:	
 11519                           
 11520                           	psect	text24
 11521  1DE6                     __ptext24:	
 11522 ;; *************** function _scaleiA10kPot *****************
 11523 ;; Defined at:
 11524 ;;		line 211 in file "user.c"
 11525 ;; Parameters:    Size  Location     Type
 11526 ;;  input           3   71[BANK2 ] int 
 11527 ;; Auto vars:     Size  Location     Type
 11528 ;;  pwm             3    0[BANK3 ] float 
 11529 ;; Return value:  Size  Location     Type
 11530 ;;                  2   71[BANK2 ] int 
 11531 ;; Registers used:
 11532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11533 ;; Tracked objects:
 11534 ;;		On entry : 0/0
 11535 ;;		On exit  : 0/0
 11536 ;;		Unchanged: 0/0
 11537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11538 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11539 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11541 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11542 ;;Total ram usage:       12 bytes
 11543 ;; Hardware stack levels used:    1
 11544 ;; Hardware stack levels required when called:    8
 11545 ;; This function calls:
 11546 ;;		___ftadd
 11547 ;;		___ftdiv
 11548 ;;		___ftmul
 11549 ;;		___ftneg
 11550 ;;		___fttol
 11551 ;;		_pow
 11552 ;; This function is called by:
 11553 ;;		_main
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           
 11558                           ;psect for function _scaleiA10kPot
 11559  1DE6                     _scaleiA10kPot:	
 11560                           
 11561                           ;user.c: 214: if (input == 0.0) {return 0;}
 11562                           
 11563                           ;incstack = 0
 11564                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11565  1DE6  0022               	movlb	2	; select bank2
 11566  1DE7  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11567  1DE8  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11568  1DE9  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11569  1DEA  1D03               	skipz
 11570  1DEB  2DEF               	goto	l8879
 11571  1DEC  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11572  1DED  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11573  1DEE  0008               	return
 11574  1DEF                     l8879:	
 11575                           
 11576                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11577  1DEF  30C0               	movlw	192
 11578  1DF0  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11579  1DF1  307F               	movlw	127
 11580  1DF2  1903               	skipnz
 11581  1DF3  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11582  1DF4  3044               	movlw	68
 11583  1DF5  1903               	skipnz
 11584  1DF6  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11585  1DF7  1D03               	btfss	3,2
 11586  1DF8  2DFE               	goto	l8885
 11587  1DF9  30FF               	movlw	255
 11588  1DFA  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11589  1DFB  3000               	movlw	0
 11590  1DFC  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11591  1DFD  0008               	return
 11592  1DFE                     l8885:	
 11593                           
 11594                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11595  1DFE  3000               	movlw	0
 11596  1DFF  0021               	movlb	1	; select bank1
 11597  1E00  00C1               	movwf	___ftadd@f1^(0+128)
 11598  1E01  3080               	movlw	128
 11599  1E02  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11600  1E03  303F               	movlw	63
 11601  1E04  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11602  1E05  0022               	movlb	2	; select bank2
 11603  1E06  0867               	movf	scaleiA10kPot@input^(0+256),w
 11604  1E07  0021               	movlb	1	; select bank1
 11605  1E08  00D1               	movwf	___ftdiv@f1^(0+128)
 11606  1E09  0022               	movlb	2	; select bank2
 11607  1E0A  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11608  1E0B  0021               	movlb	1	; select bank1
 11609  1E0C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11610  1E0D  0022               	movlb	2	; select bank2
 11611  1E0E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11612  1E0F  0021               	movlb	1	; select bank1
 11613  1E10  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11614  1E11  30C0               	movlw	192
 11615  1E12  00CE               	movwf	___ftdiv@f2^(0+128)
 11616  1E13  307F               	movlw	127
 11617  1E14  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11618  1E15  3044               	movlw	68
 11619  1E16  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11620  1E17  319D  253D  319D   	fcall	___ftdiv
 11621  1E1A  0021               	movlb	1	; select bank1
 11622  1E1B  084E               	movf	?___ftdiv^(0+128),w
 11623  1E1C  00BE               	movwf	___ftneg@f1^(0+128)
 11624  1E1D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11625  1E1E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11626  1E1F  0850               	movf	(?___ftdiv+2)^(0+128),w
 11627  1E20  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11628  1E21  31AF  2732  319D   	fcall	___ftneg
 11629  1E24  0021               	movlb	1	; select bank1
 11630  1E25  083E               	movf	?___ftneg^(0+128),w
 11631  1E26  00C4               	movwf	___ftadd@f2^(0+128)
 11632  1E27  083F               	movf	(?___ftneg+1)^(0+128),w
 11633  1E28  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11634  1E29  0840               	movf	(?___ftneg+2)^(0+128),w
 11635  1E2A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11636  1E2B  3191  2135  319D   	fcall	___ftadd
 11637  1E2E  0021               	movlb	1	; select bank1
 11638  1E2F  0841               	movf	?___ftadd^(0+128),w
 11639  1E30  0023               	movlb	3	; select bank3
 11640  1E31  00E4               	movwf	_scaleiA10kPot$2840^(0+384)
 11641  1E32  0021               	movlb	1	; select bank1
 11642  1E33  0842               	movf	(?___ftadd+1)^(0+128),w
 11643  1E34  0023               	movlb	3	; select bank3
 11644  1E35  00E5               	movwf	(_scaleiA10kPot$2840+1)^(0+384)
 11645  1E36  0021               	movlb	1	; select bank1
 11646  1E37  0843               	movf	(?___ftadd+2)^(0+128),w
 11647  1E38  0023               	movlb	3	; select bank3
 11648  1E39  00E6               	movwf	(_scaleiA10kPot$2840+2)^(0+384)
 11649                           
 11650                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11651  1E3A  306A               	movlw	106
 11652  1E3B  0022               	movlb	2	; select bank2
 11653  1E3C  00D8               	movwf	pow@y^(0+256)
 11654  1E3D  309C               	movlw	156
 11655  1E3E  00D9               	movwf	(pow@y+1)^(0+256)
 11656  1E3F  30BF               	movlw	191
 11657  1E40  00DA               	movwf	(pow@y+2)^(0+256)
 11658  1E41  0023               	movlb	3	; select bank3
 11659  1E42  0864               	movf	_scaleiA10kPot$2840^(0+384),w
 11660  1E43  0022               	movlb	2	; select bank2
 11661  1E44  00D5               	movwf	pow@x^(0+256)
 11662  1E45  0023               	movlb	3	; select bank3
 11663  1E46  0865               	movf	(_scaleiA10kPot$2840+1)^(0+384),w
 11664  1E47  0022               	movlb	2	; select bank2
 11665  1E48  00D6               	movwf	(pow@x+1)^(0+256)
 11666  1E49  0023               	movlb	3	; select bank3
 11667  1E4A  0866               	movf	(_scaleiA10kPot$2840+2)^(0+384),w
 11668  1E4B  0022               	movlb	2	; select bank2
 11669  1E4C  00D7               	movwf	(pow@x+2)^(0+256)
 11670  1E4D  3186  26E4  319D   	fcall	_pow
 11671  1E50  0022               	movlb	2	; select bank2
 11672  1E51  0855               	movf	?_pow^(0+256),w
 11673  1E52  0023               	movlb	3	; select bank3
 11674  1E53  00E7               	movwf	_scaleiA10kPot$2841^(0+384)
 11675  1E54  0022               	movlb	2	; select bank2
 11676  1E55  0856               	movf	(?_pow+1)^(0+256),w
 11677  1E56  0023               	movlb	3	; select bank3
 11678  1E57  00E8               	movwf	(_scaleiA10kPot$2841+1)^(0+384)
 11679  1E58  0022               	movlb	2	; select bank2
 11680  1E59  0857               	movf	(?_pow+2)^(0+256),w
 11681  1E5A  0023               	movlb	3	; select bank3
 11682  1E5B  00E9               	movwf	(_scaleiA10kPot$2841+2)^(0+384)
 11683                           
 11684                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11685  1E5C  30E3               	movlw	227
 11686  1E5D  0021               	movlb	1	; select bank1
 11687  1E5E  00AE               	movwf	___ftmul@f1^(0+128)
 11688  1E5F  300B               	movlw	11
 11689  1E60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11690  1E61  3041               	movlw	65
 11691  1E62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11692  1E63  0023               	movlb	3	; select bank3
 11693  1E64  0867               	movf	_scaleiA10kPot$2841^(0+384),w
 11694  1E65  0021               	movlb	1	; select bank1
 11695  1E66  00B1               	movwf	___ftmul@f2^(0+128)
 11696  1E67  0023               	movlb	3	; select bank3
 11697  1E68  0868               	movf	(_scaleiA10kPot$2841+1)^(0+384),w
 11698  1E69  0021               	movlb	1	; select bank1
 11699  1E6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11700  1E6B  0023               	movlb	3	; select bank3
 11701  1E6C  0869               	movf	(_scaleiA10kPot$2841+2)^(0+384),w
 11702  1E6D  0021               	movlb	1	; select bank1
 11703  1E6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11704  1E6F  319E  2691  319D   	fcall	___ftmul
 11705  1E72  0021               	movlb	1	; select bank1
 11706  1E73  082E               	movf	?___ftmul^(0+128),w
 11707  1E74  0023               	movlb	3	; select bank3
 11708  1E75  00E1               	movwf	scaleiA10kPot@pwm^(0+384)
 11709  1E76  0021               	movlb	1	; select bank1
 11710  1E77  082F               	movf	(?___ftmul+1)^(0+128),w
 11711  1E78  0023               	movlb	3	; select bank3
 11712  1E79  00E2               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11713  1E7A  0021               	movlb	1	; select bank1
 11714  1E7B  0830               	movf	(?___ftmul+2)^(0+128),w
 11715  1E7C  0023               	movlb	3	; select bank3
 11716  1E7D  00E3               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11717                           
 11718                           ;user.c: 219: return (int)(pwm);
 11719  1E7E  0861               	movf	scaleiA10kPot@pwm^(0+384),w
 11720  1E7F  0022               	movlb	2	; select bank2
 11721  1E80  00A0               	movwf	___fttol@f1^(0+256)
 11722  1E81  0023               	movlb	3	; select bank3
 11723  1E82  0862               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11724  1E83  0022               	movlb	2	; select bank2
 11725  1E84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11726  1E85  0023               	movlb	3	; select bank3
 11727  1E86  0863               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11728  1E87  0022               	movlb	2	; select bank2
 11729  1E88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11730  1E89  3199  21D5         	fcall	___fttol
 11731  1E8B  0022               	movlb	2	; select bank2
 11732  1E8C  0821               	movf	(?___fttol^(0+256)+1),w
 11733  1E8D  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11734  1E8E  0820               	movf	?___fttol^(0+256),w
 11735  1E8F  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11736  1E90  0008               	return
 11737  1E91                     __end_of_scaleiA10kPot:	
 11738                           
 11739                           	psect	text25
 11740  1B6E                     __ptext25:	
 11741 ;; *************** function _scaleA10kPot *****************
 11742 ;; Defined at:
 11743 ;;		line 202 in file "user.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;  input           3   71[BANK2 ] int 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  pwm             3    0[BANK3 ] float 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  2   71[BANK2 ] int 
 11750 ;; Registers used:
 11751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11757 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11758 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11760 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11761 ;;Total ram usage:       12 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    8
 11764 ;; This function calls:
 11765 ;;		___ftdiv
 11766 ;;		___ftmul
 11767 ;;		___fttol
 11768 ;;		_pow
 11769 ;; This function is called by:
 11770 ;;		_main
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           
 11775                           ;psect for function _scaleA10kPot
 11776  1B6E                     _scaleA10kPot:	
 11777                           
 11778                           ;user.c: 204: if (input == 0.0) {return 255;}
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11782  1B6E  0022               	movlb	2	; select bank2
 11783  1B6F  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11784  1B70  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11785  1B71  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11786  1B72  1D03               	skipz
 11787  1B73  2B79               	goto	l8857
 11788  1B74  30FF               	movlw	255
 11789  1B75  00E7               	movwf	?_scaleA10kPot^(0+256)
 11790  1B76  3000               	movlw	0
 11791  1B77  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11792  1B78  0008               	return
 11793  1B79                     l8857:	
 11794                           
 11795                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11796  1B79  30C0               	movlw	192
 11797  1B7A  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11798  1B7B  307F               	movlw	127
 11799  1B7C  1903               	skipnz
 11800  1B7D  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11801  1B7E  3044               	movlw	68
 11802  1B7F  1903               	skipnz
 11803  1B80  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11804  1B81  1D03               	btfss	3,2
 11805  1B82  2B86               	goto	l8863
 11806  1B83  01E7               	clrf	?_scaleA10kPot^(0+256)
 11807  1B84  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11808  1B85  0008               	return
 11809  1B86                     l8863:	
 11810                           
 11811                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11812  1B86  30C0               	movlw	192
 11813  1B87  0021               	movlb	1	; select bank1
 11814  1B88  00CE               	movwf	___ftdiv@f2^(0+128)
 11815  1B89  307F               	movlw	127
 11816  1B8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11817  1B8B  3044               	movlw	68
 11818  1B8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11819  1B8D  0022               	movlb	2	; select bank2
 11820  1B8E  0867               	movf	scaleA10kPot@input^(0+256),w
 11821  1B8F  0021               	movlb	1	; select bank1
 11822  1B90  00D1               	movwf	___ftdiv@f1^(0+128)
 11823  1B91  0022               	movlb	2	; select bank2
 11824  1B92  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 11825  1B93  0021               	movlb	1	; select bank1
 11826  1B94  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11827  1B95  0022               	movlb	2	; select bank2
 11828  1B96  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11829  1B97  0021               	movlb	1	; select bank1
 11830  1B98  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11831  1B99  319D  253D  319B   	fcall	___ftdiv
 11832  1B9C  0021               	movlb	1	; select bank1
 11833  1B9D  084E               	movf	?___ftdiv^(0+128),w
 11834  1B9E  0023               	movlb	3	; select bank3
 11835  1B9F  00E4               	movwf	_scaleA10kPot$2838^(0+384)
 11836  1BA0  0021               	movlb	1	; select bank1
 11837  1BA1  084F               	movf	(?___ftdiv+1)^(0+128),w
 11838  1BA2  0023               	movlb	3	; select bank3
 11839  1BA3  00E5               	movwf	(_scaleA10kPot$2838+1)^(0+384)
 11840  1BA4  0021               	movlb	1	; select bank1
 11841  1BA5  0850               	movf	(?___ftdiv+2)^(0+128),w
 11842  1BA6  0023               	movlb	3	; select bank3
 11843  1BA7  00E6               	movwf	(_scaleA10kPot$2838+2)^(0+384)
 11844                           
 11845                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11846  1BA8  306A               	movlw	106
 11847  1BA9  0022               	movlb	2	; select bank2
 11848  1BAA  00D8               	movwf	pow@y^(0+256)
 11849  1BAB  309C               	movlw	156
 11850  1BAC  00D9               	movwf	(pow@y+1)^(0+256)
 11851  1BAD  30BF               	movlw	191
 11852  1BAE  00DA               	movwf	(pow@y+2)^(0+256)
 11853  1BAF  0023               	movlb	3	; select bank3
 11854  1BB0  0864               	movf	_scaleA10kPot$2838^(0+384),w
 11855  1BB1  0022               	movlb	2	; select bank2
 11856  1BB2  00D5               	movwf	pow@x^(0+256)
 11857  1BB3  0023               	movlb	3	; select bank3
 11858  1BB4  0865               	movf	(_scaleA10kPot$2838+1)^(0+384),w
 11859  1BB5  0022               	movlb	2	; select bank2
 11860  1BB6  00D6               	movwf	(pow@x+1)^(0+256)
 11861  1BB7  0023               	movlb	3	; select bank3
 11862  1BB8  0866               	movf	(_scaleA10kPot$2838+2)^(0+384),w
 11863  1BB9  0022               	movlb	2	; select bank2
 11864  1BBA  00D7               	movwf	(pow@x+2)^(0+256)
 11865  1BBB  3186  26E4  319B   	fcall	_pow
 11866  1BBE  0022               	movlb	2	; select bank2
 11867  1BBF  0855               	movf	?_pow^(0+256),w
 11868  1BC0  0023               	movlb	3	; select bank3
 11869  1BC1  00E7               	movwf	_scaleA10kPot$2839^(0+384)
 11870  1BC2  0022               	movlb	2	; select bank2
 11871  1BC3  0856               	movf	(?_pow+1)^(0+256),w
 11872  1BC4  0023               	movlb	3	; select bank3
 11873  1BC5  00E8               	movwf	(_scaleA10kPot$2839+1)^(0+384)
 11874  1BC6  0022               	movlb	2	; select bank2
 11875  1BC7  0857               	movf	(?_pow+2)^(0+256),w
 11876  1BC8  0023               	movlb	3	; select bank3
 11877  1BC9  00E9               	movwf	(_scaleA10kPot$2839+2)^(0+384)
 11878                           
 11879                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11880  1BCA  30E3               	movlw	227
 11881  1BCB  0021               	movlb	1	; select bank1
 11882  1BCC  00AE               	movwf	___ftmul@f1^(0+128)
 11883  1BCD  300B               	movlw	11
 11884  1BCE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11885  1BCF  3041               	movlw	65
 11886  1BD0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11887  1BD1  0023               	movlb	3	; select bank3
 11888  1BD2  0867               	movf	_scaleA10kPot$2839^(0+384),w
 11889  1BD3  0021               	movlb	1	; select bank1
 11890  1BD4  00B1               	movwf	___ftmul@f2^(0+128)
 11891  1BD5  0023               	movlb	3	; select bank3
 11892  1BD6  0868               	movf	(_scaleA10kPot$2839+1)^(0+384),w
 11893  1BD7  0021               	movlb	1	; select bank1
 11894  1BD8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11895  1BD9  0023               	movlb	3	; select bank3
 11896  1BDA  0869               	movf	(_scaleA10kPot$2839+2)^(0+384),w
 11897  1BDB  0021               	movlb	1	; select bank1
 11898  1BDC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11899  1BDD  319E  2691  319B   	fcall	___ftmul
 11900  1BE0  0021               	movlb	1	; select bank1
 11901  1BE1  082E               	movf	?___ftmul^(0+128),w
 11902  1BE2  0023               	movlb	3	; select bank3
 11903  1BE3  00E1               	movwf	scaleA10kPot@pwm^(0+384)
 11904  1BE4  0021               	movlb	1	; select bank1
 11905  1BE5  082F               	movf	(?___ftmul+1)^(0+128),w
 11906  1BE6  0023               	movlb	3	; select bank3
 11907  1BE7  00E2               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 11908  1BE8  0021               	movlb	1	; select bank1
 11909  1BE9  0830               	movf	(?___ftmul+2)^(0+128),w
 11910  1BEA  0023               	movlb	3	; select bank3
 11911  1BEB  00E3               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 11912                           
 11913                           ;user.c: 207: return (int)(pwm);
 11914  1BEC  0861               	movf	scaleA10kPot@pwm^(0+384),w
 11915  1BED  0022               	movlb	2	; select bank2
 11916  1BEE  00A0               	movwf	___fttol@f1^(0+256)
 11917  1BEF  0023               	movlb	3	; select bank3
 11918  1BF0  0862               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 11919  1BF1  0022               	movlb	2	; select bank2
 11920  1BF2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11921  1BF3  0023               	movlb	3	; select bank3
 11922  1BF4  0863               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 11923  1BF5  0022               	movlb	2	; select bank2
 11924  1BF6  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11925  1BF7  3199  21D5         	fcall	___fttol
 11926  1BF9  0022               	movlb	2	; select bank2
 11927  1BFA  0821               	movf	(?___fttol^(0+256)+1),w
 11928  1BFB  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 11929  1BFC  0820               	movf	?___fttol^(0+256),w
 11930  1BFD  00E7               	movwf	?_scaleA10kPot^(0+256)
 11931  1BFE  0008               	return
 11932  1BFF                     __end_of_scaleA10kPot:	
 11933                           
 11934                           	psect	text26
 11935  1950                     __ptext26:	
 11936 ;; *************** function _scaleA100kPot *****************
 11937 ;; Defined at:
 11938 ;;		line 188 in file "user.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;  input           3   71[BANK2 ] int 
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;  pwm             3    0[BANK3 ] float 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;                  2   71[BANK2 ] int 
 11945 ;; Registers used:
 11946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11952 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11953 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11955 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11956 ;;Total ram usage:       12 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    8
 11959 ;; This function calls:
 11960 ;;		___ftdiv
 11961 ;;		___ftmul
 11962 ;;		___fttol
 11963 ;;		_pow
 11964 ;; This function is called by:
 11965 ;;		_main
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           
 11970                           ;psect for function _scaleA100kPot
 11971  1950                     _scaleA100kPot:	
 11972                           
 11973                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 11974                           
 11975                           ;incstack = 0
 11976                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11977  1950  0022               	movlb	2	; select bank2
 11978  1951  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11979  1952  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 11980  1953  0467               	iorwf	scaleA100kPot@input^(0+256),w
 11981  1954  1D03               	skipz
 11982  1955  295C               	goto	l8899
 11983  1956  3000               	movlw	0
 11984  1957  00E7               	movwf	scaleA100kPot@input^(0+256)
 11985  1958  3080               	movlw	128
 11986  1959  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 11987  195A  303F               	movlw	63
 11988  195B  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 11989  195C                     l8899:	
 11990                           
 11991                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11992  195C  30C0               	movlw	192
 11993  195D  0021               	movlb	1	; select bank1
 11994  195E  00CE               	movwf	___ftdiv@f2^(0+128)
 11995  195F  307F               	movlw	127
 11996  1960  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11997  1961  3044               	movlw	68
 11998  1962  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11999  1963  0022               	movlb	2	; select bank2
 12000  1964  0867               	movf	scaleA100kPot@input^(0+256),w
 12001  1965  0021               	movlb	1	; select bank1
 12002  1966  00D1               	movwf	___ftdiv@f1^(0+128)
 12003  1967  0022               	movlb	2	; select bank2
 12004  1968  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12005  1969  0021               	movlb	1	; select bank1
 12006  196A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12007  196B  0022               	movlb	2	; select bank2
 12008  196C  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12009  196D  0021               	movlb	1	; select bank1
 12010  196E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12011  196F  319D  253D  3199   	fcall	___ftdiv
 12012  1972  0021               	movlb	1	; select bank1
 12013  1973  084E               	movf	?___ftdiv^(0+128),w
 12014  1974  0023               	movlb	3	; select bank3
 12015  1975  00E4               	movwf	_scaleA100kPot$2834^(0+384)
 12016  1976  0021               	movlb	1	; select bank1
 12017  1977  084F               	movf	(?___ftdiv+1)^(0+128),w
 12018  1978  0023               	movlb	3	; select bank3
 12019  1979  00E5               	movwf	(_scaleA100kPot$2834+1)^(0+384)
 12020  197A  0021               	movlb	1	; select bank1
 12021  197B  0850               	movf	(?___ftdiv+2)^(0+128),w
 12022  197C  0023               	movlb	3	; select bank3
 12023  197D  00E6               	movwf	(_scaleA100kPot$2834+2)^(0+384)
 12024                           
 12025                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12026  197E  3056               	movlw	86
 12027  197F  0022               	movlb	2	; select bank2
 12028  1980  00D8               	movwf	pow@y^(0+256)
 12029  1981  308E               	movlw	142
 12030  1982  00D9               	movwf	(pow@y+1)^(0+256)
 12031  1983  30BF               	movlw	191
 12032  1984  00DA               	movwf	(pow@y+2)^(0+256)
 12033  1985  0023               	movlb	3	; select bank3
 12034  1986  0864               	movf	_scaleA100kPot$2834^(0+384),w
 12035  1987  0022               	movlb	2	; select bank2
 12036  1988  00D5               	movwf	pow@x^(0+256)
 12037  1989  0023               	movlb	3	; select bank3
 12038  198A  0865               	movf	(_scaleA100kPot$2834+1)^(0+384),w
 12039  198B  0022               	movlb	2	; select bank2
 12040  198C  00D6               	movwf	(pow@x+1)^(0+256)
 12041  198D  0023               	movlb	3	; select bank3
 12042  198E  0866               	movf	(_scaleA100kPot$2834+2)^(0+384),w
 12043  198F  0022               	movlb	2	; select bank2
 12044  1990  00D7               	movwf	(pow@x+2)^(0+256)
 12045  1991  3186  26E4  3199   	fcall	_pow
 12046  1994  0022               	movlb	2	; select bank2
 12047  1995  0855               	movf	?_pow^(0+256),w
 12048  1996  0023               	movlb	3	; select bank3
 12049  1997  00E7               	movwf	_scaleA100kPot$2835^(0+384)
 12050  1998  0022               	movlb	2	; select bank2
 12051  1999  0856               	movf	(?_pow+1)^(0+256),w
 12052  199A  0023               	movlb	3	; select bank3
 12053  199B  00E8               	movwf	(_scaleA100kPot$2835+1)^(0+384)
 12054  199C  0022               	movlb	2	; select bank2
 12055  199D  0857               	movf	(?_pow+2)^(0+256),w
 12056  199E  0023               	movlb	3	; select bank3
 12057  199F  00E9               	movwf	(_scaleA100kPot$2835+2)^(0+384)
 12058                           
 12059                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12060  19A0  309F               	movlw	159
 12061  19A1  0021               	movlb	1	; select bank1
 12062  19A2  00AE               	movwf	___ftmul@f1^(0+128)
 12063  19A3  3068               	movlw	104
 12064  19A4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12065  19A5  3040               	movlw	64
 12066  19A6  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12067  19A7  0023               	movlb	3	; select bank3
 12068  19A8  0867               	movf	_scaleA100kPot$2835^(0+384),w
 12069  19A9  0021               	movlb	1	; select bank1
 12070  19AA  00B1               	movwf	___ftmul@f2^(0+128)
 12071  19AB  0023               	movlb	3	; select bank3
 12072  19AC  0868               	movf	(_scaleA100kPot$2835+1)^(0+384),w
 12073  19AD  0021               	movlb	1	; select bank1
 12074  19AE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12075  19AF  0023               	movlb	3	; select bank3
 12076  19B0  0869               	movf	(_scaleA100kPot$2835+2)^(0+384),w
 12077  19B1  0021               	movlb	1	; select bank1
 12078  19B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12079  19B3  319E  2691  3199   	fcall	___ftmul
 12080  19B6  0021               	movlb	1	; select bank1
 12081  19B7  082E               	movf	?___ftmul^(0+128),w
 12082  19B8  0023               	movlb	3	; select bank3
 12083  19B9  00E1               	movwf	scaleA100kPot@pwm^(0+384)
 12084  19BA  0021               	movlb	1	; select bank1
 12085  19BB  082F               	movf	(?___ftmul+1)^(0+128),w
 12086  19BC  0023               	movlb	3	; select bank3
 12087  19BD  00E2               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12088  19BE  0021               	movlb	1	; select bank1
 12089  19BF  0830               	movf	(?___ftmul+2)^(0+128),w
 12090  19C0  0023               	movlb	3	; select bank3
 12091  19C1  00E3               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12092                           
 12093                           ;user.c: 192: return (int)(pwm);
 12094  19C2  0861               	movf	scaleA100kPot@pwm^(0+384),w
 12095  19C3  0022               	movlb	2	; select bank2
 12096  19C4  00A0               	movwf	___fttol@f1^(0+256)
 12097  19C5  0023               	movlb	3	; select bank3
 12098  19C6  0862               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12099  19C7  0022               	movlb	2	; select bank2
 12100  19C8  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12101  19C9  0023               	movlb	3	; select bank3
 12102  19CA  0863               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12103  19CB  0022               	movlb	2	; select bank2
 12104  19CC  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12105  19CD  3199  21D5         	fcall	___fttol
 12106  19CF  0022               	movlb	2	; select bank2
 12107  19D0  0821               	movf	(?___fttol^(0+256)+1),w
 12108  19D1  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12109  19D2  0820               	movf	?___fttol^(0+256),w
 12110  19D3  00E7               	movwf	?_scaleA100kPot^(0+256)
 12111  19D4  0008               	return
 12112  19D5                     __end_of_scaleA100kPot:	
 12113                           
 12114                           	psect	text27
 12115  06E4                     __ptext27:	
 12116 ;; *************** function _pow *****************
 12117 ;; Defined at:
 12118 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12119 ;; Parameters:    Size  Location     Type
 12120 ;;  x               3   53[BANK2 ] int 
 12121 ;;  y               3   56[BANK2 ] int 
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;  yi              4   67[BANK2 ] unsigned long 
 12124 ;;  sign            1   66[BANK2 ] unsigned char 
 12125 ;; Return value:  Size  Location     Type
 12126 ;;                  3   53[BANK2 ] unsigned char 
 12127 ;; Registers used:
 12128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12129 ;; Tracked objects:
 12130 ;;		On entry : 0/0
 12131 ;;		On exit  : 0/0
 12132 ;;		Unchanged: 0/0
 12133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12134 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12135 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12136 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12137 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12138 ;;Total ram usage:       18 bytes
 12139 ;; Hardware stack levels used:    1
 12140 ;; Hardware stack levels required when called:    7
 12141 ;; This function calls:
 12142 ;;		___ftge
 12143 ;;		___ftmul
 12144 ;;		___ftneg
 12145 ;;		___fttol
 12146 ;;		___lltoft
 12147 ;;		_exp
 12148 ;;		_log
 12149 ;; This function is called by:
 12150 ;;		_scaleA100kPot
 12151 ;;		_scaleA10kPot
 12152 ;;		_scaleiA10kPot
 12153 ;;		_scaleiA100kPot
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           
 12158                           ;psect for function _pow
 12159  06E4                     _pow:	
 12160                           
 12161                           ;incstack = 0
 12162                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12163  06E4  0022               	movlb	2	; select bank2
 12164  06E5  01E2               	clrf	pow@sign^(0+256)
 12165  06E6  0857               	movf	(pow@x+2)^(0+256),w
 12166  06E7  0456               	iorwf	(pow@x+1)^(0+256),w
 12167  06E8  0455               	iorwf	pow@x^(0+256),w
 12168  06E9  1D03               	skipz
 12169  06EA  2F10               	goto	l8169
 12170  06EB  3000               	movlw	0
 12171  06EC  0021               	movlb	1	; select bank1
 12172  06ED  00A0               	movwf	___ftge@ff1^(0+128)
 12173  06EE  3000               	movlw	0
 12174  06EF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12175  06F0  3000               	movlw	0
 12176  06F1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12177  06F2  0022               	movlb	2	; select bank2
 12178  06F3  0858               	movf	pow@y^(0+256),w
 12179  06F4  0021               	movlb	1	; select bank1
 12180  06F5  00A3               	movwf	___ftge@ff2^(0+128)
 12181  06F6  0022               	movlb	2	; select bank2
 12182  06F7  0859               	movf	(pow@y+1)^(0+256),w
 12183  06F8  0021               	movlb	1	; select bank1
 12184  06F9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12185  06FA  0022               	movlb	2	; select bank2
 12186  06FB  085A               	movf	(pow@y+2)^(0+256),w
 12187  06FC  0021               	movlb	1	; select bank1
 12188  06FD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12189  06FE  31A2  22FF  3186   	fcall	___ftge
 12190  0701  1C03               	btfss	3,0
 12191  0702  2F08               	goto	l2308
 12192  0703  3021               	movlw	33
 12193  0704  0024               	movlb	4	; select bank4
 12194  0705  00D3               	movwf	_errno^(0+512)
 12195  0706  3000               	movlw	0
 12196  0707  00D4               	movwf	(_errno^(0+512)+1)
 12197  0708                     l2308:	
 12198  0708  3000               	movlw	0
 12199  0709  0022               	movlb	2	; select bank2
 12200  070A  00D5               	movwf	?_pow^(0+256)
 12201  070B  3000               	movlw	0
 12202  070C  00D6               	movwf	(?_pow+1)^(0+256)
 12203  070D  3000               	movlw	0
 12204  070E  00D7               	movwf	(?_pow+2)^(0+256)
 12205  070F  0008               	return
 12206  0710                     l8169:	
 12207  0710  085A               	movf	(pow@y+2)^(0+256),w
 12208  0711  0459               	iorwf	(pow@y+1)^(0+256),w
 12209  0712  0458               	iorwf	pow@y^(0+256),w
 12210  0713  1D03               	skipz
 12211  0714  2F1C               	goto	l8175
 12212  0715  3000               	movlw	0
 12213  0716  00D5               	movwf	?_pow^(0+256)
 12214  0717  3080               	movlw	128
 12215  0718  00D6               	movwf	(?_pow+1)^(0+256)
 12216  0719  303F               	movlw	63
 12217  071A  00D7               	movwf	(?_pow+2)^(0+256)
 12218  071B  0008               	return
 12219  071C                     l8175:	
 12220  071C  0855               	movf	pow@x^(0+256),w
 12221  071D  0021               	movlb	1	; select bank1
 12222  071E  00A0               	movwf	___ftge@ff1^(0+128)
 12223  071F  0022               	movlb	2	; select bank2
 12224  0720  0856               	movf	(pow@x+1)^(0+256),w
 12225  0721  0021               	movlb	1	; select bank1
 12226  0722  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12227  0723  0022               	movlb	2	; select bank2
 12228  0724  0857               	movf	(pow@x+2)^(0+256),w
 12229  0725  0021               	movlb	1	; select bank1
 12230  0726  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12231  0727  3000               	movlw	0
 12232  0728  00A3               	movwf	___ftge@ff2^(0+128)
 12233  0729  3000               	movlw	0
 12234  072A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12235  072B  3000               	movlw	0
 12236  072C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12237  072D  31A2  22FF  3186   	fcall	___ftge
 12238  0730  1803               	btfsc	3,0
 12239  0731  2F96               	goto	l8187
 12240  0732  0022               	movlb	2	; select bank2
 12241  0733  0858               	movf	pow@y^(0+256),w
 12242  0734  00A0               	movwf	___fttol@f1^(0+256)
 12243  0735  0859               	movf	(pow@y+1)^(0+256),w
 12244  0736  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12245  0737  085A               	movf	(pow@y+2)^(0+256),w
 12246  0738  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12247  0739  3199  21D5  3186   	fcall	___fttol
 12248  073C  0022               	movlb	2	; select bank2
 12249  073D  0823               	movf	(?___fttol+3)^(0+256),w
 12250  073E  00E6               	movwf	(pow@yi+3)^(0+256)
 12251  073F  0822               	movf	(?___fttol+2)^(0+256),w
 12252  0740  00E5               	movwf	(pow@yi+2)^(0+256)
 12253  0741  0821               	movf	(?___fttol+1)^(0+256),w
 12254  0742  00E4               	movwf	(pow@yi+1)^(0+256)
 12255  0743  0820               	movf	?___fttol^(0+256),w
 12256  0744  00E3               	movwf	pow@yi^(0+256)
 12257  0745  0866               	movf	(pow@yi+3)^(0+256),w
 12258  0746  0021               	movlb	1	; select bank1
 12259  0747  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12260  0748  0022               	movlb	2	; select bank2
 12261  0749  0865               	movf	(pow@yi+2)^(0+256),w
 12262  074A  0021               	movlb	1	; select bank1
 12263  074B  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12264  074C  0022               	movlb	2	; select bank2
 12265  074D  0864               	movf	(pow@yi+1)^(0+256),w
 12266  074E  0021               	movlb	1	; select bank1
 12267  074F  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12268  0750  0022               	movlb	2	; select bank2
 12269  0751  0863               	movf	pow@yi^(0+256),w
 12270  0752  0021               	movlb	1	; select bank1
 12271  0753  00A8               	movwf	___lltoft@c^(0+128)
 12272  0754  31A1  2103  3186   	fcall	___lltoft
 12273  0757  0022               	movlb	2	; select bank2
 12274  0758  085A               	movf	(pow@y+2)^(0+256),w
 12275  0759  0021               	movlb	1	; select bank1
 12276  075A  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12277  075B  1D03               	skipz
 12278  075C  2F67               	goto	u8545
 12279  075D  0022               	movlb	2	; select bank2
 12280  075E  0859               	movf	(pow@y+1)^(0+256),w
 12281  075F  0021               	movlb	1	; select bank1
 12282  0760  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12283  0761  1D03               	skipz
 12284  0762  2F67               	goto	u8545
 12285  0763  0022               	movlb	2	; select bank2
 12286  0764  0858               	movf	pow@y^(0+256),w
 12287  0765  0021               	movlb	1	; select bank1
 12288  0766  0628               	xorwf	?___lltoft^(0+128),w
 12289  0767                     u8545:	
 12290  0767  1903               	skipnz
 12291  0768  2F76               	goto	l8183
 12292  0769  3021               	movlw	33
 12293  076A  0024               	movlb	4	; select bank4
 12294  076B  00D3               	movwf	_errno^(0+512)
 12295  076C  3000               	movlw	0
 12296  076D  00D4               	movwf	(_errno^(0+512)+1)
 12297  076E  3000               	movlw	0
 12298  076F  0022               	movlb	2	; select bank2
 12299  0770  00D5               	movwf	?_pow^(0+256)
 12300  0771  3000               	movlw	0
 12301  0772  00D6               	movwf	(?_pow+1)^(0+256)
 12302  0773  3000               	movlw	0
 12303  0774  00D7               	movwf	(?_pow+2)^(0+256)
 12304  0775  0008               	return
 12305  0776                     l8183:	
 12306  0776  0022               	movlb	2	; select bank2
 12307  0777  0863               	movf	pow@yi^(0+256),w
 12308  0778  3901               	andlw	1
 12309  0779  00DB               	movwf	??_pow^(0+256)
 12310  077A  085B               	movf	??_pow^(0+256),w
 12311  077B  00E2               	movwf	pow@sign^(0+256)
 12312  077C  0855               	movf	pow@x^(0+256),w
 12313  077D  0021               	movlb	1	; select bank1
 12314  077E  00BE               	movwf	___ftneg@f1^(0+128)
 12315  077F  0022               	movlb	2	; select bank2
 12316  0780  0856               	movf	(pow@x+1)^(0+256),w
 12317  0781  0021               	movlb	1	; select bank1
 12318  0782  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12319  0783  0022               	movlb	2	; select bank2
 12320  0784  0857               	movf	(pow@x+2)^(0+256),w
 12321  0785  0021               	movlb	1	; select bank1
 12322  0786  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12323  0787  31AF  2732  3186   	fcall	___ftneg
 12324  078A  0021               	movlb	1	; select bank1
 12325  078B  083E               	movf	?___ftneg^(0+128),w
 12326  078C  0022               	movlb	2	; select bank2
 12327  078D  00D5               	movwf	pow@x^(0+256)
 12328  078E  0021               	movlb	1	; select bank1
 12329  078F  083F               	movf	(?___ftneg+1)^(0+128),w
 12330  0790  0022               	movlb	2	; select bank2
 12331  0791  00D6               	movwf	(pow@x+1)^(0+256)
 12332  0792  0021               	movlb	1	; select bank1
 12333  0793  0840               	movf	(?___ftneg+2)^(0+128),w
 12334  0794  0022               	movlb	2	; select bank2
 12335  0795  00D7               	movwf	(pow@x+2)^(0+256)
 12336  0796                     l8187:	
 12337  0796  0022               	movlb	2	; select bank2
 12338  0797  0855               	movf	pow@x^(0+256),w
 12339  0798  00BE               	movwf	log@x^(0+256)
 12340  0799  0856               	movf	(pow@x+1)^(0+256),w
 12341  079A  00BF               	movwf	(log@x+1)^(0+256)
 12342  079B  0857               	movf	(pow@x+2)^(0+256),w
 12343  079C  00C0               	movwf	(log@x+2)^(0+256)
 12344  079D  3190  2064  3186   	fcall	_log
 12345  07A0  0022               	movlb	2	; select bank2
 12346  07A1  083E               	movf	?_log^(0+256),w
 12347  07A2  00DC               	movwf	_pow$2847^(0+256)
 12348  07A3  083F               	movf	(?_log+1)^(0+256),w
 12349  07A4  00DD               	movwf	(_pow$2847+1)^(0+256)
 12350  07A5  0840               	movf	(?_log+2)^(0+256),w
 12351  07A6  00DE               	movwf	(_pow$2847+2)^(0+256)
 12352  07A7  0858               	movf	pow@y^(0+256),w
 12353  07A8  0021               	movlb	1	; select bank1
 12354  07A9  00AE               	movwf	___ftmul@f1^(0+128)
 12355  07AA  0022               	movlb	2	; select bank2
 12356  07AB  0859               	movf	(pow@y+1)^(0+256),w
 12357  07AC  0021               	movlb	1	; select bank1
 12358  07AD  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12359  07AE  0022               	movlb	2	; select bank2
 12360  07AF  085A               	movf	(pow@y+2)^(0+256),w
 12361  07B0  0021               	movlb	1	; select bank1
 12362  07B1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12363  07B2  0022               	movlb	2	; select bank2
 12364  07B3  085C               	movf	_pow$2847^(0+256),w
 12365  07B4  0021               	movlb	1	; select bank1
 12366  07B5  00B1               	movwf	___ftmul@f2^(0+128)
 12367  07B6  0022               	movlb	2	; select bank2
 12368  07B7  085D               	movf	(_pow$2847+1)^(0+256),w
 12369  07B8  0021               	movlb	1	; select bank1
 12370  07B9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12371  07BA  0022               	movlb	2	; select bank2
 12372  07BB  085E               	movf	(_pow$2847+2)^(0+256),w
 12373  07BC  0021               	movlb	1	; select bank1
 12374  07BD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12375  07BE  319E  2691  3186   	fcall	___ftmul
 12376  07C1  0021               	movlb	1	; select bank1
 12377  07C2  082E               	movf	?___ftmul^(0+128),w
 12378  07C3  0022               	movlb	2	; select bank2
 12379  07C4  00DF               	movwf	_pow$2848^(0+256)
 12380  07C5  0021               	movlb	1	; select bank1
 12381  07C6  082F               	movf	(?___ftmul+1)^(0+128),w
 12382  07C7  0022               	movlb	2	; select bank2
 12383  07C8  00E0               	movwf	(_pow$2848+1)^(0+256)
 12384  07C9  0021               	movlb	1	; select bank1
 12385  07CA  0830               	movf	(?___ftmul+2)^(0+128),w
 12386  07CB  0022               	movlb	2	; select bank2
 12387  07CC  00E1               	movwf	(_pow$2848+2)^(0+256)
 12388  07CD  085F               	movf	_pow$2848^(0+256),w
 12389  07CE  00C8               	movwf	exp@x^(0+256)
 12390  07CF  0860               	movf	(_pow$2848+1)^(0+256),w
 12391  07D0  00C9               	movwf	(exp@x+1)^(0+256)
 12392  07D1  0861               	movf	(_pow$2848+2)^(0+256),w
 12393  07D2  00CA               	movwf	(exp@x+2)^(0+256)
 12394  07D3  3193  2351  3186   	fcall	_exp
 12395  07D6  0022               	movlb	2	; select bank2
 12396  07D7  0848               	movf	?_exp^(0+256),w
 12397  07D8  00D5               	movwf	pow@x^(0+256)
 12398  07D9  0849               	movf	(?_exp+1)^(0+256),w
 12399  07DA  00D6               	movwf	(pow@x+1)^(0+256)
 12400  07DB  084A               	movf	(?_exp+2)^(0+256),w
 12401  07DC  00D7               	movwf	(pow@x+2)^(0+256)
 12402  07DD  0862               	movf	pow@sign^(0+256),w
 12403  07DE  1903               	btfsc	3,2
 12404  07DF  0008               	return
 12405  07E0  0855               	movf	pow@x^(0+256),w
 12406  07E1  0021               	movlb	1	; select bank1
 12407  07E2  00BE               	movwf	___ftneg@f1^(0+128)
 12408  07E3  0022               	movlb	2	; select bank2
 12409  07E4  0856               	movf	(pow@x+1)^(0+256),w
 12410  07E5  0021               	movlb	1	; select bank1
 12411  07E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12412  07E7  0022               	movlb	2	; select bank2
 12413  07E8  0857               	movf	(pow@x+2)^(0+256),w
 12414  07E9  0021               	movlb	1	; select bank1
 12415  07EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12416  07EB  31AF  2732         	fcall	___ftneg
 12417  07ED  0021               	movlb	1	; select bank1
 12418  07EE  083E               	movf	?___ftneg^(0+128),w
 12419  07EF  0022               	movlb	2	; select bank2
 12420  07F0  00D5               	movwf	?_pow^(0+256)
 12421  07F1  0021               	movlb	1	; select bank1
 12422  07F2  083F               	movf	(?___ftneg+1)^(0+128),w
 12423  07F3  0022               	movlb	2	; select bank2
 12424  07F4  00D6               	movwf	(?_pow+1)^(0+256)
 12425  07F5  0021               	movlb	1	; select bank1
 12426  07F6  0840               	movf	(?___ftneg+2)^(0+128),w
 12427  07F7  0022               	movlb	2	; select bank2
 12428  07F8  00D7               	movwf	(?_pow+2)^(0+256)
 12429  07F9  0008               	return
 12430  07FA                     __end_of_pow:	
 12431                           
 12432                           	psect	text28
 12433  1064                     __ptext28:	
 12434 ;; *************** function _log *****************
 12435 ;; Defined at:
 12436 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12437 ;; Parameters:    Size  Location     Type
 12438 ;;  x               3   30[BANK2 ] unsigned char 
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;  exponent        2   34[BANK2 ] int 
 12441 ;; Return value:  Size  Location     Type
 12442 ;;                  3   30[BANK2 ] int 
 12443 ;; Registers used:
 12444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12450 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12451 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12452 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12453 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12454 ;;Total ram usage:        6 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    6
 12457 ;; This function calls:
 12458 ;;		___awtoft
 12459 ;;		___ftadd
 12460 ;;		___ftge
 12461 ;;		___ftmul
 12462 ;;		_eval_poly
 12463 ;;		_frexp
 12464 ;; This function is called by:
 12465 ;;		_pow
 12466 ;; This function uses a non-reentrant model
 12467 ;;
 12468                           
 12469                           
 12470                           ;psect for function _log
 12471  1064                     _log:	
 12472                           
 12473                           ;incstack = 0
 12474                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12475  1064  0022               	movlb	2	; select bank2
 12476  1065  083E               	movf	log@x^(0+256),w
 12477  1066  0021               	movlb	1	; select bank1
 12478  1067  00A0               	movwf	___ftge@ff1^(0+128)
 12479  1068  0022               	movlb	2	; select bank2
 12480  1069  083F               	movf	(log@x+1)^(0+256),w
 12481  106A  0021               	movlb	1	; select bank1
 12482  106B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12483  106C  0022               	movlb	2	; select bank2
 12484  106D  0840               	movf	(log@x+2)^(0+256),w
 12485  106E  0021               	movlb	1	; select bank1
 12486  106F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12487  1070  3000               	movlw	0
 12488  1071  00A3               	movwf	___ftge@ff2^(0+128)
 12489  1072  3000               	movlw	0
 12490  1073  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12491  1074  3000               	movlw	0
 12492  1075  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12493  1076  31A2  22FF  3190   	fcall	___ftge
 12494  1079  1803               	btfsc	3,0
 12495  107A  2888               	goto	l8043
 12496  107B  3021               	movlw	33
 12497  107C  0024               	movlb	4	; select bank4
 12498  107D  00D3               	movwf	_errno^(0+512)
 12499  107E  3000               	movlw	0
 12500  107F  00D4               	movwf	(_errno^(0+512)+1)
 12501  1080  3000               	movlw	0
 12502  1081  0022               	movlb	2	; select bank2
 12503  1082  00BE               	movwf	?_log^(0+256)
 12504  1083  3000               	movlw	0
 12505  1084  00BF               	movwf	(?_log+1)^(0+256)
 12506  1085  3000               	movlw	0
 12507  1086  00C0               	movwf	(?_log+2)^(0+256)
 12508  1087  0008               	return
 12509  1088                     l8043:	
 12510  1088  0022               	movlb	2	; select bank2
 12511  1089  0840               	movf	(log@x+2)^(0+256),w
 12512  108A  043F               	iorwf	(log@x+1)^(0+256),w
 12513  108B  043E               	iorwf	log@x^(0+256),w
 12514  108C  1D03               	skipz
 12515  108D  289B               	goto	l8049
 12516  108E  3022               	movlw	34
 12517  108F  0024               	movlb	4	; select bank4
 12518  1090  00D3               	movwf	_errno^(0+512)
 12519  1091  3000               	movlw	0
 12520  1092  00D4               	movwf	(_errno^(0+512)+1)
 12521  1093  3000               	movlw	0
 12522  1094  0022               	movlb	2	; select bank2
 12523  1095  00BE               	movwf	?_log^(0+256)
 12524  1096  3000               	movlw	0
 12525  1097  00BF               	movwf	(?_log+1)^(0+256)
 12526  1098  3000               	movlw	0
 12527  1099  00C0               	movwf	(?_log+2)^(0+256)
 12528  109A  0008               	return
 12529  109B                     l8049:	
 12530  109B  3000               	movlw	0
 12531  109C  0021               	movlb	1	; select bank1
 12532  109D  00C1               	movwf	___ftadd@f1^(0+128)
 12533  109E  3080               	movlw	128
 12534  109F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12535  10A0  30BF               	movlw	191
 12536  10A1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12537  10A2  3000               	movlw	0
 12538  10A3  00AE               	movwf	___ftmul@f1^(0+128)
 12539  10A4  3000               	movlw	0
 12540  10A5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12541  10A6  3040               	movlw	64
 12542  10A7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12543  10A8  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12544  10A9  0022               	movlb	2	; select bank2
 12545  10AA  00C1               	movwf	??_log^(0+256)
 12546  10AB  0841               	movf	??_log^(0+256),w
 12547  10AC  0021               	movlb	1	; select bank1
 12548  10AD  00A3               	movwf	frexp@eptr^(0+128)
 12549  10AE  0022               	movlb	2	; select bank2
 12550  10AF  083E               	movf	log@x^(0+256),w
 12551  10B0  0021               	movlb	1	; select bank1
 12552  10B1  00A0               	movwf	frexp@value^(0+128)
 12553  10B2  0022               	movlb	2	; select bank2
 12554  10B3  083F               	movf	(log@x+1)^(0+256),w
 12555  10B4  0021               	movlb	1	; select bank1
 12556  10B5  00A1               	movwf	(frexp@value+1)^(0+128)
 12557  10B6  0022               	movlb	2	; select bank2
 12558  10B7  0840               	movf	(log@x+2)^(0+256),w
 12559  10B8  0021               	movlb	1	; select bank1
 12560  10B9  00A2               	movwf	(frexp@value+2)^(0+128)
 12561  10BA  31A3  23B6  3190   	fcall	_frexp
 12562  10BD  0021               	movlb	1	; select bank1
 12563  10BE  0820               	movf	?_frexp^(0+128),w
 12564  10BF  00B1               	movwf	___ftmul@f2^(0+128)
 12565  10C0  0821               	movf	(?_frexp+1)^(0+128),w
 12566  10C1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12567  10C2  0822               	movf	(?_frexp+2)^(0+128),w
 12568  10C3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12569  10C4  319E  2691  3190   	fcall	___ftmul
 12570  10C7  0021               	movlb	1	; select bank1
 12571  10C8  082E               	movf	?___ftmul^(0+128),w
 12572  10C9  00C4               	movwf	___ftadd@f2^(0+128)
 12573  10CA  082F               	movf	(?___ftmul+1)^(0+128),w
 12574  10CB  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12575  10CC  0830               	movf	(?___ftmul+2)^(0+128),w
 12576  10CD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12577  10CE  3191  2135  3190   	fcall	___ftadd
 12578  10D1  0021               	movlb	1	; select bank1
 12579  10D2  0841               	movf	?___ftadd^(0+128),w
 12580  10D3  0022               	movlb	2	; select bank2
 12581  10D4  00BE               	movwf	log@x^(0+256)
 12582  10D5  0021               	movlb	1	; select bank1
 12583  10D6  0842               	movf	(?___ftadd+1)^(0+128),w
 12584  10D7  0022               	movlb	2	; select bank2
 12585  10D8  00BF               	movwf	(log@x+1)^(0+256)
 12586  10D9  0021               	movlb	1	; select bank1
 12587  10DA  0843               	movf	(?___ftadd+2)^(0+128),w
 12588  10DB  0022               	movlb	2	; select bank2
 12589  10DC  00C0               	movwf	(log@x+2)^(0+256)
 12590  10DD  30FF               	movlw	255
 12591  10DE  07C2               	addwf	log@exponent^(0+256),f
 12592  10DF  30FF               	movlw	255
 12593  10E0  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12594  10E1  083E               	movf	log@x^(0+256),w
 12595  10E2  00B4               	movwf	eval_poly@x^(0+256)
 12596  10E3  083F               	movf	(log@x+1)^(0+256),w
 12597  10E4  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12598  10E5  0840               	movf	(log@x+2)^(0+256),w
 12599  10E6  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12600  10E7  301E               	movlw	low (log@coeff| (0+32768))
 12601  10E8  00B7               	movwf	eval_poly@d^(0+256)
 12602  10E9  30A8               	movlw	high (log@coeff| (0+32768))
 12603  10EA  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12604  10EB  3008               	movlw	8
 12605  10EC  00B9               	movwf	eval_poly@n^(0+256)
 12606  10ED  3000               	movlw	0
 12607  10EE  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12608  10EF  31A7  2718  3190   	fcall	_eval_poly
 12609  10F2  0022               	movlb	2	; select bank2
 12610  10F3  0834               	movf	?_eval_poly^(0+256),w
 12611  10F4  00BE               	movwf	log@x^(0+256)
 12612  10F5  0835               	movf	(?_eval_poly+1)^(0+256),w
 12613  10F6  00BF               	movwf	(log@x+1)^(0+256)
 12614  10F7  0836               	movf	(?_eval_poly+2)^(0+256),w
 12615  10F8  00C0               	movwf	(log@x+2)^(0+256)
 12616  10F9  083E               	movf	log@x^(0+256),w
 12617  10FA  0021               	movlb	1	; select bank1
 12618  10FB  00C1               	movwf	___ftadd@f1^(0+128)
 12619  10FC  0022               	movlb	2	; select bank2
 12620  10FD  083F               	movf	(log@x+1)^(0+256),w
 12621  10FE  0021               	movlb	1	; select bank1
 12622  10FF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12623  1100  0022               	movlb	2	; select bank2
 12624  1101  0840               	movf	(log@x+2)^(0+256),w
 12625  1102  0021               	movlb	1	; select bank1
 12626  1103  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12627  1104  3072               	movlw	114
 12628  1105  00AE               	movwf	___ftmul@f1^(0+128)
 12629  1106  3031               	movlw	49
 12630  1107  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12631  1108  303F               	movlw	63
 12632  1109  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12633  110A  0022               	movlb	2	; select bank2
 12634  110B  0843               	movf	(log@exponent+1)^(0+256),w
 12635  110C  0021               	movlb	1	; select bank1
 12636  110D  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12637  110E  0022               	movlb	2	; select bank2
 12638  110F  0842               	movf	log@exponent^(0+256),w
 12639  1110  0021               	movlb	1	; select bank1
 12640  1111  00A8               	movwf	___awtoft@c^(0+128)
 12641  1112  31A0  2097  3190   	fcall	___awtoft
 12642  1115  0021               	movlb	1	; select bank1
 12643  1116  0828               	movf	?___awtoft^(0+128),w
 12644  1117  00B1               	movwf	___ftmul@f2^(0+128)
 12645  1118  0829               	movf	(?___awtoft+1)^(0+128),w
 12646  1119  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12647  111A  082A               	movf	(?___awtoft+2)^(0+128),w
 12648  111B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12649  111C  319E  2691  3190   	fcall	___ftmul
 12650  111F  0021               	movlb	1	; select bank1
 12651  1120  082E               	movf	?___ftmul^(0+128),w
 12652  1121  00C4               	movwf	___ftadd@f2^(0+128)
 12653  1122  082F               	movf	(?___ftmul+1)^(0+128),w
 12654  1123  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12655  1124  0830               	movf	(?___ftmul+2)^(0+128),w
 12656  1125  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12657  1126  3191  2135         	fcall	___ftadd
 12658  1128  0021               	movlb	1	; select bank1
 12659  1129  0841               	movf	?___ftadd^(0+128),w
 12660  112A  0022               	movlb	2	; select bank2
 12661  112B  00BE               	movwf	?_log^(0+256)
 12662  112C  0021               	movlb	1	; select bank1
 12663  112D  0842               	movf	(?___ftadd+1)^(0+128),w
 12664  112E  0022               	movlb	2	; select bank2
 12665  112F  00BF               	movwf	(?_log+1)^(0+256)
 12666  1130  0021               	movlb	1	; select bank1
 12667  1131  0843               	movf	(?___ftadd+2)^(0+128),w
 12668  1132  0022               	movlb	2	; select bank2
 12669  1133  00C0               	movwf	(?_log+2)^(0+256)
 12670  1134  0008               	return
 12671  1135                     __end_of_log:	
 12672                           
 12673                           	psect	text29
 12674  1351                     __ptext29:	
 12675 ;; *************** function _exp *****************
 12676 ;; Defined at:
 12677 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;  x               3   40[BANK2 ] int 
 12680 ;; Auto vars:     Size  Location     Type
 12681 ;;  exponent        2   50[BANK2 ] int 
 12682 ;;  sign            1   52[BANK2 ] unsigned char 
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  3   40[BANK2 ] unsigned char 
 12685 ;; Registers used:
 12686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12692 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12693 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12694 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12695 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12696 ;;Total ram usage:       13 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:    6
 12699 ;; This function calls:
 12700 ;;		___awtoft
 12701 ;;		___ftdiv
 12702 ;;		___ftge
 12703 ;;		___ftmul
 12704 ;;		___ftneg
 12705 ;;		___ftsub
 12706 ;;		___fttol
 12707 ;;		_eval_poly
 12708 ;;		_floor
 12709 ;;		_ldexp
 12710 ;; This function is called by:
 12711 ;;		_pow
 12712 ;; This function uses a non-reentrant model
 12713 ;;
 12714                           
 12715                           
 12716                           ;psect for function _exp
 12717  1351                     _exp:	
 12718                           
 12719                           ;incstack = 0
 12720                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12721  1351  0022               	movlb	2	; select bank2
 12722  1352  084A               	movf	(exp@x+2)^(0+256),w
 12723  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 12724  1354  0448               	iorwf	exp@x^(0+256),w
 12725  1355  1D03               	skipz
 12726  1356  2B5E               	goto	l8065
 12727  1357  3000               	movlw	0
 12728  1358  00C8               	movwf	?_exp^(0+256)
 12729  1359  3080               	movlw	128
 12730  135A  00C9               	movwf	(?_exp+1)^(0+256)
 12731  135B  303F               	movlw	63
 12732  135C  00CA               	movwf	(?_exp+2)^(0+256)
 12733  135D  0008               	return
 12734  135E                     l8065:	
 12735  135E  3072               	movlw	114
 12736  135F  0021               	movlb	1	; select bank1
 12737  1360  00A0               	movwf	___ftge@ff1^(0+128)
 12738  1361  3031               	movlw	49
 12739  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12740  1363  3044               	movlw	68
 12741  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12742  1365  0022               	movlb	2	; select bank2
 12743  1366  0848               	movf	exp@x^(0+256),w
 12744  1367  0021               	movlb	1	; select bank1
 12745  1368  00A3               	movwf	___ftge@ff2^(0+128)
 12746  1369  0022               	movlb	2	; select bank2
 12747  136A  0849               	movf	(exp@x+1)^(0+256),w
 12748  136B  0021               	movlb	1	; select bank1
 12749  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12750  136D  0022               	movlb	2	; select bank2
 12751  136E  084A               	movf	(exp@x+2)^(0+256),w
 12752  136F  0021               	movlb	1	; select bank1
 12753  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12754  1371  31A2  22FF  3193   	fcall	___ftge
 12755  1374  1803               	btfsc	3,0
 12756  1375  2B83               	goto	l8075
 12757  1376  3022               	movlw	34
 12758  1377  0024               	movlb	4	; select bank4
 12759  1378  00D3               	movwf	_errno^(0+512)
 12760  1379  3000               	movlw	0
 12761  137A  00D4               	movwf	(_errno^(0+512)+1)
 12762  137B  30FF               	movlw	255
 12763  137C  0022               	movlb	2	; select bank2
 12764  137D  00C8               	movwf	?_exp^(0+256)
 12765  137E  307F               	movlw	127
 12766  137F  00C9               	movwf	(?_exp+1)^(0+256)
 12767  1380  307F               	movlw	127
 12768  1381  00CA               	movwf	(?_exp+2)^(0+256)
 12769  1382  0008               	return
 12770  1383                     l8075:	
 12771  1383  0022               	movlb	2	; select bank2
 12772  1384  0848               	movf	exp@x^(0+256),w
 12773  1385  0021               	movlb	1	; select bank1
 12774  1386  00A0               	movwf	___ftge@ff1^(0+128)
 12775  1387  0022               	movlb	2	; select bank2
 12776  1388  0849               	movf	(exp@x+1)^(0+256),w
 12777  1389  0021               	movlb	1	; select bank1
 12778  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12779  138B  0022               	movlb	2	; select bank2
 12780  138C  084A               	movf	(exp@x+2)^(0+256),w
 12781  138D  0021               	movlb	1	; select bank1
 12782  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12783  138F  3049               	movlw	73
 12784  1390  00A3               	movwf	___ftge@ff2^(0+128)
 12785  1391  303A               	movlw	58
 12786  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12787  1393  30C4               	movlw	196
 12788  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12789  1395  31A2  22FF  3193   	fcall	___ftge
 12790  1398  1803               	btfsc	3,0
 12791  1399  2BA7               	goto	l8081
 12792  139A  3022               	movlw	34
 12793  139B  0024               	movlb	4	; select bank4
 12794  139C  00D3               	movwf	_errno^(0+512)
 12795  139D  3000               	movlw	0
 12796  139E  00D4               	movwf	(_errno^(0+512)+1)
 12797  139F  3000               	movlw	0
 12798  13A0  0022               	movlb	2	; select bank2
 12799  13A1  00C8               	movwf	?_exp^(0+256)
 12800  13A2  3000               	movlw	0
 12801  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 12802  13A4  3000               	movlw	0
 12803  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 12804  13A6  0008               	return
 12805  13A7                     l8081:	
 12806  13A7  0022               	movlb	2	; select bank2
 12807  13A8  0848               	movf	exp@x^(0+256),w
 12808  13A9  0021               	movlb	1	; select bank1
 12809  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 12810  13AB  0022               	movlb	2	; select bank2
 12811  13AC  0849               	movf	(exp@x+1)^(0+256),w
 12812  13AD  0021               	movlb	1	; select bank1
 12813  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12814  13AF  0022               	movlb	2	; select bank2
 12815  13B0  084A               	movf	(exp@x+2)^(0+256),w
 12816  13B1  0021               	movlb	1	; select bank1
 12817  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12818  13B3  3000               	movlw	0
 12819  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 12820  13B5  3000               	movlw	0
 12821  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12822  13B7  3000               	movlw	0
 12823  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12824  13B9  31A2  22FF  3193   	fcall	___ftge
 12825  13BC  1803               	btfsc	3,0
 12826  13BD  2BC0               	goto	u8430
 12827  13BE  3001               	movlw	1
 12828  13BF  2BC1               	goto	u8440
 12829  13C0                     u8430:	
 12830  13C0  3000               	movlw	0
 12831  13C1                     u8440:	
 12832  13C1  0022               	movlb	2	; select bank2
 12833  13C2  00CB               	movwf	??_exp^(0+256)
 12834  13C3  084B               	movf	??_exp^(0+256),w
 12835  13C4  00D4               	movwf	exp@sign^(0+256)
 12836  13C5  0854               	movf	exp@sign^(0+256),w
 12837  13C6  1903               	btfsc	3,2
 12838  13C7  2BE2               	goto	l8087
 12839  13C8  0848               	movf	exp@x^(0+256),w
 12840  13C9  0021               	movlb	1	; select bank1
 12841  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 12842  13CB  0022               	movlb	2	; select bank2
 12843  13CC  0849               	movf	(exp@x+1)^(0+256),w
 12844  13CD  0021               	movlb	1	; select bank1
 12845  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12846  13CF  0022               	movlb	2	; select bank2
 12847  13D0  084A               	movf	(exp@x+2)^(0+256),w
 12848  13D1  0021               	movlb	1	; select bank1
 12849  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12850  13D3  31AF  2732  3193   	fcall	___ftneg
 12851  13D6  0021               	movlb	1	; select bank1
 12852  13D7  083E               	movf	?___ftneg^(0+128),w
 12853  13D8  0022               	movlb	2	; select bank2
 12854  13D9  00C8               	movwf	exp@x^(0+256)
 12855  13DA  0021               	movlb	1	; select bank1
 12856  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 12857  13DC  0022               	movlb	2	; select bank2
 12858  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 12859  13DE  0021               	movlb	1	; select bank1
 12860  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 12861  13E0  0022               	movlb	2	; select bank2
 12862  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 12863  13E2                     l8087:	
 12864  13E2  30AA               	movlw	170
 12865  13E3  0021               	movlb	1	; select bank1
 12866  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 12867  13E5  30B8               	movlw	184
 12868  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12869  13E7  303F               	movlw	63
 12870  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12871  13E9  0022               	movlb	2	; select bank2
 12872  13EA  0848               	movf	exp@x^(0+256),w
 12873  13EB  0021               	movlb	1	; select bank1
 12874  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 12875  13ED  0022               	movlb	2	; select bank2
 12876  13EE  0849               	movf	(exp@x+1)^(0+256),w
 12877  13EF  0021               	movlb	1	; select bank1
 12878  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12879  13F1  0022               	movlb	2	; select bank2
 12880  13F2  084A               	movf	(exp@x+2)^(0+256),w
 12881  13F3  0021               	movlb	1	; select bank1
 12882  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12883  13F5  319E  2691  3193   	fcall	___ftmul
 12884  13F8  0021               	movlb	1	; select bank1
 12885  13F9  082E               	movf	?___ftmul^(0+128),w
 12886  13FA  0022               	movlb	2	; select bank2
 12887  13FB  00C8               	movwf	exp@x^(0+256)
 12888  13FC  0021               	movlb	1	; select bank1
 12889  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 12890  13FE  0022               	movlb	2	; select bank2
 12891  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 12892  1400  0021               	movlb	1	; select bank1
 12893  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 12894  1402  0022               	movlb	2	; select bank2
 12895  1403  00CA               	movwf	(exp@x+2)^(0+256)
 12896  1404  0848               	movf	exp@x^(0+256),w
 12897  1405  00B6               	movwf	floor@x^(0+256)
 12898  1406  0849               	movf	(exp@x+1)^(0+256),w
 12899  1407  00B7               	movwf	(floor@x+1)^(0+256)
 12900  1408  084A               	movf	(exp@x+2)^(0+256),w
 12901  1409  00B8               	movwf	(floor@x+2)^(0+256)
 12902  140A  319C  2496  3193   	fcall	_floor
 12903  140D  0022               	movlb	2	; select bank2
 12904  140E  0836               	movf	?_floor^(0+256),w
 12905  140F  00CC               	movwf	_exp$2850^(0+256)
 12906  1410  0837               	movf	(?_floor+1)^(0+256),w
 12907  1411  00CD               	movwf	(_exp$2850+1)^(0+256)
 12908  1412  0838               	movf	(?_floor+2)^(0+256),w
 12909  1413  00CE               	movwf	(_exp$2850+2)^(0+256)
 12910  1414  084C               	movf	_exp$2850^(0+256),w
 12911  1415  00A0               	movwf	___fttol@f1^(0+256)
 12912  1416  084D               	movf	(_exp$2850+1)^(0+256),w
 12913  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12914  1418  084E               	movf	(_exp$2850+2)^(0+256),w
 12915  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12916  141A  3199  21D5  3193   	fcall	___fttol
 12917  141D  0022               	movlb	2	; select bank2
 12918  141E  0821               	movf	(?___fttol^(0+256)+1),w
 12919  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 12920  1420  0820               	movf	?___fttol^(0+256),w
 12921  1421  00D2               	movwf	exp@exponent^(0+256)
 12922  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 12923  1423  0021               	movlb	1	; select bank1
 12924  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12925  1425  0022               	movlb	2	; select bank2
 12926  1426  0852               	movf	exp@exponent^(0+256),w
 12927  1427  0021               	movlb	1	; select bank1
 12928  1428  00A8               	movwf	___awtoft@c^(0+128)
 12929  1429  31A0  2097  3193   	fcall	___awtoft
 12930  142C  0021               	movlb	1	; select bank1
 12931  142D  0828               	movf	?___awtoft^(0+128),w
 12932  142E  0022               	movlb	2	; select bank2
 12933  142F  00BF               	movwf	___ftsub@f2^(0+256)
 12934  1430  0021               	movlb	1	; select bank1
 12935  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 12936  1432  0022               	movlb	2	; select bank2
 12937  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 12938  1434  0021               	movlb	1	; select bank1
 12939  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 12940  1436  0022               	movlb	2	; select bank2
 12941  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 12942  1438  0848               	movf	exp@x^(0+256),w
 12943  1439  00C2               	movwf	___ftsub@f1^(0+256)
 12944  143A  0849               	movf	(exp@x+1)^(0+256),w
 12945  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 12946  143C  084A               	movf	(exp@x+2)^(0+256),w
 12947  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 12948  143E  31A1  212D  3193   	fcall	___ftsub
 12949  1441  0022               	movlb	2	; select bank2
 12950  1442  083F               	movf	?___ftsub^(0+256),w
 12951  1443  00C8               	movwf	exp@x^(0+256)
 12952  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 12953  1445  00C9               	movwf	(exp@x+1)^(0+256)
 12954  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 12955  1447  00CA               	movwf	(exp@x+2)^(0+256)
 12956  1448  0848               	movf	exp@x^(0+256),w
 12957  1449  00B4               	movwf	eval_poly@x^(0+256)
 12958  144A  0849               	movf	(exp@x+1)^(0+256),w
 12959  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12960  144C  084A               	movf	(exp@x+2)^(0+256),w
 12961  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12962  144E  3000               	movlw	low (exp@coeff| (0+32768))
 12963  144F  00B7               	movwf	eval_poly@d^(0+256)
 12964  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 12965  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12966  1452  3009               	movlw	9
 12967  1453  00B9               	movwf	eval_poly@n^(0+256)
 12968  1454  3000               	movlw	0
 12969  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12970  1456  31A7  2718  3193   	fcall	_eval_poly
 12971  1459  0022               	movlb	2	; select bank2
 12972  145A  0834               	movf	?_eval_poly^(0+256),w
 12973  145B  00BE               	movwf	ldexp@value^(0+256)
 12974  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 12975  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 12976  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 12977  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 12978  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 12979  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 12980  1462  0852               	movf	exp@exponent^(0+256),w
 12981  1463  00C1               	movwf	ldexp@newexp^(0+256)
 12982  1464  319B  23FF  3193   	fcall	_ldexp
 12983  1467  0022               	movlb	2	; select bank2
 12984  1468  083E               	movf	?_ldexp^(0+256),w
 12985  1469  00C8               	movwf	exp@x^(0+256)
 12986  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 12987  146B  00C9               	movwf	(exp@x+1)^(0+256)
 12988  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 12989  146D  00CA               	movwf	(exp@x+2)^(0+256)
 12990  146E  0854               	movf	exp@sign^(0+256),w
 12991  146F  1903               	btfsc	3,2
 12992  1470  0008               	return
 12993  1471  30FF               	movlw	255
 12994  1472  00CF               	movwf	_exp$2606^(0+256)
 12995  1473  307F               	movlw	127
 12996  1474  00D0               	movwf	(_exp$2606+1)^(0+256)
 12997  1475  307F               	movlw	127
 12998  1476  00D1               	movwf	(_exp$2606+2)^(0+256)
 12999  1477  084A               	movf	(exp@x+2)^(0+256),w
 13000  1478  0651               	xorwf	(_exp$2606+2)^(0+256),w
 13001  1479  1D03               	skipz
 13002  147A  2C81               	goto	u8475
 13003  147B  0849               	movf	(exp@x+1)^(0+256),w
 13004  147C  0650               	xorwf	(_exp$2606+1)^(0+256),w
 13005  147D  1D03               	skipz
 13006  147E  2C81               	goto	u8475
 13007  147F  0848               	movf	exp@x^(0+256),w
 13008  1480  064F               	xorwf	_exp$2606^(0+256),w
 13009  1481                     u8475:	
 13010  1481  1D03               	skipz
 13011  1482  2C8A               	goto	l8109
 13012  1483  3000               	movlw	0
 13013  1484  00C8               	movwf	?_exp^(0+256)
 13014  1485  3000               	movlw	0
 13015  1486  00C9               	movwf	(?_exp+1)^(0+256)
 13016  1487  3000               	movlw	0
 13017  1488  00CA               	movwf	(?_exp+2)^(0+256)
 13018  1489  0008               	return
 13019  148A                     l8109:	
 13020  148A  0848               	movf	exp@x^(0+256),w
 13021  148B  0021               	movlb	1	; select bank1
 13022  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 13023  148D  0022               	movlb	2	; select bank2
 13024  148E  0849               	movf	(exp@x+1)^(0+256),w
 13025  148F  0021               	movlb	1	; select bank1
 13026  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13027  1491  0022               	movlb	2	; select bank2
 13028  1492  084A               	movf	(exp@x+2)^(0+256),w
 13029  1493  0021               	movlb	1	; select bank1
 13030  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13031  1495  3000               	movlw	0
 13032  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 13033  1497  3080               	movlw	128
 13034  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13035  1499  303F               	movlw	63
 13036  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13037  149B  319D  253D         	fcall	___ftdiv
 13038  149D  0021               	movlb	1	; select bank1
 13039  149E  084E               	movf	?___ftdiv^(0+128),w
 13040  149F  0022               	movlb	2	; select bank2
 13041  14A0  00C8               	movwf	?_exp^(0+256)
 13042  14A1  0021               	movlb	1	; select bank1
 13043  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 13044  14A3  0022               	movlb	2	; select bank2
 13045  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 13046  14A5  0021               	movlb	1	; select bank1
 13047  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 13048  14A7  0022               	movlb	2	; select bank2
 13049  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 13050  14A9  0008               	return
 13051  14AA                     __end_of_exp:	
 13052                           
 13053                           	psect	text30
 13054  1BFF                     __ptext30:	
 13055 ;; *************** function _ldexp *****************
 13056 ;; Defined at:
 13057 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  value           3   30[BANK2 ] unsigned char 
 13060 ;;  newexp          2   33[BANK2 ] int 
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;		None
 13063 ;; Return value:  Size  Location     Type
 13064 ;;                  3   30[BANK2 ] int 
 13065 ;; Registers used:
 13066 ;;		wreg, status,2, status,0, pclath, cstack
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13072 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13073 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13074 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13075 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13076 ;;Total ram usage:       10 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    4
 13079 ;; This function calls:
 13080 ;;		___ftge
 13081 ;;		___ftneg
 13082 ;; This function is called by:
 13083 ;;		_exp
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           
 13088                           ;psect for function _ldexp
 13089  1BFF                     _ldexp:	
 13090                           
 13091                           ;incstack = 0
 13092                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13093  1BFF  0022               	movlb	2	; select bank2
 13094  1C00  0840               	movf	(ldexp@value+2)^(0+256),w
 13095  1C01  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13096  1C02  043E               	iorwf	ldexp@value^(0+256),w
 13097  1C03  1D03               	skipz
 13098  1C04  2C0C               	goto	l7913
 13099  1C05  3000               	movlw	0
 13100  1C06  00BE               	movwf	?_ldexp^(0+256)
 13101  1C07  3000               	movlw	0
 13102  1C08  00BF               	movwf	(?_ldexp+1)^(0+256)
 13103  1C09  3000               	movlw	0
 13104  1C0A  00C0               	movwf	(?_ldexp+2)^(0+256)
 13105  1C0B  0008               	return
 13106  1C0C                     l7913:	
 13107  1C0C  0840               	movf	(ldexp@value^(0+256)+2),w
 13108  1C0D  397F               	andlw	127
 13109  1C0E  00C3               	movwf	??_ldexp^(0+256)
 13110  1C0F  01C4               	clrf	(??_ldexp^(0+256)+1)
 13111  1C10  35C3               	lslf	??_ldexp^(0+256),f
 13112  1C11  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13113  1C12  0843               	movf	??_ldexp^(0+256),w
 13114  1C13  07C1               	addwf	ldexp@newexp^(0+256),f
 13115  1C14  0844               	movf	(??_ldexp+1)^(0+256),w
 13116  1C15  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13117  1C16  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13118  1C17  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13119  1C18  3901               	andlw	1
 13120  1C19  00C3               	movwf	??_ldexp^(0+256)
 13121  1C1A  01C4               	clrf	(??_ldexp^(0+256)+1)
 13122  1C1B  0843               	movf	??_ldexp^(0+256),w
 13123  1C1C  07C1               	addwf	ldexp@newexp^(0+256),f
 13124  1C1D  0844               	movf	(??_ldexp+1)^(0+256),w
 13125  1C1E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13126  1C1F  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13127  1C20  2C2E               	goto	l7923
 13128  1C21  3022               	movlw	34
 13129  1C22  0024               	movlb	4	; select bank4
 13130  1C23  00D3               	movwf	_errno^(0+512)
 13131  1C24  3000               	movlw	0
 13132  1C25  00D4               	movwf	(_errno^(0+512)+1)
 13133  1C26  3000               	movlw	0
 13134  1C27  0022               	movlb	2	; select bank2
 13135  1C28  00BE               	movwf	?_ldexp^(0+256)
 13136  1C29  3000               	movlw	0
 13137  1C2A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13138  1C2B  3000               	movlw	0
 13139  1C2C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13140  1C2D  0008               	return
 13141  1C2E                     l7923:	
 13142  1C2E  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13143  1C2F  3A80               	xorlw	128
 13144  1C30  00C3               	movwf	??_ldexp^(0+256)
 13145  1C31  3081               	movlw	129
 13146  1C32  0243               	subwf	??_ldexp^(0+256),w
 13147  1C33  1D03               	skipz
 13148  1C34  2C37               	goto	u8305
 13149  1C35  3000               	movlw	0
 13150  1C36  0241               	subwf	ldexp@newexp^(0+256),w
 13151  1C37                     u8305:	
 13152  1C37  1C03               	skipc
 13153  1C38  2C7E               	goto	l7947
 13154  1C39  3022               	movlw	34
 13155  1C3A  0024               	movlb	4	; select bank4
 13156  1C3B  00D3               	movwf	_errno^(0+512)
 13157  1C3C  3000               	movlw	0
 13158  1C3D  00D4               	movwf	(_errno^(0+512)+1)
 13159  1C3E  0022               	movlb	2	; select bank2
 13160  1C3F  083E               	movf	ldexp@value^(0+256),w
 13161  1C40  0021               	movlb	1	; select bank1
 13162  1C41  00A0               	movwf	___ftge@ff1^(0+128)
 13163  1C42  0022               	movlb	2	; select bank2
 13164  1C43  083F               	movf	(ldexp@value+1)^(0+256),w
 13165  1C44  0021               	movlb	1	; select bank1
 13166  1C45  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13167  1C46  0022               	movlb	2	; select bank2
 13168  1C47  0840               	movf	(ldexp@value+2)^(0+256),w
 13169  1C48  0021               	movlb	1	; select bank1
 13170  1C49  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13171  1C4A  3000               	movlw	0
 13172  1C4B  00A3               	movwf	___ftge@ff2^(0+128)
 13173  1C4C  3000               	movlw	0
 13174  1C4D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13175  1C4E  3000               	movlw	0
 13176  1C4F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13177  1C50  31A2  22FF  319B   	fcall	___ftge
 13178  1C53  1803               	btfsc	3,0
 13179  1C54  2C76               	goto	l7943
 13180  1C55  30FF               	movlw	255
 13181  1C56  0022               	movlb	2	; select bank2
 13182  1C57  00C5               	movwf	_ldexp$2638^(0+256)
 13183  1C58  307F               	movlw	127
 13184  1C59  00C6               	movwf	(_ldexp$2638+1)^(0+256)
 13185  1C5A  307F               	movlw	127
 13186  1C5B  00C7               	movwf	(_ldexp$2638+2)^(0+256)
 13187  1C5C  0845               	movf	_ldexp$2638^(0+256),w
 13188  1C5D  0021               	movlb	1	; select bank1
 13189  1C5E  00BE               	movwf	___ftneg@f1^(0+128)
 13190  1C5F  0022               	movlb	2	; select bank2
 13191  1C60  0846               	movf	(_ldexp$2638+1)^(0+256),w
 13192  1C61  0021               	movlb	1	; select bank1
 13193  1C62  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13194  1C63  0022               	movlb	2	; select bank2
 13195  1C64  0847               	movf	(_ldexp$2638+2)^(0+256),w
 13196  1C65  0021               	movlb	1	; select bank1
 13197  1C66  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13198  1C67  31AF  2732         	fcall	___ftneg
 13199  1C69  0021               	movlb	1	; select bank1
 13200  1C6A  083E               	movf	?___ftneg^(0+128),w
 13201  1C6B  0022               	movlb	2	; select bank2
 13202  1C6C  00BE               	movwf	?_ldexp^(0+256)
 13203  1C6D  0021               	movlb	1	; select bank1
 13204  1C6E  083F               	movf	(?___ftneg+1)^(0+128),w
 13205  1C6F  0022               	movlb	2	; select bank2
 13206  1C70  00BF               	movwf	(?_ldexp+1)^(0+256)
 13207  1C71  0021               	movlb	1	; select bank1
 13208  1C72  0840               	movf	(?___ftneg+2)^(0+128),w
 13209  1C73  0022               	movlb	2	; select bank2
 13210  1C74  00C0               	movwf	(?_ldexp+2)^(0+256)
 13211  1C75  0008               	return
 13212  1C76                     l7943:	
 13213  1C76  30FF               	movlw	255
 13214  1C77  0022               	movlb	2	; select bank2
 13215  1C78  00BE               	movwf	?_ldexp^(0+256)
 13216  1C79  307F               	movlw	127
 13217  1C7A  00BF               	movwf	(?_ldexp+1)^(0+256)
 13218  1C7B  307F               	movlw	127
 13219  1C7C  00C0               	movwf	(?_ldexp+2)^(0+256)
 13220  1C7D  0008               	return
 13221  1C7E                     l7947:	
 13222  1C7E  0022               	movlb	2	; select bank2
 13223  1C7F  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13224  1C80  00C4               	movwf	(??_ldexp^(0+256)+1)
 13225  1C81  0841               	movf	ldexp@newexp^(0+256),w
 13226  1C82  00C3               	movwf	??_ldexp^(0+256)
 13227  1C83  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13228  1C84  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13229  1C85  0CC3               	rrf	??_ldexp^(0+256),f
 13230  1C86  0840               	movf	(ldexp@value^(0+256)+2),w
 13231  1C87  0643               	xorwf	??_ldexp^(0+256),w
 13232  1C88  3980               	andlw	-128
 13233  1C89  0643               	xorwf	??_ldexp^(0+256),w
 13234  1C8A  00C0               	movwf	(ldexp@value^(0+256)+2)
 13235  1C8B  0841               	movf	ldexp@newexp^(0+256),w
 13236  1C8C  3901               	andlw	1
 13237  1C8D  00C3               	movwf	??_ldexp^(0+256)
 13238  1C8E  0CC3               	rrf	??_ldexp^(0+256),f
 13239  1C8F  0CC3               	rrf	??_ldexp^(0+256),f
 13240  1C90  083F               	movf	(ldexp@value^(0+256)+1),w
 13241  1C91  0643               	xorwf	??_ldexp^(0+256),w
 13242  1C92  397F               	andlw	-129
 13243  1C93  0643               	xorwf	??_ldexp^(0+256),w
 13244  1C94  00BF               	movwf	(ldexp@value^(0+256)+1)
 13245  1C95  0008               	return
 13246  1C96                     __end_of_ldexp:	
 13247                           
 13248                           	psect	text31
 13249  2103                     __ptext31:	
 13250 ;; *************** function ___lltoft *****************
 13251 ;; Defined at:
 13252 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;  c               4    8[BANK1 ] unsigned long 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  exp             1   13[BANK1 ] unsigned char 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  3    8[BANK1 ] float 
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, status,0, pclath, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13266 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13267 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13268 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13269 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13270 ;;Total ram usage:        6 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    4
 13273 ;; This function calls:
 13274 ;;		___ftpack
 13275 ;; This function is called by:
 13276 ;;		_pow
 13277 ;; This function uses a non-reentrant model
 13278 ;;
 13279                           
 13280                           
 13281                           ;psect for function ___lltoft
 13282  2103                     ___lltoft:	
 13283                           
 13284                           ;incstack = 0
 13285                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13286  2103  308E               	movlw	142
 13287  2104  0021               	movlb	1	; select bank1
 13288  2105  00AC               	movwf	??___lltoft^(0+128)
 13289  2106  082C               	movf	??___lltoft^(0+128),w
 13290  2107  00AD               	movwf	___lltoft@exp^(0+128)
 13291  2108                     l8031:	
 13292  2108  30FF               	movlw	255
 13293  2109  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13294  210A  1903               	btfsc	3,2
 13295  210B  2918               	goto	l8033
 13296  210C  3001               	movlw	1
 13297  210D                     u8365:	
 13298  210D  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13299  210E  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13300  210F  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13301  2110  0CA8               	rrf	___lltoft@c^(0+128),f
 13302  2111  0B89               	decfsz	9,f
 13303  2112  290D               	goto	u8365
 13304  2113  3001               	movlw	1
 13305  2114  00AC               	movwf	??___lltoft^(0+128)
 13306  2115  082C               	movf	??___lltoft^(0+128),w
 13307  2116  07AD               	addwf	___lltoft@exp^(0+128),f
 13308  2117  2908               	goto	l8031
 13309  2118                     l8033:	
 13310  2118  0828               	movf	___lltoft@c^(0+128),w
 13311  2119  00A0               	movwf	___ftpack@arg^(0+128)
 13312  211A  0829               	movf	(___lltoft@c+1)^(0+128),w
 13313  211B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13314  211C  082A               	movf	(___lltoft@c+2)^(0+128),w
 13315  211D  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13316  211E  082D               	movf	___lltoft@exp^(0+128),w
 13317  211F  00AC               	movwf	??___lltoft^(0+128)
 13318  2120  082C               	movf	??___lltoft^(0+128),w
 13319  2121  00A3               	movwf	___ftpack@exp^(0+128)
 13320  2122  01A4               	clrf	___ftpack@sign^(0+128)
 13321  2123  3188  2002         	fcall	___ftpack
 13322  2125  0021               	movlb	1	; select bank1
 13323  2126  0820               	movf	?___ftpack^(0+128),w
 13324  2127  00A8               	movwf	?___lltoft^(0+128)
 13325  2128  0821               	movf	(?___ftpack+1)^(0+128),w
 13326  2129  00A9               	movwf	(?___lltoft+1)^(0+128)
 13327  212A  0822               	movf	(?___ftpack+2)^(0+128),w
 13328  212B  00AA               	movwf	(?___lltoft+2)^(0+128)
 13329  212C  0008               	return
 13330  212D                     __end_of___lltoft:	
 13331                           
 13332                           	psect	text32
 13333  25D5                     __ptext32:	
 13334 ;; *************** function _read_top_tactile *****************
 13335 ;; Defined at:
 13336 ;;		line 50 in file "tactiles.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;		None
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;		None
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  1    wreg      void 
 13343 ;; Registers used:
 13344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13352 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13353 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13354 ;;Total ram usage:        1 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    5
 13357 ;; This function calls:
 13358 ;;		_set_leds_top
 13359 ;;		_wait_ms
 13360 ;; This function is called by:
 13361 ;;		_main
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           
 13366                           ;psect for function _read_top_tactile
 13367  25D5                     _read_top_tactile:	
 13368                           
 13369                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13370                           
 13371                           ;incstack = 0
 13372                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13373  25D5  0020               	movlb	0	; select bank0
 13374  25D6  1A8F               	btfsc	15,5	;volatile
 13375  25D7  2DDF               	goto	l8827
 13376                           
 13377                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13378  25D8  0023               	movlb	3	; select bank3
 13379  25D9  0848               	movf	_topTactile_pressed^(0+384),w
 13380  25DA  1903               	btfsc	3,2
 13381  25DB  2DEA               	goto	l974
 13382                           
 13383                           ;tactiles.c: 62: topTactile_pressed--;
 13384  25DC  3001               	movlw	1
 13385  25DD  02C8               	subwf	_topTactile_pressed^(0+384),f
 13386                           
 13387                           ;tactiles.c: 63: }
 13388                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13389  25DE  2DEA               	goto	l974
 13390  25DF                     l8827:	
 13391  25DF  3019               	movlw	25
 13392  25E0  0023               	movlb	3	; select bank3
 13393  25E1  0248               	subwf	_topTactile_pressed^(0+384),w
 13394  25E2  1803               	skipnc
 13395  25E3  2DEA               	goto	l974
 13396                           
 13397                           ;tactiles.c: 65: topTactile_pressed++;
 13398  25E4  3001               	movlw	1
 13399  25E5  0021               	movlb	1	; select bank1
 13400  25E6  00B2               	movwf	??_read_top_tactile^(0+128)
 13401  25E7  0832               	movf	??_read_top_tactile^(0+128),w
 13402  25E8  0023               	movlb	3	; select bank3
 13403  25E9  07C8               	addwf	_topTactile_pressed^(0+384),f
 13404  25EA                     l974:	
 13405                           
 13406                           ;tactiles.c: 66: }
 13407                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13408  25EA  0848               	movf	_topTactile_pressed^(0+384),w
 13409  25EB  1D03               	btfss	3,2
 13410  25EC  0008               	return
 13411                           
 13412                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13413  25ED  0020               	movlb	0	; select bank0
 13414  25EE  0851               	movf	_top_push_state,w
 13415  25EF  3E01               	addlw	1
 13416  25F0  00D1               	movwf	_top_push_state
 13417  25F1  3000               	movlw	0
 13418  25F2  3D52               	addwfc	_top_push_state+1,w
 13419  25F3  00D2               	movwf	_top_push_state+1
 13420                           
 13421                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13422  25F4  0852               	movf	_top_push_state+1,w
 13423  25F5  3A80               	xorlw	128
 13424  25F6  0021               	movlb	1	; select bank1
 13425  25F7  00B2               	movwf	??_read_top_tactile^(0+128)
 13426  25F8  3080               	movlw	128
 13427  25F9  0232               	subwf	??_read_top_tactile^(0+128),w
 13428  25FA  1D03               	skipz
 13429  25FB  2DFF               	goto	u9705
 13430  25FC  3007               	movlw	7
 13431  25FD  0020               	movlb	0	; select bank0
 13432  25FE  0251               	subwf	_top_push_state,w
 13433  25FF                     u9705:	
 13434  25FF  1C03               	skipc
 13435  2600  2E06               	goto	l8837
 13436                           
 13437                           ;tactiles.c: 75: top_push_state = 1;
 13438  2601  3001               	movlw	1
 13439  2602  0020               	movlb	0	; select bank0
 13440  2603  00D1               	movwf	_top_push_state
 13441  2604  3000               	movlw	0
 13442  2605  00D2               	movwf	_top_push_state+1
 13443  2606                     l8837:	
 13444                           
 13445                           ;tactiles.c: 76: }
 13446                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13447  2606  0020               	movlb	0	; select bank0
 13448  2607  0852               	movf	_top_push_state+1,w
 13449  2608  0021               	movlb	1	; select bank1
 13450  2609  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13451  260A  0020               	movlb	0	; select bank0
 13452  260B  0851               	movf	_top_push_state,w
 13453  260C  0021               	movlb	1	; select bank1
 13454  260D  00A0               	movwf	set_leds_top@x^(0+128)
 13455  260E  3001               	movlw	1
 13456  260F  00A2               	movwf	set_leds_top@ledState^(0+128)
 13457  2610  3000               	movlw	0
 13458  2611  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13459  2612  31A6  26C4  31A5   	fcall	_set_leds_top
 13460                           
 13461                           ;tactiles.c: 78: delay_time_changed = 1;
 13462  2615  0023               	movlb	3	; select bank3
 13463  2616  01DB               	clrf	_delay_time_changed^(0+384)
 13464  2617  0ADB               	incf	_delay_time_changed^(0+384),f
 13465  2618                     l978:	
 13466                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13467                           
 13468  2618  0020               	movlb	0	; select bank0
 13469  2619  1E8F               	btfss	15,5	;volatile
 13470  261A  2E18               	goto	l978
 13471                           
 13472                           ;tactiles.c: 82: }
 13473                           ;tactiles.c: 83: wait_ms(20);
 13474  261B  3014               	movlw	20
 13475  261C  0021               	movlb	1	; select bank1
 13476  261D  00AC               	movwf	wait_ms@timeSec^(0+128)
 13477  261E  3000               	movlw	0
 13478  261F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13479  2620  31A1  21EA         	fcall	_wait_ms
 13480  2622  0008               	return
 13481  2623                     __end_of_read_top_tactile:	
 13482                           
 13483                           	psect	text33
 13484  258B                     __ptext33:	
 13485 ;; *************** function _read_bottom_tactile *****************
 13486 ;; Defined at:
 13487 ;;		line 18 in file "tactiles.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;		None
 13490 ;; Auto vars:     Size  Location     Type
 13491 ;;		None
 13492 ;; Return value:  Size  Location     Type
 13493 ;;                  1    wreg      void 
 13494 ;; Registers used:
 13495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13496 ;; Tracked objects:
 13497 ;;		On entry : 0/0
 13498 ;;		On exit  : 0/0
 13499 ;;		Unchanged: 0/0
 13500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13503 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13504 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13505 ;;Total ram usage:        1 bytes
 13506 ;; Hardware stack levels used:    1
 13507 ;; Hardware stack levels required when called:    5
 13508 ;; This function calls:
 13509 ;;		_set_leds_bottom
 13510 ;;		_wait_ms
 13511 ;; This function is called by:
 13512 ;;		_main
 13513 ;; This function uses a non-reentrant model
 13514 ;;
 13515                           
 13516                           
 13517                           ;psect for function _read_bottom_tactile
 13518  258B                     _read_bottom_tactile:	
 13519                           
 13520                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13521                           
 13522                           ;incstack = 0
 13523                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13524  258B  0020               	movlb	0	; select bank0
 13525  258C  1B0F               	btfsc	15,6	;volatile
 13526  258D  2D95               	goto	l8805
 13527                           
 13528                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13529  258E  0023               	movlb	3	; select bank3
 13530  258F  083D               	movf	_bottomTactile_pressed^(0+384),w
 13531  2590  1903               	btfsc	3,2
 13532  2591  2DA0               	goto	l962
 13533                           
 13534                           ;tactiles.c: 29: bottomTactile_pressed--;
 13535  2592  3001               	movlw	1
 13536  2593  02BD               	subwf	_bottomTactile_pressed^(0+384),f
 13537                           
 13538                           ;tactiles.c: 30: }
 13539                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13540  2594  2DA0               	goto	l962
 13541  2595                     l8805:	
 13542  2595  3019               	movlw	25
 13543  2596  0023               	movlb	3	; select bank3
 13544  2597  023D               	subwf	_bottomTactile_pressed^(0+384),w
 13545  2598  1803               	skipnc
 13546  2599  2DA0               	goto	l962
 13547                           
 13548                           ;tactiles.c: 32: bottomTactile_pressed++;
 13549  259A  3001               	movlw	1
 13550  259B  0021               	movlb	1	; select bank1
 13551  259C  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13552  259D  0832               	movf	??_read_bottom_tactile^(0+128),w
 13553  259E  0023               	movlb	3	; select bank3
 13554  259F  07BD               	addwf	_bottomTactile_pressed^(0+384),f
 13555  25A0                     l962:	
 13556                           
 13557                           ;tactiles.c: 33: }
 13558                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13559  25A0  083D               	movf	_bottomTactile_pressed^(0+384),w
 13560  25A1  1D03               	btfss	3,2
 13561  25A2  0008               	return
 13562                           
 13563                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13564  25A3  0020               	movlb	0	; select bank0
 13565  25A4  084D               	movf	_bottom_push_state,w
 13566  25A5  3E01               	addlw	1
 13567  25A6  00CD               	movwf	_bottom_push_state
 13568  25A7  3000               	movlw	0
 13569  25A8  3D4E               	addwfc	_bottom_push_state+1,w
 13570  25A9  00CE               	movwf	_bottom_push_state+1
 13571                           
 13572                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13573  25AA  084E               	movf	_bottom_push_state+1,w
 13574  25AB  3A80               	xorlw	128
 13575  25AC  0021               	movlb	1	; select bank1
 13576  25AD  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13577  25AE  3080               	movlw	128
 13578  25AF  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13579  25B0  1D03               	skipz
 13580  25B1  2DB5               	goto	u9645
 13581  25B2  3006               	movlw	6
 13582  25B3  0020               	movlb	0	; select bank0
 13583  25B4  024D               	subwf	_bottom_push_state,w
 13584  25B5                     u9645:	
 13585  25B5  1C03               	skipc
 13586  25B6  2DBC               	goto	l8815
 13587                           
 13588                           ;tactiles.c: 39: bottom_push_state = 1;
 13589  25B7  3001               	movlw	1
 13590  25B8  0020               	movlb	0	; select bank0
 13591  25B9  00CD               	movwf	_bottom_push_state
 13592  25BA  3000               	movlw	0
 13593  25BB  00CE               	movwf	_bottom_push_state+1
 13594  25BC                     l8815:	
 13595                           
 13596                           ;tactiles.c: 40: }
 13597                           ;tactiles.c: 41: modulation_changed = 1;
 13598  25BC  0023               	movlb	3	; select bank3
 13599  25BD  01C3               	clrf	_modulation_changed^(0+384)
 13600  25BE  0AC3               	incf	_modulation_changed^(0+384),f
 13601                           
 13602                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13603  25BF  0020               	movlb	0	; select bank0
 13604  25C0  084E               	movf	_bottom_push_state+1,w
 13605  25C1  0021               	movlb	1	; select bank1
 13606  25C2  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13607  25C3  0020               	movlb	0	; select bank0
 13608  25C4  084D               	movf	_bottom_push_state,w
 13609  25C5  0021               	movlb	1	; select bank1
 13610  25C6  00A0               	movwf	set_leds_bottom@x^(0+128)
 13611  25C7  31A2  22C4  31A5   	fcall	_set_leds_bottom
 13612  25CA                     l966:	
 13613                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13614                           
 13615  25CA  0020               	movlb	0	; select bank0
 13616  25CB  1F0F               	btfss	15,6	;volatile
 13617  25CC  2DCA               	goto	l966
 13618                           
 13619                           ;tactiles.c: 45: }
 13620                           ;tactiles.c: 46: wait_ms(20);
 13621  25CD  3014               	movlw	20
 13622  25CE  0021               	movlb	1	; select bank1
 13623  25CF  00AC               	movwf	wait_ms@timeSec^(0+128)
 13624  25D0  3000               	movlw	0
 13625  25D1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13626  25D2  31A1  21EA         	fcall	_wait_ms
 13627  25D4  0008               	return
 13628  25D5                     __end_of_read_bottom_tactile:	
 13629                           
 13630                           	psect	text34
 13631  1AE3                     __ptext34:	
 13632 ;; *************** function _map *****************
 13633 ;; Defined at:
 13634 ;;		line 177 in file "user.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;  x               3   62[BANK1 ] float 
 13637 ;;  in_min          3   65[BANK1 ] float 
 13638 ;;  in_max          3   68[BANK1 ] float 
 13639 ;;  out_min         3   71[BANK1 ] float 
 13640 ;;  out_max         3   74[BANK1 ] float 
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;		None
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  3   62[BANK1 ] float 
 13645 ;; Registers used:
 13646 ;;		wreg, status,2, status,0, pclath, cstack
 13647 ;; Tracked objects:
 13648 ;;		On entry : 0/0
 13649 ;;		On exit  : 0/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13652 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13653 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13655 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13656 ;;Total ram usage:       18 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:    5
 13659 ;; This function calls:
 13660 ;;		___ftadd
 13661 ;;		___ftdiv
 13662 ;;		___ftmul
 13663 ;;		___ftneg
 13664 ;; This function is called by:
 13665 ;;		_main
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           
 13670                           ;psect for function _map
 13671  1AE3                     _map:	
 13672                           
 13673                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13674                           
 13675                           ;incstack = 0
 13676                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13677  1AE3  0021               	movlb	1	; select bank1
 13678  1AE4  0864               	movf	map@in_max^(0+128),w
 13679  1AE5  00C1               	movwf	___ftadd@f1^(0+128)
 13680  1AE6  0865               	movf	(map@in_max+1)^(0+128),w
 13681  1AE7  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13682  1AE8  0866               	movf	(map@in_max+2)^(0+128),w
 13683  1AE9  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13684  1AEA  0861               	movf	map@in_min^(0+128),w
 13685  1AEB  00BE               	movwf	___ftneg@f1^(0+128)
 13686  1AEC  0862               	movf	(map@in_min+1)^(0+128),w
 13687  1AED  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13688  1AEE  0863               	movf	(map@in_min+2)^(0+128),w
 13689  1AEF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13690  1AF0  31AF  2732  319A   	fcall	___ftneg
 13691  1AF3  0021               	movlb	1	; select bank1
 13692  1AF4  083E               	movf	?___ftneg^(0+128),w
 13693  1AF5  00C4               	movwf	___ftadd@f2^(0+128)
 13694  1AF6  083F               	movf	(?___ftneg+1)^(0+128),w
 13695  1AF7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13696  1AF8  0840               	movf	(?___ftneg+2)^(0+128),w
 13697  1AF9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13698  1AFA  3191  2135  319A   	fcall	___ftadd
 13699  1AFD  0021               	movlb	1	; select bank1
 13700  1AFE  0841               	movf	?___ftadd^(0+128),w
 13701  1AFF  00CE               	movwf	___ftdiv@f2^(0+128)
 13702  1B00  0842               	movf	(?___ftadd+1)^(0+128),w
 13703  1B01  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13704  1B02  0843               	movf	(?___ftadd+2)^(0+128),w
 13705  1B03  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13706  1B04  086A               	movf	map@out_max^(0+128),w
 13707  1B05  00C1               	movwf	___ftadd@f1^(0+128)
 13708  1B06  086B               	movf	(map@out_max+1)^(0+128),w
 13709  1B07  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13710  1B08  086C               	movf	(map@out_max+2)^(0+128),w
 13711  1B09  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13712  1B0A  0867               	movf	map@out_min^(0+128),w
 13713  1B0B  00BE               	movwf	___ftneg@f1^(0+128)
 13714  1B0C  0868               	movf	(map@out_min+1)^(0+128),w
 13715  1B0D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13716  1B0E  0869               	movf	(map@out_min+2)^(0+128),w
 13717  1B0F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13718  1B10  31AF  2732  319A   	fcall	___ftneg
 13719  1B13  0021               	movlb	1	; select bank1
 13720  1B14  083E               	movf	?___ftneg^(0+128),w
 13721  1B15  00C4               	movwf	___ftadd@f2^(0+128)
 13722  1B16  083F               	movf	(?___ftneg+1)^(0+128),w
 13723  1B17  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13724  1B18  0840               	movf	(?___ftneg+2)^(0+128),w
 13725  1B19  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13726  1B1A  3191  2135  319A   	fcall	___ftadd
 13727  1B1D  0021               	movlb	1	; select bank1
 13728  1B1E  0841               	movf	?___ftadd^(0+128),w
 13729  1B1F  00AE               	movwf	___ftmul@f1^(0+128)
 13730  1B20  0842               	movf	(?___ftadd+1)^(0+128),w
 13731  1B21  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13732  1B22  0843               	movf	(?___ftadd+2)^(0+128),w
 13733  1B23  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13734  1B24  085E               	movf	map@x^(0+128),w
 13735  1B25  00C1               	movwf	___ftadd@f1^(0+128)
 13736  1B26  085F               	movf	(map@x+1)^(0+128),w
 13737  1B27  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13738  1B28  0860               	movf	(map@x+2)^(0+128),w
 13739  1B29  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13740  1B2A  0861               	movf	map@in_min^(0+128),w
 13741  1B2B  00BE               	movwf	___ftneg@f1^(0+128)
 13742  1B2C  0862               	movf	(map@in_min+1)^(0+128),w
 13743  1B2D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13744  1B2E  0863               	movf	(map@in_min+2)^(0+128),w
 13745  1B2F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13746  1B30  31AF  2732  319A   	fcall	___ftneg
 13747  1B33  0021               	movlb	1	; select bank1
 13748  1B34  083E               	movf	?___ftneg^(0+128),w
 13749  1B35  00C4               	movwf	___ftadd@f2^(0+128)
 13750  1B36  083F               	movf	(?___ftneg+1)^(0+128),w
 13751  1B37  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13752  1B38  0840               	movf	(?___ftneg+2)^(0+128),w
 13753  1B39  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13754  1B3A  3191  2135  319A   	fcall	___ftadd
 13755  1B3D  0021               	movlb	1	; select bank1
 13756  1B3E  0841               	movf	?___ftadd^(0+128),w
 13757  1B3F  00B1               	movwf	___ftmul@f2^(0+128)
 13758  1B40  0842               	movf	(?___ftadd+1)^(0+128),w
 13759  1B41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13760  1B42  0843               	movf	(?___ftadd+2)^(0+128),w
 13761  1B43  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13762  1B44  319E  2691  319A   	fcall	___ftmul
 13763  1B47  0021               	movlb	1	; select bank1
 13764  1B48  082E               	movf	?___ftmul^(0+128),w
 13765  1B49  00D1               	movwf	___ftdiv@f1^(0+128)
 13766  1B4A  082F               	movf	(?___ftmul+1)^(0+128),w
 13767  1B4B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13768  1B4C  0830               	movf	(?___ftmul+2)^(0+128),w
 13769  1B4D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13770  1B4E  319D  253D  319A   	fcall	___ftdiv
 13771  1B51  0021               	movlb	1	; select bank1
 13772  1B52  084E               	movf	?___ftdiv^(0+128),w
 13773  1B53  00ED               	movwf	_map$2832^(0+128)
 13774  1B54  084F               	movf	(?___ftdiv+1)^(0+128),w
 13775  1B55  00EE               	movwf	(_map$2832+1)^(0+128)
 13776  1B56  0850               	movf	(?___ftdiv+2)^(0+128),w
 13777  1B57  00EF               	movwf	(_map$2832+2)^(0+128)
 13778                           
 13779                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13780  1B58  0867               	movf	map@out_min^(0+128),w
 13781  1B59  00C1               	movwf	___ftadd@f1^(0+128)
 13782  1B5A  0868               	movf	(map@out_min+1)^(0+128),w
 13783  1B5B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13784  1B5C  0869               	movf	(map@out_min+2)^(0+128),w
 13785  1B5D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13786  1B5E  086D               	movf	_map$2832^(0+128),w
 13787  1B5F  00C4               	movwf	___ftadd@f2^(0+128)
 13788  1B60  086E               	movf	(_map$2832+1)^(0+128),w
 13789  1B61  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13790  1B62  086F               	movf	(_map$2832+2)^(0+128),w
 13791  1B63  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13792  1B64  3191  2135         	fcall	___ftadd
 13793  1B66  0021               	movlb	1	; select bank1
 13794  1B67  0841               	movf	?___ftadd^(0+128),w
 13795  1B68  00DE               	movwf	?_map^(0+128)
 13796  1B69  0842               	movf	(?___ftadd+1)^(0+128),w
 13797  1B6A  00DF               	movwf	(?_map+1)^(0+128)
 13798  1B6B  0843               	movf	(?___ftadd+2)^(0+128),w
 13799  1B6C  00E0               	movwf	(?_map+2)^(0+128)
 13800  1B6D  0008               	return
 13801  1B6E                     __end_of_map:	
 13802                           
 13803                           	psect	text35
 13804  2F53                     __ptext35:	
 13805 ;; *************** function _initSwitchBypass *****************
 13806 ;; Defined at:
 13807 ;;		line 29 in file "SwitchBypass.c"
 13808 ;; Parameters:    Size  Location     Type
 13809 ;;		None
 13810 ;; Auto vars:     Size  Location     Type
 13811 ;;  initState       2   26[BANK1 ] int 
 13812 ;; Return value:  Size  Location     Type
 13813 ;;                  1    wreg      void 
 13814 ;; Registers used:
 13815 ;;		wreg, status,2, status,0, pclath, cstack
 13816 ;; Tracked objects:
 13817 ;;		On entry : 0/0
 13818 ;;		On exit  : 0/0
 13819 ;;		Unchanged: 0/0
 13820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13822 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13824 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13825 ;;Total ram usage:        2 bytes
 13826 ;; Hardware stack levels used:    1
 13827 ;; Hardware stack levels required when called:    7
 13828 ;; This function calls:
 13829 ;;		_getSwitchBypassState
 13830 ;;		_setSwitchBypassState
 13831 ;; This function is called by:
 13832 ;;		_main
 13833 ;; This function uses a non-reentrant model
 13834 ;;
 13835                           
 13836                           
 13837                           ;psect for function _initSwitchBypass
 13838  2F53                     _initSwitchBypass:	
 13839                           
 13840                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 13841                           
 13842                           ;incstack = 0
 13843                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 13844  2F53  31AF  271E  31AF   	fcall	_getSwitchBypassState
 13845  2F56  0021               	movlb	1	; select bank1
 13846  2F57  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 13847  2F58  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 13848  2F59  0820               	movf	?_getSwitchBypassState^(0+128),w
 13849  2F5A  00BA               	movwf	initSwitchBypass@initState^(0+128)
 13850                           
 13851                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 13852  2F5B  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 13853  2F5C  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 13854  2F5D  083A               	movf	initSwitchBypass@initState^(0+128),w
 13855  2F5E  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 13856  2F5F  31A0  201E         	fcall	_setSwitchBypassState
 13857  2F61  0008               	return
 13858  2F62                     __end_of_initSwitchBypass:	
 13859                           
 13860                           	psect	text36
 13861  201E                     __ptext36:	
 13862 ;; *************** function _setSwitchBypassState *****************
 13863 ;; Defined at:
 13864 ;;		line 140 in file "SwitchBypass.c"
 13865 ;; Parameters:    Size  Location     Type
 13866 ;;  f_state         2   22[BANK1 ] int 
 13867 ;; Auto vars:     Size  Location     Type
 13868 ;;		None
 13869 ;; Return value:  Size  Location     Type
 13870 ;;                  1    wreg      void 
 13871 ;; Registers used:
 13872 ;;		wreg, status,2, status,0, pclath, cstack
 13873 ;; Tracked objects:
 13874 ;;		On entry : 0/0
 13875 ;;		On exit  : 0/0
 13876 ;;		Unchanged: 0/0
 13877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13878 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13880 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13881 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13882 ;;Total ram usage:        4 bytes
 13883 ;; Hardware stack levels used:    1
 13884 ;; Hardware stack levels required when called:    6
 13885 ;; This function calls:
 13886 ;;		_setSwitchBypassRelays
 13887 ;; This function is called by:
 13888 ;;		_initSwitchBypass
 13889 ;;		_updateSwitchBypass
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           
 13894                           ;psect for function _setSwitchBypassState
 13895  201E                     _setSwitchBypassState:	
 13896                           
 13897                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 13898                           
 13899                           ;incstack = 0
 13900                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 13901  201E  0020               	movlb	0	; select bank0
 13902  201F  0857               	movf	_switchBypass_state,w
 13903  2020  0021               	movlb	1	; select bank1
 13904  2021  00B8               	movwf	??_setSwitchBypassState^(0+128)
 13905  2022  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13906  2023  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13907  2024  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 13908  2025  1D03               	skipz
 13909  2026  2829               	goto	u8565
 13910  2027  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 13911  2028  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 13912  2029                     u8565:	
 13913  2029  1903               	btfsc	3,2
 13914  202A  0008               	return
 13915                           
 13916                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 13917  202B  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 13918  202C  0022               	movlb	2	; select bank2
 13919  202D  1C03               	skipc
 13920  202E  110D               	bcf	13,2	;volatile
 13921  202F  1803               	skipnc
 13922  2030  150D               	bsf	13,2	;volatile
 13923                           
 13924                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 13925  2031  118D               	bcf	13,3	;volatile
 13926                           
 13927                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 13928  2032  0021               	movlb	1	; select bank1
 13929  2033  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13930  2034  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 13931  2035  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 13932  2036  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 13933  2037  31A2  221C         	fcall	_setSwitchBypassRelays
 13934  2039  0008               	return
 13935  203A                     __end_of_setSwitchBypassState:	
 13936                           
 13937                           	psect	text37
 13938  221C                     __ptext37:	
 13939 ;; *************** function _setSwitchBypassRelays *****************
 13940 ;; Defined at:
 13941 ;;		line 148 in file "SwitchBypass.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;  f_state         2   18[BANK1 ] int 
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;		None
 13946 ;; Return value:  Size  Location     Type
 13947 ;;                  1    wreg      void 
 13948 ;; Registers used:
 13949 ;;		wreg, status,2, status,0, pclath, cstack
 13950 ;; Tracked objects:
 13951 ;;		On entry : 0/0
 13952 ;;		On exit  : 0/0
 13953 ;;		Unchanged: 0/0
 13954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13955 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13957 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13958 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13959 ;;Total ram usage:        4 bytes
 13960 ;; Hardware stack levels used:    1
 13961 ;; Hardware stack levels required when called:    5
 13962 ;; This function calls:
 13963 ;;		_updateSwitchBypassState
 13964 ;;		_wait_ms
 13965 ;; This function is called by:
 13966 ;;		_updateSwitchBypass
 13967 ;;		_setSwitchBypassState
 13968 ;; This function uses a non-reentrant model
 13969 ;;
 13970                           
 13971                           
 13972                           ;psect for function _setSwitchBypassRelays
 13973  221C                     _setSwitchBypassRelays:	
 13974                           
 13975                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 13976                           
 13977                           ;incstack = 0
 13978                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 13979  221C  0021               	movlb	1	; select bank1
 13980  221D  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 13981  221E  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 13982  221F  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 13983  2220  0020               	movlb	0	; select bank0
 13984  2221  00D7               	movwf	_switchBypass_state
 13985                           
 13986                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 13987  2222  0021               	movlb	1	; select bank1
 13988  2223  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 13989  2224  0027               	movlb	7	; select bank7
 13990  2225  1C03               	skipc
 13991  2226  110D               	bcf	13,2	;volatile
 13992  2227  1803               	skipnc
 13993  2228  150D               	bsf	13,2	;volatile
 13994                           
 13995                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 13996  2229  0021               	movlb	1	; select bank1
 13997  222A  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 13998  222B  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 13999  222C  1D03               	btfss	3,2
 14000  222D  2A31               	goto	u8320
 14001  222E  0027               	movlb	7	; select bank7
 14002  222F  148D               	bsf	13,1	;volatile
 14003  2230  2A33               	goto	l7991
 14004  2231                     u8320:	
 14005  2231  0027               	movlb	7	; select bank7
 14006  2232  108D               	bcf	13,1	;volatile
 14007  2233                     l7991:	
 14008                           
 14009                           ;SwitchBypass.c: 153: wait_ms(20);
 14010  2233  3014               	movlw	20
 14011  2234  0021               	movlb	1	; select bank1
 14012  2235  00AC               	movwf	wait_ms@timeSec^(0+128)
 14013  2236  3000               	movlw	0
 14014  2237  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14015  2238  31A1  21EA  31A2   	fcall	_wait_ms
 14016                           
 14017                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14018  223B  0027               	movlb	7	; select bank7
 14019  223C  110D               	bcf	13,2	;volatile
 14020                           
 14021                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14022  223D  108D               	bcf	13,1	;volatile
 14023                           
 14024                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14025  223E  0020               	movlb	0	; select bank0
 14026  223F  0857               	movf	_switchBypass_state,w
 14027  2240  0021               	movlb	1	; select bank1
 14028  2241  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14029  2242  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14030  2243  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14031  2244  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14032  2245  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14033  2246  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14034  2247  3187  27FE  31A2   	fcall	_updateSwitchBypassState
 14035                           
 14036                           ;SwitchBypass.c: 159: wait_ms(20);
 14037  224A  3014               	movlw	20
 14038  224B  0021               	movlb	1	; select bank1
 14039  224C  00AC               	movwf	wait_ms@timeSec^(0+128)
 14040  224D  3000               	movlw	0
 14041  224E  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14042  224F  31A1  21EA         	fcall	_wait_ms
 14043  2251  0008               	return
 14044  2252                     __end_of_setSwitchBypassRelays:	
 14045                           
 14046                           	psect	text38
 14047  21EA                     __ptext38:	
 14048 ;; *************** function _wait_ms *****************
 14049 ;; Defined at:
 14050 ;;		line 23 in file "system.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;  timemsl         4   14[BANK1 ] long 
 14055 ;; Return value:  Size  Location     Type
 14056 ;;                  1    wreg      void 
 14057 ;; Registers used:
 14058 ;;		wreg, status,2, status,0, pclath, cstack
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14064 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14065 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14067 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14068 ;;Total ram usage:        6 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    4
 14071 ;; This function calls:
 14072 ;;		___lmul
 14073 ;; This function is called by:
 14074 ;;		_ring_tactiles
 14075 ;;		_solidring_tactiles
 14076 ;;		_read_bottom_tactile
 14077 ;;		_read_top_tactile
 14078 ;;		_setSwitchBypassRelays
 14079 ;;		_setDoublePressState
 14080 ;;		_showError_Alternating
 14081 ;;		_show_error
 14082 ;;		_show_cancel
 14083 ;;		_star_tactiles
 14084 ;;		_initExpModeState
 14085 ;; This function uses a non-reentrant model
 14086 ;;
 14087                           
 14088                           
 14089                           ;psect for function _wait_ms
 14090  21EA                     _wait_ms:	
 14091                           
 14092                           ;system.c: 25: long timemsl = 0;
 14093                           
 14094                           ;incstack = 0
 14095                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14096  21EA  3000               	movlw	0
 14097  21EB  0021               	movlb	1	; select bank1
 14098  21EC  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14099  21ED  3000               	movlw	0
 14100  21EE  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14101  21EF  3000               	movlw	0
 14102  21F0  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14103  21F1  3000               	movlw	0
 14104  21F2  00AE               	movwf	wait_ms@timemsl^(0+128)
 14105                           
 14106                           ;system.c: 26: timemsl = timeSec * 1000l;
 14107  21F3  082C               	movf	wait_ms@timeSec^(0+128),w
 14108  21F4  00A0               	movwf	___lmul@multiplier^(0+128)
 14109  21F5  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14110  21F6  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14111  21F7  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14112  21F8  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14113  21F9  3000               	movlw	0
 14114  21FA  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14115  21FB  3000               	movlw	0
 14116  21FC  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14117  21FD  3003               	movlw	3
 14118  21FE  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14119  21FF  30E8               	movlw	232
 14120  2200  00A4               	movwf	___lmul@multiplicand^(0+128)
 14121  2201  31A1  21BA  31A1   	fcall	___lmul
 14122  2204  0021               	movlb	1	; select bank1
 14123  2205  0823               	movf	(?___lmul+3)^(0+128),w
 14124  2206  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14125  2207  0822               	movf	(?___lmul+2)^(0+128),w
 14126  2208  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14127  2209  0821               	movf	(?___lmul+1)^(0+128),w
 14128  220A  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14129  220B  0820               	movf	?___lmul^(0+128),w
 14130  220C  00AE               	movwf	wait_ms@timemsl^(0+128)
 14131  220D                     l382:	
 14132                           ;system.c: 27: for( ; timemsl; timemsl--);
 14133                           
 14134  220D  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14135  220E  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14136  220F  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14137  2210  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14138  2211  1903               	btfsc	3,2
 14139  2212  0008               	return
 14140  2213  30FF               	movlw	255
 14141  2214  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14142  2215  30FF               	movlw	255
 14143  2216  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14144  2217  30FF               	movlw	255
 14145  2218  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14146  2219  30FF               	movlw	255
 14147  221A  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14148  221B  2A0D               	goto	l382
 14149  221C                     __end_of_wait_ms:	
 14150                           
 14151                           	psect	text39
 14152  21BA                     __ptext39:	
 14153 ;; *************** function ___lmul *****************
 14154 ;; Defined at:
 14155 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14158 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  product         4    8[BANK1 ] unsigned long 
 14161 ;; Return value:  Size  Location     Type
 14162 ;;                  4    0[BANK1 ] unsigned long 
 14163 ;; Registers used:
 14164 ;;		wreg, status,2, status,0
 14165 ;; Tracked objects:
 14166 ;;		On entry : 0/0
 14167 ;;		On exit  : 0/0
 14168 ;;		Unchanged: 0/0
 14169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14170 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14171 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14173 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14174 ;;Total ram usage:       12 bytes
 14175 ;; Hardware stack levels used:    1
 14176 ;; Hardware stack levels required when called:    3
 14177 ;; This function calls:
 14178 ;;		Nothing
 14179 ;; This function is called by:
 14180 ;;		_wait_ms
 14181 ;; This function uses a non-reentrant model
 14182 ;;
 14183                           
 14184                           
 14185                           ;psect for function ___lmul
 14186  21BA                     ___lmul:	
 14187                           
 14188                           ;incstack = 0
 14189                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14190  21BA  3000               	movlw	0
 14191  21BB  0021               	movlb	1	; select bank1
 14192  21BC  00AB               	movwf	(___lmul@product+3)^(0+128)
 14193  21BD  3000               	movlw	0
 14194  21BE  00AA               	movwf	(___lmul@product+2)^(0+128)
 14195  21BF  3000               	movlw	0
 14196  21C0  00A9               	movwf	(___lmul@product+1)^(0+128)
 14197  21C1  3000               	movlw	0
 14198  21C2  00A8               	movwf	___lmul@product^(0+128)
 14199  21C3                     l7437:	
 14200  21C3  1C20               	btfss	___lmul@multiplier^(0+128),0
 14201  21C4  29CD               	goto	l7441
 14202  21C5  0824               	movf	___lmul@multiplicand^(0+128),w
 14203  21C6  07A8               	addwf	___lmul@product^(0+128),f
 14204  21C7  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14205  21C8  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14206  21C9  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14207  21CA  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14208  21CB  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14209  21CC  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14210  21CD                     l7441:	
 14211  21CD  3001               	movlw	1
 14212  21CE                     u7355:	
 14213  21CE  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14214  21CF  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14215  21D0  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14216  21D1  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14217  21D2  0B89               	decfsz	9,f
 14218  21D3  29CE               	goto	u7355
 14219  21D4  3001               	movlw	1
 14220  21D5                     u7365:	
 14221  21D5  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14222  21D6  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14223  21D7  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14224  21D8  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14225  21D9  0B89               	decfsz	9,f
 14226  21DA  29D5               	goto	u7365
 14227  21DB  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14228  21DC  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14229  21DD  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14230  21DE  0420               	iorwf	___lmul@multiplier^(0+128),w
 14231  21DF  1D03               	skipz
 14232  21E0  29C3               	goto	l7437
 14233  21E1  082B               	movf	(___lmul@product+3)^(0+128),w
 14234  21E2  00A3               	movwf	(?___lmul+3)^(0+128)
 14235  21E3  082A               	movf	(___lmul@product+2)^(0+128),w
 14236  21E4  00A2               	movwf	(?___lmul+2)^(0+128)
 14237  21E5  0829               	movf	(___lmul@product+1)^(0+128),w
 14238  21E6  00A1               	movwf	(?___lmul+1)^(0+128)
 14239  21E7  0828               	movf	___lmul@product^(0+128),w
 14240  21E8  00A0               	movwf	?___lmul^(0+128)
 14241  21E9  0008               	return
 14242  21EA                     __end_of___lmul:	
 14243                           
 14244                           	psect	text40
 14245  07FE                     __ptext40:	
 14246 ;; *************** function _updateSwitchBypassState *****************
 14247 ;; Defined at:
 14248 ;;		line 96 in file "state_manager.c"
 14249 ;; Parameters:    Size  Location     Type
 14250 ;;  state           2    0[BANK1 ] int 
 14251 ;; Auto vars:     Size  Location     Type
 14252 ;;		None
 14253 ;; Return value:  Size  Location     Type
 14254 ;;                  1    wreg      void 
 14255 ;; Registers used:
 14256 ;;		None
 14257 ;; Tracked objects:
 14258 ;;		On entry : 0/0
 14259 ;;		On exit  : 0/0
 14260 ;;		Unchanged: 0/0
 14261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14262 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14265 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14266 ;;Total ram usage:        2 bytes
 14267 ;; Hardware stack levels used:    1
 14268 ;; Hardware stack levels required when called:    3
 14269 ;; This function calls:
 14270 ;;		Nothing
 14271 ;; This function is called by:
 14272 ;;		_setSwitchBypassRelays
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           
 14277                           ;psect for function _updateSwitchBypassState
 14278  07FE                     _updateSwitchBypassState:	
 14279                           
 14280                           ;incstack = 0
 14281                           ; Regs used in _updateSwitchBypassState: []
 14282  07FE  0008               	return
 14283  07FF                     __end_of_updateSwitchBypassState:	
 14284                           
 14285                           	psect	text41
 14286  2F1E                     __ptext41:	
 14287 ;; *************** function _getSwitchBypassState *****************
 14288 ;; Defined at:
 14289 ;;		line 103 in file "state_manager.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;		None
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;		None
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  2    0[BANK1 ] int 
 14296 ;; Registers used:
 14297 ;;		status,2
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14303 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14306 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14307 ;;Total ram usage:        2 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; Hardware stack levels required when called:    3
 14310 ;; This function calls:
 14311 ;;		Nothing
 14312 ;; This function is called by:
 14313 ;;		_initSwitchBypass
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           
 14318                           ;psect for function _getSwitchBypassState
 14319  2F1E                     _getSwitchBypassState:	
 14320                           
 14321                           ;state_manager.c: 108: return 0;
 14322                           
 14323                           ;incstack = 0
 14324                           ; Regs used in _getSwitchBypassState: [status,2]
 14325  2F1E  0021               	movlb	1	; select bank1
 14326  2F1F  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14327  2F20  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14328  2F21  0008               	return
 14329  2F22                     __end_of_getSwitchBypassState:	
 14330                           
 14331                           	psect	text42
 14332  1A5C                     __ptext42:	
 14333 ;; *************** function _calcSinArray *****************
 14334 ;; Defined at:
 14335 ;;		line 15 in file "modulation.c"
 14336 ;; Parameters:    Size  Location     Type
 14337 ;;		None
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;  tmpVal          3   56[BANK2 ] int 
 14340 ;;  iAngle          1   59[BANK2 ] unsigned char 
 14341 ;;  x               1   55[BANK2 ] unsigned char 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;                  1    wreg      void 
 14344 ;; Registers used:
 14345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14352 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14353 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14354 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14355 ;;Total ram usage:        9 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    7
 14358 ;; This function calls:
 14359 ;;		___awtoft
 14360 ;;		___ftdiv
 14361 ;;		___ftmul
 14362 ;;		___wmul
 14363 ;;		_sin
 14364 ;; This function is called by:
 14365 ;;		_main
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369                           
 14370                           ;psect for function _calcSinArray
 14371  1A5C                     _calcSinArray:	
 14372                           
 14373                           ;modulation.c: 16: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14377  1A5C  0022               	movlb	2	; select bank2
 14378  1A5D  01DB               	clrf	calcSinArray@iAngle^(0+256)
 14379  1A5E  3078               	movlw	120
 14380  1A5F  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14381  1A60  1803               	btfsc	3,0
 14382  1A61  2AE0               	goto	l1897
 14383  1A62                     l8391:	
 14384                           
 14385                           ;modulation.c: 17: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14386  1A62  3000               	movlw	0
 14387  1A63  0021               	movlb	1	; select bank1
 14388  1A64  00CE               	movwf	___ftdiv@f2^(0+128)
 14389  1A65  3034               	movlw	52
 14390  1A66  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14391  1A67  3043               	movlw	67
 14392  1A68  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14393  1A69  3010               	movlw	16
 14394  1A6A  00AE               	movwf	___ftmul@f1^(0+128)
 14395  1A6B  3049               	movlw	73
 14396  1A6C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14397  1A6D  3040               	movlw	64
 14398  1A6E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14399  1A6F  0022               	movlb	2	; select bank2
 14400  1A70  085B               	movf	calcSinArray@iAngle^(0+256),w
 14401  1A71  00D3               	movwf	??_calcSinArray^(0+256)
 14402  1A72  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14403  1A73  0853               	movf	??_calcSinArray^(0+256),w
 14404  1A74  00AE               	movwf	___wmul@multiplier^(0+256)
 14405  1A75  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14406  1A76  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14407  1A77  3003               	movlw	3
 14408  1A78  00B0               	movwf	___wmul@multiplicand^(0+256)
 14409  1A79  3000               	movlw	0
 14410  1A7A  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14411  1A7B  31A0  2002  319A   	fcall	___wmul
 14412  1A7E  0022               	movlb	2	; select bank2
 14413  1A7F  082F               	movf	(?___wmul+1)^(0+256),w
 14414  1A80  0021               	movlb	1	; select bank1
 14415  1A81  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14416  1A82  0022               	movlb	2	; select bank2
 14417  1A83  082E               	movf	?___wmul^(0+256),w
 14418  1A84  0021               	movlb	1	; select bank1
 14419  1A85  00A8               	movwf	___awtoft@c^(0+128)
 14420  1A86  31A0  2097  319A   	fcall	___awtoft
 14421  1A89  0021               	movlb	1	; select bank1
 14422  1A8A  0828               	movf	?___awtoft^(0+128),w
 14423  1A8B  00B1               	movwf	___ftmul@f2^(0+128)
 14424  1A8C  0829               	movf	(?___awtoft+1)^(0+128),w
 14425  1A8D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14426  1A8E  082A               	movf	(?___awtoft+2)^(0+128),w
 14427  1A8F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14428  1A90  319E  2691  319A   	fcall	___ftmul
 14429  1A93  0021               	movlb	1	; select bank1
 14430  1A94  082E               	movf	?___ftmul^(0+128),w
 14431  1A95  00D1               	movwf	___ftdiv@f1^(0+128)
 14432  1A96  082F               	movf	(?___ftmul+1)^(0+128),w
 14433  1A97  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14434  1A98  0830               	movf	(?___ftmul+2)^(0+128),w
 14435  1A99  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14436  1A9A  319D  253D  319A   	fcall	___ftdiv
 14437  1A9D  0021               	movlb	1	; select bank1
 14438  1A9E  084E               	movf	?___ftdiv^(0+128),w
 14439  1A9F  0022               	movlb	2	; select bank2
 14440  1AA0  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14441  1AA1  0021               	movlb	1	; select bank1
 14442  1AA2  084F               	movf	(?___ftdiv+1)^(0+128),w
 14443  1AA3  0022               	movlb	2	; select bank2
 14444  1AA4  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14445  1AA5  0021               	movlb	1	; select bank1
 14446  1AA6  0850               	movf	(?___ftdiv+2)^(0+128),w
 14447  1AA7  0022               	movlb	2	; select bank2
 14448  1AA8  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14449                           
 14450                           ;modulation.c: 18: tmpVal = sin(tmpVal);
 14451  1AA9  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14452  1AAA  00C5               	movwf	sin@f^(0+256)
 14453  1AAB  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14454  1AAC  00C6               	movwf	(sin@f+1)^(0+256)
 14455  1AAD  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14456  1AAE  00C7               	movwf	(sin@f+2)^(0+256)
 14457  1AAF  3188  2067  319A   	fcall	_sin
 14458  1AB2  0022               	movlb	2	; select bank2
 14459  1AB3  0845               	movf	?_sin^(0+256),w
 14460  1AB4  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14461  1AB5  0846               	movf	(?_sin+1)^(0+256),w
 14462  1AB6  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14463  1AB7  0847               	movf	(?_sin+2)^(0+256),w
 14464  1AB8  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14465                           
 14466                           ;modulation.c: 19: sinArray[iAngle] = tmpVal;
 14467  1AB9  085B               	movf	calcSinArray@iAngle^(0+256),w
 14468  1ABA  00D3               	movwf	??_calcSinArray^(0+256)
 14469  1ABB  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14470  1ABC  0853               	movf	??_calcSinArray^(0+256),w
 14471  1ABD  00AE               	movwf	___wmul@multiplier^(0+256)
 14472  1ABE  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14473  1ABF  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14474  1AC0  3003               	movlw	3
 14475  1AC1  00B0               	movwf	___wmul@multiplicand^(0+256)
 14476  1AC2  3000               	movlw	0
 14477  1AC3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14478  1AC4  31A0  2002  319A   	fcall	___wmul
 14479  1AC7  3082               	movlw	130
 14480  1AC8  0022               	movlb	2	; select bank2
 14481  1AC9  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 14482  1ACA  3024               	movlw	36
 14483  1ACB  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 14484  1ACC  082E               	movf	?___wmul^(0+256),w
 14485  1ACD  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 14486  1ACE  0086               	movwf	6
 14487  1ACF  082F               	movf	(?___wmul+1)^(0+256),w
 14488  1AD0  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 14489  1AD1  0087               	movwf	7
 14490  1AD2  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14491  1AD3  3FC0               	movwi [0]fsr1
 14492  1AD4  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14493  1AD5  3FC1               	movwi [1]fsr1
 14494  1AD6  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14495  1AD7  3FC2               	movwi [2]fsr1
 14496  1AD8  3001               	movlw	1
 14497  1AD9  00D3               	movwf	??_calcSinArray^(0+256)
 14498  1ADA  0853               	movf	??_calcSinArray^(0+256),w
 14499  1ADB  07DB               	addwf	calcSinArray@iAngle^(0+256),f
 14500  1ADC  3078               	movlw	120
 14501  1ADD  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14502  1ADE  1C03               	skipc
 14503  1ADF  2A62               	goto	l8391
 14504  1AE0                     l1897:	
 14505                           
 14506                           ;modulation.c: 20: }
 14507                           ;modulation.c: 21: char x = 1;
 14508  1AE0  01D7               	clrf	calcSinArray@x^(0+256)
 14509  1AE1  0AD7               	incf	calcSinArray@x^(0+256),f
 14510  1AE2  0008               	return
 14511  1AE3                     __end_of_calcSinArray:	
 14512                           
 14513                           	psect	text43
 14514  0867                     __ptext43:	
 14515 ;; *************** function _sin *****************
 14516 ;; Defined at:
 14517 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 14518 ;; Parameters:    Size  Location     Type
 14519 ;;  f               3   37[BANK2 ] void 
 14520 ;; Auto vars:     Size  Location     Type
 14521 ;;  x2              3   47[BANK2 ] void 
 14522 ;;  y               3   41[BANK2 ] void 
 14523 ;;  sgn             1   50[BANK2 ] unsigned char 
 14524 ;; Return value:  Size  Location     Type
 14525 ;;                  3   37[BANK2 ] unsigned char 
 14526 ;; Registers used:
 14527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14528 ;; Tracked objects:
 14529 ;;		On entry : 0/0
 14530 ;;		On exit  : 0/0
 14531 ;;		Unchanged: 0/0
 14532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14533 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14534 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14535 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14536 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14537 ;;Total ram usage:       14 bytes
 14538 ;; Hardware stack levels used:    1
 14539 ;; Hardware stack levels required when called:    6
 14540 ;; This function calls:
 14541 ;;		___ftadd
 14542 ;;		___ftdiv
 14543 ;;		___ftge
 14544 ;;		___ftmul
 14545 ;;		___ftneg
 14546 ;;		___ftsub
 14547 ;;		_eval_poly
 14548 ;;		_floor
 14549 ;; This function is called by:
 14550 ;;		_calcSinArray
 14551 ;; This function uses a non-reentrant model
 14552 ;;
 14553                           
 14554                           
 14555                           ;psect for function _sin
 14556  0867                     _sin:	
 14557                           
 14558                           ;incstack = 0
 14559                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14560  0867  0022               	movlb	2	; select bank2
 14561  0868  01D2               	clrf	sin@sgn^(0+256)
 14562  0869  0845               	movf	sin@f^(0+256),w
 14563  086A  0021               	movlb	1	; select bank1
 14564  086B  00A0               	movwf	___ftge@ff1^(0+128)
 14565  086C  0022               	movlb	2	; select bank2
 14566  086D  0846               	movf	(sin@f+1)^(0+256),w
 14567  086E  0021               	movlb	1	; select bank1
 14568  086F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14569  0870  0022               	movlb	2	; select bank2
 14570  0871  0847               	movf	(sin@f+2)^(0+256),w
 14571  0872  0021               	movlb	1	; select bank1
 14572  0873  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14573  0874  3000               	movlw	0
 14574  0875  00A3               	movwf	___ftge@ff2^(0+128)
 14575  0876  3000               	movlw	0
 14576  0877  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14577  0878  3000               	movlw	0
 14578  0879  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14579  087A  31A2  22FF  3188   	fcall	___ftge
 14580  087D  1803               	btfsc	3,0
 14581  087E  289C               	goto	l8289
 14582  087F  0022               	movlb	2	; select bank2
 14583  0880  0845               	movf	sin@f^(0+256),w
 14584  0881  0021               	movlb	1	; select bank1
 14585  0882  00BE               	movwf	___ftneg@f1^(0+128)
 14586  0883  0022               	movlb	2	; select bank2
 14587  0884  0846               	movf	(sin@f+1)^(0+256),w
 14588  0885  0021               	movlb	1	; select bank1
 14589  0886  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14590  0887  0022               	movlb	2	; select bank2
 14591  0888  0847               	movf	(sin@f+2)^(0+256),w
 14592  0889  0021               	movlb	1	; select bank1
 14593  088A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14594  088B  31AF  2732  3188   	fcall	___ftneg
 14595  088E  0021               	movlb	1	; select bank1
 14596  088F  083E               	movf	?___ftneg^(0+128),w
 14597  0890  0022               	movlb	2	; select bank2
 14598  0891  00C5               	movwf	sin@f^(0+256)
 14599  0892  0021               	movlb	1	; select bank1
 14600  0893  083F               	movf	(?___ftneg+1)^(0+128),w
 14601  0894  0022               	movlb	2	; select bank2
 14602  0895  00C6               	movwf	(sin@f+1)^(0+256)
 14603  0896  0021               	movlb	1	; select bank1
 14604  0897  0840               	movf	(?___ftneg+2)^(0+128),w
 14605  0898  0022               	movlb	2	; select bank2
 14606  0899  00C7               	movwf	(sin@f+2)^(0+256)
 14607  089A  01D2               	clrf	sin@sgn^(0+256)
 14608  089B  0AD2               	incf	sin@sgn^(0+256),f
 14609  089C                     l8289:	
 14610  089C  30FA               	movlw	250
 14611  089D  0021               	movlb	1	; select bank1
 14612  089E  00AE               	movwf	___ftmul@f1^(0+128)
 14613  089F  3022               	movlw	34
 14614  08A0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14615  08A1  303E               	movlw	62
 14616  08A2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14617  08A3  0022               	movlb	2	; select bank2
 14618  08A4  0845               	movf	sin@f^(0+256),w
 14619  08A5  0021               	movlb	1	; select bank1
 14620  08A6  00B1               	movwf	___ftmul@f2^(0+128)
 14621  08A7  0022               	movlb	2	; select bank2
 14622  08A8  0846               	movf	(sin@f+1)^(0+256),w
 14623  08A9  0021               	movlb	1	; select bank1
 14624  08AA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14625  08AB  0022               	movlb	2	; select bank2
 14626  08AC  0847               	movf	(sin@f+2)^(0+256),w
 14627  08AD  0021               	movlb	1	; select bank1
 14628  08AE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14629  08AF  319E  2691  3188   	fcall	___ftmul
 14630  08B2  0021               	movlb	1	; select bank1
 14631  08B3  082E               	movf	?___ftmul^(0+128),w
 14632  08B4  0022               	movlb	2	; select bank2
 14633  08B5  00C5               	movwf	sin@f^(0+256)
 14634  08B6  0021               	movlb	1	; select bank1
 14635  08B7  082F               	movf	(?___ftmul+1)^(0+128),w
 14636  08B8  0022               	movlb	2	; select bank2
 14637  08B9  00C6               	movwf	(sin@f+1)^(0+256)
 14638  08BA  0021               	movlb	1	; select bank1
 14639  08BB  0830               	movf	(?___ftmul+2)^(0+128),w
 14640  08BC  0022               	movlb	2	; select bank2
 14641  08BD  00C7               	movwf	(sin@f+2)^(0+256)
 14642  08BE  0845               	movf	sin@f^(0+256),w
 14643  08BF  00B6               	movwf	floor@x^(0+256)
 14644  08C0  0846               	movf	(sin@f+1)^(0+256),w
 14645  08C1  00B7               	movwf	(floor@x+1)^(0+256)
 14646  08C2  0847               	movf	(sin@f+2)^(0+256),w
 14647  08C3  00B8               	movwf	(floor@x+2)^(0+256)
 14648  08C4  319C  2496  3188   	fcall	_floor
 14649  08C7  0022               	movlb	2	; select bank2
 14650  08C8  0836               	movf	?_floor^(0+256),w
 14651  08C9  00BF               	movwf	___ftsub@f2^(0+256)
 14652  08CA  0837               	movf	(?_floor+1)^(0+256),w
 14653  08CB  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14654  08CC  0838               	movf	(?_floor+2)^(0+256),w
 14655  08CD  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14656  08CE  0845               	movf	sin@f^(0+256),w
 14657  08CF  00C2               	movwf	___ftsub@f1^(0+256)
 14658  08D0  0846               	movf	(sin@f+1)^(0+256),w
 14659  08D1  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14660  08D2  0847               	movf	(sin@f+2)^(0+256),w
 14661  08D3  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14662  08D4  31A1  212D  3188   	fcall	___ftsub
 14663  08D7  0022               	movlb	2	; select bank2
 14664  08D8  083F               	movf	?___ftsub^(0+256),w
 14665  08D9  00C5               	movwf	sin@f^(0+256)
 14666  08DA  0840               	movf	(?___ftsub+1)^(0+256),w
 14667  08DB  00C6               	movwf	(sin@f+1)^(0+256)
 14668  08DC  0841               	movf	(?___ftsub+2)^(0+256),w
 14669  08DD  00C7               	movwf	(sin@f+2)^(0+256)
 14670  08DE  3000               	movlw	0
 14671  08DF  0021               	movlb	1	; select bank1
 14672  08E0  00AE               	movwf	___ftmul@f1^(0+128)
 14673  08E1  3080               	movlw	128
 14674  08E2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14675  08E3  3040               	movlw	64
 14676  08E4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14677  08E5  0022               	movlb	2	; select bank2
 14678  08E6  0845               	movf	sin@f^(0+256),w
 14679  08E7  0021               	movlb	1	; select bank1
 14680  08E8  00B1               	movwf	___ftmul@f2^(0+128)
 14681  08E9  0022               	movlb	2	; select bank2
 14682  08EA  0846               	movf	(sin@f+1)^(0+256),w
 14683  08EB  0021               	movlb	1	; select bank1
 14684  08EC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14685  08ED  0022               	movlb	2	; select bank2
 14686  08EE  0847               	movf	(sin@f+2)^(0+256),w
 14687  08EF  0021               	movlb	1	; select bank1
 14688  08F0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14689  08F1  319E  2691  3188   	fcall	___ftmul
 14690  08F4  0021               	movlb	1	; select bank1
 14691  08F5  082E               	movf	?___ftmul^(0+128),w
 14692  08F6  0022               	movlb	2	; select bank2
 14693  08F7  00C5               	movwf	sin@f^(0+256)
 14694  08F8  0021               	movlb	1	; select bank1
 14695  08F9  082F               	movf	(?___ftmul+1)^(0+128),w
 14696  08FA  0022               	movlb	2	; select bank2
 14697  08FB  00C6               	movwf	(sin@f+1)^(0+256)
 14698  08FC  0021               	movlb	1	; select bank1
 14699  08FD  0830               	movf	(?___ftmul+2)^(0+128),w
 14700  08FE  0022               	movlb	2	; select bank2
 14701  08FF  00C7               	movwf	(sin@f+2)^(0+256)
 14702  0900  3000               	movlw	0
 14703  0901  0021               	movlb	1	; select bank1
 14704  0902  00A0               	movwf	___ftge@ff1^(0+128)
 14705  0903  3000               	movlw	0
 14706  0904  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14707  0905  3040               	movlw	64
 14708  0906  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14709  0907  0022               	movlb	2	; select bank2
 14710  0908  0845               	movf	sin@f^(0+256),w
 14711  0909  0021               	movlb	1	; select bank1
 14712  090A  00A3               	movwf	___ftge@ff2^(0+128)
 14713  090B  0022               	movlb	2	; select bank2
 14714  090C  0846               	movf	(sin@f+1)^(0+256),w
 14715  090D  0021               	movlb	1	; select bank1
 14716  090E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14717  090F  0022               	movlb	2	; select bank2
 14718  0910  0847               	movf	(sin@f+2)^(0+256),w
 14719  0911  0021               	movlb	1	; select bank1
 14720  0912  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14721  0913  31A2  22FF  3188   	fcall	___ftge
 14722  0916  1803               	btfsc	3,0
 14723  0917  2938               	goto	l8301
 14724  0918  3000               	movlw	0
 14725  0919  0022               	movlb	2	; select bank2
 14726  091A  00BF               	movwf	___ftsub@f2^(0+256)
 14727  091B  3000               	movlw	0
 14728  091C  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14729  091D  3040               	movlw	64
 14730  091E  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14731  091F  0845               	movf	sin@f^(0+256),w
 14732  0920  00C2               	movwf	___ftsub@f1^(0+256)
 14733  0921  0846               	movf	(sin@f+1)^(0+256),w
 14734  0922  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14735  0923  0847               	movf	(sin@f+2)^(0+256),w
 14736  0924  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14737  0925  31A1  212D  3188   	fcall	___ftsub
 14738  0928  0022               	movlb	2	; select bank2
 14739  0929  083F               	movf	?___ftsub^(0+256),w
 14740  092A  00C5               	movwf	sin@f^(0+256)
 14741  092B  0840               	movf	(?___ftsub+1)^(0+256),w
 14742  092C  00C6               	movwf	(sin@f+1)^(0+256)
 14743  092D  0841               	movf	(?___ftsub+2)^(0+256),w
 14744  092E  00C7               	movwf	(sin@f+2)^(0+256)
 14745  092F  0852               	movf	sin@sgn^(0+256),w
 14746  0930  1D03               	btfss	3,2
 14747  0931  2934               	goto	u8650
 14748  0932  3001               	movlw	1
 14749  0933  2935               	goto	u8660
 14750  0934                     u8650:	
 14751  0934  3000               	movlw	0
 14752  0935                     u8660:	
 14753  0935  00C8               	movwf	??_sin^(0+256)
 14754  0936  0848               	movf	??_sin^(0+256),w
 14755  0937  00D2               	movwf	sin@sgn^(0+256)
 14756  0938                     l8301:	
 14757  0938  3000               	movlw	0
 14758  0939  0021               	movlb	1	; select bank1
 14759  093A  00A0               	movwf	___ftge@ff1^(0+128)
 14760  093B  3080               	movlw	128
 14761  093C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14762  093D  303F               	movlw	63
 14763  093E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14764  093F  0022               	movlb	2	; select bank2
 14765  0940  0845               	movf	sin@f^(0+256),w
 14766  0941  0021               	movlb	1	; select bank1
 14767  0942  00A3               	movwf	___ftge@ff2^(0+128)
 14768  0943  0022               	movlb	2	; select bank2
 14769  0944  0846               	movf	(sin@f+1)^(0+256),w
 14770  0945  0021               	movlb	1	; select bank1
 14771  0946  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14772  0947  0022               	movlb	2	; select bank2
 14773  0948  0847               	movf	(sin@f+2)^(0+256),w
 14774  0949  0021               	movlb	1	; select bank1
 14775  094A  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14776  094B  31A2  22FF  3188   	fcall	___ftge
 14777  094E  1803               	btfsc	3,0
 14778  094F  297C               	goto	l2326
 14779  0950  3000               	movlw	0
 14780  0951  0021               	movlb	1	; select bank1
 14781  0952  00C1               	movwf	___ftadd@f1^(0+128)
 14782  0953  3000               	movlw	0
 14783  0954  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14784  0955  3040               	movlw	64
 14785  0956  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14786  0957  0022               	movlb	2	; select bank2
 14787  0958  0845               	movf	sin@f^(0+256),w
 14788  0959  0021               	movlb	1	; select bank1
 14789  095A  00BE               	movwf	___ftneg@f1^(0+128)
 14790  095B  0022               	movlb	2	; select bank2
 14791  095C  0846               	movf	(sin@f+1)^(0+256),w
 14792  095D  0021               	movlb	1	; select bank1
 14793  095E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14794  095F  0022               	movlb	2	; select bank2
 14795  0960  0847               	movf	(sin@f+2)^(0+256),w
 14796  0961  0021               	movlb	1	; select bank1
 14797  0962  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14798  0963  31AF  2732  3188   	fcall	___ftneg
 14799  0966  0021               	movlb	1	; select bank1
 14800  0967  083E               	movf	?___ftneg^(0+128),w
 14801  0968  00C4               	movwf	___ftadd@f2^(0+128)
 14802  0969  083F               	movf	(?___ftneg+1)^(0+128),w
 14803  096A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14804  096B  0840               	movf	(?___ftneg+2)^(0+128),w
 14805  096C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14806  096D  3191  2135  3188   	fcall	___ftadd
 14807  0970  0021               	movlb	1	; select bank1
 14808  0971  0841               	movf	?___ftadd^(0+128),w
 14809  0972  0022               	movlb	2	; select bank2
 14810  0973  00C5               	movwf	sin@f^(0+256)
 14811  0974  0021               	movlb	1	; select bank1
 14812  0975  0842               	movf	(?___ftadd+1)^(0+128),w
 14813  0976  0022               	movlb	2	; select bank2
 14814  0977  00C6               	movwf	(sin@f+1)^(0+256)
 14815  0978  0021               	movlb	1	; select bank1
 14816  0979  0843               	movf	(?___ftadd+2)^(0+128),w
 14817  097A  0022               	movlb	2	; select bank2
 14818  097B  00C7               	movwf	(sin@f+2)^(0+256)
 14819  097C                     l2326:	
 14820  097C  0022               	movlb	2	; select bank2
 14821  097D  0845               	movf	sin@f^(0+256),w
 14822  097E  0021               	movlb	1	; select bank1
 14823  097F  00AE               	movwf	___ftmul@f1^(0+128)
 14824  0980  0022               	movlb	2	; select bank2
 14825  0981  0846               	movf	(sin@f+1)^(0+256),w
 14826  0982  0021               	movlb	1	; select bank1
 14827  0983  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14828  0984  0022               	movlb	2	; select bank2
 14829  0985  0847               	movf	(sin@f+2)^(0+256),w
 14830  0986  0021               	movlb	1	; select bank1
 14831  0987  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14832  0988  0022               	movlb	2	; select bank2
 14833  0989  0845               	movf	sin@f^(0+256),w
 14834  098A  0021               	movlb	1	; select bank1
 14835  098B  00B1               	movwf	___ftmul@f2^(0+128)
 14836  098C  0022               	movlb	2	; select bank2
 14837  098D  0846               	movf	(sin@f+1)^(0+256),w
 14838  098E  0021               	movlb	1	; select bank1
 14839  098F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14840  0990  0022               	movlb	2	; select bank2
 14841  0991  0847               	movf	(sin@f+2)^(0+256),w
 14842  0992  0021               	movlb	1	; select bank1
 14843  0993  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14844  0994  319E  2691  3188   	fcall	___ftmul
 14845  0997  0021               	movlb	1	; select bank1
 14846  0998  082E               	movf	?___ftmul^(0+128),w
 14847  0999  0022               	movlb	2	; select bank2
 14848  099A  00CF               	movwf	sin@x2^(0+256)
 14849  099B  0021               	movlb	1	; select bank1
 14850  099C  082F               	movf	(?___ftmul+1)^(0+128),w
 14851  099D  0022               	movlb	2	; select bank2
 14852  099E  00D0               	movwf	(sin@x2+1)^(0+256)
 14853  099F  0021               	movlb	1	; select bank1
 14854  09A0  0830               	movf	(?___ftmul+2)^(0+128),w
 14855  09A1  0022               	movlb	2	; select bank2
 14856  09A2  00D1               	movwf	(sin@x2+2)^(0+256)
 14857  09A3  084F               	movf	sin@x2^(0+256),w
 14858  09A4  00B4               	movwf	eval_poly@x^(0+256)
 14859  09A5  0850               	movf	(sin@x2+1)^(0+256),w
 14860  09A6  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14861  09A7  0851               	movf	(sin@x2+2)^(0+256),w
 14862  09A8  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14863  09A9  3048               	movlw	low (sin@coeff_b| (0+32768))
 14864  09AA  00B7               	movwf	eval_poly@d^(0+256)
 14865  09AB  30A8               	movlw	high (sin@coeff_b| (0+32768))
 14866  09AC  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14867  09AD  3003               	movlw	3
 14868  09AE  00B9               	movwf	eval_poly@n^(0+256)
 14869  09AF  3000               	movlw	0
 14870  09B0  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14871  09B1  31A7  2718  3188   	fcall	_eval_poly
 14872  09B4  0022               	movlb	2	; select bank2
 14873  09B5  0834               	movf	?_eval_poly^(0+256),w
 14874  09B6  00C9               	movwf	sin@y^(0+256)
 14875  09B7  0835               	movf	(?_eval_poly+1)^(0+256),w
 14876  09B8  00CA               	movwf	(sin@y+1)^(0+256)
 14877  09B9  0836               	movf	(?_eval_poly+2)^(0+256),w
 14878  09BA  00CB               	movwf	(sin@y+2)^(0+256)
 14879  09BB  3004               	movlw	4
 14880  09BC  00B9               	movwf	eval_poly@n^(0+256)
 14881  09BD  3000               	movlw	0
 14882  09BE  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14883  09BF  3039               	movlw	low (sin@coeff_a| (0+32768))
 14884  09C0  00B7               	movwf	eval_poly@d^(0+256)
 14885  09C1  30A8               	movlw	high (sin@coeff_a| (0+32768))
 14886  09C2  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14887  09C3  084F               	movf	sin@x2^(0+256),w
 14888  09C4  00B4               	movwf	eval_poly@x^(0+256)
 14889  09C5  0850               	movf	(sin@x2+1)^(0+256),w
 14890  09C6  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14891  09C7  0851               	movf	(sin@x2+2)^(0+256),w
 14892  09C8  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14893  09C9  31A7  2718  3188   	fcall	_eval_poly
 14894  09CC  0022               	movlb	2	; select bank2
 14895  09CD  0834               	movf	?_eval_poly^(0+256),w
 14896  09CE  0021               	movlb	1	; select bank1
 14897  09CF  00D1               	movwf	___ftdiv@f1^(0+128)
 14898  09D0  0022               	movlb	2	; select bank2
 14899  09D1  0835               	movf	(?_eval_poly+1)^(0+256),w
 14900  09D2  0021               	movlb	1	; select bank1
 14901  09D3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14902  09D4  0022               	movlb	2	; select bank2
 14903  09D5  0836               	movf	(?_eval_poly+2)^(0+256),w
 14904  09D6  0021               	movlb	1	; select bank1
 14905  09D7  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14906  09D8  0022               	movlb	2	; select bank2
 14907  09D9  0849               	movf	sin@y^(0+256),w
 14908  09DA  0021               	movlb	1	; select bank1
 14909  09DB  00CE               	movwf	___ftdiv@f2^(0+128)
 14910  09DC  0022               	movlb	2	; select bank2
 14911  09DD  084A               	movf	(sin@y+1)^(0+256),w
 14912  09DE  0021               	movlb	1	; select bank1
 14913  09DF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14914  09E0  0022               	movlb	2	; select bank2
 14915  09E1  084B               	movf	(sin@y+2)^(0+256),w
 14916  09E2  0021               	movlb	1	; select bank1
 14917  09E3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14918  09E4  319D  253D  3188   	fcall	___ftdiv
 14919  09E7  0021               	movlb	1	; select bank1
 14920  09E8  084E               	movf	?___ftdiv^(0+128),w
 14921  09E9  0022               	movlb	2	; select bank2
 14922  09EA  00CC               	movwf	_sin$2849^(0+256)
 14923  09EB  0021               	movlb	1	; select bank1
 14924  09EC  084F               	movf	(?___ftdiv+1)^(0+128),w
 14925  09ED  0022               	movlb	2	; select bank2
 14926  09EE  00CD               	movwf	(_sin$2849+1)^(0+256)
 14927  09EF  0021               	movlb	1	; select bank1
 14928  09F0  0850               	movf	(?___ftdiv+2)^(0+128),w
 14929  09F1  0022               	movlb	2	; select bank2
 14930  09F2  00CE               	movwf	(_sin$2849+2)^(0+256)
 14931  09F3  084C               	movf	_sin$2849^(0+256),w
 14932  09F4  0021               	movlb	1	; select bank1
 14933  09F5  00AE               	movwf	___ftmul@f1^(0+128)
 14934  09F6  0022               	movlb	2	; select bank2
 14935  09F7  084D               	movf	(_sin$2849+1)^(0+256),w
 14936  09F8  0021               	movlb	1	; select bank1
 14937  09F9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14938  09FA  0022               	movlb	2	; select bank2
 14939  09FB  084E               	movf	(_sin$2849+2)^(0+256),w
 14940  09FC  0021               	movlb	1	; select bank1
 14941  09FD  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14942  09FE  0022               	movlb	2	; select bank2
 14943  09FF  0845               	movf	sin@f^(0+256),w
 14944  0A00  0021               	movlb	1	; select bank1
 14945  0A01  00B1               	movwf	___ftmul@f2^(0+128)
 14946  0A02  0022               	movlb	2	; select bank2
 14947  0A03  0846               	movf	(sin@f+1)^(0+256),w
 14948  0A04  0021               	movlb	1	; select bank1
 14949  0A05  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14950  0A06  0022               	movlb	2	; select bank2
 14951  0A07  0847               	movf	(sin@f+2)^(0+256),w
 14952  0A08  0021               	movlb	1	; select bank1
 14953  0A09  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14954  0A0A  319E  2691  3188   	fcall	___ftmul
 14955  0A0D  0021               	movlb	1	; select bank1
 14956  0A0E  082E               	movf	?___ftmul^(0+128),w
 14957  0A0F  0022               	movlb	2	; select bank2
 14958  0A10  00C5               	movwf	sin@f^(0+256)
 14959  0A11  0021               	movlb	1	; select bank1
 14960  0A12  082F               	movf	(?___ftmul+1)^(0+128),w
 14961  0A13  0022               	movlb	2	; select bank2
 14962  0A14  00C6               	movwf	(sin@f+1)^(0+256)
 14963  0A15  0021               	movlb	1	; select bank1
 14964  0A16  0830               	movf	(?___ftmul+2)^(0+128),w
 14965  0A17  0022               	movlb	2	; select bank2
 14966  0A18  00C7               	movwf	(sin@f+2)^(0+256)
 14967  0A19  0852               	movf	sin@sgn^(0+256),w
 14968  0A1A  1903               	btfsc	3,2
 14969  0A1B  0008               	return
 14970  0A1C  0845               	movf	sin@f^(0+256),w
 14971  0A1D  0021               	movlb	1	; select bank1
 14972  0A1E  00BE               	movwf	___ftneg@f1^(0+128)
 14973  0A1F  0022               	movlb	2	; select bank2
 14974  0A20  0846               	movf	(sin@f+1)^(0+256),w
 14975  0A21  0021               	movlb	1	; select bank1
 14976  0A22  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14977  0A23  0022               	movlb	2	; select bank2
 14978  0A24  0847               	movf	(sin@f+2)^(0+256),w
 14979  0A25  0021               	movlb	1	; select bank1
 14980  0A26  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14981  0A27  31AF  2732         	fcall	___ftneg
 14982  0A29  0021               	movlb	1	; select bank1
 14983  0A2A  083E               	movf	?___ftneg^(0+128),w
 14984  0A2B  0022               	movlb	2	; select bank2
 14985  0A2C  00C5               	movwf	?_sin^(0+256)
 14986  0A2D  0021               	movlb	1	; select bank1
 14987  0A2E  083F               	movf	(?___ftneg+1)^(0+128),w
 14988  0A2F  0022               	movlb	2	; select bank2
 14989  0A30  00C6               	movwf	(?_sin+1)^(0+256)
 14990  0A31  0021               	movlb	1	; select bank1
 14991  0A32  0840               	movf	(?___ftneg+2)^(0+128),w
 14992  0A33  0022               	movlb	2	; select bank2
 14993  0A34  00C7               	movwf	(?_sin+2)^(0+256)
 14994  0A35  0008               	return
 14995  0A36                     __end_of_sin:	
 14996                           
 14997                           	psect	text44
 14998  1C96                     __ptext44:	
 14999 ;; *************** function _floor *****************
 15000 ;; Defined at:
 15001 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15002 ;; Parameters:    Size  Location     Type
 15003 ;;  x               3   22[BANK2 ] unsigned char 
 15004 ;; Auto vars:     Size  Location     Type
 15005 ;;  i               3   26[BANK2 ] unsigned char 
 15006 ;;  expon           2   29[BANK2 ] int 
 15007 ;; Return value:  Size  Location     Type
 15008 ;;                  3   22[BANK2 ] int 
 15009 ;; Registers used:
 15010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15011 ;; Tracked objects:
 15012 ;;		On entry : 0/0
 15013 ;;		On exit  : 0/0
 15014 ;;		Unchanged: 0/0
 15015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15016 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15017 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15018 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15019 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15020 ;;Total ram usage:        9 bytes
 15021 ;; Hardware stack levels used:    1
 15022 ;; Hardware stack levels required when called:    5
 15023 ;; This function calls:
 15024 ;;		___altoft
 15025 ;;		___ftadd
 15026 ;;		___ftge
 15027 ;;		___fttol
 15028 ;;		_frexp
 15029 ;; This function is called by:
 15030 ;;		_sin
 15031 ;;		_exp
 15032 ;; This function uses a non-reentrant model
 15033 ;;
 15034                           
 15035                           
 15036                           ;psect for function _floor
 15037  1C96                     _floor:	
 15038                           
 15039                           ;incstack = 0
 15040                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15041  1C96  0022               	movlb	2	; select bank2
 15042  1C97  0836               	movf	floor@x^(0+256),w
 15043  1C98  0021               	movlb	1	; select bank1
 15044  1C99  00A0               	movwf	frexp@value^(0+128)
 15045  1C9A  0022               	movlb	2	; select bank2
 15046  1C9B  0837               	movf	(floor@x+1)^(0+256),w
 15047  1C9C  0021               	movlb	1	; select bank1
 15048  1C9D  00A1               	movwf	(frexp@value+1)^(0+128)
 15049  1C9E  0022               	movlb	2	; select bank2
 15050  1C9F  0838               	movf	(floor@x+2)^(0+256),w
 15051  1CA0  0021               	movlb	1	; select bank1
 15052  1CA1  00A2               	movwf	(frexp@value+2)^(0+128)
 15053  1CA2  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15054  1CA3  0022               	movlb	2	; select bank2
 15055  1CA4  00B9               	movwf	??_floor^(0+256)
 15056  1CA5  0839               	movf	??_floor^(0+256),w
 15057  1CA6  0021               	movlb	1	; select bank1
 15058  1CA7  00A3               	movwf	frexp@eptr^(0+128)
 15059  1CA8  31A3  23B6  319C   	fcall	_frexp
 15060  1CAB  0022               	movlb	2	; select bank2
 15061  1CAC  1FBE               	btfss	(floor@expon+1)^(0+256),7
 15062  1CAD  2CD4               	goto	l7883
 15063  1CAE  0836               	movf	floor@x^(0+256),w
 15064  1CAF  0021               	movlb	1	; select bank1
 15065  1CB0  00A0               	movwf	___ftge@ff1^(0+128)
 15066  1CB1  0022               	movlb	2	; select bank2
 15067  1CB2  0837               	movf	(floor@x+1)^(0+256),w
 15068  1CB3  0021               	movlb	1	; select bank1
 15069  1CB4  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15070  1CB5  0022               	movlb	2	; select bank2
 15071  1CB6  0838               	movf	(floor@x+2)^(0+256),w
 15072  1CB7  0021               	movlb	1	; select bank1
 15073  1CB8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15074  1CB9  3000               	movlw	0
 15075  1CBA  00A3               	movwf	___ftge@ff2^(0+128)
 15076  1CBB  3000               	movlw	0
 15077  1CBC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15078  1CBD  3000               	movlw	0
 15079  1CBE  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15080  1CBF  31A2  22FF  319C   	fcall	___ftge
 15081  1CC2  1803               	btfsc	3,0
 15082  1CC3  2CCC               	goto	l7879
 15083  1CC4  3000               	movlw	0
 15084  1CC5  0022               	movlb	2	; select bank2
 15085  1CC6  00B6               	movwf	?_floor^(0+256)
 15086  1CC7  3080               	movlw	128
 15087  1CC8  00B7               	movwf	(?_floor+1)^(0+256)
 15088  1CC9  30BF               	movlw	191
 15089  1CCA  00B8               	movwf	(?_floor+2)^(0+256)
 15090  1CCB  0008               	return
 15091  1CCC                     l7879:	
 15092  1CCC  3000               	movlw	0
 15093  1CCD  0022               	movlb	2	; select bank2
 15094  1CCE  00B6               	movwf	?_floor^(0+256)
 15095  1CCF  3000               	movlw	0
 15096  1CD0  00B7               	movwf	(?_floor+1)^(0+256)
 15097  1CD1  3000               	movlw	0
 15098  1CD2  00B8               	movwf	(?_floor+2)^(0+256)
 15099  1CD3  0008               	return
 15100  1CD4                     l7883:	
 15101  1CD4  3000               	movlw	0
 15102  1CD5  023E               	subwf	(floor@expon+1)^(0+256),w
 15103  1CD6  3015               	movlw	21
 15104  1CD7  1903               	skipnz
 15105  1CD8  023D               	subwf	floor@expon^(0+256),w
 15106  1CD9  1803               	btfsc	3,0
 15107  1CDA  0008               	return
 15108  1CDB  0836               	movf	floor@x^(0+256),w
 15109  1CDC  00A0               	movwf	___fttol@f1^(0+256)
 15110  1CDD  0837               	movf	(floor@x+1)^(0+256),w
 15111  1CDE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15112  1CDF  0838               	movf	(floor@x+2)^(0+256),w
 15113  1CE0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15114  1CE1  3199  21D5  319C   	fcall	___fttol
 15115  1CE4  0022               	movlb	2	; select bank2
 15116  1CE5  0823               	movf	(?___fttol+3)^(0+256),w
 15117  1CE6  00B1               	movwf	(___altoft@c+3)^(0+256)
 15118  1CE7  0822               	movf	(?___fttol+2)^(0+256),w
 15119  1CE8  00B0               	movwf	(___altoft@c+2)^(0+256)
 15120  1CE9  0821               	movf	(?___fttol+1)^(0+256),w
 15121  1CEA  00AF               	movwf	(___altoft@c+1)^(0+256)
 15122  1CEB  0820               	movf	?___fttol^(0+256),w
 15123  1CEC  00AE               	movwf	___altoft@c^(0+256)
 15124  1CED  3198  2001  319C   	fcall	___altoft
 15125  1CF0  0022               	movlb	2	; select bank2
 15126  1CF1  082E               	movf	?___altoft^(0+256),w
 15127  1CF2  00BA               	movwf	floor@i^(0+256)
 15128  1CF3  082F               	movf	(?___altoft+1)^(0+256),w
 15129  1CF4  00BB               	movwf	(floor@i+1)^(0+256)
 15130  1CF5  0830               	movf	(?___altoft+2)^(0+256),w
 15131  1CF6  00BC               	movwf	(floor@i+2)^(0+256)
 15132  1CF7  0836               	movf	floor@x^(0+256),w
 15133  1CF8  0021               	movlb	1	; select bank1
 15134  1CF9  00A0               	movwf	___ftge@ff1^(0+128)
 15135  1CFA  0022               	movlb	2	; select bank2
 15136  1CFB  0837               	movf	(floor@x+1)^(0+256),w
 15137  1CFC  0021               	movlb	1	; select bank1
 15138  1CFD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15139  1CFE  0022               	movlb	2	; select bank2
 15140  1CFF  0838               	movf	(floor@x+2)^(0+256),w
 15141  1D00  0021               	movlb	1	; select bank1
 15142  1D01  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15143  1D02  0022               	movlb	2	; select bank2
 15144  1D03  083A               	movf	floor@i^(0+256),w
 15145  1D04  0021               	movlb	1	; select bank1
 15146  1D05  00A3               	movwf	___ftge@ff2^(0+128)
 15147  1D06  0022               	movlb	2	; select bank2
 15148  1D07  083B               	movf	(floor@i+1)^(0+256),w
 15149  1D08  0021               	movlb	1	; select bank1
 15150  1D09  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15151  1D0A  0022               	movlb	2	; select bank2
 15152  1D0B  083C               	movf	(floor@i+2)^(0+256),w
 15153  1D0C  0021               	movlb	1	; select bank1
 15154  1D0D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15155  1D0E  31A2  22FF  319C   	fcall	___ftge
 15156  1D11  1803               	btfsc	3,0
 15157  1D12  2D35               	goto	l7893
 15158  1D13  3000               	movlw	0
 15159  1D14  0021               	movlb	1	; select bank1
 15160  1D15  00C1               	movwf	___ftadd@f1^(0+128)
 15161  1D16  3080               	movlw	128
 15162  1D17  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15163  1D18  30BF               	movlw	191
 15164  1D19  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15165  1D1A  0022               	movlb	2	; select bank2
 15166  1D1B  083A               	movf	floor@i^(0+256),w
 15167  1D1C  0021               	movlb	1	; select bank1
 15168  1D1D  00C4               	movwf	___ftadd@f2^(0+128)
 15169  1D1E  0022               	movlb	2	; select bank2
 15170  1D1F  083B               	movf	(floor@i+1)^(0+256),w
 15171  1D20  0021               	movlb	1	; select bank1
 15172  1D21  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15173  1D22  0022               	movlb	2	; select bank2
 15174  1D23  083C               	movf	(floor@i+2)^(0+256),w
 15175  1D24  0021               	movlb	1	; select bank1
 15176  1D25  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15177  1D26  3191  2135         	fcall	___ftadd
 15178  1D28  0021               	movlb	1	; select bank1
 15179  1D29  0841               	movf	?___ftadd^(0+128),w
 15180  1D2A  0022               	movlb	2	; select bank2
 15181  1D2B  00B6               	movwf	?_floor^(0+256)
 15182  1D2C  0021               	movlb	1	; select bank1
 15183  1D2D  0842               	movf	(?___ftadd+1)^(0+128),w
 15184  1D2E  0022               	movlb	2	; select bank2
 15185  1D2F  00B7               	movwf	(?_floor+1)^(0+256)
 15186  1D30  0021               	movlb	1	; select bank1
 15187  1D31  0843               	movf	(?___ftadd+2)^(0+128),w
 15188  1D32  0022               	movlb	2	; select bank2
 15189  1D33  00B8               	movwf	(?_floor+2)^(0+256)
 15190  1D34  0008               	return
 15191  1D35                     l7893:	
 15192  1D35  0022               	movlb	2	; select bank2
 15193  1D36  083A               	movf	floor@i^(0+256),w
 15194  1D37  00B6               	movwf	?_floor^(0+256)
 15195  1D38  083B               	movf	(floor@i+1)^(0+256),w
 15196  1D39  00B7               	movwf	(?_floor+1)^(0+256)
 15197  1D3A  083C               	movf	(floor@i+2)^(0+256),w
 15198  1D3B  00B8               	movwf	(?_floor+2)^(0+256)
 15199  1D3C  0008               	return
 15200  1D3D                     __end_of_floor:	
 15201                           
 15202                           	psect	text45
 15203  23B6                     __ptext45:	
 15204 ;; *************** function _frexp *****************
 15205 ;; Defined at:
 15206 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15207 ;; Parameters:    Size  Location     Type
 15208 ;;  value           3    0[BANK1 ] int 
 15209 ;;  eptr            1    3[BANK1 ] PTR int 
 15210 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;		None
 15213 ;; Return value:  Size  Location     Type
 15214 ;;                  3    0[BANK1 ] PTR int 
 15215 ;; Registers used:
 15216 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15217 ;; Tracked objects:
 15218 ;;		On entry : 0/0
 15219 ;;		On exit  : 0/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15222 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15224 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15225 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15226 ;;Total ram usage:        6 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    3
 15229 ;; This function calls:
 15230 ;;		Nothing
 15231 ;; This function is called by:
 15232 ;;		_trunc
 15233 ;;		_floor
 15234 ;;		_log
 15235 ;; This function uses a non-reentrant model
 15236 ;;
 15237                           
 15238                           
 15239                           ;psect for function _frexp
 15240  23B6                     _frexp:	
 15241                           
 15242                           ;incstack = 0
 15243                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15244  23B6  0021               	movlb	1	; select bank1
 15245  23B7  0822               	movf	(frexp@value+2)^(0+128),w
 15246  23B8  0421               	iorwf	(frexp@value+1)^(0+128),w
 15247  23B9  0420               	iorwf	frexp@value^(0+128),w
 15248  23BA  1D03               	skipz
 15249  23BB  2BCA               	goto	l7745
 15250  23BC  0823               	movf	frexp@eptr^(0+128),w
 15251  23BD  0086               	movwf	6
 15252  23BE  3001               	movlw	1	; select bank2/3
 15253  23BF  0087               	movwf	7
 15254  23C0  3000               	movlw	0
 15255  23C1  3FC0               	movwi [0]fsr1
 15256  23C2  3FC1               	movwi [1]fsr1
 15257  23C3  3000               	movlw	0
 15258  23C4  00A0               	movwf	?_frexp^(0+128)
 15259  23C5  3000               	movlw	0
 15260  23C6  00A1               	movwf	(?_frexp+1)^(0+128)
 15261  23C7  3000               	movlw	0
 15262  23C8  00A2               	movwf	(?_frexp+2)^(0+128)
 15263  23C9  0008               	return
 15264  23CA                     l7745:	
 15265  23CA  0822               	movf	(frexp@value^(0+128)+2),w
 15266  23CB  397F               	andlw	127
 15267  23CC  00A4               	movwf	??_frexp^(0+128)
 15268  23CD  01A5               	clrf	(??_frexp^(0+128)+1)
 15269  23CE  35A4               	lslf	??_frexp^(0+128),f
 15270  23CF  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15271  23D0  0823               	movf	frexp@eptr^(0+128),w
 15272  23D1  0086               	movwf	6
 15273  23D2  3001               	movlw	1	; select bank2/3
 15274  23D3  0087               	movwf	7
 15275  23D4  0824               	movf	??_frexp^(0+128),w
 15276  23D5  3FC0               	movwi [0]fsr1
 15277  23D6  0825               	movf	(??_frexp+1)^(0+128),w
 15278  23D7  3FC1               	movwi [1]fsr1
 15279  23D8  0D21               	rlf	(frexp@value^(0+128)+1),w
 15280  23D9  0D21               	rlf	(frexp@value^(0+128)+1),w
 15281  23DA  3901               	andlw	1
 15282  23DB  00A4               	movwf	??_frexp^(0+128)
 15283  23DC  01A5               	clrf	(??_frexp^(0+128)+1)
 15284  23DD  0823               	movf	frexp@eptr^(0+128),w
 15285  23DE  0086               	movwf	6
 15286  23DF  3001               	movlw	1	; select bank2/3
 15287  23E0  0087               	movwf	7
 15288  23E1  0824               	movf	??_frexp^(0+128),w
 15289  23E2  0481               	iorwf	1,f
 15290  23E3  3141               	addfsr 1,1
 15291  23E4  0825               	movf	(??_frexp+1)^(0+128),w
 15292  23E5  0481               	iorwf	1,f
 15293  23E6  0823               	movf	frexp@eptr^(0+128),w
 15294  23E7  0086               	movwf	6
 15295  23E8  3001               	movlw	1	; select bank2/3
 15296  23E9  0087               	movwf	7
 15297  23EA  3082               	movlw	130
 15298  23EB  0781               	addwf	1,f
 15299  23EC  3141               	addfsr 1,1
 15300  23ED  30FF               	movlw	255
 15301  23EE  3D81               	addwfc	1,f
 15302  23EF  317F               	addfsr 1,-1
 15303  23F0  0822               	movf	(frexp@value^(0+128)+2),w
 15304  23F1  3980               	andlw	-128
 15305  23F2  383F               	iorlw	63
 15306  23F3  00A2               	movwf	(frexp@value^(0+128)+2)
 15307  23F4  13A1               	bcf	(frexp@value^(0+128)+1),7
 15308  23F5  0008               	return
 15309  23F6                     __end_of_frexp:	
 15310                           
 15311                           	psect	text46
 15312  19D5                     __ptext46:	
 15313 ;; *************** function ___fttol *****************
 15314 ;; Defined at:
 15315 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15316 ;; Parameters:    Size  Location     Type
 15317 ;;  f1              3    0[BANK2 ] float 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  lval            4    9[BANK2 ] unsigned long 
 15320 ;;  exp1            1   13[BANK2 ] unsigned char 
 15321 ;;  sign1           1    8[BANK2 ] unsigned char 
 15322 ;; Return value:  Size  Location     Type
 15323 ;;                  4    0[BANK2 ] long 
 15324 ;; Registers used:
 15325 ;;		wreg, status,2, status,0
 15326 ;; Tracked objects:
 15327 ;;		On entry : 0/0
 15328 ;;		On exit  : 0/0
 15329 ;;		Unchanged: 0/0
 15330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15331 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15332 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15333 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15334 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15335 ;;Total ram usage:       14 bytes
 15336 ;; Hardware stack levels used:    1
 15337 ;; Hardware stack levels required when called:    3
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		_main
 15342 ;;		_set_subdivision
 15343 ;;		_scaleA100kPot
 15344 ;;		_scaleA10kPot
 15345 ;;		_scaleiA10kPot
 15346 ;;		_modSin
 15347 ;;		_modTri
 15348 ;;		_modSaw
 15349 ;;		_pow
 15350 ;;		_trunc
 15351 ;;		_exp
 15352 ;;		_floor
 15353 ;;		_scaleiA100kPot
 15354 ;; This function uses a non-reentrant model
 15355 ;;
 15356                           
 15357                           
 15358                           ;psect for function ___fttol
 15359  19D5                     ___fttol:	
 15360                           
 15361                           ;incstack = 0
 15362                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15363  19D5  0022               	movlb	2	; select bank2
 15364  19D6  0820               	movf	___fttol@f1^(0+256),w
 15365  19D7  00A4               	movwf	??___fttol^(0+256)
 15366  19D8  0821               	movf	(___fttol@f1+1)^(0+256),w
 15367  19D9  00A5               	movwf	(??___fttol^(0+256)+1)
 15368  19DA  0822               	movf	(___fttol@f1+2)^(0+256),w
 15369  19DB  00A6               	movwf	(??___fttol^(0+256)+2)
 15370  19DC  1003               	clrc
 15371  19DD  0D25               	rlf	(??___fttol^(0+256)+1),w
 15372  19DE  0D26               	rlf	(??___fttol^(0+256)+2),w
 15373  19DF  00A7               	movwf	(??___fttol+3)^(0+256)
 15374  19E0  0827               	movf	(??___fttol+3)^(0+256),w
 15375  19E1  00AD               	movwf	___fttol@exp1^(0+256)
 15376  19E2  082D               	movf	___fttol@exp1^(0+256),w
 15377  19E3  1D03               	btfss	3,2
 15378  19E4  29EE               	goto	l7701
 15379  19E5  3000               	movlw	0
 15380  19E6  00A3               	movwf	(?___fttol+3)^(0+256)
 15381  19E7  3000               	movlw	0
 15382  19E8  00A2               	movwf	(?___fttol+2)^(0+256)
 15383  19E9  3000               	movlw	0
 15384  19EA  00A1               	movwf	(?___fttol+1)^(0+256)
 15385  19EB  3000               	movlw	0
 15386  19EC  00A0               	movwf	?___fttol^(0+256)
 15387  19ED  0008               	return
 15388  19EE                     l7701:	
 15389  19EE  0820               	movf	___fttol@f1^(0+256),w
 15390  19EF  00A4               	movwf	??___fttol^(0+256)
 15391  19F0  0821               	movf	(___fttol@f1+1)^(0+256),w
 15392  19F1  00A5               	movwf	(??___fttol^(0+256)+1)
 15393  19F2  0822               	movf	(___fttol@f1+2)^(0+256),w
 15394  19F3  00A6               	movwf	(??___fttol^(0+256)+2)
 15395  19F4  3017               	movlw	23
 15396  19F5                     u7985:	
 15397  19F5  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15398  19F6  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15399  19F7  0CA4               	rrf	??___fttol^(0+256),f
 15400  19F8  0B89               	decfsz	9,f
 15401  19F9  29F5               	goto	u7985
 15402  19FA  0824               	movf	??___fttol^(0+256),w
 15403  19FB  00A7               	movwf	(??___fttol+3)^(0+256)
 15404  19FC  0827               	movf	(??___fttol+3)^(0+256),w
 15405  19FD  00A8               	movwf	___fttol@sign1^(0+256)
 15406  19FE  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15407  19FF  30FF               	movlw	255
 15408  1A00  05A0               	andwf	___fttol@f1^(0+256),f
 15409  1A01  30FF               	movlw	255
 15410  1A02  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15411  1A03  3000               	movlw	0
 15412  1A04  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15413  1A05  0820               	movf	___fttol@f1^(0+256),w
 15414  1A06  00A9               	movwf	___fttol@lval^(0+256)
 15415  1A07  0821               	movf	(___fttol@f1+1)^(0+256),w
 15416  1A08  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15417  1A09  0822               	movf	(___fttol@f1+2)^(0+256),w
 15418  1A0A  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15419  1A0B  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15420  1A0C  308E               	movlw	142
 15421  1A0D  02AD               	subwf	___fttol@exp1^(0+256),f
 15422  1A0E  1FAD               	btfss	___fttol@exp1^(0+256),7
 15423  1A0F  2A2C               	goto	l7721
 15424  1A10  082D               	movf	___fttol@exp1^(0+256),w
 15425  1A11  3A80               	xorlw	128
 15426  1A12  3E8F               	addlw	143
 15427  1A13  1803               	skipnc
 15428  1A14  2A1E               	goto	l7719
 15429  1A15  3000               	movlw	0
 15430  1A16  00A3               	movwf	(?___fttol+3)^(0+256)
 15431  1A17  3000               	movlw	0
 15432  1A18  00A2               	movwf	(?___fttol+2)^(0+256)
 15433  1A19  3000               	movlw	0
 15434  1A1A  00A1               	movwf	(?___fttol+1)^(0+256)
 15435  1A1B  3000               	movlw	0
 15436  1A1C  00A0               	movwf	?___fttol^(0+256)
 15437  1A1D  0008               	return
 15438  1A1E                     l7719:	
 15439  1A1E  3001               	movlw	1
 15440  1A1F                     u8015:	
 15441  1A1F  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 15442  1A20  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 15443  1A21  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 15444  1A22  0CA9               	rrf	___fttol@lval^(0+256),f
 15445  1A23  0B89               	decfsz	9,f
 15446  1A24  2A1F               	goto	u8015
 15447  1A25  3001               	movlw	1
 15448  1A26  00A4               	movwf	??___fttol^(0+256)
 15449  1A27  0824               	movf	??___fttol^(0+256),w
 15450  1A28  07AD               	addwf	___fttol@exp1^(0+256),f
 15451  1A29  1903               	btfsc	3,2
 15452  1A2A  2A45               	goto	l7729
 15453  1A2B  2A1E               	goto	l7719
 15454  1A2C                     l7721:	
 15455  1A2C  3018               	movlw	24
 15456  1A2D  022D               	subwf	___fttol@exp1^(0+256),w
 15457  1A2E  1C03               	skipc
 15458  1A2F  2A42               	goto	l2196
 15459  1A30  3000               	movlw	0
 15460  1A31  00A3               	movwf	(?___fttol+3)^(0+256)
 15461  1A32  3000               	movlw	0
 15462  1A33  00A2               	movwf	(?___fttol+2)^(0+256)
 15463  1A34  3000               	movlw	0
 15464  1A35  00A1               	movwf	(?___fttol+1)^(0+256)
 15465  1A36  3000               	movlw	0
 15466  1A37  00A0               	movwf	?___fttol^(0+256)
 15467  1A38  0008               	return
 15468  1A39                     l7727:	
 15469  1A39  3001               	movlw	1
 15470  1A3A                     u8045:	
 15471  1A3A  35A9               	lslf	___fttol@lval^(0+256),f
 15472  1A3B  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 15473  1A3C  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 15474  1A3D  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 15475  1A3E  0B89               	decfsz	9,f
 15476  1A3F  2A3A               	goto	u8045
 15477  1A40  3001               	movlw	1
 15478  1A41  02AD               	subwf	___fttol@exp1^(0+256),f
 15479  1A42                     l2196:	
 15480  1A42  082D               	movf	___fttol@exp1^(0+256),w
 15481  1A43  1D03               	btfss	3,2
 15482  1A44  2A39               	goto	l7727
 15483  1A45                     l7729:	
 15484  1A45  0828               	movf	___fttol@sign1^(0+256),w
 15485  1A46  1903               	btfsc	3,2
 15486  1A47  2A53               	goto	l7733
 15487  1A48  09A9               	comf	___fttol@lval^(0+256),f
 15488  1A49  09AA               	comf	(___fttol@lval+1)^(0+256),f
 15489  1A4A  09AB               	comf	(___fttol@lval+2)^(0+256),f
 15490  1A4B  09AC               	comf	(___fttol@lval+3)^(0+256),f
 15491  1A4C  0AA9               	incf	___fttol@lval^(0+256),f
 15492  1A4D  1903               	skipnz
 15493  1A4E  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 15494  1A4F  1903               	skipnz
 15495  1A50  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 15496  1A51  1903               	skipnz
 15497  1A52  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 15498  1A53                     l7733:	
 15499  1A53  082C               	movf	(___fttol@lval+3)^(0+256),w
 15500  1A54  00A3               	movwf	(?___fttol+3)^(0+256)
 15501  1A55  082B               	movf	(___fttol@lval+2)^(0+256),w
 15502  1A56  00A2               	movwf	(?___fttol+2)^(0+256)
 15503  1A57  082A               	movf	(___fttol@lval+1)^(0+256),w
 15504  1A58  00A1               	movwf	(?___fttol+1)^(0+256)
 15505  1A59  0829               	movf	___fttol@lval^(0+256),w
 15506  1A5A  00A0               	movwf	?___fttol^(0+256)
 15507  1A5B  0008               	return
 15508  1A5C                     __end_of___fttol:	
 15509                           
 15510                           	psect	text47
 15511  22FF                     __ptext47:	
 15512 ;; *************** function ___ftge *****************
 15513 ;; Defined at:
 15514 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 15515 ;; Parameters:    Size  Location     Type
 15516 ;;  ff1             3    0[BANK1 ] float 
 15517 ;;  ff2             3    3[BANK1 ] float 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;		None
 15520 ;; Return value:  Size  Location     Type
 15521 ;;		None               void
 15522 ;; Registers used:
 15523 ;;		wreg, status,2, status,0
 15524 ;; Tracked objects:
 15525 ;;		On entry : 0/0
 15526 ;;		On exit  : 0/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15529 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15531 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15532 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15533 ;;Total ram usage:        9 bytes
 15534 ;; Hardware stack levels used:    1
 15535 ;; Hardware stack levels required when called:    3
 15536 ;; This function calls:
 15537 ;;		Nothing
 15538 ;; This function is called by:
 15539 ;;		_modSin
 15540 ;;		_modTri
 15541 ;;		_modSaw
 15542 ;;		_modSquare
 15543 ;;		_pow
 15544 ;;		_sin
 15545 ;;		_exp
 15546 ;;		_floor
 15547 ;;		_ldexp
 15548 ;;		_log
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           
 15553                           ;psect for function ___ftge
 15554  22FF                     ___ftge:	
 15555                           
 15556                           ;incstack = 0
 15557                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 15558  22FF  0021               	movlb	1	; select bank1
 15559  2300  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 15560  2301  2B16               	goto	l7621
 15561  2302  0920               	comf	___ftge@ff1^(0+128),w
 15562  2303  00A6               	movwf	??___ftge^(0+128)
 15563  2304  0921               	comf	(___ftge@ff1+1)^(0+128),w
 15564  2305  00A7               	movwf	(??___ftge^(0+128)+1)
 15565  2306  0922               	comf	(___ftge@ff1+2)^(0+128),w
 15566  2307  00A8               	movwf	(??___ftge^(0+128)+2)
 15567  2308  0AA6               	incf	??___ftge^(0+128),f
 15568  2309  1903               	skipnz
 15569  230A  0AA7               	incf	(??___ftge^(0+128)+1),f
 15570  230B  1903               	skipnz
 15571  230C  0AA8               	incf	(??___ftge^(0+128)+2),f
 15572  230D  3000               	movlw	0
 15573  230E  0726               	addwf	??___ftge^(0+128),w
 15574  230F  00A0               	movwf	___ftge@ff1^(0+128)
 15575  2310  3000               	movlw	0
 15576  2311  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15577  2312  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15578  2313  3080               	movlw	128
 15579  2314  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15580  2315  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15581  2316                     l7621:	
 15582  2316  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 15583  2317  2B2C               	goto	l7625
 15584  2318  0923               	comf	___ftge@ff2^(0+128),w
 15585  2319  00A6               	movwf	??___ftge^(0+128)
 15586  231A  0924               	comf	(___ftge@ff2+1)^(0+128),w
 15587  231B  00A7               	movwf	(??___ftge^(0+128)+1)
 15588  231C  0925               	comf	(___ftge@ff2+2)^(0+128),w
 15589  231D  00A8               	movwf	(??___ftge^(0+128)+2)
 15590  231E  0AA6               	incf	??___ftge^(0+128),f
 15591  231F  1903               	skipnz
 15592  2320  0AA7               	incf	(??___ftge^(0+128)+1),f
 15593  2321  1903               	skipnz
 15594  2322  0AA8               	incf	(??___ftge^(0+128)+2),f
 15595  2323  3000               	movlw	0
 15596  2324  0726               	addwf	??___ftge^(0+128),w
 15597  2325  00A3               	movwf	___ftge@ff2^(0+128)
 15598  2326  3000               	movlw	0
 15599  2327  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15600  2328  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15601  2329  3080               	movlw	128
 15602  232A  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15603  232B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15604  232C                     l7625:	
 15605  232C  3080               	movlw	128
 15606  232D  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 15607  232E  3080               	movlw	128
 15608  232F  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 15609  2330  0825               	movf	(___ftge@ff2+2)^(0+128),w
 15610  2331  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 15611  2332  1D03               	skipz
 15612  2333  0008               	return
 15613  2334  0824               	movf	(___ftge@ff2+1)^(0+128),w
 15614  2335  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 15615  2336  1D03               	skipz
 15616  2337  0008               	return
 15617  2338  0823               	movf	___ftge@ff2^(0+128),w
 15618  2339  0220               	subwf	___ftge@ff1^(0+128),w
 15619  233A  0008               	return
 15620  233B                     __end_of___ftge:	
 15621                           
 15622                           	psect	text48
 15623  1801                     __ptext48:	
 15624 ;; *************** function ___altoft *****************
 15625 ;; Defined at:
 15626 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 15627 ;; Parameters:    Size  Location     Type
 15628 ;;  c               4   14[BANK2 ] long 
 15629 ;; Auto vars:     Size  Location     Type
 15630 ;;  sign            1   21[BANK2 ] unsigned char 
 15631 ;;  exp             1   20[BANK2 ] unsigned char 
 15632 ;; Return value:  Size  Location     Type
 15633 ;;                  3   14[BANK2 ] float 
 15634 ;; Registers used:
 15635 ;;		wreg, status,2, status,0, pclath, cstack
 15636 ;; Tracked objects:
 15637 ;;		On entry : 0/0
 15638 ;;		On exit  : 0/0
 15639 ;;		Unchanged: 0/0
 15640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15641 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15642 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15643 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15644 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15645 ;;Total ram usage:        8 bytes
 15646 ;; Hardware stack levels used:    1
 15647 ;; Hardware stack levels required when called:    4
 15648 ;; This function calls:
 15649 ;;		___ftpack
 15650 ;; This function is called by:
 15651 ;;		_trunc
 15652 ;;		_floor
 15653 ;; This function uses a non-reentrant model
 15654 ;;
 15655                           
 15656                           
 15657                           ;psect for function ___altoft
 15658  1801                     ___altoft:	
 15659                           
 15660                           ;incstack = 0
 15661                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15662  1801  0022               	movlb	2	; select bank2
 15663  1802  01B5               	clrf	___altoft@sign^(0+256)
 15664  1803  308E               	movlw	142
 15665  1804  00B2               	movwf	??___altoft^(0+256)
 15666  1805  0832               	movf	??___altoft^(0+256),w
 15667  1806  00B4               	movwf	___altoft@exp^(0+256)
 15668  1807  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 15669  1808  2816               	goto	l7541
 15670  1809  09AE               	comf	___altoft@c^(0+256),f
 15671  180A  09AF               	comf	(___altoft@c+1)^(0+256),f
 15672  180B  09B0               	comf	(___altoft@c+2)^(0+256),f
 15673  180C  09B1               	comf	(___altoft@c+3)^(0+256),f
 15674  180D  0AAE               	incf	___altoft@c^(0+256),f
 15675  180E  1903               	skipnz
 15676  180F  0AAF               	incf	(___altoft@c+1)^(0+256),f
 15677  1810  1903               	skipnz
 15678  1811  0AB0               	incf	(___altoft@c+2)^(0+256),f
 15679  1812  1903               	skipnz
 15680  1813  0AB1               	incf	(___altoft@c+3)^(0+256),f
 15681  1814  01B5               	clrf	___altoft@sign^(0+256)
 15682  1815  0AB5               	incf	___altoft@sign^(0+256),f
 15683  1816                     l7541:	
 15684  1816  30FF               	movlw	255
 15685  1817  0531               	andwf	(___altoft@c+3)^(0+256),w
 15686  1818  1903               	btfsc	3,2
 15687  1819  2826               	goto	l7543
 15688  181A  3001               	movlw	1
 15689  181B                     u7565:	
 15690  181B  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 15691  181C  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 15692  181D  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 15693  181E  0CAE               	rrf	___altoft@c^(0+256),f
 15694  181F  0B89               	decfsz	9,f
 15695  1820  281B               	goto	u7565
 15696  1821  3001               	movlw	1
 15697  1822  00B2               	movwf	??___altoft^(0+256)
 15698  1823  0832               	movf	??___altoft^(0+256),w
 15699  1824  07B4               	addwf	___altoft@exp^(0+256),f
 15700  1825  2816               	goto	l7541
 15701  1826                     l7543:	
 15702  1826  082E               	movf	___altoft@c^(0+256),w
 15703  1827  0021               	movlb	1	; select bank1
 15704  1828  00A0               	movwf	___ftpack@arg^(0+128)
 15705  1829  0022               	movlb	2	; select bank2
 15706  182A  082F               	movf	(___altoft@c+1)^(0+256),w
 15707  182B  0021               	movlb	1	; select bank1
 15708  182C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15709  182D  0022               	movlb	2	; select bank2
 15710  182E  0830               	movf	(___altoft@c+2)^(0+256),w
 15711  182F  0021               	movlb	1	; select bank1
 15712  1830  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15713  1831  0022               	movlb	2	; select bank2
 15714  1832  0834               	movf	___altoft@exp^(0+256),w
 15715  1833  00B2               	movwf	??___altoft^(0+256)
 15716  1834  0832               	movf	??___altoft^(0+256),w
 15717  1835  0021               	movlb	1	; select bank1
 15718  1836  00A3               	movwf	___ftpack@exp^(0+128)
 15719  1837  0022               	movlb	2	; select bank2
 15720  1838  0835               	movf	___altoft@sign^(0+256),w
 15721  1839  00B3               	movwf	(??___altoft+1)^(0+256)
 15722  183A  0833               	movf	(??___altoft+1)^(0+256),w
 15723  183B  0021               	movlb	1	; select bank1
 15724  183C  00A4               	movwf	___ftpack@sign^(0+128)
 15725  183D  3188  2002         	fcall	___ftpack
 15726  183F  0021               	movlb	1	; select bank1
 15727  1840  0820               	movf	?___ftpack^(0+128),w
 15728  1841  0022               	movlb	2	; select bank2
 15729  1842  00AE               	movwf	?___altoft^(0+256)
 15730  1843  0021               	movlb	1	; select bank1
 15731  1844  0821               	movf	(?___ftpack+1)^(0+128),w
 15732  1845  0022               	movlb	2	; select bank2
 15733  1846  00AF               	movwf	(?___altoft+1)^(0+256)
 15734  1847  0021               	movlb	1	; select bank1
 15735  1848  0822               	movf	(?___ftpack+2)^(0+128),w
 15736  1849  0022               	movlb	2	; select bank2
 15737  184A  00B0               	movwf	(?___altoft+2)^(0+256)
 15738  184B  0008               	return
 15739  184C                     __end_of___altoft:	
 15740                           
 15741                           	psect	text49
 15742  2718                     __ptext49:	
 15743 ;; *************** function _eval_poly *****************
 15744 ;; Defined at:
 15745 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 15746 ;; Parameters:    Size  Location     Type
 15747 ;;  x               3   20[BANK2 ] float 
 15748 ;;  d               2   23[BANK2 ] PTR const 
 15749 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 15750 ;;  n               2   25[BANK2 ] int 
 15751 ;; Auto vars:     Size  Location     Type
 15752 ;;  res             3   27[BANK2 ] int 
 15753 ;; Return value:  Size  Location     Type
 15754 ;;                  3   20[BANK2 ] int 
 15755 ;; Registers used:
 15756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15757 ;; Tracked objects:
 15758 ;;		On entry : 0/0
 15759 ;;		On exit  : 0/0
 15760 ;;		Unchanged: 0/0
 15761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15762 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15763 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15765 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15766 ;;Total ram usage:       10 bytes
 15767 ;; Hardware stack levels used:    1
 15768 ;; Hardware stack levels required when called:    5
 15769 ;; This function calls:
 15770 ;;		___ftadd
 15771 ;;		___ftmul
 15772 ;;		___wmul
 15773 ;; This function is called by:
 15774 ;;		_sin
 15775 ;;		_exp
 15776 ;;		_log
 15777 ;; This function uses a non-reentrant model
 15778 ;;
 15779                           
 15780                           
 15781                           ;psect for function _eval_poly
 15782  2718                     _eval_poly:	
 15783                           
 15784                           ;incstack = 0
 15785                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15786  2718  0022               	movlb	2	; select bank2
 15787  2719  083A               	movf	(eval_poly@n+1)^(0+256),w
 15788  271A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15789  271B  0839               	movf	eval_poly@n^(0+256),w
 15790  271C  00AE               	movwf	___wmul@multiplier^(0+256)
 15791  271D  3003               	movlw	3
 15792  271E  00B0               	movwf	___wmul@multiplicand^(0+256)
 15793  271F  3000               	movlw	0
 15794  2720  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15795  2721  31A0  2002  31A7   	fcall	___wmul
 15796  2724  0022               	movlb	2	; select bank2
 15797  2725  0837               	movf	eval_poly@d^(0+256),w
 15798  2726  072E               	addwf	?___wmul^(0+256),w
 15799  2727  0084               	movwf	4
 15800  2728  0838               	movf	(eval_poly@d+1)^(0+256),w
 15801  2729  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15802  272A  0085               	movwf	5
 15803  272B  3F00               	moviw [0]fsr0
 15804  272C  00BB               	movwf	eval_poly@res^(0+256)
 15805  272D  3F01               	moviw [1]fsr0
 15806  272E  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15807  272F  3F02               	moviw [2]fsr0
 15808  2730                     L18:	
 15809  2730  00BD               	movwf	(eval_poly@res+2)^(0+256)
 15810  2731  0839               	movf	eval_poly@n^(0+256),w
 15811  2732  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 15812  2733  1903               	btfsc	3,2
 15813  2734  2F83               	goto	l7903
 15814  2735  30FF               	movlw	255
 15815  2736  07B9               	addwf	eval_poly@n^(0+256),f
 15816  2737  30FF               	movlw	255
 15817  2738  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 15818  2739  083A               	movf	(eval_poly@n+1)^(0+256),w
 15819  273A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15820  273B  0839               	movf	eval_poly@n^(0+256),w
 15821  273C  00AE               	movwf	___wmul@multiplier^(0+256)
 15822  273D  3003               	movlw	3
 15823  273E  00B0               	movwf	___wmul@multiplicand^(0+256)
 15824  273F  3000               	movlw	0
 15825  2740  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15826  2741  31A0  2002  31A7   	fcall	___wmul
 15827  2744  0022               	movlb	2	; select bank2
 15828  2745  0837               	movf	eval_poly@d^(0+256),w
 15829  2746  072E               	addwf	?___wmul^(0+256),w
 15830  2747  0084               	movwf	4
 15831  2748  0838               	movf	(eval_poly@d+1)^(0+256),w
 15832  2749  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15833  274A  0085               	movwf	5
 15834  274B  3F00               	moviw [0]fsr0
 15835  274C  0021               	movlb	1	; select bank1
 15836  274D  00C1               	movwf	___ftadd@f1^(0+128)
 15837  274E  3F01               	moviw [1]fsr0
 15838  274F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15839  2750  3F02               	moviw [2]fsr0
 15840  2751  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15841  2752  0022               	movlb	2	; select bank2
 15842  2753  083B               	movf	eval_poly@res^(0+256),w
 15843  2754  0021               	movlb	1	; select bank1
 15844  2755  00AE               	movwf	___ftmul@f1^(0+128)
 15845  2756  0022               	movlb	2	; select bank2
 15846  2757  083C               	movf	(eval_poly@res+1)^(0+256),w
 15847  2758  0021               	movlb	1	; select bank1
 15848  2759  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15849  275A  0022               	movlb	2	; select bank2
 15850  275B  083D               	movf	(eval_poly@res+2)^(0+256),w
 15851  275C  0021               	movlb	1	; select bank1
 15852  275D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15853  275E  0022               	movlb	2	; select bank2
 15854  275F  0834               	movf	eval_poly@x^(0+256),w
 15855  2760  0021               	movlb	1	; select bank1
 15856  2761  00B1               	movwf	___ftmul@f2^(0+128)
 15857  2762  0022               	movlb	2	; select bank2
 15858  2763  0835               	movf	(eval_poly@x+1)^(0+256),w
 15859  2764  0021               	movlb	1	; select bank1
 15860  2765  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15861  2766  0022               	movlb	2	; select bank2
 15862  2767  0836               	movf	(eval_poly@x+2)^(0+256),w
 15863  2768  0021               	movlb	1	; select bank1
 15864  2769  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15865  276A  319E  2691  31A7   	fcall	___ftmul
 15866  276D  0021               	movlb	1	; select bank1
 15867  276E  082E               	movf	?___ftmul^(0+128),w
 15868  276F  00C4               	movwf	___ftadd@f2^(0+128)
 15869  2770  082F               	movf	(?___ftmul+1)^(0+128),w
 15870  2771  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15871  2772  0830               	movf	(?___ftmul+2)^(0+128),w
 15872  2773  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15873  2774  3191  2135  31A7   	fcall	___ftadd
 15874  2777  0021               	movlb	1	; select bank1
 15875  2778  0841               	movf	?___ftadd^(0+128),w
 15876  2779  0022               	movlb	2	; select bank2
 15877  277A  00BB               	movwf	eval_poly@res^(0+256)
 15878  277B  0021               	movlb	1	; select bank1
 15879  277C  0842               	movf	(?___ftadd+1)^(0+128),w
 15880  277D  0022               	movlb	2	; select bank2
 15881  277E  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15882  277F  0021               	movlb	1	; select bank1
 15883  2780  0843               	movf	(?___ftadd+2)^(0+128),w
 15884  2781  0022               	movlb	2	; select bank2
 15885  2782  2F30               	goto	L18
 15886  2783                     l7903:	
 15887  2783  083B               	movf	eval_poly@res^(0+256),w
 15888  2784  00B4               	movwf	?_eval_poly^(0+256)
 15889  2785  083C               	movf	(eval_poly@res+1)^(0+256),w
 15890  2786  00B5               	movwf	(?_eval_poly+1)^(0+256)
 15891  2787  083D               	movf	(eval_poly@res+2)^(0+256),w
 15892  2788  00B6               	movwf	(?_eval_poly+2)^(0+256)
 15893  2789  0008               	return
 15894  278A                     __end_of_eval_poly:	
 15895                           
 15896                           	psect	text50
 15897  2002                     __ptext50:	
 15898 ;; *************** function ___wmul *****************
 15899 ;; Defined at:
 15900 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;  multiplier      2   14[BANK2 ] unsigned int 
 15903 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 15904 ;; Auto vars:     Size  Location     Type
 15905 ;;  product         2   18[BANK2 ] unsigned int 
 15906 ;; Return value:  Size  Location     Type
 15907 ;;                  2   14[BANK2 ] unsigned int 
 15908 ;; Registers used:
 15909 ;;		wreg, status,2, status,0
 15910 ;; Tracked objects:
 15911 ;;		On entry : 0/0
 15912 ;;		On exit  : 0/0
 15913 ;;		Unchanged: 0/0
 15914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15915 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15916 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15918 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15919 ;;Total ram usage:        6 bytes
 15920 ;; Hardware stack levels used:    1
 15921 ;; Hardware stack levels required when called:    3
 15922 ;; This function calls:
 15923 ;;		Nothing
 15924 ;; This function is called by:
 15925 ;;		_calcSinArray
 15926 ;;		_updateModulationArray
 15927 ;;		_modSin
 15928 ;;		_eval_poly
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           
 15933                           ;psect for function ___wmul
 15934  2002                     ___wmul:	
 15935                           
 15936                           ;incstack = 0
 15937                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15938  2002  0022               	movlb	2	; select bank2
 15939  2003  01B2               	clrf	___wmul@product^(0+256)
 15940  2004  01B3               	clrf	(___wmul@product+1)^(0+256)
 15941  2005                     l7519:	
 15942  2005  1C2E               	btfss	___wmul@multiplier^(0+256),0
 15943  2006  280B               	goto	l1944
 15944  2007  0830               	movf	___wmul@multiplicand^(0+256),w
 15945  2008  07B2               	addwf	___wmul@product^(0+256),f
 15946  2009  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 15947  200A  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 15948  200B                     l1944:	
 15949  200B  3001               	movlw	1
 15950  200C                     u7525:	
 15951  200C  35B0               	lslf	___wmul@multiplicand^(0+256),f
 15952  200D  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 15953  200E  0B89               	decfsz	9,f
 15954  200F  280C               	goto	u7525
 15955  2010  3001               	movlw	1
 15956  2011                     u7535:	
 15957  2011  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 15958  2012  0CAE               	rrf	___wmul@multiplier^(0+256),f
 15959  2013  0B89               	decfsz	9,f
 15960  2014  2811               	goto	u7535
 15961  2015  082E               	movf	___wmul@multiplier^(0+256),w
 15962  2016  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 15963  2017  1D03               	btfss	3,2
 15964  2018  2805               	goto	l7519
 15965  2019  0833               	movf	(___wmul@product+1)^(0+256),w
 15966  201A  00AF               	movwf	(?___wmul+1)^(0+256)
 15967  201B  0832               	movf	___wmul@product^(0+256),w
 15968  201C  00AE               	movwf	?___wmul^(0+256)
 15969  201D  0008               	return
 15970  201E                     __end_of___wmul:	
 15971                           
 15972                           	psect	text51
 15973  1E91                     __ptext51:	
 15974 ;; *************** function ___ftmul *****************
 15975 ;; Defined at:
 15976 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;  f1              3   14[BANK1 ] float 
 15979 ;;  f2              3   17[BANK1 ] float 
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 15982 ;;  sign            1   29[BANK1 ] unsigned char 
 15983 ;;  cntr            1   28[BANK1 ] unsigned char 
 15984 ;;  exp             1   24[BANK1 ] unsigned char 
 15985 ;; Return value:  Size  Location     Type
 15986 ;;                  3   14[BANK1 ] float 
 15987 ;; Registers used:
 15988 ;;		wreg, status,2, status,0, pclath, cstack
 15989 ;; Tracked objects:
 15990 ;;		On entry : 0/0
 15991 ;;		On exit  : 0/0
 15992 ;;		Unchanged: 0/0
 15993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15994 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15995 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15996 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15997 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15998 ;;Total ram usage:       16 bytes
 15999 ;; Hardware stack levels used:    1
 16000 ;; Hardware stack levels required when called:    4
 16001 ;; This function calls:
 16002 ;;		___ftpack
 16003 ;; This function is called by:
 16004 ;;		_set_subdivision
 16005 ;;		_map
 16006 ;;		_scaleA100kPot
 16007 ;;		_scaleA10kPot
 16008 ;;		_scaleiA10kPot
 16009 ;;		_calcSinArray
 16010 ;;		_modSin
 16011 ;;		_modTri
 16012 ;;		_modSaw
 16013 ;;		_pow
 16014 ;;		_sin
 16015 ;;		_eval_poly
 16016 ;;		_exp
 16017 ;;		_log
 16018 ;;		_scalePotValue
 16019 ;;		_scaleiA100kPot
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function ___ftmul
 16025  1E91                     ___ftmul:	
 16026                           
 16027                           ;incstack = 0
 16028                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16029  1E91  0021               	movlb	1	; select bank1
 16030  1E92  082E               	movf	___ftmul@f1^(0+128),w
 16031  1E93  00B4               	movwf	??___ftmul^(0+128)
 16032  1E94  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16033  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 16034  1E96  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16035  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 16036  1E98  1003               	clrc
 16037  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16038  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16039  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16040  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 16041  1E9D  00B8               	movwf	___ftmul@exp^(0+128)
 16042  1E9E  0838               	movf	___ftmul@exp^(0+128),w
 16043  1E9F  1D03               	btfss	3,2
 16044  1EA0  2EA8               	goto	l7643
 16045  1EA1  3000               	movlw	0
 16046  1EA2  00AE               	movwf	?___ftmul^(0+128)
 16047  1EA3  3000               	movlw	0
 16048  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 16049  1EA5  3000               	movlw	0
 16050  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 16051  1EA7  0008               	return
 16052  1EA8                     l7643:	
 16053  1EA8  0831               	movf	___ftmul@f2^(0+128),w
 16054  1EA9  00B4               	movwf	??___ftmul^(0+128)
 16055  1EAA  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16056  1EAB  00B5               	movwf	(??___ftmul^(0+128)+1)
 16057  1EAC  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16058  1EAD  00B6               	movwf	(??___ftmul^(0+128)+2)
 16059  1EAE  1003               	clrc
 16060  1EAF  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16061  1EB0  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16062  1EB1  00B7               	movwf	(??___ftmul+3)^(0+128)
 16063  1EB2  0837               	movf	(??___ftmul+3)^(0+128),w
 16064  1EB3  00BD               	movwf	___ftmul@sign^(0+128)
 16065  1EB4  083D               	movf	___ftmul@sign^(0+128),w
 16066  1EB5  1D03               	btfss	3,2
 16067  1EB6  2EBE               	goto	l7649
 16068  1EB7  3000               	movlw	0
 16069  1EB8  00AE               	movwf	?___ftmul^(0+128)
 16070  1EB9  3000               	movlw	0
 16071  1EBA  00AF               	movwf	(?___ftmul+1)^(0+128)
 16072  1EBB  3000               	movlw	0
 16073  1EBC  00B0               	movwf	(?___ftmul+2)^(0+128)
 16074  1EBD  0008               	return
 16075  1EBE                     l7649:	
 16076  1EBE  083D               	movf	___ftmul@sign^(0+128),w
 16077  1EBF  3E7B               	addlw	123
 16078  1EC0  00B4               	movwf	??___ftmul^(0+128)
 16079  1EC1  0834               	movf	??___ftmul^(0+128),w
 16080  1EC2  07B8               	addwf	___ftmul@exp^(0+128),f
 16081  1EC3  082E               	movf	___ftmul@f1^(0+128),w
 16082  1EC4  00B4               	movwf	??___ftmul^(0+128)
 16083  1EC5  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16084  1EC6  00B5               	movwf	(??___ftmul^(0+128)+1)
 16085  1EC7  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16086  1EC8  00B6               	movwf	(??___ftmul^(0+128)+2)
 16087  1EC9  3010               	movlw	16
 16088  1ECA                     u7865:	
 16089  1ECA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16090  1ECB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16091  1ECC  0CB4               	rrf	??___ftmul^(0+128),f
 16092  1ECD  0B89               	decfsz	9,f
 16093  1ECE  2ECA               	goto	u7865
 16094  1ECF  0834               	movf	??___ftmul^(0+128),w
 16095  1ED0  00B7               	movwf	(??___ftmul+3)^(0+128)
 16096  1ED1  0837               	movf	(??___ftmul+3)^(0+128),w
 16097  1ED2  00BD               	movwf	___ftmul@sign^(0+128)
 16098  1ED3  0831               	movf	___ftmul@f2^(0+128),w
 16099  1ED4  00B4               	movwf	??___ftmul^(0+128)
 16100  1ED5  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16101  1ED6  00B5               	movwf	(??___ftmul^(0+128)+1)
 16102  1ED7  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16103  1ED8  00B6               	movwf	(??___ftmul^(0+128)+2)
 16104  1ED9  3010               	movlw	16
 16105  1EDA                     u7875:	
 16106  1EDA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16107  1EDB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16108  1EDC  0CB4               	rrf	??___ftmul^(0+128),f
 16109  1EDD  0B89               	decfsz	9,f
 16110  1EDE  2EDA               	goto	u7875
 16111  1EDF  0834               	movf	??___ftmul^(0+128),w
 16112  1EE0  00B7               	movwf	(??___ftmul+3)^(0+128)
 16113  1EE1  0837               	movf	(??___ftmul+3)^(0+128),w
 16114  1EE2  06BD               	xorwf	___ftmul@sign^(0+128),f
 16115  1EE3  3080               	movlw	128
 16116  1EE4  00B4               	movwf	??___ftmul^(0+128)
 16117  1EE5  0834               	movf	??___ftmul^(0+128),w
 16118  1EE6  05BD               	andwf	___ftmul@sign^(0+128),f
 16119  1EE7  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16120  1EE8  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16121  1EE9  30FF               	movlw	255
 16122  1EEA  05B1               	andwf	___ftmul@f2^(0+128),f
 16123  1EEB  30FF               	movlw	255
 16124  1EEC  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16125  1EED  3000               	movlw	0
 16126  1EEE  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16127  1EEF  3000               	movlw	0
 16128  1EF0  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16129  1EF1  3000               	movlw	0
 16130  1EF2  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16131  1EF3  3000               	movlw	0
 16132  1EF4  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16133  1EF5  3007               	movlw	7
 16134  1EF6  00B4               	movwf	??___ftmul^(0+128)
 16135  1EF7  0834               	movf	??___ftmul^(0+128),w
 16136  1EF8  00BC               	movwf	___ftmul@cntr^(0+128)
 16137  1EF9                     l7661:	
 16138  1EF9  1C2E               	btfss	___ftmul@f1^(0+128),0
 16139  1EFA  2F01               	goto	l7665
 16140  1EFB  0831               	movf	___ftmul@f2^(0+128),w
 16141  1EFC  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16142  1EFD  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16143  1EFE  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16144  1EFF  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16145  1F00  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16146  1F01                     l7665:	
 16147  1F01  3001               	movlw	1
 16148  1F02                     u7895:	
 16149  1F02  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16150  1F03  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16151  1F04  0CAE               	rrf	___ftmul@f1^(0+128),f
 16152  1F05  0B89               	decfsz	9,f
 16153  1F06  2F02               	goto	u7895
 16154  1F07  3001               	movlw	1
 16155  1F08                     u7905:	
 16156  1F08  35B1               	lslf	___ftmul@f2^(0+128),f
 16157  1F09  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16158  1F0A  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16159  1F0B  0B89               	decfsz	9,f
 16160  1F0C  2F08               	goto	u7905
 16161  1F0D  3001               	movlw	1
 16162  1F0E  02BC               	subwf	___ftmul@cntr^(0+128),f
 16163  1F0F  1D03               	btfss	3,2
 16164  1F10  2EF9               	goto	l7661
 16165  1F11  3009               	movlw	9
 16166  1F12  00B4               	movwf	??___ftmul^(0+128)
 16167  1F13  0834               	movf	??___ftmul^(0+128),w
 16168  1F14  00BC               	movwf	___ftmul@cntr^(0+128)
 16169  1F15                     l7673:	
 16170  1F15  1C2E               	btfss	___ftmul@f1^(0+128),0
 16171  1F16  2F1D               	goto	l7677
 16172  1F17  0831               	movf	___ftmul@f2^(0+128),w
 16173  1F18  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16174  1F19  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16175  1F1A  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16176  1F1B  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16177  1F1C  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16178  1F1D                     l7677:	
 16179  1F1D  3001               	movlw	1
 16180  1F1E                     u7935:	
 16181  1F1E  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16182  1F1F  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16183  1F20  0CAE               	rrf	___ftmul@f1^(0+128),f
 16184  1F21  0B89               	decfsz	9,f
 16185  1F22  2F1E               	goto	u7935
 16186  1F23  3001               	movlw	1
 16187  1F24                     u7945:	
 16188  1F24  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16189  1F25  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16190  1F26  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16191  1F27  0B89               	decfsz	9,f
 16192  1F28  2F24               	goto	u7945
 16193  1F29  3001               	movlw	1
 16194  1F2A  02BC               	subwf	___ftmul@cntr^(0+128),f
 16195  1F2B  1D03               	btfss	3,2
 16196  1F2C  2F15               	goto	l7673
 16197  1F2D  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16198  1F2E  00A0               	movwf	___ftpack@arg^(0+128)
 16199  1F2F  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16200  1F30  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16201  1F31  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16202  1F32  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16203  1F33  0838               	movf	___ftmul@exp^(0+128),w
 16204  1F34  00B4               	movwf	??___ftmul^(0+128)
 16205  1F35  0834               	movf	??___ftmul^(0+128),w
 16206  1F36  00A3               	movwf	___ftpack@exp^(0+128)
 16207  1F37  083D               	movf	___ftmul@sign^(0+128),w
 16208  1F38  00B5               	movwf	(??___ftmul+1)^(0+128)
 16209  1F39  0835               	movf	(??___ftmul+1)^(0+128),w
 16210  1F3A  00A4               	movwf	___ftpack@sign^(0+128)
 16211  1F3B  3188  2002         	fcall	___ftpack
 16212  1F3D  0021               	movlb	1	; select bank1
 16213  1F3E  0820               	movf	?___ftpack^(0+128),w
 16214  1F3F  00AE               	movwf	?___ftmul^(0+128)
 16215  1F40  0821               	movf	(?___ftpack+1)^(0+128),w
 16216  1F41  00AF               	movwf	(?___ftmul+1)^(0+128)
 16217  1F42  0822               	movf	(?___ftpack+2)^(0+128),w
 16218  1F43  00B0               	movwf	(?___ftmul+2)^(0+128)
 16219  1F44  0008               	return
 16220  1F45                     __end_of___ftmul:	
 16221                           
 16222                           	psect	text52
 16223  212D                     __ptext52:	
 16224 ;; *************** function ___ftsub *****************
 16225 ;; Defined at:
 16226 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16227 ;; Parameters:    Size  Location     Type
 16228 ;;  f2              3   31[BANK2 ] float 
 16229 ;;  f1              3   34[BANK2 ] float 
 16230 ;; Auto vars:     Size  Location     Type
 16231 ;;		None
 16232 ;; Return value:  Size  Location     Type
 16233 ;;                  3   31[BANK2 ] float 
 16234 ;; Registers used:
 16235 ;;		wreg, status,2, status,0, pclath, cstack
 16236 ;; Tracked objects:
 16237 ;;		On entry : 0/0
 16238 ;;		On exit  : 0/0
 16239 ;;		Unchanged: 0/0
 16240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16241 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16244 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16245 ;;Total ram usage:        6 bytes
 16246 ;; Hardware stack levels used:    1
 16247 ;; Hardware stack levels required when called:    5
 16248 ;; This function calls:
 16249 ;;		___ftadd
 16250 ;; This function is called by:
 16251 ;;		_sin
 16252 ;;		_exp
 16253 ;; This function uses a non-reentrant model
 16254 ;;
 16255                           
 16256                           
 16257                           ;psect for function ___ftsub
 16258  212D                     ___ftsub:	
 16259                           
 16260                           ;incstack = 0
 16261                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16262  212D  0022               	movlb	2	; select bank2
 16263  212E  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16264  212F  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16265  2130  043F               	iorwf	___ftsub@f2^(0+256),w
 16266  2131  1903               	skipnz
 16267  2132  2935               	goto	l7865
 16268  2133  3080               	movlw	128
 16269  2134  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16270  2135                     l7865:	
 16271  2135  0842               	movf	___ftsub@f1^(0+256),w
 16272  2136  0021               	movlb	1	; select bank1
 16273  2137  00C1               	movwf	___ftadd@f1^(0+128)
 16274  2138  0022               	movlb	2	; select bank2
 16275  2139  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16276  213A  0021               	movlb	1	; select bank1
 16277  213B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16278  213C  0022               	movlb	2	; select bank2
 16279  213D  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16280  213E  0021               	movlb	1	; select bank1
 16281  213F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16282  2140  0022               	movlb	2	; select bank2
 16283  2141  083F               	movf	___ftsub@f2^(0+256),w
 16284  2142  0021               	movlb	1	; select bank1
 16285  2143  00C4               	movwf	___ftadd@f2^(0+128)
 16286  2144  0022               	movlb	2	; select bank2
 16287  2145  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16288  2146  0021               	movlb	1	; select bank1
 16289  2147  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16290  2148  0022               	movlb	2	; select bank2
 16291  2149  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16292  214A  0021               	movlb	1	; select bank1
 16293  214B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16294  214C  3191  2135         	fcall	___ftadd
 16295  214E  0021               	movlb	1	; select bank1
 16296  214F  0841               	movf	?___ftadd^(0+128),w
 16297  2150  0022               	movlb	2	; select bank2
 16298  2151  00BF               	movwf	?___ftsub^(0+256)
 16299  2152  0021               	movlb	1	; select bank1
 16300  2153  0842               	movf	(?___ftadd+1)^(0+128),w
 16301  2154  0022               	movlb	2	; select bank2
 16302  2155  00C0               	movwf	(?___ftsub+1)^(0+256)
 16303  2156  0021               	movlb	1	; select bank1
 16304  2157  0843               	movf	(?___ftadd+2)^(0+128),w
 16305  2158  0022               	movlb	2	; select bank2
 16306  2159  00C1               	movwf	(?___ftsub+2)^(0+256)
 16307  215A  0008               	return
 16308  215B                     __end_of___ftsub:	
 16309                           
 16310                           	psect	text53
 16311  1135                     __ptext53:	
 16312 ;; *************** function ___ftadd *****************
 16313 ;; Defined at:
 16314 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16315 ;; Parameters:    Size  Location     Type
 16316 ;;  f1              3   33[BANK1 ] float 
 16317 ;;  f2              3   36[BANK1 ] float 
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;  exp1            1   45[BANK1 ] unsigned char 
 16320 ;;  exp2            1   44[BANK1 ] unsigned char 
 16321 ;;  sign            1   43[BANK1 ] unsigned char 
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  3   33[BANK1 ] float 
 16324 ;; Registers used:
 16325 ;;		wreg, status,2, status,0, pclath, cstack
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16331 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16332 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16333 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16334 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16335 ;;Total ram usage:       13 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    4
 16338 ;; This function calls:
 16339 ;;		___ftpack
 16340 ;; This function is called by:
 16341 ;;		_map
 16342 ;;		_scaleiA10kPot
 16343 ;;		_modSin
 16344 ;;		_modTri
 16345 ;;		_modSaw
 16346 ;;		___ftsub
 16347 ;;		_sin
 16348 ;;		_eval_poly
 16349 ;;		_floor
 16350 ;;		_log
 16351 ;;		_scalePotValue
 16352 ;; This function uses a non-reentrant model
 16353 ;;
 16354                           
 16355                           
 16356                           ;psect for function ___ftadd
 16357  1135                     ___ftadd:	
 16358                           
 16359                           ;incstack = 0
 16360                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16361  1135  0021               	movlb	1	; select bank1
 16362  1136  0841               	movf	___ftadd@f1^(0+128),w
 16363  1137  00C7               	movwf	??___ftadd^(0+128)
 16364  1138  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16365  1139  00C8               	movwf	(??___ftadd^(0+128)+1)
 16366  113A  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16367  113B  00C9               	movwf	(??___ftadd^(0+128)+2)
 16368  113C  1003               	clrc
 16369  113D  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16370  113E  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16371  113F  00CA               	movwf	(??___ftadd+3)^(0+128)
 16372  1140  084A               	movf	(??___ftadd+3)^(0+128),w
 16373  1141  00CD               	movwf	___ftadd@exp1^(0+128)
 16374  1142  0844               	movf	___ftadd@f2^(0+128),w
 16375  1143  00C7               	movwf	??___ftadd^(0+128)
 16376  1144  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16377  1145  00C8               	movwf	(??___ftadd^(0+128)+1)
 16378  1146  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16379  1147  00C9               	movwf	(??___ftadd^(0+128)+2)
 16380  1148  1003               	clrc
 16381  1149  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16382  114A  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16383  114B  00CA               	movwf	(??___ftadd+3)^(0+128)
 16384  114C  084A               	movf	(??___ftadd+3)^(0+128),w
 16385  114D  00CC               	movwf	___ftadd@exp2^(0+128)
 16386  114E  084D               	movf	___ftadd@exp1^(0+128),w
 16387  114F  1903               	btfsc	3,2
 16388  1150  295D               	goto	l7553
 16389  1151  084C               	movf	___ftadd@exp2^(0+128),w
 16390  1152  024D               	subwf	___ftadd@exp1^(0+128),w
 16391  1153  1803               	skipnc
 16392  1154  2964               	goto	l7557
 16393  1155  034D               	decf	___ftadd@exp1^(0+128),w
 16394  1156  3AFF               	xorlw	255
 16395  1157  074C               	addwf	___ftadd@exp2^(0+128),w
 16396  1158  00C7               	movwf	??___ftadd^(0+128)
 16397  1159  3019               	movlw	25
 16398  115A  0247               	subwf	??___ftadd^(0+128),w
 16399  115B  1C03               	skipc
 16400  115C  2964               	goto	l7557
 16401  115D                     l7553:	
 16402  115D  0844               	movf	___ftadd@f2^(0+128),w
 16403  115E  00C1               	movwf	?___ftadd^(0+128)
 16404  115F  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16405  1160  00C2               	movwf	(?___ftadd+1)^(0+128)
 16406  1161  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16407  1162  00C3               	movwf	(?___ftadd+2)^(0+128)
 16408  1163  0008               	return
 16409  1164                     l7557:	
 16410  1164  084C               	movf	___ftadd@exp2^(0+128),w
 16411  1165  1903               	btfsc	3,2
 16412  1166  0008               	return
 16413  1167  084D               	movf	___ftadd@exp1^(0+128),w
 16414  1168  024C               	subwf	___ftadd@exp2^(0+128),w
 16415  1169  1803               	skipnc
 16416  116A  2973               	goto	l7563
 16417  116B  034C               	decf	___ftadd@exp2^(0+128),w
 16418  116C  3AFF               	xorlw	255
 16419  116D  074D               	addwf	___ftadd@exp1^(0+128),w
 16420  116E  00C7               	movwf	??___ftadd^(0+128)
 16421  116F  3019               	movlw	25
 16422  1170  0247               	subwf	??___ftadd^(0+128),w
 16423  1171  1803               	btfsc	3,0
 16424  1172  0008               	return
 16425  1173                     l7563:	
 16426  1173  3006               	movlw	6
 16427  1174  00C7               	movwf	??___ftadd^(0+128)
 16428  1175  0847               	movf	??___ftadd^(0+128),w
 16429  1176  00CB               	movwf	___ftadd@sign^(0+128)
 16430  1177  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16431  1178  17CB               	bsf	___ftadd@sign^(0+128),7
 16432  1179  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16433  117A  174B               	bsf	___ftadd@sign^(0+128),6
 16434  117B  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16435  117C  30FF               	movlw	255
 16436  117D  05C1               	andwf	___ftadd@f1^(0+128),f
 16437  117E  30FF               	movlw	255
 16438  117F  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16439  1180  3000               	movlw	0
 16440  1181  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 16441  1182  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 16442  1183  30FF               	movlw	255
 16443  1184  05C4               	andwf	___ftadd@f2^(0+128),f
 16444  1185  30FF               	movlw	255
 16445  1186  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 16446  1187  3000               	movlw	0
 16447  1188  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 16448  1189  084C               	movf	___ftadd@exp2^(0+128),w
 16449  118A  024D               	subwf	___ftadd@exp1^(0+128),w
 16450  118B  1803               	skipnc
 16451  118C  29AF               	goto	l7585
 16452  118D                     l7575:	
 16453  118D  3001               	movlw	1
 16454  118E                     u7675:	
 16455  118E  35C4               	lslf	___ftadd@f2^(0+128),f
 16456  118F  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 16457  1190  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 16458  1191  0B89               	decfsz	9,f
 16459  1192  298E               	goto	u7675
 16460  1193  3001               	movlw	1
 16461  1194  02CC               	subwf	___ftadd@exp2^(0+128),f
 16462  1195  084C               	movf	___ftadd@exp2^(0+128),w
 16463  1196  064D               	xorwf	___ftadd@exp1^(0+128),w
 16464  1197  1903               	skipnz
 16465  1198  29AA               	goto	l7583
 16466  1199  3001               	movlw	1
 16467  119A  02CB               	subwf	___ftadd@sign^(0+128),f
 16468  119B  084B               	movf	___ftadd@sign^(0+128),w
 16469  119C  3907               	andlw	7
 16470  119D  1903               	btfsc	3,2
 16471  119E  29AA               	goto	l7583
 16472  119F  298D               	goto	l7575
 16473  11A0                     l7581:	
 16474  11A0  3001               	movlw	1
 16475  11A1                     u7705:	
 16476  11A1  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 16477  11A2  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 16478  11A3  0CC1               	rrf	___ftadd@f1^(0+128),f
 16479  11A4  0B89               	decfsz	9,f
 16480  11A5  29A1               	goto	u7705
 16481  11A6  3001               	movlw	1
 16482  11A7  00C7               	movwf	??___ftadd^(0+128)
 16483  11A8  0847               	movf	??___ftadd^(0+128),w
 16484  11A9  07CD               	addwf	___ftadd@exp1^(0+128),f
 16485  11AA                     l7583:	
 16486  11AA  084D               	movf	___ftadd@exp1^(0+128),w
 16487  11AB  064C               	xorwf	___ftadd@exp2^(0+128),w
 16488  11AC  1903               	btfsc	3,2
 16489  11AD  29D4               	goto	l2136
 16490  11AE  29A0               	goto	l7581
 16491  11AF                     l7585:	
 16492  11AF  084D               	movf	___ftadd@exp1^(0+128),w
 16493  11B0  024C               	subwf	___ftadd@exp2^(0+128),w
 16494  11B1  1803               	skipnc
 16495  11B2  29D4               	goto	l2136
 16496  11B3                     l7587:	
 16497  11B3  3001               	movlw	1
 16498  11B4                     u7735:	
 16499  11B4  35C1               	lslf	___ftadd@f1^(0+128),f
 16500  11B5  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 16501  11B6  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 16502  11B7  0B89               	decfsz	9,f
 16503  11B8  29B4               	goto	u7735
 16504  11B9  3001               	movlw	1
 16505  11BA  02CD               	subwf	___ftadd@exp1^(0+128),f
 16506  11BB  084C               	movf	___ftadd@exp2^(0+128),w
 16507  11BC  064D               	xorwf	___ftadd@exp1^(0+128),w
 16508  11BD  1903               	skipnz
 16509  11BE  29D0               	goto	l7595
 16510  11BF  3001               	movlw	1
 16511  11C0  02CB               	subwf	___ftadd@sign^(0+128),f
 16512  11C1  084B               	movf	___ftadd@sign^(0+128),w
 16513  11C2  3907               	andlw	7
 16514  11C3  1903               	btfsc	3,2
 16515  11C4  29D0               	goto	l7595
 16516  11C5  29B3               	goto	l7587
 16517  11C6                     l7593:	
 16518  11C6  3001               	movlw	1
 16519  11C7                     u7765:	
 16520  11C7  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 16521  11C8  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 16522  11C9  0CC4               	rrf	___ftadd@f2^(0+128),f
 16523  11CA  0B89               	decfsz	9,f
 16524  11CB  29C7               	goto	u7765
 16525  11CC  3001               	movlw	1
 16526  11CD  00C7               	movwf	??___ftadd^(0+128)
 16527  11CE  0847               	movf	??___ftadd^(0+128),w
 16528  11CF  07CC               	addwf	___ftadd@exp2^(0+128),f
 16529  11D0                     l7595:	
 16530  11D0  084D               	movf	___ftadd@exp1^(0+128),w
 16531  11D1  064C               	xorwf	___ftadd@exp2^(0+128),w
 16532  11D2  1D03               	skipz
 16533  11D3  29C6               	goto	l7593
 16534  11D4                     l2136:	
 16535  11D4  1FCB               	btfss	___ftadd@sign^(0+128),7
 16536  11D5  29E6               	goto	l7599
 16537  11D6  30FF               	movlw	255
 16538  11D7  06C1               	xorwf	___ftadd@f1^(0+128),f
 16539  11D8  30FF               	movlw	255
 16540  11D9  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 16541  11DA  30FF               	movlw	255
 16542  11DB  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 16543  11DC  3001               	movlw	1
 16544  11DD  07C1               	addwf	___ftadd@f1^(0+128),f
 16545  11DE  3000               	movlw	0
 16546  11DF  1803               	skipnc
 16547  11E0  3001               	movlw	1
 16548  11E1  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 16549  11E2  3000               	movlw	0
 16550  11E3  1803               	skipnc
 16551  11E4  3001               	movlw	1
 16552  11E5  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 16553  11E6                     l7599:	
 16554  11E6  1F4B               	btfss	___ftadd@sign^(0+128),6
 16555  11E7  29F8               	goto	l7603
 16556  11E8  30FF               	movlw	255
 16557  11E9  06C4               	xorwf	___ftadd@f2^(0+128),f
 16558  11EA  30FF               	movlw	255
 16559  11EB  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16560  11EC  30FF               	movlw	255
 16561  11ED  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16562  11EE  3001               	movlw	1
 16563  11EF  07C4               	addwf	___ftadd@f2^(0+128),f
 16564  11F0  3000               	movlw	0
 16565  11F1  1803               	skipnc
 16566  11F2  3001               	movlw	1
 16567  11F3  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16568  11F4  3000               	movlw	0
 16569  11F5  1803               	skipnc
 16570  11F6  3001               	movlw	1
 16571  11F7  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16572  11F8                     l7603:	
 16573  11F8  01CB               	clrf	___ftadd@sign^(0+128)
 16574  11F9  0841               	movf	___ftadd@f1^(0+128),w
 16575  11FA  07C4               	addwf	___ftadd@f2^(0+128),f
 16576  11FB  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16577  11FC  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 16578  11FD  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16579  11FE  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 16580  11FF  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 16581  1200  2A13               	goto	l7613
 16582  1201  30FF               	movlw	255
 16583  1202  06C4               	xorwf	___ftadd@f2^(0+128),f
 16584  1203  30FF               	movlw	255
 16585  1204  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16586  1205  30FF               	movlw	255
 16587  1206  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16588  1207  3001               	movlw	1
 16589  1208  07C4               	addwf	___ftadd@f2^(0+128),f
 16590  1209  3000               	movlw	0
 16591  120A  1803               	skipnc
 16592  120B  3001               	movlw	1
 16593  120C  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16594  120D  3000               	movlw	0
 16595  120E  1803               	skipnc
 16596  120F  3001               	movlw	1
 16597  1210  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16598  1211  01CB               	clrf	___ftadd@sign^(0+128)
 16599  1212  0ACB               	incf	___ftadd@sign^(0+128),f
 16600  1213                     l7613:	
 16601  1213  0844               	movf	___ftadd@f2^(0+128),w
 16602  1214  00A0               	movwf	___ftpack@arg^(0+128)
 16603  1215  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16604  1216  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16605  1217  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16606  1218  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16607  1219  084D               	movf	___ftadd@exp1^(0+128),w
 16608  121A  00C7               	movwf	??___ftadd^(0+128)
 16609  121B  0847               	movf	??___ftadd^(0+128),w
 16610  121C  00A3               	movwf	___ftpack@exp^(0+128)
 16611  121D  084B               	movf	___ftadd@sign^(0+128),w
 16612  121E  00C8               	movwf	(??___ftadd+1)^(0+128)
 16613  121F  0848               	movf	(??___ftadd+1)^(0+128),w
 16614  1220  00A4               	movwf	___ftpack@sign^(0+128)
 16615  1221  3188  2002         	fcall	___ftpack
 16616  1223  0021               	movlb	1	; select bank1
 16617  1224  0820               	movf	?___ftpack^(0+128),w
 16618  1225  00C1               	movwf	?___ftadd^(0+128)
 16619  1226  0821               	movf	(?___ftpack+1)^(0+128),w
 16620  1227  00C2               	movwf	(?___ftadd+1)^(0+128)
 16621  1228  0822               	movf	(?___ftpack+2)^(0+128),w
 16622  1229  00C3               	movwf	(?___ftadd+2)^(0+128)
 16623  122A  0008               	return
 16624  122B                     __end_of___ftadd:	
 16625                           
 16626                           	psect	text54
 16627  2F32                     __ptext54:	
 16628 ;; *************** function ___ftneg *****************
 16629 ;; Defined at:
 16630 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 16631 ;; Parameters:    Size  Location     Type
 16632 ;;  f1              3   30[BANK1 ] float 
 16633 ;; Auto vars:     Size  Location     Type
 16634 ;;		None
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  3   30[BANK1 ] float 
 16637 ;; Registers used:
 16638 ;;		wreg
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16644 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16647 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16648 ;;Total ram usage:        3 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    3
 16651 ;; This function calls:
 16652 ;;		Nothing
 16653 ;; This function is called by:
 16654 ;;		_map
 16655 ;;		_scaleiA10kPot
 16656 ;;		_modSin
 16657 ;;		_modTri
 16658 ;;		_modSaw
 16659 ;;		_pow
 16660 ;;		_sin
 16661 ;;		_exp
 16662 ;;		_ldexp
 16663 ;;		_scalePotValue
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           
 16668                           ;psect for function ___ftneg
 16669  2F32                     ___ftneg:	
 16670                           
 16671                           ;incstack = 0
 16672                           ; Regs used in ___ftneg: [wreg]
 16673  2F32  0021               	movlb	1	; select bank1
 16674  2F33  0840               	movf	(___ftneg@f1+2)^(0+128),w
 16675  2F34  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 16676  2F35  043E               	iorwf	___ftneg@f1^(0+128),w
 16677  2F36  1903               	skipnz
 16678  2F37  0008               	return
 16679  2F38  3080               	movlw	128
 16680  2F39  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 16681  2F3A  0008               	return
 16682  2F3B                     __end_of___ftneg:	
 16683                           
 16684                           	psect	text55
 16685  1D3D                     __ptext55:	
 16686 ;; *************** function ___ftdiv *****************
 16687 ;; Defined at:
 16688 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 16689 ;; Parameters:    Size  Location     Type
 16690 ;;  f2              3   46[BANK1 ] float 
 16691 ;;  f1              3   49[BANK1 ] float 
 16692 ;; Auto vars:     Size  Location     Type
 16693 ;;  f3              3   57[BANK1 ] float 
 16694 ;;  sign            1   61[BANK1 ] unsigned char 
 16695 ;;  exp             1   60[BANK1 ] unsigned char 
 16696 ;;  cntr            1   56[BANK1 ] unsigned char 
 16697 ;; Return value:  Size  Location     Type
 16698 ;;                  3   46[BANK1 ] float 
 16699 ;; Registers used:
 16700 ;;		wreg, status,2, status,0, pclath, cstack
 16701 ;; Tracked objects:
 16702 ;;		On entry : 0/0
 16703 ;;		On exit  : 0/0
 16704 ;;		Unchanged: 0/0
 16705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16706 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16707 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16708 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16709 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16710 ;;Total ram usage:       16 bytes
 16711 ;; Hardware stack levels used:    1
 16712 ;; Hardware stack levels required when called:    4
 16713 ;; This function calls:
 16714 ;;		___ftpack
 16715 ;; This function is called by:
 16716 ;;		_map
 16717 ;;		_scaleA100kPot
 16718 ;;		_scaleA10kPot
 16719 ;;		_scaleiA10kPot
 16720 ;;		_calcSinArray
 16721 ;;		_modSin
 16722 ;;		_modTri
 16723 ;;		_modSaw
 16724 ;;		_sin
 16725 ;;		_exp
 16726 ;;		_scalePotValue
 16727 ;;		_scaleiA100kPot
 16728 ;; This function uses a non-reentrant model
 16729 ;;
 16730                           
 16731                           
 16732                           ;psect for function ___ftdiv
 16733  1D3D                     ___ftdiv:	
 16734                           
 16735                           ;incstack = 0
 16736                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16737  1D3D  0021               	movlb	1	; select bank1
 16738  1D3E  0851               	movf	___ftdiv@f1^(0+128),w
 16739  1D3F  00D4               	movwf	??___ftdiv^(0+128)
 16740  1D40  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16741  1D41  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16742  1D42  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16743  1D43  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16744  1D44  1003               	clrc
 16745  1D45  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16746  1D46  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16747  1D47  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16748  1D48  0857               	movf	(??___ftdiv+3)^(0+128),w
 16749  1D49  00DC               	movwf	___ftdiv@exp^(0+128)
 16750  1D4A  085C               	movf	___ftdiv@exp^(0+128),w
 16751  1D4B  1D03               	btfss	3,2
 16752  1D4C  2D54               	goto	l7825
 16753  1D4D  3000               	movlw	0
 16754  1D4E  00CE               	movwf	?___ftdiv^(0+128)
 16755  1D4F  3000               	movlw	0
 16756  1D50  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16757  1D51  3000               	movlw	0
 16758  1D52  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16759  1D53  0008               	return
 16760  1D54                     l7825:	
 16761  1D54  084E               	movf	___ftdiv@f2^(0+128),w
 16762  1D55  00D4               	movwf	??___ftdiv^(0+128)
 16763  1D56  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16764  1D57  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16765  1D58  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16766  1D59  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16767  1D5A  1003               	clrc
 16768  1D5B  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16769  1D5C  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16770  1D5D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16771  1D5E  0857               	movf	(??___ftdiv+3)^(0+128),w
 16772  1D5F  00DD               	movwf	___ftdiv@sign^(0+128)
 16773  1D60  085D               	movf	___ftdiv@sign^(0+128),w
 16774  1D61  1D03               	btfss	3,2
 16775  1D62  2D6A               	goto	l7831
 16776  1D63  3000               	movlw	0
 16777  1D64  00CE               	movwf	?___ftdiv^(0+128)
 16778  1D65  3000               	movlw	0
 16779  1D66  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16780  1D67  3000               	movlw	0
 16781  1D68  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16782  1D69  0008               	return
 16783  1D6A                     l7831:	
 16784  1D6A  3000               	movlw	0
 16785  1D6B  00D9               	movwf	___ftdiv@f3^(0+128)
 16786  1D6C  3000               	movlw	0
 16787  1D6D  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 16788  1D6E  3000               	movlw	0
 16789  1D6F  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 16790  1D70  3089               	movlw	137
 16791  1D71  075D               	addwf	___ftdiv@sign^(0+128),w
 16792  1D72  00D4               	movwf	??___ftdiv^(0+128)
 16793  1D73  0854               	movf	??___ftdiv^(0+128),w
 16794  1D74  02DC               	subwf	___ftdiv@exp^(0+128),f
 16795  1D75  0851               	movf	___ftdiv@f1^(0+128),w
 16796  1D76  00D4               	movwf	??___ftdiv^(0+128)
 16797  1D77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16798  1D78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16799  1D79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16800  1D7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16801  1D7B  3010               	movlw	16
 16802  1D7C                     u8165:	
 16803  1D7C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16804  1D7D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16805  1D7E  0CD4               	rrf	??___ftdiv^(0+128),f
 16806  1D7F  0B89               	decfsz	9,f
 16807  1D80  2D7C               	goto	u8165
 16808  1D81  0854               	movf	??___ftdiv^(0+128),w
 16809  1D82  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16810  1D83  0857               	movf	(??___ftdiv+3)^(0+128),w
 16811  1D84  00DD               	movwf	___ftdiv@sign^(0+128)
 16812  1D85  084E               	movf	___ftdiv@f2^(0+128),w
 16813  1D86  00D4               	movwf	??___ftdiv^(0+128)
 16814  1D87  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16815  1D88  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16816  1D89  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16817  1D8A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16818  1D8B  3010               	movlw	16
 16819  1D8C                     u8175:	
 16820  1D8C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16821  1D8D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16822  1D8E  0CD4               	rrf	??___ftdiv^(0+128),f
 16823  1D8F  0B89               	decfsz	9,f
 16824  1D90  2D8C               	goto	u8175
 16825  1D91  0854               	movf	??___ftdiv^(0+128),w
 16826  1D92  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16827  1D93  0857               	movf	(??___ftdiv+3)^(0+128),w
 16828  1D94  06DD               	xorwf	___ftdiv@sign^(0+128),f
 16829  1D95  3080               	movlw	128
 16830  1D96  00D4               	movwf	??___ftdiv^(0+128)
 16831  1D97  0854               	movf	??___ftdiv^(0+128),w
 16832  1D98  05DD               	andwf	___ftdiv@sign^(0+128),f
 16833  1D99  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 16834  1D9A  30FF               	movlw	255
 16835  1D9B  05D1               	andwf	___ftdiv@f1^(0+128),f
 16836  1D9C  30FF               	movlw	255
 16837  1D9D  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 16838  1D9E  3000               	movlw	0
 16839  1D9F  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 16840  1DA0  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 16841  1DA1  30FF               	movlw	255
 16842  1DA2  05CE               	andwf	___ftdiv@f2^(0+128),f
 16843  1DA3  30FF               	movlw	255
 16844  1DA4  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 16845  1DA5  3000               	movlw	0
 16846  1DA6  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 16847  1DA7  3018               	movlw	24
 16848  1DA8  00D4               	movwf	??___ftdiv^(0+128)
 16849  1DA9  0854               	movf	??___ftdiv^(0+128),w
 16850  1DAA  00D8               	movwf	___ftdiv@cntr^(0+128)
 16851  1DAB                     l7845:	
 16852  1DAB  3001               	movlw	1
 16853  1DAC                     u8185:	
 16854  1DAC  35D9               	lslf	___ftdiv@f3^(0+128),f
 16855  1DAD  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 16856  1DAE  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 16857  1DAF  0B89               	decfsz	9,f
 16858  1DB0  2DAC               	goto	u8185
 16859  1DB1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16860  1DB2  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 16861  1DB3  1D03               	skipz
 16862  1DB4  2DBB               	goto	u8195
 16863  1DB5  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16864  1DB6  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 16865  1DB7  1D03               	skipz
 16866  1DB8  2DBB               	goto	u8195
 16867  1DB9  084E               	movf	___ftdiv@f2^(0+128),w
 16868  1DBA  0251               	subwf	___ftdiv@f1^(0+128),w
 16869  1DBB                     u8195:	
 16870  1DBB  1C03               	skipc
 16871  1DBC  2DC4               	goto	l7853
 16872  1DBD  084E               	movf	___ftdiv@f2^(0+128),w
 16873  1DBE  02D1               	subwf	___ftdiv@f1^(0+128),f
 16874  1DBF  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16875  1DC0  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 16876  1DC1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16877  1DC2  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 16878  1DC3  1459               	bsf	___ftdiv@f3^(0+128),0
 16879  1DC4                     l7853:	
 16880  1DC4  3001               	movlw	1
 16881  1DC5                     u8205:	
 16882  1DC5  35D1               	lslf	___ftdiv@f1^(0+128),f
 16883  1DC6  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 16884  1DC7  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 16885  1DC8  0B89               	decfsz	9,f
 16886  1DC9  2DC5               	goto	u8205
 16887  1DCA  3001               	movlw	1
 16888  1DCB  02D8               	subwf	___ftdiv@cntr^(0+128),f
 16889  1DCC  1D03               	btfss	3,2
 16890  1DCD  2DAB               	goto	l7845
 16891  1DCE  0859               	movf	___ftdiv@f3^(0+128),w
 16892  1DCF  00A0               	movwf	___ftpack@arg^(0+128)
 16893  1DD0  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 16894  1DD1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16895  1DD2  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 16896  1DD3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16897  1DD4  085C               	movf	___ftdiv@exp^(0+128),w
 16898  1DD5  00D4               	movwf	??___ftdiv^(0+128)
 16899  1DD6  0854               	movf	??___ftdiv^(0+128),w
 16900  1DD7  00A3               	movwf	___ftpack@exp^(0+128)
 16901  1DD8  085D               	movf	___ftdiv@sign^(0+128),w
 16902  1DD9  00D5               	movwf	(??___ftdiv+1)^(0+128)
 16903  1DDA  0855               	movf	(??___ftdiv+1)^(0+128),w
 16904  1DDB  00A4               	movwf	___ftpack@sign^(0+128)
 16905  1DDC  3188  2002         	fcall	___ftpack
 16906  1DDE  0021               	movlb	1	; select bank1
 16907  1DDF  0820               	movf	?___ftpack^(0+128),w
 16908  1DE0  00CE               	movwf	?___ftdiv^(0+128)
 16909  1DE1  0821               	movf	(?___ftpack+1)^(0+128),w
 16910  1DE2  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16911  1DE3  0822               	movf	(?___ftpack+2)^(0+128),w
 16912  1DE4  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16913  1DE5  0008               	return
 16914  1DE6                     __end_of___ftdiv:	
 16915                           
 16916                           	psect	text56
 16917  2097                     __ptext56:	
 16918 ;; *************** function ___awtoft *****************
 16919 ;; Defined at:
 16920 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 16921 ;; Parameters:    Size  Location     Type
 16922 ;;  c               2    8[BANK1 ] int 
 16923 ;; Auto vars:     Size  Location     Type
 16924 ;;  sign            1   13[BANK1 ] unsigned char 
 16925 ;; Return value:  Size  Location     Type
 16926 ;;                  3    8[BANK1 ] float 
 16927 ;; Registers used:
 16928 ;;		wreg, status,2, status,0, pclath, cstack
 16929 ;; Tracked objects:
 16930 ;;		On entry : 0/0
 16931 ;;		On exit  : 0/0
 16932 ;;		Unchanged: 0/0
 16933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16934 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16935 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16936 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16937 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16938 ;;Total ram usage:        6 bytes
 16939 ;; Hardware stack levels used:    1
 16940 ;; Hardware stack levels required when called:    4
 16941 ;; This function calls:
 16942 ;;		___ftpack
 16943 ;; This function is called by:
 16944 ;;		_main
 16945 ;;		_set_subdivision
 16946 ;;		_calcSinArray
 16947 ;;		_updateModulationArray
 16948 ;;		_exp
 16949 ;;		_log
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function ___awtoft
 16955  2097                     ___awtoft:	
 16956                           
 16957                           ;incstack = 0
 16958                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16959  2097  0021               	movlb	1	; select bank1
 16960  2098  01AD               	clrf	___awtoft@sign^(0+128)
 16961  2099  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 16962  209A  28A2               	goto	l7815
 16963  209B  09A8               	comf	___awtoft@c^(0+128),f
 16964  209C  09A9               	comf	(___awtoft@c+1)^(0+128),f
 16965  209D  0AA8               	incf	___awtoft@c^(0+128),f
 16966  209E  1903               	skipnz
 16967  209F  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 16968  20A0  01AD               	clrf	___awtoft@sign^(0+128)
 16969  20A1  0AAD               	incf	___awtoft@sign^(0+128),f
 16970  20A2                     l7815:	
 16971  20A2  0828               	movf	___awtoft@c^(0+128),w
 16972  20A3  00A0               	movwf	___ftpack@arg^(0+128)
 16973  20A4  0829               	movf	(___awtoft@c+1)^(0+128),w
 16974  20A5  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16975  20A6  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 16976  20A7  308E               	movlw	142
 16977  20A8  00AB               	movwf	??___awtoft^(0+128)
 16978  20A9  082B               	movf	??___awtoft^(0+128),w
 16979  20AA  00A3               	movwf	___ftpack@exp^(0+128)
 16980  20AB  082D               	movf	___awtoft@sign^(0+128),w
 16981  20AC  00AC               	movwf	(??___awtoft+1)^(0+128)
 16982  20AD  082C               	movf	(??___awtoft+1)^(0+128),w
 16983  20AE  00A4               	movwf	___ftpack@sign^(0+128)
 16984  20AF  3188  2002         	fcall	___ftpack
 16985  20B1  0021               	movlb	1	; select bank1
 16986  20B2  0820               	movf	?___ftpack^(0+128),w
 16987  20B3  00A8               	movwf	?___awtoft^(0+128)
 16988  20B4  0821               	movf	(?___ftpack+1)^(0+128),w
 16989  20B5  00A9               	movwf	(?___awtoft+1)^(0+128)
 16990  20B6  0822               	movf	(?___ftpack+2)^(0+128),w
 16991  20B7  00AA               	movwf	(?___awtoft+2)^(0+128)
 16992  20B8  0008               	return
 16993  20B9                     __end_of___awtoft:	
 16994                           
 16995                           	psect	text57
 16996  0802                     __ptext57:	
 16997 ;; *************** function ___ftpack *****************
 16998 ;; Defined at:
 16999 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17000 ;; Parameters:    Size  Location     Type
 17001 ;;  arg             3    0[BANK1 ] unsigned um
 17002 ;;  exp             1    3[BANK1 ] unsigned char 
 17003 ;;  sign            1    4[BANK1 ] unsigned char 
 17004 ;; Auto vars:     Size  Location     Type
 17005 ;;		None
 17006 ;; Return value:  Size  Location     Type
 17007 ;;                  3    0[BANK1 ] float 
 17008 ;; Registers used:
 17009 ;;		wreg, status,2, status,0
 17010 ;; Tracked objects:
 17011 ;;		On entry : 0/0
 17012 ;;		On exit  : 0/0
 17013 ;;		Unchanged: 0/0
 17014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17015 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17017 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17018 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17019 ;;Total ram usage:        8 bytes
 17020 ;; Hardware stack levels used:    1
 17021 ;; Hardware stack levels required when called:    3
 17022 ;; This function calls:
 17023 ;;		Nothing
 17024 ;; This function is called by:
 17025 ;;		___altoft
 17026 ;;		___awtoft
 17027 ;;		___ftadd
 17028 ;;		___ftdiv
 17029 ;;		___ftmul
 17030 ;;		___lltoft
 17031 ;; This function uses a non-reentrant model
 17032 ;;
 17033                           
 17034                           
 17035                           ;psect for function ___ftpack
 17036  0802                     ___ftpack:	
 17037                           
 17038                           ;incstack = 0
 17039                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17040  0802  0021               	movlb	1	; select bank1
 17041  0803  0823               	movf	___ftpack@exp^(0+128),w
 17042  0804  1903               	btfsc	3,2
 17043  0805  280B               	goto	l7453
 17044  0806  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17045  0807  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17046  0808  0420               	iorwf	___ftpack@arg^(0+128),w
 17047  0809  1D03               	skipz
 17048  080A  281C               	goto	l7459
 17049  080B                     l7453:	
 17050  080B  3000               	movlw	0
 17051  080C  00A0               	movwf	?___ftpack^(0+128)
 17052  080D  3000               	movlw	0
 17053  080E  00A1               	movwf	(?___ftpack+1)^(0+128)
 17054  080F  3000               	movlw	0
 17055  0810  00A2               	movwf	(?___ftpack+2)^(0+128)
 17056  0811  0008               	return
 17057  0812                     l7457:	
 17058  0812  3001               	movlw	1
 17059  0813  00A5               	movwf	??___ftpack^(0+128)
 17060  0814  0825               	movf	??___ftpack^(0+128),w
 17061  0815  07A3               	addwf	___ftpack@exp^(0+128),f
 17062  0816  3001               	movlw	1
 17063  0817                     u7405:	
 17064  0817  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17065  0818  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17066  0819  0CA0               	rrf	___ftpack@arg^(0+128),f
 17067  081A  0B89               	decfsz	9,f
 17068  081B  2817               	goto	u7405
 17069  081C                     l7459:	
 17070  081C  30FE               	movlw	254
 17071  081D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17072  081E  1903               	btfsc	3,2
 17073  081F  2835               	goto	l2105
 17074  0820  2812               	goto	l7457
 17075  0821                     l7461:	
 17076  0821  3001               	movlw	1
 17077  0822  00A5               	movwf	??___ftpack^(0+128)
 17078  0823  0825               	movf	??___ftpack^(0+128),w
 17079  0824  07A3               	addwf	___ftpack@exp^(0+128),f
 17080  0825  3001               	movlw	1
 17081  0826  07A0               	addwf	___ftpack@arg^(0+128),f
 17082  0827  3000               	movlw	0
 17083  0828  1803               	skipnc
 17084  0829  3001               	movlw	1
 17085  082A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17086  082B  3000               	movlw	0
 17087  082C  1803               	skipnc
 17088  082D  3001               	movlw	1
 17089  082E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17090  082F  3001               	movlw	1
 17091  0830                     u7425:	
 17092  0830  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17093  0831  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17094  0832  0CA0               	rrf	___ftpack@arg^(0+128),f
 17095  0833  0B89               	decfsz	9,f
 17096  0834  2830               	goto	u7425
 17097  0835                     l2105:	
 17098  0835  30FF               	movlw	255
 17099  0836  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17100  0837  1903               	btfsc	3,2
 17101  0838  2842               	goto	l7469
 17102  0839  2821               	goto	l7461
 17103  083A                     l7467:	
 17104  083A  3001               	movlw	1
 17105  083B  02A3               	subwf	___ftpack@exp^(0+128),f
 17106  083C  3001               	movlw	1
 17107  083D                     u7445:	
 17108  083D  35A0               	lslf	___ftpack@arg^(0+128),f
 17109  083E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17110  083F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17111  0840  0B89               	decfsz	9,f
 17112  0841  283D               	goto	u7445
 17113  0842                     l7469:	
 17114  0842  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17115  0843  2848               	goto	l2112
 17116  0844  3002               	movlw	2
 17117  0845  0223               	subwf	___ftpack@exp^(0+128),w
 17118  0846  1803               	skipnc
 17119  0847  283A               	goto	l7467
 17120  0848                     l2112:	
 17121  0848  1823               	btfsc	___ftpack@exp^(0+128),0
 17122  0849  2850               	goto	l2113
 17123  084A  30FF               	movlw	255
 17124  084B  05A0               	andwf	___ftpack@arg^(0+128),f
 17125  084C  307F               	movlw	127
 17126  084D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17127  084E  30FF               	movlw	255
 17128  084F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17129  0850                     l2113:	
 17130  0850  1003               	clrc
 17131  0851  0CA3               	rrf	___ftpack@exp^(0+128),f
 17132  0852  0823               	movf	___ftpack@exp^(0+128),w
 17133  0853  00A5               	movwf	??___ftpack^(0+128)
 17134  0854  01A6               	clrf	(??___ftpack^(0+128)+1)
 17135  0855  01A7               	clrf	(??___ftpack^(0+128)+2)
 17136  0856  3010               	movlw	16
 17137  0857                     u7485:	
 17138  0857  35A5               	lslf	??___ftpack^(0+128),f
 17139  0858  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17140  0859  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17141  085A  0B89               	decfsz	9,f
 17142  085B  2857               	goto	u7485
 17143  085C  0825               	movf	??___ftpack^(0+128),w
 17144  085D  04A0               	iorwf	___ftpack@arg^(0+128),f
 17145  085E  0826               	movf	(??___ftpack+1)^(0+128),w
 17146  085F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17147  0860  0827               	movf	(??___ftpack+2)^(0+128),w
 17148  0861  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17149  0862  0824               	movf	___ftpack@sign^(0+128),w
 17150  0863  1903               	btfsc	3,2
 17151  0864  0008               	return
 17152  0865  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17153  0866  0008               	return
 17154  0867                     __end_of___ftpack:	
 17155                           
 17156                           	psect	text58
 17157  2F62                     __ptext58:	
 17158 ;; *************** function _adc_convert *****************
 17159 ;; Defined at:
 17160 ;;		line 122 in file "user.c"
 17161 ;; Parameters:    Size  Location     Type
 17162 ;;  channel         1    wreg     unsigned char 
 17163 ;; Auto vars:     Size  Location     Type
 17164 ;;  channel         1    3[BANK1 ] unsigned char 
 17165 ;; Return value:  Size  Location     Type
 17166 ;;                  2    0[BANK1 ] unsigned int 
 17167 ;; Registers used:
 17168 ;;		wreg, status,2, status,0
 17169 ;; Tracked objects:
 17170 ;;		On entry : 0/0
 17171 ;;		On exit  : 0/0
 17172 ;;		Unchanged: 0/0
 17173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17174 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17175 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17176 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17177 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17178 ;;Total ram usage:        4 bytes
 17179 ;; Hardware stack levels used:    1
 17180 ;; Hardware stack levels required when called:    3
 17181 ;; This function calls:
 17182 ;;		Nothing
 17183 ;; This function is called by:
 17184 ;;		_main
 17185 ;; This function uses a non-reentrant model
 17186 ;;
 17187                           
 17188                           
 17189                           ;psect for function _adc_convert
 17190  2F62                     _adc_convert:	
 17191                           
 17192                           ;incstack = 0
 17193                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17194                           ;adc_convert@channel stored from wreg
 17195  2F62  0021               	movlb	1	; select bank1
 17196  2F63  00A3               	movwf	adc_convert@channel^(0+128)
 17197                           
 17198                           ;user.c: 123: ADCON0bits.CHS = channel;
 17199  2F64  0823               	movf	adc_convert@channel^(0+128),w
 17200  2F65  00A2               	movwf	??_adc_convert^(0+128)
 17201  2F66  0DA2               	rlf	??_adc_convert^(0+128),f
 17202  2F67  0DA2               	rlf	??_adc_convert^(0+128),f
 17203  2F68  081D               	movf	29,w	;volatile
 17204  2F69  0622               	xorwf	??_adc_convert^(0+128),w
 17205  2F6A  3983               	andlw	-125
 17206  2F6B  0622               	xorwf	??_adc_convert^(0+128),w
 17207  2F6C  009D               	movwf	29	;volatile
 17208                           
 17209                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17210  2F6D  149D               	bsf	29,1	;volatile
 17211  2F6E                     l586:	
 17212                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17213                           
 17214  2F6E  189D               	btfsc	29,1	;volatile
 17215  2F6F  2F6E               	goto	l586
 17216                           
 17217                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17218  2F70  081C               	movf	28,w	;volatile
 17219  2F71  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17220  2F72  081B               	movf	27,w	;volatile
 17221  2F73  00A0               	movwf	?_adc_convert^(0+128)
 17222  2F74  0008               	return
 17223  2F75                     __end_of_adc_convert:	
 17224                           
 17225                           	psect	text59
 17226  24B8                     __ptext59:	
 17227 ;; *************** function _USARTInit *****************
 17228 ;; Defined at:
 17229 ;;		line 31 in file "usart_pic16.c"
 17230 ;; Parameters:    Size  Location     Type
 17231 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;		None
 17234 ;; Return value:  Size  Location     Type
 17235 ;;                  1    wreg      void 
 17236 ;; Registers used:
 17237 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17238 ;; Tracked objects:
 17239 ;;		On entry : 0/0
 17240 ;;		On exit  : 0/0
 17241 ;;		Unchanged: 0/0
 17242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17243 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17245 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17246 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17247 ;;Total ram usage:        3 bytes
 17248 ;; Hardware stack levels used:    1
 17249 ;; Hardware stack levels required when called:    3
 17250 ;; This function calls:
 17251 ;;		Nothing
 17252 ;; This function is called by:
 17253 ;;		_main
 17254 ;; This function uses a non-reentrant model
 17255 ;;
 17256                           
 17257                           
 17258                           ;psect for function _USARTInit
 17259  24B8                     _USARTInit:	
 17260                           
 17261                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17262                           
 17263                           ;incstack = 0
 17264                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17265  24B8  30FF               	movlw	255
 17266  24B9  0020               	movlb	0	; select bank0
 17267  24BA  00E4               	movwf	_UQEnd	;volatile
 17268  24BB  0021               	movlb	1	; select bank1
 17269  24BC  00A2               	movwf	??_USARTInit^(0+128)
 17270  24BD  0822               	movf	??_USARTInit^(0+128),w
 17271  24BE  00FD               	movwf	_UQFront	;volatile
 17272                           
 17273                           ;usart_pic16.c: 37: switch(baud_rate)
 17274  24BF  2CCA               	goto	l8413
 17275  24C0                     l8403:	
 17276                           ;usart_pic16.c: 38: {
 17277                           ;usart_pic16.c: 39: case 9600:
 17278                           
 17279                           
 17280                           ;usart_pic16.c: 40: SPBRG=103;
 17281  24C0  3067               	movlw	103
 17282  24C1  2CC7               	goto	L21
 17283  24C2                     l8405:	
 17284                           ;usart_pic16.c: 42: case 19200:
 17285                           
 17286                           ;usart_pic16.c: 41: break;
 17287                           
 17288                           
 17289                           ;usart_pic16.c: 43: SPBRG=51;
 17290  24C2  3033               	movlw	51
 17291  24C3  2CC7               	goto	L21
 17292  24C4                     l8407:	
 17293                           ;usart_pic16.c: 45: case 31250:
 17294                           
 17295                           ;usart_pic16.c: 44: break;
 17296                           
 17297                           
 17298                           ;usart_pic16.c: 46: SPBRG = 31;
 17299  24C4  301F               	movlw	31
 17300  24C5  2CC7               	goto	L21
 17301  24C6                     l8409:	
 17302                           ;usart_pic16.c: 48: case 38400:
 17303                           
 17304                           ;usart_pic16.c: 47: break;
 17305                           
 17306                           
 17307                           ;usart_pic16.c: 49: SPBRG=25;
 17308  24C6  3019               	movlw	25
 17309  24C7                     L21:	
 17310  24C7  0023               	movlb	3	; select bank3
 17311  24C8  009B               	movwf	27	;volatile
 17312                           
 17313                           ;usart_pic16.c: 51: }
 17314                           
 17315                           ;usart_pic16.c: 50: break;
 17316  24C9  2CED               	goto	l1712
 17317  24CA                     l8413:	
 17318                           
 17319                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17320                           ; Switch size 1, requested type "space"
 17321                           ; Number of cases is 4, Range of values is 37 to 150
 17322                           ; switch strategies available:
 17323                           ; Name         Instructions Cycles
 17324                           ; simple_byte           13     7 (average)
 17325                           ; direct_byte          237     9 (fixed)
 17326                           ; jumptable            263     9 (fixed)
 17327                           ;	Chosen strategy is simple_byte
 17328  24CA  0021               	movlb	1	; select bank1
 17329  24CB  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17330  24CC  3A25               	xorlw	37	; case 37
 17331  24CD  1903               	skipnz
 17332  24CE  2CD9               	goto	l9453
 17333  24CF  3A6E               	xorlw	110	; case 75
 17334  24D0  1903               	skipnz
 17335  24D1  2CDE               	goto	l9455
 17336  24D2  3A31               	xorlw	49	; case 122
 17337  24D3  1903               	skipnz
 17338  24D4  2CE3               	goto	l9457
 17339  24D5  3AEC               	xorlw	236	; case 150
 17340  24D6  1903               	skipnz
 17341  24D7  2CE8               	goto	l9459
 17342  24D8  2CED               	goto	l1712
 17343  24D9                     l9453:	
 17344                           
 17345                           ; Switch size 1, requested type "space"
 17346                           ; Number of cases is 1, Range of values is 128 to 128
 17347                           ; switch strategies available:
 17348                           ; Name         Instructions Cycles
 17349                           ; simple_byte            4     3 (average)
 17350                           ; direct_byte           11     9 (fixed)
 17351                           ; jumptable            263     9 (fixed)
 17352                           ;	Chosen strategy is simple_byte
 17353  24D9  0820               	movf	USARTInit@baud_rate^(0+128),w
 17354  24DA  3A80               	xorlw	128	; case 128
 17355  24DB  1903               	skipnz
 17356  24DC  2CC0               	goto	l8403
 17357  24DD  2CED               	goto	l1712
 17358  24DE                     l9455:	
 17359                           
 17360                           ; Switch size 1, requested type "space"
 17361                           ; Number of cases is 1, Range of values is 0 to 0
 17362                           ; switch strategies available:
 17363                           ; Name         Instructions Cycles
 17364                           ; simple_byte            4     3 (average)
 17365                           ; direct_byte            8     6 (fixed)
 17366                           ; jumptable            260     6 (fixed)
 17367                           ;	Chosen strategy is simple_byte
 17368  24DE  0820               	movf	USARTInit@baud_rate^(0+128),w
 17369  24DF  3A00               	xorlw	0	; case 0
 17370  24E0  1903               	skipnz
 17371  24E1  2CC2               	goto	l8405
 17372  24E2  2CED               	goto	l1712
 17373  24E3                     l9457:	
 17374                           
 17375                           ; Switch size 1, requested type "space"
 17376                           ; Number of cases is 1, Range of values is 18 to 18
 17377                           ; switch strategies available:
 17378                           ; Name         Instructions Cycles
 17379                           ; simple_byte            4     3 (average)
 17380                           ; direct_byte           11     9 (fixed)
 17381                           ; jumptable            263     9 (fixed)
 17382                           ;	Chosen strategy is simple_byte
 17383  24E3  0820               	movf	USARTInit@baud_rate^(0+128),w
 17384  24E4  3A12               	xorlw	18	; case 18
 17385  24E5  1903               	skipnz
 17386  24E6  2CC4               	goto	l8407
 17387  24E7  2CED               	goto	l1712
 17388  24E8                     l9459:	
 17389                           
 17390                           ; Switch size 1, requested type "space"
 17391                           ; Number of cases is 1, Range of values is 0 to 0
 17392                           ; switch strategies available:
 17393                           ; Name         Instructions Cycles
 17394                           ; simple_byte            4     3 (average)
 17395                           ; direct_byte            8     6 (fixed)
 17396                           ; jumptable            260     6 (fixed)
 17397                           ;	Chosen strategy is simple_byte
 17398  24E8  0820               	movf	USARTInit@baud_rate^(0+128),w
 17399  24E9  3A00               	xorlw	0	; case 0
 17400  24EA  1903               	skipnz
 17401  24EB  2CC6               	goto	l8409
 17402  24EC  2CED               	goto	l1712
 17403  24ED                     l1712:	
 17404                           
 17405                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17406  24ED  0023               	movlb	3	; select bank3
 17407  24EE  131E               	bcf	30,6	;volatile
 17408                           
 17409                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17410  24EF  169E               	bsf	30,5	;volatile
 17411                           
 17412                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17413  24F0  121E               	bcf	30,4	;volatile
 17414                           
 17415                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17416  24F1  151E               	bsf	30,2	;volatile
 17417                           
 17418                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17419  24F2  179D               	bsf	29,7	;volatile
 17420                           
 17421                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17422  24F3  131D               	bcf	29,6	;volatile
 17423                           
 17424                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17425  24F4  161D               	bsf	29,4	;volatile
 17426                           
 17427                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17428  24F5  119D               	bcf	29,3	;volatile
 17429                           
 17430                           ;usart_pic16.c: 65: RCIE=1;
 17431  24F6  0021               	movlb	1	; select bank1
 17432  24F7  1691               	bsf	17,5	;volatile
 17433                           
 17434                           ;usart_pic16.c: 66: PEIE=1;
 17435  24F8  170B               	bsf	11,6	;volatile
 17436                           
 17437                           ;usart_pic16.c: 68: (GIE = 1);
 17438  24F9  178B               	bsf	11,7	;volatile
 17439  24FA  0008               	return
 17440  24FB                     __end_of_USARTInit:	
 17441                           
 17442                           	psect	text60
 17443  278A                     __ptext60:	
 17444 ;; *************** function _ReadSavedSettings *****************
 17445 ;; Defined at:
 17446 ;;		line 234 in file "user.c"
 17447 ;; Parameters:    Size  Location     Type
 17448 ;;		None
 17449 ;; Auto vars:     Size  Location     Type
 17450 ;;		None
 17451 ;; Return value:  Size  Location     Type
 17452 ;;                  1    wreg      void 
 17453 ;; Registers used:
 17454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17455 ;; Tracked objects:
 17456 ;;		On entry : 0/0
 17457 ;;		On exit  : 0/0
 17458 ;;		Unchanged: 0/0
 17459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17462 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17463 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17464 ;;Total ram usage:        1 bytes
 17465 ;; Hardware stack levels used:    1
 17466 ;; Hardware stack levels required when called:    4
 17467 ;; This function calls:
 17468 ;;		_FLASH_ReadWord
 17469 ;;		_set_leds_bottom
 17470 ;;		_set_leds_top
 17471 ;; This function is called by:
 17472 ;;		_main
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           
 17477                           ;psect for function _ReadSavedSettings
 17478  278A                     _ReadSavedSettings:	
 17479                           
 17480                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 17481                           
 17482                           ;incstack = 0
 17483                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17484  278A  3081               	movlw	129
 17485  278B  0021               	movlb	1	; select bank1
 17486  278C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17487  278D  301F               	movlw	31
 17488  278E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17489  278F  31A0  2056  31A7   	fcall	_FLASH_ReadWord
 17490  2792  0021               	movlb	1	; select bank1
 17491  2793  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17492  2794  0020               	movlb	0	; select bank0
 17493  2795  00D2               	movwf	_top_push_state+1
 17494  2796  0021               	movlb	1	; select bank1
 17495  2797  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17496  2798  0020               	movlb	0	; select bank0
 17497  2799  00D1               	movwf	_top_push_state
 17498                           
 17499                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 17500  279A  3082               	movlw	130
 17501  279B  0021               	movlb	1	; select bank1
 17502  279C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17503  279D  301F               	movlw	31
 17504  279E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17505  279F  31A0  2056  31A7   	fcall	_FLASH_ReadWord
 17506  27A2  0021               	movlb	1	; select bank1
 17507  27A3  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17508  27A4  0020               	movlb	0	; select bank0
 17509  27A5  00CE               	movwf	_bottom_push_state+1
 17510  27A6  0021               	movlb	1	; select bank1
 17511  27A7  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17512  27A8  0020               	movlb	0	; select bank0
 17513  27A9  00CD               	movwf	_bottom_push_state
 17514                           
 17515                           ;user.c: 239: if (top_push_state > 6) {
 17516  27AA  0852               	movf	_top_push_state+1,w
 17517  27AB  3A80               	xorlw	128
 17518  27AC  0021               	movlb	1	; select bank1
 17519  27AD  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17520  27AE  3080               	movlw	128
 17521  27AF  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17522  27B0  1D03               	skipz
 17523  27B1  2FB5               	goto	u8885
 17524  27B2  3007               	movlw	7
 17525  27B3  0020               	movlb	0	; select bank0
 17526  27B4  0251               	subwf	_top_push_state,w
 17527  27B5                     u8885:	
 17528  27B5  1C03               	skipc
 17529  27B6  2FBC               	goto	l633
 17530                           
 17531                           ;user.c: 241: top_push_state = 6;
 17532  27B7  3006               	movlw	6
 17533  27B8  0020               	movlb	0	; select bank0
 17534  27B9  00D1               	movwf	_top_push_state
 17535  27BA  3000               	movlw	0
 17536  27BB  00D2               	movwf	_top_push_state+1
 17537  27BC                     l633:	
 17538                           
 17539                           ;user.c: 242: }
 17540                           ;user.c: 243: if (bottom_push_state > 5) {
 17541  27BC  0020               	movlb	0	; select bank0
 17542  27BD  084E               	movf	_bottom_push_state+1,w
 17543  27BE  3A80               	xorlw	128
 17544  27BF  0021               	movlb	1	; select bank1
 17545  27C0  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17546  27C1  3080               	movlw	128
 17547  27C2  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17548  27C3  1D03               	skipz
 17549  27C4  2FC8               	goto	u8895
 17550  27C5  3006               	movlw	6
 17551  27C6  0020               	movlb	0	; select bank0
 17552  27C7  024D               	subwf	_bottom_push_state,w
 17553  27C8                     u8895:	
 17554  27C8  1C03               	skipc
 17555  27C9  2FCF               	goto	l8467
 17556                           
 17557                           ;user.c: 245: bottom_push_state = 1;
 17558  27CA  3001               	movlw	1
 17559  27CB  0020               	movlb	0	; select bank0
 17560  27CC  00CD               	movwf	_bottom_push_state
 17561  27CD  3000               	movlw	0
 17562  27CE  00CE               	movwf	_bottom_push_state+1
 17563  27CF                     l8467:	
 17564                           
 17565                           ;user.c: 246: }
 17566                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 17567  27CF  0020               	movlb	0	; select bank0
 17568  27D0  0857               	movf	_switchBypass_state,w
 17569  27D1  1D03               	btfss	3,2
 17570  27D2  2FD6               	goto	u8900
 17571  27D3  0027               	movlb	7	; select bank7
 17572  27D4  148D               	bsf	13,1	;volatile
 17573  27D5  2FD8               	goto	l8469
 17574  27D6                     u8900:	
 17575  27D6  0027               	movlb	7	; select bank7
 17576  27D7  108D               	bcf	13,1	;volatile
 17577  27D8                     l8469:	
 17578                           
 17579                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 17580  27D8  0020               	movlb	0	; select bank0
 17581  27D9  0C57               	rrf	_switchBypass_state,w
 17582  27DA  0027               	movlb	7	; select bank7
 17583  27DB  1C03               	skipc
 17584  27DC  110D               	bcf	13,2	;volatile
 17585  27DD  1803               	skipnc
 17586  27DE  150D               	bsf	13,2	;volatile
 17587                           
 17588                           ;user.c: 251: LATBbits.LATB2 = 0;
 17589  27DF  0022               	movlb	2	; select bank2
 17590  27E0  110D               	bcf	13,2	;volatile
 17591                           
 17592                           ;user.c: 252: LATBbits.LATB3 = 0;
 17593  27E1  118D               	bcf	13,3	;volatile
 17594                           
 17595                           ;user.c: 254: LATBbits.LATB4 = 0;
 17596  27E2  120D               	bcf	13,4	;volatile
 17597                           
 17598                           ;user.c: 255: LATBbits.LATB5 = 0;
 17599  27E3  128D               	bcf	13,5	;volatile
 17600                           
 17601                           ;user.c: 257: LATBbits.LATB1 = 0;
 17602  27E4  108D               	bcf	13,1	;volatile
 17603                           
 17604                           ;user.c: 258: LATBbits.LATB0 = 0;
 17605  27E5  100D               	bcf	13,0	;volatile
 17606                           
 17607                           ;user.c: 261: set_leds_top(top_push_state, 1);
 17608  27E6  0020               	movlb	0	; select bank0
 17609  27E7  0852               	movf	_top_push_state+1,w
 17610  27E8  0021               	movlb	1	; select bank1
 17611  27E9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 17612  27EA  0020               	movlb	0	; select bank0
 17613  27EB  0851               	movf	_top_push_state,w
 17614  27EC  0021               	movlb	1	; select bank1
 17615  27ED  00A0               	movwf	set_leds_top@x^(0+128)
 17616  27EE  3001               	movlw	1
 17617  27EF  00A2               	movwf	set_leds_top@ledState^(0+128)
 17618  27F0  3000               	movlw	0
 17619  27F1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 17620  27F2  31A6  26C4  31A7   	fcall	_set_leds_top
 17621                           
 17622                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 17623  27F5  0020               	movlb	0	; select bank0
 17624  27F6  084E               	movf	_bottom_push_state+1,w
 17625  27F7  0021               	movlb	1	; select bank1
 17626  27F8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 17627  27F9  0020               	movlb	0	; select bank0
 17628  27FA  084D               	movf	_bottom_push_state,w
 17629  27FB  0021               	movlb	1	; select bank1
 17630  27FC  00A0               	movwf	set_leds_bottom@x^(0+128)
 17631  27FD  31A2  22C4         	fcall	_set_leds_bottom
 17632  27FF  0008               	return
 17633  2800                     __end_of_ReadSavedSettings:	
 17634                           
 17635                           	psect	text61
 17636  26C4                     __ptext61:	
 17637 ;; *************** function _set_leds_top *****************
 17638 ;; Defined at:
 17639 ;;		line 16 in file "LEDs.c"
 17640 ;; Parameters:    Size  Location     Type
 17641 ;;  x               2    0[BANK1 ] int 
 17642 ;;  ledState        2    2[BANK1 ] int 
 17643 ;; Auto vars:     Size  Location     Type
 17644 ;;		None
 17645 ;; Return value:  Size  Location     Type
 17646 ;;                  1    wreg      void 
 17647 ;; Registers used:
 17648 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17649 ;; Tracked objects:
 17650 ;;		On entry : 0/0
 17651 ;;		On exit  : 0/0
 17652 ;;		Unchanged: 0/0
 17653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17654 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17657 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17658 ;;Total ram usage:        4 bytes
 17659 ;; Hardware stack levels used:    1
 17660 ;; Hardware stack levels required when called:    3
 17661 ;; This function calls:
 17662 ;;		Nothing
 17663 ;; This function is called by:
 17664 ;;		_ReadSavedSettings
 17665 ;;		_ring_tactiles
 17666 ;;		_solidring_tactiles
 17667 ;;		_read_top_tactile
 17668 ;;		_setPresetDisplay
 17669 ;;		_resetRingLEDs
 17670 ;;		_setExpressionDisplay
 17671 ;;		_star_tactiles
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           
 17676                           ;psect for function _set_leds_top
 17677  26C4                     _set_leds_top:	
 17678                           
 17679                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 17683  26C4  0027               	movlb	7	; select bank7
 17684  26C5  100C               	bcf	12,0	;volatile
 17685                           
 17686                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 17687  26C6  108C               	bcf	12,1	;volatile
 17688                           
 17689                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 17690  26C7  110C               	bcf	12,2	;volatile
 17691                           
 17692                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 17693  26C8  118C               	bcf	12,3	;volatile
 17694                           
 17695                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 17696  26C9  120C               	bcf	12,4	;volatile
 17697                           
 17698                           ;LEDs.c: 22: switch (x) {
 17699  26CA  2EFA               	goto	l7495
 17700  26CB                     l7483:	
 17701                           ;LEDs.c: 23: case 1:
 17702                           
 17703                           
 17704                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 17705  26CB  0021               	movlb	1	; select bank1
 17706  26CC  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17707  26CD  0027               	movlb	7	; select bank7
 17708  26CE  1C03               	skipc
 17709  26CF  100C               	bcf	12,0	;volatile
 17710  26D0  1803               	skipnc
 17711  26D1  140C               	bsf	12,0	;volatile
 17712                           
 17713                           ;LEDs.c: 25: break;
 17714  26D2  0008               	return
 17715  26D3                     l7485:	
 17716                           ;LEDs.c: 26: case 2:
 17717                           
 17718                           
 17719                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17720  26D3  0021               	movlb	1	; select bank1
 17721  26D4  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17722  26D5  0027               	movlb	7	; select bank7
 17723  26D6  1C03               	skipc
 17724  26D7  108C               	bcf	12,1	;volatile
 17725  26D8  1803               	skipnc
 17726  26D9  148C               	bsf	12,1	;volatile
 17727                           
 17728                           ;LEDs.c: 28: break;
 17729  26DA  0008               	return
 17730  26DB                     l7487:	
 17731                           ;LEDs.c: 29: case 3:
 17732                           
 17733                           
 17734                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17735  26DB  0021               	movlb	1	; select bank1
 17736  26DC  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17737  26DD  0027               	movlb	7	; select bank7
 17738  26DE  1C03               	skipc
 17739  26DF  110C               	bcf	12,2	;volatile
 17740  26E0  1803               	skipnc
 17741  26E1  150C               	bsf	12,2	;volatile
 17742                           
 17743                           ;LEDs.c: 31: break;
 17744  26E2  0008               	return
 17745  26E3                     l7489:	
 17746                           ;LEDs.c: 32: case 4:
 17747                           
 17748                           
 17749                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17750  26E3  0021               	movlb	1	; select bank1
 17751  26E4  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17752  26E5  0027               	movlb	7	; select bank7
 17753  26E6  1C03               	skipc
 17754  26E7  118C               	bcf	12,3	;volatile
 17755  26E8  1803               	skipnc
 17756  26E9  158C               	bsf	12,3	;volatile
 17757                           
 17758                           ;LEDs.c: 34: break;
 17759  26EA  0008               	return
 17760  26EB                     l7491:	
 17761                           ;LEDs.c: 35: case 5:
 17762                           
 17763                           
 17764                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17765  26EB  0021               	movlb	1	; select bank1
 17766  26EC  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17767  26ED  0027               	movlb	7	; select bank7
 17768  26EE  1C03               	skipc
 17769  26EF  120C               	bcf	12,4	;volatile
 17770  26F0  1803               	skipnc
 17771  26F1  160C               	bsf	12,4	;volatile
 17772                           
 17773                           ;LEDs.c: 39: break;
 17774                           
 17775                           ;LEDs.c: 38: case 6:
 17776                           
 17777                           ;LEDs.c: 37: break;
 17778  26F2  0008               	return
 17779  26F3                     l792:	
 17780                           ;LEDs.c: 40: case 100:
 17781                           
 17782                           
 17783                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17784  26F3  0027               	movlb	7	; select bank7
 17785  26F4  140C               	bsf	12,0	;volatile
 17786                           
 17787                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17788  26F5  148C               	bsf	12,1	;volatile
 17789                           
 17790                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17791  26F6  150C               	bsf	12,2	;volatile
 17792                           
 17793                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17794  26F7  158C               	bsf	12,3	;volatile
 17795                           
 17796                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17797  26F8  160C               	bsf	12,4	;volatile
 17798                           
 17799                           ;LEDs.c: 47: }
 17800                           
 17801                           ;LEDs.c: 46: break;
 17802  26F9  0008               	return
 17803  26FA                     l7495:	
 17804                           
 17805                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17806                           ; Switch size 1, requested type "space"
 17807                           ; Number of cases is 1, Range of values is 0 to 0
 17808                           ; switch strategies available:
 17809                           ; Name         Instructions Cycles
 17810                           ; simple_byte            4     3 (average)
 17811                           ; direct_byte            8     6 (fixed)
 17812                           ; jumptable            260     6 (fixed)
 17813                           ;	Chosen strategy is simple_byte
 17814  26FA  0021               	movlb	1	; select bank1
 17815  26FB  0821               	movf	(set_leds_top@x+1)^(0+128),w
 17816  26FC  3A00               	xorlw	0	; case 0
 17817  26FD  1903               	skipnz
 17818  26FE  2F00               	goto	l9461
 17819  26FF  2F17               	goto	l793
 17820  2700                     l9461:	
 17821                           
 17822                           ; Switch size 1, requested type "space"
 17823                           ; Number of cases is 7, Range of values is 1 to 100
 17824                           ; switch strategies available:
 17825                           ; Name         Instructions Cycles
 17826                           ; simple_byte           22    12 (average)
 17827                           ; direct_byte          209     9 (fixed)
 17828                           ; jumptable            263     9 (fixed)
 17829                           ;	Chosen strategy is simple_byte
 17830  2700  0820               	movf	set_leds_top@x^(0+128),w
 17831  2701  3A01               	xorlw	1	; case 1
 17832  2702  1903               	skipnz
 17833  2703  2ECB               	goto	l7483
 17834  2704  3A03               	xorlw	3	; case 2
 17835  2705  1903               	skipnz
 17836  2706  2ED3               	goto	l7485
 17837  2707  3A01               	xorlw	1	; case 3
 17838  2708  1903               	skipnz
 17839  2709  2EDB               	goto	l7487
 17840  270A  3A07               	xorlw	7	; case 4
 17841  270B  1903               	skipnz
 17842  270C  2EE3               	goto	l7489
 17843  270D  3A01               	xorlw	1	; case 5
 17844  270E  1903               	skipnz
 17845  270F  2EEB               	goto	l7491
 17846  2710  3A03               	xorlw	3	; case 6
 17847  2711  1903               	skipnz
 17848  2712  2F17               	goto	l793
 17849  2713  3A62               	xorlw	98	; case 100
 17850  2714  1903               	skipnz
 17851  2715  2EF3               	goto	l792
 17852  2716  2F17               	goto	l793
 17853  2717                     l793:	
 17854  2717  0008               	return
 17855  2718                     __end_of_set_leds_top:	
 17856                           
 17857                           	psect	text62
 17858  22C4                     __ptext62:	
 17859 ;; *************** function _set_leds_bottom *****************
 17860 ;; Defined at:
 17861 ;;		line 51 in file "LEDs.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;  x               2    0[BANK1 ] int 
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;		None
 17866 ;; Return value:  Size  Location     Type
 17867 ;;                  1    wreg      void 
 17868 ;; Registers used:
 17869 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17875 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17878 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17879 ;;Total ram usage:        2 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    3
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		_ReadSavedSettings
 17886 ;;		_ring_tactiles
 17887 ;;		_solidring_tactiles
 17888 ;;		_read_bottom_tactile
 17889 ;;		_setPresetDisplay
 17890 ;;		_resetRingLEDs
 17891 ;;		_setExpressionDisplay
 17892 ;;		_star_tactiles
 17893 ;; This function uses a non-reentrant model
 17894 ;;
 17895                           
 17896                           
 17897                           ;psect for function _set_leds_bottom
 17898  22C4                     _set_leds_bottom:	
 17899                           
 17900                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 17901                           
 17902                           ;incstack = 0
 17903                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 17904  22C4  0022               	movlb	2	; select bank2
 17905  22C5  100F               	bcf	15,0	;volatile
 17906                           
 17907                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 17908  22C6  108F               	bcf	15,1	;volatile
 17909                           
 17910                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 17911  22C7  110F               	bcf	15,2	;volatile
 17912                           
 17913                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 17914  22C8  118F               	bcf	15,3	;volatile
 17915                           
 17916                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 17917  22C9  120F               	bcf	15,4	;volatile
 17918                           
 17919                           ;LEDs.c: 57: switch (x) {
 17920  22CA  2AE1               	goto	l7511
 17921  22CB                     l797:	
 17922                           ;LEDs.c: 58: case 1:
 17923                           
 17924                           
 17925                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 17926  22CB  0022               	movlb	2	; select bank2
 17927  22CC  140F               	bsf	15,0	;volatile
 17928                           
 17929                           ;LEDs.c: 60: break;
 17930  22CD  0008               	return
 17931  22CE                     l799:	
 17932                           ;LEDs.c: 61: case 2:
 17933                           
 17934                           
 17935                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 17936  22CE  0022               	movlb	2	; select bank2
 17937  22CF  148F               	bsf	15,1	;volatile
 17938                           
 17939                           ;LEDs.c: 63: break;
 17940  22D0  0008               	return
 17941  22D1                     l800:	
 17942                           ;LEDs.c: 64: case 3:
 17943                           
 17944                           
 17945                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 17946  22D1  0022               	movlb	2	; select bank2
 17947  22D2  150F               	bsf	15,2	;volatile
 17948                           
 17949                           ;LEDs.c: 66: break;
 17950  22D3  0008               	return
 17951  22D4                     l801:	
 17952                           ;LEDs.c: 67: case 4:
 17953                           
 17954                           
 17955                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 17956  22D4  0022               	movlb	2	; select bank2
 17957  22D5  158F               	bsf	15,3	;volatile
 17958                           
 17959                           ;LEDs.c: 69: break;
 17960  22D6  0008               	return
 17961  22D7                     l802:	
 17962                           ;LEDs.c: 70: case 5:
 17963                           
 17964                           
 17965                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 17966  22D7  0022               	movlb	2	; select bank2
 17967  22D8  160F               	bsf	15,4	;volatile
 17968                           
 17969                           ;LEDs.c: 74: break;
 17970                           
 17971                           ;LEDs.c: 73: case 6:
 17972                           
 17973                           ;LEDs.c: 72: break;
 17974  22D9  0008               	return
 17975  22DA                     l804:	
 17976                           ;LEDs.c: 75: case 100:
 17977                           
 17978                           
 17979                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 17980  22DA  0022               	movlb	2	; select bank2
 17981  22DB  140F               	bsf	15,0	;volatile
 17982                           
 17983                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 17984  22DC  148F               	bsf	15,1	;volatile
 17985                           
 17986                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 17987  22DD  150F               	bsf	15,2	;volatile
 17988                           
 17989                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 17990  22DE  158F               	bsf	15,3	;volatile
 17991                           
 17992                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 17993  22DF  160F               	bsf	15,4	;volatile
 17994                           
 17995                           ;LEDs.c: 82: }
 17996                           
 17997                           ;LEDs.c: 81: break;
 17998  22E0  0008               	return
 17999  22E1                     l7511:	
 18000                           
 18001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18002                           ; Switch size 1, requested type "space"
 18003                           ; Number of cases is 1, Range of values is 0 to 0
 18004                           ; switch strategies available:
 18005                           ; Name         Instructions Cycles
 18006                           ; simple_byte            4     3 (average)
 18007                           ; direct_byte            8     6 (fixed)
 18008                           ; jumptable            260     6 (fixed)
 18009                           ;	Chosen strategy is simple_byte
 18010  22E1  0021               	movlb	1	; select bank1
 18011  22E2  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18012  22E3  3A00               	xorlw	0	; case 0
 18013  22E4  1903               	skipnz
 18014  22E5  2AE7               	goto	l9463
 18015  22E6  2AFE               	goto	l805
 18016  22E7                     l9463:	
 18017                           
 18018                           ; Switch size 1, requested type "space"
 18019                           ; Number of cases is 7, Range of values is 1 to 100
 18020                           ; switch strategies available:
 18021                           ; Name         Instructions Cycles
 18022                           ; simple_byte           22    12 (average)
 18023                           ; direct_byte          209     9 (fixed)
 18024                           ; jumptable            263     9 (fixed)
 18025                           ;	Chosen strategy is simple_byte
 18026  22E7  0820               	movf	set_leds_bottom@x^(0+128),w
 18027  22E8  3A01               	xorlw	1	; case 1
 18028  22E9  1903               	skipnz
 18029  22EA  2ACB               	goto	l797
 18030  22EB  3A03               	xorlw	3	; case 2
 18031  22EC  1903               	skipnz
 18032  22ED  2ACE               	goto	l799
 18033  22EE  3A01               	xorlw	1	; case 3
 18034  22EF  1903               	skipnz
 18035  22F0  2AD1               	goto	l800
 18036  22F1  3A07               	xorlw	7	; case 4
 18037  22F2  1903               	skipnz
 18038  22F3  2AD4               	goto	l801
 18039  22F4  3A01               	xorlw	1	; case 5
 18040  22F5  1903               	skipnz
 18041  22F6  2AD7               	goto	l802
 18042  22F7  3A03               	xorlw	3	; case 6
 18043  22F8  1903               	skipnz
 18044  22F9  2AFE               	goto	l805
 18045  22FA  3A62               	xorlw	98	; case 100
 18046  22FB  1903               	skipnz
 18047  22FC  2ADA               	goto	l804
 18048  22FD  2AFE               	goto	l805
 18049  22FE                     l805:	
 18050  22FE  0008               	return
 18051  22FF                     __end_of_set_leds_bottom:	
 18052                           
 18053                           	psect	text63
 18054  2056                     __ptext63:	
 18055 ;; *************** function _FLASH_ReadWord *****************
 18056 ;; Defined at:
 18057 ;;		line 58 in file "memory.c"
 18058 ;; Parameters:    Size  Location     Type
 18059 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18060 ;; Auto vars:     Size  Location     Type
 18061 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18062 ;; Return value:  Size  Location     Type
 18063 ;;                  2    0[BANK1 ] unsigned int 
 18064 ;; Registers used:
 18065 ;;		wreg, status,2, status,0
 18066 ;; Tracked objects:
 18067 ;;		On entry : 0/0
 18068 ;;		On exit  : 0/0
 18069 ;;		Unchanged: 0/0
 18070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18071 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18072 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18074 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18075 ;;Total ram usage:        3 bytes
 18076 ;; Hardware stack levels used:    1
 18077 ;; Hardware stack levels required when called:    3
 18078 ;; This function calls:
 18079 ;;		Nothing
 18080 ;; This function is called by:
 18081 ;;		_ReadSavedSettings
 18082 ;;		_FLASH_WriteWord
 18083 ;; This function uses a non-reentrant model
 18084 ;;
 18085                           
 18086                           
 18087                           ;psect for function _FLASH_ReadWord
 18088  2056                     _FLASH_ReadWord:	
 18089                           
 18090                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18091                           
 18092                           ;incstack = 0
 18093                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18094  2056  3000               	movlw	0
 18095  2057  1B8B               	btfsc	11,7	;volatile
 18096  2058  3001               	movlw	1
 18097  2059  0021               	movlb	1	; select bank1
 18098  205A  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18099                           
 18100                           ;memory.c: 61: INTCONbits.GIE = 0;
 18101  205B  138B               	bcf	11,7	;volatile
 18102                           
 18103                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18104  205C  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18105  205D  0023               	movlb	3	; select bank3
 18106  205E  0091               	movwf	17	;volatile
 18107                           
 18108                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18109  205F  0021               	movlb	1	; select bank1
 18110  2060  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18111  2061  0023               	movlb	3	; select bank3
 18112  2062  0092               	movwf	18	;volatile
 18113                           
 18114                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18115  2063  1315               	bcf	21,6	;volatile
 18116                           
 18117                           ;memory.c: 66: PMCON1bits.RD = 1;
 18118  2064  1415               	bsf	21,0	;volatile
 18119                           
 18120                           ;memory.c: 67: __nop();
 18121  2065  0000               	nop
 18122                           
 18123                           ;memory.c: 68: __nop();
 18124  2066  0000               	nop
 18125                           
 18126                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18127  2067  0021               	movlb	1	; select bank1
 18128  2068  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18129  2069  1C03               	skipc
 18130  206A  138B               	bcf	11,7	;volatile
 18131  206B  1803               	skipnc
 18132  206C  178B               	bsf	11,7	;volatile
 18133                           
 18134                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18135  206D  0023               	movlb	3	; select bank3
 18136  206E  0814               	movf	20,w	;volatile
 18137  206F  0021               	movlb	1	; select bank1
 18138  2070  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18139  2071  0023               	movlb	3	; select bank3
 18140  2072  0813               	movf	19,w	;volatile
 18141  2073  0021               	movlb	1	; select bank1
 18142  2074  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18143  2075  0008               	return
 18144  2076                     __end_of_FLASH_ReadWord:	
 18145                           
 18146                           	psect	text64
 18147  20DD                     __ptext64:	
 18148 ;; *************** function _InitializeTaps *****************
 18149 ;; Defined at:
 18150 ;;		line 228 in file "user.c"
 18151 ;; Parameters:    Size  Location     Type
 18152 ;;		None
 18153 ;; Auto vars:     Size  Location     Type
 18154 ;;  itap            2    1[BANK1 ] int 
 18155 ;; Return value:  Size  Location     Type
 18156 ;;                  1    wreg      void 
 18157 ;; Registers used:
 18158 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18159 ;; Tracked objects:
 18160 ;;		On entry : 0/0
 18161 ;;		On exit  : 0/0
 18162 ;;		Unchanged: 0/0
 18163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18165 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18166 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18167 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18168 ;;Total ram usage:        3 bytes
 18169 ;; Hardware stack levels used:    1
 18170 ;; Hardware stack levels required when called:    3
 18171 ;; This function calls:
 18172 ;;		Nothing
 18173 ;; This function is called by:
 18174 ;;		_main
 18175 ;; This function uses a non-reentrant model
 18176 ;;
 18177                           
 18178                           
 18179                           ;psect for function _InitializeTaps
 18180  20DD                     _InitializeTaps:	
 18181                           
 18182                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18183                           
 18184                           ;incstack = 0
 18185                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18186  20DD  0021               	movlb	1	; select bank1
 18187  20DE  01A1               	clrf	InitializeTaps@itap^(0+128)
 18188  20DF  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18189  20E0                     L22:	
 18190  20E0  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18191  20E1  3A80               	xorlw	128
 18192  20E2  00A0               	movwf	??_InitializeTaps^(0+128)
 18193  20E3  3080               	movlw	128
 18194  20E4  0220               	subwf	??_InitializeTaps^(0+128),w
 18195  20E5  1D03               	skipz
 18196  20E6  28E9               	goto	u8855
 18197  20E7  300C               	movlw	12
 18198  20E8  0221               	subwf	InitializeTaps@itap^(0+128),w
 18199  20E9                     u8855:	
 18200  20E9  1803               	btfsc	3,0
 18201  20EA  0008               	return
 18202                           
 18203                           ;user.c: 230: tap[itap] = 0;
 18204  20EB  0021               	movlb	1	; select bank1
 18205  20EC  0821               	movf	InitializeTaps@itap^(0+128),w
 18206  20ED  00A0               	movwf	??_InitializeTaps^(0+128)
 18207  20EE  3001               	movlw	1
 18208  20EF                     u8865:	
 18209  20EF  35A0               	lslf	??_InitializeTaps^(0+128),f
 18210  20F0  3EFF               	addlw	-1
 18211  20F1  1D03               	skipz
 18212  20F2  28EF               	goto	u8865
 18213  20F3  3520               	lslf	??_InitializeTaps^(0+128),w
 18214  20F4  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18215  20F5  0086               	movwf	6
 18216  20F6  3002               	movlw	2	; select bank5/6
 18217  20F7  0087               	movwf	7
 18218  20F8  3000               	movlw	0
 18219  20F9  3FC0               	movwi [0]fsr1
 18220  20FA  3000               	movlw	0
 18221  20FB  3FC1               	movwi [1]fsr1
 18222  20FC  3FC2               	movwi [2]fsr1
 18223  20FD  3FC3               	movwi [3]fsr1
 18224  20FE  3001               	movlw	1
 18225  20FF  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18226  2100  3000               	movlw	0
 18227  2101  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18228  2102  28E0               	goto	L22
 18229  2103                     __end_of_InitializeTaps:	
 18230                           
 18231                           	psect	text65
 18232  218A                     __ptext65:	
 18233 ;; *************** function _InitApp *****************
 18234 ;; Defined at:
 18235 ;;		line 23 in file "user.c"
 18236 ;; Parameters:    Size  Location     Type
 18237 ;;		None
 18238 ;; Auto vars:     Size  Location     Type
 18239 ;;		None
 18240 ;; Return value:  Size  Location     Type
 18241 ;;                  1    wreg      void 
 18242 ;; Registers used:
 18243 ;;		wreg, status,2, status,0, pclath, cstack
 18244 ;; Tracked objects:
 18245 ;;		On entry : 0/0
 18246 ;;		On exit  : 0/0
 18247 ;;		Unchanged: 0/0
 18248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18253 ;;Total ram usage:        0 bytes
 18254 ;; Hardware stack levels used:    1
 18255 ;; Hardware stack levels required when called:    5
 18256 ;; This function calls:
 18257 ;;		_init_adc
 18258 ;;		_init_pwm
 18259 ;; This function is called by:
 18260 ;;		_main
 18261 ;; This function uses a non-reentrant model
 18262 ;;
 18263                           
 18264                           
 18265                           ;psect for function _InitApp
 18266  218A                     _InitApp:	
 18267                           
 18268                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18269                           
 18270                           ;incstack = 0
 18271                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18272  218A  0021               	movlb	1	; select bank1
 18273  218B  100D               	bcf	13,0	;volatile
 18274                           
 18275                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18276  218C  108D               	bcf	13,1	;volatile
 18277                           
 18278                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18279  218D  110D               	bcf	13,2	;volatile
 18280                           
 18281                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18282  218E  118D               	bcf	13,3	;volatile
 18283                           
 18284                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18285  218F  120D               	bcf	13,4	;volatile
 18286                           
 18287                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18288  2190  128D               	bcf	13,5	;volatile
 18289                           
 18290                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18291  2191  140E               	bsf	14,0	;volatile
 18292                           
 18293                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18294  2192  120E               	bcf	14,4	;volatile
 18295                           
 18296                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18297  2193  128E               	bcf	14,5	;volatile
 18298                           
 18299                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18300  2194  100F               	bcf	15,0	;volatile
 18301                           
 18302                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18303  2195  108F               	bcf	15,1	;volatile
 18304                           
 18305                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18306  2196  110F               	bcf	15,2	;volatile
 18307                           
 18308                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18309  2197  118F               	bcf	15,3	;volatile
 18310                           
 18311                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18312  2198  120F               	bcf	15,4	;volatile
 18313                           
 18314                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18315  2199  168F               	bsf	15,5	;volatile
 18316                           
 18317                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18318  219A  170F               	bsf	15,6	;volatile
 18319                           
 18320                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18321  219B  178F               	bsf	15,7	;volatile
 18322                           
 18323                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18324  219C  1410               	bsf	16,0	;volatile
 18325                           
 18326                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18327  219D  1490               	bsf	16,1	;volatile
 18328                           
 18329                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18330  219E  0023               	movlb	3	; select bank3
 18331  219F  1010               	bcf	16,0	;volatile
 18332                           
 18333                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18334  21A0  1090               	bcf	16,1	;volatile
 18335                           
 18336                           ;user.c: 53: PORTEbits.RE0 = 0;
 18337  21A1  0020               	movlb	0	; select bank0
 18338  21A2  1010               	bcf	16,0	;volatile
 18339                           
 18340                           ;user.c: 54: PORTEbits.RE1 = 0;
 18341  21A3  1090               	bcf	16,1	;volatile
 18342                           
 18343                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18344  21A4  0026               	movlb	6	; select bank6
 18345  21A5  100C               	bcf	12,0	;volatile
 18346                           
 18347                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18348  21A6  108C               	bcf	12,1	;volatile
 18349                           
 18350                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18351  21A7  110C               	bcf	12,2	;volatile
 18352                           
 18353                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18354  21A8  118C               	bcf	12,3	;volatile
 18355                           
 18356                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18357  21A9  120C               	bcf	12,4	;volatile
 18358                           
 18359                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18360  21AA  128C               	bcf	12,5	;volatile
 18361                           
 18362                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18363  21AB  170C               	bsf	12,6	;volatile
 18364                           
 18365                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18366  21AC  0028               	movlb	8	; select bank8
 18367  21AD  130C               	bcf	12,6	;volatile
 18368                           
 18369                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18370  21AE  0026               	movlb	6	; select bank6
 18371  21AF  108D               	bcf	13,1	;volatile
 18372                           
 18373                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18374  21B0  110D               	bcf	13,2	;volatile
 18375                           
 18376                           ;user.c: 68: init_adc();
 18377  21B1  3190  2001  31A1   	fcall	_init_adc
 18378                           
 18379                           ;user.c: 69: init_pwm();
 18380  21B4  31A4  2477         	fcall	_init_pwm
 18381                           
 18382                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18383  21B6  178B               	bsf	11,7	;volatile
 18384                           
 18385                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18386  21B7  168B               	bsf	11,5	;volatile
 18387                           
 18388                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18389  21B8  110B               	bcf	11,2	;volatile
 18390  21B9  0008               	return
 18391  21BA                     __end_of_InitApp:	
 18392                           
 18393                           	psect	text66
 18394  2477                     __ptext66:	
 18395 ;; *************** function _init_pwm *****************
 18396 ;; Defined at:
 18397 ;;		line 129 in file "user.c"
 18398 ;; Parameters:    Size  Location     Type
 18399 ;;		None
 18400 ;; Auto vars:     Size  Location     Type
 18401 ;;		None
 18402 ;; Return value:  Size  Location     Type
 18403 ;;                  1    wreg      void 
 18404 ;; Registers used:
 18405 ;;		wreg, status,2, status,0, pclath, cstack
 18406 ;; Tracked objects:
 18407 ;;		On entry : 0/0
 18408 ;;		On exit  : 0/0
 18409 ;;		Unchanged: 0/0
 18410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18415 ;;Total ram usage:        0 bytes
 18416 ;; Hardware stack levels used:    1
 18417 ;; Hardware stack levels required when called:    4
 18418 ;; This function calls:
 18419 ;;		_init_timer0
 18420 ;;		_init_timer2
 18421 ;; This function is called by:
 18422 ;;		_InitApp
 18423 ;; This function uses a non-reentrant model
 18424 ;;
 18425                           
 18426                           
 18427                           ;psect for function _init_pwm
 18428  2477                     _init_pwm:	
 18429                           
 18430                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18431                           
 18432                           ;incstack = 0
 18433                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18434  2477  0022               	movlb	2	; select bank2
 18435  2478  101D               	bcf	29,0	;volatile
 18436                           
 18437                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 18438  2479  0021               	movlb	1	; select bank1
 18439  247A  110E               	bcf	14,2	;volatile
 18440                           
 18441                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 18442  247B  108E               	bcf	14,1	;volatile
 18443                           
 18444                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 18445  247C  0026               	movlb	6	; select bank6
 18446  247D  100D               	bcf	13,0	;volatile
 18447                           
 18448                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 18449  247E  118D               	bcf	13,3	;volatile
 18450                           
 18451                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 18452  247F  120D               	bcf	13,4	;volatile
 18453                           
 18454                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 18455  2480  0021               	movlb	1	; select bank1
 18456  2481  1310               	bcf	16,6	;volatile
 18457                           
 18458                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 18459  2482  1290               	bcf	16,5	;volatile
 18460                           
 18461                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 18462  2483  1210               	bcf	16,4	;volatile
 18463                           
 18464                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 18465  2484  1190               	bcf	16,3	;volatile
 18466                           
 18467                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 18468  2485  1110               	bcf	16,2	;volatile
 18469                           
 18470                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 18471  2486  300F               	movlw	15
 18472  2487  0025               	movlb	5	; select bank5
 18473  2488  0493               	iorwf	19,f	;volatile
 18474                           
 18475                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 18476  2489  300F               	movlw	15
 18477  248A  049A               	iorwf	26,f	;volatile
 18478                           
 18479                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 18480  248B  300F               	movlw	15
 18481  248C  0026               	movlb	6	; select bank6
 18482  248D  0493               	iorwf	19,f	;volatile
 18483                           
 18484                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 18485  248E  300F               	movlw	15
 18486  248F  049A               	iorwf	26,f	;volatile
 18487                           
 18488                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 18489  2490  300F               	movlw	15
 18490  2491  049E               	iorwf	30,f	;volatile
 18491                           
 18492                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 18493  2492  300F               	movlw	15
 18494  2493  002C               	movlb	12	; select bank12
 18495  2494  0493               	iorwf	19,f	;volatile
 18496                           
 18497                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 18498  2495  300F               	movlw	15
 18499  2496  0496               	iorwf	22,f	;volatile
 18500                           
 18501                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 18502  2497  300F               	movlw	15
 18503  2498  0499               	iorwf	25,f	;volatile
 18504                           
 18505                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 18506  2499  300F               	movlw	15
 18507  249A  049C               	iorwf	28,f	;volatile
 18508                           
 18509                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 18510  249B  300F               	movlw	15
 18511  249C  049F               	iorwf	31,f	;volatile
 18512                           
 18513                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 18514  249D  0025               	movlb	5	; select bank5
 18515  249E  019D               	clrf	29	;volatile
 18516                           
 18517                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 18518  249F  019E               	clrf	30	;volatile
 18519                           
 18520                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 18521  24A0  019F               	clrf	31	;volatile
 18522                           
 18523                           ;user.c: 154: CCPR1 = 50;
 18524  24A1  3000               	movlw	0
 18525  24A2  0092               	movwf	18	;volatile
 18526  24A3  3032               	movlw	50
 18527  24A4  0091               	movwf	17	;volatile
 18528                           
 18529                           ;user.c: 155: CCPR2 = 100;
 18530  24A5  3000               	movlw	0
 18531  24A6  0099               	movwf	25	;volatile
 18532  24A7  3064               	movlw	100
 18533  24A8  0098               	movwf	24	;volatile
 18534                           
 18535                           ;user.c: 156: CCPR3 = 150;
 18536  24A9  3000               	movlw	0
 18537  24AA  0026               	movlb	6	; select bank6
 18538  24AB  0092               	movwf	18	;volatile
 18539  24AC  3096               	movlw	150
 18540  24AD  0091               	movwf	17	;volatile
 18541                           
 18542                           ;user.c: 157: CCPR4 = 200;
 18543  24AE  3000               	movlw	0
 18544  24AF  0099               	movwf	25	;volatile
 18545  24B0  30C8               	movlw	200
 18546  24B1  0098               	movwf	24	;volatile
 18547                           
 18548                           ;user.c: 158: init_timer2();
 18549  24B2  31AF  2729  31A4   	fcall	_init_timer2
 18550                           
 18551                           ;user.c: 159: init_timer0();
 18552  24B5  31AF  2722         	fcall	_init_timer0
 18553  24B7  0008               	return
 18554  24B8                     __end_of_init_pwm:	
 18555                           
 18556                           	psect	text67
 18557  2F29                     __ptext67:	
 18558 ;; *************** function _init_timer2 *****************
 18559 ;; Defined at:
 18560 ;;		line 162 in file "user.c"
 18561 ;; Parameters:    Size  Location     Type
 18562 ;;		None
 18563 ;; Auto vars:     Size  Location     Type
 18564 ;;		None
 18565 ;; Return value:  Size  Location     Type
 18566 ;;                  1    wreg      void 
 18567 ;; Registers used:
 18568 ;;		wreg, status,2, status,0
 18569 ;; Tracked objects:
 18570 ;;		On entry : 0/0
 18571 ;;		On exit  : 0/0
 18572 ;;		Unchanged: 0/0
 18573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18578 ;;Total ram usage:        0 bytes
 18579 ;; Hardware stack levels used:    1
 18580 ;; Hardware stack levels required when called:    3
 18581 ;; This function calls:
 18582 ;;		Nothing
 18583 ;; This function is called by:
 18584 ;;		_init_pwm
 18585 ;; This function uses a non-reentrant model
 18586 ;;
 18587                           
 18588                           
 18589                           ;psect for function _init_timer2
 18590  2F29                     _init_timer2:	
 18591                           
 18592                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 18593                           
 18594                           ;incstack = 0
 18595                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 18596  2F29  3087               	movlw	-121
 18597  2F2A  0020               	movlb	0	; select bank0
 18598  2F2B  059C               	andwf	28,f	;volatile
 18599                           
 18600                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 18601  2F2C  30FC               	movlw	-4
 18602  2F2D  059C               	andwf	28,f	;volatile
 18603                           
 18604                           ;user.c: 165: PR2 = 0xFF;
 18605  2F2E  30FF               	movlw	255
 18606  2F2F  009B               	movwf	27	;volatile
 18607                           
 18608                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 18609  2F30  151C               	bsf	28,2	;volatile
 18610  2F31  0008               	return
 18611  2F32                     __end_of_init_timer2:	
 18612                           
 18613                           	psect	text68
 18614  2F22                     __ptext68:	
 18615 ;; *************** function _init_timer0 *****************
 18616 ;; Defined at:
 18617 ;;		line 169 in file "user.c"
 18618 ;; Parameters:    Size  Location     Type
 18619 ;;		None
 18620 ;; Auto vars:     Size  Location     Type
 18621 ;;		None
 18622 ;; Return value:  Size  Location     Type
 18623 ;;                  1    wreg      void 
 18624 ;; Registers used:
 18625 ;;		None
 18626 ;; Tracked objects:
 18627 ;;		On entry : 0/0
 18628 ;;		On exit  : 0/0
 18629 ;;		Unchanged: 0/0
 18630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18635 ;;Total ram usage:        0 bytes
 18636 ;; Hardware stack levels used:    1
 18637 ;; Hardware stack levels required when called:    3
 18638 ;; This function calls:
 18639 ;;		Nothing
 18640 ;; This function is called by:
 18641 ;;		_init_pwm
 18642 ;; This function uses a non-reentrant model
 18643 ;;
 18644                           
 18645                           
 18646                           ;psect for function _init_timer0
 18647  2F22                     _init_timer0:	
 18648                           
 18649                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 18650                           
 18651                           ;incstack = 0
 18652                           ; Regs used in _init_timer0: []
 18653  2F22  0021               	movlb	1	; select bank1
 18654  2F23  1295               	bcf	21,5	;volatile
 18655                           
 18656                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 18657  2F24  1195               	bcf	21,3	;volatile
 18658                           
 18659                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 18660  2F25  1015               	bcf	21,0	;volatile
 18661                           
 18662                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 18663  2F26  1495               	bsf	21,1	;volatile
 18664                           
 18665                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 18666  2F27  1115               	bcf	21,2	;volatile
 18667  2F28  0008               	return
 18668  2F29                     __end_of_init_timer0:	
 18669                           
 18670                           	psect	text69
 18671  1001                     __ptext69:	
 18672 ;; *************** function _init_adc *****************
 18673 ;; Defined at:
 18674 ;;		line 115 in file "user.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      void 
 18681 ;; Registers used:
 18682 ;;		wreg, status,2, status,0
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18692 ;;Total ram usage:        0 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    3
 18695 ;; This function calls:
 18696 ;;		Nothing
 18697 ;; This function is called by:
 18698 ;;		_InitApp
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           
 18703                           ;psect for function _init_adc
 18704  1001                     _init_adc:	
 18705                           
 18706                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 18707                           
 18708                           ;incstack = 0
 18709                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 18710  1001  0021               	movlb	1	; select bank1
 18711  1002  179E               	bsf	30,7	;volatile
 18712                           
 18713                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 18714  1003  081E               	movf	30,w	;volatile
 18715  1004  398F               	andlw	-113
 18716  1005  3860               	iorlw	96
 18717  1006  009E               	movwf	30	;volatile
 18718                           
 18719                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 18720  1007  30FC               	movlw	-4
 18721  1008  059E               	andwf	30,f	;volatile
 18722                           
 18723                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 18724  1009  141D               	bsf	29,0	;volatile
 18725  100A  0008               	return
 18726  100B                     __end_of_init_adc:	
 18727                           
 18728                           	psect	text70
 18729  2F1A                     __ptext70:	
 18730 ;; *************** function _ConfigureOscillator *****************
 18731 ;; Defined at:
 18732 ;;		line 18 in file "system.c"
 18733 ;; Parameters:    Size  Location     Type
 18734 ;;		None
 18735 ;; Auto vars:     Size  Location     Type
 18736 ;;		None
 18737 ;; Return value:  Size  Location     Type
 18738 ;;                  1    wreg      void 
 18739 ;; Registers used:
 18740 ;;		wreg, status,2, status,0
 18741 ;; Tracked objects:
 18742 ;;		On entry : 0/0
 18743 ;;		On exit  : 0/0
 18744 ;;		Unchanged: 0/0
 18745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18750 ;;Total ram usage:        0 bytes
 18751 ;; Hardware stack levels used:    1
 18752 ;; Hardware stack levels required when called:    3
 18753 ;; This function calls:
 18754 ;;		Nothing
 18755 ;; This function is called by:
 18756 ;;		_main
 18757 ;; This function uses a non-reentrant model
 18758 ;;
 18759                           
 18760                           
 18761                           ;psect for function _ConfigureOscillator
 18762  2F1A                     _ConfigureOscillator:	
 18763                           
 18764                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 18765                           
 18766                           ;incstack = 0
 18767                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 18768  2F1A  30FC               	movlw	-4
 18769  2F1B  0021               	movlb	1	; select bank1
 18770  2F1C  0599               	andwf	25,f	;volatile
 18771  2F1D  0008               	return
 18772  2F1E                     __end_of_ConfigureOscillator:	
 18773                           
 18774                           	psect	intentry
 18775  0004                     __pintentry:	
 18776 ;; *************** function _isr *****************
 18777 ;; Defined at:
 18778 ;;		line 28 in file "interrupts.c"
 18779 ;; Parameters:    Size  Location     Type
 18780 ;;		None
 18781 ;; Auto vars:     Size  Location     Type
 18782 ;;  tmpSubDelay     2   35[BANK0 ] int 
 18783 ;; Return value:  Size  Location     Type
 18784 ;;                  1    wreg      void 
 18785 ;; Registers used:
 18786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18787 ;; Tracked objects:
 18788 ;;		On entry : 0/0
 18789 ;;		On exit  : 0/0
 18790 ;;		Unchanged: 0/0
 18791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18794 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18795 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18796 ;;Total ram usage:       11 bytes
 18797 ;; Hardware stack levels used:    1
 18798 ;; Hardware stack levels required when called:    2
 18799 ;; This function calls:
 18800 ;;		___awdiv
 18801 ;;		_modulation
 18802 ;;		i1_set_leds_top
 18803 ;; This function is called by:
 18804 ;;		Interrupt level 1
 18805 ;; This function uses a non-reentrant model
 18806 ;;
 18807                           
 18808  0004                     _isr:	
 18809                           
 18810                           ;incstack = 0
 18811                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18812  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18813  0005  3180               	pagesel	$
 18814  0006  0020               	movlb	0	; select bank0
 18815  0007  087F               	movf	127,w
 18816  0008  00C2               	movwf	??_isr+8
 18817                           
 18818                           ;interrupts.c: 29: int tmpSubDelay;
 18819                           ;interrupts.c: 32: extern volatile long timer;
 18820                           ;interrupts.c: 33: extern volatile long sub_timer;
 18821                           ;interrupts.c: 34: extern volatile long tap_timer;
 18822                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 18823                           ;interrupts.c: 36: extern int mod_delay_time;
 18824                           ;interrupts.c: 38: extern volatile long baseline_delay_time;
 18825                           ;interrupts.c: 40: extern int top_push_state;
 18826                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 18827                           ;interrupts.c: 42: extern volatile long mod_timer;
 18828                           ;interrupts.c: 43: extern volatile long delay_time;
 18829  0009  1D0B               	btfss	11,2	;volatile
 18830  000A  2921               	goto	i1l133
 18831                           
 18832                           ;interrupts.c: 47: test_timer++;
 18833  000B  3001               	movlw	1
 18834  000C  0024               	movlb	4	; select bank4
 18835  000D  07C1               	addwf	_test_timer^(0+512),f
 18836  000E  3000               	movlw	0
 18837  000F  3DC2               	addwfc	(_test_timer+1)^(0+512),f
 18838  0010  3000               	movlw	0
 18839  0011  3DC3               	addwfc	(_test_timer+2)^(0+512),f
 18840  0012  3000               	movlw	0
 18841  0013  3DC4               	addwfc	(_test_timer+3)^(0+512),f
 18842                           
 18843                           ;interrupts.c: 48: tmpSubDelay = delay_time;
 18844  0014  0020               	movlb	0	; select bank0
 18845  0015  084A               	movf	_delay_time+1,w	;volatile
 18846  0016  00C4               	movwf	isr@tmpSubDelay+1
 18847  0017  0849               	movf	_delay_time,w	;volatile
 18848  0018  00C3               	movwf	isr@tmpSubDelay
 18849                           
 18850                           ;interrupts.c: 49: timer = timer + 1;
 18851  0019  3001               	movlw	1
 18852  001A  00BA               	movwf	??_isr
 18853  001B  3000               	movlw	0
 18854  001C  00BB               	movwf	??_isr+1
 18855  001D  3000               	movlw	0
 18856  001E  00BC               	movwf	??_isr+2
 18857  001F  3000               	movlw	0
 18858  0020  00BD               	movwf	??_isr+3
 18859  0021  0860               	movf	_timer,w	;volatile
 18860  0022  07BA               	addwf	??_isr,f
 18861  0023  0861               	movf	_timer+1,w	;volatile
 18862  0024  3DBB               	addwfc	??_isr+1,f
 18863  0025  0862               	movf	_timer+2,w	;volatile
 18864  0026  3DBC               	addwfc	??_isr+2,f
 18865  0027  0863               	movf	_timer+3,w	;volatile
 18866  0028  3DBD               	addwfc	??_isr+3,f
 18867  0029  083D               	movf	??_isr+3,w
 18868  002A  00E3               	movwf	_timer+3	;volatile
 18869  002B  083C               	movf	??_isr+2,w
 18870  002C  00E2               	movwf	_timer+2	;volatile
 18871  002D  083B               	movf	??_isr+1,w
 18872  002E  00E1               	movwf	_timer+1	;volatile
 18873  002F  083A               	movf	??_isr,w
 18874  0030  00E0               	movwf	_timer	;volatile
 18875                           
 18876                           ;interrupts.c: 50: sub_timer = sub_timer + 1;
 18877  0031  3001               	movlw	1
 18878  0032  00BA               	movwf	??_isr
 18879  0033  3000               	movlw	0
 18880  0034  00BB               	movwf	??_isr+1
 18881  0035  3000               	movlw	0
 18882  0036  00BC               	movwf	??_isr+2
 18883  0037  3000               	movlw	0
 18884  0038  00BD               	movwf	??_isr+3
 18885  0039  0858               	movf	_sub_timer,w	;volatile
 18886  003A  07BA               	addwf	??_isr,f
 18887  003B  0859               	movf	_sub_timer+1,w	;volatile
 18888  003C  3DBB               	addwfc	??_isr+1,f
 18889  003D  085A               	movf	_sub_timer+2,w	;volatile
 18890  003E  3DBC               	addwfc	??_isr+2,f
 18891  003F  085B               	movf	_sub_timer+3,w	;volatile
 18892  0040  3DBD               	addwfc	??_isr+3,f
 18893  0041  083D               	movf	??_isr+3,w
 18894  0042  00DB               	movwf	_sub_timer+3	;volatile
 18895  0043  083C               	movf	??_isr+2,w
 18896  0044  00DA               	movwf	_sub_timer+2	;volatile
 18897  0045  083B               	movf	??_isr+1,w
 18898  0046  00D9               	movwf	_sub_timer+1	;volatile
 18899  0047  083A               	movf	??_isr,w
 18900  0048  00D8               	movwf	_sub_timer	;volatile
 18901                           
 18902                           ;interrupts.c: 51: tap_timer = tap_timer + 1;
 18903  0049  3001               	movlw	1
 18904  004A  00BA               	movwf	??_isr
 18905  004B  3000               	movlw	0
 18906  004C  00BB               	movwf	??_isr+1
 18907  004D  3000               	movlw	0
 18908  004E  00BC               	movwf	??_isr+2
 18909  004F  3000               	movlw	0
 18910  0050  00BD               	movwf	??_isr+3
 18911  0051  085C               	movf	_tap_timer,w	;volatile
 18912  0052  07BA               	addwf	??_isr,f
 18913  0053  085D               	movf	_tap_timer+1,w	;volatile
 18914  0054  3DBB               	addwfc	??_isr+1,f
 18915  0055  085E               	movf	_tap_timer+2,w	;volatile
 18916  0056  3DBC               	addwfc	??_isr+2,f
 18917  0057  085F               	movf	_tap_timer+3,w	;volatile
 18918  0058  3DBD               	addwfc	??_isr+3,f
 18919  0059  083D               	movf	??_isr+3,w
 18920  005A  00DF               	movwf	_tap_timer+3	;volatile
 18921  005B  083C               	movf	??_isr+2,w
 18922  005C  00DE               	movwf	_tap_timer+2	;volatile
 18923  005D  083B               	movf	??_isr+1,w
 18924  005E  00DD               	movwf	_tap_timer+1	;volatile
 18925  005F  083A               	movf	??_isr,w
 18926  0060  00DC               	movwf	_tap_timer	;volatile
 18927                           
 18928                           ;interrupts.c: 52: mod_timer = mod_timer + 1;
 18929  0061  3001               	movlw	1
 18930  0062  00BA               	movwf	??_isr
 18931  0063  3000               	movlw	0
 18932  0064  00BB               	movwf	??_isr+1
 18933  0065  3000               	movlw	0
 18934  0066  00BC               	movwf	??_isr+2
 18935  0067  3000               	movlw	0
 18936  0068  00BD               	movwf	??_isr+3
 18937  0069  0023               	movlb	3	; select bank3
 18938  006A  0824               	movf	_mod_timer^(0+384),w	;volatile
 18939  006B  0020               	movlb	0	; select bank0
 18940  006C  07BA               	addwf	??_isr,f
 18941  006D  0023               	movlb	3	; select bank3
 18942  006E  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 18943  006F  0020               	movlb	0	; select bank0
 18944  0070  3DBB               	addwfc	??_isr+1,f
 18945  0071  0023               	movlb	3	; select bank3
 18946  0072  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 18947  0073  0020               	movlb	0	; select bank0
 18948  0074  3DBC               	addwfc	??_isr+2,f
 18949  0075  0023               	movlb	3	; select bank3
 18950  0076  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 18951  0077  0020               	movlb	0	; select bank0
 18952  0078  3DBD               	addwfc	??_isr+3,f
 18953  0079  083D               	movf	??_isr+3,w
 18954  007A  0023               	movlb	3	; select bank3
 18955  007B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 18956  007C  0020               	movlb	0	; select bank0
 18957  007D  083C               	movf	??_isr+2,w
 18958  007E  0023               	movlb	3	; select bank3
 18959  007F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 18960  0080  0020               	movlb	0	; select bank0
 18961  0081  083B               	movf	??_isr+1,w
 18962  0082  0023               	movlb	3	; select bank3
 18963  0083  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 18964  0084  0020               	movlb	0	; select bank0
 18965  0085  083A               	movf	??_isr,w
 18966  0086  0023               	movlb	3	; select bank3
 18967  0087  00A4               	movwf	_mod_timer^(0+384)	;volatile
 18968                           
 18969                           ;interrupts.c: 53: double_timer++;
 18970  0088  3001               	movlw	1
 18971  0089  07A0               	addwf	_double_timer^(0+384),f	;volatile
 18972  008A  3000               	movlw	0
 18973  008B  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 18974  008C  3000               	movlw	0
 18975  008D  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 18976  008E  3000               	movlw	0
 18977  008F  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 18978                           
 18979                           ;interrupts.c: 58: if (longBypass_start == 1) {
 18980  0090  0022               	movlb	2	; select bank2
 18981  0091  036A               	decf	_longBypass_start^(0+256),w
 18982  0092  1D03               	btfss	3,2
 18983  0093  28AB               	goto	i1l6669
 18984                           
 18985                           ;interrupts.c: 59: longBypass_timer++;
 18986  0094  3001               	movlw	1
 18987  0095  0023               	movlb	3	; select bank3
 18988  0096  07B2               	addwf	_longBypass_timer^(0+384),f	;volatile
 18989  0097  3000               	movlw	0
 18990  0098  3DB3               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 18991                           
 18992                           ;interrupts.c: 60: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 18993  0099  0833               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 18994  009A  0020               	movlb	0	; select bank0
 18995  009B  0250               	subwf	_long_press_limit+1,w
 18996  009C  1D03               	skipz
 18997  009D  28A2               	goto	u644_25
 18998  009E  0023               	movlb	3	; select bank3
 18999  009F  0832               	movf	_longBypass_timer^(0+384),w	;volatile
 19000  00A0  0020               	movlb	0	; select bank0
 19001  00A1  024F               	subwf	_long_press_limit,w
 19002  00A2                     u644_25:	
 19003  00A2  1803               	skipnc
 19004  00A3  28AB               	goto	i1l6669
 19005  00A4  0850               	movf	_long_press_limit+1,w
 19006  00A5  0023               	movlb	3	; select bank3
 19007  00A6  00B3               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19008  00A7  0020               	movlb	0	; select bank0
 19009  00A8  084F               	movf	_long_press_limit,w
 19010  00A9  0023               	movlb	3	; select bank3
 19011  00AA  00B2               	movwf	_longBypass_timer^(0+384)	;volatile
 19012  00AB                     i1l6669:	
 19013                           
 19014                           ;interrupts.c: 61: }
 19015                           ;interrupts.c: 62: if (longTap_start == 1) {
 19016  00AB  0022               	movlb	2	; select bank2
 19017  00AC  036B               	decf	_longTap_start^(0+256),w
 19018  00AD  1D03               	btfss	3,2
 19019  00AE  28C6               	goto	i1l6675
 19020                           
 19021                           ;interrupts.c: 63: longTap_timer++;
 19022  00AF  3001               	movlw	1
 19023  00B0  0023               	movlb	3	; select bank3
 19024  00B1  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 19025  00B2  3000               	movlw	0
 19026  00B3  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19027                           
 19028                           ;interrupts.c: 64: if (longTap_timer > long_press_limit) {
 19029  00B4  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19030  00B5  0020               	movlb	0	; select bank0
 19031  00B6  0250               	subwf	_long_press_limit+1,w
 19032  00B7  1D03               	skipz
 19033  00B8  28BD               	goto	u646_25
 19034  00B9  0023               	movlb	3	; select bank3
 19035  00BA  0834               	movf	_longTap_timer^(0+384),w	;volatile
 19036  00BB  0020               	movlb	0	; select bank0
 19037  00BC  024F               	subwf	_long_press_limit,w
 19038  00BD                     u646_25:	
 19039  00BD  1803               	skipnc
 19040  00BE  28C6               	goto	i1l6675
 19041                           
 19042                           ;interrupts.c: 65: longTap_timer = long_press_limit;
 19043  00BF  0850               	movf	_long_press_limit+1,w
 19044  00C0  0023               	movlb	3	; select bank3
 19045  00C1  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19046  00C2  0020               	movlb	0	; select bank0
 19047  00C3  084F               	movf	_long_press_limit,w
 19048  00C4  0023               	movlb	3	; select bank3
 19049  00C5  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 19050  00C6                     i1l6675:	
 19051                           
 19052                           ;interrupts.c: 66: }
 19053                           ;interrupts.c: 67: }
 19054                           ;interrupts.c: 68: INTCONbits.TMR0IF = 0;
 19055  00C6  110B               	bcf	11,2	;volatile
 19056                           
 19057                           ;interrupts.c: 70: if (adjust_sub_delay == 1) {
 19058  00C7  0023               	movlb	3	; select bank3
 19059  00C8  033C               	decf	_adjust_sub_delay^(0+384),w
 19060  00C9  1D03               	btfss	3,2
 19061  00CA  2921               	goto	i1l133
 19062                           
 19063                           ;interrupts.c: 71: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 19064  00CB  0020               	movlb	0	; select bank0
 19065  00CC  085B               	movf	_sub_timer+3,w	;volatile
 19066  00CD  3A80               	xorlw	128
 19067  00CE  00BA               	movwf	??_isr
 19068  00CF  084C               	movf	_delay_time+3,w	;volatile
 19069  00D0  3A80               	xorlw	128
 19070  00D1  023A               	subwf	??_isr,w
 19071  00D2  1D03               	skipz
 19072  00D3  28DE               	goto	u648_23
 19073  00D4  084B               	movf	_delay_time+2,w	;volatile
 19074  00D5  025A               	subwf	_sub_timer+2,w	;volatile
 19075  00D6  1D03               	skipz
 19076  00D7  28DE               	goto	u648_23
 19077  00D8  084A               	movf	_delay_time+1,w	;volatile
 19078  00D9  0259               	subwf	_sub_timer+1,w	;volatile
 19079  00DA  1D03               	skipz
 19080  00DB  28DE               	goto	u648_23
 19081  00DC  0849               	movf	_delay_time,w	;volatile
 19082  00DD  0258               	subwf	_sub_timer,w	;volatile
 19083  00DE                     u648_23:	
 19084  00DE  1C03               	skipc
 19085  00DF  2921               	goto	i1l133
 19086  00E0  0845               	movf	_baseline_delay_time,w	;volatile
 19087  00E1  00BA               	movwf	??_isr
 19088  00E2  0846               	movf	_baseline_delay_time+1,w	;volatile
 19089  00E3  00BB               	movwf	??_isr+1
 19090  00E4  0847               	movf	_baseline_delay_time+2,w	;volatile
 19091  00E5  00BC               	movwf	??_isr+2
 19092  00E6  0848               	movf	_baseline_delay_time+3,w	;volatile
 19093  00E7  00BD               	movwf	??_isr+3
 19094  00E8  0960               	comf	_timer,w	;volatile
 19095  00E9  00BE               	movwf	??_isr+4
 19096  00EA  0961               	comf	_timer+1,w	;volatile
 19097  00EB  00BF               	movwf	??_isr+5
 19098  00EC  0962               	comf	_timer+2,w	;volatile
 19099  00ED  00C0               	movwf	??_isr+6
 19100  00EE  0963               	comf	_timer+3,w	;volatile
 19101  00EF  00C1               	movwf	??_isr+7
 19102  00F0  0ABE               	incf	??_isr+4,f
 19103  00F1  1903               	skipnz
 19104  00F2  0ABF               	incf	??_isr+5,f
 19105  00F3  1903               	skipnz
 19106  00F4  0AC0               	incf	??_isr+6,f
 19107  00F5  1903               	skipnz
 19108  00F6  0AC1               	incf	??_isr+7,f
 19109  00F7  083E               	movf	??_isr+4,w
 19110  00F8  07BA               	addwf	??_isr,f
 19111  00F9  083F               	movf	??_isr+5,w
 19112  00FA  3DBB               	addwfc	??_isr+1,f
 19113  00FB  0840               	movf	??_isr+6,w
 19114  00FC  3DBC               	addwfc	??_isr+2,f
 19115  00FD  0841               	movf	??_isr+7,w
 19116  00FE  3DBD               	addwfc	??_isr+3,f
 19117  00FF  1BBD               	btfsc	??_isr+3,7
 19118  0100  290E               	goto	i1l6683
 19119  0101  083D               	movf	??_isr+3,w
 19120  0102  1D03               	btfss	3,2
 19121  0103  2921               	goto	i1l133
 19122  0104  083C               	movf	??_isr+2,w
 19123  0105  1D03               	btfss	3,2
 19124  0106  2921               	goto	i1l133
 19125  0107  083B               	movf	??_isr+1,w
 19126  0108  1D03               	btfss	3,2
 19127  0109  2921               	goto	i1l133
 19128  010A  3004               	movlw	4
 19129  010B  023A               	subwf	??_isr,w
 19130  010C  1803               	btfsc	3,0
 19131  010D  2921               	goto	i1l133
 19132  010E                     i1l6683:	
 19133                           
 19134                           ;interrupts.c: 72: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 19135  010E  0960               	comf	_timer,w	;volatile
 19136  010F  00BA               	movwf	??_isr
 19137  0110  0961               	comf	_timer+1,w	;volatile
 19138  0111  00BB               	movwf	??_isr+1
 19139  0112  0ABA               	incf	??_isr,f
 19140  0113  1903               	skipnz
 19141  0114  0ABB               	incf	??_isr+1,f
 19142  0115  0845               	movf	_baseline_delay_time,w	;volatile
 19143  0116  073A               	addwf	??_isr,w
 19144  0117  00BC               	movwf	??_isr+2
 19145  0118  0846               	movf	_baseline_delay_time+1,w	;volatile
 19146  0119  3D3B               	addwfc	??_isr+1,w
 19147  011A  00BD               	movwf	??_isr+3
 19148  011B  0858               	movf	_sub_timer,w	;volatile
 19149  011C  073C               	addwf	??_isr+2,w
 19150  011D  00C3               	movwf	isr@tmpSubDelay
 19151  011E  0859               	movf	_sub_timer+1,w	;volatile
 19152  011F  3D3D               	addwfc	??_isr+3,w
 19153  0120  00C4               	movwf	isr@tmpSubDelay+1
 19154  0121                     i1l133:	
 19155                           
 19156                           ;interrupts.c: 73: }
 19157                           ;interrupts.c: 74: }
 19158                           ;interrupts.c: 75: }
 19159                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19160  0121  0020               	movlb	0	; select bank0
 19161  0122  0854               	movf	_longTap_state,w	;volatile
 19162  0123  1D03               	btfss	3,2
 19163  0124  297C               	goto	i1l6709
 19164  0125  0865               	movf	_doubleTap_state,w	;volatile
 19165  0126  1D03               	btfss	3,2
 19166  0127  297C               	goto	i1l6709
 19167  0128  0868               	movf	_presetSaveMode,w
 19168  0129  1D03               	btfss	3,2
 19169  012A  297C               	goto	i1l6709
 19170                           
 19171                           ;interrupts.c: 81: if (timer >= baseline_delay_time) {
 19172  012B  0863               	movf	_timer+3,w	;volatile
 19173  012C  3A80               	xorlw	128
 19174  012D  00BA               	movwf	??_isr
 19175  012E  0848               	movf	_baseline_delay_time+3,w	;volatile
 19176  012F  3A80               	xorlw	128
 19177  0130  023A               	subwf	??_isr,w
 19178  0131  1D03               	skipz
 19179  0132  293D               	goto	u653_23
 19180  0133  0847               	movf	_baseline_delay_time+2,w	;volatile
 19181  0134  0262               	subwf	_timer+2,w	;volatile
 19182  0135  1D03               	skipz
 19183  0136  293D               	goto	u653_23
 19184  0137  0846               	movf	_baseline_delay_time+1,w	;volatile
 19185  0138  0261               	subwf	_timer+1,w	;volatile
 19186  0139  1D03               	skipz
 19187  013A  293D               	goto	u653_23
 19188  013B  0845               	movf	_baseline_delay_time,w	;volatile
 19189  013C  0260               	subwf	_timer,w	;volatile
 19190  013D                     u653_23:	
 19191  013D  1C03               	skipc
 19192  013E  296A               	goto	i1l6705
 19193                           
 19194                           ;interrupts.c: 84: LATBbits.LATB4 = 1;
 19195  013F  0022               	movlb	2	; select bank2
 19196  0140  160D               	bsf	13,4	;volatile
 19197                           
 19198                           ;interrupts.c: 86: timer = 0;
 19199  0141  3000               	movlw	0
 19200  0142  0020               	movlb	0	; select bank0
 19201  0143  00E3               	movwf	_timer+3	;volatile
 19202  0144  3000               	movlw	0
 19203  0145  00E2               	movwf	_timer+2	;volatile
 19204  0146  3000               	movlw	0
 19205  0147  00E1               	movwf	_timer+1	;volatile
 19206  0148  3000               	movlw	0
 19207  0149  00E0               	movwf	_timer	;volatile
 19208                           
 19209                           ;interrupts.c: 88: if (reset_sub_delay == 1 || modulation_changed == 1) {
 19210  014A  0023               	movlb	3	; select bank3
 19211  014B  0346               	decf	_reset_sub_delay^(0+384),w
 19212  014C  1D03               	btfss	3,2
 19213  014D  0343               	decf	_modulation_changed^(0+384),w
 19214  014E  1D03               	btfss	3,2
 19215  014F  296A               	goto	i1l6705
 19216                           
 19217                           ;interrupts.c: 93: mod_counter = 0;
 19218  0150  01B6               	clrf	_mod_counter^(0+384)
 19219  0151  01B7               	clrf	(_mod_counter+1)^(0+384)
 19220                           
 19221                           ;interrupts.c: 94: modulation_changed = 0;
 19222  0152  01C3               	clrf	_modulation_changed^(0+384)
 19223                           
 19224                           ;interrupts.c: 95: mod_timer = mod_delay_time;
 19225  0153  0024               	movlb	4	; select bank4
 19226  0154  0862               	movf	_mod_delay_time^(0+512),w
 19227  0155  0023               	movlb	3	; select bank3
 19228  0156  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19229  0157  0024               	movlb	4	; select bank4
 19230  0158  0863               	movf	(_mod_delay_time+1)^(0+512),w
 19231  0159  0023               	movlb	3	; select bank3
 19232  015A  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19233  015B  0D89               	rlf	9,f
 19234  015C  3B89               	subwfb	9,f
 19235  015D  0989               	comf	9,f
 19236  015E  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19237  015F  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19238                           
 19239                           ;interrupts.c: 97: reset_sub_delay = 0;
 19240  0160  01C6               	clrf	_reset_sub_delay^(0+384)
 19241                           
 19242                           ;interrupts.c: 98: sub_timer = delay_time;
 19243  0161  0020               	movlb	0	; select bank0
 19244  0162  084C               	movf	_delay_time+3,w	;volatile
 19245  0163  00DB               	movwf	_sub_timer+3	;volatile
 19246  0164  084B               	movf	_delay_time+2,w	;volatile
 19247  0165  00DA               	movwf	_sub_timer+2	;volatile
 19248  0166  084A               	movf	_delay_time+1,w	;volatile
 19249  0167  00D9               	movwf	_sub_timer+1	;volatile
 19250  0168  0849               	movf	_delay_time,w	;volatile
 19251  0169  00D8               	movwf	_sub_timer	;volatile
 19252  016A                     i1l6705:	
 19253                           
 19254                           ;interrupts.c: 99: }
 19255                           ;interrupts.c: 100: }
 19256                           ;interrupts.c: 102: if (timer >= 30) {
 19257  016A  0020               	movlb	0	; select bank0
 19258  016B  1BE3               	btfsc	_timer+3,7	;volatile
 19259  016C  297C               	goto	i1l6709
 19260  016D  0863               	movf	_timer+3,w	;volatile
 19261  016E  1D03               	btfss	3,2
 19262  016F  297A               	goto	i1l6707
 19263  0170  0862               	movf	_timer+2,w	;volatile
 19264  0171  1D03               	btfss	3,2
 19265  0172  297A               	goto	i1l6707
 19266  0173  0861               	movf	_timer+1,w	;volatile
 19267  0174  1D03               	btfss	3,2
 19268  0175  297A               	goto	i1l6707
 19269  0176  301E               	movlw	30
 19270  0177  0260               	subwf	_timer,w	;volatile
 19271  0178  1C03               	btfss	3,0
 19272  0179  297C               	goto	i1l6709
 19273  017A                     i1l6707:	
 19274                           
 19275                           ;interrupts.c: 104: LATBbits.LATB4 = 0;
 19276  017A  0022               	movlb	2	; select bank2
 19277  017B  120D               	bcf	13,4	;volatile
 19278  017C                     i1l6709:	
 19279                           
 19280                           ;interrupts.c: 106: }
 19281                           ;interrupts.c: 107: }
 19282                           ;interrupts.c: 110: if (presetSaveMode == 1) {
 19283  017C  0020               	movlb	0	; select bank0
 19284  017D  0368               	decf	_presetSaveMode,w
 19285  017E  1D03               	btfss	3,2
 19286  017F  29AC               	goto	i1l6721
 19287                           
 19288                           ;interrupts.c: 113: if (double_timer >= 250) {
 19289  0180  0023               	movlb	3	; select bank3
 19290  0181  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19291  0182  299B               	goto	i1l6717
 19292  0183  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19293  0184  1D03               	btfss	3,2
 19294  0185  2990               	goto	i1l6713
 19295  0186  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19296  0187  1D03               	btfss	3,2
 19297  0188  2990               	goto	i1l6713
 19298  0189  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19299  018A  1D03               	btfss	3,2
 19300  018B  2990               	goto	i1l6713
 19301  018C  30FA               	movlw	250
 19302  018D  0220               	subwf	_double_timer^(0+384),w	;volatile
 19303  018E  1C03               	btfss	3,0
 19304  018F  299B               	goto	i1l6717
 19305  0190                     i1l6713:	
 19306                           
 19307                           ;interrupts.c: 114: LATBbits.LATB0 = 1;
 19308  0190  0022               	movlb	2	; select bank2
 19309  0191  140D               	bsf	13,0	;volatile
 19310                           
 19311                           ;interrupts.c: 115: double_timer = 0;
 19312  0192  3000               	movlw	0
 19313  0193  0023               	movlb	3	; select bank3
 19314  0194  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19315  0195  3000               	movlw	0
 19316  0196  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19317  0197  3000               	movlw	0
 19318  0198  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19319  0199  3000               	movlw	0
 19320  019A  00A0               	movwf	_double_timer^(0+384)	;volatile
 19321  019B                     i1l6717:	
 19322                           
 19323                           ;interrupts.c: 117: }
 19324                           ;interrupts.c: 118: if (double_timer >= 30) {
 19325  019B  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19326  019C  29AC               	goto	i1l6721
 19327  019D  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19328  019E  1D03               	btfss	3,2
 19329  019F  29AA               	goto	i1l6719
 19330  01A0  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19331  01A1  1D03               	btfss	3,2
 19332  01A2  29AA               	goto	i1l6719
 19333  01A3  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19334  01A4  1D03               	btfss	3,2
 19335  01A5  29AA               	goto	i1l6719
 19336  01A6  301E               	movlw	30
 19337  01A7  0220               	subwf	_double_timer^(0+384),w	;volatile
 19338  01A8  1C03               	btfss	3,0
 19339  01A9  29AC               	goto	i1l6721
 19340  01AA                     i1l6719:	
 19341                           
 19342                           ;interrupts.c: 120: LATBbits.LATB0 = 0;
 19343  01AA  0022               	movlb	2	; select bank2
 19344  01AB  100D               	bcf	13,0	;volatile
 19345  01AC                     i1l6721:	
 19346                           
 19347                           ;interrupts.c: 121: }
 19348                           ;interrupts.c: 122: }
 19349                           ;interrupts.c: 124: if (presetSaveMode < 1 && mode2_state == 0) {
 19350  01AC  0020               	movlb	0	; select bank0
 19351  01AD  0868               	movf	_presetSaveMode,w
 19352  01AE  1D03               	btfss	3,2
 19353  01AF  2A07               	goto	i1l6741
 19354  01B0  0867               	movf	_mode2_state,w
 19355  01B1  1D03               	btfss	3,2
 19356  01B2  2A07               	goto	i1l6741
 19357                           
 19358                           ;interrupts.c: 125: if (sub_timer >= tmpSubDelay ) {
 19359  01B3  0843               	movf	isr@tmpSubDelay,w
 19360  01B4  00BA               	movwf	??_isr
 19361  01B5  0844               	movf	isr@tmpSubDelay+1,w
 19362  01B6  00BB               	movwf	??_isr+1
 19363  01B7  3000               	movlw	0
 19364  01B8  1BBB               	btfsc	??_isr+1,7
 19365  01B9  30FF               	movlw	255
 19366  01BA  00BC               	movwf	??_isr+2
 19367  01BB  00BD               	movwf	??_isr+3
 19368  01BC  085B               	movf	_sub_timer+3,w	;volatile
 19369  01BD  3A80               	xorlw	128
 19370  01BE  00BE               	movwf	??_isr+4
 19371  01BF  083D               	movf	??_isr+3,w
 19372  01C0  3A80               	xorlw	128
 19373  01C1  023E               	subwf	??_isr+4,w
 19374  01C2  1D03               	skipz
 19375  01C3  29CE               	goto	u662_23
 19376  01C4  083C               	movf	??_isr+2,w
 19377  01C5  025A               	subwf	_sub_timer+2,w	;volatile
 19378  01C6  1D03               	skipz
 19379  01C7  29CE               	goto	u662_23
 19380  01C8  083B               	movf	??_isr+1,w
 19381  01C9  0259               	subwf	_sub_timer+1,w	;volatile
 19382  01CA  1D03               	skipz
 19383  01CB  29CE               	goto	u662_23
 19384  01CC  083A               	movf	??_isr,w
 19385  01CD  0258               	subwf	_sub_timer,w	;volatile
 19386  01CE                     u662_23:	
 19387  01CE  1C03               	skipc
 19388  01CF  29EB               	goto	i1l6735
 19389                           
 19390                           ;interrupts.c: 126: if (suspend_blink == 0) {
 19391  01D0  0869               	movf	_suspend_blink,w	;volatile
 19392  01D1  1D03               	btfss	3,2
 19393  01D2  29DE               	goto	i1l6731
 19394                           
 19395                           ;interrupts.c: 127: set_leds_top(top_push_state, 1);
 19396  01D3  0852               	movf	_top_push_state+1,w
 19397  01D4  00F1               	movwf	i1set_leds_top@x+1
 19398  01D5  0851               	movf	_top_push_state,w
 19399  01D6  00F0               	movwf	i1set_leds_top@x
 19400  01D7  3001               	movlw	1
 19401  01D8  00F2               	movwf	i1set_leds_top@ledState
 19402  01D9  3000               	movlw	0
 19403  01DA  00F3               	movwf	i1set_leds_top@ledState+1
 19404  01DB  31A4  24FB  3180   	fcall	i1_set_leds_top
 19405  01DE                     i1l6731:	
 19406                           
 19407                           ;interrupts.c: 128: }
 19408                           ;interrupts.c: 129: tmpSubDelay = delay_time;
 19409  01DE  0020               	movlb	0	; select bank0
 19410  01DF  084A               	movf	_delay_time+1,w	;volatile
 19411  01E0  00C4               	movwf	isr@tmpSubDelay+1
 19412  01E1  0849               	movf	_delay_time,w	;volatile
 19413  01E2  00C3               	movwf	isr@tmpSubDelay
 19414                           
 19415                           ;interrupts.c: 130: sub_timer = 0;
 19416  01E3  3000               	movlw	0
 19417  01E4  00DB               	movwf	_sub_timer+3	;volatile
 19418  01E5  3000               	movlw	0
 19419  01E6  00DA               	movwf	_sub_timer+2	;volatile
 19420  01E7  3000               	movlw	0
 19421  01E8  00D9               	movwf	_sub_timer+1	;volatile
 19422  01E9  3000               	movlw	0
 19423  01EA  00D8               	movwf	_sub_timer	;volatile
 19424  01EB                     i1l6735:	
 19425                           
 19426                           ;interrupts.c: 131: }
 19427                           ;interrupts.c: 133: if (sub_timer >= 20) {
 19428  01EB  1BDB               	btfsc	_sub_timer+3,7	;volatile
 19429  01EC  2A07               	goto	i1l6741
 19430  01ED  085B               	movf	_sub_timer+3,w	;volatile
 19431  01EE  1D03               	btfss	3,2
 19432  01EF  29FA               	goto	i1l6737
 19433  01F0  085A               	movf	_sub_timer+2,w	;volatile
 19434  01F1  1D03               	btfss	3,2
 19435  01F2  29FA               	goto	i1l6737
 19436  01F3  0859               	movf	_sub_timer+1,w	;volatile
 19437  01F4  1D03               	btfss	3,2
 19438  01F5  29FA               	goto	i1l6737
 19439  01F6  3014               	movlw	20
 19440  01F7  0258               	subwf	_sub_timer,w	;volatile
 19441  01F8  1C03               	btfss	3,0
 19442  01F9  2A07               	goto	i1l6741
 19443  01FA                     i1l6737:	
 19444                           
 19445                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19446  01FA  0869               	movf	_suspend_blink,w	;volatile
 19447  01FB  1D03               	btfss	3,2
 19448  01FC  2A07               	goto	i1l6741
 19449                           
 19450                           ;interrupts.c: 135: set_leds_top(top_push_state, 0);
 19451  01FD  0852               	movf	_top_push_state+1,w
 19452  01FE  00F1               	movwf	i1set_leds_top@x+1
 19453  01FF  0851               	movf	_top_push_state,w
 19454  0200  00F0               	movwf	i1set_leds_top@x
 19455  0201  3000               	movlw	0
 19456  0202  00F2               	movwf	i1set_leds_top@ledState
 19457  0203  00F3               	movwf	i1set_leds_top@ledState+1
 19458  0204  31A4  24FB  3180   	fcall	i1_set_leds_top
 19459  0207                     i1l6741:	
 19460                           
 19461                           ;interrupts.c: 136: }
 19462                           ;interrupts.c: 137: }
 19463                           ;interrupts.c: 138: }
 19464                           ;interrupts.c: 154: if (mod_timer >= mod_delay_time) {
 19465  0207  0024               	movlb	4	; select bank4
 19466  0208  0862               	movf	_mod_delay_time^(0+512),w
 19467  0209  0020               	movlb	0	; select bank0
 19468  020A  00BA               	movwf	??_isr
 19469  020B  0024               	movlb	4	; select bank4
 19470  020C  0863               	movf	(_mod_delay_time+1)^(0+512),w
 19471  020D  0020               	movlb	0	; select bank0
 19472  020E  00BB               	movwf	??_isr+1
 19473  020F  3000               	movlw	0
 19474  0210  1BBB               	btfsc	??_isr+1,7
 19475  0211  30FF               	movlw	255
 19476  0212  00BC               	movwf	??_isr+2
 19477  0213  00BD               	movwf	??_isr+3
 19478  0214  0023               	movlb	3	; select bank3
 19479  0215  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19480  0216  3A80               	xorlw	128
 19481  0217  0020               	movlb	0	; select bank0
 19482  0218  00BE               	movwf	??_isr+4
 19483  0219  083D               	movf	??_isr+3,w
 19484  021A  3A80               	xorlw	128
 19485  021B  023E               	subwf	??_isr+4,w
 19486  021C  0023               	movlb	3	; select bank3
 19487  021D  1D03               	skipz
 19488  021E  2A2F               	goto	u666_23
 19489  021F  0020               	movlb	0	; select bank0
 19490  0220  083C               	movf	??_isr+2,w
 19491  0221  0023               	movlb	3	; select bank3
 19492  0222  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19493  0223  1D03               	skipz
 19494  0224  2A2F               	goto	u666_23
 19495  0225  0020               	movlb	0	; select bank0
 19496  0226  083B               	movf	??_isr+1,w
 19497  0227  0023               	movlb	3	; select bank3
 19498  0228  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19499  0229  1D03               	skipz
 19500  022A  2A2F               	goto	u666_23
 19501  022B  0020               	movlb	0	; select bank0
 19502  022C  083A               	movf	??_isr,w
 19503  022D  0023               	movlb	3	; select bank3
 19504  022E  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19505  022F                     u666_23:	
 19506  022F  1C03               	skipc
 19507  0230  2AA9               	goto	i1l6759
 19508                           
 19509                           ;interrupts.c: 155: mod_timer = 0;
 19510  0231  3000               	movlw	0
 19511  0232  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19512  0233  3000               	movlw	0
 19513  0234  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19514  0235  3000               	movlw	0
 19515  0236  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19516  0237  3000               	movlw	0
 19517  0238  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19518                           
 19519                           ;interrupts.c: 159: if (mod_counter >= 60) {
 19520  0239  0837               	movf	(_mod_counter+1)^(0+384),w
 19521  023A  3A80               	xorlw	128
 19522  023B  0020               	movlb	0	; select bank0
 19523  023C  00BA               	movwf	??_isr
 19524  023D  3080               	movlw	128
 19525  023E  023A               	subwf	??_isr,w
 19526  023F  1D03               	skipz
 19527  0240  2A44               	goto	u667_25
 19528  0241  303C               	movlw	60
 19529  0242  0023               	movlb	3	; select bank3
 19530  0243  0236               	subwf	_mod_counter^(0+384),w
 19531  0244                     u667_25:	
 19532  0244  1C03               	skipc
 19533  0245  2A55               	goto	i1l155
 19534                           
 19535                           ;interrupts.c: 160: mod_counter = 0;
 19536  0246  0023               	movlb	3	; select bank3
 19537  0247  01B6               	clrf	_mod_counter^(0+384)
 19538  0248  01B7               	clrf	(_mod_counter+1)^(0+384)
 19539                           
 19540                           ;interrupts.c: 161: test_timer = 0;
 19541  0249  3000               	movlw	0
 19542  024A  0024               	movlb	4	; select bank4
 19543  024B  00C4               	movwf	(_test_timer+3)^(0+512)
 19544  024C  3000               	movlw	0
 19545  024D  00C3               	movwf	(_test_timer+2)^(0+512)
 19546  024E  3000               	movlw	0
 19547  024F  00C2               	movwf	(_test_timer+1)^(0+512)
 19548  0250  3000               	movlw	0
 19549  0251  00C1               	movwf	_test_timer^(0+512)
 19550                           
 19551                           ;interrupts.c: 162: LATBbits.LATB0 = 1;
 19552  0252  0022               	movlb	2	; select bank2
 19553  0253  140D               	bsf	13,0	;volatile
 19554                           
 19555                           ;interrupts.c: 163: } else {
 19556  0254  2A57               	goto	i1l6751
 19557  0255                     i1l155:	
 19558                           
 19559                           ;interrupts.c: 164: LATBbits.LATB0 = 0;
 19560  0255  0022               	movlb	2	; select bank2
 19561  0256  100D               	bcf	13,0	;volatile
 19562  0257                     i1l6751:	
 19563                           
 19564                           ;interrupts.c: 165: }
 19565                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 19566  0257  0023               	movlb	3	; select bank3
 19567  0258  0837               	movf	(_mod_counter+1)^(0+384),w
 19568  0259  0020               	movlb	0	; select bank0
 19569  025A  00BB               	movwf	??_isr+1
 19570  025B  0023               	movlb	3	; select bank3
 19571  025C  0836               	movf	_mod_counter^(0+384),w
 19572  025D  0020               	movlb	0	; select bank0
 19573  025E  00BA               	movwf	??_isr
 19574  025F  35BA               	lslf	??_isr,f
 19575  0260  0DBB               	rlf	??_isr+1,f
 19576  0261  308E               	movlw	142
 19577  0262  00BC               	movwf	??_isr+2
 19578  0263  3023               	movlw	35
 19579  0264  00BD               	movwf	??_isr+3
 19580  0265  083A               	movf	??_isr,w
 19581  0266  073C               	addwf	??_isr+2,w
 19582  0267  0086               	movwf	6
 19583  0268  083B               	movf	??_isr+1,w
 19584  0269  3D3D               	addwfc	??_isr+3,w
 19585  026A  0087               	movwf	7
 19586  026B  3F40               	moviw [0]fsr1
 19587  026C  0023               	movlb	3	; select bank3
 19588  026D  00B8               	movwf	_mod_value^(0+384)
 19589  026E  3F41               	moviw [1]fsr1
 19590  026F  00B9               	movwf	(_mod_value+1)^(0+384)
 19591                           
 19592                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 19593  0270  0838               	movf	_mod_value^(0+384),w
 19594  0271  0020               	movlb	0	; select bank0
 19595  0272  00AE               	movwf	modulation@x
 19596  0273  0023               	movlb	3	; select bank3
 19597  0274  0839               	movf	(_mod_value+1)^(0+384),w
 19598  0275  0020               	movlb	0	; select bank0
 19599  0276  00AF               	movwf	modulation@x+1
 19600  0277  0D89               	rlf	9,f
 19601  0278  3B89               	subwfb	9,f
 19602  0279  0989               	comf	9,f
 19603  027A  00B0               	movwf	modulation@x+2
 19604  027B  00B1               	movwf	modulation@x+3
 19605  027C  0024               	movlb	4	; select bank4
 19606  027D  0845               	movf	_adjusted_pot_value^(0+512),w
 19607  027E  0020               	movlb	0	; select bank0
 19608  027F  00B2               	movwf	modulation@y
 19609  0280  0024               	movlb	4	; select bank4
 19610  0281  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 19611  0282  0020               	movlb	0	; select bank0
 19612  0283  00B3               	movwf	modulation@y+1
 19613  0284  0D89               	rlf	9,f
 19614  0285  3B89               	subwfb	9,f
 19615  0286  0989               	comf	9,f
 19616  0287  00B4               	movwf	modulation@y+2
 19617  0288  00B5               	movwf	modulation@y+3
 19618  0289  31A4  2436  3180   	fcall	_modulation
 19619  028C  0020               	movlb	0	; select bank0
 19620  028D  082F               	movf	?_modulation+1,w
 19621  028E  0023               	movlb	3	; select bank3
 19622  028F  00B9               	movwf	(_mod_value+1)^(0+384)
 19623  0290  0020               	movlb	0	; select bank0
 19624  0291  082E               	movf	?_modulation,w
 19625  0292  0023               	movlb	3	; select bank3
 19626  0293  00B8               	movwf	_mod_value^(0+384)
 19627                           
 19628                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 19629  0294  3002               	movlw	2
 19630  0295  00F0               	movwf	___awdiv@divisor
 19631  0296  3000               	movlw	0
 19632  0297  00F1               	movwf	___awdiv@divisor+1
 19633  0298  0839               	movf	(_mod_value+1)^(0+384),w
 19634  0299  00F3               	movwf	___awdiv@dividend+1
 19635  029A  0838               	movf	_mod_value^(0+384),w
 19636  029B  00F2               	movwf	___awdiv@dividend
 19637  029C  31A6  2673  3180   	fcall	___awdiv
 19638  029F  0871               	movf	?___awdiv+1,w
 19639  02A0  0026               	movlb	6	; select bank6
 19640  02A1  0092               	movwf	18	;volatile
 19641  02A2  0870               	movf	?___awdiv,w
 19642  02A3  0091               	movwf	17	;volatile
 19643                           
 19644                           ;interrupts.c: 200: mod_counter++;
 19645  02A4  3001               	movlw	1
 19646  02A5  0023               	movlb	3	; select bank3
 19647  02A6  07B6               	addwf	_mod_counter^(0+384),f
 19648  02A7  3000               	movlw	0
 19649  02A8  3DB7               	addwfc	(_mod_counter+1)^(0+384),f
 19650  02A9                     i1l6759:	
 19651                           
 19652                           ;interrupts.c: 204: }
 19653                           ;interrupts.c: 208: if (preset_programmning_on == 1) {
 19654  02A9  0345               	decf	_preset_programmning_on^(0+384),w
 19655  02AA  1D03               	btfss	3,2
 19656  02AB  2AD7               	goto	i1l6771
 19657                           
 19658                           ;interrupts.c: 209: preset_blink++;
 19659  02AC  3001               	movlw	1
 19660  02AD  0020               	movlb	0	; select bank0
 19661  02AE  00BA               	movwf	??_isr
 19662  02AF  083A               	movf	??_isr,w
 19663  02B0  0023               	movlb	3	; select bank3
 19664  02B1  07C4               	addwf	_preset_blink^(0+384),f
 19665                           
 19666                           ;interrupts.c: 211: if (preset_blink >= blink_delay) {
 19667  02B2  084A               	movf	(_blink_delay+1)^(0+384),w
 19668  02B3  3A80               	xorlw	128
 19669  02B4  3C80               	sublw	128
 19670  02B5  1D03               	skipz
 19671  02B6  2AB9               	goto	u669_25
 19672  02B7  0849               	movf	_blink_delay^(0+384),w
 19673  02B8  0244               	subwf	_preset_blink^(0+384),w
 19674  02B9                     u669_25:	
 19675  02B9  1C03               	skipc
 19676  02BA  2ADC               	goto	i1l6775
 19677                           
 19678                           ;interrupts.c: 212: LATBbits.LATB1 = 1;
 19679  02BB  0022               	movlb	2	; select bank2
 19680  02BC  148D               	bsf	13,1	;volatile
 19681                           
 19682                           ;interrupts.c: 213: if (preset_blink > blink_delay*2) {
 19683  02BD  0023               	movlb	3	; select bank3
 19684  02BE  084A               	movf	(_blink_delay+1)^(0+384),w
 19685  02BF  0020               	movlb	0	; select bank0
 19686  02C0  00BB               	movwf	??_isr+1
 19687  02C1  0023               	movlb	3	; select bank3
 19688  02C2  0849               	movf	_blink_delay^(0+384),w
 19689  02C3  0020               	movlb	0	; select bank0
 19690  02C4  00BA               	movwf	??_isr
 19691  02C5  35BA               	lslf	??_isr,f
 19692  02C6  0DBB               	rlf	??_isr+1,f
 19693  02C7  083B               	movf	??_isr+1,w
 19694  02C8  3A80               	xorlw	128
 19695  02C9  00BC               	movwf	??_isr+2
 19696  02CA  3080               	movlw	128
 19697  02CB  023C               	subwf	??_isr+2,w
 19698  02CC  1D03               	skipz
 19699  02CD  2AD2               	goto	u670_25
 19700  02CE  0023               	movlb	3	; select bank3
 19701  02CF  0844               	movf	_preset_blink^(0+384),w
 19702  02D0  0020               	movlb	0	; select bank0
 19703  02D1  023A               	subwf	??_isr,w
 19704  02D2                     u670_25:	
 19705  02D2  1803               	skipnc
 19706  02D3  2ADE               	goto	i1l163
 19707                           
 19708                           ;interrupts.c: 214: preset_blink = 0;
 19709  02D4  0023               	movlb	3	; select bank3
 19710  02D5  01C4               	clrf	_preset_blink^(0+384)
 19711                           
 19712                           ;interrupts.c: 215: }
 19713                           ;interrupts.c: 217: } else {
 19714  02D6  2ADE               	goto	i1l163
 19715  02D7                     i1l6771:	
 19716                           ;interrupts.c: 219: }
 19717                           ;interrupts.c: 221: } else {
 19718                           
 19719                           ;interrupts.c: 218: LATBbits.LATB1 = 0;
 19720                           
 19721                           
 19722                           ;interrupts.c: 222: if (preset_blink > 0) {
 19723  02D7  0023               	movlb	3	; select bank3
 19724  02D8  0844               	movf	_preset_blink^(0+384),w
 19725  02D9  1903               	btfsc	3,2
 19726  02DA  2ADE               	goto	i1l163
 19727                           
 19728                           ;interrupts.c: 223: preset_blink = 0;
 19729  02DB  01C4               	clrf	_preset_blink^(0+384)
 19730  02DC                     i1l6775:	
 19731                           
 19732                           ;interrupts.c: 224: LATBbits.LATB1 = 0;
 19733  02DC  0022               	movlb	2	; select bank2
 19734  02DD  108D               	bcf	13,1	;volatile
 19735  02DE                     i1l163:	
 19736  02DE  0020               	movlb	0	; select bank0
 19737  02DF  0842               	movf	??_isr+8,w
 19738  02E0  00FF               	movwf	127
 19739  02E1  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19740  02E2  0009               	retfie
 19741  02E3                     __end_of_isr:	
 19742                           
 19743                           	psect	text72
 19744  24FB                     __ptext72:	
 19745 ;; *************** function i1_set_leds_top *****************
 19746 ;; Defined at:
 19747 ;;		line 16 in file "LEDs.c"
 19748 ;; Parameters:    Size  Location     Type
 19749 ;;  x               2    0[COMMON] int 
 19750 ;;  ledState        2    2[COMMON] int 
 19751 ;; Auto vars:     Size  Location     Type
 19752 ;;		None
 19753 ;; Return value:  Size  Location     Type
 19754 ;;                  1    wreg      void 
 19755 ;; Registers used:
 19756 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19757 ;; Tracked objects:
 19758 ;;		On entry : 0/0
 19759 ;;		On exit  : 0/0
 19760 ;;		Unchanged: 0/0
 19761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19762 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19765 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19766 ;;Total ram usage:        4 bytes
 19767 ;; Hardware stack levels used:    1
 19768 ;; This function calls:
 19769 ;;		Nothing
 19770 ;; This function is called by:
 19771 ;;		_isr
 19772 ;; This function uses a non-reentrant model
 19773 ;;
 19774                           
 19775                           
 19776                           ;psect for function i1_set_leds_top
 19777  24FB                     i1_set_leds_top:	
 19778                           
 19779                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 19780                           
 19781                           ;incstack = 0
 19782                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 19783  24FB  0027               	movlb	7	; select bank7
 19784  24FC  100C               	bcf	12,0	;volatile
 19785                           
 19786                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 19787  24FD  108C               	bcf	12,1	;volatile
 19788                           
 19789                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 19790  24FE  110C               	bcf	12,2	;volatile
 19791                           
 19792                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 19793  24FF  118C               	bcf	12,3	;volatile
 19794                           
 19795                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 19796  2500  120C               	bcf	12,4	;volatile
 19797                           
 19798                           ;LEDs.c: 22: switch (x) {
 19799  2501  2D26               	goto	i1l6653
 19800  2502                     i1l6641:	
 19801                           ;LEDs.c: 23: case 1:
 19802                           
 19803                           
 19804                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 19805  2502  0C72               	rrf	i1set_leds_top@ledState,w
 19806  2503  1C03               	skipc
 19807  2504  100C               	bcf	12,0	;volatile
 19808  2505  1803               	skipnc
 19809  2506  140C               	bsf	12,0	;volatile
 19810                           
 19811                           ;LEDs.c: 25: break;
 19812  2507  0008               	return
 19813  2508                     i1l6643:	
 19814                           ;LEDs.c: 26: case 2:
 19815                           
 19816                           
 19817                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 19818  2508  0C72               	rrf	i1set_leds_top@ledState,w
 19819  2509  1C03               	skipc
 19820  250A  108C               	bcf	12,1	;volatile
 19821  250B  1803               	skipnc
 19822  250C  148C               	bsf	12,1	;volatile
 19823                           
 19824                           ;LEDs.c: 28: break;
 19825  250D  0008               	return
 19826  250E                     i1l6645:	
 19827                           ;LEDs.c: 29: case 3:
 19828                           
 19829                           
 19830                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 19831  250E  0C72               	rrf	i1set_leds_top@ledState,w
 19832  250F  1C03               	skipc
 19833  2510  110C               	bcf	12,2	;volatile
 19834  2511  1803               	skipnc
 19835  2512  150C               	bsf	12,2	;volatile
 19836                           
 19837                           ;LEDs.c: 31: break;
 19838  2513  0008               	return
 19839  2514                     i1l6647:	
 19840                           ;LEDs.c: 32: case 4:
 19841                           
 19842                           
 19843                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 19844  2514  0C72               	rrf	i1set_leds_top@ledState,w
 19845  2515  1C03               	skipc
 19846  2516  118C               	bcf	12,3	;volatile
 19847  2517  1803               	skipnc
 19848  2518  158C               	bsf	12,3	;volatile
 19849                           
 19850                           ;LEDs.c: 34: break;
 19851  2519  0008               	return
 19852  251A                     i1l6649:	
 19853                           ;LEDs.c: 35: case 5:
 19854                           
 19855                           
 19856                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 19857  251A  0C72               	rrf	i1set_leds_top@ledState,w
 19858  251B  1C03               	skipc
 19859  251C  120C               	bcf	12,4	;volatile
 19860  251D  1803               	skipnc
 19861  251E  160C               	bsf	12,4	;volatile
 19862                           
 19863                           ;LEDs.c: 39: break;
 19864                           
 19865                           ;LEDs.c: 38: case 6:
 19866                           
 19867                           ;LEDs.c: 37: break;
 19868  251F  0008               	return
 19869  2520                     i1l792:	
 19870                           ;LEDs.c: 40: case 100:
 19871                           
 19872                           
 19873                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 19874  2520  140C               	bsf	12,0	;volatile
 19875                           
 19876                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 19877  2521  148C               	bsf	12,1	;volatile
 19878                           
 19879                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 19880  2522  150C               	bsf	12,2	;volatile
 19881                           
 19882                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 19883  2523  158C               	bsf	12,3	;volatile
 19884                           
 19885                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 19886  2524  160C               	bsf	12,4	;volatile
 19887                           
 19888                           ;LEDs.c: 47: }
 19889                           
 19890                           ;LEDs.c: 46: break;
 19891  2525  0008               	return
 19892  2526                     i1l6653:	
 19893                           
 19894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19895                           ; Switch size 1, requested type "space"
 19896                           ; Number of cases is 1, Range of values is 0 to 0
 19897                           ; switch strategies available:
 19898                           ; Name         Instructions Cycles
 19899                           ; simple_byte            4     3 (average)
 19900                           ; direct_byte            8     6 (fixed)
 19901                           ; jumptable            260     6 (fixed)
 19902                           ;	Chosen strategy is simple_byte
 19903  2526  0871               	movf	i1set_leds_top@x+1,w
 19904  2527  3A00               	xorlw	0	; case 0
 19905  2528  1903               	skipnz
 19906  2529  2D2B               	goto	i1l9465
 19907  252A  2D42               	goto	i1l793
 19908  252B                     i1l9465:	
 19909                           
 19910                           ; Switch size 1, requested type "space"
 19911                           ; Number of cases is 7, Range of values is 1 to 100
 19912                           ; switch strategies available:
 19913                           ; Name         Instructions Cycles
 19914                           ; simple_byte           22    12 (average)
 19915                           ; direct_byte          209     9 (fixed)
 19916                           ; jumptable            263     9 (fixed)
 19917                           ;	Chosen strategy is simple_byte
 19918  252B  0870               	movf	i1set_leds_top@x,w
 19919  252C  3A01               	xorlw	1	; case 1
 19920  252D  1903               	skipnz
 19921  252E  2D02               	goto	i1l6641
 19922  252F  3A03               	xorlw	3	; case 2
 19923  2530  1903               	skipnz
 19924  2531  2D08               	goto	i1l6643
 19925  2532  3A01               	xorlw	1	; case 3
 19926  2533  1903               	skipnz
 19927  2534  2D0E               	goto	i1l6645
 19928  2535  3A07               	xorlw	7	; case 4
 19929  2536  1903               	skipnz
 19930  2537  2D14               	goto	i1l6647
 19931  2538  3A01               	xorlw	1	; case 5
 19932  2539  1903               	skipnz
 19933  253A  2D1A               	goto	i1l6649
 19934  253B  3A03               	xorlw	3	; case 6
 19935  253C  1903               	skipnz
 19936  253D  2D42               	goto	i1l793
 19937  253E  3A62               	xorlw	98	; case 100
 19938  253F  1903               	skipnz
 19939  2540  2D20               	goto	i1l792
 19940  2541  2D42               	goto	i1l793
 19941  2542                     i1l793:	
 19942  2542  0008               	return
 19943  2543                     __end_ofi1_set_leds_top:	
 19944                           
 19945                           	psect	text73
 19946  2436                     __ptext73:	
 19947 ;; *************** function _modulation *****************
 19948 ;; Defined at:
 19949 ;;		line 222 in file "user.c"
 19950 ;; Parameters:    Size  Location     Type
 19951 ;;  x               4   14[BANK0 ] long 
 19952 ;;  y               4   18[BANK0 ] long 
 19953 ;; Auto vars:     Size  Location     Type
 19954 ;;		None
 19955 ;; Return value:  Size  Location     Type
 19956 ;;                  4   14[BANK0 ] long 
 19957 ;; Registers used:
 19958 ;;		wreg, status,2, status,0, pclath, cstack
 19959 ;; Tracked objects:
 19960 ;;		On entry : 0/0
 19961 ;;		On exit  : 0/0
 19962 ;;		Unchanged: 0/0
 19963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19964 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19966 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19967 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19968 ;;Total ram usage:       12 bytes
 19969 ;; Hardware stack levels used:    1
 19970 ;; Hardware stack levels required when called:    1
 19971 ;; This function calls:
 19972 ;;		i1___aldiv
 19973 ;;		i1___lmul
 19974 ;; This function is called by:
 19975 ;;		_isr
 19976 ;; This function uses a non-reentrant model
 19977 ;;
 19978                           
 19979                           
 19980                           ;psect for function _modulation
 19981  2436                     _modulation:	
 19982                           
 19983                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 19984                           
 19985                           ;incstack = 0
 19986                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 19987  2436  3000               	movlw	0
 19988  2437  0020               	movlb	0	; select bank0
 19989  2438  00A3               	movwf	i1___aldiv@divisor+3
 19990  2439  3000               	movlw	0
 19991  243A  00A2               	movwf	i1___aldiv@divisor+2
 19992  243B  3003               	movlw	3
 19993  243C  00A1               	movwf	i1___aldiv@divisor+1
 19994  243D  30E8               	movlw	232
 19995  243E  00A0               	movwf	i1___aldiv@divisor
 19996  243F  300C               	movlw	12
 19997  2440  00B6               	movwf	??_modulation
 19998  2441  30F2               	movlw	242
 19999  2442  00B7               	movwf	??_modulation+1
 20000  2443  3001               	movlw	1
 20001  2444  00B8               	movwf	??_modulation+2
 20002  2445  3000               	movlw	0
 20003  2446  00B9               	movwf	??_modulation+3
 20004  2447  0835               	movf	modulation@y+3,w
 20005  2448  00F3               	movwf	i1___lmul@multiplier+3
 20006  2449  0834               	movf	modulation@y+2,w
 20007  244A  00F2               	movwf	i1___lmul@multiplier+2
 20008  244B  0833               	movf	modulation@y+1,w
 20009  244C  00F1               	movwf	i1___lmul@multiplier+1
 20010  244D  0832               	movf	modulation@y,w
 20011  244E  00F0               	movwf	i1___lmul@multiplier
 20012  244F  0831               	movf	modulation@x+3,w
 20013  2450  00F7               	movwf	i1___lmul@multiplicand+3
 20014  2451  0830               	movf	modulation@x+2,w
 20015  2452  00F6               	movwf	i1___lmul@multiplicand+2
 20016  2453  082F               	movf	modulation@x+1,w
 20017  2454  00F5               	movwf	i1___lmul@multiplicand+1
 20018  2455  082E               	movf	modulation@x,w
 20019  2456  00F4               	movwf	i1___lmul@multiplicand
 20020  2457  31A1  215B  31A4   	fcall	i1___lmul
 20021  245A  0870               	movf	?i1___lmul,w
 20022  245B  0020               	movlb	0	; select bank0
 20023  245C  07B6               	addwf	??_modulation,f
 20024  245D  0871               	movf	?i1___lmul+1,w
 20025  245E  3DB7               	addwfc	??_modulation+1,f
 20026  245F  0872               	movf	?i1___lmul+2,w
 20027  2460  3DB8               	addwfc	??_modulation+2,f
 20028  2461  0873               	movf	?i1___lmul+3,w
 20029  2462  3DB9               	addwfc	??_modulation+3,f
 20030  2463  0839               	movf	??_modulation+3,w
 20031  2464  00A7               	movwf	i1___aldiv@dividend+3
 20032  2465  0838               	movf	??_modulation+2,w
 20033  2466  00A6               	movwf	i1___aldiv@dividend+2
 20034  2467  0837               	movf	??_modulation+1,w
 20035  2468  00A5               	movwf	i1___aldiv@dividend+1
 20036  2469  0836               	movf	??_modulation,w
 20037  246A  00A4               	movwf	i1___aldiv@dividend
 20038  246B  3198  204C         	fcall	i1___aldiv
 20039  246D  0020               	movlb	0	; select bank0
 20040  246E  0823               	movf	?i1___aldiv+3,w
 20041  246F  00B1               	movwf	?_modulation+3
 20042  2470  0822               	movf	?i1___aldiv+2,w
 20043  2471  00B0               	movwf	?_modulation+2
 20044  2472  0821               	movf	?i1___aldiv+1,w
 20045  2473  00AF               	movwf	?_modulation+1
 20046  2474  0820               	movf	?i1___aldiv,w
 20047  2475  00AE               	movwf	?_modulation
 20048  2476  0008               	return
 20049  2477                     __end_of_modulation:	
 20050                           
 20051                           	psect	text74
 20052  215B                     __ptext74:	
 20053 ;; *************** function i1___lmul *****************
 20054 ;; Defined at:
 20055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20056 ;; Parameters:    Size  Location     Type
 20057 ;;  multiplier      4    0[COMMON] unsigned long 
 20058 ;;  multiplicand    4    4[COMMON] unsigned long 
 20059 ;; Auto vars:     Size  Location     Type
 20060 ;;  __lmul          4    8[COMMON] unsigned long 
 20061 ;; Return value:  Size  Location     Type
 20062 ;;                  4    0[COMMON] unsigned long 
 20063 ;; Registers used:
 20064 ;;		wreg, status,2, status,0
 20065 ;; Tracked objects:
 20066 ;;		On entry : 0/0
 20067 ;;		On exit  : 0/0
 20068 ;;		Unchanged: 0/0
 20069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20070 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20071 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20073 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20074 ;;Total ram usage:       12 bytes
 20075 ;; Hardware stack levels used:    1
 20076 ;; This function calls:
 20077 ;;		Nothing
 20078 ;; This function is called by:
 20079 ;;		_modulation
 20080 ;; This function uses a non-reentrant model
 20081 ;;
 20082                           
 20083                           
 20084                           ;psect for function i1___lmul
 20085  215B                     i1___lmul:	
 20086                           
 20087                           ;incstack = 0
 20088                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20089  215B  3000               	movlw	0
 20090  215C  00FB               	movwf	i1___lmul@product+3
 20091  215D  3000               	movlw	0
 20092  215E  00FA               	movwf	i1___lmul@product+2
 20093  215F  3000               	movlw	0
 20094  2160  00F9               	movwf	i1___lmul@product+1
 20095  2161  3000               	movlw	0
 20096  2162  00F8               	movwf	i1___lmul@product
 20097  2163                     i1l5919:	
 20098  2163  1C70               	btfss	i1___lmul@multiplier,0
 20099  2164  296D               	goto	i1l5923
 20100  2165  0874               	movf	i1___lmul@multiplicand,w
 20101  2166  07F8               	addwf	i1___lmul@product,f
 20102  2167  0875               	movf	i1___lmul@multiplicand+1,w
 20103  2168  3DF9               	addwfc	i1___lmul@product+1,f
 20104  2169  0876               	movf	i1___lmul@multiplicand+2,w
 20105  216A  3DFA               	addwfc	i1___lmul@product+2,f
 20106  216B  0877               	movf	i1___lmul@multiplicand+3,w
 20107  216C  3DFB               	addwfc	i1___lmul@product+3,f
 20108  216D                     i1l5923:	
 20109  216D  3001               	movlw	1
 20110  216E                     u515_25:	
 20111  216E  35F4               	lslf	i1___lmul@multiplicand,f
 20112  216F  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20113  2170  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20114  2171  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20115  2172  0B89               	decfsz	9,f
 20116  2173  296E               	goto	u515_25
 20117  2174  3001               	movlw	1
 20118  2175                     u516_25:	
 20119  2175  36F3               	lsrf	i1___lmul@multiplier+3,f
 20120  2176  0CF2               	rrf	i1___lmul@multiplier+2,f
 20121  2177  0CF1               	rrf	i1___lmul@multiplier+1,f
 20122  2178  0CF0               	rrf	i1___lmul@multiplier,f
 20123  2179  0B89               	decfsz	9,f
 20124  217A  2975               	goto	u516_25
 20125  217B  0873               	movf	i1___lmul@multiplier+3,w
 20126  217C  0472               	iorwf	i1___lmul@multiplier+2,w
 20127  217D  0471               	iorwf	i1___lmul@multiplier+1,w
 20128  217E  0470               	iorwf	i1___lmul@multiplier,w
 20129  217F  1D03               	skipz
 20130  2180  2963               	goto	i1l5919
 20131  2181  087B               	movf	i1___lmul@product+3,w
 20132  2182  00F3               	movwf	?i1___lmul+3
 20133  2183  087A               	movf	i1___lmul@product+2,w
 20134  2184  00F2               	movwf	?i1___lmul+2
 20135  2185  0879               	movf	i1___lmul@product+1,w
 20136  2186  00F1               	movwf	?i1___lmul+1
 20137  2187  0878               	movf	i1___lmul@product,w
 20138  2188  00F0               	movwf	?i1___lmul
 20139  2189  0008               	return
 20140  218A                     __end_ofi1___lmul:	
 20141                           
 20142                           	psect	text75
 20143  184C                     __ptext75:	
 20144 ;; *************** function i1___aldiv *****************
 20145 ;; Defined at:
 20146 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20147 ;; Parameters:    Size  Location     Type
 20148 ;;  divisor         4    0[BANK0 ] long 
 20149 ;;  dividend        4    4[BANK0 ] long 
 20150 ;; Auto vars:     Size  Location     Type
 20151 ;;  __aldiv         4   10[BANK0 ] long 
 20152 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20153 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20154 ;; Return value:  Size  Location     Type
 20155 ;;                  4    0[BANK0 ] long 
 20156 ;; Registers used:
 20157 ;;		wreg, status,2, status,0
 20158 ;; Tracked objects:
 20159 ;;		On entry : 0/0
 20160 ;;		On exit  : 0/0
 20161 ;;		Unchanged: 0/0
 20162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20163 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20164 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20166 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20167 ;;Total ram usage:       15 bytes
 20168 ;; Hardware stack levels used:    1
 20169 ;; This function calls:
 20170 ;;		Nothing
 20171 ;; This function is called by:
 20172 ;;		_modulation
 20173 ;; This function uses a non-reentrant model
 20174 ;;
 20175                           
 20176                           
 20177                           ;psect for function i1___aldiv
 20178  184C                     i1___aldiv:	
 20179                           
 20180                           ;incstack = 0
 20181                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20182  184C  0020               	movlb	0	; select bank0
 20183  184D  01A9               	clrf	i1___aldiv@sign
 20184  184E  1FA3               	btfss	i1___aldiv@divisor+3,7
 20185  184F  285D               	goto	i1l1999
 20186  1850  09A0               	comf	i1___aldiv@divisor,f
 20187  1851  09A1               	comf	i1___aldiv@divisor+1,f
 20188  1852  09A2               	comf	i1___aldiv@divisor+2,f
 20189  1853  09A3               	comf	i1___aldiv@divisor+3,f
 20190  1854  0AA0               	incf	i1___aldiv@divisor,f
 20191  1855  1903               	skipnz
 20192  1856  0AA1               	incf	i1___aldiv@divisor+1,f
 20193  1857  1903               	skipnz
 20194  1858  0AA2               	incf	i1___aldiv@divisor+2,f
 20195  1859  1903               	skipnz
 20196  185A  0AA3               	incf	i1___aldiv@divisor+3,f
 20197  185B  01A9               	clrf	i1___aldiv@sign
 20198  185C  0AA9               	incf	i1___aldiv@sign,f
 20199  185D                     i1l1999:	
 20200  185D  1FA7               	btfss	i1___aldiv@dividend+3,7
 20201  185E  286E               	goto	i1l5941
 20202  185F  09A4               	comf	i1___aldiv@dividend,f
 20203  1860  09A5               	comf	i1___aldiv@dividend+1,f
 20204  1861  09A6               	comf	i1___aldiv@dividend+2,f
 20205  1862  09A7               	comf	i1___aldiv@dividend+3,f
 20206  1863  0AA4               	incf	i1___aldiv@dividend,f
 20207  1864  1903               	skipnz
 20208  1865  0AA5               	incf	i1___aldiv@dividend+1,f
 20209  1866  1903               	skipnz
 20210  1867  0AA6               	incf	i1___aldiv@dividend+2,f
 20211  1868  1903               	skipnz
 20212  1869  0AA7               	incf	i1___aldiv@dividend+3,f
 20213  186A  3001               	movlw	1
 20214  186B  00FC               	movwf	??i1___aldiv
 20215  186C  087C               	movf	??i1___aldiv,w
 20216  186D  06A9               	xorwf	i1___aldiv@sign,f
 20217  186E                     i1l5941:	
 20218  186E  3000               	movlw	0
 20219  186F  00AD               	movwf	i1___aldiv@quotient+3
 20220  1870  3000               	movlw	0
 20221  1871  00AC               	movwf	i1___aldiv@quotient+2
 20222  1872  3000               	movlw	0
 20223  1873  00AB               	movwf	i1___aldiv@quotient+1
 20224  1874  3000               	movlw	0
 20225  1875  00AA               	movwf	i1___aldiv@quotient
 20226  1876  0823               	movf	i1___aldiv@divisor+3,w
 20227  1877  0422               	iorwf	i1___aldiv@divisor+2,w
 20228  1878  0421               	iorwf	i1___aldiv@divisor+1,w
 20229  1879  0420               	iorwf	i1___aldiv@divisor,w
 20230  187A  1903               	skipnz
 20231  187B  28B7               	goto	i1l5963
 20232  187C  01A8               	clrf	i1___aldiv@counter
 20233  187D  0AA8               	incf	i1___aldiv@counter,f
 20234  187E                     i1l5949:	
 20235  187E  1BA3               	btfsc	i1___aldiv@divisor+3,7
 20236  187F  288C               	goto	i1l5951
 20237  1880  3001               	movlw	1
 20238  1881                     u521_25:	
 20239  1881  35A0               	lslf	i1___aldiv@divisor,f
 20240  1882  0DA1               	rlf	i1___aldiv@divisor+1,f
 20241  1883  0DA2               	rlf	i1___aldiv@divisor+2,f
 20242  1884  0DA3               	rlf	i1___aldiv@divisor+3,f
 20243  1885  0B89               	decfsz	9,f
 20244  1886  2881               	goto	u521_25
 20245  1887  3001               	movlw	1
 20246  1888  00FC               	movwf	??i1___aldiv
 20247  1889  087C               	movf	??i1___aldiv,w
 20248  188A  07A8               	addwf	i1___aldiv@counter,f
 20249  188B  287E               	goto	i1l5949
 20250  188C                     i1l5951:	
 20251  188C  3001               	movlw	1
 20252  188D                     u523_25:	
 20253  188D  35AA               	lslf	i1___aldiv@quotient,f
 20254  188E  0DAB               	rlf	i1___aldiv@quotient+1,f
 20255  188F  0DAC               	rlf	i1___aldiv@quotient+2,f
 20256  1890  0DAD               	rlf	i1___aldiv@quotient+3,f
 20257  1891  0B89               	decfsz	9,f
 20258  1892  288D               	goto	u523_25
 20259  1893  0823               	movf	i1___aldiv@divisor+3,w
 20260  1894  0227               	subwf	i1___aldiv@dividend+3,w
 20261  1895  1D03               	skipz
 20262  1896  28A1               	goto	u524_25
 20263  1897  0822               	movf	i1___aldiv@divisor+2,w
 20264  1898  0226               	subwf	i1___aldiv@dividend+2,w
 20265  1899  1D03               	skipz
 20266  189A  28A1               	goto	u524_25
 20267  189B  0821               	movf	i1___aldiv@divisor+1,w
 20268  189C  0225               	subwf	i1___aldiv@dividend+1,w
 20269  189D  1D03               	skipz
 20270  189E  28A1               	goto	u524_25
 20271  189F  0820               	movf	i1___aldiv@divisor,w
 20272  18A0  0224               	subwf	i1___aldiv@dividend,w
 20273  18A1                     u524_25:	
 20274  18A1  1C03               	skipc
 20275  18A2  28AC               	goto	i1l5959
 20276  18A3  0820               	movf	i1___aldiv@divisor,w
 20277  18A4  02A4               	subwf	i1___aldiv@dividend,f
 20278  18A5  0821               	movf	i1___aldiv@divisor+1,w
 20279  18A6  3BA5               	subwfb	i1___aldiv@dividend+1,f
 20280  18A7  0822               	movf	i1___aldiv@divisor+2,w
 20281  18A8  3BA6               	subwfb	i1___aldiv@dividend+2,f
 20282  18A9  0823               	movf	i1___aldiv@divisor+3,w
 20283  18AA  3BA7               	subwfb	i1___aldiv@dividend+3,f
 20284  18AB  142A               	bsf	i1___aldiv@quotient,0
 20285  18AC                     i1l5959:	
 20286  18AC  3001               	movlw	1
 20287  18AD                     u525_25:	
 20288  18AD  36A3               	lsrf	i1___aldiv@divisor+3,f
 20289  18AE  0CA2               	rrf	i1___aldiv@divisor+2,f
 20290  18AF  0CA1               	rrf	i1___aldiv@divisor+1,f
 20291  18B0  0CA0               	rrf	i1___aldiv@divisor,f
 20292  18B1  0B89               	decfsz	9,f
 20293  18B2  28AD               	goto	u525_25
 20294  18B3  3001               	movlw	1
 20295  18B4  02A8               	subwf	i1___aldiv@counter,f
 20296  18B5  1D03               	btfss	3,2
 20297  18B6  288C               	goto	i1l5951
 20298  18B7                     i1l5963:	
 20299  18B7  0829               	movf	i1___aldiv@sign,w
 20300  18B8  1903               	btfsc	3,2
 20301  18B9  28C5               	goto	i1l5967
 20302  18BA  09AA               	comf	i1___aldiv@quotient,f
 20303  18BB  09AB               	comf	i1___aldiv@quotient+1,f
 20304  18BC  09AC               	comf	i1___aldiv@quotient+2,f
 20305  18BD  09AD               	comf	i1___aldiv@quotient+3,f
 20306  18BE  0AAA               	incf	i1___aldiv@quotient,f
 20307  18BF  1903               	skipnz
 20308  18C0  0AAB               	incf	i1___aldiv@quotient+1,f
 20309  18C1  1903               	skipnz
 20310  18C2  0AAC               	incf	i1___aldiv@quotient+2,f
 20311  18C3  1903               	skipnz
 20312  18C4  0AAD               	incf	i1___aldiv@quotient+3,f
 20313  18C5                     i1l5967:	
 20314  18C5  082D               	movf	i1___aldiv@quotient+3,w
 20315  18C6  00A3               	movwf	?i1___aldiv+3
 20316  18C7  082C               	movf	i1___aldiv@quotient+2,w
 20317  18C8  00A2               	movwf	?i1___aldiv+2
 20318  18C9  082B               	movf	i1___aldiv@quotient+1,w
 20319  18CA  00A1               	movwf	?i1___aldiv+1
 20320  18CB  082A               	movf	i1___aldiv@quotient,w
 20321  18CC  00A0               	movwf	?i1___aldiv
 20322  18CD  0008               	return
 20323  18CE                     __end_ofi1___aldiv:	
 20324                           
 20325                           	psect	text76
 20326  2673                     __ptext76:	
 20327 ;; *************** function ___awdiv *****************
 20328 ;; Defined at:
 20329 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20330 ;; Parameters:    Size  Location     Type
 20331 ;;  divisor         2    0[COMMON] int 
 20332 ;;  dividend        2    2[COMMON] int 
 20333 ;; Auto vars:     Size  Location     Type
 20334 ;;  quotient        2    7[COMMON] int 
 20335 ;;  sign            1    6[COMMON] unsigned char 
 20336 ;;  counter         1    5[COMMON] unsigned char 
 20337 ;; Return value:  Size  Location     Type
 20338 ;;                  2    0[COMMON] int 
 20339 ;; Registers used:
 20340 ;;		wreg, status,2, status,0
 20341 ;; Tracked objects:
 20342 ;;		On entry : 0/0
 20343 ;;		On exit  : 0/0
 20344 ;;		Unchanged: 0/0
 20345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20347 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20348 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20349 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20350 ;;Total ram usage:        9 bytes
 20351 ;; Hardware stack levels used:    1
 20352 ;; This function calls:
 20353 ;;		Nothing
 20354 ;; This function is called by:
 20355 ;;		_isr
 20356 ;;		_USARTWriteInt
 20357 ;; This function uses a non-reentrant model
 20358 ;;
 20359                           
 20360                           
 20361                           ;psect for function ___awdiv
 20362  2673                     ___awdiv:	
 20363                           
 20364                           ;incstack = 0
 20365                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20366  2673  01F6               	clrf	___awdiv@sign
 20367  2674  1FF1               	btfss	___awdiv@divisor+1,7
 20368  2675  2E7D               	goto	i1l6603
 20369  2676  09F0               	comf	___awdiv@divisor,f
 20370  2677  09F1               	comf	___awdiv@divisor+1,f
 20371  2678  0AF0               	incf	___awdiv@divisor,f
 20372  2679  1903               	skipnz
 20373  267A  0AF1               	incf	___awdiv@divisor+1,f
 20374  267B  01F6               	clrf	___awdiv@sign
 20375  267C  0AF6               	incf	___awdiv@sign,f
 20376  267D                     i1l6603:	
 20377  267D  1FF3               	btfss	___awdiv@dividend+1,7
 20378  267E  2E88               	goto	i1l6609
 20379  267F  09F2               	comf	___awdiv@dividend,f
 20380  2680  09F3               	comf	___awdiv@dividend+1,f
 20381  2681  0AF2               	incf	___awdiv@dividend,f
 20382  2682  1903               	skipnz
 20383  2683  0AF3               	incf	___awdiv@dividend+1,f
 20384  2684  3001               	movlw	1
 20385  2685  00F4               	movwf	??___awdiv
 20386  2686  0874               	movf	??___awdiv,w
 20387  2687  06F6               	xorwf	___awdiv@sign,f
 20388  2688                     i1l6609:	
 20389  2688  01F7               	clrf	___awdiv@quotient
 20390  2689  01F8               	clrf	___awdiv@quotient+1
 20391  268A  0870               	movf	___awdiv@divisor,w
 20392  268B  0471               	iorwf	___awdiv@divisor+1,w
 20393  268C  1903               	btfsc	3,2
 20394  268D  2EB7               	goto	i1l6631
 20395  268E  01F5               	clrf	___awdiv@counter
 20396  268F  0AF5               	incf	___awdiv@counter,f
 20397  2690                     i1l6619:	
 20398  2690  1BF1               	btfsc	___awdiv@divisor+1,7
 20399  2691  2E9C               	goto	i1l6621
 20400  2692  3001               	movlw	1
 20401  2693                     u635_25:	
 20402  2693  35F0               	lslf	___awdiv@divisor,f
 20403  2694  0DF1               	rlf	___awdiv@divisor+1,f
 20404  2695  0B89               	decfsz	9,f
 20405  2696  2E93               	goto	u635_25
 20406  2697  3001               	movlw	1
 20407  2698  00F4               	movwf	??___awdiv
 20408  2699  0874               	movf	??___awdiv,w
 20409  269A  07F5               	addwf	___awdiv@counter,f
 20410  269B  2E90               	goto	i1l6619
 20411  269C                     i1l6621:	
 20412  269C  3001               	movlw	1
 20413  269D                     u637_25:	
 20414  269D  35F7               	lslf	___awdiv@quotient,f
 20415  269E  0DF8               	rlf	___awdiv@quotient+1,f
 20416  269F  0B89               	decfsz	9,f
 20417  26A0  2E9D               	goto	u637_25
 20418  26A1  0871               	movf	___awdiv@divisor+1,w
 20419  26A2  0273               	subwf	___awdiv@dividend+1,w
 20420  26A3  1D03               	skipz
 20421  26A4  2EA7               	goto	u638_25
 20422  26A5  0870               	movf	___awdiv@divisor,w
 20423  26A6  0272               	subwf	___awdiv@dividend,w
 20424  26A7                     u638_25:	
 20425  26A7  1C03               	skipc
 20426  26A8  2EAE               	goto	i1l6627
 20427  26A9  0870               	movf	___awdiv@divisor,w
 20428  26AA  02F2               	subwf	___awdiv@dividend,f
 20429  26AB  0871               	movf	___awdiv@divisor+1,w
 20430  26AC  3BF3               	subwfb	___awdiv@dividend+1,f
 20431  26AD  1477               	bsf	___awdiv@quotient,0
 20432  26AE                     i1l6627:	
 20433  26AE  3001               	movlw	1
 20434  26AF                     u639_25:	
 20435  26AF  36F1               	lsrf	___awdiv@divisor+1,f
 20436  26B0  0CF0               	rrf	___awdiv@divisor,f
 20437  26B1  0B89               	decfsz	9,f
 20438  26B2  2EAF               	goto	u639_25
 20439  26B3  3001               	movlw	1
 20440  26B4  02F5               	subwf	___awdiv@counter,f
 20441  26B5  1D03               	btfss	3,2
 20442  26B6  2E9C               	goto	i1l6621
 20443  26B7                     i1l6631:	
 20444  26B7  0876               	movf	___awdiv@sign,w
 20445  26B8  1903               	btfsc	3,2
 20446  26B9  2EBF               	goto	i1l6635
 20447  26BA  09F7               	comf	___awdiv@quotient,f
 20448  26BB  09F8               	comf	___awdiv@quotient+1,f
 20449  26BC  0AF7               	incf	___awdiv@quotient,f
 20450  26BD  1903               	skipnz
 20451  26BE  0AF8               	incf	___awdiv@quotient+1,f
 20452  26BF                     i1l6635:	
 20453  26BF  0878               	movf	___awdiv@quotient+1,w
 20454  26C0  00F1               	movwf	?___awdiv+1
 20455  26C1  0877               	movf	___awdiv@quotient,w
 20456  26C2  00F0               	movwf	?___awdiv
 20457  26C3  0008               	return
 20458  26C4                     __end_of___awdiv:	
 20459  007E                     btemp	set	126	;btemp
 20460  007E                     int$flags	set	126
 20461  007E                     wtemp	set	126
 20462  007E                     wtemp0	set	126
 20463  0080                     wtemp1	set	128
 20464  0082                     wtemp2	set	130
 20465  0084                     wtemp3	set	132
 20466  0086                     wtemp4	set	134
 20467  0088                     wtemp5	set	136
 20468  007F                     wtemp6	set	127
 20469  007E                     ttemp	set	126
 20470  007E                     ttemp0	set	126
 20471  0081                     ttemp1	set	129
 20472  0084                     ttemp2	set	132
 20473  0087                     ttemp3	set	135
 20474  007F                     ttemp4	set	127
 20475  007E                     ltemp	set	126
 20476  007E                     ltemp0	set	126
 20477  0082                     ltemp1	set	130
 20478  0086                     ltemp2	set	134
 20479  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        47
    BSS         292
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80     14      79
    BANK4            80      9      70
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           30      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  858110
                                              9 BANK3      5     5      0
                                              0 BANK4      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                                7     7      0  159167
                                             48 BANK2      7     7      0
                           ___awtoft
                             ___wmul
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29485
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33820
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30569
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29759
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29543
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   19788
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5650
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  162066
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  151724
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  151773
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  135959
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42410
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75207
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25638
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         9     9      0   91240
                                             51 BANK2      9     9      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   71601
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   16942
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                             14 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18011
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6238
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4488
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      E      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      46      13       87.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     236      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     236      28        0.0%
BANK11              1E      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 13 18:02:53 2017

                     _update_mode 2252                      ___altoft@exp 0134                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0135                  modSaw@inflection 0131                  scaleA100kPot@pwm 01E1  
                    ___awdiv@sign 0076                _topTactile_pressed 01C8        setDoublePressState@f_state 00B8  
             ___wmul@multiplicand 0130                USARTInit@baud_rate 00A0                   _updateSwitchTap 0C1D  
                    ___ftadd@exp1 00CD                      ___ftadd@exp2 00CC                      ___ftadd@sign 00CB  
                             l362 05AC                               l382 220D                               l800 22D1  
                             l801 22D4                               l633 27BC                               l802 22D7  
            __size_of_adc_convert 0013                               l804 22DA                               l805 22FE  
                             l586 2F6E                               l792 26F3                               l793 2717  
                             l962 25A0                               l797 22CB                               l966 25CA  
                             l974 25EA                               l799 22CE                               l978 2618  
                             _GIE 005F                               l997 20BA                               l989 2282  
                             l999 20C0                               _RB1 0069                               _PR2 001B  
    solidring_tactiles@ring_delay 00B4                               _map 1AE3                               _exp 1351  
                             _log 1064                               _isr 0004                               _tap 02A0  
                             _sin 0867                               _pow 06E4                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
             set_subdivision@tmpX 0149           __end_of_set_leds_bottom 22FF                      __CFG_LVP$OFF 0000  
                  i1___aldiv@sign 0029                      ___ftdiv@cntr 00D8                      ___ftdiv@sign 00DD  
                            l1000 20C8                              l1001 20DC                              l1004 1012  
                            l1015 105C                              l2112 0848                              l2113 0850  
                            l2105 0835                              l2136 11D4                              l1432 0CEE  
                            l1418 0C34                              l2308 0708                              l2326 097C  
                            l1712 24ED                              l2196 1A42                              l1923 0FC0  
                            l1944 200B                              ?_map 00DE                              l1897 1AE0  
                            l8021 14DF                              l8031 2108                              l8007 1689  
                            l1999 18DF                              l8033 2118                              l8043 1088  
                            l9003 0414                              ?_exp 0148                              l8301 0938  
                            l8109 148A                              l9013 0472                              ?_log 013E  
                            l7511 22E1                              l9031 0546                              l7441 21CD  
                            l8081 13A7                              l8065 135E                              l8049 109B  
                            l8321 0E3A                              l9017 04A4                              l8403 24C0  
                            l7603 11F8                              l8075 1383                              l9051 062A  
                            l9043 05AE                              l9027 0514                              ?_isr 0070  
                            l8405 24C2                              l8413 24CA                              l7461 0821  
                            l7453 080B                              l7613 1213                              l7541 1816  
                            l7621 2316                              l7701 19EE                              l7437 21C3  
                            l8149 2562                              l8325 0F7C                              l8501 0A78  
                            l8407 24C4                              l7519 2005                              l7543 1826  
                            l8087 13E2                              l8183 0776                              l8175 071C  
                            l8511 0BD6                              l8503 0ABE                              l8263 23A3  
                            l8271 23AE                              l8255 2392                              l9063 06AD  
                            l9055 065C                              l9047 05E0                              l8409 24C6  
                            l7457 0812                              l7553 115D                              l7625 232C  
                            l7721 1A2C                              l8169 0710                              l8337 2372  
                            l8505 0B04                              l8521 0C0A                              l7491 26EB  
                            l7483 26CB                              l7467 083A                              l7459 081C  
                            l7563 1173                              l7643 1EA8                              l8187 0796  
                            l8507 0B4A                              l8515 0BEA                              l7803 22A6  
                            l8363 1900                              l8355 18F0                              l9059 06A6  
                            l7485 26D3                              l7469 0842                              l7581 11A0  
                            l7557 1164                              l7661 1EF9                              l7733 1A53  
                            l8509 0B90                              l8517 0C01                              l8381 1947  
                            l8373 192E                              l8365 190E                              l7487 26DB  
                            l7495 26FA                              l7815 20A2                              l7831 1D6A  
                            l7583 11AA                              l7575 118D                              l7903 2783  
                            l7727 1A39                              l7719 1A1E                              l8391 1A62  
                            l8623 12A2                              l8703 0C29                              l7489 26E3  
                            l7825 1D54                              l7593 11C6                              l7585 11AF  
                            l7673 1F15                              l7665 1F01                              l7649 1EBE  
                            l7729 1A45                              l7745 23CA                              l8289 089C  
                            l7913 1C0C                              l8625 12AA                              l8377 1939  
                            l8545 227F                              l8561 1035                              l8467 27CF  
                            l7595 11D0                              l7587 11B3                              l7923 1C2E  
                            l9451 1F73                              l8651 12DB                              l8619 1290  
                            l8731 0C90                              l8723 0C68                              l8539 2275  
                            l8547 2286                              ?_sin 0145                              l9461 2700  
                            l8469 27D8                              l9453 24D9                              l7853 1DC4  
                            l7845 1DAB                              l7677 1F1D                              l8805 2595  
                            l8493 0A5F                              l8653 12DF                              l8725 0C85  
                            l8709 0C46                              l9463 22E7                              l9455 24DE  
                            l7599 11E6                              l8815 25BC                              l7943 1C76  
                            l7783 2657                              l7775 2633                              l8639 12C6  
                            l8591 1254                              l8567 1041                              l9457 24E3  
                            l7865 2135                              l8921 1F59                              l9449 0BF0  
                            l8745 0CB7                              l8577 1058                              l8569 1046  
                            l9459 24E8                              l7883 1CD4                              l8827 25DF  
                            l7947 1C7E                              l8923 1F5D                              l8931 1F6E  
                            l8499 0A64                              l8683 133A                              l8667 1314  
                            l8659 12FA                              l8587 1241                              l8747 0CBF  
                            l8579 1060                              l7893 1D35                              l8837 2606  
                            l8925 1F63                              l8933 1F87                              l8669 131A  
                            l8677 132E                              l8773 0D3D                              l8765 0D31  
                            l8757 0CE6                              l8749 0CCE                              ?_pow 0155  
                            l7879 1CCC                              l7991 2233                              l8863 1B86  
                            l8927 1F67                              l8919 1F53                              l7983 20D0  
                            l8599 1262                              l8775 0D87                              l8857 1B79  
                            l8939 1FFA                              l8779 0DAD                              l8787 0DEB  
                            l8885 1DFE                              l8973 0388                              l8879 1DEF  
                            l8983 0398                              l8899 195C                              l8989 03A7  
                            _PEIE 005E                              _RCIE 048D                              u8015 1A1F  
                            u7405 0817                              u8205 1DC5                              u8045 1A3A  
                            u8320 2231                              u7425 0830                              u8305 1C37  
                            u7355 21CE                              u7445 083D                              u8165 1D7C  
                            u7525 200C                              u7365 21D5                              u8085 2631  
                            u9125 123A                              u9045 1024                              u8430 13C0  
                            u8175 1D8C                              u7535 2011                              u8095 2655  
                            u9135 124D                              u8440 13C1                              u8185 1DAC  
                            u7705 11A1                              u8195 1DBB                              u7485 0857  
                            u7565 181B                              u8365 210D                              u9165 126C  
                            u7735 11B4                              u9415 0C71                              u7905 1F08  
                            u8545 0767                              u8625 2FF1                              u8650 0934  
                            u7675 118E                              u8475 1481                              u9275 12EB  
                            u8900 27D6                              u8660 0935                              u7765 11C7  
                            u8565 2029                              u8805 192F                              u9525 0CFF  
                            u9445 0C9A                              u7935 1F1E                              u8575 2081  
                            u9535 0D16                              u7945 1F24                              u7865 1ECA  
                            u9705 25FF                              u8585 2383                              u9545 0D46  
                            u7875 1EDA                              u9555 0D5B                              u9645 25B5  
                            u8925 0A49                              u8765 1903                              u9565 0D6F  
                            u8855 20E9                              u7895 1F02                              u8935 0A5D  
                            u8865 20EF                              u7985 19F5                              u8785 190F  
                            u9585 0D8C                              u9905 05C5                              u9825 03F9  
                            u8795 1923                              u9915 05DE                              u9835 0412  
                            u8885 27B5                              u9925 0641                              u9845 0489  
                            u8895 27C8                              u8975 2265                              u9935 065A  
                            u9855 04A2                              u9785 1FF5                              u9865 052B  
                            u9875 0544                              u9885 059B                              u9895 05A7  
              scaleA100kPot@input 0167                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
               _scaleA10kPot$2838 01E4                 _scaleA10kPot$2839 01E7                              _iCnt 01BF  
                            _main 0364                      ___ftpack@arg 00A0                      ___ftpack@exp 00A3  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              indf1 0001                              fsr1l 0006  
                            map@x 00DE                              btemp 007E                              exp@x 0148  
                            log@x 013E                     __CFG_BOREN$ON 0000                              sin@f 0145  
                            sin@y 0149                              ltemp 007E                              pow@x 0155  
                            pow@y 0158                              start 02E3                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 2F22                   _expressModeCnst 01DD  
    updateSwitchTap@tapCntDivisor 00C2      __end_of_setSwitchBypassState 203A                   ?i1_set_leds_top 0070  
                   __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00BC                      ___ftmul@sign 00BD  
                 __end_of_InitApp 21BA                      ___fttol@exp1 012D                             ??_map 00ED  
                           ??_exp 014B                             ??_log 0141                      ___fttol@lval 0129  
                           ??_isr 003A                             ??_sin 0148                             ??_pow 015B  
                 _switchBypass_up 0264         __size_of_initSwitchBypass 000F                   __end_of___aldiv 1950  
                           ?_main 0070                   __end_of___awdiv 26C4                   __end_of___ftadd 122B  
                           _CCPR1 0291                             _CCPR2 0298                             _CCPR3 0311  
                           _CCPR4 0318                             _CCPR5 031C                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 1DE6                   __end_of___ftneg 2F3B                   __end_of___ftmul 1F45  
                 ___awdiv@divisor 0070                   __end_of___ftsub 215B                   __end_of___fttol 1A5C  
                           i1l133 0121                             i1l163 02DE                             i1l155 0255  
                           i1l792 2520                             i1l793 2542                   ___awdiv@counter 0075  
                           _RCREG 0199                             _SPBRG 019B                __end_ofsin@coeff_a 2848  
              __end_ofsin@coeff_b 2854                             _TXREG 019A                             _UQEnd 0064  
             _ConfigureOscillator 2F1A       __size_of_setLongBypassState 0021                  _setPresetDisplay 228A  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 00A4  
                    ___lltoft@exp 00AD             __size_of_calcSinArray 0087                   _switchTap_state 01E0  
               ??_setLongTapState 00A2                     ___awtoft@sign 00AD                             _floor 1C96  
                           _ldexp 1BFF                             _frexp 23B6                             _myBuf 03A0  
                           _errno 0253                     ___ftpack@sign 00A4                             _timer 0060  
                           _trunc 2543                  __end_ofi1___lmul 218A                             sin@x2 014F  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                   __end_of_wait_ms 221C                             pow@yi 0163  
                 scaleA10kPot@pwm 01E1                __size_of_USARTInit 0043                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 25D5  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 0146  
  __size_of_setSwitchBypassRelays 0036     __end_of_setSwitchBypassRelays 2252                       exp@exponent 0152  
            ?_ConfigureOscillator 0070                _updateSwitchBypass 122B                       ldexp@newexp 0141  
         __end_of_updateSwitchTap 0E05                   __initialization 02E5                       log@exponent 0142  
     updateModulationArray@iAngle 0156           _updateSwitchBypassState 07FE                      __end_of_main 06E4  
         __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070            __size_of_scaleA100kPot 0085  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000            ring_tactiles@iLed_1529 00B5  
                 _set_subdivision 1F45                      _calcSinArray 1A5C                            ??_main 01EA  
                   ___fttol@sign1 0128                     ?_scaleA10kPot 0167           __size_of_FLASH_ReadWord 0020  
       setLongBypassState@f_state 00A0        __end_of_solidring_tactiles 2436                  ?_set_leds_bottom 00A0  
                          ?_floor 0136                            ?_ldexp 013E                            ?_frexp 00A0  
                __end_of___altoft 184C                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0072               _baseline_delay_time 0045                  __end_of___awtoft 20B9  
                __end_of___ftpack 0867              ??_updateSwitchBypass 00BC                            ?_trunc 0136  
                __end_of___lltoft 212D                            i1l1999 185D                            i1l6603 267D  
                          i1l6621 269C                            i1l6631 26B7                            i1l6609 2688  
                          i1l6641 2502                            i1l6713 0190                            i1l6721 01AC  
                          i1l6705 016A                            i1l6635 26BF                            i1l6627 26AE  
                          i1l6619 2690                            i1l5923 216D                            i1l6643 2508  
                          i1l6731 01DE                            i1l6707 017A                            i1l5941 186E  
                          i1l6645 250E                            i1l6653 2526                            i1l6741 0207  
                          i1l6717 019B                            i1l6709 017C                            i1l5951 188C  
                          i1l5919 2163                            i1l6647 2514                            i1l6751 0257  
                          i1l6735 01EB                            i1l6719 01AA                            i1l6649 251A  
                          i1l6737 01FA                            i1l5963 18B7                            i1l6771 02D7  
                          i1l6683 010E                            i1l6675 00C6                            i1l5949 187E  
                          i1l6669 00AB                            i1l5967 18C5                            i1l5959 18AC  
                          i1l6775 02DC                            i1l6759 02A9                            i1l9465 252B  
                          _PMADRH 0192                            _PMADRL 0191                            u521_25 1881  
                          _PMDATH 0194                            _PMDATL 0193                            u523_25 188D  
                          u515_25 216E                            _PMCON2 0196                            u524_25 18A1  
                          u516_25 2175                            u525_25 18AD                            u635_25 2693  
                          u644_25 00A2                            u653_23 013D                            u637_25 269D  
                          u662_23 01CE                            u638_25 26A7                            u670_25 02D2  
                          u646_25 00BD                            u639_25 26AF                            u648_23 00DE  
                          u666_23 022F                            u667_25 0244                            u669_25 02B9  
                  _debounce_count 0249                       modSaw@angle 012E                    _debounce_mode1 024B  
                  _debounce_mode2 024D                       modSaw@shift 013F                            _URBuff 0320  
                       ??_InitApp 00A0             ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 2623  
                     modSin@angle 0134                    __CFG_PWRTE$OFF 0000                       modSin@shift 013F  
                          ___ftge 22FF                            ___lmul 21BA                         ??___aldiv 00A8  
                          ___wmul 2002                 _update_selectMode 100B                         ??___awdiv 0074  
                       ??___ftadd 00C7                    __CFG_STVREN$ON 0000                         ??___ftdiv 00D4  
                       ??___ftneg 00C1                         ??___ftmul 00B4                         ??___ftsub 00F0  
                       ??___fttol 0124                       modTri@angle 012E                  __end_of_init_adc 100B  
                          _modSaw 14AA                            _modSin 1654                            _modTri 0E05  
                __end_of_init_pwm 24B8                ?_update_selectMode 0070                       modTri@shift 0137  
                ___awdiv@quotient 0077             __end_of_resetRingLEDs 2FE6                            _tmpVal 0257  
               __end_of_USARTInit 24FB                    ??_scaleA10kPot 00F0                 __end_ofi1___aldiv 18CE  
                          floor@i 013A                            floor@x 0136             ___ftmul@f3_as_product 00B9  
         FLASH_ReadWord@flashAddr 00A0                            sin@sgn 0152                  __end_of_showSave 2F9C  
             ??_update_selectMode 00A7              _getSwitchBypassState 2F1E                         ??_wait_ms 00AE  
            _setSwitchBypassState 201E                            trunc@i 013A                            trunc@x 0136  
                   _scaleA100kPot 1950      __end_of_setExpressionDisplay 2FB4            __size_of_scaleiA10kPot 00AB  
          setLongTapState@f_state 00A0                  modSin@inflection 0137                  __end_ofexp@coeff 281E  
                __end_oflog@coeff 2839           __end_of__initialization 0360                        ___altoft@c 012E  
                      ___ftadd@f1 00C1                        ___ftadd@f2 00C4                        ___ftge@ff1 00A0  
                      ___ftge@ff2 00A3                 _bypass_turning_on 01BE                      eval_poly@res 013B  
                      ___ftdiv@f1 00D1                        ___ftdiv@f2 00CE                        ___ftdiv@f3 00D9  
                  _top_push_state 0051         ??_updateSwitchBypassState 00A2                        ___ftneg@f1 00BE  
             _switchBypass_toggle 0255                        ___awtoft@c 00A8             __end_of_ring_tactiles 2673  
       __end_of_update_selectMode 1064           __end_of_set_subdivision 2000                        ___ftmul@f1 00AE  
                      ___ftmul@f2 00B1                        ___ftsub@f1 0142                        ___ftsub@f2 013F  
                      ___fttol@f1 0120                  ?_updateSwitchTap 0070                      ?_update_mode 0070  
                  __pcstackCOMMON 0070                      __pidataBANK0 2F75                      __pidataBANK3 2FB4  
                    __pidataBANK4 07FA                        ___lltoft@c 00A8                     __end_of_floor 1D3D  
                   __end_of_ldexp 1C96                     __end_of_frexp 23F6                     __end_of_trunc 258B  
                _initSwitchBypass 2F53                         ?i1___lmul 0070             _updateModulationArray 0A36  
                 _doubleTap_state 0065                    _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0  
           ?_setSwitchBypassState 00B6                    ?_scaleA100kPot 0167                           ??_floor 0139  
                         ??_ldexp 0143                           ??_frexp 00A4              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                 i1___aldiv@divisor 0020                 i1___aldiv@counter 0028  
                         ??_trunc 0139                     ?_setPedalMode 0070                        __pbssBANK0 0058  
                      __pbssBANK2 016A                        __pbssBANK3 01A0                        __pbssBANK4 0220  
                      __pbssBANK5 02A0                        __pbssBANK6 0320                        __pbssBANK7 03A0  
              __size_of_eval_poly 0072                  ??i1_set_leds_top 0074                   __CFG_VCAPEN$OFF 0000  
              __size_of_modSawRev 001C                __size_of_modSquare 003D          __end_of_setPresetDisplay 22C4  
                      _delay_time 0049                  _long_press_limit 004F      __size_of_setDoublePressState 003E  
                      _delayfound 0251                        __pmaintext 0364                    _InitializeTaps 20DD  
                         ?___ftge 00A0                           ?___lmul 00A0                           ?___wmul 012E  
  updateModulationArray@thisAngle 0154                        __pintentry 0004                     _scaleiA10kPot 1DE6  
                      _blink_rate 0053                     ??_adc_convert 00A2                         ?___altoft 012E  
                         ?_modSaw 012E                           ?_modSin 0134                           ?_modTri 012E  
                  ___lmul@product 00A8                   _setLongTapState 2FE6                         ?___awtoft 00A8  
                       ?___ftpack 00A0               modSquare@inflection 014B                         ?___lltoft 00A8  
                      ??i1___lmul 0078                    _FLASH_ReadWord 2056   __end_of_updateSwitchBypassState 07FF  
                     modulation@x 002E                       modulation@y 0032                        _ldexp$2638 0145  
                 _debounce_bypass 0247                    ??_setPedalMode 00A7                USARTWriteInt@F3536 0234  
                   _suspend_blink 0069      setSwitchBypassRelays@f_state 00B2                      modSaw@period 0142  
                         _UQFront 007D                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 218A              __end_of_scaleA10kPot 1BFF                      modSin@period 0142  
          __end_of_InitializeTaps 2103                      modSin@tmpVal 0145                     ?_set_leds_top 00A0  
                      _knob1_prev 01CB        __size_of_update_selectMode 0059                        _knob2_prev 01CD  
                      _knob3_prev 01CF                        _knob4_prev 01D1                        _knob5_prev 01D3  
                ?_set_subdivision 013F                         ?_showSave 0070                           ___aldiv 18CE  
                  ?_scaleiA10kPot 0167                   __size_of___ftge 003C                           ___awdiv 2673  
                 __size_of___lmul 0030                           ___ftadd 1135                           ___ftdiv 1D3D  
                         ___ftneg 2F32                        _knob_1_pos 01A8                        _knob_2_pos 01AA  
                 __size_of___wmul 001C                           ___ftmul 1E91                        _knob_3_pos 01AC  
                         ___ftsub 212D                           ___fttol 19D5                        _knob_4_pos 01AE  
                      _knob_5_pos 01B0                 _switchTap_pressed 016C                        ??___altoft 0132  
            _setExpressionDisplay 2F9C            ?_updateModulationArray 0070            __end_of_FLASH_ReadWord 2076  
                 __size_of_modSaw 01AA                   __size_of_modSin 01AC                        ??___awtoft 00AB  
                      ??___ftpack 00A5                   __size_of_modTri 01FB                 __end_of_eval_poly 278A  
              InitializeTaps@itap 00A1                        ??___lltoft 00AC                           __ptext1 100B  
                         __ptext2 2252                           __ptext3 0C1D                           __ptext4 2FE6  
                         __ptext5 18CE                           __ptext6 122B                           __ptext7 2076  
                         __ptext8 2378                           __ptext9 2F88        __end_of_setLongBypassState 2097  
          ??_getSwitchBypassState 00A2                 __end_of_modSawRev 2056                         _T2CONbits 001C  
                _adjust_sub_delay 01BC                      __size_of_map 008B                      __size_of_exp 0159  
                    __size_of_log 00D1                      __size_of_isr 02DF            ??_setSwitchBypassState 00B8  
                    __size_of_sin 01CF                      __size_of_pow 0116               __end_of_adc_convert 2F75  
                    modTri@period 013A                 __end_of_modSquare 2378                   ??_scaleA100kPot 00F0  
                ___aldiv@dividend 00A4                      modTri@tmpVal 013D                           _wait_ms 21EA  
                         clrloop0 2F48              end_of_initialization 0360                           exp@sign 0154  
                      _modulation 2436                           init_ram 2F3B                        ??_init_adc 00A0  
                         initloop 2F3C                        ??_init_pwm 00A0      updateSwitchBypassState@state 00A0  
              _solidring_tactiles 23F6                     _longTap_timer 01B4                     _longTap_state 0054  
                   _longTap_start 016B                    ??_set_leds_top 00A4                 ?_read_top_tactile 0070  
                 ?_InitializeTaps 0070                           pow@sign 0162                 scaleA10kPot@input 0167  
         __end_of_setLongTapState 3000             _setSwitchBypassRelays 221C            i1set_leds_top@ledState 0072  
              ??_read_top_tactile 00B2                         _RCSTAbits 019D                        ??_showSave 00B7  
                _longBypass_timer 01B2                  ___aldiv@quotient 00AB                  _longBypass_state 0066  
                _longBypass_start 016A      __size_of_read_bottom_tactile 004A               ?_solidring_tactiles 0070  
                    __pstringtext 2800         FLASH_ReadWord@GIEBitValue 00A2             ?_setExpressionDisplay 0070  
            __size_of_update_mode 0038                   ?_FLASH_ReadWord 00A0                 _expressionChannel 01DE  
                       _PORTAbits 000C                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010                        _test_timer 0241                         _USARTInit 24B8  
                       _TRISBbits 008D                         _TRISCbits 008E                         _TRISDbits 008F  
                       _TRISEbits 0090                         _TRISFbits 030C                         _TRISGbits 030D  
                       i1___aldiv 184C              ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 2F1E  
                      map@out_max 00EA                        map@out_min 00E7       __size_of_updateSwitchBypass 0126  
        __end_of_initSwitchBypass 2F62                       _CCP1CONbits 0293                       ___ftdiv@exp 00DC  
        __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A                         _TXSTAbits 019E  
            _switchBypass_pressed 01BA                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                   ??_scaleiA10kPot 00F0  
                     _CCP7CONbits 0616                       ___ftmul@exp 00B8                adc_convert@channel 00A3  
                     _CCP8CONbits 0619                       _CCP9CONbits 061C              set_leds_top@ledState 00A2  
                  __end_of___ftge 233B              __end_of_setPedalMode 20DD                    __end_of___lmul 21EA  
                  __end_of___wmul 201E                      _double_timer 01A0                       _adc_convert 2F62  
                  _switchTap_down 01C7                    __end_of_modSaw 1654                    __end_of_modSin 1800  
                  __end_of_modTri 1000                    modSawRev@angle 0145                        floor@expon 013D  
           i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F               start_initialization 02E5  
                      ?_USARTInit 00A0                        eval_poly@d 0137                        eval_poly@n 0139  
                      eval_poly@x 0134             _bottomTactile_pressed 01BD               _setDoublePressState 2378  
                      ldexp@value 013E                        ?i1___aldiv 0020                       __end_of_map 1B6E  
                     __end_of_exp 14AA                       __end_of_log 1135                       __end_of_isr 02E3  
                     __end_of_sin 0A36                       __end_of_pow 07FA             __size_of_scaleA10kPot 0091  
              _adjusted_pot_value 0245                       ?_modulation 002E                scaleiA10kPot@input 0167  
                      frexp@value 00A0            __size_of_resetRingLEDs 001A            ?_setSwitchBypassRelays 00B2  
            ?_setDoublePressState 00B8                  ?_setLongTapState 00A0                 ?_setPresetDisplay 0070  
                        ??___ftge 00A6                          ??___lmul 00A8            ??_setExpressionDisplay 00A4  
                        ??___wmul 00F0                ??_setPresetDisplay 00A4                       __pdataBANK0 0045  
                     __pdataBANK3 01C9                       __pdataBANK4 0262                          ??_modSaw 00F0  
                        ??_modSin 013A                i1___aldiv@dividend 0024                          ??_modTri 00F0  
                   _tap_iteration 01D7          __size_of_updateSwitchTap 01E8                 __size_of___altoft 004B  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                       __pbssBIGRAM 238E  
                    _scaleA10kPot 1B6E                 __size_of___lltoft 002A                     ??_init_timer0 00A0  
                   ??_init_timer2 00A0                       __pbssCOMMON 007D              __end_of_set_leds_top 2718  
                       ___latbits 0003    setExpressionDisplay@ledChannel 00A6                _switchBypass_state 0057  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK2 0120  
                   __pcstackBANK3 01E1                     __pcstackBANK4 0259            __size_of_ring_tactiles 0050  
                  _expSwitchState 01DC                     _delay_counter 024F                  i1___lmul@product 0078  
                scaleiA10kPot@pwm 01E1          ?_updateSwitchBypassState 00A0                        sin@coeff_a 2839  
                      sin@coeff_b 2848                i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043  
                        ?_InitApp 0070             ??_setDoublePressState 00BA                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                         _main$2830 025C                         _main$2831 025F  
                       _main$2829 0259           ??_updateModulationArray 0150                          ?___aldiv 00A0  
               ??_set_leds_bottom 00A2                _currentBypassState 01DA                          ?___awdiv 0070  
                        ?___ftadd 00C1                          ?___ftdiv 00CE                          ?___ftneg 00BE  
                        ?___ftmul 00AE                          ?___ftsub 013F                          ?___fttol 0120  
               __size_of_showSave 0014                _modulation_changed 01C3                _scaleA100kPot$2834 01E4  
              _scaleA100kPot$2835 01E7                     ?_calcSinArray 0070                       _blink_delay 01C9  
             __size_of_modulation 0041                     _resetRingLEDs 2FCC                       _blink_state 01D9  
                       _eval_poly 2718                       ??_USARTInit 00A2                          _CCPTMRS0 029D  
                        _CCPTMRS1 029E                          _CCPTMRS2 029F                       ??i1___aldiv 007C  
                        ?_wait_ms 00AC                         _modSawRev 203A               _read_bottom_tactile 258B  
                  __size_of_floor 00A7                    __size_of_ldexp 0097                    __size_of_frexp 0040  
                       _modSquare 233B                    _presetModeCnst 01DF                    __size_of_trunc 0048  
              _setLongBypassState 2076               __end_of_init_timer0 2F29               __end_of_init_timer2 2F32  
                       _mod_value 01B8                         _mod_timer 01A4                  ??_InitializeTaps 00A0  
                 ___aldiv@divisor 00A0                   ___aldiv@counter 00A9                    _presetSaveMode 0068  
                  ___wmul@product 0132                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 0262  
                       clear_ram0 2F47                         _tap_timer 005C               ?_setLongBypassState 00A0  
                       _tap_total 023D             __size_of_setPedalMode 0024                     set_leds_top@x 00A0  
                        _PIR1bits 0011                     _ring_tactiles 2623                   _longBypass_down 01C0  
                ??_FLASH_ReadWord 00A2                   _longBypass_save 01C1              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048                    ??_calcSinArray 0153         initSwitchBypass@initState 00BA  
                       map@in_max 00E4                         map@in_min 00E1                    ?_resetRingLEDs 0070  
                       _sub_timer 0058                        _ADCON0bits 009D                          i1___lmul 215B  
                      _ADCON1bits 009E          __size_of_set_subdivision 00BB                 ___wmul@multiplier 012E  
                set_subdivision@x 013F                  set_subdivision@y 0141         __size_of_read_top_tactile 004E  
            ??_setLongBypassState 00A2                        ?_eval_poly 0134     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 001C                        ?_modSawRev 0145             __end_of_scaleA100kPot 19D5  
               ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0                        ?_modSquare 0148  
                 modSquare@tmpVal 014E                      _setPedalMode 20B9                 _ReadSavedSettings 278A  
               ?_initSwitchBypass 0070                 ring_tactiles@iLed 00B3                    wait_ms@timeSec 00AC  
              ?_ReadSavedSettings 0070                       _modSaw$2844 0134                       _modSaw$2845 0137  
                     _modSaw$2846 013A                    wait_ms@timemsl 00AE                         frexp@eptr 00A3  
     setSwitchBypassState@f_state 00B6                       _modSin$2842 013C                ??_initSwitchBypass 00BA  
                __size_of_InitApp 0030                    ?_ring_tactiles 0070                         modSaw@mod 013D  
                     _mode1_state 01C2                     ??_update_mode 00A7                       _mode2_state 0067  
           ??_read_bottom_tactile 00B2                       _modTri$2843 0134               updateSwitchTap@iCnt 00C4  
             ??_ReadSavedSettings 00A4                        _APFCONbits 011D                  __size_of___aldiv 0082  
                __size_of___awdiv 0051                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 00A0                  __size_of___ftneg 0009                          ___altoft 1801  
                __size_of___ftmul 00B4                  __size_of___ftsub 002E                  __size_of___fttol 0087  
                        ___awtoft 2097             __size_of_set_leds_top 0054                          ___ftpack 0802  
                        _map$2832 00ED                          ___lltoft 2103            _preset_programmning_on 01C5  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  modTri@inflection 0131  
                set_leds_bottom@x 00A0                          _exp$2606 014F                          _exp$2850 014C  
                     _init_timer0 2F22                       _init_timer2 2F29                _delay_time_changed 01DB  
      __end_of_updateSwitchBypass 1351                          __ptext10 23F6                          __ptext11 2623  
                        __ptext20 203A                          __ptext12 20B9                          __ptext21 14AA  
                        __ptext13 228A                          __ptext30 1BFF                          __ptext22 1F45  
                        __ptext14 2F9C                          __ptext31 2103                          __ptext23 2543  
                        __ptext15 2FCC                          __ptext40 07FE                          __ptext32 25D5  
                        __ptext24 1DE6                          __ptext16 0A36                          __ptext41 2F1E  
                        __ptext33 258B                          __ptext25 1B6E                          __ptext17 0E05  
                        __ptext50 2002                          __ptext42 1A5C                          __ptext34 1AE3  
                        __ptext26 1950                          __ptext18 233B                          __ptext51 1E91  
                        __ptext43 0867                          __ptext35 2F53                          __ptext27 06E4  
                        __ptext19 1654                          __ptext60 278A                          __ptext52 212D  
                        __ptext44 1C96                          __ptext36 201E                          __ptext28 1064  
                        __ptext61 26C4                          __ptext53 1135                          __ptext45 23B6  
                        __ptext37 221C                          __ptext29 1351                          __ptext70 2F1A  
                        __ptext62 22C4                          __ptext54 2F32                          __ptext46 19D5  
                        __ptext38 21EA                          __ptext63 2056                          __ptext55 1D3D  
                        __ptext47 22FF                          __ptext39 21BA                          __ptext72 24FB  
                        __ptext64 20DD                          __ptext56 2097                          __ptext48 1801  
                        __ptext73 2436                          __ptext65 218A                          __ptext57 0802  
                        __ptext49 2718                          __ptext74 215B                          __ptext66 2477  
                        __ptext58 2F62                          __ptext75 184C                          __ptext67 2F29  
                        __ptext59 24B8                          __ptext76 2673                          __ptext68 2F22  
                        __ptext69 1001                          _sin$2849 014C         __end_of_ReadSavedSettings 2800  
                __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040                          _ledState 0239  
                        _pow$2847 015C                          _pow$2848 015F                     _presetChannel 0056  
                    ??_modulation 0036                       _mod_counter 01B6                          _modArray 238E  
         ??_setSwitchBypassRelays 00B4                        trunc@expon 013D                          _init_adc 1001  
                   __size_of_main 0380                          _init_pwm 2477                          _sinArray 2482  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 26C4                          _showSave 2F88  
                        _num_taps 0055                     calcSinArray@x 0157             __end_of_scaleiA10kPot 1E91  
                        int$flags 007E                   ??_resetRingLEDs 00A4                   i1set_leds_top@x 0070  
                  modSquare@angle 0148               __end_of_update_mode 228A                          exp@coeff 2800  
                        _symmetry 01D5               modSawRev@inflection 0148                          log@coeff 281E  
              __end_of_modulation 2477                calcSinArray@iAngle 015B                        _INTCONbits 000B  
                     ??_eval_poly 00F0         __size_of_setPresetDisplay 003A                       _tap_history 0220  
                     ??_modSawRev 014B                 ??_set_subdivision 0143                       ??_modSquare 00F0  
              calcSinArray@tmpVal 0158                          intlevel1 0000              __end_of_calcSinArray 1AE3  
                 _set_leds_bottom 22C4                        _PMCON1bits 0195                   ??_ring_tactiles 00B2  
               __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 01C6                        _OSCCONbits 0099  
                    _preset_blink 01C4                    i1_set_leds_top 24FB    __size_of_updateModulationArray 01E7  
__size_of_updateSwitchBypassState 0001     __end_of_updateModulationArray 0C1D     __size_of_setExpressionDisplay 0018  
              _scaleiA10kPot$2840 01E4                _scaleiA10kPot$2841 01E7          __size_of_setLongTapState 001A  
                _read_top_tactile 25D5                      ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076  
     __end_of_setDoublePressState 23B6                      _CCP10CONbits 061F                 _bottom_push_state 004D  
      setPresetDisplay@ledChannel 00A6            __end_ofi1_set_leds_top 2543  
