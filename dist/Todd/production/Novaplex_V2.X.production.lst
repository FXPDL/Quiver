

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Jan 05 23:57:44 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK7,global,class=CODE,delta=2
     9                           	psect	idataBANK8,global,class=CODE,delta=2
    10                           	psect	idataBANK9,global,class=CODE,delta=2
    11                           	psect	idataBIGRAM,global,class=CODE,delta=2
    12                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    26                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    27                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    28                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    29                           	psect	bssBANK10,global,class=BANK10,space=1,delta=1
    30                           	psect	clrtext,global,class=CODE,delta=2
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    33                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x920,80
    77                           	dabs	1,0x8A0,80
    78                           	dabs	1,0x820,80
    79                           	dabs	1,0x7A0,80
    80                           	dabs	1,0x720,80
    81                           	dabs	1,0x6A0,80
    82                           	dabs	1,0x648,40
    83                           	dabs	1,0x23E8,0,_delayArray
    84                           	dabs	1,0x7E,2
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0110                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018F                     	;# 
   145  0190                     	;# 
   146  0191                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0194                     	;# 
   152  0195                     	;# 
   153  0196                     	;# 
   154  0197                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019A                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019C                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  020D                     	;# 
   179  020F                     	;# 
   180  0210                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  0219                     	;# 
   197  021A                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021D                     	;# 
   201  021E                     	;# 
   202  021F                     	;# 
   203  028C                     	;# 
   204  028D                     	;# 
   205  0291                     	;# 
   206  0291                     	;# 
   207  0292                     	;# 
   208  0293                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029D                     	;# 
   214  029E                     	;# 
   215  029F                     	;# 
   216  030C                     	;# 
   217  030D                     	;# 
   218  0311                     	;# 
   219  0311                     	;# 
   220  0312                     	;# 
   221  0313                     	;# 
   222  0318                     	;# 
   223  0318                     	;# 
   224  0319                     	;# 
   225  031A                     	;# 
   226  031C                     	;# 
   227  031C                     	;# 
   228  031D                     	;# 
   229  031E                     	;# 
   230  038C                     	;# 
   231  038D                     	;# 
   232  0394                     	;# 
   233  0395                     	;# 
   234  0396                     	;# 
   235  040C                     	;# 
   236  040D                     	;# 
   237  0411                     	;# 
   238  0411                     	;# 
   239  0412                     	;# 
   240  0413                     	;# 
   241  0414                     	;# 
   242  0415                     	;# 
   243  0416                     	;# 
   244  0417                     	;# 
   245  0418                     	;# 
   246  0418                     	;# 
   247  0419                     	;# 
   248  041A                     	;# 
   249  041B                     	;# 
   250  041C                     	;# 
   251  041D                     	;# 
   252  041E                     	;# 
   253  048D                     	;# 
   254  0491                     	;# 
   255  0491                     	;# 
   256  0492                     	;# 
   257  0492                     	;# 
   258  0493                     	;# 
   259  0493                     	;# 
   260  0493                     	;# 
   261  0494                     	;# 
   262  0494                     	;# 
   263  0495                     	;# 
   264  0495                     	;# 
   265  0496                     	;# 
   266  0496                     	;# 
   267  0497                     	;# 
   268  0497                     	;# 
   269  0595                     	;# 
   270  0596                     	;# 
   271  0597                     	;# 
   272  059C                     	;# 
   273  059D                     	;# 
   274  059E                     	;# 
   275  0611                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0614                     	;# 
   281  0615                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061D                     	;# 
   292  061D                     	;# 
   293  061E                     	;# 
   294  061F                     	;# 
   295  0FE4                     	;# 
   296  0FE5                     	;# 
   297  0FE6                     	;# 
   298  0FE7                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEB                     	;# 
   303  0FED                     	;# 
   304  0FEE                     	;# 
   305  0FEF                     	;# 
   306  0000                     	;# 
   307  0001                     	;# 
   308  0002                     	;# 
   309  0003                     	;# 
   310  0004                     	;# 
   311  0005                     	;# 
   312  0006                     	;# 
   313  0007                     	;# 
   314  0008                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000F                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0014                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0016                     	;# 
   330  0017                     	;# 
   331  0018                     	;# 
   332  0019                     	;# 
   333  001A                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  008C                     	;# 
   337  008D                     	;# 
   338  008E                     	;# 
   339  008F                     	;# 
   340  0090                     	;# 
   341  0091                     	;# 
   342  0092                     	;# 
   343  0093                     	;# 
   344  0094                     	;# 
   345  0095                     	;# 
   346  0096                     	;# 
   347  0097                     	;# 
   348  0099                     	;# 
   349  009A                     	;# 
   350  009B                     	;# 
   351  009B                     	;# 
   352  009C                     	;# 
   353  009D                     	;# 
   354  009E                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0110                     	;# 
   360  0116                     	;# 
   361  0117                     	;# 
   362  011D                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  018F                     	;# 
   366  0190                     	;# 
   367  0191                     	;# 
   368  0191                     	;# 
   369  0192                     	;# 
   370  0193                     	;# 
   371  0193                     	;# 
   372  0194                     	;# 
   373  0195                     	;# 
   374  0196                     	;# 
   375  0197                     	;# 
   376  0199                     	;# 
   377  0199                     	;# 
   378  0199                     	;# 
   379  019A                     	;# 
   380  019A                     	;# 
   381  019A                     	;# 
   382  019B                     	;# 
   383  019B                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019C                     	;# 
   388  019C                     	;# 
   389  019C                     	;# 
   390  019D                     	;# 
   391  019D                     	;# 
   392  019D                     	;# 
   393  019E                     	;# 
   394  019E                     	;# 
   395  019E                     	;# 
   396  019F                     	;# 
   397  019F                     	;# 
   398  019F                     	;# 
   399  020D                     	;# 
   400  020F                     	;# 
   401  0210                     	;# 
   402  0211                     	;# 
   403  0211                     	;# 
   404  0212                     	;# 
   405  0212                     	;# 
   406  0213                     	;# 
   407  0213                     	;# 
   408  0214                     	;# 
   409  0214                     	;# 
   410  0215                     	;# 
   411  0215                     	;# 
   412  0215                     	;# 
   413  0216                     	;# 
   414  0216                     	;# 
   415  0217                     	;# 
   416  0217                     	;# 
   417  0219                     	;# 
   418  021A                     	;# 
   419  021B                     	;# 
   420  021C                     	;# 
   421  021D                     	;# 
   422  021E                     	;# 
   423  021F                     	;# 
   424  028C                     	;# 
   425  028D                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0298                     	;# 
   431  0298                     	;# 
   432  0299                     	;# 
   433  029A                     	;# 
   434  029D                     	;# 
   435  029E                     	;# 
   436  029F                     	;# 
   437  030C                     	;# 
   438  030D                     	;# 
   439  0311                     	;# 
   440  0311                     	;# 
   441  0312                     	;# 
   442  0313                     	;# 
   443  0318                     	;# 
   444  0318                     	;# 
   445  0319                     	;# 
   446  031A                     	;# 
   447  031C                     	;# 
   448  031C                     	;# 
   449  031D                     	;# 
   450  031E                     	;# 
   451  038C                     	;# 
   452  038D                     	;# 
   453  0394                     	;# 
   454  0395                     	;# 
   455  0396                     	;# 
   456  040C                     	;# 
   457  040D                     	;# 
   458  0411                     	;# 
   459  0411                     	;# 
   460  0412                     	;# 
   461  0413                     	;# 
   462  0414                     	;# 
   463  0415                     	;# 
   464  0416                     	;# 
   465  0417                     	;# 
   466  0418                     	;# 
   467  0418                     	;# 
   468  0419                     	;# 
   469  041A                     	;# 
   470  041B                     	;# 
   471  041C                     	;# 
   472  041D                     	;# 
   473  041E                     	;# 
   474  048D                     	;# 
   475  0491                     	;# 
   476  0491                     	;# 
   477  0492                     	;# 
   478  0492                     	;# 
   479  0493                     	;# 
   480  0493                     	;# 
   481  0493                     	;# 
   482  0494                     	;# 
   483  0494                     	;# 
   484  0495                     	;# 
   485  0495                     	;# 
   486  0496                     	;# 
   487  0496                     	;# 
   488  0497                     	;# 
   489  0497                     	;# 
   490  0595                     	;# 
   491  0596                     	;# 
   492  0597                     	;# 
   493  059C                     	;# 
   494  059D                     	;# 
   495  059E                     	;# 
   496  0611                     	;# 
   497  0611                     	;# 
   498  0612                     	;# 
   499  0613                     	;# 
   500  0614                     	;# 
   501  0614                     	;# 
   502  0615                     	;# 
   503  0616                     	;# 
   504  0617                     	;# 
   505  0617                     	;# 
   506  0618                     	;# 
   507  0619                     	;# 
   508  061A                     	;# 
   509  061A                     	;# 
   510  061B                     	;# 
   511  061C                     	;# 
   512  061D                     	;# 
   513  061D                     	;# 
   514  061E                     	;# 
   515  061F                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE9                     	;# 
   522  0FEA                     	;# 
   523  0FEB                     	;# 
   524  0FED                     	;# 
   525  0FEE                     	;# 
   526  0FEF                     	;# 
   527  0000                     	;# 
   528  0001                     	;# 
   529  0002                     	;# 
   530  0003                     	;# 
   531  0004                     	;# 
   532  0005                     	;# 
   533  0006                     	;# 
   534  0007                     	;# 
   535  0008                     	;# 
   536  0009                     	;# 
   537  000A                     	;# 
   538  000B                     	;# 
   539  000C                     	;# 
   540  000D                     	;# 
   541  000E                     	;# 
   542  000F                     	;# 
   543  0010                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0014                     	;# 
   548  0015                     	;# 
   549  0016                     	;# 
   550  0016                     	;# 
   551  0017                     	;# 
   552  0018                     	;# 
   553  0019                     	;# 
   554  001A                     	;# 
   555  001B                     	;# 
   556  001C                     	;# 
   557  008C                     	;# 
   558  008D                     	;# 
   559  008E                     	;# 
   560  008F                     	;# 
   561  0090                     	;# 
   562  0091                     	;# 
   563  0092                     	;# 
   564  0093                     	;# 
   565  0094                     	;# 
   566  0095                     	;# 
   567  0096                     	;# 
   568  0097                     	;# 
   569  0099                     	;# 
   570  009A                     	;# 
   571  009B                     	;# 
   572  009B                     	;# 
   573  009C                     	;# 
   574  009D                     	;# 
   575  009E                     	;# 
   576  010C                     	;# 
   577  010D                     	;# 
   578  010E                     	;# 
   579  010F                     	;# 
   580  0110                     	;# 
   581  0116                     	;# 
   582  0117                     	;# 
   583  011D                     	;# 
   584  018C                     	;# 
   585  018D                     	;# 
   586  018F                     	;# 
   587  0190                     	;# 
   588  0191                     	;# 
   589  0191                     	;# 
   590  0192                     	;# 
   591  0193                     	;# 
   592  0193                     	;# 
   593  0194                     	;# 
   594  0195                     	;# 
   595  0196                     	;# 
   596  0197                     	;# 
   597  0199                     	;# 
   598  0199                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019A                     	;# 
   602  019A                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019C                     	;# 
   609  019C                     	;# 
   610  019C                     	;# 
   611  019D                     	;# 
   612  019D                     	;# 
   613  019D                     	;# 
   614  019E                     	;# 
   615  019E                     	;# 
   616  019E                     	;# 
   617  019F                     	;# 
   618  019F                     	;# 
   619  019F                     	;# 
   620  020D                     	;# 
   621  020F                     	;# 
   622  0210                     	;# 
   623  0211                     	;# 
   624  0211                     	;# 
   625  0212                     	;# 
   626  0212                     	;# 
   627  0213                     	;# 
   628  0213                     	;# 
   629  0214                     	;# 
   630  0214                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0216                     	;# 
   635  0216                     	;# 
   636  0217                     	;# 
   637  0217                     	;# 
   638  0219                     	;# 
   639  021A                     	;# 
   640  021B                     	;# 
   641  021C                     	;# 
   642  021D                     	;# 
   643  021E                     	;# 
   644  021F                     	;# 
   645  028C                     	;# 
   646  028D                     	;# 
   647  0291                     	;# 
   648  0291                     	;# 
   649  0292                     	;# 
   650  0293                     	;# 
   651  0298                     	;# 
   652  0298                     	;# 
   653  0299                     	;# 
   654  029A                     	;# 
   655  029D                     	;# 
   656  029E                     	;# 
   657  029F                     	;# 
   658  030C                     	;# 
   659  030D                     	;# 
   660  0311                     	;# 
   661  0311                     	;# 
   662  0312                     	;# 
   663  0313                     	;# 
   664  0318                     	;# 
   665  0318                     	;# 
   666  0319                     	;# 
   667  031A                     	;# 
   668  031C                     	;# 
   669  031C                     	;# 
   670  031D                     	;# 
   671  031E                     	;# 
   672  038C                     	;# 
   673  038D                     	;# 
   674  0394                     	;# 
   675  0395                     	;# 
   676  0396                     	;# 
   677  040C                     	;# 
   678  040D                     	;# 
   679  0411                     	;# 
   680  0411                     	;# 
   681  0412                     	;# 
   682  0413                     	;# 
   683  0414                     	;# 
   684  0415                     	;# 
   685  0416                     	;# 
   686  0417                     	;# 
   687  0418                     	;# 
   688  0418                     	;# 
   689  0419                     	;# 
   690  041A                     	;# 
   691  041B                     	;# 
   692  041C                     	;# 
   693  041D                     	;# 
   694  041E                     	;# 
   695  048D                     	;# 
   696  0491                     	;# 
   697  0491                     	;# 
   698  0492                     	;# 
   699  0492                     	;# 
   700  0493                     	;# 
   701  0493                     	;# 
   702  0493                     	;# 
   703  0494                     	;# 
   704  0494                     	;# 
   705  0495                     	;# 
   706  0495                     	;# 
   707  0496                     	;# 
   708  0496                     	;# 
   709  0497                     	;# 
   710  0497                     	;# 
   711  0595                     	;# 
   712  0596                     	;# 
   713  0597                     	;# 
   714  059C                     	;# 
   715  059D                     	;# 
   716  059E                     	;# 
   717  0611                     	;# 
   718  0611                     	;# 
   719  0612                     	;# 
   720  0613                     	;# 
   721  0614                     	;# 
   722  0614                     	;# 
   723  0615                     	;# 
   724  0616                     	;# 
   725  0617                     	;# 
   726  0617                     	;# 
   727  0618                     	;# 
   728  0619                     	;# 
   729  061A                     	;# 
   730  061A                     	;# 
   731  061B                     	;# 
   732  061C                     	;# 
   733  061D                     	;# 
   734  061D                     	;# 
   735  061E                     	;# 
   736  061F                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE9                     	;# 
   743  0FEA                     	;# 
   744  0FEB                     	;# 
   745  0FED                     	;# 
   746  0FEE                     	;# 
   747  0FEF                     	;# 
   748  0000                     	;# 
   749  0001                     	;# 
   750  0002                     	;# 
   751  0003                     	;# 
   752  0004                     	;# 
   753  0005                     	;# 
   754  0006                     	;# 
   755  0007                     	;# 
   756  0008                     	;# 
   757  0009                     	;# 
   758  000A                     	;# 
   759  000B                     	;# 
   760  000C                     	;# 
   761  000D                     	;# 
   762  000E                     	;# 
   763  000F                     	;# 
   764  0010                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0014                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  008F                     	;# 
   782  0090                     	;# 
   783  0091                     	;# 
   784  0092                     	;# 
   785  0093                     	;# 
   786  0094                     	;# 
   787  0095                     	;# 
   788  0096                     	;# 
   789  0097                     	;# 
   790  0099                     	;# 
   791  009A                     	;# 
   792  009B                     	;# 
   793  009B                     	;# 
   794  009C                     	;# 
   795  009D                     	;# 
   796  009E                     	;# 
   797  010C                     	;# 
   798  010D                     	;# 
   799  010E                     	;# 
   800  010F                     	;# 
   801  0110                     	;# 
   802  0116                     	;# 
   803  0117                     	;# 
   804  011D                     	;# 
   805  018C                     	;# 
   806  018D                     	;# 
   807  018F                     	;# 
   808  0190                     	;# 
   809  0191                     	;# 
   810  0191                     	;# 
   811  0192                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0197                     	;# 
   818  0199                     	;# 
   819  0199                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019A                     	;# 
   823  019A                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019C                     	;# 
   830  019C                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019D                     	;# 
   834  019D                     	;# 
   835  019E                     	;# 
   836  019E                     	;# 
   837  019E                     	;# 
   838  019F                     	;# 
   839  019F                     	;# 
   840  019F                     	;# 
   841  020D                     	;# 
   842  020F                     	;# 
   843  0210                     	;# 
   844  0211                     	;# 
   845  0211                     	;# 
   846  0212                     	;# 
   847  0212                     	;# 
   848  0213                     	;# 
   849  0213                     	;# 
   850  0214                     	;# 
   851  0214                     	;# 
   852  0215                     	;# 
   853  0215                     	;# 
   854  0215                     	;# 
   855  0216                     	;# 
   856  0216                     	;# 
   857  0217                     	;# 
   858  0217                     	;# 
   859  0219                     	;# 
   860  021A                     	;# 
   861  021B                     	;# 
   862  021C                     	;# 
   863  021D                     	;# 
   864  021E                     	;# 
   865  021F                     	;# 
   866  028C                     	;# 
   867  028D                     	;# 
   868  0291                     	;# 
   869  0291                     	;# 
   870  0292                     	;# 
   871  0293                     	;# 
   872  0298                     	;# 
   873  0298                     	;# 
   874  0299                     	;# 
   875  029A                     	;# 
   876  029D                     	;# 
   877  029E                     	;# 
   878  029F                     	;# 
   879  030C                     	;# 
   880  030D                     	;# 
   881  0311                     	;# 
   882  0311                     	;# 
   883  0312                     	;# 
   884  0313                     	;# 
   885  0318                     	;# 
   886  0318                     	;# 
   887  0319                     	;# 
   888  031A                     	;# 
   889  031C                     	;# 
   890  031C                     	;# 
   891  031D                     	;# 
   892  031E                     	;# 
   893  038C                     	;# 
   894  038D                     	;# 
   895  0394                     	;# 
   896  0395                     	;# 
   897  0396                     	;# 
   898  040C                     	;# 
   899  040D                     	;# 
   900  0411                     	;# 
   901  0411                     	;# 
   902  0412                     	;# 
   903  0413                     	;# 
   904  0414                     	;# 
   905  0415                     	;# 
   906  0416                     	;# 
   907  0417                     	;# 
   908  0418                     	;# 
   909  0418                     	;# 
   910  0419                     	;# 
   911  041A                     	;# 
   912  041B                     	;# 
   913  041C                     	;# 
   914  041D                     	;# 
   915  041E                     	;# 
   916  048D                     	;# 
   917  0491                     	;# 
   918  0491                     	;# 
   919  0492                     	;# 
   920  0492                     	;# 
   921  0493                     	;# 
   922  0493                     	;# 
   923  0493                     	;# 
   924  0494                     	;# 
   925  0494                     	;# 
   926  0495                     	;# 
   927  0495                     	;# 
   928  0496                     	;# 
   929  0496                     	;# 
   930  0497                     	;# 
   931  0497                     	;# 
   932  0595                     	;# 
   933  0596                     	;# 
   934  0597                     	;# 
   935  059C                     	;# 
   936  059D                     	;# 
   937  059E                     	;# 
   938  0611                     	;# 
   939  0611                     	;# 
   940  0612                     	;# 
   941  0613                     	;# 
   942  0614                     	;# 
   943  0614                     	;# 
   944  0615                     	;# 
   945  0616                     	;# 
   946  0617                     	;# 
   947  0617                     	;# 
   948  0618                     	;# 
   949  0619                     	;# 
   950  061A                     	;# 
   951  061A                     	;# 
   952  061B                     	;# 
   953  061C                     	;# 
   954  061D                     	;# 
   955  061D                     	;# 
   956  061E                     	;# 
   957  061F                     	;# 
   958  0FE4                     	;# 
   959  0FE5                     	;# 
   960  0FE6                     	;# 
   961  0FE7                     	;# 
   962  0FE8                     	;# 
   963  0FE9                     	;# 
   964  0FEA                     	;# 
   965  0FEB                     	;# 
   966  0FED                     	;# 
   967  0FEE                     	;# 
   968  0FEF                     	;# 
   969  0000                     	;# 
   970  0001                     	;# 
   971  0002                     	;# 
   972  0003                     	;# 
   973  0004                     	;# 
   974  0005                     	;# 
   975  0006                     	;# 
   976  0007                     	;# 
   977  0008                     	;# 
   978  0009                     	;# 
   979  000A                     	;# 
   980  000B                     	;# 
   981  000C                     	;# 
   982  000D                     	;# 
   983  000E                     	;# 
   984  000F                     	;# 
   985  0010                     	;# 
   986  0011                     	;# 
   987  0012                     	;# 
   988  0013                     	;# 
   989  0014                     	;# 
   990  0015                     	;# 
   991  0016                     	;# 
   992  0016                     	;# 
   993  0017                     	;# 
   994  0018                     	;# 
   995  0019                     	;# 
   996  001A                     	;# 
   997  001B                     	;# 
   998  001C                     	;# 
   999  008C                     	;# 
  1000  008D                     	;# 
  1001  008E                     	;# 
  1002  008F                     	;# 
  1003  0090                     	;# 
  1004  0091                     	;# 
  1005  0092                     	;# 
  1006  0093                     	;# 
  1007  0094                     	;# 
  1008  0095                     	;# 
  1009  0096                     	;# 
  1010  0097                     	;# 
  1011  0099                     	;# 
  1012  009A                     	;# 
  1013  009B                     	;# 
  1014  009B                     	;# 
  1015  009C                     	;# 
  1016  009D                     	;# 
  1017  009E                     	;# 
  1018  010C                     	;# 
  1019  010D                     	;# 
  1020  010E                     	;# 
  1021  010F                     	;# 
  1022  0110                     	;# 
  1023  0116                     	;# 
  1024  0117                     	;# 
  1025  011D                     	;# 
  1026  018C                     	;# 
  1027  018D                     	;# 
  1028  018F                     	;# 
  1029  0190                     	;# 
  1030  0191                     	;# 
  1031  0191                     	;# 
  1032  0192                     	;# 
  1033  0193                     	;# 
  1034  0193                     	;# 
  1035  0194                     	;# 
  1036  0195                     	;# 
  1037  0196                     	;# 
  1038  0197                     	;# 
  1039  0199                     	;# 
  1040  0199                     	;# 
  1041  0199                     	;# 
  1042  019A                     	;# 
  1043  019A                     	;# 
  1044  019A                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019C                     	;# 
  1051  019C                     	;# 
  1052  019C                     	;# 
  1053  019D                     	;# 
  1054  019D                     	;# 
  1055  019D                     	;# 
  1056  019E                     	;# 
  1057  019E                     	;# 
  1058  019E                     	;# 
  1059  019F                     	;# 
  1060  019F                     	;# 
  1061  019F                     	;# 
  1062  020D                     	;# 
  1063  020F                     	;# 
  1064  0210                     	;# 
  1065  0211                     	;# 
  1066  0211                     	;# 
  1067  0212                     	;# 
  1068  0212                     	;# 
  1069  0213                     	;# 
  1070  0213                     	;# 
  1071  0214                     	;# 
  1072  0214                     	;# 
  1073  0215                     	;# 
  1074  0215                     	;# 
  1075  0215                     	;# 
  1076  0216                     	;# 
  1077  0216                     	;# 
  1078  0217                     	;# 
  1079  0217                     	;# 
  1080  0219                     	;# 
  1081  021A                     	;# 
  1082  021B                     	;# 
  1083  021C                     	;# 
  1084  021D                     	;# 
  1085  021E                     	;# 
  1086  021F                     	;# 
  1087  028C                     	;# 
  1088  028D                     	;# 
  1089  0291                     	;# 
  1090  0291                     	;# 
  1091  0292                     	;# 
  1092  0293                     	;# 
  1093  0298                     	;# 
  1094  0298                     	;# 
  1095  0299                     	;# 
  1096  029A                     	;# 
  1097  029D                     	;# 
  1098  029E                     	;# 
  1099  029F                     	;# 
  1100  030C                     	;# 
  1101  030D                     	;# 
  1102  0311                     	;# 
  1103  0311                     	;# 
  1104  0312                     	;# 
  1105  0313                     	;# 
  1106  0318                     	;# 
  1107  0318                     	;# 
  1108  0319                     	;# 
  1109  031A                     	;# 
  1110  031C                     	;# 
  1111  031C                     	;# 
  1112  031D                     	;# 
  1113  031E                     	;# 
  1114  038C                     	;# 
  1115  038D                     	;# 
  1116  0394                     	;# 
  1117  0395                     	;# 
  1118  0396                     	;# 
  1119  040C                     	;# 
  1120  040D                     	;# 
  1121  0411                     	;# 
  1122  0411                     	;# 
  1123  0412                     	;# 
  1124  0413                     	;# 
  1125  0414                     	;# 
  1126  0415                     	;# 
  1127  0416                     	;# 
  1128  0417                     	;# 
  1129  0418                     	;# 
  1130  0418                     	;# 
  1131  0419                     	;# 
  1132  041A                     	;# 
  1133  041B                     	;# 
  1134  041C                     	;# 
  1135  041D                     	;# 
  1136  041E                     	;# 
  1137  048D                     	;# 
  1138  0491                     	;# 
  1139  0491                     	;# 
  1140  0492                     	;# 
  1141  0492                     	;# 
  1142  0493                     	;# 
  1143  0493                     	;# 
  1144  0493                     	;# 
  1145  0494                     	;# 
  1146  0494                     	;# 
  1147  0495                     	;# 
  1148  0495                     	;# 
  1149  0496                     	;# 
  1150  0496                     	;# 
  1151  0497                     	;# 
  1152  0497                     	;# 
  1153  0595                     	;# 
  1154  0596                     	;# 
  1155  0597                     	;# 
  1156  059C                     	;# 
  1157  059D                     	;# 
  1158  059E                     	;# 
  1159  0611                     	;# 
  1160  0611                     	;# 
  1161  0612                     	;# 
  1162  0613                     	;# 
  1163  0614                     	;# 
  1164  0614                     	;# 
  1165  0615                     	;# 
  1166  0616                     	;# 
  1167  0617                     	;# 
  1168  0617                     	;# 
  1169  0618                     	;# 
  1170  0619                     	;# 
  1171  061A                     	;# 
  1172  061A                     	;# 
  1173  061B                     	;# 
  1174  061C                     	;# 
  1175  061D                     	;# 
  1176  061D                     	;# 
  1177  061E                     	;# 
  1178  061F                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0008                     	;# 
  1199  0009                     	;# 
  1200  000A                     	;# 
  1201  000B                     	;# 
  1202  000C                     	;# 
  1203  000D                     	;# 
  1204  000E                     	;# 
  1205  000F                     	;# 
  1206  0010                     	;# 
  1207  0011                     	;# 
  1208  0012                     	;# 
  1209  0013                     	;# 
  1210  0014                     	;# 
  1211  0015                     	;# 
  1212  0016                     	;# 
  1213  0016                     	;# 
  1214  0017                     	;# 
  1215  0018                     	;# 
  1216  0019                     	;# 
  1217  001A                     	;# 
  1218  001B                     	;# 
  1219  001C                     	;# 
  1220  008C                     	;# 
  1221  008D                     	;# 
  1222  008E                     	;# 
  1223  008F                     	;# 
  1224  0090                     	;# 
  1225  0091                     	;# 
  1226  0092                     	;# 
  1227  0093                     	;# 
  1228  0094                     	;# 
  1229  0095                     	;# 
  1230  0096                     	;# 
  1231  0097                     	;# 
  1232  0099                     	;# 
  1233  009A                     	;# 
  1234  009B                     	;# 
  1235  009B                     	;# 
  1236  009C                     	;# 
  1237  009D                     	;# 
  1238  009E                     	;# 
  1239  010C                     	;# 
  1240  010D                     	;# 
  1241  010E                     	;# 
  1242  010F                     	;# 
  1243  0110                     	;# 
  1244  0116                     	;# 
  1245  0117                     	;# 
  1246  011D                     	;# 
  1247  018C                     	;# 
  1248  018D                     	;# 
  1249  018F                     	;# 
  1250  0190                     	;# 
  1251  0191                     	;# 
  1252  0191                     	;# 
  1253  0192                     	;# 
  1254  0193                     	;# 
  1255  0193                     	;# 
  1256  0194                     	;# 
  1257  0195                     	;# 
  1258  0196                     	;# 
  1259  0197                     	;# 
  1260  0199                     	;# 
  1261  0199                     	;# 
  1262  0199                     	;# 
  1263  019A                     	;# 
  1264  019A                     	;# 
  1265  019A                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019B                     	;# 
  1270  019B                     	;# 
  1271  019C                     	;# 
  1272  019C                     	;# 
  1273  019C                     	;# 
  1274  019D                     	;# 
  1275  019D                     	;# 
  1276  019D                     	;# 
  1277  019E                     	;# 
  1278  019E                     	;# 
  1279  019E                     	;# 
  1280  019F                     	;# 
  1281  019F                     	;# 
  1282  019F                     	;# 
  1283  020D                     	;# 
  1284  020F                     	;# 
  1285  0210                     	;# 
  1286  0211                     	;# 
  1287  0211                     	;# 
  1288  0212                     	;# 
  1289  0212                     	;# 
  1290  0213                     	;# 
  1291  0213                     	;# 
  1292  0214                     	;# 
  1293  0214                     	;# 
  1294  0215                     	;# 
  1295  0215                     	;# 
  1296  0215                     	;# 
  1297  0216                     	;# 
  1298  0216                     	;# 
  1299  0217                     	;# 
  1300  0217                     	;# 
  1301  0219                     	;# 
  1302  021A                     	;# 
  1303  021B                     	;# 
  1304  021C                     	;# 
  1305  021D                     	;# 
  1306  021E                     	;# 
  1307  021F                     	;# 
  1308  028C                     	;# 
  1309  028D                     	;# 
  1310  0291                     	;# 
  1311  0291                     	;# 
  1312  0292                     	;# 
  1313  0293                     	;# 
  1314  0298                     	;# 
  1315  0298                     	;# 
  1316  0299                     	;# 
  1317  029A                     	;# 
  1318  029D                     	;# 
  1319  029E                     	;# 
  1320  029F                     	;# 
  1321  030C                     	;# 
  1322  030D                     	;# 
  1323  0311                     	;# 
  1324  0311                     	;# 
  1325  0312                     	;# 
  1326  0313                     	;# 
  1327  0318                     	;# 
  1328  0318                     	;# 
  1329  0319                     	;# 
  1330  031A                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  038C                     	;# 
  1336  038D                     	;# 
  1337  0394                     	;# 
  1338  0395                     	;# 
  1339  0396                     	;# 
  1340  040C                     	;# 
  1341  040D                     	;# 
  1342  0411                     	;# 
  1343  0411                     	;# 
  1344  0412                     	;# 
  1345  0413                     	;# 
  1346  0414                     	;# 
  1347  0415                     	;# 
  1348  0416                     	;# 
  1349  0417                     	;# 
  1350  0418                     	;# 
  1351  0418                     	;# 
  1352  0419                     	;# 
  1353  041A                     	;# 
  1354  041B                     	;# 
  1355  041C                     	;# 
  1356  041D                     	;# 
  1357  041E                     	;# 
  1358  048D                     	;# 
  1359  0491                     	;# 
  1360  0491                     	;# 
  1361  0492                     	;# 
  1362  0492                     	;# 
  1363  0493                     	;# 
  1364  0493                     	;# 
  1365  0493                     	;# 
  1366  0494                     	;# 
  1367  0494                     	;# 
  1368  0495                     	;# 
  1369  0495                     	;# 
  1370  0496                     	;# 
  1371  0496                     	;# 
  1372  0497                     	;# 
  1373  0497                     	;# 
  1374  0595                     	;# 
  1375  0596                     	;# 
  1376  0597                     	;# 
  1377  059C                     	;# 
  1378  059D                     	;# 
  1379  059E                     	;# 
  1380  0611                     	;# 
  1381  0611                     	;# 
  1382  0612                     	;# 
  1383  0613                     	;# 
  1384  0614                     	;# 
  1385  0614                     	;# 
  1386  0615                     	;# 
  1387  0616                     	;# 
  1388  0617                     	;# 
  1389  0617                     	;# 
  1390  0618                     	;# 
  1391  0619                     	;# 
  1392  061A                     	;# 
  1393  061A                     	;# 
  1394  061B                     	;# 
  1395  061C                     	;# 
  1396  061D                     	;# 
  1397  061D                     	;# 
  1398  061E                     	;# 
  1399  061F                     	;# 
  1400  0FE4                     	;# 
  1401  0FE5                     	;# 
  1402  0FE6                     	;# 
  1403  0FE7                     	;# 
  1404  0FE8                     	;# 
  1405  0FE9                     	;# 
  1406  0FEA                     	;# 
  1407  0FEB                     	;# 
  1408  0FED                     	;# 
  1409  0FEE                     	;# 
  1410  0FEF                     	;# 
  1411  0000                     	;# 
  1412  0001                     	;# 
  1413  0002                     	;# 
  1414  0003                     	;# 
  1415  0004                     	;# 
  1416  0005                     	;# 
  1417  0006                     	;# 
  1418  0007                     	;# 
  1419  0008                     	;# 
  1420  0009                     	;# 
  1421  000A                     	;# 
  1422  000B                     	;# 
  1423  000C                     	;# 
  1424  000D                     	;# 
  1425  000E                     	;# 
  1426  000F                     	;# 
  1427  0010                     	;# 
  1428  0011                     	;# 
  1429  0012                     	;# 
  1430  0013                     	;# 
  1431  0014                     	;# 
  1432  0015                     	;# 
  1433  0016                     	;# 
  1434  0016                     	;# 
  1435  0017                     	;# 
  1436  0018                     	;# 
  1437  0019                     	;# 
  1438  001A                     	;# 
  1439  001B                     	;# 
  1440  001C                     	;# 
  1441  008C                     	;# 
  1442  008D                     	;# 
  1443  008E                     	;# 
  1444  008F                     	;# 
  1445  0090                     	;# 
  1446  0091                     	;# 
  1447  0092                     	;# 
  1448  0093                     	;# 
  1449  0094                     	;# 
  1450  0095                     	;# 
  1451  0096                     	;# 
  1452  0097                     	;# 
  1453  0099                     	;# 
  1454  009A                     	;# 
  1455  009B                     	;# 
  1456  009B                     	;# 
  1457  009C                     	;# 
  1458  009D                     	;# 
  1459  009E                     	;# 
  1460  010C                     	;# 
  1461  010D                     	;# 
  1462  010E                     	;# 
  1463  010F                     	;# 
  1464  0110                     	;# 
  1465  0116                     	;# 
  1466  0117                     	;# 
  1467  011D                     	;# 
  1468  018C                     	;# 
  1469  018D                     	;# 
  1470  018F                     	;# 
  1471  0190                     	;# 
  1472  0191                     	;# 
  1473  0191                     	;# 
  1474  0192                     	;# 
  1475  0193                     	;# 
  1476  0193                     	;# 
  1477  0194                     	;# 
  1478  0195                     	;# 
  1479  0196                     	;# 
  1480  0197                     	;# 
  1481  0199                     	;# 
  1482  0199                     	;# 
  1483  0199                     	;# 
  1484  019A                     	;# 
  1485  019A                     	;# 
  1486  019A                     	;# 
  1487  019B                     	;# 
  1488  019B                     	;# 
  1489  019B                     	;# 
  1490  019B                     	;# 
  1491  019B                     	;# 
  1492  019C                     	;# 
  1493  019C                     	;# 
  1494  019C                     	;# 
  1495  019D                     	;# 
  1496  019D                     	;# 
  1497  019D                     	;# 
  1498  019E                     	;# 
  1499  019E                     	;# 
  1500  019E                     	;# 
  1501  019F                     	;# 
  1502  019F                     	;# 
  1503  019F                     	;# 
  1504  020D                     	;# 
  1505  020F                     	;# 
  1506  0210                     	;# 
  1507  0211                     	;# 
  1508  0211                     	;# 
  1509  0212                     	;# 
  1510  0212                     	;# 
  1511  0213                     	;# 
  1512  0213                     	;# 
  1513  0214                     	;# 
  1514  0214                     	;# 
  1515  0215                     	;# 
  1516  0215                     	;# 
  1517  0215                     	;# 
  1518  0216                     	;# 
  1519  0216                     	;# 
  1520  0217                     	;# 
  1521  0217                     	;# 
  1522  0219                     	;# 
  1523  021A                     	;# 
  1524  021B                     	;# 
  1525  021C                     	;# 
  1526  021D                     	;# 
  1527  021E                     	;# 
  1528  021F                     	;# 
  1529  028C                     	;# 
  1530  028D                     	;# 
  1531  0291                     	;# 
  1532  0291                     	;# 
  1533  0292                     	;# 
  1534  0293                     	;# 
  1535  0298                     	;# 
  1536  0298                     	;# 
  1537  0299                     	;# 
  1538  029A                     	;# 
  1539  029D                     	;# 
  1540  029E                     	;# 
  1541  029F                     	;# 
  1542  030C                     	;# 
  1543  030D                     	;# 
  1544  0311                     	;# 
  1545  0311                     	;# 
  1546  0312                     	;# 
  1547  0313                     	;# 
  1548  0318                     	;# 
  1549  0318                     	;# 
  1550  0319                     	;# 
  1551  031A                     	;# 
  1552  031C                     	;# 
  1553  031C                     	;# 
  1554  031D                     	;# 
  1555  031E                     	;# 
  1556  038C                     	;# 
  1557  038D                     	;# 
  1558  0394                     	;# 
  1559  0395                     	;# 
  1560  0396                     	;# 
  1561  040C                     	;# 
  1562  040D                     	;# 
  1563  0411                     	;# 
  1564  0411                     	;# 
  1565  0412                     	;# 
  1566  0413                     	;# 
  1567  0414                     	;# 
  1568  0415                     	;# 
  1569  0416                     	;# 
  1570  0417                     	;# 
  1571  0418                     	;# 
  1572  0418                     	;# 
  1573  0419                     	;# 
  1574  041A                     	;# 
  1575  041B                     	;# 
  1576  041C                     	;# 
  1577  041D                     	;# 
  1578  041E                     	;# 
  1579  048D                     	;# 
  1580  0491                     	;# 
  1581  0491                     	;# 
  1582  0492                     	;# 
  1583  0492                     	;# 
  1584  0493                     	;# 
  1585  0493                     	;# 
  1586  0493                     	;# 
  1587  0494                     	;# 
  1588  0494                     	;# 
  1589  0495                     	;# 
  1590  0495                     	;# 
  1591  0496                     	;# 
  1592  0496                     	;# 
  1593  0497                     	;# 
  1594  0497                     	;# 
  1595  0595                     	;# 
  1596  0596                     	;# 
  1597  0597                     	;# 
  1598  059C                     	;# 
  1599  059D                     	;# 
  1600  059E                     	;# 
  1601  0611                     	;# 
  1602  0611                     	;# 
  1603  0612                     	;# 
  1604  0613                     	;# 
  1605  0614                     	;# 
  1606  0614                     	;# 
  1607  0615                     	;# 
  1608  0616                     	;# 
  1609  0617                     	;# 
  1610  0617                     	;# 
  1611  0618                     	;# 
  1612  0619                     	;# 
  1613  061A                     	;# 
  1614  061A                     	;# 
  1615  061B                     	;# 
  1616  061C                     	;# 
  1617  061D                     	;# 
  1618  061D                     	;# 
  1619  061E                     	;# 
  1620  061F                     	;# 
  1621  0FE4                     	;# 
  1622  0FE5                     	;# 
  1623  0FE6                     	;# 
  1624  0FE7                     	;# 
  1625  0FE8                     	;# 
  1626  0FE9                     	;# 
  1627  0FEA                     	;# 
  1628  0FEB                     	;# 
  1629  0FED                     	;# 
  1630  0FEE                     	;# 
  1631  0FEF                     	;# 
  1632  0000                     	;# 
  1633  0001                     	;# 
  1634  0002                     	;# 
  1635  0003                     	;# 
  1636  0004                     	;# 
  1637  0005                     	;# 
  1638  0006                     	;# 
  1639  0007                     	;# 
  1640  0008                     	;# 
  1641  0009                     	;# 
  1642  000A                     	;# 
  1643  000B                     	;# 
  1644  000C                     	;# 
  1645  000D                     	;# 
  1646  000E                     	;# 
  1647  000F                     	;# 
  1648  0010                     	;# 
  1649  0011                     	;# 
  1650  0012                     	;# 
  1651  0013                     	;# 
  1652  0014                     	;# 
  1653  0015                     	;# 
  1654  0016                     	;# 
  1655  0016                     	;# 
  1656  0017                     	;# 
  1657  0018                     	;# 
  1658  0019                     	;# 
  1659  001A                     	;# 
  1660  001B                     	;# 
  1661  001C                     	;# 
  1662  008C                     	;# 
  1663  008D                     	;# 
  1664  008E                     	;# 
  1665  008F                     	;# 
  1666  0090                     	;# 
  1667  0091                     	;# 
  1668  0092                     	;# 
  1669  0093                     	;# 
  1670  0094                     	;# 
  1671  0095                     	;# 
  1672  0096                     	;# 
  1673  0097                     	;# 
  1674  0099                     	;# 
  1675  009A                     	;# 
  1676  009B                     	;# 
  1677  009B                     	;# 
  1678  009C                     	;# 
  1679  009D                     	;# 
  1680  009E                     	;# 
  1681  010C                     	;# 
  1682  010D                     	;# 
  1683  010E                     	;# 
  1684  010F                     	;# 
  1685  0110                     	;# 
  1686  0116                     	;# 
  1687  0117                     	;# 
  1688  011D                     	;# 
  1689  018C                     	;# 
  1690  018D                     	;# 
  1691  018F                     	;# 
  1692  0190                     	;# 
  1693  0191                     	;# 
  1694  0191                     	;# 
  1695  0192                     	;# 
  1696  0193                     	;# 
  1697  0193                     	;# 
  1698  0194                     	;# 
  1699  0195                     	;# 
  1700  0196                     	;# 
  1701  0197                     	;# 
  1702  0199                     	;# 
  1703  0199                     	;# 
  1704  0199                     	;# 
  1705  019A                     	;# 
  1706  019A                     	;# 
  1707  019A                     	;# 
  1708  019B                     	;# 
  1709  019B                     	;# 
  1710  019B                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019C                     	;# 
  1714  019C                     	;# 
  1715  019C                     	;# 
  1716  019D                     	;# 
  1717  019D                     	;# 
  1718  019D                     	;# 
  1719  019E                     	;# 
  1720  019E                     	;# 
  1721  019E                     	;# 
  1722  019F                     	;# 
  1723  019F                     	;# 
  1724  019F                     	;# 
  1725  020D                     	;# 
  1726  020F                     	;# 
  1727  0210                     	;# 
  1728  0211                     	;# 
  1729  0211                     	;# 
  1730  0212                     	;# 
  1731  0212                     	;# 
  1732  0213                     	;# 
  1733  0213                     	;# 
  1734  0214                     	;# 
  1735  0214                     	;# 
  1736  0215                     	;# 
  1737  0215                     	;# 
  1738  0215                     	;# 
  1739  0216                     	;# 
  1740  0216                     	;# 
  1741  0217                     	;# 
  1742  0217                     	;# 
  1743  0219                     	;# 
  1744  021A                     	;# 
  1745  021B                     	;# 
  1746  021C                     	;# 
  1747  021D                     	;# 
  1748  021E                     	;# 
  1749  021F                     	;# 
  1750  028C                     	;# 
  1751  028D                     	;# 
  1752  0291                     	;# 
  1753  0291                     	;# 
  1754  0292                     	;# 
  1755  0293                     	;# 
  1756  0298                     	;# 
  1757  0298                     	;# 
  1758  0299                     	;# 
  1759  029A                     	;# 
  1760  029D                     	;# 
  1761  029E                     	;# 
  1762  029F                     	;# 
  1763  030C                     	;# 
  1764  030D                     	;# 
  1765  0311                     	;# 
  1766  0311                     	;# 
  1767  0312                     	;# 
  1768  0313                     	;# 
  1769  0318                     	;# 
  1770  0318                     	;# 
  1771  0319                     	;# 
  1772  031A                     	;# 
  1773  031C                     	;# 
  1774  031C                     	;# 
  1775  031D                     	;# 
  1776  031E                     	;# 
  1777  038C                     	;# 
  1778  038D                     	;# 
  1779  0394                     	;# 
  1780  0395                     	;# 
  1781  0396                     	;# 
  1782  040C                     	;# 
  1783  040D                     	;# 
  1784  0411                     	;# 
  1785  0411                     	;# 
  1786  0412                     	;# 
  1787  0413                     	;# 
  1788  0414                     	;# 
  1789  0415                     	;# 
  1790  0416                     	;# 
  1791  0417                     	;# 
  1792  0418                     	;# 
  1793  0418                     	;# 
  1794  0419                     	;# 
  1795  041A                     	;# 
  1796  041B                     	;# 
  1797  041C                     	;# 
  1798  041D                     	;# 
  1799  041E                     	;# 
  1800  048D                     	;# 
  1801  0491                     	;# 
  1802  0491                     	;# 
  1803  0492                     	;# 
  1804  0492                     	;# 
  1805  0493                     	;# 
  1806  0493                     	;# 
  1807  0493                     	;# 
  1808  0494                     	;# 
  1809  0494                     	;# 
  1810  0495                     	;# 
  1811  0495                     	;# 
  1812  0496                     	;# 
  1813  0496                     	;# 
  1814  0497                     	;# 
  1815  0497                     	;# 
  1816  0595                     	;# 
  1817  0596                     	;# 
  1818  0597                     	;# 
  1819  059C                     	;# 
  1820  059D                     	;# 
  1821  059E                     	;# 
  1822  0611                     	;# 
  1823  0611                     	;# 
  1824  0612                     	;# 
  1825  0613                     	;# 
  1826  0614                     	;# 
  1827  0614                     	;# 
  1828  0615                     	;# 
  1829  0616                     	;# 
  1830  0617                     	;# 
  1831  0617                     	;# 
  1832  0618                     	;# 
  1833  0619                     	;# 
  1834  061A                     	;# 
  1835  061A                     	;# 
  1836  061B                     	;# 
  1837  061C                     	;# 
  1838  061D                     	;# 
  1839  061D                     	;# 
  1840  061E                     	;# 
  1841  061F                     	;# 
  1842  0FE4                     	;# 
  1843  0FE5                     	;# 
  1844  0FE6                     	;# 
  1845  0FE7                     	;# 
  1846  0FE8                     	;# 
  1847  0FE9                     	;# 
  1848  0FEA                     	;# 
  1849  0FEB                     	;# 
  1850  0FED                     	;# 
  1851  0FEE                     	;# 
  1852  0FEF                     	;# 
  1853  0000                     	;# 
  1854  0001                     	;# 
  1855  0002                     	;# 
  1856  0003                     	;# 
  1857  0004                     	;# 
  1858  0005                     	;# 
  1859  0006                     	;# 
  1860  0007                     	;# 
  1861  0008                     	;# 
  1862  0009                     	;# 
  1863  000A                     	;# 
  1864  000B                     	;# 
  1865  000C                     	;# 
  1866  000D                     	;# 
  1867  000E                     	;# 
  1868  000F                     	;# 
  1869  0010                     	;# 
  1870  0011                     	;# 
  1871  0012                     	;# 
  1872  0013                     	;# 
  1873  0014                     	;# 
  1874  0015                     	;# 
  1875  0016                     	;# 
  1876  0016                     	;# 
  1877  0017                     	;# 
  1878  0018                     	;# 
  1879  0019                     	;# 
  1880  001A                     	;# 
  1881  001B                     	;# 
  1882  001C                     	;# 
  1883  008C                     	;# 
  1884  008D                     	;# 
  1885  008E                     	;# 
  1886  008F                     	;# 
  1887  0090                     	;# 
  1888  0091                     	;# 
  1889  0092                     	;# 
  1890  0093                     	;# 
  1891  0094                     	;# 
  1892  0095                     	;# 
  1893  0096                     	;# 
  1894  0097                     	;# 
  1895  0099                     	;# 
  1896  009A                     	;# 
  1897  009B                     	;# 
  1898  009B                     	;# 
  1899  009C                     	;# 
  1900  009D                     	;# 
  1901  009E                     	;# 
  1902  010C                     	;# 
  1903  010D                     	;# 
  1904  010E                     	;# 
  1905  010F                     	;# 
  1906  0110                     	;# 
  1907  0116                     	;# 
  1908  0117                     	;# 
  1909  011D                     	;# 
  1910  018C                     	;# 
  1911  018D                     	;# 
  1912  018F                     	;# 
  1913  0190                     	;# 
  1914  0191                     	;# 
  1915  0191                     	;# 
  1916  0192                     	;# 
  1917  0193                     	;# 
  1918  0193                     	;# 
  1919  0194                     	;# 
  1920  0195                     	;# 
  1921  0196                     	;# 
  1922  0197                     	;# 
  1923  0199                     	;# 
  1924  0199                     	;# 
  1925  0199                     	;# 
  1926  019A                     	;# 
  1927  019A                     	;# 
  1928  019A                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019B                     	;# 
  1933  019B                     	;# 
  1934  019C                     	;# 
  1935  019C                     	;# 
  1936  019C                     	;# 
  1937  019D                     	;# 
  1938  019D                     	;# 
  1939  019D                     	;# 
  1940  019E                     	;# 
  1941  019E                     	;# 
  1942  019E                     	;# 
  1943  019F                     	;# 
  1944  019F                     	;# 
  1945  019F                     	;# 
  1946  020D                     	;# 
  1947  020F                     	;# 
  1948  0210                     	;# 
  1949  0211                     	;# 
  1950  0211                     	;# 
  1951  0212                     	;# 
  1952  0212                     	;# 
  1953  0213                     	;# 
  1954  0213                     	;# 
  1955  0214                     	;# 
  1956  0214                     	;# 
  1957  0215                     	;# 
  1958  0215                     	;# 
  1959  0215                     	;# 
  1960  0216                     	;# 
  1961  0216                     	;# 
  1962  0217                     	;# 
  1963  0217                     	;# 
  1964  0219                     	;# 
  1965  021A                     	;# 
  1966  021B                     	;# 
  1967  021C                     	;# 
  1968  021D                     	;# 
  1969  021E                     	;# 
  1970  021F                     	;# 
  1971  028C                     	;# 
  1972  028D                     	;# 
  1973  0291                     	;# 
  1974  0291                     	;# 
  1975  0292                     	;# 
  1976  0293                     	;# 
  1977  0298                     	;# 
  1978  0298                     	;# 
  1979  0299                     	;# 
  1980  029A                     	;# 
  1981  029D                     	;# 
  1982  029E                     	;# 
  1983  029F                     	;# 
  1984  030C                     	;# 
  1985  030D                     	;# 
  1986  0311                     	;# 
  1987  0311                     	;# 
  1988  0312                     	;# 
  1989  0313                     	;# 
  1990  0318                     	;# 
  1991  0318                     	;# 
  1992  0319                     	;# 
  1993  031A                     	;# 
  1994  031C                     	;# 
  1995  031C                     	;# 
  1996  031D                     	;# 
  1997  031E                     	;# 
  1998  038C                     	;# 
  1999  038D                     	;# 
  2000  0394                     	;# 
  2001  0395                     	;# 
  2002  0396                     	;# 
  2003  040C                     	;# 
  2004  040D                     	;# 
  2005  0411                     	;# 
  2006  0411                     	;# 
  2007  0412                     	;# 
  2008  0413                     	;# 
  2009  0414                     	;# 
  2010  0415                     	;# 
  2011  0416                     	;# 
  2012  0417                     	;# 
  2013  0418                     	;# 
  2014  0418                     	;# 
  2015  0419                     	;# 
  2016  041A                     	;# 
  2017  041B                     	;# 
  2018  041C                     	;# 
  2019  041D                     	;# 
  2020  041E                     	;# 
  2021  048D                     	;# 
  2022  0491                     	;# 
  2023  0491                     	;# 
  2024  0492                     	;# 
  2025  0492                     	;# 
  2026  0493                     	;# 
  2027  0493                     	;# 
  2028  0493                     	;# 
  2029  0494                     	;# 
  2030  0494                     	;# 
  2031  0495                     	;# 
  2032  0495                     	;# 
  2033  0496                     	;# 
  2034  0496                     	;# 
  2035  0497                     	;# 
  2036  0497                     	;# 
  2037  0595                     	;# 
  2038  0596                     	;# 
  2039  0597                     	;# 
  2040  059C                     	;# 
  2041  059D                     	;# 
  2042  059E                     	;# 
  2043  0611                     	;# 
  2044  0611                     	;# 
  2045  0612                     	;# 
  2046  0613                     	;# 
  2047  0614                     	;# 
  2048  0614                     	;# 
  2049  0615                     	;# 
  2050  0616                     	;# 
  2051  0617                     	;# 
  2052  0617                     	;# 
  2053  0618                     	;# 
  2054  0619                     	;# 
  2055  061A                     	;# 
  2056  061A                     	;# 
  2057  061B                     	;# 
  2058  061C                     	;# 
  2059  061D                     	;# 
  2060  061D                     	;# 
  2061  061E                     	;# 
  2062  061F                     	;# 
  2063  0FE4                     	;# 
  2064  0FE5                     	;# 
  2065  0FE6                     	;# 
  2066  0FE7                     	;# 
  2067  0FE8                     	;# 
  2068  0FE9                     	;# 
  2069  0FEA                     	;# 
  2070  0FEB                     	;# 
  2071  0FED                     	;# 
  2072  0FEE                     	;# 
  2073  0FEF                     	;# 
  2074  0000                     	;# 
  2075  0001                     	;# 
  2076  0002                     	;# 
  2077  0003                     	;# 
  2078  0004                     	;# 
  2079  0005                     	;# 
  2080  0006                     	;# 
  2081  0007                     	;# 
  2082  0008                     	;# 
  2083  0009                     	;# 
  2084  000A                     	;# 
  2085  000B                     	;# 
  2086  000C                     	;# 
  2087  000D                     	;# 
  2088  000E                     	;# 
  2089  000F                     	;# 
  2090  0010                     	;# 
  2091  0011                     	;# 
  2092  0012                     	;# 
  2093  0013                     	;# 
  2094  0014                     	;# 
  2095  0015                     	;# 
  2096  0016                     	;# 
  2097  0016                     	;# 
  2098  0017                     	;# 
  2099  0018                     	;# 
  2100  0019                     	;# 
  2101  001A                     	;# 
  2102  001B                     	;# 
  2103  001C                     	;# 
  2104  008C                     	;# 
  2105  008D                     	;# 
  2106  008E                     	;# 
  2107  008F                     	;# 
  2108  0090                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0093                     	;# 
  2112  0094                     	;# 
  2113  0095                     	;# 
  2114  0096                     	;# 
  2115  0097                     	;# 
  2116  0099                     	;# 
  2117  009A                     	;# 
  2118  009B                     	;# 
  2119  009B                     	;# 
  2120  009C                     	;# 
  2121  009D                     	;# 
  2122  009E                     	;# 
  2123  010C                     	;# 
  2124  010D                     	;# 
  2125  010E                     	;# 
  2126  010F                     	;# 
  2127  0110                     	;# 
  2128  0116                     	;# 
  2129  0117                     	;# 
  2130  011D                     	;# 
  2131  018C                     	;# 
  2132  018D                     	;# 
  2133  018F                     	;# 
  2134  0190                     	;# 
  2135  0191                     	;# 
  2136  0191                     	;# 
  2137  0192                     	;# 
  2138  0193                     	;# 
  2139  0193                     	;# 
  2140  0194                     	;# 
  2141  0195                     	;# 
  2142  0196                     	;# 
  2143  0197                     	;# 
  2144  0199                     	;# 
  2145  0199                     	;# 
  2146  0199                     	;# 
  2147  019A                     	;# 
  2148  019A                     	;# 
  2149  019A                     	;# 
  2150  019B                     	;# 
  2151  019B                     	;# 
  2152  019B                     	;# 
  2153  019B                     	;# 
  2154  019B                     	;# 
  2155  019C                     	;# 
  2156  019C                     	;# 
  2157  019C                     	;# 
  2158  019D                     	;# 
  2159  019D                     	;# 
  2160  019D                     	;# 
  2161  019E                     	;# 
  2162  019E                     	;# 
  2163  019E                     	;# 
  2164  019F                     	;# 
  2165  019F                     	;# 
  2166  019F                     	;# 
  2167  020D                     	;# 
  2168  020F                     	;# 
  2169  0210                     	;# 
  2170  0211                     	;# 
  2171  0211                     	;# 
  2172  0212                     	;# 
  2173  0212                     	;# 
  2174  0213                     	;# 
  2175  0213                     	;# 
  2176  0214                     	;# 
  2177  0214                     	;# 
  2178  0215                     	;# 
  2179  0215                     	;# 
  2180  0215                     	;# 
  2181  0216                     	;# 
  2182  0216                     	;# 
  2183  0217                     	;# 
  2184  0217                     	;# 
  2185  0219                     	;# 
  2186  021A                     	;# 
  2187  021B                     	;# 
  2188  021C                     	;# 
  2189  021D                     	;# 
  2190  021E                     	;# 
  2191  021F                     	;# 
  2192  028C                     	;# 
  2193  028D                     	;# 
  2194  0291                     	;# 
  2195  0291                     	;# 
  2196  0292                     	;# 
  2197  0293                     	;# 
  2198  0298                     	;# 
  2199  0298                     	;# 
  2200  0299                     	;# 
  2201  029A                     	;# 
  2202  029D                     	;# 
  2203  029E                     	;# 
  2204  029F                     	;# 
  2205  030C                     	;# 
  2206  030D                     	;# 
  2207  0311                     	;# 
  2208  0311                     	;# 
  2209  0312                     	;# 
  2210  0313                     	;# 
  2211  0318                     	;# 
  2212  0318                     	;# 
  2213  0319                     	;# 
  2214  031A                     	;# 
  2215  031C                     	;# 
  2216  031C                     	;# 
  2217  031D                     	;# 
  2218  031E                     	;# 
  2219  038C                     	;# 
  2220  038D                     	;# 
  2221  0394                     	;# 
  2222  0395                     	;# 
  2223  0396                     	;# 
  2224  040C                     	;# 
  2225  040D                     	;# 
  2226  0411                     	;# 
  2227  0411                     	;# 
  2228  0412                     	;# 
  2229  0413                     	;# 
  2230  0414                     	;# 
  2231  0415                     	;# 
  2232  0416                     	;# 
  2233  0417                     	;# 
  2234  0418                     	;# 
  2235  0418                     	;# 
  2236  0419                     	;# 
  2237  041A                     	;# 
  2238  041B                     	;# 
  2239  041C                     	;# 
  2240  041D                     	;# 
  2241  041E                     	;# 
  2242  048D                     	;# 
  2243  0491                     	;# 
  2244  0491                     	;# 
  2245  0492                     	;# 
  2246  0492                     	;# 
  2247  0493                     	;# 
  2248  0493                     	;# 
  2249  0493                     	;# 
  2250  0494                     	;# 
  2251  0494                     	;# 
  2252  0495                     	;# 
  2253  0495                     	;# 
  2254  0496                     	;# 
  2255  0496                     	;# 
  2256  0497                     	;# 
  2257  0497                     	;# 
  2258  0595                     	;# 
  2259  0596                     	;# 
  2260  0597                     	;# 
  2261  059C                     	;# 
  2262  059D                     	;# 
  2263  059E                     	;# 
  2264  0611                     	;# 
  2265  0611                     	;# 
  2266  0612                     	;# 
  2267  0613                     	;# 
  2268  0614                     	;# 
  2269  0614                     	;# 
  2270  0615                     	;# 
  2271  0616                     	;# 
  2272  0617                     	;# 
  2273  0617                     	;# 
  2274  0618                     	;# 
  2275  0619                     	;# 
  2276  061A                     	;# 
  2277  061A                     	;# 
  2278  061B                     	;# 
  2279  061C                     	;# 
  2280  061D                     	;# 
  2281  061D                     	;# 
  2282  061E                     	;# 
  2283  061F                     	;# 
  2284  0FE4                     	;# 
  2285  0FE5                     	;# 
  2286  0FE6                     	;# 
  2287  0FE7                     	;# 
  2288  0FE8                     	;# 
  2289  0FE9                     	;# 
  2290  0FEA                     	;# 
  2291  0FEB                     	;# 
  2292  0FED                     	;# 
  2293  0FEE                     	;# 
  2294  0FEF                     	;# 
  2295  0000                     	;# 
  2296  0001                     	;# 
  2297  0002                     	;# 
  2298  0003                     	;# 
  2299  0004                     	;# 
  2300  0005                     	;# 
  2301  0006                     	;# 
  2302  0007                     	;# 
  2303  0008                     	;# 
  2304  0009                     	;# 
  2305  000A                     	;# 
  2306  000B                     	;# 
  2307  000C                     	;# 
  2308  000D                     	;# 
  2309  000E                     	;# 
  2310  000F                     	;# 
  2311  0010                     	;# 
  2312  0011                     	;# 
  2313  0012                     	;# 
  2314  0013                     	;# 
  2315  0014                     	;# 
  2316  0015                     	;# 
  2317  0016                     	;# 
  2318  0016                     	;# 
  2319  0017                     	;# 
  2320  0018                     	;# 
  2321  0019                     	;# 
  2322  001A                     	;# 
  2323  001B                     	;# 
  2324  001C                     	;# 
  2325  008C                     	;# 
  2326  008D                     	;# 
  2327  008E                     	;# 
  2328  008F                     	;# 
  2329  0090                     	;# 
  2330  0091                     	;# 
  2331  0092                     	;# 
  2332  0093                     	;# 
  2333  0094                     	;# 
  2334  0095                     	;# 
  2335  0096                     	;# 
  2336  0097                     	;# 
  2337  0099                     	;# 
  2338  009A                     	;# 
  2339  009B                     	;# 
  2340  009B                     	;# 
  2341  009C                     	;# 
  2342  009D                     	;# 
  2343  009E                     	;# 
  2344  010C                     	;# 
  2345  010D                     	;# 
  2346  010E                     	;# 
  2347  010F                     	;# 
  2348  0110                     	;# 
  2349  0116                     	;# 
  2350  0117                     	;# 
  2351  011D                     	;# 
  2352  018C                     	;# 
  2353  018D                     	;# 
  2354  018F                     	;# 
  2355  0190                     	;# 
  2356  0191                     	;# 
  2357  0191                     	;# 
  2358  0192                     	;# 
  2359  0193                     	;# 
  2360  0193                     	;# 
  2361  0194                     	;# 
  2362  0195                     	;# 
  2363  0196                     	;# 
  2364  0197                     	;# 
  2365  0199                     	;# 
  2366  0199                     	;# 
  2367  0199                     	;# 
  2368  019A                     	;# 
  2369  019A                     	;# 
  2370  019A                     	;# 
  2371  019B                     	;# 
  2372  019B                     	;# 
  2373  019B                     	;# 
  2374  019B                     	;# 
  2375  019B                     	;# 
  2376  019C                     	;# 
  2377  019C                     	;# 
  2378  019C                     	;# 
  2379  019D                     	;# 
  2380  019D                     	;# 
  2381  019D                     	;# 
  2382  019E                     	;# 
  2383  019E                     	;# 
  2384  019E                     	;# 
  2385  019F                     	;# 
  2386  019F                     	;# 
  2387  019F                     	;# 
  2388  020D                     	;# 
  2389  020F                     	;# 
  2390  0210                     	;# 
  2391  0211                     	;# 
  2392  0211                     	;# 
  2393  0212                     	;# 
  2394  0212                     	;# 
  2395  0213                     	;# 
  2396  0213                     	;# 
  2397  0214                     	;# 
  2398  0214                     	;# 
  2399  0215                     	;# 
  2400  0215                     	;# 
  2401  0215                     	;# 
  2402  0216                     	;# 
  2403  0216                     	;# 
  2404  0217                     	;# 
  2405  0217                     	;# 
  2406  0219                     	;# 
  2407  021A                     	;# 
  2408  021B                     	;# 
  2409  021C                     	;# 
  2410  021D                     	;# 
  2411  021E                     	;# 
  2412  021F                     	;# 
  2413  028C                     	;# 
  2414  028D                     	;# 
  2415  0291                     	;# 
  2416  0291                     	;# 
  2417  0292                     	;# 
  2418  0293                     	;# 
  2419  0298                     	;# 
  2420  0298                     	;# 
  2421  0299                     	;# 
  2422  029A                     	;# 
  2423  029D                     	;# 
  2424  029E                     	;# 
  2425  029F                     	;# 
  2426  030C                     	;# 
  2427  030D                     	;# 
  2428  0311                     	;# 
  2429  0311                     	;# 
  2430  0312                     	;# 
  2431  0313                     	;# 
  2432  0318                     	;# 
  2433  0318                     	;# 
  2434  0319                     	;# 
  2435  031A                     	;# 
  2436  031C                     	;# 
  2437  031C                     	;# 
  2438  031D                     	;# 
  2439  031E                     	;# 
  2440  038C                     	;# 
  2441  038D                     	;# 
  2442  0394                     	;# 
  2443  0395                     	;# 
  2444  0396                     	;# 
  2445  040C                     	;# 
  2446  040D                     	;# 
  2447  0411                     	;# 
  2448  0411                     	;# 
  2449  0412                     	;# 
  2450  0413                     	;# 
  2451  0414                     	;# 
  2452  0415                     	;# 
  2453  0416                     	;# 
  2454  0417                     	;# 
  2455  0418                     	;# 
  2456  0418                     	;# 
  2457  0419                     	;# 
  2458  041A                     	;# 
  2459  041B                     	;# 
  2460  041C                     	;# 
  2461  041D                     	;# 
  2462  041E                     	;# 
  2463  048D                     	;# 
  2464  0491                     	;# 
  2465  0491                     	;# 
  2466  0492                     	;# 
  2467  0492                     	;# 
  2468  0493                     	;# 
  2469  0493                     	;# 
  2470  0493                     	;# 
  2471  0494                     	;# 
  2472  0494                     	;# 
  2473  0495                     	;# 
  2474  0495                     	;# 
  2475  0496                     	;# 
  2476  0496                     	;# 
  2477  0497                     	;# 
  2478  0497                     	;# 
  2479  0595                     	;# 
  2480  0596                     	;# 
  2481  0597                     	;# 
  2482  059C                     	;# 
  2483  059D                     	;# 
  2484  059E                     	;# 
  2485  0611                     	;# 
  2486  0611                     	;# 
  2487  0612                     	;# 
  2488  0613                     	;# 
  2489  0614                     	;# 
  2490  0614                     	;# 
  2491  0615                     	;# 
  2492  0616                     	;# 
  2493  0617                     	;# 
  2494  0617                     	;# 
  2495  0618                     	;# 
  2496  0619                     	;# 
  2497  061A                     	;# 
  2498  061A                     	;# 
  2499  061B                     	;# 
  2500  061C                     	;# 
  2501  061D                     	;# 
  2502  061D                     	;# 
  2503  061E                     	;# 
  2504  061F                     	;# 
  2505  0FE4                     	;# 
  2506  0FE5                     	;# 
  2507  0FE6                     	;# 
  2508  0FE7                     	;# 
  2509  0FE8                     	;# 
  2510  0FE9                     	;# 
  2511  0FEA                     	;# 
  2512  0FEB                     	;# 
  2513  0FED                     	;# 
  2514  0FEE                     	;# 
  2515  0FEF                     	;# 
  2516  0000                     	;# 
  2517  0001                     	;# 
  2518  0002                     	;# 
  2519  0003                     	;# 
  2520  0004                     	;# 
  2521  0005                     	;# 
  2522  0006                     	;# 
  2523  0007                     	;# 
  2524  0008                     	;# 
  2525  0009                     	;# 
  2526  000A                     	;# 
  2527  000B                     	;# 
  2528  000C                     	;# 
  2529  000D                     	;# 
  2530  000E                     	;# 
  2531  000F                     	;# 
  2532  0010                     	;# 
  2533  0011                     	;# 
  2534  0012                     	;# 
  2535  0013                     	;# 
  2536  0014                     	;# 
  2537  0015                     	;# 
  2538  0016                     	;# 
  2539  0016                     	;# 
  2540  0017                     	;# 
  2541  0018                     	;# 
  2542  0019                     	;# 
  2543  001A                     	;# 
  2544  001B                     	;# 
  2545  001C                     	;# 
  2546  008C                     	;# 
  2547  008D                     	;# 
  2548  008E                     	;# 
  2549  008F                     	;# 
  2550  0090                     	;# 
  2551  0091                     	;# 
  2552  0092                     	;# 
  2553  0093                     	;# 
  2554  0094                     	;# 
  2555  0095                     	;# 
  2556  0096                     	;# 
  2557  0097                     	;# 
  2558  0099                     	;# 
  2559  009A                     	;# 
  2560  009B                     	;# 
  2561  009B                     	;# 
  2562  009C                     	;# 
  2563  009D                     	;# 
  2564  009E                     	;# 
  2565  010C                     	;# 
  2566  010D                     	;# 
  2567  010E                     	;# 
  2568  010F                     	;# 
  2569  0110                     	;# 
  2570  0116                     	;# 
  2571  0117                     	;# 
  2572  011D                     	;# 
  2573  018C                     	;# 
  2574  018D                     	;# 
  2575  018F                     	;# 
  2576  0190                     	;# 
  2577  0191                     	;# 
  2578  0191                     	;# 
  2579  0192                     	;# 
  2580  0193                     	;# 
  2581  0193                     	;# 
  2582  0194                     	;# 
  2583  0195                     	;# 
  2584  0196                     	;# 
  2585  0197                     	;# 
  2586  0199                     	;# 
  2587  0199                     	;# 
  2588  0199                     	;# 
  2589  019A                     	;# 
  2590  019A                     	;# 
  2591  019A                     	;# 
  2592  019B                     	;# 
  2593  019B                     	;# 
  2594  019B                     	;# 
  2595  019B                     	;# 
  2596  019B                     	;# 
  2597  019C                     	;# 
  2598  019C                     	;# 
  2599  019C                     	;# 
  2600  019D                     	;# 
  2601  019D                     	;# 
  2602  019D                     	;# 
  2603  019E                     	;# 
  2604  019E                     	;# 
  2605  019E                     	;# 
  2606  019F                     	;# 
  2607  019F                     	;# 
  2608  019F                     	;# 
  2609  020D                     	;# 
  2610  020F                     	;# 
  2611  0210                     	;# 
  2612  0211                     	;# 
  2613  0211                     	;# 
  2614  0212                     	;# 
  2615  0212                     	;# 
  2616  0213                     	;# 
  2617  0213                     	;# 
  2618  0214                     	;# 
  2619  0214                     	;# 
  2620  0215                     	;# 
  2621  0215                     	;# 
  2622  0215                     	;# 
  2623  0216                     	;# 
  2624  0216                     	;# 
  2625  0217                     	;# 
  2626  0217                     	;# 
  2627  0219                     	;# 
  2628  021A                     	;# 
  2629  021B                     	;# 
  2630  021C                     	;# 
  2631  021D                     	;# 
  2632  021E                     	;# 
  2633  021F                     	;# 
  2634  028C                     	;# 
  2635  028D                     	;# 
  2636  0291                     	;# 
  2637  0291                     	;# 
  2638  0292                     	;# 
  2639  0293                     	;# 
  2640  0298                     	;# 
  2641  0298                     	;# 
  2642  0299                     	;# 
  2643  029A                     	;# 
  2644  029D                     	;# 
  2645  029E                     	;# 
  2646  029F                     	;# 
  2647  030C                     	;# 
  2648  030D                     	;# 
  2649  0311                     	;# 
  2650  0311                     	;# 
  2651  0312                     	;# 
  2652  0313                     	;# 
  2653  0318                     	;# 
  2654  0318                     	;# 
  2655  0319                     	;# 
  2656  031A                     	;# 
  2657  031C                     	;# 
  2658  031C                     	;# 
  2659  031D                     	;# 
  2660  031E                     	;# 
  2661  038C                     	;# 
  2662  038D                     	;# 
  2663  0394                     	;# 
  2664  0395                     	;# 
  2665  0396                     	;# 
  2666  040C                     	;# 
  2667  040D                     	;# 
  2668  0411                     	;# 
  2669  0411                     	;# 
  2670  0412                     	;# 
  2671  0413                     	;# 
  2672  0414                     	;# 
  2673  0415                     	;# 
  2674  0416                     	;# 
  2675  0417                     	;# 
  2676  0418                     	;# 
  2677  0418                     	;# 
  2678  0419                     	;# 
  2679  041A                     	;# 
  2680  041B                     	;# 
  2681  041C                     	;# 
  2682  041D                     	;# 
  2683  041E                     	;# 
  2684  048D                     	;# 
  2685  0491                     	;# 
  2686  0491                     	;# 
  2687  0492                     	;# 
  2688  0492                     	;# 
  2689  0493                     	;# 
  2690  0493                     	;# 
  2691  0493                     	;# 
  2692  0494                     	;# 
  2693  0494                     	;# 
  2694  0495                     	;# 
  2695  0495                     	;# 
  2696  0496                     	;# 
  2697  0496                     	;# 
  2698  0497                     	;# 
  2699  0497                     	;# 
  2700  0595                     	;# 
  2701  0596                     	;# 
  2702  0597                     	;# 
  2703  059C                     	;# 
  2704  059D                     	;# 
  2705  059E                     	;# 
  2706  0611                     	;# 
  2707  0611                     	;# 
  2708  0612                     	;# 
  2709  0613                     	;# 
  2710  0614                     	;# 
  2711  0614                     	;# 
  2712  0615                     	;# 
  2713  0616                     	;# 
  2714  0617                     	;# 
  2715  0617                     	;# 
  2716  0618                     	;# 
  2717  0619                     	;# 
  2718  061A                     	;# 
  2719  061A                     	;# 
  2720  061B                     	;# 
  2721  061C                     	;# 
  2722  061D                     	;# 
  2723  061D                     	;# 
  2724  061E                     	;# 
  2725  061F                     	;# 
  2726  0FE4                     	;# 
  2727  0FE5                     	;# 
  2728  0FE6                     	;# 
  2729  0FE7                     	;# 
  2730  0FE8                     	;# 
  2731  0FE9                     	;# 
  2732  0FEA                     	;# 
  2733  0FEB                     	;# 
  2734  0FED                     	;# 
  2735  0FEE                     	;# 
  2736  0FEF                     	;# 
  2737  0000                     	;# 
  2738  0001                     	;# 
  2739  0002                     	;# 
  2740  0003                     	;# 
  2741  0004                     	;# 
  2742  0005                     	;# 
  2743  0006                     	;# 
  2744  0007                     	;# 
  2745  0008                     	;# 
  2746  0009                     	;# 
  2747  000A                     	;# 
  2748  000B                     	;# 
  2749  000C                     	;# 
  2750  000D                     	;# 
  2751  000E                     	;# 
  2752  000F                     	;# 
  2753  0010                     	;# 
  2754  0011                     	;# 
  2755  0012                     	;# 
  2756  0013                     	;# 
  2757  0014                     	;# 
  2758  0015                     	;# 
  2759  0016                     	;# 
  2760  0016                     	;# 
  2761  0017                     	;# 
  2762  0018                     	;# 
  2763  0019                     	;# 
  2764  001A                     	;# 
  2765  001B                     	;# 
  2766  001C                     	;# 
  2767  008C                     	;# 
  2768  008D                     	;# 
  2769  008E                     	;# 
  2770  008F                     	;# 
  2771  0090                     	;# 
  2772  0091                     	;# 
  2773  0092                     	;# 
  2774  0093                     	;# 
  2775  0094                     	;# 
  2776  0095                     	;# 
  2777  0096                     	;# 
  2778  0097                     	;# 
  2779  0099                     	;# 
  2780  009A                     	;# 
  2781  009B                     	;# 
  2782  009B                     	;# 
  2783  009C                     	;# 
  2784  009D                     	;# 
  2785  009E                     	;# 
  2786  010C                     	;# 
  2787  010D                     	;# 
  2788  010E                     	;# 
  2789  010F                     	;# 
  2790  0110                     	;# 
  2791  0116                     	;# 
  2792  0117                     	;# 
  2793  011D                     	;# 
  2794  018C                     	;# 
  2795  018D                     	;# 
  2796  018F                     	;# 
  2797  0190                     	;# 
  2798  0191                     	;# 
  2799  0191                     	;# 
  2800  0192                     	;# 
  2801  0193                     	;# 
  2802  0193                     	;# 
  2803  0194                     	;# 
  2804  0195                     	;# 
  2805  0196                     	;# 
  2806  0197                     	;# 
  2807  0199                     	;# 
  2808  0199                     	;# 
  2809  0199                     	;# 
  2810  019A                     	;# 
  2811  019A                     	;# 
  2812  019A                     	;# 
  2813  019B                     	;# 
  2814  019B                     	;# 
  2815  019B                     	;# 
  2816  019B                     	;# 
  2817  019B                     	;# 
  2818  019C                     	;# 
  2819  019C                     	;# 
  2820  019C                     	;# 
  2821  019D                     	;# 
  2822  019D                     	;# 
  2823  019D                     	;# 
  2824  019E                     	;# 
  2825  019E                     	;# 
  2826  019E                     	;# 
  2827  019F                     	;# 
  2828  019F                     	;# 
  2829  019F                     	;# 
  2830  020D                     	;# 
  2831  020F                     	;# 
  2832  0210                     	;# 
  2833  0211                     	;# 
  2834  0211                     	;# 
  2835  0212                     	;# 
  2836  0212                     	;# 
  2837  0213                     	;# 
  2838  0213                     	;# 
  2839  0214                     	;# 
  2840  0214                     	;# 
  2841  0215                     	;# 
  2842  0215                     	;# 
  2843  0215                     	;# 
  2844  0216                     	;# 
  2845  0216                     	;# 
  2846  0217                     	;# 
  2847  0217                     	;# 
  2848  0219                     	;# 
  2849  021A                     	;# 
  2850  021B                     	;# 
  2851  021C                     	;# 
  2852  021D                     	;# 
  2853  021E                     	;# 
  2854  021F                     	;# 
  2855  028C                     	;# 
  2856  028D                     	;# 
  2857  0291                     	;# 
  2858  0291                     	;# 
  2859  0292                     	;# 
  2860  0293                     	;# 
  2861  0298                     	;# 
  2862  0298                     	;# 
  2863  0299                     	;# 
  2864  029A                     	;# 
  2865  029D                     	;# 
  2866  029E                     	;# 
  2867  029F                     	;# 
  2868  030C                     	;# 
  2869  030D                     	;# 
  2870  0311                     	;# 
  2871  0311                     	;# 
  2872  0312                     	;# 
  2873  0313                     	;# 
  2874  0318                     	;# 
  2875  0318                     	;# 
  2876  0319                     	;# 
  2877  031A                     	;# 
  2878  031C                     	;# 
  2879  031C                     	;# 
  2880  031D                     	;# 
  2881  031E                     	;# 
  2882  038C                     	;# 
  2883  038D                     	;# 
  2884  0394                     	;# 
  2885  0395                     	;# 
  2886  0396                     	;# 
  2887  040C                     	;# 
  2888  040D                     	;# 
  2889  0411                     	;# 
  2890  0411                     	;# 
  2891  0412                     	;# 
  2892  0413                     	;# 
  2893  0414                     	;# 
  2894  0415                     	;# 
  2895  0416                     	;# 
  2896  0417                     	;# 
  2897  0418                     	;# 
  2898  0418                     	;# 
  2899  0419                     	;# 
  2900  041A                     	;# 
  2901  041B                     	;# 
  2902  041C                     	;# 
  2903  041D                     	;# 
  2904  041E                     	;# 
  2905  048D                     	;# 
  2906  0491                     	;# 
  2907  0491                     	;# 
  2908  0492                     	;# 
  2909  0492                     	;# 
  2910  0493                     	;# 
  2911  0493                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0494                     	;# 
  2915  0495                     	;# 
  2916  0495                     	;# 
  2917  0496                     	;# 
  2918  0496                     	;# 
  2919  0497                     	;# 
  2920  0497                     	;# 
  2921  0595                     	;# 
  2922  0596                     	;# 
  2923  0597                     	;# 
  2924  059C                     	;# 
  2925  059D                     	;# 
  2926  059E                     	;# 
  2927  0611                     	;# 
  2928  0611                     	;# 
  2929  0612                     	;# 
  2930  0613                     	;# 
  2931  0614                     	;# 
  2932  0614                     	;# 
  2933  0615                     	;# 
  2934  0616                     	;# 
  2935  0617                     	;# 
  2936  0617                     	;# 
  2937  0618                     	;# 
  2938  0619                     	;# 
  2939  061A                     	;# 
  2940  061A                     	;# 
  2941  061B                     	;# 
  2942  061C                     	;# 
  2943  061D                     	;# 
  2944  061D                     	;# 
  2945  061E                     	;# 
  2946  061F                     	;# 
  2947  0FE4                     	;# 
  2948  0FE5                     	;# 
  2949  0FE6                     	;# 
  2950  0FE7                     	;# 
  2951  0FE8                     	;# 
  2952  0FE9                     	;# 
  2953  0FEA                     	;# 
  2954  0FEB                     	;# 
  2955  0FED                     	;# 
  2956  0FEE                     	;# 
  2957  0FEF                     	;# 
  2958  0000                     	;# 
  2959  0001                     	;# 
  2960  0002                     	;# 
  2961  0003                     	;# 
  2962  0004                     	;# 
  2963  0005                     	;# 
  2964  0006                     	;# 
  2965  0007                     	;# 
  2966  0008                     	;# 
  2967  0009                     	;# 
  2968  000A                     	;# 
  2969  000B                     	;# 
  2970  000C                     	;# 
  2971  000D                     	;# 
  2972  000E                     	;# 
  2973  000F                     	;# 
  2974  0010                     	;# 
  2975  0011                     	;# 
  2976  0012                     	;# 
  2977  0013                     	;# 
  2978  0014                     	;# 
  2979  0015                     	;# 
  2980  0016                     	;# 
  2981  0016                     	;# 
  2982  0017                     	;# 
  2983  0018                     	;# 
  2984  0019                     	;# 
  2985  001A                     	;# 
  2986  001B                     	;# 
  2987  001C                     	;# 
  2988  008C                     	;# 
  2989  008D                     	;# 
  2990  008E                     	;# 
  2991  008F                     	;# 
  2992  0090                     	;# 
  2993  0091                     	;# 
  2994  0092                     	;# 
  2995  0093                     	;# 
  2996  0094                     	;# 
  2997  0095                     	;# 
  2998  0096                     	;# 
  2999  0097                     	;# 
  3000  0099                     	;# 
  3001  009A                     	;# 
  3002  009B                     	;# 
  3003  009B                     	;# 
  3004  009C                     	;# 
  3005  009D                     	;# 
  3006  009E                     	;# 
  3007  010C                     	;# 
  3008  010D                     	;# 
  3009  010E                     	;# 
  3010  010F                     	;# 
  3011  0110                     	;# 
  3012  0116                     	;# 
  3013  0117                     	;# 
  3014  011D                     	;# 
  3015  018C                     	;# 
  3016  018D                     	;# 
  3017  018F                     	;# 
  3018  0190                     	;# 
  3019  0191                     	;# 
  3020  0191                     	;# 
  3021  0192                     	;# 
  3022  0193                     	;# 
  3023  0193                     	;# 
  3024  0194                     	;# 
  3025  0195                     	;# 
  3026  0196                     	;# 
  3027  0197                     	;# 
  3028  0199                     	;# 
  3029  0199                     	;# 
  3030  0199                     	;# 
  3031  019A                     	;# 
  3032  019A                     	;# 
  3033  019A                     	;# 
  3034  019B                     	;# 
  3035  019B                     	;# 
  3036  019B                     	;# 
  3037  019B                     	;# 
  3038  019B                     	;# 
  3039  019C                     	;# 
  3040  019C                     	;# 
  3041  019C                     	;# 
  3042  019D                     	;# 
  3043  019D                     	;# 
  3044  019D                     	;# 
  3045  019E                     	;# 
  3046  019E                     	;# 
  3047  019E                     	;# 
  3048  019F                     	;# 
  3049  019F                     	;# 
  3050  019F                     	;# 
  3051  020D                     	;# 
  3052  020F                     	;# 
  3053  0210                     	;# 
  3054  0211                     	;# 
  3055  0211                     	;# 
  3056  0212                     	;# 
  3057  0212                     	;# 
  3058  0213                     	;# 
  3059  0213                     	;# 
  3060  0214                     	;# 
  3061  0214                     	;# 
  3062  0215                     	;# 
  3063  0215                     	;# 
  3064  0215                     	;# 
  3065  0216                     	;# 
  3066  0216                     	;# 
  3067  0217                     	;# 
  3068  0217                     	;# 
  3069  0219                     	;# 
  3070  021A                     	;# 
  3071  021B                     	;# 
  3072  021C                     	;# 
  3073  021D                     	;# 
  3074  021E                     	;# 
  3075  021F                     	;# 
  3076  028C                     	;# 
  3077  028D                     	;# 
  3078  0291                     	;# 
  3079  0291                     	;# 
  3080  0292                     	;# 
  3081  0293                     	;# 
  3082  0298                     	;# 
  3083  0298                     	;# 
  3084  0299                     	;# 
  3085  029A                     	;# 
  3086  029D                     	;# 
  3087  029E                     	;# 
  3088  029F                     	;# 
  3089  030C                     	;# 
  3090  030D                     	;# 
  3091  0311                     	;# 
  3092  0311                     	;# 
  3093  0312                     	;# 
  3094  0313                     	;# 
  3095  0318                     	;# 
  3096  0318                     	;# 
  3097  0319                     	;# 
  3098  031A                     	;# 
  3099  031C                     	;# 
  3100  031C                     	;# 
  3101  031D                     	;# 
  3102  031E                     	;# 
  3103  038C                     	;# 
  3104  038D                     	;# 
  3105  0394                     	;# 
  3106  0395                     	;# 
  3107  0396                     	;# 
  3108  040C                     	;# 
  3109  040D                     	;# 
  3110  0411                     	;# 
  3111  0411                     	;# 
  3112  0412                     	;# 
  3113  0413                     	;# 
  3114  0414                     	;# 
  3115  0415                     	;# 
  3116  0416                     	;# 
  3117  0417                     	;# 
  3118  0418                     	;# 
  3119  0418                     	;# 
  3120  0419                     	;# 
  3121  041A                     	;# 
  3122  041B                     	;# 
  3123  041C                     	;# 
  3124  041D                     	;# 
  3125  041E                     	;# 
  3126  048D                     	;# 
  3127  0491                     	;# 
  3128  0491                     	;# 
  3129  0492                     	;# 
  3130  0492                     	;# 
  3131  0493                     	;# 
  3132  0493                     	;# 
  3133  0493                     	;# 
  3134  0494                     	;# 
  3135  0494                     	;# 
  3136  0495                     	;# 
  3137  0495                     	;# 
  3138  0496                     	;# 
  3139  0496                     	;# 
  3140  0497                     	;# 
  3141  0497                     	;# 
  3142  0595                     	;# 
  3143  0596                     	;# 
  3144  0597                     	;# 
  3145  059C                     	;# 
  3146  059D                     	;# 
  3147  059E                     	;# 
  3148  0611                     	;# 
  3149  0611                     	;# 
  3150  0612                     	;# 
  3151  0613                     	;# 
  3152  0614                     	;# 
  3153  0614                     	;# 
  3154  0615                     	;# 
  3155  0616                     	;# 
  3156  0617                     	;# 
  3157  0617                     	;# 
  3158  0618                     	;# 
  3159  0619                     	;# 
  3160  061A                     	;# 
  3161  061A                     	;# 
  3162  061B                     	;# 
  3163  061C                     	;# 
  3164  061D                     	;# 
  3165  061D                     	;# 
  3166  061E                     	;# 
  3167  061F                     	;# 
  3168  0FE4                     	;# 
  3169  0FE5                     	;# 
  3170  0FE6                     	;# 
  3171  0FE7                     	;# 
  3172  0FE8                     	;# 
  3173  0FE9                     	;# 
  3174  0FEA                     	;# 
  3175  0FEB                     	;# 
  3176  0FED                     	;# 
  3177  0FEE                     	;# 
  3178  0FEF                     	;_delayArray
  3179                           
  3180                           	psect	idataBANK0
  3181  1251                     __pidataBANK0:	
  3182                           
  3183                           ;initializer for _baseline_delay_time
  3184  1251  34D0               	retlw	208
  3185  1252  3407               	retlw	7
  3186  1253  3400               	retlw	0
  3187  1254  3400               	retlw	0
  3188                           
  3189                           ;initializer for _delay_time
  3190  1255  34D0               	retlw	208
  3191  1256  3407               	retlw	7
  3192  1257  3400               	retlw	0
  3193  1258  3400               	retlw	0
  3194                           
  3195                           ;initializer for _bottom_push_state
  3196  1259  3406               	retlw	6
  3197  125A  3400               	retlw	0
  3198                           
  3199                           ;initializer for _long_press_limit
  3200  125B  34E8               	retlw	232
  3201  125C  3403               	retlw	3
  3202                           
  3203                           ;initializer for _top_push_state
  3204  125D  3406               	retlw	6
  3205  125E  3400               	retlw	0
  3206                           
  3207                           ;initializer for _blink_rate
  3208  125F  3414               	retlw	20
  3209                           
  3210                           ;initializer for _longTap_state
  3211  1260  34FF               	retlw	255
  3212                           
  3213                           ;initializer for _num_taps
  3214  1261  3404               	retlw	4
  3215                           
  3216                           ;initializer for _presetChannel
  3217  1262  3401               	retlw	1
  3218                           
  3219                           ;initializer for _switchBypass_state
  3220  1263  34FF               	retlw	255
  3221                           
  3222                           	psect	idataBANK2
  3223  1213                     __pidataBANK2:	
  3224                           
  3225                           ;initializer for _knob1_prev
  3226  1213  34D0               	retlw	208
  3227  1214  3407               	retlw	7
  3228                           
  3229                           ;initializer for _knob2_prev
  3230  1215  34D0               	retlw	208
  3231  1216  3407               	retlw	7
  3232                           
  3233                           ;initializer for _knob3_prev
  3234  1217  34D0               	retlw	208
  3235  1218  3407               	retlw	7
  3236                           
  3237                           ;initializer for _knob4_prev
  3238  1219  34D0               	retlw	208
  3239  121A  3407               	retlw	7
  3240                           
  3241                           ;initializer for _knob5_prev
  3242  121B  34D0               	retlw	208
  3243  121C  3407               	retlw	7
  3244                           
  3245                           ;initializer for _expressionChannel
  3246  121D  3401               	retlw	1
  3247                           
  3248                           ;initializer for _feedback_state
  3249  121E  34FF               	retlw	255
  3250                           
  3251                           ;initializer for _switchTap_state
  3252  121F  34FF               	retlw	255
  3253                           
  3254                           	psect	idataBANK3
  3255  122F                     __pidataBANK3:	
  3256                           
  3257                           ;initializer for _blink_delay
  3258  122F  3464               	retlw	100
  3259  1230  3400               	retlw	0
  3260                           
  3261                           ;initializer for _delay_time_changed
  3262  1231  3401               	retlw	1
  3263  1232  3400               	retlw	0
  3264                           
  3265                           ;initializer for _mod_delay_time
  3266  1233  34D0               	retlw	208
  3267  1234  3407               	retlw	7
  3268                           
  3269                           ;initializer for _switchBypass_up
  3270  1235  3401               	retlw	1
  3271  1236  3400               	retlw	0
  3272                           
  3273                           ;initializer for _tap_iteration
  3274  1237  3401               	retlw	1
  3275  1238  3400               	retlw	0
  3276                           
  3277                           ;initializer for _blink_state
  3278  1239  3401               	retlw	1
  3279                           
  3280                           ;initializer for _currentBypassState
  3281  123A  34FF               	retlw	255
  3282                           
  3283                           ;initializer for _expSwitchState
  3284  123B  34FF               	retlw	255
  3285                           
  3286                           ;initializer for _expressModeCnst
  3287  123C  3402               	retlw	2
  3288                           
  3289                           ;initializer for _presetModeCnst
  3290  123D  3401               	retlw	1
  3291                           
  3292                           	psect	idataBANK4
  3293  12CC                     __pidataBANK4:	
  3294                           
  3295                           ;initializer for _B25k
  3296  12CC  34FF               	retlw	255
  3297  12CD  34FF               	retlw	255
  3298  12CE  34FF               	retlw	255
  3299  12CF  34DF               	retlw	223
  3300  12D0  34AE               	retlw	174
  3301  12D1  348E               	retlw	142
  3302  12D2  3478               	retlw	120
  3303  12D3  3467               	retlw	103
  3304  12D4  345B               	retlw	91
  3305  12D5  3450               	retlw	80
  3306  12D6  3448               	retlw	72
  3307  12D7  3442               	retlw	66
  3308  12D8  343C               	retlw	60
  3309  12D9  3437               	retlw	55
  3310  12DA  3433               	retlw	51
  3311  12DB  3430               	retlw	48
  3312  12DC  342D               	retlw	45
  3313  12DD  342A               	retlw	42
  3314  12DE  3427               	retlw	39
  3315  12DF  3425               	retlw	37
  3316  12E0  3423               	retlw	35
  3317  12E1  3421               	retlw	33
  3318  12E2  3420               	retlw	32
  3319  12E3  341E               	retlw	30
  3320  12E4  341D               	retlw	29
  3321  12E5  341C               	retlw	28
  3322  12E6  341B               	retlw	27
  3323  12E7  341A               	retlw	26
  3324  12E8  3419               	retlw	25
  3325  12E9  3418               	retlw	24
  3326  12EA  3417               	retlw	23
  3327  12EB  3416               	retlw	22
  3328  12EC  3415               	retlw	21
  3329  12ED  3415               	retlw	21
  3330  12EE  3414               	retlw	20
  3331  12EF  3413               	retlw	19
  3332  12F0  340F               	retlw	15
  3333  12F1  340B               	retlw	11
  3334  12F2  3407               	retlw	7
  3335  12F3  3407               	retlw	7
  3336                           
  3337                           	psect	idataBANK7
  3338  14A4                     __pidataBANK7:	
  3339                           
  3340                           ;initializer for _mod1
  3341  14A4  3400               	retlw	0
  3342  14A5  340A               	retlw	10
  3343  14A6  3414               	retlw	20
  3344  14A7  341E               	retlw	30
  3345  14A8  3428               	retlw	40
  3346  14A9  3432               	retlw	50
  3347  14AA  343A               	retlw	58
  3348  14AB  3442               	retlw	66
  3349  14AC  344A               	retlw	74
  3350  14AD  3450               	retlw	80
  3351  14AE  3456               	retlw	86
  3352  14AF  345B               	retlw	91
  3353  14B0  345F               	retlw	95
  3354  14B1  3461               	retlw	97
  3355  14B2  3463               	retlw	99
  3356  14B3  3464               	retlw	100
  3357  14B4  3463               	retlw	99
  3358  14B5  3461               	retlw	97
  3359  14B6  345F               	retlw	95
  3360  14B7  345B               	retlw	91
  3361  14B8  3456               	retlw	86
  3362  14B9  3450               	retlw	80
  3363  14BA  344A               	retlw	74
  3364  14BB  3442               	retlw	66
  3365  14BC  343A               	retlw	58
  3366  14BD  3432               	retlw	50
  3367  14BE  3428               	retlw	40
  3368  14BF  341E               	retlw	30
  3369  14C0  3414               	retlw	20
  3370  14C1  340A               	retlw	10
  3371  14C2  3400               	retlw	0
  3372  14C3  34F6               	retlw	-10
  3373  14C4  34EC               	retlw	-20
  3374  14C5  34E2               	retlw	-30
  3375  14C6  34D8               	retlw	-40
  3376  14C7  34CE               	retlw	-50
  3377  14C8  34C6               	retlw	-58
  3378  14C9  34BE               	retlw	-66
  3379  14CA  34B6               	retlw	-74
  3380  14CB  34B0               	retlw	-80
  3381  14CC  34AA               	retlw	-86
  3382  14CD  34A5               	retlw	-91
  3383  14CE  34A1               	retlw	-95
  3384  14CF  349F               	retlw	-97
  3385  14D0  349D               	retlw	-99
  3386  14D1  349C               	retlw	-100
  3387  14D2  349D               	retlw	-99
  3388  14D3  349F               	retlw	-97
  3389  14D4  34A1               	retlw	-95
  3390  14D5  34A5               	retlw	-91
  3391  14D6  34AA               	retlw	-86
  3392  14D7  34B0               	retlw	-80
  3393  14D8  34B6               	retlw	-74
  3394  14D9  34BE               	retlw	-66
  3395  14DA  34C6               	retlw	-58
  3396  14DB  34CE               	retlw	-50
  3397  14DC  34D8               	retlw	-40
  3398  14DD  34E2               	retlw	-30
  3399  14DE  34EC               	retlw	-20
  3400  14DF  34F6               	retlw	-10
  3401  14E0  3400               	retlw	0
  3402                           
  3403                           	psect	idataBANK8
  3404  1467                     __pidataBANK8:	
  3405                           
  3406                           ;initializer for _mod2
  3407  1467  3400               	retlw	0
  3408  1468  34FD               	retlw	-3
  3409  1469  34F9               	retlw	-7
  3410  146A  34F6               	retlw	-10
  3411  146B  34F3               	retlw	-13
  3412  146C  34EF               	retlw	-17
  3413  146D  34EC               	retlw	-20
  3414  146E  34E9               	retlw	-23
  3415  146F  34E5               	retlw	-27
  3416  1470  34E2               	retlw	-30
  3417  1471  34DF               	retlw	-33
  3418  1472  34DB               	retlw	-37
  3419  1473  34D8               	retlw	-40
  3420  1474  34D5               	retlw	-43
  3421  1475  34D1               	retlw	-47
  3422  1476  34CE               	retlw	-50
  3423  1477  34CB               	retlw	-53
  3424  1478  34C7               	retlw	-57
  3425  1479  34C4               	retlw	-60
  3426  147A  34C1               	retlw	-63
  3427  147B  34BD               	retlw	-67
  3428  147C  34BA               	retlw	-70
  3429  147D  34B7               	retlw	-73
  3430  147E  34B3               	retlw	-77
  3431  147F  34B0               	retlw	-80
  3432  1480  34AD               	retlw	-83
  3433  1481  34A9               	retlw	-87
  3434  1482  34A6               	retlw	-90
  3435  1483  34A3               	retlw	-93
  3436  1484  349F               	retlw	-97
  3437  1485  349C               	retlw	-100
  3438  1486  3461               	retlw	97
  3439  1487  345D               	retlw	93
  3440  1488  345A               	retlw	90
  3441  1489  3457               	retlw	87
  3442  148A  3453               	retlw	83
  3443  148B  3450               	retlw	80
  3444  148C  344D               	retlw	77
  3445  148D  3449               	retlw	73
  3446  148E  3446               	retlw	70
  3447  148F  3443               	retlw	67
  3448  1490  343F               	retlw	63
  3449  1491  343C               	retlw	60
  3450  1492  3439               	retlw	57
  3451  1493  3435               	retlw	53
  3452  1494  3432               	retlw	50
  3453  1495  342F               	retlw	47
  3454  1496  342B               	retlw	43
  3455  1497  3428               	retlw	40
  3456  1498  3425               	retlw	37
  3457  1499  3421               	retlw	33
  3458  149A  341E               	retlw	30
  3459  149B  341B               	retlw	27
  3460  149C  3417               	retlw	23
  3461  149D  3414               	retlw	20
  3462  149E  3411               	retlw	17
  3463  149F  340D               	retlw	13
  3464  14A0  340A               	retlw	10
  3465  14A1  3407               	retlw	7
  3466  14A2  3403               	retlw	3
  3467  14A3  3400               	retlw	0
  3468                           
  3469                           	psect	idataBANK9
  3470  142A                     __pidataBANK9:	
  3471                           
  3472                           ;initializer for _mod3
  3473  142A  3400               	retlw	0
  3474  142B  3403               	retlw	3
  3475  142C  3407               	retlw	7
  3476  142D  340A               	retlw	10
  3477  142E  340D               	retlw	13
  3478  142F  3411               	retlw	17
  3479  1430  3414               	retlw	20
  3480  1431  3417               	retlw	23
  3481  1432  341B               	retlw	27
  3482  1433  341E               	retlw	30
  3483  1434  3421               	retlw	33
  3484  1435  3425               	retlw	37
  3485  1436  3428               	retlw	40
  3486  1437  342B               	retlw	43
  3487  1438  342F               	retlw	47
  3488  1439  3432               	retlw	50
  3489  143A  3435               	retlw	53
  3490  143B  3439               	retlw	57
  3491  143C  343C               	retlw	60
  3492  143D  343F               	retlw	63
  3493  143E  3443               	retlw	67
  3494  143F  3446               	retlw	70
  3495  1440  3449               	retlw	73
  3496  1441  344D               	retlw	77
  3497  1442  3450               	retlw	80
  3498  1443  3453               	retlw	83
  3499  1444  3457               	retlw	87
  3500  1445  345A               	retlw	90
  3501  1446  345D               	retlw	93
  3502  1447  3461               	retlw	97
  3503  1448  3464               	retlw	100
  3504  1449  349F               	retlw	-97
  3505  144A  34A3               	retlw	-93
  3506  144B  34A6               	retlw	-90
  3507  144C  34A9               	retlw	-87
  3508  144D  34AD               	retlw	-83
  3509  144E  34B0               	retlw	-80
  3510  144F  34B3               	retlw	-77
  3511  1450  34B7               	retlw	-73
  3512  1451  34BA               	retlw	-70
  3513  1452  34BD               	retlw	-67
  3514  1453  34C1               	retlw	-63
  3515  1454  34C4               	retlw	-60
  3516  1455  34C7               	retlw	-57
  3517  1456  34CB               	retlw	-53
  3518  1457  34CE               	retlw	-50
  3519  1458  34D1               	retlw	-47
  3520  1459  34D5               	retlw	-43
  3521  145A  34D8               	retlw	-40
  3522  145B  34DB               	retlw	-37
  3523  145C  34DF               	retlw	-33
  3524  145D  34E2               	retlw	-30
  3525  145E  34E5               	retlw	-27
  3526  145F  34E9               	retlw	-23
  3527  1460  34EC               	retlw	-20
  3528  1461  34EF               	retlw	-17
  3529  1462  34F3               	retlw	-13
  3530  1463  34F6               	retlw	-10
  3531  1464  34F9               	retlw	-7
  3532  1465  34FD               	retlw	-3
  3533  1466  3400               	retlw	0
  3534                           
  3535                           	psect	idataBIGRAM
  3536  03F6                     __pidataBIGRAM:	
  3537                           
  3538                           ;initializer for _delayArray
  3539  03F6  3422               	retlw	34
  3540  03F7  3408               	retlw	8
  3541  03F8  34FC               	retlw	252
  3542  03F9  3407               	retlw	7
  3543  03FA  34D8               	retlw	216
  3544  03FB  3407               	retlw	7
  3545  03FC  34B5               	retlw	181
  3546  03FD  3407               	retlw	7
  3547  03FE  3493               	retlw	147
  3548  03FF  3407               	retlw	7
  3549  0400  3472               	retlw	114
  3550  0401  3407               	retlw	7
  3551  0402  3452               	retlw	82
  3552  0403  3407               	retlw	7
  3553  0404  3434               	retlw	52
  3554  0405  3407               	retlw	7
  3555  0406  3416               	retlw	22
  3556  0407  3407               	retlw	7
  3557  0408  34F9               	retlw	249
  3558  0409  3406               	retlw	6
  3559  040A  34DD               	retlw	221
  3560  040B  3406               	retlw	6
  3561  040C  34C2               	retlw	194
  3562  040D  3406               	retlw	6
  3563  040E  34A8               	retlw	168
  3564  040F  3406               	retlw	6
  3565  0410  348F               	retlw	143
  3566  0411  3406               	retlw	6
  3567  0412  3476               	retlw	118
  3568  0413  3406               	retlw	6
  3569  0414  345E               	retlw	94
  3570  0415  3406               	retlw	6
  3571  0416  3447               	retlw	71
  3572  0417  3406               	retlw	6
  3573  0418  3430               	retlw	48
  3574  0419  3406               	retlw	6
  3575  041A  341A               	retlw	26
  3576  041B  3406               	retlw	6
  3577  041C  3405               	retlw	5
  3578  041D  3406               	retlw	6
  3579  041E  34F0               	retlw	240
  3580  041F  3405               	retlw	5
  3581  0420  34DC               	retlw	220
  3582  0421  3405               	retlw	5
  3583  0422  34C8               	retlw	200
  3584  0423  3405               	retlw	5
  3585  0424  34B5               	retlw	181
  3586  0425  3405               	retlw	5
  3587  0426  34A3               	retlw	163
  3588  0427  3405               	retlw	5
  3589  0428  3490               	retlw	144
  3590  0429  3405               	retlw	5
  3591  042A  347F               	retlw	127
  3592  042B  3405               	retlw	5
  3593  042C  346D               	retlw	109
  3594  042D  3405               	retlw	5
  3595  042E  345C               	retlw	92
  3596  042F  3405               	retlw	5
  3597  0430  344C               	retlw	76
  3598  0431  3405               	retlw	5
  3599  0432  343C               	retlw	60
  3600  0433  3405               	retlw	5
  3601  0434  342C               	retlw	44
  3602  0435  3405               	retlw	5
  3603  0436  341D               	retlw	29
  3604  0437  3405               	retlw	5
  3605  0438  340E               	retlw	14
  3606  0439  3405               	retlw	5
  3607  043A  34FF               	retlw	255
  3608  043B  3404               	retlw	4
  3609  043C  34F1               	retlw	241
  3610  043D  3404               	retlw	4
  3611  043E  34E2               	retlw	226
  3612  043F  3404               	retlw	4
  3613  0440  34D5               	retlw	213
  3614  0441  3404               	retlw	4
  3615  0442  34C7               	retlw	199
  3616  0443  3404               	retlw	4
  3617  0444  34BA               	retlw	186
  3618  0445  3404               	retlw	4
  3619  0446  34AD               	retlw	173
  3620  0447  3404               	retlw	4
  3621  0448  34A1               	retlw	161
  3622  0449  3404               	retlw	4
  3623  044A  3494               	retlw	148
  3624  044B  3404               	retlw	4
  3625  044C  3488               	retlw	136
  3626  044D  3404               	retlw	4
  3627  044E  347D               	retlw	125
  3628  044F  3404               	retlw	4
  3629  0450  3471               	retlw	113
  3630  0451  3404               	retlw	4
  3631  0452  3466               	retlw	102
  3632  0453  3404               	retlw	4
  3633  0454  345A               	retlw	90
  3634  0455  3404               	retlw	4
  3635  0456  3450               	retlw	80
  3636  0457  3404               	retlw	4
  3637  0458  3445               	retlw	69
  3638  0459  3404               	retlw	4
  3639  045A  343A               	retlw	58
  3640  045B  3404               	retlw	4
  3641  045C  3430               	retlw	48
  3642  045D  3404               	retlw	4
  3643  045E  3426               	retlw	38
  3644  045F  3404               	retlw	4
  3645  0460  341C               	retlw	28
  3646  0461  3404               	retlw	4
  3647  0462  3412               	retlw	18
  3648  0463  3404               	retlw	4
  3649  0464  3409               	retlw	9
  3650  0465  3404               	retlw	4
  3651  0466  34FF               	retlw	255
  3652  0467  3403               	retlw	3
  3653  0468  34F6               	retlw	246
  3654  0469  3403               	retlw	3
  3655  046A  34ED               	retlw	237
  3656  046B  3403               	retlw	3
  3657  046C  34E4               	retlw	228
  3658  046D  3403               	retlw	3
  3659  046E  34DC               	retlw	220
  3660  046F  3403               	retlw	3
  3661  0470  34D3               	retlw	211
  3662  0471  3403               	retlw	3
  3663  0472  34CB               	retlw	203
  3664  0473  3403               	retlw	3
  3665  0474  34C2               	retlw	194
  3666  0475  3403               	retlw	3
  3667  0476  34BA               	retlw	186
  3668  0477  3403               	retlw	3
  3669  0478  34B2               	retlw	178
  3670  0479  3403               	retlw	3
  3671  047A  34AA               	retlw	170
  3672  047B  3403               	retlw	3
  3673  047C  34A2               	retlw	162
  3674  047D  3403               	retlw	3
  3675  047E  349B               	retlw	155
  3676  047F  3403               	retlw	3
  3677  0480  3493               	retlw	147
  3678  0481  3403               	retlw	3
  3679  0482  348C               	retlw	140
  3680  0483  3403               	retlw	3
  3681  0484  3485               	retlw	133
  3682  0485  3403               	retlw	3
  3683  0486  347E               	retlw	126
  3684  0487  3403               	retlw	3
  3685  0488  3477               	retlw	119
  3686  0489  3403               	retlw	3
  3687  048A  3470               	retlw	112
  3688  048B  3403               	retlw	3
  3689  048C  3469               	retlw	105
  3690  048D  3403               	retlw	3
  3691  048E  3462               	retlw	98
  3692  048F  3403               	retlw	3
  3693  0490  345C               	retlw	92
  3694  0491  3403               	retlw	3
  3695  0492  3455               	retlw	85
  3696  0493  3403               	retlw	3
  3697  0494  344F               	retlw	79
  3698  0495  3403               	retlw	3
  3699  0496  3448               	retlw	72
  3700  0497  3403               	retlw	3
  3701  0498  3442               	retlw	66
  3702  0499  3403               	retlw	3
  3703  049A  343C               	retlw	60
  3704  049B  3403               	retlw	3
  3705  049C  3436               	retlw	54
  3706  049D  3403               	retlw	3
  3707  049E  3430               	retlw	48
  3708  049F  3403               	retlw	3
  3709  04A0  342A               	retlw	42
  3710  04A1  3403               	retlw	3
  3711  04A2  3424               	retlw	36
  3712  04A3  3403               	retlw	3
  3713  04A4  341F               	retlw	31
  3714  04A5  3403               	retlw	3
  3715  04A6  3419               	retlw	25
  3716  04A7  3403               	retlw	3
  3717  04A8  3413               	retlw	19
  3718  04A9  3403               	retlw	3
  3719  04AA  340E               	retlw	14
  3720  04AB  3403               	retlw	3
  3721  04AC  3409               	retlw	9
  3722  04AD  3403               	retlw	3
  3723  04AE  3403               	retlw	3
  3724  04AF  3403               	retlw	3
  3725  04B0  34FE               	retlw	254
  3726  04B1  3402               	retlw	2
  3727  04B2  34F9               	retlw	249
  3728  04B3  3402               	retlw	2
  3729  04B4  34F4               	retlw	244
  3730  04B5  3402               	retlw	2
  3731  04B6  34EF               	retlw	239
  3732  04B7  3402               	retlw	2
  3733  04B8  34EA               	retlw	234
  3734  04B9  3402               	retlw	2
  3735  04BA  34E5               	retlw	229
  3736  04BB  3402               	retlw	2
  3737  04BC  34E0               	retlw	224
  3738  04BD  3402               	retlw	2
  3739  04BE  34DB               	retlw	219
  3740  04BF  3402               	retlw	2
  3741  04C0  34D7               	retlw	215
  3742  04C1  3402               	retlw	2
  3743  04C2  34D2               	retlw	210
  3744  04C3  3402               	retlw	2
  3745  04C4  34CD               	retlw	205
  3746  04C5  3402               	retlw	2
  3747  04C6  34C9               	retlw	201
  3748  04C7  3402               	retlw	2
  3749  04C8  34C4               	retlw	196
  3750  04C9  3402               	retlw	2
  3751  04CA  34C0               	retlw	192
  3752  04CB  3402               	retlw	2
  3753  04CC  34BC               	retlw	188
  3754  04CD  3402               	retlw	2
  3755  04CE  34B7               	retlw	183
  3756  04CF  3402               	retlw	2
  3757  04D0  34B3               	retlw	179
  3758  04D1  3402               	retlw	2
  3759  04D2  34AF               	retlw	175
  3760  04D3  3402               	retlw	2
  3761  04D4  34AB               	retlw	171
  3762  04D5  3402               	retlw	2
  3763  04D6  34A6               	retlw	166
  3764  04D7  3402               	retlw	2
  3765  04D8  34A2               	retlw	162
  3766  04D9  3402               	retlw	2
  3767  04DA  349E               	retlw	158
  3768  04DB  3402               	retlw	2
  3769  04DC  349A               	retlw	154
  3770  04DD  3402               	retlw	2
  3771  04DE  3497               	retlw	151
  3772  04DF  3402               	retlw	2
  3773  04E0  3493               	retlw	147
  3774  04E1  3402               	retlw	2
  3775  04E2  348F               	retlw	143
  3776  04E3  3402               	retlw	2
  3777  04E4  348B               	retlw	139
  3778  04E5  3402               	retlw	2
  3779  04E6  3487               	retlw	135
  3780  04E7  3402               	retlw	2
  3781  04E8  3484               	retlw	132
  3782  04E9  3402               	retlw	2
  3783  04EA  3480               	retlw	128
  3784  04EB  3402               	retlw	2
  3785  04EC  347C               	retlw	124
  3786  04ED  3402               	retlw	2
  3787  04EE  3479               	retlw	121
  3788  04EF  3402               	retlw	2
  3789  04F0  3475               	retlw	117
  3790  04F1  3402               	retlw	2
  3791  04F2  3472               	retlw	114
  3792  04F3  3402               	retlw	2
  3793  04F4  346E               	retlw	110
  3794  04F5  3402               	retlw	2
  3795  04F6  346B               	retlw	107
  3796  04F7  3402               	retlw	2
  3797  04F8  3467               	retlw	103
  3798  04F9  3402               	retlw	2
  3799  04FA  3464               	retlw	100
  3800  04FB  3402               	retlw	2
  3801  04FC  3461               	retlw	97
  3802  04FD  3402               	retlw	2
  3803  04FE  345E               	retlw	94
  3804  04FF  3402               	retlw	2
  3805  0500  345A               	retlw	90
  3806  0501  3402               	retlw	2
  3807  0502  3457               	retlw	87
  3808  0503  3402               	retlw	2
  3809  0504  3454               	retlw	84
  3810  0505  3402               	retlw	2
  3811  0506  3451               	retlw	81
  3812  0507  3402               	retlw	2
  3813  0508  344E               	retlw	78
  3814  0509  3402               	retlw	2
  3815  050A  344B               	retlw	75
  3816  050B  3402               	retlw	2
  3817  050C  3448               	retlw	72
  3818  050D  3402               	retlw	2
  3819  050E  3445               	retlw	69
  3820  050F  3402               	retlw	2
  3821  0510  3442               	retlw	66
  3822  0511  3402               	retlw	2
  3823  0512  343F               	retlw	63
  3824  0513  3402               	retlw	2
  3825  0514  343C               	retlw	60
  3826  0515  3402               	retlw	2
  3827  0516  3439               	retlw	57
  3828  0517  3402               	retlw	2
  3829  0518  3436               	retlw	54
  3830  0519  3402               	retlw	2
  3831  051A  3433               	retlw	51
  3832  051B  3402               	retlw	2
  3833  051C  3430               	retlw	48
  3834  051D  3402               	retlw	2
  3835  051E  342E               	retlw	46
  3836  051F  3402               	retlw	2
  3837  0520  342B               	retlw	43
  3838  0521  3402               	retlw	2
  3839  0522  3428               	retlw	40
  3840  0523  3402               	retlw	2
  3841  0524  3425               	retlw	37
  3842  0525  3402               	retlw	2
  3843  0526  3423               	retlw	35
  3844  0527  3402               	retlw	2
  3845  0528  3420               	retlw	32
  3846  0529  3402               	retlw	2
  3847  052A  341E               	retlw	30
  3848  052B  3402               	retlw	2
  3849  052C  341B               	retlw	27
  3850  052D  3402               	retlw	2
  3851  052E  3418               	retlw	24
  3852  052F  3402               	retlw	2
  3853  0530  3416               	retlw	22
  3854  0531  3402               	retlw	2
  3855  0532  3413               	retlw	19
  3856  0533  3402               	retlw	2
  3857  0534  3411               	retlw	17
  3858  0535  3402               	retlw	2
  3859  0536  340E               	retlw	14
  3860  0537  3402               	retlw	2
  3861  0538  340C               	retlw	12
  3862  0539  3402               	retlw	2
  3863  053A  340A               	retlw	10
  3864  053B  3402               	retlw	2
  3865  053C  3407               	retlw	7
  3866  053D  3402               	retlw	2
  3867  053E  3405               	retlw	5
  3868  053F  3402               	retlw	2
  3869  0540  3402               	retlw	2
  3870  0541  3402               	retlw	2
  3871  0542  3400               	retlw	0
  3872  0543  3402               	retlw	2
  3873  0544  34FE               	retlw	254
  3874  0545  3401               	retlw	1
  3875  0546  34FB               	retlw	251
  3876  0547  3401               	retlw	1
  3877  0548  34F9               	retlw	249
  3878  0549  3401               	retlw	1
  3879  054A  34F7               	retlw	247
  3880  054B  3401               	retlw	1
  3881  054C  34F5               	retlw	245
  3882  054D  3401               	retlw	1
  3883  054E  34F2               	retlw	242
  3884  054F  3401               	retlw	1
  3885  0550  34F0               	retlw	240
  3886  0551  3401               	retlw	1
  3887  0552  34EE               	retlw	238
  3888  0553  3401               	retlw	1
  3889  0554  34EC               	retlw	236
  3890  0555  3401               	retlw	1
  3891  0556  34EA               	retlw	234
  3892  0557  3401               	retlw	1
  3893  0558  34E8               	retlw	232
  3894  0559  3401               	retlw	1
  3895  055A  34E6               	retlw	230
  3896  055B  3401               	retlw	1
  3897  055C  34E3               	retlw	227
  3898  055D  3401               	retlw	1
  3899  055E  34E1               	retlw	225
  3900  055F  3401               	retlw	1
  3901  0560  34DF               	retlw	223
  3902  0561  3401               	retlw	1
  3903  0562  34DD               	retlw	221
  3904  0563  3401               	retlw	1
  3905  0564  34DB               	retlw	219
  3906  0565  3401               	retlw	1
  3907  0566  34D9               	retlw	217
  3908  0567  3401               	retlw	1
  3909  0568  34D7               	retlw	215
  3910  0569  3401               	retlw	1
  3911  056A  34D5               	retlw	213
  3912  056B  3401               	retlw	1
  3913  056C  34D3               	retlw	211
  3914  056D  3401               	retlw	1
  3915  056E  34D2               	retlw	210
  3916  056F  3401               	retlw	1
  3917  0570  34D0               	retlw	208
  3918  0571  3401               	retlw	1
  3919  0572  34CE               	retlw	206
  3920  0573  3401               	retlw	1
  3921  0574  34CC               	retlw	204
  3922  0575  3401               	retlw	1
  3923  0576  34CA               	retlw	202
  3924  0577  3401               	retlw	1
  3925  0578  34C8               	retlw	200
  3926  0579  3401               	retlw	1
  3927  057A  34C6               	retlw	198
  3928  057B  3401               	retlw	1
  3929  057C  34C4               	retlw	196
  3930  057D  3401               	retlw	1
  3931  057E  34C3               	retlw	195
  3932  057F  3401               	retlw	1
  3933  0580  34C1               	retlw	193
  3934  0581  3401               	retlw	1
  3935  0582  34BF               	retlw	191
  3936  0583  3401               	retlw	1
  3937  0584  34BD               	retlw	189
  3938  0585  3401               	retlw	1
  3939  0586  34BC               	retlw	188
  3940  0587  3401               	retlw	1
  3941  0588  34BA               	retlw	186
  3942  0589  3401               	retlw	1
  3943  058A  34B8               	retlw	184
  3944  058B  3401               	retlw	1
  3945  058C  34B6               	retlw	182
  3946  058D  3401               	retlw	1
  3947  058E  34B5               	retlw	181
  3948  058F  3401               	retlw	1
  3949  0590  34B3               	retlw	179
  3950  0591  3401               	retlw	1
  3951  0592  34B1               	retlw	177
  3952  0593  3401               	retlw	1
  3953  0594  34B0               	retlw	176
  3954  0595  3401               	retlw	1
  3955  0596  34AE               	retlw	174
  3956  0597  3401               	retlw	1
  3957  0598  34AC               	retlw	172
  3958  0599  3401               	retlw	1
  3959  059A  34AB               	retlw	171
  3960  059B  3401               	retlw	1
  3961  059C  34A9               	retlw	169
  3962  059D  3401               	retlw	1
  3963  059E  34A8               	retlw	168
  3964  059F  3401               	retlw	1
  3965  05A0  34A6               	retlw	166
  3966  05A1  3401               	retlw	1
  3967  05A2  34A4               	retlw	164
  3968  05A3  3401               	retlw	1
  3969  05A4  34A3               	retlw	163
  3970  05A5  3401               	retlw	1
  3971  05A6  34A1               	retlw	161
  3972  05A7  3401               	retlw	1
  3973  05A8  34A0               	retlw	160
  3974  05A9  3401               	retlw	1
  3975  05AA  349E               	retlw	158
  3976  05AB  3401               	retlw	1
  3977  05AC  349D               	retlw	157
  3978  05AD  3401               	retlw	1
  3979  05AE  349B               	retlw	155
  3980  05AF  3401               	retlw	1
  3981  05B0  349A               	retlw	154
  3982  05B1  3401               	retlw	1
  3983  05B2  3498               	retlw	152
  3984  05B3  3401               	retlw	1
  3985  05B4  3497               	retlw	151
  3986  05B5  3401               	retlw	1
  3987  05B6  3495               	retlw	149
  3988  05B7  3401               	retlw	1
  3989  05B8  3494               	retlw	148
  3990  05B9  3401               	retlw	1
  3991  05BA  3492               	retlw	146
  3992  05BB  3401               	retlw	1
  3993  05BC  3491               	retlw	145
  3994  05BD  3401               	retlw	1
  3995  05BE  3490               	retlw	144
  3996  05BF  3401               	retlw	1
  3997  05C0  348E               	retlw	142
  3998  05C1  3401               	retlw	1
  3999  05C2  348D               	retlw	141
  4000  05C3  3401               	retlw	1
  4001  05C4  348B               	retlw	139
  4002  05C5  3401               	retlw	1
  4003  05C6  348A               	retlw	138
  4004  05C7  3401               	retlw	1
  4005  05C8  3489               	retlw	137
  4006  05C9  3401               	retlw	1
  4007  05CA  3487               	retlw	135
  4008  05CB  3401               	retlw	1
  4009  05CC  3486               	retlw	134
  4010  05CD  3401               	retlw	1
  4011  05CE  3485               	retlw	133
  4012  05CF  3401               	retlw	1
  4013  05D0  3483               	retlw	131
  4014  05D1  3401               	retlw	1
  4015  05D2  3482               	retlw	130
  4016  05D3  3401               	retlw	1
  4017  05D4  3481               	retlw	129
  4018  05D5  3401               	retlw	1
  4019  05D6  347F               	retlw	127
  4020  05D7  3401               	retlw	1
  4021  05D8  347E               	retlw	126
  4022  05D9  3401               	retlw	1
  4023  05DA  347D               	retlw	125
  4024  05DB  3401               	retlw	1
  4025  05DC  347B               	retlw	123
  4026  05DD  3401               	retlw	1
  4027  05DE  347A               	retlw	122
  4028  05DF  3401               	retlw	1
  4029  05E0  3479               	retlw	121
  4030  05E1  3401               	retlw	1
  4031  05E2  3478               	retlw	120
  4032  05E3  3401               	retlw	1
  4033  05E4  3476               	retlw	118
  4034  05E5  3401               	retlw	1
  4035  05E6  3475               	retlw	117
  4036  05E7  3401               	retlw	1
  4037  05E8  3474               	retlw	116
  4038  05E9  3401               	retlw	1
  4039  05EA  3473               	retlw	115
  4040  05EB  3401               	retlw	1
  4041  05EC  3471               	retlw	113
  4042  05ED  3401               	retlw	1
  4043  05EE  3470               	retlw	112
  4044  05EF  3401               	retlw	1
  4045  05F0  346F               	retlw	111
  4046  05F1  3401               	retlw	1
  4047  05F2  346E               	retlw	110
  4048  05F3  3401               	retlw	1
  4049  05F4  3400               	retlw	0
  4050  05F5  3400               	retlw	0
  4051  05F6  3400               	retlw	0
  4052  05F7  3400               	retlw	0
  4053  05F8  3400               	retlw	0
  4054  05F9  3400               	retlw	0
  4055  05FA  3400               	retlw	0
  4056  05FB  3400               	retlw	0
  4057  05FC  3400               	retlw	0
  4058  05FD  3400               	retlw	0
  4059                           
  4060                           	psect	nvCOMMON
  4061  007D                     __pnvCOMMON:	
  4062  007D                     _UQFront:	
  4063  007D                     	ds	1
  4064                           
  4065                           	psect	nvBANK0
  4066  0069                     __pnvBANK0:	
  4067  0069                     _UQEnd:	
  4068  0069                     	ds	1
  4069                           
  4070                           	psect	nvBANK3
  4071  01EE                     __pnvBANK3:	
  4072  01EE                     _B25kLength:	
  4073  01EE                     	ds	2
  4074  000B                     _INTCONbits	set	11
  4075  0011                     _PIR1bits	set	17
  4076  000C                     _PORTAbits	set	12
  4077  000E                     _PORTCbits	set	14
  4078  000F                     _PORTDbits	set	15
  4079  0010                     _PORTEbits	set	16
  4080  001B                     _PR2	set	27
  4081  001C                     _T2CONbits	set	28
  4082  005F                     _GIE	set	95
  4083  005E                     _PEIE	set	94
  4084  0069                     _RB1	set	105
  4085  008D                     _RCIF	set	141
  4086  009D                     _ADCON0bits	set	157
  4087  009E                     _ADCON1bits	set	158
  4088  009C                     _ADRESH	set	156
  4089  009B                     _ADRESL	set	155
  4090  0095                     _OPTION_REGbits	set	149
  4091  0099                     _OSCCONbits	set	153
  4092  008D                     _TRISBbits	set	141
  4093  008E                     _TRISCbits	set	142
  4094  008F                     _TRISDbits	set	143
  4095  0090                     _TRISEbits	set	144
  4096  048D                     _RCIE	set	1165
  4097  011D                     _APFCONbits	set	285
  4098  010D                     _LATBbits	set	269
  4099  010F                     _LATDbits	set	271
  4100  0190                     _ANSELEbits	set	400
  4101  0192                     _PMADRH	set	402
  4102  0191                     _PMADRL	set	401
  4103  0195                     _PMCON1bits	set	405
  4104  0196                     _PMCON2	set	406
  4105  0194                     _PMDATH	set	404
  4106  0193                     _PMDATL	set	403
  4107  0199                     _RCREG	set	409
  4108  019D                     _RCSTAbits	set	413
  4109  019B                     _SPBRG	set	411
  4110  019A                     _TXREG	set	410
  4111  019E                     _TXSTAbits	set	414
  4112  0291                     _CCPR1	set	657
  4113  0298                     _CCPR2	set	664
  4114  0293                     _CCP1CONbits	set	659
  4115  029A                     _CCP2CONbits	set	666
  4116  029D                     _CCPTMRS0	set	669
  4117  029E                     _CCPTMRS1	set	670
  4118  029F                     _CCPTMRS2	set	671
  4119  0311                     _CCPR3	set	785
  4120  0318                     _CCPR4	set	792
  4121  031C                     _CCPR5	set	796
  4122  0313                     _CCP3CONbits	set	787
  4123  031A                     _CCP4CONbits	set	794
  4124  031E                     _CCP5CONbits	set	798
  4125  030C                     _TRISFbits	set	780
  4126  030D                     _TRISGbits	set	781
  4127  038C                     _LATFbits	set	908
  4128  038D                     _LATGbits	set	909
  4129  040C                     _ANSELFbits	set	1036
  4130  061A                     _CCPR9	set	1562
  4131  061F                     _CCP10CONbits	set	1567
  4132  0613                     _CCP6CONbits	set	1555
  4133  0616                     _CCP7CONbits	set	1558
  4134  0619                     _CCP8CONbits	set	1561
  4135  061C                     _CCP9CONbits	set	1564
  4136                           
  4137                           ; #config settings
  4138  0000                     
  4139                           	psect	cinit
  4140  0336                     start_initialization:	
  4141  0336                     __initialization:		;BIGRAM
  4142                           
  4143                           ; Clear objects allocated to BANK0
  4144  0336  3058               	movlw	low __pbssBANK0
  4145  0337  0084               	movwf	4
  4146  0338  3000               	movlw	high __pbssBANK0
  4147  0339  0085               	movwf	5
  4148  033A  3011               	movlw	17
  4149  033B  00FE               	movwf	btemp
  4150  033C  3000               	movlw	0
  4151  033D  00FF               	movwf	btemp+1
  4152  033E  3192  2207  3183   	fcall	clear_ram0
  4153                           
  4154                           ; Clear objects allocated to BANK2
  4155  0341  3051               	movlw	low __pbssBANK2
  4156  0342  0084               	movwf	4
  4157  0343  3001               	movlw	high __pbssBANK2
  4158  0344  0085               	movwf	5
  4159  0345  300F               	movlw	15
  4160  0346  00FE               	movwf	btemp
  4161  0347  3000               	movlw	0
  4162  0348  00FF               	movwf	btemp+1
  4163  0349  3192  2207  3183   	fcall	clear_ram0
  4164                           
  4165                           ; Clear objects allocated to BANK3
  4166  034C  30A0               	movlw	low __pbssBANK3
  4167  034D  0084               	movwf	4
  4168  034E  3001               	movlw	high __pbssBANK3
  4169  034F  0085               	movwf	5
  4170  0350  303F               	movlw	63
  4171  0351  00FE               	movwf	btemp
  4172  0352  3000               	movlw	0
  4173  0353  00FF               	movwf	btemp+1
  4174  0354  3192  2207  3183   	fcall	clear_ram0
  4175                           
  4176                           ; Clear objects allocated to BANK4
  4177  0357  3048               	movlw	low __pbssBANK4
  4178  0358  0084               	movwf	4
  4179  0359  3002               	movlw	high __pbssBANK4
  4180  035A  0085               	movwf	5
  4181  035B  3014               	movlw	20
  4182  035C  00FE               	movwf	btemp
  4183  035D  3000               	movlw	0
  4184  035E  00FF               	movwf	btemp+1
  4185  035F  3192  2207  3183   	fcall	clear_ram0
  4186                           
  4187                           ; Clear objects allocated to BANK5
  4188  0362  30A0               	movlw	low __pbssBANK5
  4189  0363  0084               	movwf	4
  4190  0364  3002               	movlw	high __pbssBANK5
  4191  0365  0085               	movwf	5
  4192  0366  302C               	movlw	44
  4193  0367  00FE               	movwf	btemp
  4194  0368  3000               	movlw	0
  4195  0369  00FF               	movwf	btemp+1
  4196  036A  3192  2207  3183   	fcall	clear_ram0
  4197                           
  4198                           ; Clear objects allocated to BANK6
  4199  036D  3020               	movlw	low __pbssBANK6
  4200  036E  0084               	movwf	4
  4201  036F  3003               	movlw	high __pbssBANK6
  4202  0370  0085               	movwf	5
  4203  0371  3040               	movlw	64
  4204  0372  00FE               	movwf	btemp
  4205  0373  3000               	movlw	0
  4206  0374  00FF               	movwf	btemp+1
  4207  0375  3192  2207  3183   	fcall	clear_ram0
  4208                           
  4209                           ; Clear objects allocated to BANK10
  4210  0378  3020               	movlw	low __pbssBANK10
  4211  0379  0084               	movwf	4
  4212  037A  3005               	movlw	high __pbssBANK10
  4213  037B  0085               	movwf	5
  4214  037C  3040               	movlw	64
  4215  037D  00FE               	movwf	btemp
  4216  037E  3000               	movlw	0
  4217  037F  00FF               	movwf	btemp+1
  4218  0380  3192  2207  3183   	fcall	clear_ram0
  4219                           
  4220                           ; Initialize objects allocated to BIGRAM
  4221  0383  30F6               	movlw	low __pidataBIGRAM
  4222  0384  0084               	movwf	4
  4223  0385  3083               	movlw	(high __pidataBIGRAM)| (0+128)
  4224  0386  0085               	movwf	5
  4225  0387  30E8               	movlw	low (0+9192)
  4226  0388  0086               	movwf	6
  4227  0389  3023               	movlw	high (0+9192)
  4228  038A  0087               	movwf	7
  4229  038B  3002               	movlw	2
  4230  038C  00FF               	movwf	btemp+1
  4231  038D  3008               	movlw	8
  4232  038E  3191  21FB  3183   	fcall	init_ram
  4233                           
  4234                           ; Initialize objects allocated to BANK0
  4235  0391  3051               	movlw	low __pidataBANK0
  4236  0392  0084               	movwf	4
  4237  0393  3092               	movlw	(high __pidataBANK0)| (0+128)
  4238  0394  0085               	movwf	5
  4239  0395  3045               	movlw	low __pdataBANK0
  4240  0396  0086               	movwf	6
  4241  0397  3000               	movlw	high __pdataBANK0
  4242  0398  0087               	movwf	7
  4243  0399  3000               	movlw	0
  4244  039A  00FF               	movwf	btemp+1
  4245  039B  3013               	movlw	19
  4246  039C  3191  21FB  3183   	fcall	init_ram
  4247                           
  4248                           ; Initialize objects allocated to BANK2
  4249  039F  3013               	movlw	low __pidataBANK2
  4250  03A0  0084               	movwf	4
  4251  03A1  3092               	movlw	(high __pidataBANK2)| (0+128)
  4252  03A2  0085               	movwf	5
  4253  03A3  3060               	movlw	low __pdataBANK2
  4254  03A4  0086               	movwf	6
  4255  03A5  3001               	movlw	high __pdataBANK2
  4256  03A6  0087               	movwf	7
  4257  03A7  3000               	movlw	0
  4258  03A8  00FF               	movwf	btemp+1
  4259  03A9  300D               	movlw	13
  4260  03AA  3191  21FB  3183   	fcall	init_ram
  4261                           
  4262                           ; Initialize objects allocated to BANK3
  4263  03AD  302F               	movlw	low __pidataBANK3
  4264  03AE  0084               	movwf	4
  4265  03AF  3092               	movlw	(high __pidataBANK3)| (0+128)
  4266  03B0  0085               	movwf	5
  4267  03B1  30DF               	movlw	low __pdataBANK3
  4268  03B2  0086               	movwf	6
  4269  03B3  3001               	movlw	high __pdataBANK3
  4270  03B4  0087               	movwf	7
  4271  03B5  3000               	movlw	0
  4272  03B6  00FF               	movwf	btemp+1
  4273  03B7  300F               	movlw	15
  4274  03B8  3191  21FB  3183   	fcall	init_ram
  4275                           
  4276                           ; Initialize objects allocated to BANK4
  4277  03BB  30CC               	movlw	low __pidataBANK4
  4278  03BC  0084               	movwf	4
  4279  03BD  3092               	movlw	(high __pidataBANK4)| (0+128)
  4280  03BE  0085               	movwf	5
  4281  03BF  3020               	movlw	low __pdataBANK4
  4282  03C0  0086               	movwf	6
  4283  03C1  3002               	movlw	high __pdataBANK4
  4284  03C2  0087               	movwf	7
  4285  03C3  3000               	movlw	0
  4286  03C4  00FF               	movwf	btemp+1
  4287  03C5  3028               	movlw	40
  4288  03C6  3191  21FB  3183   	fcall	init_ram
  4289                           
  4290                           ; Initialize objects allocated to BANK7
  4291  03C9  30A4               	movlw	low __pidataBANK7
  4292  03CA  0084               	movwf	4
  4293  03CB  3094               	movlw	(high __pidataBANK7)| (0+128)
  4294  03CC  0085               	movwf	5
  4295  03CD  30A0               	movlw	low __pdataBANK7
  4296  03CE  0086               	movwf	6
  4297  03CF  3003               	movlw	high __pdataBANK7
  4298  03D0  0087               	movwf	7
  4299  03D1  3000               	movlw	0
  4300  03D2  00FF               	movwf	btemp+1
  4301  03D3  303D               	movlw	61
  4302  03D4  3191  21FB  3183   	fcall	init_ram
  4303                           
  4304                           ; Initialize objects allocated to BANK8
  4305  03D7  3067               	movlw	low __pidataBANK8
  4306  03D8  0084               	movwf	4
  4307  03D9  3094               	movlw	(high __pidataBANK8)| (0+128)
  4308  03DA  0085               	movwf	5
  4309  03DB  3020               	movlw	low __pdataBANK8
  4310  03DC  0086               	movwf	6
  4311  03DD  3004               	movlw	high __pdataBANK8
  4312  03DE  0087               	movwf	7
  4313  03DF  3000               	movlw	0
  4314  03E0  00FF               	movwf	btemp+1
  4315  03E1  303D               	movlw	61
  4316  03E2  3191  21FB  3183   	fcall	init_ram
  4317                           
  4318                           ; Initialize objects allocated to BANK9
  4319  03E5  302A               	movlw	low __pidataBANK9
  4320  03E6  0084               	movwf	4
  4321  03E7  3094               	movlw	(high __pidataBANK9)| (0+128)
  4322  03E8  0085               	movwf	5
  4323  03E9  30A0               	movlw	low __pdataBANK9
  4324  03EA  0086               	movwf	6
  4325  03EB  3004               	movlw	high __pdataBANK9
  4326  03EC  0087               	movwf	7
  4327  03ED  3000               	movlw	0
  4328  03EE  00FF               	movwf	btemp+1
  4329  03EF  303D               	movlw	61
  4330  03F0  3191  21FB         	fcall	init_ram
  4331  03F2                     end_of_initialization:	
  4332                           ;End of C runtime variable initialization code
  4333                           
  4334  03F2                     __end_of__initialization:	
  4335  03F2  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4336  03F3  0020               	movlb	0
  4337  03F4  318B  2B55         	ljmp	_main	;jump to C main() function
  4338                           
  4339                           	psect	bssBANK0
  4340  0058                     __pbssBANK0:	
  4341  0058                     _sub_timer:	
  4342  0058                     	ds	4
  4343  005C                     _tap_timer:	
  4344  005C                     	ds	4
  4345  0060                     _timer:	
  4346  0060                     	ds	4
  4347  0064                     _doubleTap_state:	
  4348  0064                     	ds	1
  4349  0065                     _mode2_state:	
  4350  0065                     	ds	1
  4351  0066                     _presetSaveMode:	
  4352  0066                     	ds	1
  4353  0067                     _suspend_blink:	
  4354  0067                     	ds	1
  4355  0068                     _switchTap_pressed:	
  4356  0068                     	ds	1
  4357                           
  4358                           	psect	dataBANK0
  4359  0045                     __pdataBANK0:	
  4360  0045                     _baseline_delay_time:	
  4361  0045                     	ds	4
  4362  0049                     _delay_time:	
  4363  0049                     	ds	4
  4364  004D                     _bottom_push_state:	
  4365  004D                     	ds	2
  4366  004F                     _long_press_limit:	
  4367  004F                     	ds	2
  4368  0051                     _top_push_state:	
  4369  0051                     	ds	2
  4370  0053                     _blink_rate:	
  4371  0053                     	ds	1
  4372  0054                     _longTap_state:	
  4373  0054                     	ds	1
  4374  0055                     _num_taps:	
  4375  0055                     	ds	1
  4376  0056                     _presetChannel:	
  4377  0056                     	ds	1
  4378  0057                     _switchBypass_state:	
  4379  0057                     	ds	1
  4380                           
  4381                           	psect	bssBANK2
  4382  0151                     __pbssBANK2:	
  4383  0151                     _delay_counter:	
  4384  0151                     	ds	2
  4385  0153                     _feedback_timer:	
  4386  0153                     	ds	2
  4387  0155                     _longTap_timer:	
  4388  0155                     	ds	2
  4389  0157                     _mod_counter:	
  4390  0157                     	ds	2
  4391  0159                     _bottomTactile_pressed:	
  4392  0159                     	ds	1
  4393  015A                     _bypass_turning_on:	
  4394  015A                     	ds	1
  4395  015B                     _feedback_start:	
  4396  015B                     	ds	1
  4397  015C                     _longTap_start:	
  4398  015C                     	ds	1
  4399  015D                     _preset_blink:	
  4400  015D                     	ds	1
  4401  015E                     _switchTap_down:	
  4402  015E                     	ds	1
  4403  015F                     _topTactile_pressed:	
  4404  015F                     	ds	1
  4405                           
  4406                           	psect	dataBANK2
  4407  0160                     __pdataBANK2:	
  4408  0160                     _knob1_prev:	
  4409  0160                     	ds	2
  4410  0162                     _knob2_prev:	
  4411  0162                     	ds	2
  4412  0164                     _knob3_prev:	
  4413  0164                     	ds	2
  4414  0166                     _knob4_prev:	
  4415  0166                     	ds	2
  4416  0168                     _knob5_prev:	
  4417  0168                     	ds	2
  4418  016A                     _expressionChannel:	
  4419  016A                     	ds	1
  4420  016B                     _feedback_state:	
  4421  016B                     	ds	1
  4422  016C                     _switchTap_state:	
  4423  016C                     	ds	1
  4424                           
  4425                           	psect	bssBANK3
  4426  01A0                     __pbssBANK3:	
  4427  01A0                     USARTWriteInt@F3536:	
  4428  01A0                     	ds	5
  4429  01A5                     _double_timer:	
  4430  01A5                     	ds	4
  4431  01A9                     _ledState:	
  4432  01A9                     	ds	4
  4433  01AD                     _mod_timer:	
  4434  01AD                     	ds	4
  4435  01B1                     _tap_total:	
  4436  01B1                     	ds	4
  4437  01B5                     _test_timer:	
  4438  01B5                     	ds	4
  4439  01B9                     _adjust_sub_delay:	
  4440  01B9                     	ds	2
  4441  01BB                     _adjusted_pot_value:	
  4442  01BB                     	ds	2
  4443  01BD                     _debounce_bypass:	
  4444  01BD                     	ds	2
  4445  01BF                     _debounce_count:	
  4446  01BF                     	ds	2
  4447  01C1                     _debounce_mode1:	
  4448  01C1                     	ds	2
  4449  01C3                     _debounce_mode2:	
  4450  01C3                     	ds	2
  4451  01C5                     _delayfound:	
  4452  01C5                     	ds	2
  4453  01C7                     _errno:	
  4454  01C7                     	ds	2
  4455  01C9                     _knob_1_pos:	
  4456  01C9                     	ds	2
  4457  01CB                     _knob_2_pos:	
  4458  01CB                     	ds	2
  4459  01CD                     _knob_3_pos:	
  4460  01CD                     	ds	2
  4461  01CF                     _knob_4_pos:	
  4462  01CF                     	ds	2
  4463  01D1                     _knob_5_pos:	
  4464  01D1                     	ds	2
  4465  01D3                     _mod_value:	
  4466  01D3                     	ds	2
  4467  01D5                     _reset_sub_delay:	
  4468  01D5                     	ds	2
  4469  01D7                     _switchBypass_pressed:	
  4470  01D7                     	ds	2
  4471  01D9                     _switchBypass_toggle:	
  4472  01D9                     	ds	2
  4473  01DB                     _feedbackTriggered:	
  4474  01DB                     	ds	1
  4475  01DC                     _iCnt:	
  4476  01DC                     	ds	1
  4477  01DD                     _mode1_state:	
  4478  01DD                     	ds	1
  4479  01DE                     _preset_programmning_on:	
  4480  01DE                     	ds	1
  4481                           
  4482                           	psect	dataBANK3
  4483  01DF                     __pdataBANK3:	
  4484  01DF                     _blink_delay:	
  4485  01DF                     	ds	2
  4486  01E1                     _delay_time_changed:	
  4487  01E1                     	ds	2
  4488  01E3                     _mod_delay_time:	
  4489  01E3                     	ds	2
  4490  01E5                     _switchBypass_up:	
  4491  01E5                     	ds	2
  4492  01E7                     _tap_iteration:	
  4493  01E7                     	ds	2
  4494  01E9                     _blink_state:	
  4495  01E9                     	ds	1
  4496  01EA                     _currentBypassState:	
  4497  01EA                     	ds	1
  4498  01EB                     _expSwitchState:	
  4499  01EB                     	ds	1
  4500  01EC                     _expressModeCnst:	
  4501  01EC                     	ds	1
  4502  01ED                     _presetModeCnst:	
  4503  01ED                     	ds	1
  4504                           
  4505                           	psect	bssBANK4
  4506  0248                     __pbssBANK4:	
  4507  0248                     _tap_history:	
  4508  0248                     	ds	20
  4509                           
  4510                           	psect	dataBANK4
  4511  0220                     __pdataBANK4:	
  4512  0220                     _B25k:	
  4513  0220                     	ds	40
  4514                           
  4515                           	psect	bssBANK5
  4516  02A0                     __pbssBANK5:	
  4517  02A0                     _tap:	
  4518  02A0                     	ds	44
  4519                           
  4520                           	psect	bssBANK6
  4521  0320                     __pbssBANK6:	
  4522  0320                     _URBuff:	
  4523  0320                     	ds	64
  4524                           
  4525                           	psect	dataBANK7
  4526  03A0                     __pdataBANK7:	
  4527  03A0                     _mod1:	
  4528  03A0                     	ds	61
  4529                           
  4530                           	psect	dataBANK8
  4531  0420                     __pdataBANK8:	
  4532  0420                     _mod2:	
  4533  0420                     	ds	61
  4534                           
  4535                           	psect	dataBANK9
  4536  04A0                     __pdataBANK9:	
  4537  04A0                     _mod3:	
  4538  04A0                     	ds	61
  4539                           
  4540                           	psect	bssBANK10
  4541  0520                     __pbssBANK10:	
  4542  0520                     _myBuf:	
  4543  0520                     	ds	64
  4544                           
  4545                           	psect	clrtext
  4546  1207                     clear_ram0:	
  4547                           ;	Called with FSR0 containing the base address, and
  4548                           ;	btemp/btemp+1 has the size to clear
  4549                           
  4550  1207  0064               	clrwdt	;clear the watchdog before getting into this loop
  4551  1208                     clrloop0:	
  4552  1208  0180               	clrf	0	;clear RAM location pointed to by FSR
  4553  1209  3101               	addfsr 0,1
  4554  120A  3001               	movlw	1
  4555  120B  02FE               	subwf	126,f
  4556  120C  3000               	movlw	0
  4557  120D  3BFF               	subwfb	127,f
  4558  120E  087F               	movf	127,w
  4559  120F  047E               	iorwf	126,w
  4560  1210  1903               	btfsc	3,2
  4561  1211  3400               	retlw	0	;all done for this memory range, return
  4562  1212  2A08               	goto	clrloop0	;have we reached the end yet?
  4563                           
  4564                           	psect	inittext
  4565  11FB                     init_ram:	
  4566  11FB  00FE               	movwf	126
  4567  11FC                     initloop:	
  4568  11FC  0012               	moviw fsr0++
  4569  11FD  001E               	movwi fsr1++
  4570  11FE  3001               	movlw	1
  4571  11FF  02FE               	subwf	126,f
  4572  1200  3000               	movlw	0
  4573  1201  3BFF               	subwfb	127,f
  4574  1202  087F               	movf	127,w
  4575  1203  047E               	iorwf	126,w
  4576  1204  1903               	btfsc	3,2
  4577  1205  3400               	retlw	0
  4578  1206  29FC               	goto	initloop
  4579                           
  4580                           	psect	cstackBANK4
  4581  025C                     __pcstackBANK4:	
  4582  025C                     main@i:	
  4583                           
  4584                           ; 2 bytes @ 0x0
  4585  025C                     	ds	2
  4586  025E                     main@i_385:	
  4587                           
  4588                           ; 2 bytes @ 0x2
  4589  025E                     	ds	2
  4590  0260                     main@i_386:	
  4591                           
  4592                           ; 2 bytes @ 0x4
  4593  0260                     	ds	2
  4594  0262                     main@i_387:	
  4595                           
  4596                           ; 2 bytes @ 0x6
  4597  0262                     	ds	2
  4598                           
  4599                           	psect	cstackBANK2
  4600  0120                     __pcstackBANK2:	
  4601  0120                     ___fttol@sign1:	
  4602                           
  4603                           ; 1 bytes @ 0x0
  4604  0120                     	ds	1
  4605  0121                     ___fttol@lval:	
  4606                           
  4607                           ; 4 bytes @ 0x1
  4608  0121                     	ds	4
  4609  0125                     ___fttol@exp1:	
  4610                           
  4611                           ; 1 bytes @ 0x5
  4612  0125                     	ds	1
  4613  0126                     ?___altoft:	
  4614  0126                     ___altoft@c:	
  4615                           ; 3 bytes @ 0x6
  4616                           
  4617                           
  4618                           ; 4 bytes @ 0x6
  4619  0126                     	ds	4
  4620  012A                     ??___altoft:	
  4621                           
  4622                           ; 1 bytes @ 0xA
  4623  012A                     	ds	2
  4624  012C                     ___altoft@exp:	
  4625                           
  4626                           ; 1 bytes @ 0xC
  4627  012C                     	ds	1
  4628  012D                     ___altoft@sign:	
  4629                           
  4630                           ; 1 bytes @ 0xD
  4631  012D                     	ds	1
  4632  012E                     ?_trunc:	
  4633  012E                     trunc@x:	
  4634                           ; 3 bytes @ 0xE
  4635                           
  4636                           
  4637                           ; 3 bytes @ 0xE
  4638  012E                     	ds	3
  4639  0131                     trunc@i:	
  4640                           
  4641                           ; 3 bytes @ 0x11
  4642  0131                     	ds	3
  4643  0134                     trunc@expon:	
  4644                           
  4645                           ; 2 bytes @ 0x14
  4646  0134                     	ds	2
  4647  0136                     ?_set_subdivision:	
  4648  0136                     set_subdivision@x:	
  4649                           ; 2 bytes @ 0x16
  4650                           
  4651                           
  4652                           ; 2 bytes @ 0x16
  4653  0136                     	ds	2
  4654  0138                     set_subdivision@y:	
  4655                           
  4656                           ; 2 bytes @ 0x18
  4657  0138                     	ds	2
  4658  013A                     ??_set_subdivision:	
  4659                           
  4660                           ; 1 bytes @ 0x1A
  4661  013A                     	ds	3
  4662  013D                     set_subdivision@scalar:	
  4663                           
  4664                           ; 3 bytes @ 0x1D
  4665  013D                     	ds	3
  4666  0140                     set_subdivision@tmpX:	
  4667                           
  4668                           ; 2 bytes @ 0x20
  4669  0140                     	ds	2
  4670  0142                     ??_main:	
  4671                           
  4672                           ; 1 bytes @ 0x22
  4673  0142                     	ds	15
  4674                           
  4675                           	psect	cstackBANK1
  4676  00A0                     __pcstackBANK1:	
  4677  00A0                     ?_set_leds_top:	
  4678  00A0                     ?_USARTInit:	
  4679                           ; 1 bytes @ 0x0
  4680                           
  4681  00A0                     ??_ConfigureOscillator:	
  4682                           ; 1 bytes @ 0x0
  4683                           
  4684  00A0                     ??_InitApp:	
  4685                           ; 1 bytes @ 0x0
  4686                           
  4687  00A0                     ??_InitializeTaps:	
  4688                           ; 1 bytes @ 0x0
  4689                           
  4690  00A0                     ??_init_adc:	
  4691                           ; 1 bytes @ 0x0
  4692                           
  4693  00A0                     ??_init_pwm:	
  4694                           ; 1 bytes @ 0x0
  4695                           
  4696  00A0                     ??_init_timer2:	
  4697                           ; 1 bytes @ 0x0
  4698                           
  4699  00A0                     ??_init_timer0:	
  4700                           ; 1 bytes @ 0x0
  4701                           
  4702  00A0                     ?_set_leds_bottom:	
  4703                           ; 1 bytes @ 0x0
  4704                           
  4705  00A0                     ?_updateSwitchBypassState:	
  4706                           ; 1 bytes @ 0x0
  4707                           
  4708  00A0                     ?_adc_convert:	
  4709                           ; 1 bytes @ 0x0
  4710                           
  4711  00A0                     ?_FLASH_ReadWord:	
  4712                           ; 2 bytes @ 0x0
  4713                           
  4714  00A0                     ?_getSwitchBypassState:	
  4715                           ; 2 bytes @ 0x0
  4716                           
  4717  00A0                     ?___ftpack:	
  4718                           ; 2 bytes @ 0x0
  4719                           
  4720  00A0                     ?_frexp:	
  4721                           ; 3 bytes @ 0x0
  4722                           
  4723  00A0                     ?___ftneg:	
  4724                           ; 3 bytes @ 0x0
  4725                           
  4726  00A0                     ?___lmul:	
  4727                           ; 3 bytes @ 0x0
  4728                           
  4729  00A0                     FLASH_ReadWord@flashAddr:	
  4730                           ; 4 bytes @ 0x0
  4731                           
  4732  00A0                     set_leds_top@x:	
  4733                           ; 2 bytes @ 0x0
  4734                           
  4735  00A0                     set_leds_bottom@x:	
  4736                           ; 2 bytes @ 0x0
  4737                           
  4738  00A0                     updateSwitchBypassState@state:	
  4739                           ; 2 bytes @ 0x0
  4740                           
  4741  00A0                     USARTInit@baud_rate:	
  4742                           ; 2 bytes @ 0x0
  4743                           
  4744  00A0                     ___ftpack@arg:	
  4745                           ; 2 bytes @ 0x0
  4746                           
  4747  00A0                     ___ftneg@f1:	
  4748                           ; 3 bytes @ 0x0
  4749                           
  4750  00A0                     frexp@value:	
  4751                           ; 3 bytes @ 0x0
  4752                           
  4753  00A0                     ___lmul@multiplier:	
  4754                           ; 3 bytes @ 0x0
  4755                           
  4756                           
  4757                           ; 4 bytes @ 0x0
  4758  00A0                     	ds	1
  4759  00A1                     InitializeTaps@itap:	
  4760                           
  4761                           ; 2 bytes @ 0x1
  4762  00A1                     	ds	1
  4763  00A2                     ??_USARTInit:	
  4764  00A2                     ??_adc_convert:	
  4765                           ; 1 bytes @ 0x2
  4766                           
  4767  00A2                     ??_FLASH_ReadWord:	
  4768                           ; 1 bytes @ 0x2
  4769                           
  4770  00A2                     ??_set_leds_bottom:	
  4771                           ; 1 bytes @ 0x2
  4772                           
  4773  00A2                     ??_updateSwitchBypassState:	
  4774                           ; 1 bytes @ 0x2
  4775                           
  4776  00A2                     ??_getSwitchBypassState:	
  4777                           ; 1 bytes @ 0x2
  4778                           
  4779  00A2                     FLASH_ReadWord@GIEBitValue:	
  4780                           ; 1 bytes @ 0x2
  4781                           
  4782  00A2                     set_leds_top@ledState:	
  4783                           ; 1 bytes @ 0x2
  4784                           
  4785                           
  4786                           ; 2 bytes @ 0x2
  4787  00A2                     	ds	1
  4788  00A3                     ??___ftneg:	
  4789  00A3                     adc_convert@channel:	
  4790                           ; 1 bytes @ 0x3
  4791                           
  4792  00A3                     ___ftpack@exp:	
  4793                           ; 1 bytes @ 0x3
  4794                           
  4795  00A3                     frexp@eptr:	
  4796                           ; 1 bytes @ 0x3
  4797                           
  4798                           
  4799                           ; 1 bytes @ 0x3
  4800  00A3                     	ds	1
  4801  00A4                     ??_set_leds_top:	
  4802  00A4                     ??_ReadSavedSettings:	
  4803                           ; 1 bytes @ 0x4
  4804                           
  4805  00A4                     ??_frexp:	
  4806                           ; 1 bytes @ 0x4
  4807                           
  4808  00A4                     ___ftpack@sign:	
  4809                           ; 1 bytes @ 0x4
  4810                           
  4811  00A4                     ___lmul@multiplicand:	
  4812                           ; 1 bytes @ 0x4
  4813                           
  4814                           
  4815                           ; 4 bytes @ 0x4
  4816  00A4                     	ds	1
  4817  00A5                     ??___ftpack:	
  4818                           
  4819                           ; 1 bytes @ 0x5
  4820  00A5                     	ds	3
  4821  00A8                     ??___lmul:	
  4822  00A8                     ?___awtoft:	
  4823                           ; 1 bytes @ 0x8
  4824                           
  4825  00A8                     ?___ftadd:	
  4826                           ; 3 bytes @ 0x8
  4827                           
  4828  00A8                     ___awtoft@c:	
  4829                           ; 3 bytes @ 0x8
  4830                           
  4831  00A8                     ___ftadd@f1:	
  4832                           ; 2 bytes @ 0x8
  4833                           
  4834  00A8                     ___lmul@product:	
  4835                           ; 3 bytes @ 0x8
  4836                           
  4837                           
  4838                           ; 4 bytes @ 0x8
  4839  00A8                     	ds	3
  4840  00AB                     ??___awtoft:	
  4841  00AB                     ___ftadd@f2:	
  4842                           ; 1 bytes @ 0xB
  4843                           
  4844                           
  4845                           ; 3 bytes @ 0xB
  4846  00AB                     	ds	1
  4847  00AC                     ?_wait_ms:	
  4848  00AC                     wait_ms@timeSec:	
  4849                           ; 1 bytes @ 0xC
  4850                           
  4851                           
  4852                           ; 2 bytes @ 0xC
  4853  00AC                     	ds	1
  4854  00AD                     ___awtoft@sign:	
  4855                           
  4856                           ; 1 bytes @ 0xD
  4857  00AD                     	ds	1
  4858  00AE                     ??_wait_ms:	
  4859  00AE                     ??___ftadd:	
  4860                           ; 1 bytes @ 0xE
  4861                           
  4862  00AE                     wait_ms@timemsl:	
  4863                           ; 1 bytes @ 0xE
  4864                           
  4865                           
  4866                           ; 4 bytes @ 0xE
  4867  00AE                     	ds	4
  4868  00B2                     ?_setSwitchBypassState:	
  4869  00B2                     ___ftadd@sign:	
  4870                           ; 1 bytes @ 0x12
  4871                           
  4872  00B2                     setSwitchBypassState@f_state:	
  4873                           ; 1 bytes @ 0x12
  4874                           
  4875                           
  4876                           ; 2 bytes @ 0x12
  4877  00B2                     	ds	1
  4878  00B3                     ___ftadd@exp2:	
  4879                           
  4880                           ; 1 bytes @ 0x13
  4881  00B3                     	ds	1
  4882  00B4                     ??_setSwitchBypassState:	
  4883  00B4                     ___ftadd@exp1:	
  4884                           ; 1 bytes @ 0x14
  4885                           
  4886                           
  4887                           ; 1 bytes @ 0x14
  4888  00B4                     	ds	1
  4889  00B5                     ?___ftmul:	
  4890  00B5                     ___ftmul@f1:	
  4891                           ; 3 bytes @ 0x15
  4892                           
  4893                           
  4894                           ; 3 bytes @ 0x15
  4895  00B5                     	ds	1
  4896  00B6                     ??_initSwitchBypass:	
  4897  00B6                     initSwitchBypass@initState:	
  4898                           ; 1 bytes @ 0x16
  4899                           
  4900                           
  4901                           ; 2 bytes @ 0x16
  4902  00B6                     	ds	2
  4903  00B8                     ___ftmul@f2:	
  4904                           
  4905                           ; 3 bytes @ 0x18
  4906  00B8                     	ds	3
  4907  00BB                     ??___ftmul:	
  4908                           
  4909                           ; 1 bytes @ 0x1B
  4910  00BB                     	ds	4
  4911  00BF                     ___ftmul@exp:	
  4912                           
  4913                           ; 1 bytes @ 0x1F
  4914  00BF                     	ds	1
  4915  00C0                     ___ftmul@f3_as_product:	
  4916                           
  4917                           ; 3 bytes @ 0x20
  4918  00C0                     	ds	3
  4919  00C3                     ___ftmul@cntr:	
  4920                           
  4921                           ; 1 bytes @ 0x23
  4922  00C3                     	ds	1
  4923  00C4                     ___ftmul@sign:	
  4924                           
  4925                           ; 1 bytes @ 0x24
  4926  00C4                     	ds	1
  4927  00C5                     ?___ftdiv:	
  4928  00C5                     ___ftdiv@f2:	
  4929                           ; 3 bytes @ 0x25
  4930                           
  4931                           
  4932                           ; 3 bytes @ 0x25
  4933  00C5                     	ds	3
  4934  00C8                     ___ftdiv@f1:	
  4935                           
  4936                           ; 3 bytes @ 0x28
  4937  00C8                     	ds	3
  4938  00CB                     ??___ftdiv:	
  4939                           
  4940                           ; 1 bytes @ 0x2B
  4941  00CB                     	ds	4
  4942  00CF                     ___ftdiv@cntr:	
  4943                           
  4944                           ; 1 bytes @ 0x2F
  4945  00CF                     	ds	1
  4946  00D0                     ___ftdiv@f3:	
  4947                           
  4948                           ; 3 bytes @ 0x30
  4949  00D0                     	ds	3
  4950  00D3                     ___ftdiv@exp:	
  4951                           
  4952                           ; 1 bytes @ 0x33
  4953  00D3                     	ds	1
  4954  00D4                     ___ftdiv@sign:	
  4955                           
  4956                           ; 1 bytes @ 0x34
  4957  00D4                     	ds	1
  4958  00D5                     ?_map:	
  4959  00D5                     map@x:	
  4960                           ; 3 bytes @ 0x35
  4961                           
  4962                           
  4963                           ; 3 bytes @ 0x35
  4964  00D5                     	ds	3
  4965  00D8                     map@in_min:	
  4966                           
  4967                           ; 3 bytes @ 0x38
  4968  00D8                     	ds	3
  4969  00DB                     map@in_max:	
  4970                           
  4971                           ; 3 bytes @ 0x3B
  4972  00DB                     	ds	3
  4973  00DE                     map@out_min:	
  4974                           
  4975                           ; 3 bytes @ 0x3E
  4976  00DE                     	ds	3
  4977  00E1                     map@out_max:	
  4978                           
  4979                           ; 3 bytes @ 0x41
  4980  00E1                     	ds	3
  4981  00E4                     ??_map:	
  4982  00E4                     _map$2555:	
  4983                           ; 1 bytes @ 0x44
  4984                           
  4985                           
  4986                           ; 3 bytes @ 0x44
  4987  00E4                     	ds	3
  4988  00E7                     ?___fttol:	
  4989  00E7                     ___fttol@f1:	
  4990                           ; 4 bytes @ 0x47
  4991                           
  4992                           
  4993                           ; 3 bytes @ 0x47
  4994  00E7                     	ds	4
  4995  00EB                     ??___fttol:	
  4996                           
  4997                           ; 1 bytes @ 0x4B
  4998  00EB                     	ds	4
  4999  00EF                     ??_trunc:	
  5000                           
  5001                           ; 1 bytes @ 0x4F
  5002  00EF                     	ds	1
  5003                           
  5004                           	psect	cstackCOMMON
  5005  0070                     __pcstackCOMMON:	
  5006  0070                     ?_USARTHandleRxInt:	
  5007  0070                     ??_USARTHandleRxInt:	
  5008                           ; 1 bytes @ 0x0
  5009                           
  5010  0070                     ?_ConfigureOscillator:	
  5011                           ; 1 bytes @ 0x0
  5012                           
  5013  0070                     ?_InitApp:	
  5014                           ; 1 bytes @ 0x0
  5015                           
  5016  0070                     ?_InitializeTaps:	
  5017                           ; 1 bytes @ 0x0
  5018                           
  5019  0070                     ?_initSwitchBypass:	
  5020                           ; 1 bytes @ 0x0
  5021                           
  5022  0070                     ?_ReadSavedSettings:	
  5023                           ; 1 bytes @ 0x0
  5024                           
  5025  0070                     ?_init_adc:	
  5026                           ; 1 bytes @ 0x0
  5027                           
  5028  0070                     ?_init_pwm:	
  5029                           ; 1 bytes @ 0x0
  5030                           
  5031  0070                     ?_init_timer2:	
  5032                           ; 1 bytes @ 0x0
  5033                           
  5034  0070                     ?_init_timer0:	
  5035                           ; 1 bytes @ 0x0
  5036                           
  5037  0070                     ?_isr:	
  5038                           ; 1 bytes @ 0x0
  5039                           
  5040  0070                     ?_main:	
  5041                           ; 1 bytes @ 0x0
  5042                           
  5043  0070                     ?i1_set_leds_top:	
  5044                           ; 1 bytes @ 0x0
  5045                           
  5046  0070                     ?___awdiv:	
  5047                           ; 1 bytes @ 0x0
  5048                           
  5049  0070                     ?i1___lmul:	
  5050                           ; 2 bytes @ 0x0
  5051                           
  5052  0070                     ___awdiv@divisor:	
  5053                           ; 4 bytes @ 0x0
  5054                           
  5055  0070                     i1set_leds_top@x:	
  5056                           ; 2 bytes @ 0x0
  5057                           
  5058  0070                     i1___lmul@multiplier:	
  5059                           ; 2 bytes @ 0x0
  5060                           
  5061                           
  5062                           ; 4 bytes @ 0x0
  5063  0070                     	ds	2
  5064  0072                     ___awdiv@dividend:	
  5065  0072                     i1set_leds_top@ledState:	
  5066                           ; 2 bytes @ 0x2
  5067                           
  5068                           
  5069                           ; 2 bytes @ 0x2
  5070  0072                     	ds	2
  5071  0074                     ??___awdiv:	
  5072  0074                     ??i1_set_leds_top:	
  5073                           ; 1 bytes @ 0x4
  5074                           
  5075  0074                     USARTHandleRxInt@data:	
  5076                           ; 1 bytes @ 0x4
  5077                           
  5078  0074                     i1___lmul@multiplicand:	
  5079                           ; 1 bytes @ 0x4
  5080                           
  5081                           
  5082                           ; 4 bytes @ 0x4
  5083  0074                     	ds	1
  5084  0075                     ___awdiv@counter:	
  5085                           
  5086                           ; 1 bytes @ 0x5
  5087  0075                     	ds	1
  5088  0076                     ___awdiv@sign:	
  5089                           
  5090                           ; 1 bytes @ 0x6
  5091  0076                     	ds	1
  5092  0077                     ___awdiv@quotient:	
  5093                           
  5094                           ; 2 bytes @ 0x7
  5095  0077                     	ds	1
  5096  0078                     ??i1___lmul:	
  5097  0078                     i1___lmul@product:	
  5098                           ; 1 bytes @ 0x8
  5099                           
  5100                           
  5101                           ; 4 bytes @ 0x8
  5102  0078                     	ds	4
  5103  007C                     ??___aldiv:	
  5104                           
  5105                           ; 1 bytes @ 0xC
  5106  007C                     	ds	1
  5107                           
  5108                           	psect	cstackBANK0
  5109  0020                     __pcstackBANK0:	
  5110  0020                     ?___aldiv:	
  5111  0020                     ___aldiv@divisor:	
  5112                           ; 4 bytes @ 0x0
  5113                           
  5114                           
  5115                           ; 4 bytes @ 0x0
  5116  0020                     	ds	4
  5117  0024                     ___aldiv@dividend:	
  5118                           
  5119                           ; 4 bytes @ 0x4
  5120  0024                     	ds	4
  5121  0028                     ___aldiv@counter:	
  5122                           
  5123                           ; 1 bytes @ 0x8
  5124  0028                     	ds	1
  5125  0029                     ___aldiv@sign:	
  5126                           
  5127                           ; 1 bytes @ 0x9
  5128  0029                     	ds	1
  5129  002A                     ___aldiv@quotient:	
  5130                           
  5131                           ; 4 bytes @ 0xA
  5132  002A                     	ds	4
  5133  002E                     ?_modulation:	
  5134  002E                     modulation@x:	
  5135                           ; 4 bytes @ 0xE
  5136                           
  5137                           
  5138                           ; 4 bytes @ 0xE
  5139  002E                     	ds	4
  5140  0032                     modulation@y:	
  5141                           
  5142                           ; 4 bytes @ 0x12
  5143  0032                     	ds	4
  5144  0036                     ??_modulation:	
  5145                           
  5146                           ; 1 bytes @ 0x16
  5147  0036                     	ds	4
  5148  003A                     ??_isr:	
  5149                           
  5150                           ; 1 bytes @ 0x1A
  5151  003A                     	ds	9
  5152  0043                     isr@tmpSubDelay:	
  5153                           
  5154                           ; 2 bytes @ 0x23
  5155  0043                     	ds	2
  5156                           
  5157                           	psect	maintext
  5158  0B55                     __pmaintext:	
  5159 ;;
  5160 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5161 ;;
  5162 ;; *************** function _main *****************
  5163 ;; Defined at:
  5164 ;;		line 83 in file "main.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  i               2    6[BANK4 ] int 
  5169 ;;  i               2    4[BANK4 ] int 
  5170 ;;  i               2    2[BANK4 ] int 
  5171 ;;  i               2    0[BANK4 ] int 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      void 
  5174 ;; Registers used:
  5175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : B1F/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5183 ;;      Temps:          0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5184 ;;      Totals:         0       0       0      15       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5185 ;;Total ram usage:       23 bytes
  5186 ;; Hardware stack levels required when called:    7
  5187 ;; This function calls:
  5188 ;;		_ConfigureOscillator
  5189 ;;		_InitApp
  5190 ;;		_InitializeTaps
  5191 ;;		_ReadSavedSettings
  5192 ;;		_USARTInit
  5193 ;;		___awtoft
  5194 ;;		___fttol
  5195 ;;		_adc_convert
  5196 ;;		_initSwitchBypass
  5197 ;;		_map
  5198 ;;		_set_subdivision
  5199 ;; This function is called by:
  5200 ;;		Startup code after reset
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _main
  5206  0B55                     _main:	
  5207                           
  5208                           ;main.c: 84: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5212  0B55  3028               	movlw	40
  5213  0B56  0023               	movlb	3	; select bank3
  5214  0B57  00EE               	movwf	_B25kLength^(0+384)
  5215  0B58  3000               	movlw	0
  5216  0B59  00EF               	movwf	(_B25kLength^(0+384)+1)
  5217                           
  5218                           ;main.c: 86: USARTInit(31250);
  5219  0B5A  3012               	movlw	18
  5220  0B5B  0021               	movlb	1	; select bank1
  5221  0B5C  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5222  0B5D  307A               	movlw	122
  5223  0B5E  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5224  0B5F  3195  2563  318B   	fcall	_USARTInit
  5225                           
  5226                           ;main.c: 87: ConfigureOscillator();
  5227  0B62  3191  21D0  318B   	fcall	_ConfigureOscillator
  5228                           
  5229                           ;main.c: 88: InitApp();
  5230  0B65  3193  2323  318B   	fcall	_InitApp
  5231                           
  5232                           ;main.c: 90: PORTEbits.RE0 = 1;
  5233  0B68  0020               	movlb	0	; select bank0
  5234  0B69  1410               	bsf	16,0	;volatile
  5235                           
  5236                           ;main.c: 91: PORTEbits.RE1 = 1;
  5237  0B6A  1490               	bsf	16,1	;volatile
  5238                           
  5239                           ;main.c: 92: PORTDbits.RD6 = 1;
  5240  0B6B  170F               	bsf	15,6	;volatile
  5241                           
  5242                           ;main.c: 93: PORTDbits.RD5 = 1;
  5243  0B6C  168F               	bsf	15,5	;volatile
  5244                           
  5245                           ;main.c: 94: PORTCbits.RC0 = 1;
  5246  0B6D  140E               	bsf	14,0	;volatile
  5247                           
  5248                           ;main.c: 95: PORTDbits.RD7 = 1;
  5249  0B6E  178F               	bsf	15,7	;volatile
  5250                           
  5251                           ;main.c: 97: InitializeTaps();
  5252  0B6F  3192  22A6  318B   	fcall	_InitializeTaps
  5253                           
  5254                           ;main.c: 98: initSwitchBypass();
  5255  0B72  3192  2220  318B   	fcall	_initSwitchBypass
  5256                           
  5257                           ;main.c: 101: ReadSavedSettings();
  5258  0B75  3197  278A  318B   	fcall	_ReadSavedSettings
  5259  0B78                     l6774:	
  5260                           ;main.c: 103: while (1) {
  5261                           
  5262                           
  5263                           ;main.c: 142: knob_1_pos = adc_convert(0);
  5264  0B78  3000               	movlw	0
  5265  0B79  3192  223E  318B   	fcall	_adc_convert
  5266  0B7C  0021               	movlb	1	; select bank1
  5267  0B7D  0821               	movf	(?_adc_convert+1)^(0+128),w
  5268  0B7E  0023               	movlb	3	; select bank3
  5269  0B7F  00CA               	movwf	(_knob_1_pos+1)^(0+384)
  5270  0B80  0021               	movlb	1	; select bank1
  5271  0B81  0820               	movf	?_adc_convert^(0+128),w
  5272  0B82  0023               	movlb	3	; select bank3
  5273  0B83  00C9               	movwf	_knob_1_pos^(0+384)
  5274                           
  5275                           ;main.c: 143: knob_2_pos = adc_convert(1);
  5276  0B84  3001               	movlw	1
  5277  0B85  3192  223E  318B   	fcall	_adc_convert
  5278  0B88  0021               	movlb	1	; select bank1
  5279  0B89  0821               	movf	(?_adc_convert+1)^(0+128),w
  5280  0B8A  0023               	movlb	3	; select bank3
  5281  0B8B  00CC               	movwf	(_knob_2_pos+1)^(0+384)
  5282  0B8C  0021               	movlb	1	; select bank1
  5283  0B8D  0820               	movf	?_adc_convert^(0+128),w
  5284  0B8E  0023               	movlb	3	; select bank3
  5285  0B8F  00CB               	movwf	_knob_2_pos^(0+384)
  5286                           
  5287                           ;main.c: 144: knob_3_pos = adc_convert(2);
  5288  0B90  3002               	movlw	2
  5289  0B91  3192  223E  318B   	fcall	_adc_convert
  5290  0B94  0021               	movlb	1	; select bank1
  5291  0B95  0821               	movf	(?_adc_convert+1)^(0+128),w
  5292  0B96  0023               	movlb	3	; select bank3
  5293  0B97  00CE               	movwf	(_knob_3_pos+1)^(0+384)
  5294  0B98  0021               	movlb	1	; select bank1
  5295  0B99  0820               	movf	?_adc_convert^(0+128),w
  5296  0B9A  0023               	movlb	3	; select bank3
  5297  0B9B  00CD               	movwf	_knob_3_pos^(0+384)
  5298                           
  5299                           ;main.c: 145: knob_4_pos = adc_convert(3);
  5300  0B9C  3003               	movlw	3
  5301  0B9D  3192  223E  318B   	fcall	_adc_convert
  5302  0BA0  0021               	movlb	1	; select bank1
  5303  0BA1  0821               	movf	(?_adc_convert+1)^(0+128),w
  5304  0BA2  0023               	movlb	3	; select bank3
  5305  0BA3  00D0               	movwf	(_knob_4_pos+1)^(0+384)
  5306  0BA4  0021               	movlb	1	; select bank1
  5307  0BA5  0820               	movf	?_adc_convert^(0+128),w
  5308  0BA6  0023               	movlb	3	; select bank3
  5309  0BA7  00CF               	movwf	_knob_4_pos^(0+384)
  5310                           
  5311                           ;main.c: 146: knob_5_pos = adc_convert(4);
  5312  0BA8  3004               	movlw	4
  5313  0BA9  3192  223E  318B   	fcall	_adc_convert
  5314  0BAC  0021               	movlb	1	; select bank1
  5315  0BAD  0821               	movf	(?_adc_convert+1)^(0+128),w
  5316  0BAE  0023               	movlb	3	; select bank3
  5317  0BAF  00D2               	movwf	(_knob_5_pos+1)^(0+384)
  5318  0BB0  0021               	movlb	1	; select bank1
  5319  0BB1  0820               	movf	?_adc_convert^(0+128),w
  5320  0BB2  0023               	movlb	3	; select bank3
  5321  0BB3  00D1               	movwf	_knob_5_pos^(0+384)
  5322                           
  5323                           ;main.c: 174: if (bottom_push_state != 5) {
  5324  0BB4  3005               	movlw	5
  5325  0BB5  0020               	movlb	0	; select bank0
  5326  0BB6  064D               	xorwf	_bottom_push_state,w
  5327  0BB7  044E               	iorwf	_bottom_push_state+1,w
  5328  0BB8  1903               	btfsc	3,2
  5329  0BB9  2C46               	goto	l6796
  5330                           
  5331                           ;main.c: 175: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5332  0BBA  0022               	movlb	2	; select bank2
  5333  0BBB  0960               	comf	_knob1_prev^(0+256),w	;volatile
  5334  0BBC  00C2               	movwf	??_main^(0+256)
  5335  0BBD  0961               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5336  0BBE  00C3               	movwf	(??_main^(0+256)+1)
  5337  0BBF  0AC2               	incf	??_main^(0+256),f
  5338  0BC0  1903               	skipnz
  5339  0BC1  0AC3               	incf	(??_main^(0+256)+1),f
  5340  0BC2  0023               	movlb	3	; select bank3
  5341  0BC3  0849               	movf	_knob_1_pos^(0+384),w
  5342  0BC4  0022               	movlb	2	; select bank2
  5343  0BC5  0742               	addwf	??_main^(0+256),w
  5344  0BC6  00C4               	movwf	(??_main+2)^(0+256)
  5345  0BC7  0023               	movlb	3	; select bank3
  5346  0BC8  084A               	movf	(_knob_1_pos+1)^(0+384),w
  5347  0BC9  0022               	movlb	2	; select bank2
  5348  0BCA  3D43               	addwfc	(??_main+1)^(0+256),w
  5349  0BCB  00C5               	movwf	(??_main+3)^(0+256)
  5350  0BCC  0845               	movf	(??_main+3)^(0+256),w
  5351  0BCD  3A80               	xorlw	128
  5352  0BCE  00C6               	movwf	(??_main+4)^(0+256)
  5353  0BCF  3080               	movlw	128
  5354  0BD0  0246               	subwf	(??_main+4)^(0+256),w
  5355  0BD1  1D03               	skipz
  5356  0BD2  2BD5               	goto	u6955
  5357  0BD3  3004               	movlw	4
  5358  0BD4  0244               	subwf	(??_main+2)^(0+256),w
  5359  0BD5                     u6955:	
  5360  0BD5  1803               	skipnc
  5361  0BD6  2BF4               	goto	l6790
  5362  0BD7  0022               	movlb	2	; select bank2
  5363  0BD8  0960               	comf	_knob1_prev^(0+256),w	;volatile
  5364  0BD9  00C2               	movwf	??_main^(0+256)
  5365  0BDA  0961               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5366  0BDB  00C3               	movwf	(??_main^(0+256)+1)
  5367  0BDC  0AC2               	incf	??_main^(0+256),f
  5368  0BDD  1903               	skipnz
  5369  0BDE  0AC3               	incf	(??_main^(0+256)+1),f
  5370  0BDF  0023               	movlb	3	; select bank3
  5371  0BE0  0849               	movf	_knob_1_pos^(0+384),w
  5372  0BE1  0022               	movlb	2	; select bank2
  5373  0BE2  0742               	addwf	??_main^(0+256),w
  5374  0BE3  00C4               	movwf	(??_main+2)^(0+256)
  5375  0BE4  0023               	movlb	3	; select bank3
  5376  0BE5  084A               	movf	(_knob_1_pos+1)^(0+384),w
  5377  0BE6  0022               	movlb	2	; select bank2
  5378  0BE7  3D43               	addwfc	(??_main+1)^(0+256),w
  5379  0BE8  00C5               	movwf	(??_main+3)^(0+256)
  5380  0BE9  0845               	movf	(??_main+3)^(0+256),w
  5381  0BEA  3A80               	xorlw	128
  5382  0BEB  00C6               	movwf	(??_main+4)^(0+256)
  5383  0BEC  307F               	movlw	127
  5384  0BED  0246               	subwf	(??_main+4)^(0+256),w
  5385  0BEE  1D03               	skipz
  5386  0BEF  2BF2               	goto	u6965
  5387  0BF0  30FD               	movlw	253
  5388  0BF1  0244               	subwf	(??_main+2)^(0+256),w
  5389  0BF2                     u6965:	
  5390  0BF2  1803               	skipnc
  5391  0BF3  2C46               	goto	l6796
  5392  0BF4                     l6790:	
  5393                           
  5394                           ;main.c: 176: knob1_prev = knob_1_pos;
  5395  0BF4  0023               	movlb	3	; select bank3
  5396  0BF5  084A               	movf	(_knob_1_pos+1)^(0+384),w
  5397  0BF6  0022               	movlb	2	; select bank2
  5398  0BF7  00E1               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5399  0BF8  0023               	movlb	3	; select bank3
  5400  0BF9  0849               	movf	_knob_1_pos^(0+384),w
  5401  0BFA  0022               	movlb	2	; select bank2
  5402  0BFB  00E0               	movwf	_knob1_prev^(0+256)	;volatile
  5403                           
  5404                           ;main.c: 177: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5405  0BFC  3000               	movlw	0
  5406  0BFD  0021               	movlb	1	; select bank1
  5407  0BFE  00E1               	movwf	map@out_max^(0+128)
  5408  0BFF  3048               	movlw	72
  5409  0C00  00E2               	movwf	(map@out_max+1)^(0+128)
  5410  0C01  3043               	movlw	67
  5411  0C02  00E3               	movwf	(map@out_max+2)^(0+128)
  5412  0C03  3080               	movlw	128
  5413  0C04  00DE               	movwf	map@out_min^(0+128)
  5414  0C05  3092               	movlw	146
  5415  0C06  00DF               	movwf	(map@out_min+1)^(0+128)
  5416  0C07  3044               	movlw	68
  5417  0C08  00E0               	movwf	(map@out_min+2)^(0+128)
  5418  0C09  30C0               	movlw	192
  5419  0C0A  00DB               	movwf	map@in_max^(0+128)
  5420  0C0B  307F               	movlw	127
  5421  0C0C  00DC               	movwf	(map@in_max+1)^(0+128)
  5422  0C0D  3044               	movlw	68
  5423  0C0E  00DD               	movwf	(map@in_max+2)^(0+128)
  5424  0C0F  3000               	movlw	0
  5425  0C10  00D8               	movwf	map@in_min^(0+128)
  5426  0C11  3000               	movlw	0
  5427  0C12  00D9               	movwf	(map@in_min+1)^(0+128)
  5428  0C13  3000               	movlw	0
  5429  0C14  00DA               	movwf	(map@in_min+2)^(0+128)
  5430  0C15  0022               	movlb	2	; select bank2
  5431  0C16  0861               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5432  0C17  0021               	movlb	1	; select bank1
  5433  0C18  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5434  0C19  0022               	movlb	2	; select bank2
  5435  0C1A  0860               	movf	_knob1_prev^(0+256),w	;volatile
  5436  0C1B  0021               	movlb	1	; select bank1
  5437  0C1C  00A8               	movwf	___awtoft@c^(0+128)
  5438  0C1D  3192  2284  318B   	fcall	___awtoft
  5439  0C20  0021               	movlb	1	; select bank1
  5440  0C21  0828               	movf	?___awtoft^(0+128),w
  5441  0C22  00D5               	movwf	map@x^(0+128)
  5442  0C23  0829               	movf	(?___awtoft+1)^(0+128),w
  5443  0C24  00D6               	movwf	(map@x+1)^(0+128)
  5444  0C25  082A               	movf	(?___awtoft+2)^(0+128),w
  5445  0C26  00D7               	movwf	(map@x+2)^(0+128)
  5446  0C27  3188  20CE  318B   	fcall	_map
  5447  0C2A  0021               	movlb	1	; select bank1
  5448  0C2B  0855               	movf	?_map^(0+128),w
  5449  0C2C  00E7               	movwf	___fttol@f1^(0+128)
  5450  0C2D  0856               	movf	(?_map+1)^(0+128),w
  5451  0C2E  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5452  0C2F  0857               	movf	(?_map+2)^(0+128),w
  5453  0C30  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5454  0C31  3189  2159  318B   	fcall	___fttol
  5455  0C34  0021               	movlb	1	; select bank1
  5456  0C35  0867               	movf	?___fttol^(0+128),w
  5457  0C36  0020               	movlb	0	; select bank0
  5458  0C37  00C5               	movwf	_baseline_delay_time	;volatile
  5459  0C38  0021               	movlb	1	; select bank1
  5460  0C39  0868               	movf	(?___fttol^(0+128)+1),w
  5461  0C3A  0020               	movlb	0	; select bank0
  5462  0C3B  00C6               	movwf	_baseline_delay_time+1	;volatile
  5463  0C3C  0D89               	rlf	9,f
  5464  0C3D  3B89               	subwfb	9,f
  5465  0C3E  0989               	comf	9,f
  5466  0C3F  00C7               	movwf	_baseline_delay_time+2	;volatile
  5467  0C40  00C8               	movwf	_baseline_delay_time+3	;volatile
  5468                           
  5469                           ;main.c: 178: delay_time_changed = 1;
  5470  0C41  3001               	movlw	1
  5471  0C42  0023               	movlb	3	; select bank3
  5472  0C43  00E1               	movwf	_delay_time_changed^(0+384)
  5473  0C44  3000               	movlw	0
  5474  0C45  00E2               	movwf	(_delay_time_changed^(0+384)+1)
  5475  0C46                     l6796:	
  5476                           
  5477                           ;main.c: 180: }
  5478                           ;main.c: 181: }
  5479                           ;main.c: 191: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5480  0C46  0022               	movlb	2	; select bank2
  5481  0C47  0962               	comf	_knob2_prev^(0+256),w	;volatile
  5482  0C48  00C2               	movwf	??_main^(0+256)
  5483  0C49  0963               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5484  0C4A  00C3               	movwf	(??_main^(0+256)+1)
  5485  0C4B  0AC2               	incf	??_main^(0+256),f
  5486  0C4C  1903               	skipnz
  5487  0C4D  0AC3               	incf	(??_main^(0+256)+1),f
  5488  0C4E  0023               	movlb	3	; select bank3
  5489  0C4F  084B               	movf	_knob_2_pos^(0+384),w
  5490  0C50  0022               	movlb	2	; select bank2
  5491  0C51  0742               	addwf	??_main^(0+256),w
  5492  0C52  00C4               	movwf	(??_main+2)^(0+256)
  5493  0C53  0023               	movlb	3	; select bank3
  5494  0C54  084C               	movf	(_knob_2_pos+1)^(0+384),w
  5495  0C55  0022               	movlb	2	; select bank2
  5496  0C56  3D43               	addwfc	(??_main+1)^(0+256),w
  5497  0C57  00C5               	movwf	(??_main+3)^(0+256)
  5498  0C58  0845               	movf	(??_main+3)^(0+256),w
  5499  0C59  3A80               	xorlw	128
  5500  0C5A  00C6               	movwf	(??_main+4)^(0+256)
  5501  0C5B  3080               	movlw	128
  5502  0C5C  0246               	subwf	(??_main+4)^(0+256),w
  5503  0C5D  1D03               	skipz
  5504  0C5E  2C61               	goto	u6975
  5505  0C5F  3004               	movlw	4
  5506  0C60  0244               	subwf	(??_main+2)^(0+256),w
  5507  0C61                     u6975:	
  5508  0C61  1803               	skipnc
  5509  0C62  2C80               	goto	l6800
  5510  0C63  0022               	movlb	2	; select bank2
  5511  0C64  0962               	comf	_knob2_prev^(0+256),w	;volatile
  5512  0C65  00C2               	movwf	??_main^(0+256)
  5513  0C66  0963               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5514  0C67  00C3               	movwf	(??_main^(0+256)+1)
  5515  0C68  0AC2               	incf	??_main^(0+256),f
  5516  0C69  1903               	skipnz
  5517  0C6A  0AC3               	incf	(??_main^(0+256)+1),f
  5518  0C6B  0023               	movlb	3	; select bank3
  5519  0C6C  084B               	movf	_knob_2_pos^(0+384),w
  5520  0C6D  0022               	movlb	2	; select bank2
  5521  0C6E  0742               	addwf	??_main^(0+256),w
  5522  0C6F  00C4               	movwf	(??_main+2)^(0+256)
  5523  0C70  0023               	movlb	3	; select bank3
  5524  0C71  084C               	movf	(_knob_2_pos+1)^(0+384),w
  5525  0C72  0022               	movlb	2	; select bank2
  5526  0C73  3D43               	addwfc	(??_main+1)^(0+256),w
  5527  0C74  00C5               	movwf	(??_main+3)^(0+256)
  5528  0C75  0845               	movf	(??_main+3)^(0+256),w
  5529  0C76  3A80               	xorlw	128
  5530  0C77  00C6               	movwf	(??_main+4)^(0+256)
  5531  0C78  307F               	movlw	127
  5532  0C79  0246               	subwf	(??_main+4)^(0+256),w
  5533  0C7A  1D03               	skipz
  5534  0C7B  2C7E               	goto	u6985
  5535  0C7C  30FD               	movlw	253
  5536  0C7D  0244               	subwf	(??_main+2)^(0+256),w
  5537  0C7E                     u6985:	
  5538  0C7E  1803               	skipnc
  5539  0C7F  2CEE               	goto	l6808
  5540  0C80                     l6800:	
  5541                           
  5542                           ;main.c: 192: knob2_prev = knob_2_pos;
  5543  0C80  0023               	movlb	3	; select bank3
  5544  0C81  084C               	movf	(_knob_2_pos+1)^(0+384),w
  5545  0C82  0022               	movlb	2	; select bank2
  5546  0C83  00E3               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5547  0C84  0023               	movlb	3	; select bank3
  5548  0C85  084B               	movf	_knob_2_pos^(0+384),w
  5549  0C86  0022               	movlb	2	; select bank2
  5550  0C87  00E2               	movwf	_knob2_prev^(0+256)	;volatile
  5551                           
  5552                           ;main.c: 193: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  5553  0C88  3000               	movlw	0
  5554  0C89  0021               	movlb	1	; select bank1
  5555  0C8A  00E1               	movwf	map@out_max^(0+128)
  5556  0C8B  301C               	movlw	28
  5557  0C8C  00E2               	movwf	(map@out_max+1)^(0+128)
  5558  0C8D  3042               	movlw	66
  5559  0C8E  00E3               	movwf	(map@out_max+2)^(0+128)
  5560  0C8F  3000               	movlw	0
  5561  0C90  00DE               	movwf	map@out_min^(0+128)
  5562  0C91  3000               	movlw	0
  5563  0C92  00DF               	movwf	(map@out_min+1)^(0+128)
  5564  0C93  3000               	movlw	0
  5565  0C94  00E0               	movwf	(map@out_min+2)^(0+128)
  5566  0C95  30C0               	movlw	192
  5567  0C96  00DB               	movwf	map@in_max^(0+128)
  5568  0C97  307F               	movlw	127
  5569  0C98  00DC               	movwf	(map@in_max+1)^(0+128)
  5570  0C99  3044               	movlw	68
  5571  0C9A  00DD               	movwf	(map@in_max+2)^(0+128)
  5572  0C9B  3000               	movlw	0
  5573  0C9C  00D8               	movwf	map@in_min^(0+128)
  5574  0C9D  3000               	movlw	0
  5575  0C9E  00D9               	movwf	(map@in_min+1)^(0+128)
  5576  0C9F  3000               	movlw	0
  5577  0CA0  00DA               	movwf	(map@in_min+2)^(0+128)
  5578  0CA1  0022               	movlb	2	; select bank2
  5579  0CA2  0863               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5580  0CA3  0021               	movlb	1	; select bank1
  5581  0CA4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5582  0CA5  0022               	movlb	2	; select bank2
  5583  0CA6  0862               	movf	_knob2_prev^(0+256),w	;volatile
  5584  0CA7  0021               	movlb	1	; select bank1
  5585  0CA8  00A8               	movwf	___awtoft@c^(0+128)
  5586  0CA9  3192  2284  318B   	fcall	___awtoft
  5587  0CAC  0021               	movlb	1	; select bank1
  5588  0CAD  0828               	movf	?___awtoft^(0+128),w
  5589  0CAE  00D5               	movwf	map@x^(0+128)
  5590  0CAF  0829               	movf	(?___awtoft+1)^(0+128),w
  5591  0CB0  00D6               	movwf	(map@x+1)^(0+128)
  5592  0CB1  082A               	movf	(?___awtoft+2)^(0+128),w
  5593  0CB2  00D7               	movwf	(map@x+2)^(0+128)
  5594  0CB3  3188  20CE  318B   	fcall	_map
  5595  0CB6  0021               	movlb	1	; select bank1
  5596  0CB7  0855               	movf	?_map^(0+128),w
  5597  0CB8  00E7               	movwf	___fttol@f1^(0+128)
  5598  0CB9  0856               	movf	(?_map+1)^(0+128),w
  5599  0CBA  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5600  0CBB  0857               	movf	(?_map+2)^(0+128),w
  5601  0CBC  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5602  0CBD  3189  2159  318B   	fcall	___fttol
  5603  0CC0  0021               	movlb	1	; select bank1
  5604  0CC1  0868               	movf	(?___fttol^(0+128)+1),w
  5605  0CC2  0024               	movlb	4	; select bank4
  5606  0CC3  00DD               	movwf	(main@i+1)^(0+512)
  5607  0CC4  0021               	movlb	1	; select bank1
  5608  0CC5  0867               	movf	?___fttol^(0+128),w
  5609  0CC6  0024               	movlb	4	; select bank4
  5610  0CC7  00DC               	movwf	main@i^(0+512)
  5611                           
  5612                           ;main.c: 194: CCPR2 = (int)B25k[B25kLength - 1 - i];
  5613  0CC8  085C               	movf	main@i^(0+512),w
  5614  0CC9  3E01               	addlw	1
  5615  0CCA  3AFF               	xorlw	255
  5616  0CCB  3E01               	addlw	1
  5617  0CCC  0023               	movlb	3	; select bank3
  5618  0CCD  076E               	addwf	_B25kLength^(0+384),w
  5619  0CCE  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5620  0CCF  0086               	movwf	6
  5621  0CD0  3002               	movlw	2	; select bank4/5
  5622  0CD1  0087               	movwf	7
  5623  0CD2  0801               	movf	1,w
  5624  0CD3  0022               	movlb	2	; select bank2
  5625  0CD4  00C2               	movwf	??_main^(0+256)
  5626  0CD5  01C3               	clrf	(??_main^(0+256)+1)
  5627  0CD6  0842               	movf	??_main^(0+256),w
  5628  0CD7  0025               	movlb	5	; select bank5
  5629  0CD8  0098               	movwf	24	;volatile
  5630  0CD9  0022               	movlb	2	; select bank2
  5631  0CDA  0843               	movf	(??_main+1)^(0+256),w
  5632  0CDB  0025               	movlb	5	; select bank5
  5633  0CDC  0099               	movwf	25	;volatile
  5634                           
  5635                           ;main.c: 195: CCPR3 = (int)B25k[i];
  5636  0CDD  0024               	movlb	4	; select bank4
  5637  0CDE  085C               	movf	main@i^(0+512),w
  5638  0CDF  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5639  0CE0  0086               	movwf	6
  5640  0CE1  3002               	movlw	2	; select bank4/5
  5641  0CE2  0087               	movwf	7
  5642  0CE3  0801               	movf	1,w
  5643  0CE4  0022               	movlb	2	; select bank2
  5644  0CE5  00C2               	movwf	??_main^(0+256)
  5645  0CE6  01C3               	clrf	(??_main^(0+256)+1)
  5646  0CE7  0842               	movf	??_main^(0+256),w
  5647  0CE8  0026               	movlb	6	; select bank6
  5648  0CE9  0091               	movwf	17	;volatile
  5649  0CEA  0022               	movlb	2	; select bank2
  5650  0CEB  0843               	movf	(??_main+1)^(0+256),w
  5651  0CEC  0026               	movlb	6	; select bank6
  5652  0CED  0092               	movwf	18	;volatile
  5653  0CEE                     l6808:	
  5654                           
  5655                           ;main.c: 196: }
  5656                           ;main.c: 224: if (bottom_push_state == 5) {
  5657  0CEE  3005               	movlw	5
  5658  0CEF  0020               	movlb	0	; select bank0
  5659  0CF0  064D               	xorwf	_bottom_push_state,w
  5660  0CF1  044E               	iorwf	_bottom_push_state+1,w
  5661  0CF2  1D03               	btfss	3,2
  5662  0CF3  2D57               	goto	l6820
  5663                           
  5664                           ;main.c: 225: if (knob3_prev != 1023) {
  5665  0CF4  0022               	movlb	2	; select bank2
  5666  0CF5  0A64               	incf	_knob3_prev^(0+256),w	;volatile
  5667  0CF6  3003               	movlw	3
  5668  0CF7  1903               	skipnz
  5669  0CF8  0665               	xorwf	(_knob3_prev+1)^(0+256),w	;volatile
  5670  0CF9  1903               	btfsc	3,2
  5671  0CFA  2E68               	goto	l6848
  5672                           
  5673                           ;main.c: 226: knob3_prev = 1023;
  5674  0CFB  30FF               	movlw	255
  5675  0CFC  00E4               	movwf	_knob3_prev^(0+256)	;volatile
  5676  0CFD  3003               	movlw	3
  5677  0CFE  00E5               	movwf	(_knob3_prev^(0+256)+1)	;volatile
  5678                           
  5679                           ;main.c: 228: int i = (int) map(knob3_prev, 0, 1023, 16, 0);
  5680  0CFF  3000               	movlw	0
  5681  0D00  0021               	movlb	1	; select bank1
  5682  0D01  00E1               	movwf	map@out_max^(0+128)
  5683  0D02  3000               	movlw	0
  5684  0D03  00E2               	movwf	(map@out_max+1)^(0+128)
  5685  0D04  3000               	movlw	0
  5686  0D05  00E3               	movwf	(map@out_max+2)^(0+128)
  5687  0D06  3000               	movlw	0
  5688  0D07  00DE               	movwf	map@out_min^(0+128)
  5689  0D08  3080               	movlw	128
  5690  0D09  00DF               	movwf	(map@out_min+1)^(0+128)
  5691  0D0A  3041               	movlw	65
  5692  0D0B  00E0               	movwf	(map@out_min+2)^(0+128)
  5693  0D0C  30C0               	movlw	192
  5694  0D0D  00DB               	movwf	map@in_max^(0+128)
  5695  0D0E  307F               	movlw	127
  5696  0D0F  00DC               	movwf	(map@in_max+1)^(0+128)
  5697  0D10  3044               	movlw	68
  5698  0D11  00DD               	movwf	(map@in_max+2)^(0+128)
  5699  0D12  3000               	movlw	0
  5700  0D13  00D8               	movwf	map@in_min^(0+128)
  5701  0D14  3000               	movlw	0
  5702  0D15  00D9               	movwf	(map@in_min+1)^(0+128)
  5703  0D16  3000               	movlw	0
  5704  0D17  00DA               	movwf	(map@in_min+2)^(0+128)
  5705  0D18  0022               	movlb	2	; select bank2
  5706  0D19  0865               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5707  0D1A  0021               	movlb	1	; select bank1
  5708  0D1B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5709  0D1C  0022               	movlb	2	; select bank2
  5710  0D1D  0864               	movf	_knob3_prev^(0+256),w	;volatile
  5711  0D1E  0021               	movlb	1	; select bank1
  5712  0D1F  00A8               	movwf	___awtoft@c^(0+128)
  5713  0D20  3192  2284  318B   	fcall	___awtoft
  5714  0D23  0021               	movlb	1	; select bank1
  5715  0D24  0828               	movf	?___awtoft^(0+128),w
  5716  0D25  00D5               	movwf	map@x^(0+128)
  5717  0D26  0829               	movf	(?___awtoft+1)^(0+128),w
  5718  0D27  00D6               	movwf	(map@x+1)^(0+128)
  5719  0D28  082A               	movf	(?___awtoft+2)^(0+128),w
  5720  0D29  00D7               	movwf	(map@x+2)^(0+128)
  5721  0D2A  3188  20CE  318B   	fcall	_map
  5722  0D2D  0021               	movlb	1	; select bank1
  5723  0D2E  0855               	movf	?_map^(0+128),w
  5724  0D2F  00E7               	movwf	___fttol@f1^(0+128)
  5725  0D30  0856               	movf	(?_map+1)^(0+128),w
  5726  0D31  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5727  0D32  0857               	movf	(?_map+2)^(0+128),w
  5728  0D33  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5729  0D34  3189  2159  318B   	fcall	___fttol
  5730  0D37  0021               	movlb	1	; select bank1
  5731  0D38  0868               	movf	(?___fttol^(0+128)+1),w
  5732  0D39  0024               	movlb	4	; select bank4
  5733  0D3A  00DF               	movwf	(main@i_385+1)^(0+512)
  5734  0D3B  0021               	movlb	1	; select bank1
  5735  0D3C  0867               	movf	?___fttol^(0+128),w
  5736  0D3D  0024               	movlb	4	; select bank4
  5737  0D3E  00DE               	movwf	main@i_385^(0+512)
  5738                           
  5739                           ;main.c: 229: CCPR4 = (int) B25k[B25kLength - 1 - i];
  5740  0D3F  085E               	movf	main@i_385^(0+512),w
  5741  0D40  3E01               	addlw	1
  5742  0D41  3AFF               	xorlw	255
  5743  0D42  3E01               	addlw	1
  5744  0D43  0023               	movlb	3	; select bank3
  5745  0D44  076E               	addwf	_B25kLength^(0+384),w
  5746  0D45  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5747  0D46  0086               	movwf	6
  5748  0D47  3002               	movlw	2	; select bank4/5
  5749  0D48  0087               	movwf	7
  5750  0D49  0801               	movf	1,w
  5751  0D4A  0022               	movlb	2	; select bank2
  5752  0D4B  00C2               	movwf	??_main^(0+256)
  5753  0D4C  01C3               	clrf	(??_main^(0+256)+1)
  5754  0D4D  0842               	movf	??_main^(0+256),w
  5755  0D4E  0026               	movlb	6	; select bank6
  5756  0D4F  0098               	movwf	24	;volatile
  5757  0D50  0022               	movlb	2	; select bank2
  5758  0D51  0843               	movf	(??_main+1)^(0+256),w
  5759  0D52  0026               	movlb	6	; select bank6
  5760  0D53  0099               	movwf	25	;volatile
  5761                           
  5762                           ;main.c: 230: CCPR5 = (int) B25k[i];
  5763  0D54  0024               	movlb	4	; select bank4
  5764  0D55  085E               	movf	main@i_385^(0+512),w
  5765  0D56  2E59               	goto	L2
  5766  0D57                     l6820:	
  5767                           ;main.c: 231: }
  5768                           ;main.c: 232: } else if (feedback_state == 1) {
  5769                           
  5770  0D57  0022               	movlb	2	; select bank2
  5771  0D58  036B               	decf	_feedback_state^(0+256),w	;volatile
  5772  0D59  1D03               	btfss	3,2
  5773  0D5A  2DBC               	goto	l6834
  5774                           
  5775                           ;main.c: 233: if (knob3_prev != 0) {
  5776  0D5B  0864               	movf	_knob3_prev^(0+256),w	;volatile
  5777  0D5C  0465               	iorwf	(_knob3_prev+1)^(0+256),w	;volatile
  5778  0D5D  1903               	btfsc	3,2
  5779  0D5E  2E68               	goto	l6848
  5780                           
  5781                           ;main.c: 234: knob3_prev = 0;
  5782  0D5F  01E4               	clrf	_knob3_prev^(0+256)	;volatile
  5783  0D60  01E5               	clrf	(_knob3_prev+1)^(0+256)	;volatile
  5784                           
  5785                           ;main.c: 235: feedbackTriggered = 1;
  5786  0D61  0023               	movlb	3	; select bank3
  5787  0D62  01DB               	clrf	_feedbackTriggered^(0+384)
  5788  0D63  0ADB               	incf	_feedbackTriggered^(0+384),f
  5789                           
  5790                           ;main.c: 237: int i = (int) map(knob3_prev, 0, 1023, 25, 0);
  5791  0D64  3000               	movlw	0
  5792  0D65  0021               	movlb	1	; select bank1
  5793  0D66  00E1               	movwf	map@out_max^(0+128)
  5794  0D67  3000               	movlw	0
  5795  0D68  00E2               	movwf	(map@out_max+1)^(0+128)
  5796  0D69  3000               	movlw	0
  5797  0D6A  00E3               	movwf	(map@out_max+2)^(0+128)
  5798  0D6B  3000               	movlw	0
  5799  0D6C  00DE               	movwf	map@out_min^(0+128)
  5800  0D6D  30C8               	movlw	200
  5801  0D6E  00DF               	movwf	(map@out_min+1)^(0+128)
  5802  0D6F  3041               	movlw	65
  5803  0D70  00E0               	movwf	(map@out_min+2)^(0+128)
  5804  0D71  30C0               	movlw	192
  5805  0D72  00DB               	movwf	map@in_max^(0+128)
  5806  0D73  307F               	movlw	127
  5807  0D74  00DC               	movwf	(map@in_max+1)^(0+128)
  5808  0D75  3044               	movlw	68
  5809  0D76  00DD               	movwf	(map@in_max+2)^(0+128)
  5810  0D77  3000               	movlw	0
  5811  0D78  00D8               	movwf	map@in_min^(0+128)
  5812  0D79  3000               	movlw	0
  5813  0D7A  00D9               	movwf	(map@in_min+1)^(0+128)
  5814  0D7B  3000               	movlw	0
  5815  0D7C  00DA               	movwf	(map@in_min+2)^(0+128)
  5816  0D7D  0022               	movlb	2	; select bank2
  5817  0D7E  0865               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5818  0D7F  0021               	movlb	1	; select bank1
  5819  0D80  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5820  0D81  0022               	movlb	2	; select bank2
  5821  0D82  0864               	movf	_knob3_prev^(0+256),w	;volatile
  5822  0D83  0021               	movlb	1	; select bank1
  5823  0D84  00A8               	movwf	___awtoft@c^(0+128)
  5824  0D85  3192  2284  318B   	fcall	___awtoft
  5825  0D88  0021               	movlb	1	; select bank1
  5826  0D89  0828               	movf	?___awtoft^(0+128),w
  5827  0D8A  00D5               	movwf	map@x^(0+128)
  5828  0D8B  0829               	movf	(?___awtoft+1)^(0+128),w
  5829  0D8C  00D6               	movwf	(map@x+1)^(0+128)
  5830  0D8D  082A               	movf	(?___awtoft+2)^(0+128),w
  5831  0D8E  00D7               	movwf	(map@x+2)^(0+128)
  5832  0D8F  3188  20CE  318B   	fcall	_map
  5833  0D92  0021               	movlb	1	; select bank1
  5834  0D93  0855               	movf	?_map^(0+128),w
  5835  0D94  00E7               	movwf	___fttol@f1^(0+128)
  5836  0D95  0856               	movf	(?_map+1)^(0+128),w
  5837  0D96  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5838  0D97  0857               	movf	(?_map+2)^(0+128),w
  5839  0D98  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5840  0D99  3189  2159  318B   	fcall	___fttol
  5841  0D9C  0021               	movlb	1	; select bank1
  5842  0D9D  0868               	movf	(?___fttol^(0+128)+1),w
  5843  0D9E  0024               	movlb	4	; select bank4
  5844  0D9F  00E1               	movwf	(main@i_386+1)^(0+512)
  5845  0DA0  0021               	movlb	1	; select bank1
  5846  0DA1  0867               	movf	?___fttol^(0+128),w
  5847  0DA2  0024               	movlb	4	; select bank4
  5848  0DA3  00E0               	movwf	main@i_386^(0+512)
  5849                           
  5850                           ;main.c: 238: CCPR4 = (int) B25k[B25kLength - 1 - i];
  5851  0DA4  0860               	movf	main@i_386^(0+512),w
  5852  0DA5  3E01               	addlw	1
  5853  0DA6  3AFF               	xorlw	255
  5854  0DA7  3E01               	addlw	1
  5855  0DA8  0023               	movlb	3	; select bank3
  5856  0DA9  076E               	addwf	_B25kLength^(0+384),w
  5857  0DAA  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5858  0DAB  0086               	movwf	6
  5859  0DAC  3002               	movlw	2	; select bank4/5
  5860  0DAD  0087               	movwf	7
  5861  0DAE  0801               	movf	1,w
  5862  0DAF  0022               	movlb	2	; select bank2
  5863  0DB0  00C2               	movwf	??_main^(0+256)
  5864  0DB1  01C3               	clrf	(??_main^(0+256)+1)
  5865  0DB2  0842               	movf	??_main^(0+256),w
  5866  0DB3  0026               	movlb	6	; select bank6
  5867  0DB4  0098               	movwf	24	;volatile
  5868  0DB5  0022               	movlb	2	; select bank2
  5869  0DB6  0843               	movf	(??_main+1)^(0+256),w
  5870  0DB7  0026               	movlb	6	; select bank6
  5871  0DB8  0099               	movwf	25	;volatile
  5872                           
  5873                           ;main.c: 239: CCPR5 = (int) B25k[i];
  5874  0DB9  0024               	movlb	4	; select bank4
  5875  0DBA  0860               	movf	main@i_386^(0+512),w
  5876  0DBB  2E59               	goto	L2
  5877  0DBC                     l6834:	
  5878                           ;main.c: 240: }
  5879                           ;main.c: 241: } else {
  5880                           
  5881                           
  5882                           ;main.c: 242: if ((knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) || fee
      +                          dbackTriggered == 1) {
  5883  0DBC  0022               	movlb	2	; select bank2
  5884  0DBD  0964               	comf	_knob3_prev^(0+256),w	;volatile
  5885  0DBE  00C2               	movwf	??_main^(0+256)
  5886  0DBF  0965               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5887  0DC0  00C3               	movwf	(??_main^(0+256)+1)
  5888  0DC1  0AC2               	incf	??_main^(0+256),f
  5889  0DC2  1903               	skipnz
  5890  0DC3  0AC3               	incf	(??_main^(0+256)+1),f
  5891  0DC4  0023               	movlb	3	; select bank3
  5892  0DC5  084D               	movf	_knob_3_pos^(0+384),w
  5893  0DC6  0022               	movlb	2	; select bank2
  5894  0DC7  0742               	addwf	??_main^(0+256),w
  5895  0DC8  00C4               	movwf	(??_main+2)^(0+256)
  5896  0DC9  0023               	movlb	3	; select bank3
  5897  0DCA  084E               	movf	(_knob_3_pos+1)^(0+384),w
  5898  0DCB  0022               	movlb	2	; select bank2
  5899  0DCC  3D43               	addwfc	(??_main+1)^(0+256),w
  5900  0DCD  00C5               	movwf	(??_main+3)^(0+256)
  5901  0DCE  0845               	movf	(??_main+3)^(0+256),w
  5902  0DCF  3A80               	xorlw	128
  5903  0DD0  00C6               	movwf	(??_main+4)^(0+256)
  5904  0DD1  3080               	movlw	128
  5905  0DD2  0246               	subwf	(??_main+4)^(0+256),w
  5906  0DD3  1D03               	skipz
  5907  0DD4  2DD7               	goto	u7035
  5908  0DD5  3004               	movlw	4
  5909  0DD6  0244               	subwf	(??_main+2)^(0+256),w
  5910  0DD7                     u7035:	
  5911  0DD7  1803               	skipnc
  5912  0DD8  2DFA               	goto	l6840
  5913  0DD9  0022               	movlb	2	; select bank2
  5914  0DDA  0964               	comf	_knob3_prev^(0+256),w	;volatile
  5915  0DDB  00C2               	movwf	??_main^(0+256)
  5916  0DDC  0965               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5917  0DDD  00C3               	movwf	(??_main^(0+256)+1)
  5918  0DDE  0AC2               	incf	??_main^(0+256),f
  5919  0DDF  1903               	skipnz
  5920  0DE0  0AC3               	incf	(??_main^(0+256)+1),f
  5921  0DE1  0023               	movlb	3	; select bank3
  5922  0DE2  084D               	movf	_knob_3_pos^(0+384),w
  5923  0DE3  0022               	movlb	2	; select bank2
  5924  0DE4  0742               	addwf	??_main^(0+256),w
  5925  0DE5  00C4               	movwf	(??_main+2)^(0+256)
  5926  0DE6  0023               	movlb	3	; select bank3
  5927  0DE7  084E               	movf	(_knob_3_pos+1)^(0+384),w
  5928  0DE8  0022               	movlb	2	; select bank2
  5929  0DE9  3D43               	addwfc	(??_main+1)^(0+256),w
  5930  0DEA  00C5               	movwf	(??_main+3)^(0+256)
  5931  0DEB  0845               	movf	(??_main+3)^(0+256),w
  5932  0DEC  3A80               	xorlw	128
  5933  0DED  00C6               	movwf	(??_main+4)^(0+256)
  5934  0DEE  307F               	movlw	127
  5935  0DEF  0246               	subwf	(??_main+4)^(0+256),w
  5936  0DF0  1D03               	skipz
  5937  0DF1  2DF4               	goto	u7045
  5938  0DF2  30FD               	movlw	253
  5939  0DF3  0244               	subwf	(??_main+2)^(0+256),w
  5940  0DF4                     u7045:	
  5941  0DF4  1C03               	skipc
  5942  0DF5  2DFA               	goto	l6840
  5943  0DF6  0023               	movlb	3	; select bank3
  5944  0DF7  035B               	decf	_feedbackTriggered^(0+384),w
  5945  0DF8  1D03               	btfss	3,2
  5946  0DF9  2E68               	goto	l6848
  5947  0DFA                     l6840:	
  5948                           
  5949                           ;main.c: 243: knob3_prev = knob_3_pos;
  5950  0DFA  0023               	movlb	3	; select bank3
  5951  0DFB  084E               	movf	(_knob_3_pos+1)^(0+384),w
  5952  0DFC  0022               	movlb	2	; select bank2
  5953  0DFD  00E5               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5954  0DFE  0023               	movlb	3	; select bank3
  5955  0DFF  084D               	movf	_knob_3_pos^(0+384),w
  5956  0E00  0022               	movlb	2	; select bank2
  5957  0E01  00E4               	movwf	_knob3_prev^(0+256)	;volatile
  5958                           
  5959                           ;main.c: 244: int i = (int) map(knob3_prev, 0, 1023, 18, 0);
  5960  0E02  3000               	movlw	0
  5961  0E03  0021               	movlb	1	; select bank1
  5962  0E04  00E1               	movwf	map@out_max^(0+128)
  5963  0E05  3000               	movlw	0
  5964  0E06  00E2               	movwf	(map@out_max+1)^(0+128)
  5965  0E07  3000               	movlw	0
  5966  0E08  00E3               	movwf	(map@out_max+2)^(0+128)
  5967  0E09  3000               	movlw	0
  5968  0E0A  00DE               	movwf	map@out_min^(0+128)
  5969  0E0B  3090               	movlw	144
  5970  0E0C  00DF               	movwf	(map@out_min+1)^(0+128)
  5971  0E0D  3041               	movlw	65
  5972  0E0E  00E0               	movwf	(map@out_min+2)^(0+128)
  5973  0E0F  30C0               	movlw	192
  5974  0E10  00DB               	movwf	map@in_max^(0+128)
  5975  0E11  307F               	movlw	127
  5976  0E12  00DC               	movwf	(map@in_max+1)^(0+128)
  5977  0E13  3044               	movlw	68
  5978  0E14  00DD               	movwf	(map@in_max+2)^(0+128)
  5979  0E15  3000               	movlw	0
  5980  0E16  00D8               	movwf	map@in_min^(0+128)
  5981  0E17  3000               	movlw	0
  5982  0E18  00D9               	movwf	(map@in_min+1)^(0+128)
  5983  0E19  3000               	movlw	0
  5984  0E1A  00DA               	movwf	(map@in_min+2)^(0+128)
  5985  0E1B  0022               	movlb	2	; select bank2
  5986  0E1C  0865               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5987  0E1D  0021               	movlb	1	; select bank1
  5988  0E1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5989  0E1F  0022               	movlb	2	; select bank2
  5990  0E20  0864               	movf	_knob3_prev^(0+256),w	;volatile
  5991  0E21  0021               	movlb	1	; select bank1
  5992  0E22  00A8               	movwf	___awtoft@c^(0+128)
  5993  0E23  3192  2284  318B   	fcall	___awtoft
  5994  0E26  0021               	movlb	1	; select bank1
  5995  0E27  0828               	movf	?___awtoft^(0+128),w
  5996  0E28  00D5               	movwf	map@x^(0+128)
  5997  0E29  0829               	movf	(?___awtoft+1)^(0+128),w
  5998  0E2A  00D6               	movwf	(map@x+1)^(0+128)
  5999  0E2B  082A               	movf	(?___awtoft+2)^(0+128),w
  6000  0E2C  00D7               	movwf	(map@x+2)^(0+128)
  6001  0E2D  3188  20CE  318B   	fcall	_map
  6002  0E30  0021               	movlb	1	; select bank1
  6003  0E31  0855               	movf	?_map^(0+128),w
  6004  0E32  00E7               	movwf	___fttol@f1^(0+128)
  6005  0E33  0856               	movf	(?_map+1)^(0+128),w
  6006  0E34  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6007  0E35  0857               	movf	(?_map+2)^(0+128),w
  6008  0E36  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6009  0E37  3189  2159  318B   	fcall	___fttol
  6010  0E3A  0021               	movlb	1	; select bank1
  6011  0E3B  0868               	movf	(?___fttol^(0+128)+1),w
  6012  0E3C  0024               	movlb	4	; select bank4
  6013  0E3D  00E3               	movwf	(main@i_387+1)^(0+512)
  6014  0E3E  0021               	movlb	1	; select bank1
  6015  0E3F  0867               	movf	?___fttol^(0+128),w
  6016  0E40  0024               	movlb	4	; select bank4
  6017  0E41  00E2               	movwf	main@i_387^(0+512)
  6018                           
  6019                           ;main.c: 245: CCPR4 = (int) B25k[B25kLength - 1 - i];
  6020  0E42  0862               	movf	main@i_387^(0+512),w
  6021  0E43  3E01               	addlw	1
  6022  0E44  3AFF               	xorlw	255
  6023  0E45  3E01               	addlw	1
  6024  0E46  0023               	movlb	3	; select bank3
  6025  0E47  076E               	addwf	_B25kLength^(0+384),w
  6026  0E48  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  6027  0E49  0086               	movwf	6
  6028  0E4A  3002               	movlw	2	; select bank4/5
  6029  0E4B  0087               	movwf	7
  6030  0E4C  0801               	movf	1,w
  6031  0E4D  0022               	movlb	2	; select bank2
  6032  0E4E  00C2               	movwf	??_main^(0+256)
  6033  0E4F  01C3               	clrf	(??_main^(0+256)+1)
  6034  0E50  0842               	movf	??_main^(0+256),w
  6035  0E51  0026               	movlb	6	; select bank6
  6036  0E52  0098               	movwf	24	;volatile
  6037  0E53  0022               	movlb	2	; select bank2
  6038  0E54  0843               	movf	(??_main+1)^(0+256),w
  6039  0E55  0026               	movlb	6	; select bank6
  6040  0E56  0099               	movwf	25	;volatile
  6041                           
  6042                           ;main.c: 246: CCPR5 = (int) B25k[i];
  6043  0E57  0024               	movlb	4	; select bank4
  6044  0E58  0862               	movf	main@i_387^(0+512),w
  6045  0E59                     L2:	
  6046  0E59  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  6047  0E5A  0086               	movwf	6
  6048  0E5B  3002               	movlw	2	; select bank4/5
  6049  0E5C  0087               	movwf	7
  6050  0E5D  0801               	movf	1,w
  6051  0E5E  0022               	movlb	2	; select bank2
  6052  0E5F  00C2               	movwf	??_main^(0+256)
  6053  0E60  01C3               	clrf	(??_main^(0+256)+1)
  6054  0E61  0842               	movf	??_main^(0+256),w
  6055  0E62  0026               	movlb	6	; select bank6
  6056  0E63  009C               	movwf	28	;volatile
  6057  0E64  0022               	movlb	2	; select bank2
  6058  0E65  0843               	movf	(??_main+1)^(0+256),w
  6059  0E66  0026               	movlb	6	; select bank6
  6060  0E67  009D               	movwf	29	;volatile
  6061  0E68                     l6848:	
  6062                           
  6063                           ;main.c: 247: }
  6064                           ;main.c: 248: }
  6065                           ;main.c: 259: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6066  0E68  0022               	movlb	2	; select bank2
  6067  0E69  0966               	comf	_knob4_prev^(0+256),w	;volatile
  6068  0E6A  00C2               	movwf	??_main^(0+256)
  6069  0E6B  0967               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  6070  0E6C  00C3               	movwf	(??_main^(0+256)+1)
  6071  0E6D  0AC2               	incf	??_main^(0+256),f
  6072  0E6E  1903               	skipnz
  6073  0E6F  0AC3               	incf	(??_main^(0+256)+1),f
  6074  0E70  0023               	movlb	3	; select bank3
  6075  0E71  084F               	movf	_knob_4_pos^(0+384),w
  6076  0E72  0022               	movlb	2	; select bank2
  6077  0E73  0742               	addwf	??_main^(0+256),w
  6078  0E74  00C4               	movwf	(??_main+2)^(0+256)
  6079  0E75  0023               	movlb	3	; select bank3
  6080  0E76  0850               	movf	(_knob_4_pos+1)^(0+384),w
  6081  0E77  0022               	movlb	2	; select bank2
  6082  0E78  3D43               	addwfc	(??_main+1)^(0+256),w
  6083  0E79  00C5               	movwf	(??_main+3)^(0+256)
  6084  0E7A  0845               	movf	(??_main+3)^(0+256),w
  6085  0E7B  3A80               	xorlw	128
  6086  0E7C  00C6               	movwf	(??_main+4)^(0+256)
  6087  0E7D  3080               	movlw	128
  6088  0E7E  0246               	subwf	(??_main+4)^(0+256),w
  6089  0E7F  1D03               	skipz
  6090  0E80  2E83               	goto	u7065
  6091  0E81  3004               	movlw	4
  6092  0E82  0244               	subwf	(??_main+2)^(0+256),w
  6093  0E83                     u7065:	
  6094  0E83  1803               	skipnc
  6095  0E84  2EA2               	goto	l6852
  6096  0E85  0022               	movlb	2	; select bank2
  6097  0E86  0966               	comf	_knob4_prev^(0+256),w	;volatile
  6098  0E87  00C2               	movwf	??_main^(0+256)
  6099  0E88  0967               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  6100  0E89  00C3               	movwf	(??_main^(0+256)+1)
  6101  0E8A  0AC2               	incf	??_main^(0+256),f
  6102  0E8B  1903               	skipnz
  6103  0E8C  0AC3               	incf	(??_main^(0+256)+1),f
  6104  0E8D  0023               	movlb	3	; select bank3
  6105  0E8E  084F               	movf	_knob_4_pos^(0+384),w
  6106  0E8F  0022               	movlb	2	; select bank2
  6107  0E90  0742               	addwf	??_main^(0+256),w
  6108  0E91  00C4               	movwf	(??_main+2)^(0+256)
  6109  0E92  0023               	movlb	3	; select bank3
  6110  0E93  0850               	movf	(_knob_4_pos+1)^(0+384),w
  6111  0E94  0022               	movlb	2	; select bank2
  6112  0E95  3D43               	addwfc	(??_main+1)^(0+256),w
  6113  0E96  00C5               	movwf	(??_main+3)^(0+256)
  6114  0E97  0845               	movf	(??_main+3)^(0+256),w
  6115  0E98  3A80               	xorlw	128
  6116  0E99  00C6               	movwf	(??_main+4)^(0+256)
  6117  0E9A  307F               	movlw	127
  6118  0E9B  0246               	subwf	(??_main+4)^(0+256),w
  6119  0E9C  1D03               	skipz
  6120  0E9D  2EA0               	goto	u7075
  6121  0E9E  30FD               	movlw	253
  6122  0E9F  0244               	subwf	(??_main+2)^(0+256),w
  6123  0EA0                     u7075:	
  6124  0EA0  1803               	skipnc
  6125  0EA1  2EEA               	goto	l6856
  6126  0EA2                     l6852:	
  6127                           
  6128                           ;main.c: 260: knob4_prev = knob_4_pos;
  6129  0EA2  0023               	movlb	3	; select bank3
  6130  0EA3  0850               	movf	(_knob_4_pos+1)^(0+384),w
  6131  0EA4  0022               	movlb	2	; select bank2
  6132  0EA5  00E7               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  6133  0EA6  0023               	movlb	3	; select bank3
  6134  0EA7  084F               	movf	_knob_4_pos^(0+384),w
  6135  0EA8  0022               	movlb	2	; select bank2
  6136  0EA9  00E6               	movwf	_knob4_prev^(0+256)	;volatile
  6137                           
  6138                           ;main.c: 262: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  6139  0EAA  3000               	movlw	0
  6140  0EAB  0021               	movlb	1	; select bank1
  6141  0EAC  00E1               	movwf	map@out_max^(0+128)
  6142  0EAD  303C               	movlw	60
  6143  0EAE  00E2               	movwf	(map@out_max+1)^(0+128)
  6144  0EAF  3042               	movlw	66
  6145  0EB0  00E3               	movwf	(map@out_max+2)^(0+128)
  6146  0EB1  3000               	movlw	0
  6147  0EB2  00DE               	movwf	map@out_min^(0+128)
  6148  0EB3  3040               	movlw	64
  6149  0EB4  00DF               	movwf	(map@out_min+1)^(0+128)
  6150  0EB5  3040               	movlw	64
  6151  0EB6  00E0               	movwf	(map@out_min+2)^(0+128)
  6152  0EB7  30C0               	movlw	192
  6153  0EB8  00DB               	movwf	map@in_max^(0+128)
  6154  0EB9  307F               	movlw	127
  6155  0EBA  00DC               	movwf	(map@in_max+1)^(0+128)
  6156  0EBB  3044               	movlw	68
  6157  0EBC  00DD               	movwf	(map@in_max+2)^(0+128)
  6158  0EBD  3000               	movlw	0
  6159  0EBE  00D8               	movwf	map@in_min^(0+128)
  6160  0EBF  3000               	movlw	0
  6161  0EC0  00D9               	movwf	(map@in_min+1)^(0+128)
  6162  0EC1  3000               	movlw	0
  6163  0EC2  00DA               	movwf	(map@in_min+2)^(0+128)
  6164  0EC3  0022               	movlb	2	; select bank2
  6165  0EC4  0867               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  6166  0EC5  0021               	movlb	1	; select bank1
  6167  0EC6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6168  0EC7  0022               	movlb	2	; select bank2
  6169  0EC8  0866               	movf	_knob4_prev^(0+256),w	;volatile
  6170  0EC9  0021               	movlb	1	; select bank1
  6171  0ECA  00A8               	movwf	___awtoft@c^(0+128)
  6172  0ECB  3192  2284  318B   	fcall	___awtoft
  6173  0ECE  0021               	movlb	1	; select bank1
  6174  0ECF  0828               	movf	?___awtoft^(0+128),w
  6175  0ED0  00D5               	movwf	map@x^(0+128)
  6176  0ED1  0829               	movf	(?___awtoft+1)^(0+128),w
  6177  0ED2  00D6               	movwf	(map@x+1)^(0+128)
  6178  0ED3  082A               	movf	(?___awtoft+2)^(0+128),w
  6179  0ED4  00D7               	movwf	(map@x+2)^(0+128)
  6180  0ED5  3188  20CE  318B   	fcall	_map
  6181  0ED8  0021               	movlb	1	; select bank1
  6182  0ED9  0855               	movf	?_map^(0+128),w
  6183  0EDA  00E7               	movwf	___fttol@f1^(0+128)
  6184  0EDB  0856               	movf	(?_map+1)^(0+128),w
  6185  0EDC  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6186  0EDD  0857               	movf	(?_map+2)^(0+128),w
  6187  0EDE  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6188  0EDF  3189  2159  318B   	fcall	___fttol
  6189  0EE2  0021               	movlb	1	; select bank1
  6190  0EE3  0868               	movf	(?___fttol^(0+128)+1),w
  6191  0EE4  0023               	movlb	3	; select bank3
  6192  0EE5  00E4               	movwf	(_mod_delay_time+1)^(0+384)
  6193  0EE6  0021               	movlb	1	; select bank1
  6194  0EE7  0867               	movf	?___fttol^(0+128),w
  6195  0EE8  0023               	movlb	3	; select bank3
  6196  0EE9  00E3               	movwf	_mod_delay_time^(0+384)
  6197  0EEA                     l6856:	
  6198                           
  6199                           ;main.c: 263: }
  6200                           ;main.c: 271: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6201  0EEA  0022               	movlb	2	; select bank2
  6202  0EEB  0968               	comf	_knob5_prev^(0+256),w	;volatile
  6203  0EEC  00C2               	movwf	??_main^(0+256)
  6204  0EED  0969               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6205  0EEE  00C3               	movwf	(??_main^(0+256)+1)
  6206  0EEF  0AC2               	incf	??_main^(0+256),f
  6207  0EF0  1903               	skipnz
  6208  0EF1  0AC3               	incf	(??_main^(0+256)+1),f
  6209  0EF2  0023               	movlb	3	; select bank3
  6210  0EF3  0851               	movf	_knob_5_pos^(0+384),w
  6211  0EF4  0022               	movlb	2	; select bank2
  6212  0EF5  0742               	addwf	??_main^(0+256),w
  6213  0EF6  00C4               	movwf	(??_main+2)^(0+256)
  6214  0EF7  0023               	movlb	3	; select bank3
  6215  0EF8  0852               	movf	(_knob_5_pos+1)^(0+384),w
  6216  0EF9  0022               	movlb	2	; select bank2
  6217  0EFA  3D43               	addwfc	(??_main+1)^(0+256),w
  6218  0EFB  00C5               	movwf	(??_main+3)^(0+256)
  6219  0EFC  0845               	movf	(??_main+3)^(0+256),w
  6220  0EFD  3A80               	xorlw	128
  6221  0EFE  00C6               	movwf	(??_main+4)^(0+256)
  6222  0EFF  3080               	movlw	128
  6223  0F00  0246               	subwf	(??_main+4)^(0+256),w
  6224  0F01  1D03               	skipz
  6225  0F02  2F05               	goto	u7085
  6226  0F03  3004               	movlw	4
  6227  0F04  0244               	subwf	(??_main+2)^(0+256),w
  6228  0F05                     u7085:	
  6229  0F05  1803               	skipnc
  6230  0F06  2F24               	goto	l6860
  6231  0F07  0022               	movlb	2	; select bank2
  6232  0F08  0968               	comf	_knob5_prev^(0+256),w	;volatile
  6233  0F09  00C2               	movwf	??_main^(0+256)
  6234  0F0A  0969               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6235  0F0B  00C3               	movwf	(??_main^(0+256)+1)
  6236  0F0C  0AC2               	incf	??_main^(0+256),f
  6237  0F0D  1903               	skipnz
  6238  0F0E  0AC3               	incf	(??_main^(0+256)+1),f
  6239  0F0F  0023               	movlb	3	; select bank3
  6240  0F10  0851               	movf	_knob_5_pos^(0+384),w
  6241  0F11  0022               	movlb	2	; select bank2
  6242  0F12  0742               	addwf	??_main^(0+256),w
  6243  0F13  00C4               	movwf	(??_main+2)^(0+256)
  6244  0F14  0023               	movlb	3	; select bank3
  6245  0F15  0852               	movf	(_knob_5_pos+1)^(0+384),w
  6246  0F16  0022               	movlb	2	; select bank2
  6247  0F17  3D43               	addwfc	(??_main+1)^(0+256),w
  6248  0F18  00C5               	movwf	(??_main+3)^(0+256)
  6249  0F19  0845               	movf	(??_main+3)^(0+256),w
  6250  0F1A  3A80               	xorlw	128
  6251  0F1B  00C6               	movwf	(??_main+4)^(0+256)
  6252  0F1C  307F               	movlw	127
  6253  0F1D  0246               	subwf	(??_main+4)^(0+256),w
  6254  0F1E  1D03               	skipz
  6255  0F1F  2F22               	goto	u7095
  6256  0F20  30FD               	movlw	253
  6257  0F21  0244               	subwf	(??_main+2)^(0+256),w
  6258  0F22                     u7095:	
  6259  0F22  1803               	skipnc
  6260  0F23  2F6C               	goto	l6864
  6261  0F24                     l6860:	
  6262                           
  6263                           ;main.c: 272: knob5_prev = knob_5_pos;
  6264  0F24  0023               	movlb	3	; select bank3
  6265  0F25  0852               	movf	(_knob_5_pos+1)^(0+384),w
  6266  0F26  0022               	movlb	2	; select bank2
  6267  0F27  00E9               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  6268  0F28  0023               	movlb	3	; select bank3
  6269  0F29  0851               	movf	_knob_5_pos^(0+384),w
  6270  0F2A  0022               	movlb	2	; select bank2
  6271  0F2B  00E8               	movwf	_knob5_prev^(0+256)	;volatile
  6272                           
  6273                           ;main.c: 273: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6274  0F2C  3000               	movlw	0
  6275  0F2D  0021               	movlb	1	; select bank1
  6276  0F2E  00E1               	movwf	map@out_max^(0+128)
  6277  0F2F  3000               	movlw	0
  6278  0F30  00E2               	movwf	(map@out_max+1)^(0+128)
  6279  0F31  3000               	movlw	0
  6280  0F32  00E3               	movwf	(map@out_max+2)^(0+128)
  6281  0F33  3060               	movlw	96
  6282  0F34  00DE               	movwf	map@out_min^(0+128)
  6283  0F35  309F               	movlw	159
  6284  0F36  00DF               	movwf	(map@out_min+1)^(0+128)
  6285  0F37  3044               	movlw	68
  6286  0F38  00E0               	movwf	(map@out_min+2)^(0+128)
  6287  0F39  30C0               	movlw	192
  6288  0F3A  00DB               	movwf	map@in_max^(0+128)
  6289  0F3B  307F               	movlw	127
  6290  0F3C  00DC               	movwf	(map@in_max+1)^(0+128)
  6291  0F3D  3044               	movlw	68
  6292  0F3E  00DD               	movwf	(map@in_max+2)^(0+128)
  6293  0F3F  3000               	movlw	0
  6294  0F40  00D8               	movwf	map@in_min^(0+128)
  6295  0F41  3000               	movlw	0
  6296  0F42  00D9               	movwf	(map@in_min+1)^(0+128)
  6297  0F43  3000               	movlw	0
  6298  0F44  00DA               	movwf	(map@in_min+2)^(0+128)
  6299  0F45  0022               	movlb	2	; select bank2
  6300  0F46  0869               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6301  0F47  0021               	movlb	1	; select bank1
  6302  0F48  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6303  0F49  0022               	movlb	2	; select bank2
  6304  0F4A  0868               	movf	_knob5_prev^(0+256),w	;volatile
  6305  0F4B  0021               	movlb	1	; select bank1
  6306  0F4C  00A8               	movwf	___awtoft@c^(0+128)
  6307  0F4D  3192  2284  318B   	fcall	___awtoft
  6308  0F50  0021               	movlb	1	; select bank1
  6309  0F51  0828               	movf	?___awtoft^(0+128),w
  6310  0F52  00D5               	movwf	map@x^(0+128)
  6311  0F53  0829               	movf	(?___awtoft+1)^(0+128),w
  6312  0F54  00D6               	movwf	(map@x+1)^(0+128)
  6313  0F55  082A               	movf	(?___awtoft+2)^(0+128),w
  6314  0F56  00D7               	movwf	(map@x+2)^(0+128)
  6315  0F57  3188  20CE  318B   	fcall	_map
  6316  0F5A  0021               	movlb	1	; select bank1
  6317  0F5B  0855               	movf	?_map^(0+128),w
  6318  0F5C  00E7               	movwf	___fttol@f1^(0+128)
  6319  0F5D  0856               	movf	(?_map+1)^(0+128),w
  6320  0F5E  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6321  0F5F  0857               	movf	(?_map+2)^(0+128),w
  6322  0F60  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6323  0F61  3189  2159  318B   	fcall	___fttol
  6324  0F64  0021               	movlb	1	; select bank1
  6325  0F65  0868               	movf	(?___fttol^(0+128)+1),w
  6326  0F66  0023               	movlb	3	; select bank3
  6327  0F67  00BC               	movwf	(_adjusted_pot_value+1)^(0+384)
  6328  0F68  0021               	movlb	1	; select bank1
  6329  0F69  0867               	movf	?___fttol^(0+128),w
  6330  0F6A  0023               	movlb	3	; select bank3
  6331  0F6B  00BB               	movwf	_adjusted_pot_value^(0+384)
  6332  0F6C                     l6864:	
  6333                           
  6334                           ;main.c: 275: }
  6335                           ;main.c: 278: if (delay_time_changed == 1) {
  6336  0F6C  0023               	movlb	3	; select bank3
  6337  0F6D  0361               	decf	_delay_time_changed^(0+384),w
  6338  0F6E  0462               	iorwf	(_delay_time_changed+1)^(0+384),w
  6339  0F6F  1D03               	btfss	3,2
  6340  0F70  2B78               	goto	l6774
  6341                           
  6342                           ;main.c: 279: delay_time = baseline_delay_time;
  6343  0F71  0020               	movlb	0	; select bank0
  6344  0F72  0848               	movf	_baseline_delay_time+3,w	;volatile
  6345  0F73  00CC               	movwf	_delay_time+3	;volatile
  6346  0F74  0847               	movf	_baseline_delay_time+2,w	;volatile
  6347  0F75  00CB               	movwf	_delay_time+2	;volatile
  6348  0F76  0846               	movf	_baseline_delay_time+1,w	;volatile
  6349  0F77  00CA               	movwf	_delay_time+1	;volatile
  6350  0F78  0845               	movf	_baseline_delay_time,w	;volatile
  6351  0F79  00C9               	movwf	_delay_time	;volatile
  6352                           
  6353                           ;main.c: 280: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6354  0F7A  0846               	movf	_baseline_delay_time+1,w	;volatile
  6355  0F7B  0022               	movlb	2	; select bank2
  6356  0F7C  00B7               	movwf	(set_subdivision@x+1)^(0+256)
  6357  0F7D  0020               	movlb	0	; select bank0
  6358  0F7E  0845               	movf	_baseline_delay_time,w	;volatile
  6359  0F7F  0022               	movlb	2	; select bank2
  6360  0F80  00B6               	movwf	set_subdivision@x^(0+256)
  6361  0F81  0020               	movlb	0	; select bank0
  6362  0F82  0852               	movf	_top_push_state+1,w
  6363  0F83  0022               	movlb	2	; select bank2
  6364  0F84  00B9               	movwf	(set_subdivision@y+1)^(0+256)
  6365  0F85  0020               	movlb	0	; select bank0
  6366  0F86  0851               	movf	_top_push_state,w
  6367  0F87  0022               	movlb	2	; select bank2
  6368  0F88  00B8               	movwf	set_subdivision@y^(0+256)
  6369  0F89  3186  26F4  318B   	fcall	_set_subdivision
  6370  0F8C  0022               	movlb	2	; select bank2
  6371  0F8D  0836               	movf	?_set_subdivision^(0+256),w
  6372  0F8E  0020               	movlb	0	; select bank0
  6373  0F8F  00C9               	movwf	_delay_time	;volatile
  6374  0F90  0022               	movlb	2	; select bank2
  6375  0F91  0837               	movf	(?_set_subdivision+1)^(0+256),w
  6376  0F92  0020               	movlb	0	; select bank0
  6377  0F93  00CA               	movwf	_delay_time+1	;volatile
  6378  0F94  0D89               	rlf	9,f
  6379  0F95  3B89               	subwfb	9,f
  6380  0F96  0989               	comf	9,f
  6381  0F97  00CB               	movwf	_delay_time+2	;volatile
  6382  0F98  00CC               	movwf	_delay_time+3	;volatile
  6383                           
  6384                           ;main.c: 281: reset_sub_delay = 1;
  6385  0F99  3001               	movlw	1
  6386  0F9A  0023               	movlb	3	; select bank3
  6387  0F9B  00D5               	movwf	_reset_sub_delay^(0+384)
  6388  0F9C  3000               	movlw	0
  6389  0F9D  00D6               	movwf	(_reset_sub_delay^(0+384)+1)
  6390                           
  6391                           ;main.c: 282: delayfound = 0;
  6392  0F9E  01C5               	clrf	_delayfound^(0+384)
  6393  0F9F  01C6               	clrf	(_delayfound+1)^(0+384)
  6394                           
  6395                           ;main.c: 283: delay_counter = 0;
  6396  0FA0  0022               	movlb	2	; select bank2
  6397  0FA1  01D1               	clrf	_delay_counter^(0+256)	;volatile
  6398  0FA2  01D2               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6399  0FA3                     l6882:	
  6400                           ;main.c: 285: while (delayfound == 0) {
  6401                           
  6402  0FA3  0023               	movlb	3	; select bank3
  6403  0FA4  0845               	movf	_delayfound^(0+384),w
  6404  0FA5  0446               	iorwf	(_delayfound+1)^(0+384),w
  6405  0FA6  1D03               	btfss	3,2
  6406  0FA7  2FFD               	goto	l6884
  6407                           
  6408                           ;main.c: 286: if (delayArray[delay_counter] <= delay_time * 2) {
  6409  0FA8  0022               	movlb	2	; select bank2
  6410  0FA9  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6411  0FAA  00C3               	movwf	(??_main^(0+256)+1)
  6412  0FAB  0851               	movf	_delay_counter^(0+256),w	;volatile
  6413  0FAC  00C2               	movwf	??_main^(0+256)
  6414  0FAD  35C2               	lslf	??_main^(0+256),f
  6415  0FAE  0DC3               	rlf	(??_main^(0+256)+1),f
  6416  0FAF  30E8               	movlw	232
  6417  0FB0  00C4               	movwf	(??_main+2)^(0+256)
  6418  0FB1  3023               	movlw	35
  6419  0FB2  00C5               	movwf	((??_main+2)^(0+256)+1)
  6420  0FB3  0842               	movf	??_main^(0+256),w
  6421  0FB4  0744               	addwf	(??_main+2)^(0+256),w
  6422  0FB5  0086               	movwf	6
  6423  0FB6  0843               	movf	(??_main+1)^(0+256),w
  6424  0FB7  3D45               	addwfc	(??_main+3)^(0+256),w
  6425  0FB8  0087               	movwf	7
  6426  0FB9  3F40               	moviw [0]fsr1
  6427  0FBA  00C6               	movwf	(??_main+4)^(0+256)
  6428  0FBB  3F41               	moviw [1]fsr1
  6429  0FBC  00C7               	movwf	((??_main+4)^(0+256)+1)
  6430  0FBD  0846               	movf	(??_main+4)^(0+256),w
  6431  0FBE  00C8               	movwf	(??_main+6)^(0+256)
  6432  0FBF  0847               	movf	(??_main+5)^(0+256),w
  6433  0FC0  00C9               	movwf	((??_main+6)^(0+256)+1)
  6434  0FC1  3000               	movlw	0
  6435  0FC2  1BC9               	btfsc	((??_main+6)^(0+256)+1),7
  6436  0FC3  30FF               	movlw	255
  6437  0FC4  00CA               	movwf	((??_main+6)^(0+256)+2)
  6438  0FC5  00CB               	movwf	((??_main+6)^(0+256)+3)
  6439  0FC6  0020               	movlb	0	; select bank0
  6440  0FC7  0849               	movf	_delay_time,w	;volatile
  6441  0FC8  0022               	movlb	2	; select bank2
  6442  0FC9  00CC               	movwf	(??_main+10)^(0+256)
  6443  0FCA  0020               	movlb	0	; select bank0
  6444  0FCB  084A               	movf	_delay_time+1,w	;volatile
  6445  0FCC  0022               	movlb	2	; select bank2
  6446  0FCD  00CD               	movwf	((??_main+10)^(0+256)+1)
  6447  0FCE  0020               	movlb	0	; select bank0
  6448  0FCF  084B               	movf	_delay_time+2,w	;volatile
  6449  0FD0  0022               	movlb	2	; select bank2
  6450  0FD1  00CE               	movwf	((??_main+10)^(0+256)+2)
  6451  0FD2  0020               	movlb	0	; select bank0
  6452  0FD3  084C               	movf	_delay_time+3,w	;volatile
  6453  0FD4  0022               	movlb	2	; select bank2
  6454  0FD5  00CF               	movwf	((??_main+10)^(0+256)+3)
  6455  0FD6  3001               	movlw	1
  6456  0FD7                     u7115:	
  6457  0FD7  35CC               	lslf	(??_main+10)^(0+256),f
  6458  0FD8  0DCD               	rlf	((??_main+10)^(0+256)+1),f
  6459  0FD9  0DCE               	rlf	((??_main+10)^(0+256)+2),f
  6460  0FDA  0DCF               	rlf	((??_main+10)^(0+256)+3),f
  6461  0FDB  0B89               	decfsz	9,f
  6462  0FDC  2FD7               	goto	u7115
  6463  0FDD  084F               	movf	(??_main+13)^(0+256),w
  6464  0FDE  3A80               	xorlw	128
  6465  0FDF  00D0               	movwf	(??_main+14)^(0+256)
  6466  0FE0  084B               	movf	(??_main+9)^(0+256),w
  6467  0FE1  3A80               	xorlw	128
  6468  0FE2  0250               	subwf	(??_main+14)^(0+256),w
  6469  0FE3  1D03               	skipz
  6470  0FE4  2FEF               	goto	u7123
  6471  0FE5  084A               	movf	(??_main+8)^(0+256),w
  6472  0FE6  024E               	subwf	(??_main+12)^(0+256),w
  6473  0FE7  1D03               	skipz
  6474  0FE8  2FEF               	goto	u7123
  6475  0FE9  0849               	movf	(??_main+7)^(0+256),w
  6476  0FEA  024D               	subwf	(??_main+11)^(0+256),w
  6477  0FEB  1D03               	skipz
  6478  0FEC  2FEF               	goto	u7123
  6479  0FED  0848               	movf	(??_main+6)^(0+256),w
  6480  0FEE  024C               	subwf	(??_main+10)^(0+256),w
  6481  0FEF                     u7123:	
  6482  0FEF  1C03               	skipc
  6483  0FF0  2FF7               	goto	l6880
  6484                           
  6485                           ;main.c: 287: delayfound = 1;
  6486  0FF1  3001               	movlw	1
  6487  0FF2  0023               	movlb	3	; select bank3
  6488  0FF3  00C5               	movwf	_delayfound^(0+384)
  6489  0FF4  3000               	movlw	0
  6490  0FF5  00C6               	movwf	(_delayfound^(0+384)+1)
  6491                           
  6492                           ;main.c: 291: } else {
  6493  0FF6  2FA3               	goto	l6882
  6494  0FF7                     l6880:	
  6495                           
  6496                           ;main.c: 292: delay_counter++;
  6497  0FF7  3001               	movlw	1
  6498  0FF8  0022               	movlb	2	; select bank2
  6499  0FF9  07D1               	addwf	_delay_counter^(0+256),f	;volatile
  6500  0FFA  3000               	movlw	0
  6501  0FFB  3DD2               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6502  0FFC  2FA3               	goto	l6882
  6503  0FFD                     l6884:	
  6504                           
  6505                           ;main.c: 294: }
  6506                           ;main.c: 295: }
  6507                           ;main.c: 314: delay_time_changed = 0;
  6508  0FFD  01E1               	clrf	_delay_time_changed^(0+384)
  6509  0FFE  01E2               	clrf	(_delay_time_changed+1)^(0+384)
  6510  0FFF  2B78               	goto	l6774
  6511  1000                     __end_of_main:	
  6512                           
  6513                           	psect	text1
  6514  06F4                     __ptext1:	
  6515 ;; *************** function _set_subdivision *****************
  6516 ;; Defined at:
  6517 ;;		line 77 in file "user.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;  x               2   22[BANK2 ] int 
  6520 ;;  y               2   24[BANK2 ] int 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  scalar          3   29[BANK2 ] float 
  6523 ;;  tmpX            2   32[BANK2 ] int 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;                  2   22[BANK2 ] int 
  6526 ;; Registers used:
  6527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6533 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6534 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6535 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6536 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6537 ;;Total ram usage:       12 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    6
  6540 ;; This function calls:
  6541 ;;		___awtoft
  6542 ;;		___ftmul
  6543 ;;		___fttol
  6544 ;;		_trunc
  6545 ;; This function is called by:
  6546 ;;		_main
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           
  6551                           ;psect for function _set_subdivision
  6552  06F4                     _set_subdivision:	
  6553                           
  6554                           ;user.c: 81: adjust_sub_delay = 0;
  6555                           
  6556                           ;incstack = 0
  6557                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6558  06F4  0023               	movlb	3	; select bank3
  6559  06F5  01B9               	clrf	_adjust_sub_delay^(0+384)
  6560  06F6  01BA               	clrf	(_adjust_sub_delay+1)^(0+384)
  6561                           
  6562                           ;user.c: 82: int tmpX = x;
  6563  06F7  0022               	movlb	2	; select bank2
  6564  06F8  0837               	movf	(set_subdivision@x+1)^(0+256),w
  6565  06F9  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  6566  06FA  0836               	movf	set_subdivision@x^(0+256),w
  6567  06FB  00C0               	movwf	set_subdivision@tmpX^(0+256)
  6568                           
  6569                           ;user.c: 83: float scalar = 1.0;
  6570  06FC  3000               	movlw	0
  6571  06FD  00BD               	movwf	set_subdivision@scalar^(0+256)
  6572  06FE  3080               	movlw	128
  6573  06FF  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  6574  0700  303F               	movlw	63
  6575  0701  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  6576                           
  6577                           ;user.c: 85: switch (y) {
  6578  0702  2F1C               	goto	l6710
  6579  0703                     l6698:	
  6580                           ;user.c: 86: case 1:
  6581                           
  6582                           
  6583                           ;user.c: 87: scalar = 0.75;
  6584  0703  3000               	movlw	0
  6585  0704  00BD               	movwf	set_subdivision@scalar^(0+256)
  6586  0705  3040               	movlw	64
  6587  0706  2F0E               	goto	L4
  6588  0707                     l6700:	
  6589                           ;user.c: 89: case 2:
  6590                           
  6591                           ;user.c: 88: break;
  6592                           
  6593                           
  6594                           ;user.c: 90: scalar = 0.6666;
  6595  0707  30A6               	movlw	166
  6596  0708  00BD               	movwf	set_subdivision@scalar^(0+256)
  6597  0709  302A               	movlw	42
  6598  070A  2F0E               	goto	L4
  6599  070B                     l6702:	
  6600                           ;user.c: 92: case 3:
  6601                           
  6602                           ;user.c: 91: break;
  6603                           
  6604                           
  6605                           ;user.c: 93: scalar = .5;
  6606  070B  3000               	movlw	0
  6607  070C  00BD               	movwf	set_subdivision@scalar^(0+256)
  6608  070D  3000               	movlw	0
  6609  070E                     L4:	
  6610  070E  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  6611  070F  303F               	movlw	63
  6612  0710  2F1A               	goto	L6
  6613  0711                     l6704:	
  6614                           ;user.c: 95: case 4:
  6615                           
  6616                           ;user.c: 94: break;
  6617                           
  6618                           
  6619                           ;user.c: 96: scalar = 0.3333;
  6620  0711  30A6               	movlw	166
  6621  0712  00BD               	movwf	set_subdivision@scalar^(0+256)
  6622  0713  30AA               	movlw	170
  6623  0714  2F18               	goto	L7
  6624  0715                     l6706:	
  6625                           ;user.c: 98: case 5:
  6626                           
  6627                           ;user.c: 97: break;
  6628                           
  6629                           
  6630                           ;user.c: 99: scalar = 0.25;
  6631  0715  3000               	movlw	0
  6632  0716  00BD               	movwf	set_subdivision@scalar^(0+256)
  6633  0717  3080               	movlw	128
  6634  0718                     L7:	
  6635  0718  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  6636  0719  303E               	movlw	62
  6637  071A                     L6:	
  6638  071A  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  6639                           
  6640                           ;user.c: 104: }
  6641                           
  6642                           ;user.c: 103: break;
  6643                           
  6644                           ;user.c: 101: case 6:
  6645                           
  6646                           ;user.c: 100: break;
  6647  071B  2F35               	goto	l6712
  6648  071C                     l6710:	
  6649                           
  6650                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6651                           ; Switch size 1, requested type "space"
  6652                           ; Number of cases is 1, Range of values is 0 to 0
  6653                           ; switch strategies available:
  6654                           ; Name         Instructions Cycles
  6655                           ; simple_byte            4     3 (average)
  6656                           ; direct_byte            8     6 (fixed)
  6657                           ; jumptable            260     6 (fixed)
  6658                           ;	Chosen strategy is simple_byte
  6659  071C  0839               	movf	(set_subdivision@y+1)^(0+256),w
  6660  071D  3A00               	xorlw	0	; case 0
  6661  071E  1903               	skipnz
  6662  071F  2F21               	goto	l7568
  6663  0720  2F35               	goto	l6712
  6664  0721                     l7568:	
  6665                           
  6666                           ; Switch size 1, requested type "space"
  6667                           ; Number of cases is 6, Range of values is 1 to 6
  6668                           ; switch strategies available:
  6669                           ; Name         Instructions Cycles
  6670                           ; simple_byte           19    10 (average)
  6671                           ; direct_byte           21     9 (fixed)
  6672                           ; jumptable            263     9 (fixed)
  6673                           ;	Chosen strategy is simple_byte
  6674  0721  0838               	movf	set_subdivision@y^(0+256),w
  6675  0722  3A01               	xorlw	1	; case 1
  6676  0723  1903               	skipnz
  6677  0724  2F03               	goto	l6698
  6678  0725  3A03               	xorlw	3	; case 2
  6679  0726  1903               	skipnz
  6680  0727  2F07               	goto	l6700
  6681  0728  3A01               	xorlw	1	; case 3
  6682  0729  1903               	skipnz
  6683  072A  2F0B               	goto	l6702
  6684  072B  3A07               	xorlw	7	; case 4
  6685  072C  1903               	skipnz
  6686  072D  2F11               	goto	l6704
  6687  072E  3A01               	xorlw	1	; case 5
  6688  072F  1903               	skipnz
  6689  0730  2F15               	goto	l6706
  6690  0731  3A03               	xorlw	3	; case 6
  6691  0732  1903               	skipnz
  6692  0733  2F35               	goto	l6712
  6693  0734  2F35               	goto	l6712
  6694  0735                     l6712:	
  6695                           
  6696                           ;user.c: 106: tmpX = tmpX * scalar;
  6697  0735  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  6698  0736  0021               	movlb	1	; select bank1
  6699  0737  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6700  0738  0022               	movlb	2	; select bank2
  6701  0739  0840               	movf	set_subdivision@tmpX^(0+256),w
  6702  073A  0021               	movlb	1	; select bank1
  6703  073B  00A8               	movwf	___awtoft@c^(0+128)
  6704  073C  3192  2284  3186   	fcall	___awtoft
  6705  073F  0021               	movlb	1	; select bank1
  6706  0740  0828               	movf	?___awtoft^(0+128),w
  6707  0741  00B8               	movwf	___ftmul@f2^(0+128)
  6708  0742  0829               	movf	(?___awtoft+1)^(0+128),w
  6709  0743  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  6710  0744  082A               	movf	(?___awtoft+2)^(0+128),w
  6711  0745  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  6712  0746  0022               	movlb	2	; select bank2
  6713  0747  083D               	movf	set_subdivision@scalar^(0+256),w
  6714  0748  0021               	movlb	1	; select bank1
  6715  0749  00B5               	movwf	___ftmul@f1^(0+128)
  6716  074A  0022               	movlb	2	; select bank2
  6717  074B  083E               	movf	(set_subdivision@scalar+1)^(0+256),w
  6718  074C  0021               	movlb	1	; select bank1
  6719  074D  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  6720  074E  0022               	movlb	2	; select bank2
  6721  074F  083F               	movf	(set_subdivision@scalar+2)^(0+256),w
  6722  0750  0021               	movlb	1	; select bank1
  6723  0751  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  6724  0752  318A  22A1  3186   	fcall	___ftmul
  6725  0755  0021               	movlb	1	; select bank1
  6726  0756  0835               	movf	?___ftmul^(0+128),w
  6727  0757  00E7               	movwf	___fttol@f1^(0+128)
  6728  0758  0836               	movf	(?___ftmul+1)^(0+128),w
  6729  0759  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6730  075A  0837               	movf	(?___ftmul+2)^(0+128),w
  6731  075B  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6732  075C  3189  2159  3186   	fcall	___fttol
  6733  075F  0021               	movlb	1	; select bank1
  6734  0760  0868               	movf	(?___fttol^(0+128)+1),w
  6735  0761  0022               	movlb	2	; select bank2
  6736  0762  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  6737  0763  0021               	movlb	1	; select bank1
  6738  0764  0867               	movf	?___fttol^(0+128),w
  6739  0765  0022               	movlb	2	; select bank2
  6740  0766  00C0               	movwf	set_subdivision@tmpX^(0+256)
  6741                           
  6742                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  6743  0767  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  6744  0768  0021               	movlb	1	; select bank1
  6745  0769  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6746  076A  0022               	movlb	2	; select bank2
  6747  076B  0840               	movf	set_subdivision@tmpX^(0+256),w
  6748  076C  0021               	movlb	1	; select bank1
  6749  076D  00A8               	movwf	___awtoft@c^(0+128)
  6750  076E  3192  2284  3186   	fcall	___awtoft
  6751  0771  0021               	movlb	1	; select bank1
  6752  0772  0828               	movf	?___awtoft^(0+128),w
  6753  0773  0022               	movlb	2	; select bank2
  6754  0774  00AE               	movwf	trunc@x^(0+256)
  6755  0775  0021               	movlb	1	; select bank1
  6756  0776  0829               	movf	(?___awtoft+1)^(0+128),w
  6757  0777  0022               	movlb	2	; select bank2
  6758  0778  00AF               	movwf	(trunc@x+1)^(0+256)
  6759  0779  0021               	movlb	1	; select bank1
  6760  077A  082A               	movf	(?___awtoft+2)^(0+128),w
  6761  077B  0022               	movlb	2	; select bank2
  6762  077C  00B0               	movwf	(trunc@x+2)^(0+256)
  6763  077D  3187  27AE  3186   	fcall	_trunc
  6764  0780  0022               	movlb	2	; select bank2
  6765  0781  082E               	movf	?_trunc^(0+256),w
  6766  0782  00BA               	movwf	??_set_subdivision^(0+256)
  6767  0783  082F               	movf	(?_trunc+1)^(0+256),w
  6768  0784  00BB               	movwf	(??_set_subdivision^(0+256)+1)
  6769  0785  0830               	movf	(?_trunc+2)^(0+256),w
  6770  0786  00BC               	movwf	(??_set_subdivision^(0+256)+2)
  6771  0787  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  6772  0788  0021               	movlb	1	; select bank1
  6773  0789  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6774  078A  0022               	movlb	2	; select bank2
  6775  078B  0840               	movf	set_subdivision@tmpX^(0+256),w
  6776  078C  0021               	movlb	1	; select bank1
  6777  078D  00A8               	movwf	___awtoft@c^(0+128)
  6778  078E  3192  2284  3186   	fcall	___awtoft
  6779  0791  0021               	movlb	1	; select bank1
  6780  0792  082A               	movf	(?___awtoft+2)^(0+128),w
  6781  0793  0022               	movlb	2	; select bank2
  6782  0794  063C               	xorwf	(??_set_subdivision+2)^(0+256),w
  6783  0795  1D03               	skipz
  6784  0796  2FA1               	goto	u6935
  6785  0797  0021               	movlb	1	; select bank1
  6786  0798  0829               	movf	(?___awtoft+1)^(0+128),w
  6787  0799  0022               	movlb	2	; select bank2
  6788  079A  063B               	xorwf	(??_set_subdivision+1)^(0+256),w
  6789  079B  1D03               	skipz
  6790  079C  2FA1               	goto	u6935
  6791  079D  0021               	movlb	1	; select bank1
  6792  079E  0828               	movf	?___awtoft^(0+128),w
  6793  079F  0022               	movlb	2	; select bank2
  6794  07A0  063A               	xorwf	??_set_subdivision^(0+256),w
  6795  07A1                     u6935:	
  6796  07A1  1903               	skipnz
  6797  07A2  2FA8               	goto	l574
  6798                           
  6799                           ;user.c: 109: adjust_sub_delay = 1;
  6800  07A3  3001               	movlw	1
  6801  07A4  0023               	movlb	3	; select bank3
  6802  07A5  00B9               	movwf	_adjust_sub_delay^(0+384)
  6803  07A6  3000               	movlw	0
  6804  07A7  00BA               	movwf	(_adjust_sub_delay^(0+384)+1)
  6805  07A8                     l574:	
  6806                           
  6807                           ;user.c: 110: }
  6808                           ;user.c: 112: return tmpX;
  6809  07A8  0022               	movlb	2	; select bank2
  6810  07A9  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  6811  07AA  00B7               	movwf	(?_set_subdivision+1)^(0+256)
  6812  07AB  0840               	movf	set_subdivision@tmpX^(0+256),w
  6813  07AC  00B6               	movwf	?_set_subdivision^(0+256)
  6814  07AD  0008               	return
  6815  07AE                     __end_of_set_subdivision:	
  6816                           
  6817                           	psect	text2
  6818  07AE                     __ptext2:	
  6819 ;; *************** function _trunc *****************
  6820 ;; Defined at:
  6821 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  x               3   14[BANK2 ] int 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  i               3   17[BANK2 ] int 
  6826 ;;  expon           2   20[BANK2 ] int 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  3   14[BANK2 ] int 
  6829 ;; Registers used:
  6830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6836 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6837 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6838 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6839 ;;      Totals:         0       0       1       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6840 ;;Total ram usage:        9 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    5
  6843 ;; This function calls:
  6844 ;;		___altoft
  6845 ;;		___fttol
  6846 ;;		_frexp
  6847 ;; This function is called by:
  6848 ;;		_set_subdivision
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           
  6853                           ;psect for function _trunc
  6854  07AE                     _trunc:	
  6855                           
  6856                           ;incstack = 0
  6857                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6858  07AE  0022               	movlb	2	; select bank2
  6859  07AF  082E               	movf	trunc@x^(0+256),w
  6860  07B0  0021               	movlb	1	; select bank1
  6861  07B1  00A0               	movwf	frexp@value^(0+128)
  6862  07B2  0022               	movlb	2	; select bank2
  6863  07B3  082F               	movf	(trunc@x+1)^(0+256),w
  6864  07B4  0021               	movlb	1	; select bank1
  6865  07B5  00A1               	movwf	(frexp@value+1)^(0+128)
  6866  07B6  0022               	movlb	2	; select bank2
  6867  07B7  0830               	movf	(trunc@x+2)^(0+256),w
  6868  07B8  0021               	movlb	1	; select bank1
  6869  07B9  00A2               	movwf	(frexp@value+2)^(0+128)
  6870  07BA  3034               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  6871  07BB  00EF               	movwf	??_trunc^(0+128)
  6872  07BC  086F               	movf	??_trunc^(0+128),w
  6873  07BD  00A3               	movwf	frexp@eptr^(0+128)
  6874  07BE  3193  23B5  3187   	fcall	_frexp
  6875  07C1  0022               	movlb	2	; select bank2
  6876  07C2  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  6877  07C3  2FCB               	goto	l6302
  6878  07C4  3000               	movlw	0
  6879  07C5  00AE               	movwf	?_trunc^(0+256)
  6880  07C6  3000               	movlw	0
  6881  07C7  00AF               	movwf	(?_trunc+1)^(0+256)
  6882  07C8  3000               	movlw	0
  6883  07C9  00B0               	movwf	(?_trunc+2)^(0+256)
  6884  07CA  0008               	return
  6885  07CB                     l6302:	
  6886  07CB  3000               	movlw	0
  6887  07CC  0235               	subwf	(trunc@expon+1)^(0+256),w
  6888  07CD  3015               	movlw	21
  6889  07CE  1903               	skipnz
  6890  07CF  0234               	subwf	trunc@expon^(0+256),w
  6891  07D0  1803               	btfsc	3,0
  6892  07D1  0008               	return
  6893  07D2  082E               	movf	trunc@x^(0+256),w
  6894  07D3  0021               	movlb	1	; select bank1
  6895  07D4  00E7               	movwf	___fttol@f1^(0+128)
  6896  07D5  0022               	movlb	2	; select bank2
  6897  07D6  082F               	movf	(trunc@x+1)^(0+256),w
  6898  07D7  0021               	movlb	1	; select bank1
  6899  07D8  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6900  07D9  0022               	movlb	2	; select bank2
  6901  07DA  0830               	movf	(trunc@x+2)^(0+256),w
  6902  07DB  0021               	movlb	1	; select bank1
  6903  07DC  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6904  07DD  3189  2159  3187   	fcall	___fttol
  6905  07E0  0021               	movlb	1	; select bank1
  6906  07E1  086A               	movf	(?___fttol+3)^(0+128),w
  6907  07E2  0022               	movlb	2	; select bank2
  6908  07E3  00A9               	movwf	(___altoft@c+3)^(0+256)
  6909  07E4  0021               	movlb	1	; select bank1
  6910  07E5  0869               	movf	(?___fttol+2)^(0+128),w
  6911  07E6  0022               	movlb	2	; select bank2
  6912  07E7  00A8               	movwf	(___altoft@c+2)^(0+256)
  6913  07E8  0021               	movlb	1	; select bank1
  6914  07E9  0868               	movf	(?___fttol+1)^(0+128),w
  6915  07EA  0022               	movlb	2	; select bank2
  6916  07EB  00A7               	movwf	(___altoft@c+1)^(0+256)
  6917  07EC  0021               	movlb	1	; select bank1
  6918  07ED  0867               	movf	?___fttol^(0+128),w
  6919  07EE  0022               	movlb	2	; select bank2
  6920  07EF  00A6               	movwf	___altoft@c^(0+256)
  6921  07F0  3188  2001         	fcall	___altoft
  6922  07F2  0022               	movlb	2	; select bank2
  6923  07F3  0826               	movf	?___altoft^(0+256),w
  6924  07F4  00B1               	movwf	trunc@i^(0+256)
  6925  07F5  0827               	movf	(?___altoft+1)^(0+256),w
  6926  07F6  00B2               	movwf	(trunc@i+1)^(0+256)
  6927  07F7  0828               	movf	(?___altoft+2)^(0+256),w
  6928  07F8  00B3               	movwf	(trunc@i+2)^(0+256)
  6929  07F9  0831               	movf	trunc@i^(0+256),w
  6930  07FA  00AE               	movwf	?_trunc^(0+256)
  6931  07FB  0832               	movf	(trunc@i+1)^(0+256),w
  6932  07FC  00AF               	movwf	(?_trunc+1)^(0+256)
  6933  07FD  0833               	movf	(trunc@i+2)^(0+256),w
  6934  07FE  00B0               	movwf	(?_trunc+2)^(0+256)
  6935  07FF  0008               	return
  6936  0800                     __end_of_trunc:	
  6937                           
  6938                           	psect	text3
  6939  13B5                     __ptext3:	
  6940 ;; *************** function _frexp *****************
  6941 ;; Defined at:
  6942 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  value           3    0[BANK1 ] int 
  6945 ;;  eptr            1    3[BANK1 ] PTR int 
  6946 ;;		 -> trunc@expon(2), 
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  3    0[BANK1 ] PTR int 
  6951 ;; Registers used:
  6952 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6958 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6960 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6961 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6962 ;;Total ram usage:        6 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    3
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		_trunc
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           
  6973                           ;psect for function _frexp
  6974  13B5                     _frexp:	
  6975                           
  6976                           ;incstack = 0
  6977                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  6978  13B5  0021               	movlb	1	; select bank1
  6979  13B6  0822               	movf	(frexp@value+2)^(0+128),w
  6980  13B7  0421               	iorwf	(frexp@value+1)^(0+128),w
  6981  13B8  0420               	iorwf	frexp@value^(0+128),w
  6982  13B9  1D03               	skipz
  6983  13BA  2BC3               	goto	l6236
  6984  13BB  0823               	movf	frexp@eptr^(0+128),w
  6985  13BC  0086               	movwf	6
  6986  13BD  3001               	movlw	1	; select bank2/3
  6987  13BE  0087               	movwf	7
  6988  13BF  3000               	movlw	0
  6989  13C0  3FC0               	movwi [0]fsr1
  6990  13C1  3FC1               	movwi [1]fsr1
  6991                           
  6992                           ;	Return value of _frexp is never used
  6993  13C2  0008               	return
  6994  13C3                     l6236:	
  6995  13C3  0822               	movf	(frexp@value^(0+128)+2),w
  6996  13C4  397F               	andlw	127
  6997  13C5  00A4               	movwf	??_frexp^(0+128)
  6998  13C6  01A5               	clrf	(??_frexp^(0+128)+1)
  6999  13C7  35A4               	lslf	??_frexp^(0+128),f
  7000  13C8  0DA5               	rlf	(??_frexp^(0+128)+1),f
  7001  13C9  0823               	movf	frexp@eptr^(0+128),w
  7002  13CA  0086               	movwf	6
  7003  13CB  3001               	movlw	1	; select bank2/3
  7004  13CC  0087               	movwf	7
  7005  13CD  0824               	movf	??_frexp^(0+128),w
  7006  13CE  3FC0               	movwi [0]fsr1
  7007  13CF  0825               	movf	(??_frexp+1)^(0+128),w
  7008  13D0  3FC1               	movwi [1]fsr1
  7009  13D1  0D21               	rlf	(frexp@value^(0+128)+1),w
  7010  13D2  0D21               	rlf	(frexp@value^(0+128)+1),w
  7011  13D3  3901               	andlw	1
  7012  13D4  00A4               	movwf	??_frexp^(0+128)
  7013  13D5  01A5               	clrf	(??_frexp^(0+128)+1)
  7014  13D6  0823               	movf	frexp@eptr^(0+128),w
  7015  13D7  0086               	movwf	6
  7016  13D8  3001               	movlw	1	; select bank2/3
  7017  13D9  0087               	movwf	7
  7018  13DA  0824               	movf	??_frexp^(0+128),w
  7019  13DB  0481               	iorwf	1,f
  7020  13DC  3141               	addfsr 1,1
  7021  13DD  0825               	movf	(??_frexp+1)^(0+128),w
  7022  13DE  0481               	iorwf	1,f
  7023  13DF  0823               	movf	frexp@eptr^(0+128),w
  7024  13E0  0086               	movwf	6
  7025  13E1  3001               	movlw	1	; select bank2/3
  7026  13E2  0087               	movwf	7
  7027  13E3  3082               	movlw	130
  7028  13E4  0781               	addwf	1,f
  7029  13E5  3141               	addfsr 1,1
  7030  13E6  30FF               	movlw	255
  7031  13E7  3D81               	addwfc	1,f
  7032  13E8  317F               	addfsr 1,-1
  7033  13E9  0822               	movf	(frexp@value^(0+128)+2),w
  7034  13EA  3980               	andlw	-128
  7035  13EB  383F               	iorlw	63
  7036  13EC  00A2               	movwf	(frexp@value^(0+128)+2)
  7037  13ED  13A1               	bcf	(frexp@value^(0+128)+1),7
  7038  13EE  0008               	return
  7039  13EF                     __end_of_frexp:	
  7040                           ;	Return value of _frexp is never used
  7041                           
  7042                           
  7043                           	psect	text4
  7044  0959                     __ptext4:	
  7045 ;; *************** function ___fttol *****************
  7046 ;; Defined at:
  7047 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  f1              3   71[BANK1 ] float 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  lval            4    1[BANK2 ] unsigned long 
  7052 ;;  exp1            1    5[BANK2 ] unsigned char 
  7053 ;;  sign1           1    0[BANK2 ] unsigned char 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  4   71[BANK1 ] long 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7063 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7064 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7065 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7066 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7067 ;;Total ram usage:       14 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    3
  7070 ;; This function calls:
  7071 ;;		Nothing
  7072 ;; This function is called by:
  7073 ;;		_main
  7074 ;;		_set_subdivision
  7075 ;;		_trunc
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           
  7080                           ;psect for function ___fttol
  7081  0959                     ___fttol:	
  7082                           
  7083                           ;incstack = 0
  7084                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7085  0959  0021               	movlb	1	; select bank1
  7086  095A  0867               	movf	___fttol@f1^(0+128),w
  7087  095B  00EB               	movwf	??___fttol^(0+128)
  7088  095C  0868               	movf	(___fttol@f1+1)^(0+128),w
  7089  095D  00EC               	movwf	(??___fttol^(0+128)+1)
  7090  095E  0869               	movf	(___fttol@f1+2)^(0+128),w
  7091  095F  00ED               	movwf	(??___fttol^(0+128)+2)
  7092  0960  1003               	clrc
  7093  0961  0D6C               	rlf	(??___fttol^(0+128)+1),w
  7094  0962  0D6D               	rlf	(??___fttol^(0+128)+2),w
  7095  0963  00EE               	movwf	(??___fttol+3)^(0+128)
  7096  0964  086E               	movf	(??___fttol+3)^(0+128),w
  7097  0965  0022               	movlb	2	; select bank2
  7098  0966  00A5               	movwf	___fttol@exp1^(0+256)
  7099  0967  0825               	movf	___fttol@exp1^(0+256),w
  7100  0968  1D03               	btfss	3,2
  7101  0969  2974               	goto	l6194
  7102  096A  3000               	movlw	0
  7103  096B  0021               	movlb	1	; select bank1
  7104  096C  00EA               	movwf	(?___fttol+3)^(0+128)
  7105  096D  3000               	movlw	0
  7106  096E  00E9               	movwf	(?___fttol+2)^(0+128)
  7107  096F  3000               	movlw	0
  7108  0970  00E8               	movwf	(?___fttol+1)^(0+128)
  7109  0971  3000               	movlw	0
  7110  0972  00E7               	movwf	?___fttol^(0+128)
  7111  0973  0008               	return
  7112  0974                     l6194:	
  7113  0974  0021               	movlb	1	; select bank1
  7114  0975  0867               	movf	___fttol@f1^(0+128),w
  7115  0976  00EB               	movwf	??___fttol^(0+128)
  7116  0977  0868               	movf	(___fttol@f1+1)^(0+128),w
  7117  0978  00EC               	movwf	(??___fttol^(0+128)+1)
  7118  0979  0869               	movf	(___fttol@f1+2)^(0+128),w
  7119  097A  00ED               	movwf	(??___fttol^(0+128)+2)
  7120  097B  3017               	movlw	23
  7121  097C                     u6215:	
  7122  097C  36ED               	lsrf	(??___fttol^(0+128)+2),f
  7123  097D  0CEC               	rrf	(??___fttol^(0+128)+1),f
  7124  097E  0CEB               	rrf	??___fttol^(0+128),f
  7125  097F  0B89               	decfsz	9,f
  7126  0980  297C               	goto	u6215
  7127  0981  086B               	movf	??___fttol^(0+128),w
  7128  0982  00EE               	movwf	(??___fttol+3)^(0+128)
  7129  0983  086E               	movf	(??___fttol+3)^(0+128),w
  7130  0984  0022               	movlb	2	; select bank2
  7131  0985  00A0               	movwf	___fttol@sign1^(0+256)
  7132  0986  0021               	movlb	1	; select bank1
  7133  0987  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  7134  0988  30FF               	movlw	255
  7135  0989  05E7               	andwf	___fttol@f1^(0+128),f
  7136  098A  30FF               	movlw	255
  7137  098B  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  7138  098C  3000               	movlw	0
  7139  098D  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  7140  098E  0867               	movf	___fttol@f1^(0+128),w
  7141  098F  0022               	movlb	2	; select bank2
  7142  0990  00A1               	movwf	___fttol@lval^(0+256)
  7143  0991  0021               	movlb	1	; select bank1
  7144  0992  0868               	movf	(___fttol@f1+1)^(0+128),w
  7145  0993  0022               	movlb	2	; select bank2
  7146  0994  00A2               	movwf	(___fttol@lval^(0+256)+1)
  7147  0995  0021               	movlb	1	; select bank1
  7148  0996  0869               	movf	(___fttol@f1+2)^(0+128),w
  7149  0997  0022               	movlb	2	; select bank2
  7150  0998  00A3               	movwf	(___fttol@lval^(0+256)+2)
  7151  0999  01A4               	clrf	(___fttol@lval^(0+256)+3)
  7152  099A  308E               	movlw	142
  7153  099B  02A5               	subwf	___fttol@exp1^(0+256),f
  7154  099C  1FA5               	btfss	___fttol@exp1^(0+256),7
  7155  099D  29BE               	goto	l6214
  7156  099E  0825               	movf	___fttol@exp1^(0+256),w
  7157  099F  3A80               	xorlw	128
  7158  09A0  3E8F               	addlw	143
  7159  09A1  1803               	skipnc
  7160  09A2  29AD               	goto	l6212
  7161  09A3  3000               	movlw	0
  7162  09A4  0021               	movlb	1	; select bank1
  7163  09A5  00EA               	movwf	(?___fttol+3)^(0+128)
  7164  09A6  3000               	movlw	0
  7165  09A7  00E9               	movwf	(?___fttol+2)^(0+128)
  7166  09A8  3000               	movlw	0
  7167  09A9  00E8               	movwf	(?___fttol+1)^(0+128)
  7168  09AA  3000               	movlw	0
  7169  09AB  00E7               	movwf	?___fttol^(0+128)
  7170  09AC  0008               	return
  7171  09AD                     l6212:	
  7172  09AD  3001               	movlw	1
  7173  09AE                     u6245:	
  7174  09AE  0022               	movlb	2	; select bank2
  7175  09AF  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
  7176  09B0  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
  7177  09B1  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
  7178  09B2  0CA1               	rrf	___fttol@lval^(0+256),f
  7179  09B3  0B89               	decfsz	9,f
  7180  09B4  29AE               	goto	u6245
  7181  09B5  3001               	movlw	1
  7182  09B6  0021               	movlb	1	; select bank1
  7183  09B7  00EB               	movwf	??___fttol^(0+128)
  7184  09B8  086B               	movf	??___fttol^(0+128),w
  7185  09B9  0022               	movlb	2	; select bank2
  7186  09BA  07A5               	addwf	___fttol@exp1^(0+256),f
  7187  09BB  1903               	btfsc	3,2
  7188  09BC  29DA               	goto	l6222
  7189  09BD  29AD               	goto	l6212
  7190  09BE                     l6214:	
  7191  09BE  3018               	movlw	24
  7192  09BF  0225               	subwf	___fttol@exp1^(0+256),w
  7193  09C0  1C03               	skipc
  7194  09C1  29D6               	goto	l1981
  7195  09C2  3000               	movlw	0
  7196  09C3  0021               	movlb	1	; select bank1
  7197  09C4  00EA               	movwf	(?___fttol+3)^(0+128)
  7198  09C5  3000               	movlw	0
  7199  09C6  00E9               	movwf	(?___fttol+2)^(0+128)
  7200  09C7  3000               	movlw	0
  7201  09C8  00E8               	movwf	(?___fttol+1)^(0+128)
  7202  09C9  3000               	movlw	0
  7203  09CA  00E7               	movwf	?___fttol^(0+128)
  7204  09CB  0008               	return
  7205  09CC                     l6220:	
  7206  09CC  3001               	movlw	1
  7207  09CD                     u6275:	
  7208  09CD  0022               	movlb	2	; select bank2
  7209  09CE  35A1               	lslf	___fttol@lval^(0+256),f
  7210  09CF  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
  7211  09D0  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
  7212  09D1  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
  7213  09D2  0B89               	decfsz	9,f
  7214  09D3  29CD               	goto	u6275
  7215  09D4  3001               	movlw	1
  7216  09D5  02A5               	subwf	___fttol@exp1^(0+256),f
  7217  09D6                     l1981:	
  7218  09D6  0022               	movlb	2	; select bank2
  7219  09D7  0825               	movf	___fttol@exp1^(0+256),w
  7220  09D8  1D03               	btfss	3,2
  7221  09D9  29CC               	goto	l6220
  7222  09DA                     l6222:	
  7223  09DA  0820               	movf	___fttol@sign1^(0+256),w
  7224  09DB  1903               	btfsc	3,2
  7225  09DC  29E8               	goto	l6226
  7226  09DD  09A1               	comf	___fttol@lval^(0+256),f
  7227  09DE  09A2               	comf	(___fttol@lval+1)^(0+256),f
  7228  09DF  09A3               	comf	(___fttol@lval+2)^(0+256),f
  7229  09E0  09A4               	comf	(___fttol@lval+3)^(0+256),f
  7230  09E1  0AA1               	incf	___fttol@lval^(0+256),f
  7231  09E2  1903               	skipnz
  7232  09E3  0AA2               	incf	(___fttol@lval+1)^(0+256),f
  7233  09E4  1903               	skipnz
  7234  09E5  0AA3               	incf	(___fttol@lval+2)^(0+256),f
  7235  09E6  1903               	skipnz
  7236  09E7  0AA4               	incf	(___fttol@lval+3)^(0+256),f
  7237  09E8                     l6226:	
  7238  09E8  0824               	movf	(___fttol@lval+3)^(0+256),w
  7239  09E9  0021               	movlb	1	; select bank1
  7240  09EA  00EA               	movwf	(?___fttol+3)^(0+128)
  7241  09EB  0022               	movlb	2	; select bank2
  7242  09EC  0823               	movf	(___fttol@lval+2)^(0+256),w
  7243  09ED  0021               	movlb	1	; select bank1
  7244  09EE  00E9               	movwf	(?___fttol+2)^(0+128)
  7245  09EF  0022               	movlb	2	; select bank2
  7246  09F0  0822               	movf	(___fttol@lval+1)^(0+256),w
  7247  09F1  0021               	movlb	1	; select bank1
  7248  09F2  00E8               	movwf	(?___fttol+1)^(0+128)
  7249  09F3  0022               	movlb	2	; select bank2
  7250  09F4  0821               	movf	___fttol@lval^(0+256),w
  7251  09F5  0021               	movlb	1	; select bank1
  7252  09F6  00E7               	movwf	?___fttol^(0+128)
  7253  09F7  0008               	return
  7254  09F8                     __end_of___fttol:	
  7255                           
  7256                           	psect	text5
  7257  0801                     __ptext5:	
  7258 ;; *************** function ___altoft *****************
  7259 ;; Defined at:
  7260 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  c               4    6[BANK2 ] long 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  sign            1   13[BANK2 ] unsigned char 
  7265 ;;  exp             1   12[BANK2 ] unsigned char 
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  3    6[BANK2 ] float 
  7268 ;; Registers used:
  7269 ;;		wreg, status,2, status,0, pclath, cstack
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7275 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7276 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7277 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7278 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7279 ;;Total ram usage:        8 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    4
  7282 ;; This function calls:
  7283 ;;		___ftpack
  7284 ;; This function is called by:
  7285 ;;		_trunc
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function ___altoft
  7291  0801                     ___altoft:	
  7292                           
  7293                           ;incstack = 0
  7294                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  7295  0801  0022               	movlb	2	; select bank2
  7296  0802  01AD               	clrf	___altoft@sign^(0+256)
  7297  0803  308E               	movlw	142
  7298  0804  00AA               	movwf	??___altoft^(0+256)
  7299  0805  082A               	movf	??___altoft^(0+256),w
  7300  0806  00AC               	movwf	___altoft@exp^(0+256)
  7301  0807  1FA9               	btfss	(___altoft@c+3)^(0+256),7
  7302  0808  2816               	goto	l6182
  7303  0809  09A6               	comf	___altoft@c^(0+256),f
  7304  080A  09A7               	comf	(___altoft@c+1)^(0+256),f
  7305  080B  09A8               	comf	(___altoft@c+2)^(0+256),f
  7306  080C  09A9               	comf	(___altoft@c+3)^(0+256),f
  7307  080D  0AA6               	incf	___altoft@c^(0+256),f
  7308  080E  1903               	skipnz
  7309  080F  0AA7               	incf	(___altoft@c+1)^(0+256),f
  7310  0810  1903               	skipnz
  7311  0811  0AA8               	incf	(___altoft@c+2)^(0+256),f
  7312  0812  1903               	skipnz
  7313  0813  0AA9               	incf	(___altoft@c+3)^(0+256),f
  7314  0814  01AD               	clrf	___altoft@sign^(0+256)
  7315  0815  0AAD               	incf	___altoft@sign^(0+256),f
  7316  0816                     l6182:	
  7317  0816  30FF               	movlw	255
  7318  0817  0529               	andwf	(___altoft@c+3)^(0+256),w
  7319  0818  1903               	btfsc	3,2
  7320  0819  2826               	goto	l6184
  7321  081A  3001               	movlw	1
  7322  081B                     u6185:	
  7323  081B  36A9               	lsrf	(___altoft@c+3)^(0+256),f
  7324  081C  0CA8               	rrf	(___altoft@c+2)^(0+256),f
  7325  081D  0CA7               	rrf	(___altoft@c+1)^(0+256),f
  7326  081E  0CA6               	rrf	___altoft@c^(0+256),f
  7327  081F  0B89               	decfsz	9,f
  7328  0820  281B               	goto	u6185
  7329  0821  3001               	movlw	1
  7330  0822  00AA               	movwf	??___altoft^(0+256)
  7331  0823  082A               	movf	??___altoft^(0+256),w
  7332  0824  07AC               	addwf	___altoft@exp^(0+256),f
  7333  0825  2816               	goto	l6182
  7334  0826                     l6184:	
  7335  0826  0826               	movf	___altoft@c^(0+256),w
  7336  0827  0021               	movlb	1	; select bank1
  7337  0828  00A0               	movwf	___ftpack@arg^(0+128)
  7338  0829  0022               	movlb	2	; select bank2
  7339  082A  0827               	movf	(___altoft@c+1)^(0+256),w
  7340  082B  0021               	movlb	1	; select bank1
  7341  082C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  7342  082D  0022               	movlb	2	; select bank2
  7343  082E  0828               	movf	(___altoft@c+2)^(0+256),w
  7344  082F  0021               	movlb	1	; select bank1
  7345  0830  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  7346  0831  0022               	movlb	2	; select bank2
  7347  0832  082C               	movf	___altoft@exp^(0+256),w
  7348  0833  00AA               	movwf	??___altoft^(0+256)
  7349  0834  082A               	movf	??___altoft^(0+256),w
  7350  0835  0021               	movlb	1	; select bank1
  7351  0836  00A3               	movwf	___ftpack@exp^(0+128)
  7352  0837  0022               	movlb	2	; select bank2
  7353  0838  082D               	movf	___altoft@sign^(0+256),w
  7354  0839  00AB               	movwf	(??___altoft+1)^(0+256)
  7355  083A  082B               	movf	(??___altoft+1)^(0+256),w
  7356  083B  0021               	movlb	1	; select bank1
  7357  083C  00A4               	movwf	___ftpack@sign^(0+128)
  7358  083D  3197  2725         	fcall	___ftpack
  7359  083F  0021               	movlb	1	; select bank1
  7360  0840  0820               	movf	?___ftpack^(0+128),w
  7361  0841  0022               	movlb	2	; select bank2
  7362  0842  00A6               	movwf	?___altoft^(0+256)
  7363  0843  0021               	movlb	1	; select bank1
  7364  0844  0821               	movf	(?___ftpack+1)^(0+128),w
  7365  0845  0022               	movlb	2	; select bank2
  7366  0846  00A7               	movwf	(?___altoft+1)^(0+256)
  7367  0847  0021               	movlb	1	; select bank1
  7368  0848  0822               	movf	(?___ftpack+2)^(0+128),w
  7369  0849  0022               	movlb	2	; select bank2
  7370  084A  00A8               	movwf	(?___altoft+2)^(0+256)
  7371  084B  0008               	return
  7372  084C                     __end_of___altoft:	
  7373                           
  7374                           	psect	text6
  7375  1284                     __ptext6:	
  7376 ;; *************** function ___awtoft *****************
  7377 ;; Defined at:
  7378 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  c               2    8[BANK1 ] int 
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;  sign            1   13[BANK1 ] unsigned char 
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  3    8[BANK1 ] float 
  7385 ;; Registers used:
  7386 ;;		wreg, status,2, status,0, pclath, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7392 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7393 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7394 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7395 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7396 ;;Total ram usage:        6 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    4
  7399 ;; This function calls:
  7400 ;;		___ftpack
  7401 ;; This function is called by:
  7402 ;;		_main
  7403 ;;		_set_subdivision
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function ___awtoft
  7409  1284                     ___awtoft:	
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7413  1284  0021               	movlb	1	; select bank1
  7414  1285  01AD               	clrf	___awtoft@sign^(0+128)
  7415  1286  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  7416  1287  2A8F               	goto	l6420
  7417  1288  09A8               	comf	___awtoft@c^(0+128),f
  7418  1289  09A9               	comf	(___awtoft@c+1)^(0+128),f
  7419  128A  0AA8               	incf	___awtoft@c^(0+128),f
  7420  128B  1903               	skipnz
  7421  128C  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  7422  128D  01AD               	clrf	___awtoft@sign^(0+128)
  7423  128E  0AAD               	incf	___awtoft@sign^(0+128),f
  7424  128F                     l6420:	
  7425  128F  0828               	movf	___awtoft@c^(0+128),w
  7426  1290  00A0               	movwf	___ftpack@arg^(0+128)
  7427  1291  0829               	movf	(___awtoft@c+1)^(0+128),w
  7428  1292  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  7429  1293  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  7430  1294  308E               	movlw	142
  7431  1295  00AB               	movwf	??___awtoft^(0+128)
  7432  1296  082B               	movf	??___awtoft^(0+128),w
  7433  1297  00A3               	movwf	___ftpack@exp^(0+128)
  7434  1298  082D               	movf	___awtoft@sign^(0+128),w
  7435  1299  00AC               	movwf	(??___awtoft+1)^(0+128)
  7436  129A  082C               	movf	(??___awtoft+1)^(0+128),w
  7437  129B  00A4               	movwf	___ftpack@sign^(0+128)
  7438  129C  3197  2725         	fcall	___ftpack
  7439  129E  0021               	movlb	1	; select bank1
  7440  129F  0820               	movf	?___ftpack^(0+128),w
  7441  12A0  00A8               	movwf	?___awtoft^(0+128)
  7442  12A1  0821               	movf	(?___ftpack+1)^(0+128),w
  7443  12A2  00A9               	movwf	(?___awtoft+1)^(0+128)
  7444  12A3  0822               	movf	(?___ftpack+2)^(0+128),w
  7445  12A4  00AA               	movwf	(?___awtoft+2)^(0+128)
  7446  12A5  0008               	return
  7447  12A6                     __end_of___awtoft:	
  7448                           
  7449                           	psect	text7
  7450  08CE                     __ptext7:	
  7451 ;; *************** function _map *****************
  7452 ;; Defined at:
  7453 ;;		line 177 in file "user.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  x               3   53[BANK1 ] float 
  7456 ;;  in_min          3   56[BANK1 ] float 
  7457 ;;  in_max          3   59[BANK1 ] float 
  7458 ;;  out_min         3   62[BANK1 ] float 
  7459 ;;  out_max         3   65[BANK1 ] float 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  3   53[BANK1 ] float 
  7464 ;; Registers used:
  7465 ;;		wreg, status,2, status,0, pclath, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7471 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7472 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7474 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7475 ;;Total ram usage:       18 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    5
  7478 ;; This function calls:
  7479 ;;		___ftadd
  7480 ;;		___ftdiv
  7481 ;;		___ftmul
  7482 ;;		___ftneg
  7483 ;; This function is called by:
  7484 ;;		_main
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           
  7489                           ;psect for function _map
  7490  08CE                     _map:	
  7491                           
  7492                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  7493                           
  7494                           ;incstack = 0
  7495                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  7496  08CE  0021               	movlb	1	; select bank1
  7497  08CF  085B               	movf	map@in_max^(0+128),w
  7498  08D0  00A8               	movwf	___ftadd@f1^(0+128)
  7499  08D1  085C               	movf	(map@in_max+1)^(0+128),w
  7500  08D2  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  7501  08D3  085D               	movf	(map@in_max+2)^(0+128),w
  7502  08D4  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  7503  08D5  0858               	movf	map@in_min^(0+128),w
  7504  08D6  00A0               	movwf	___ftneg@f1^(0+128)
  7505  08D7  0859               	movf	(map@in_min+1)^(0+128),w
  7506  08D8  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  7507  08D9  085A               	movf	(map@in_min+2)^(0+128),w
  7508  08DA  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  7509  08DB  3191  21E8  3188   	fcall	___ftneg
  7510  08DE  0021               	movlb	1	; select bank1
  7511  08DF  0820               	movf	?___ftneg^(0+128),w
  7512  08E0  00AB               	movwf	___ftadd@f2^(0+128)
  7513  08E1  0821               	movf	(?___ftneg+1)^(0+128),w
  7514  08E2  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  7515  08E3  0822               	movf	(?___ftneg+2)^(0+128),w
  7516  08E4  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  7517  08E5  3185  25FE  3188   	fcall	___ftadd
  7518  08E8  0021               	movlb	1	; select bank1
  7519  08E9  0828               	movf	?___ftadd^(0+128),w
  7520  08EA  00C5               	movwf	___ftdiv@f2^(0+128)
  7521  08EB  0829               	movf	(?___ftadd+1)^(0+128),w
  7522  08EC  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  7523  08ED  082A               	movf	(?___ftadd+2)^(0+128),w
  7524  08EE  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  7525  08EF  0861               	movf	map@out_max^(0+128),w
  7526  08F0  00A8               	movwf	___ftadd@f1^(0+128)
  7527  08F1  0862               	movf	(map@out_max+1)^(0+128),w
  7528  08F2  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  7529  08F3  0863               	movf	(map@out_max+2)^(0+128),w
  7530  08F4  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  7531  08F5  085E               	movf	map@out_min^(0+128),w
  7532  08F6  00A0               	movwf	___ftneg@f1^(0+128)
  7533  08F7  085F               	movf	(map@out_min+1)^(0+128),w
  7534  08F8  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  7535  08F9  0860               	movf	(map@out_min+2)^(0+128),w
  7536  08FA  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  7537  08FB  3191  21E8  3188   	fcall	___ftneg
  7538  08FE  0021               	movlb	1	; select bank1
  7539  08FF  0820               	movf	?___ftneg^(0+128),w
  7540  0900  00AB               	movwf	___ftadd@f2^(0+128)
  7541  0901  0821               	movf	(?___ftneg+1)^(0+128),w
  7542  0902  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  7543  0903  0822               	movf	(?___ftneg+2)^(0+128),w
  7544  0904  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  7545  0905  3185  25FE  3188   	fcall	___ftadd
  7546  0908  0021               	movlb	1	; select bank1
  7547  0909  0828               	movf	?___ftadd^(0+128),w
  7548  090A  00B5               	movwf	___ftmul@f1^(0+128)
  7549  090B  0829               	movf	(?___ftadd+1)^(0+128),w
  7550  090C  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  7551  090D  082A               	movf	(?___ftadd+2)^(0+128),w
  7552  090E  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  7553  090F  0855               	movf	map@x^(0+128),w
  7554  0910  00A8               	movwf	___ftadd@f1^(0+128)
  7555  0911  0856               	movf	(map@x+1)^(0+128),w
  7556  0912  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  7557  0913  0857               	movf	(map@x+2)^(0+128),w
  7558  0914  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  7559  0915  0858               	movf	map@in_min^(0+128),w
  7560  0916  00A0               	movwf	___ftneg@f1^(0+128)
  7561  0917  0859               	movf	(map@in_min+1)^(0+128),w
  7562  0918  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  7563  0919  085A               	movf	(map@in_min+2)^(0+128),w
  7564  091A  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  7565  091B  3191  21E8  3188   	fcall	___ftneg
  7566  091E  0021               	movlb	1	; select bank1
  7567  091F  0820               	movf	?___ftneg^(0+128),w
  7568  0920  00AB               	movwf	___ftadd@f2^(0+128)
  7569  0921  0821               	movf	(?___ftneg+1)^(0+128),w
  7570  0922  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  7571  0923  0822               	movf	(?___ftneg+2)^(0+128),w
  7572  0924  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  7573  0925  3185  25FE  3188   	fcall	___ftadd
  7574  0928  0021               	movlb	1	; select bank1
  7575  0929  0828               	movf	?___ftadd^(0+128),w
  7576  092A  00B8               	movwf	___ftmul@f2^(0+128)
  7577  092B  0829               	movf	(?___ftadd+1)^(0+128),w
  7578  092C  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  7579  092D  082A               	movf	(?___ftadd+2)^(0+128),w
  7580  092E  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  7581  092F  318A  22A1  3188   	fcall	___ftmul
  7582  0932  0021               	movlb	1	; select bank1
  7583  0933  0835               	movf	?___ftmul^(0+128),w
  7584  0934  00C8               	movwf	___ftdiv@f1^(0+128)
  7585  0935  0836               	movf	(?___ftmul+1)^(0+128),w
  7586  0936  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  7587  0937  0837               	movf	(?___ftmul+2)^(0+128),w
  7588  0938  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  7589  0939  3189  21F8  3188   	fcall	___ftdiv
  7590  093C  0021               	movlb	1	; select bank1
  7591  093D  0845               	movf	?___ftdiv^(0+128),w
  7592  093E  00E4               	movwf	_map$2555^(0+128)
  7593  093F  0846               	movf	(?___ftdiv+1)^(0+128),w
  7594  0940  00E5               	movwf	(_map$2555+1)^(0+128)
  7595  0941  0847               	movf	(?___ftdiv+2)^(0+128),w
  7596  0942  00E6               	movwf	(_map$2555+2)^(0+128)
  7597                           
  7598                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  7599  0943  085E               	movf	map@out_min^(0+128),w
  7600  0944  00A8               	movwf	___ftadd@f1^(0+128)
  7601  0945  085F               	movf	(map@out_min+1)^(0+128),w
  7602  0946  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  7603  0947  0860               	movf	(map@out_min+2)^(0+128),w
  7604  0948  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  7605  0949  0864               	movf	_map$2555^(0+128),w
  7606  094A  00AB               	movwf	___ftadd@f2^(0+128)
  7607  094B  0865               	movf	(_map$2555+1)^(0+128),w
  7608  094C  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  7609  094D  0866               	movf	(_map$2555+2)^(0+128),w
  7610  094E  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  7611  094F  3185  25FE         	fcall	___ftadd
  7612  0951  0021               	movlb	1	; select bank1
  7613  0952  0828               	movf	?___ftadd^(0+128),w
  7614  0953  00D5               	movwf	?_map^(0+128)
  7615  0954  0829               	movf	(?___ftadd+1)^(0+128),w
  7616  0955  00D6               	movwf	(?_map+1)^(0+128)
  7617  0956  082A               	movf	(?___ftadd+2)^(0+128),w
  7618  0957  00D7               	movwf	(?_map+2)^(0+128)
  7619  0958  0008               	return
  7620  0959                     __end_of_map:	
  7621                           
  7622                           	psect	text8
  7623  11E8                     __ptext8:	
  7624 ;; *************** function ___ftneg *****************
  7625 ;; Defined at:
  7626 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  f1              3    0[BANK1 ] float 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  3    0[BANK1 ] float 
  7633 ;; Registers used:
  7634 ;;		wreg
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7640 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7643 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7644 ;;Total ram usage:        3 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    3
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_map
  7651 ;;		_scalePotValue
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function ___ftneg
  7657  11E8                     ___ftneg:	
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in ___ftneg: [wreg]
  7661  11E8  0021               	movlb	1	; select bank1
  7662  11E9  0822               	movf	(___ftneg@f1+2)^(0+128),w
  7663  11EA  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
  7664  11EB  0420               	iorwf	___ftneg@f1^(0+128),w
  7665  11EC  1903               	skipnz
  7666  11ED  0008               	return
  7667  11EE  3080               	movlw	128
  7668  11EF  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
  7669  11F0  0008               	return
  7670  11F1                     __end_of___ftneg:	
  7671                           
  7672                           	psect	text9
  7673  0AA1                     __ptext9:	
  7674 ;; *************** function ___ftmul *****************
  7675 ;; Defined at:
  7676 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  f1              3   21[BANK1 ] float 
  7679 ;;  f2              3   24[BANK1 ] float 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
  7682 ;;  sign            1   36[BANK1 ] unsigned char 
  7683 ;;  cntr            1   35[BANK1 ] unsigned char 
  7684 ;;  exp             1   31[BANK1 ] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  3   21[BANK1 ] float 
  7687 ;; Registers used:
  7688 ;;		wreg, status,2, status,0, pclath, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7694 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7695 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7696 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7697 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7698 ;;Total ram usage:       16 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    4
  7701 ;; This function calls:
  7702 ;;		___ftpack
  7703 ;; This function is called by:
  7704 ;;		_set_subdivision
  7705 ;;		_map
  7706 ;;		_scalePotValue
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           
  7711                           ;psect for function ___ftmul
  7712  0AA1                     ___ftmul:	
  7713                           
  7714                           ;incstack = 0
  7715                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7716  0AA1  0021               	movlb	1	; select bank1
  7717  0AA2  0835               	movf	___ftmul@f1^(0+128),w
  7718  0AA3  00BB               	movwf	??___ftmul^(0+128)
  7719  0AA4  0836               	movf	(___ftmul@f1+1)^(0+128),w
  7720  0AA5  00BC               	movwf	(??___ftmul^(0+128)+1)
  7721  0AA6  0837               	movf	(___ftmul@f1+2)^(0+128),w
  7722  0AA7  00BD               	movwf	(??___ftmul^(0+128)+2)
  7723  0AA8  1003               	clrc
  7724  0AA9  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  7725  0AAA  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  7726  0AAB  00BE               	movwf	(??___ftmul+3)^(0+128)
  7727  0AAC  083E               	movf	(??___ftmul+3)^(0+128),w
  7728  0AAD  00BF               	movwf	___ftmul@exp^(0+128)
  7729  0AAE  083F               	movf	___ftmul@exp^(0+128),w
  7730  0AAF  1D03               	btfss	3,2
  7731  0AB0  2AB8               	goto	l6542
  7732  0AB1  3000               	movlw	0
  7733  0AB2  00B5               	movwf	?___ftmul^(0+128)
  7734  0AB3  3000               	movlw	0
  7735  0AB4  00B6               	movwf	(?___ftmul+1)^(0+128)
  7736  0AB5  3000               	movlw	0
  7737  0AB6  00B7               	movwf	(?___ftmul+2)^(0+128)
  7738  0AB7  0008               	return
  7739  0AB8                     l6542:	
  7740  0AB8  0838               	movf	___ftmul@f2^(0+128),w
  7741  0AB9  00BB               	movwf	??___ftmul^(0+128)
  7742  0ABA  0839               	movf	(___ftmul@f2+1)^(0+128),w
  7743  0ABB  00BC               	movwf	(??___ftmul^(0+128)+1)
  7744  0ABC  083A               	movf	(___ftmul@f2+2)^(0+128),w
  7745  0ABD  00BD               	movwf	(??___ftmul^(0+128)+2)
  7746  0ABE  1003               	clrc
  7747  0ABF  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  7748  0AC0  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  7749  0AC1  00BE               	movwf	(??___ftmul+3)^(0+128)
  7750  0AC2  083E               	movf	(??___ftmul+3)^(0+128),w
  7751  0AC3  00C4               	movwf	___ftmul@sign^(0+128)
  7752  0AC4  0844               	movf	___ftmul@sign^(0+128),w
  7753  0AC5  1D03               	btfss	3,2
  7754  0AC6  2ACE               	goto	l6548
  7755  0AC7  3000               	movlw	0
  7756  0AC8  00B5               	movwf	?___ftmul^(0+128)
  7757  0AC9  3000               	movlw	0
  7758  0ACA  00B6               	movwf	(?___ftmul+1)^(0+128)
  7759  0ACB  3000               	movlw	0
  7760  0ACC  00B7               	movwf	(?___ftmul+2)^(0+128)
  7761  0ACD  0008               	return
  7762  0ACE                     l6548:	
  7763  0ACE  0844               	movf	___ftmul@sign^(0+128),w
  7764  0ACF  3E7B               	addlw	123
  7765  0AD0  00BB               	movwf	??___ftmul^(0+128)
  7766  0AD1  083B               	movf	??___ftmul^(0+128),w
  7767  0AD2  07BF               	addwf	___ftmul@exp^(0+128),f
  7768  0AD3  0835               	movf	___ftmul@f1^(0+128),w
  7769  0AD4  00BB               	movwf	??___ftmul^(0+128)
  7770  0AD5  0836               	movf	(___ftmul@f1+1)^(0+128),w
  7771  0AD6  00BC               	movwf	(??___ftmul^(0+128)+1)
  7772  0AD7  0837               	movf	(___ftmul@f1+2)^(0+128),w
  7773  0AD8  00BD               	movwf	(??___ftmul^(0+128)+2)
  7774  0AD9  3010               	movlw	16
  7775  0ADA                     u6745:	
  7776  0ADA  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  7777  0ADB  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  7778  0ADC  0CBB               	rrf	??___ftmul^(0+128),f
  7779  0ADD  0B89               	decfsz	9,f
  7780  0ADE  2ADA               	goto	u6745
  7781  0ADF  083B               	movf	??___ftmul^(0+128),w
  7782  0AE0  00BE               	movwf	(??___ftmul+3)^(0+128)
  7783  0AE1  083E               	movf	(??___ftmul+3)^(0+128),w
  7784  0AE2  00C4               	movwf	___ftmul@sign^(0+128)
  7785  0AE3  0838               	movf	___ftmul@f2^(0+128),w
  7786  0AE4  00BB               	movwf	??___ftmul^(0+128)
  7787  0AE5  0839               	movf	(___ftmul@f2+1)^(0+128),w
  7788  0AE6  00BC               	movwf	(??___ftmul^(0+128)+1)
  7789  0AE7  083A               	movf	(___ftmul@f2+2)^(0+128),w
  7790  0AE8  00BD               	movwf	(??___ftmul^(0+128)+2)
  7791  0AE9  3010               	movlw	16
  7792  0AEA                     u6755:	
  7793  0AEA  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  7794  0AEB  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  7795  0AEC  0CBB               	rrf	??___ftmul^(0+128),f
  7796  0AED  0B89               	decfsz	9,f
  7797  0AEE  2AEA               	goto	u6755
  7798  0AEF  083B               	movf	??___ftmul^(0+128),w
  7799  0AF0  00BE               	movwf	(??___ftmul+3)^(0+128)
  7800  0AF1  083E               	movf	(??___ftmul+3)^(0+128),w
  7801  0AF2  06C4               	xorwf	___ftmul@sign^(0+128),f
  7802  0AF3  3080               	movlw	128
  7803  0AF4  00BB               	movwf	??___ftmul^(0+128)
  7804  0AF5  083B               	movf	??___ftmul^(0+128),w
  7805  0AF6  05C4               	andwf	___ftmul@sign^(0+128),f
  7806  0AF7  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
  7807  0AF8  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
  7808  0AF9  30FF               	movlw	255
  7809  0AFA  05B8               	andwf	___ftmul@f2^(0+128),f
  7810  0AFB  30FF               	movlw	255
  7811  0AFC  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
  7812  0AFD  3000               	movlw	0
  7813  0AFE  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
  7814  0AFF  3000               	movlw	0
  7815  0B00  00C0               	movwf	___ftmul@f3_as_product^(0+128)
  7816  0B01  3000               	movlw	0
  7817  0B02  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  7818  0B03  3000               	movlw	0
  7819  0B04  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  7820  0B05  3007               	movlw	7
  7821  0B06  00BB               	movwf	??___ftmul^(0+128)
  7822  0B07  083B               	movf	??___ftmul^(0+128),w
  7823  0B08  00C3               	movwf	___ftmul@cntr^(0+128)
  7824  0B09                     l6560:	
  7825  0B09  1C35               	btfss	___ftmul@f1^(0+128),0
  7826  0B0A  2B11               	goto	l6564
  7827  0B0B  0838               	movf	___ftmul@f2^(0+128),w
  7828  0B0C  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  7829  0B0D  0839               	movf	(___ftmul@f2+1)^(0+128),w
  7830  0B0E  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7831  0B0F  083A               	movf	(___ftmul@f2+2)^(0+128),w
  7832  0B10  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7833  0B11                     l6564:	
  7834  0B11  3001               	movlw	1
  7835  0B12                     u6775:	
  7836  0B12  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  7837  0B13  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  7838  0B14  0CB5               	rrf	___ftmul@f1^(0+128),f
  7839  0B15  0B89               	decfsz	9,f
  7840  0B16  2B12               	goto	u6775
  7841  0B17  3001               	movlw	1
  7842  0B18                     u6785:	
  7843  0B18  35B8               	lslf	___ftmul@f2^(0+128),f
  7844  0B19  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
  7845  0B1A  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
  7846  0B1B  0B89               	decfsz	9,f
  7847  0B1C  2B18               	goto	u6785
  7848  0B1D  3001               	movlw	1
  7849  0B1E  02C3               	subwf	___ftmul@cntr^(0+128),f
  7850  0B1F  1D03               	btfss	3,2
  7851  0B20  2B09               	goto	l6560
  7852  0B21  3009               	movlw	9
  7853  0B22  00BB               	movwf	??___ftmul^(0+128)
  7854  0B23  083B               	movf	??___ftmul^(0+128),w
  7855  0B24  00C3               	movwf	___ftmul@cntr^(0+128)
  7856  0B25                     l6572:	
  7857  0B25  1C35               	btfss	___ftmul@f1^(0+128),0
  7858  0B26  2B2D               	goto	l6576
  7859  0B27  0838               	movf	___ftmul@f2^(0+128),w
  7860  0B28  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  7861  0B29  0839               	movf	(___ftmul@f2+1)^(0+128),w
  7862  0B2A  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  7863  0B2B  083A               	movf	(___ftmul@f2+2)^(0+128),w
  7864  0B2C  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  7865  0B2D                     l6576:	
  7866  0B2D  3001               	movlw	1
  7867  0B2E                     u6815:	
  7868  0B2E  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  7869  0B2F  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  7870  0B30  0CB5               	rrf	___ftmul@f1^(0+128),f
  7871  0B31  0B89               	decfsz	9,f
  7872  0B32  2B2E               	goto	u6815
  7873  0B33  3001               	movlw	1
  7874  0B34                     u6825:	
  7875  0B34  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  7876  0B35  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7877  0B36  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
  7878  0B37  0B89               	decfsz	9,f
  7879  0B38  2B34               	goto	u6825
  7880  0B39  3001               	movlw	1
  7881  0B3A  02C3               	subwf	___ftmul@cntr^(0+128),f
  7882  0B3B  1D03               	btfss	3,2
  7883  0B3C  2B25               	goto	l6572
  7884  0B3D  0840               	movf	___ftmul@f3_as_product^(0+128),w
  7885  0B3E  00A0               	movwf	___ftpack@arg^(0+128)
  7886  0B3F  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7887  0B40  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  7888  0B41  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7889  0B42  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  7890  0B43  083F               	movf	___ftmul@exp^(0+128),w
  7891  0B44  00BB               	movwf	??___ftmul^(0+128)
  7892  0B45  083B               	movf	??___ftmul^(0+128),w
  7893  0B46  00A3               	movwf	___ftpack@exp^(0+128)
  7894  0B47  0844               	movf	___ftmul@sign^(0+128),w
  7895  0B48  00BC               	movwf	(??___ftmul+1)^(0+128)
  7896  0B49  083C               	movf	(??___ftmul+1)^(0+128),w
  7897  0B4A  00A4               	movwf	___ftpack@sign^(0+128)
  7898  0B4B  3197  2725         	fcall	___ftpack
  7899  0B4D  0021               	movlb	1	; select bank1
  7900  0B4E  0820               	movf	?___ftpack^(0+128),w
  7901  0B4F  00B5               	movwf	?___ftmul^(0+128)
  7902  0B50  0821               	movf	(?___ftpack+1)^(0+128),w
  7903  0B51  00B6               	movwf	(?___ftmul+1)^(0+128)
  7904  0B52  0822               	movf	(?___ftpack+2)^(0+128),w
  7905  0B53  00B7               	movwf	(?___ftmul+2)^(0+128)
  7906  0B54  0008               	return
  7907  0B55                     __end_of___ftmul:	
  7908                           
  7909                           	psect	text10
  7910  09F8                     __ptext10:	
  7911 ;; *************** function ___ftdiv *****************
  7912 ;; Defined at:
  7913 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  f2              3   37[BANK1 ] float 
  7916 ;;  f1              3   40[BANK1 ] float 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;  f3              3   48[BANK1 ] float 
  7919 ;;  sign            1   52[BANK1 ] unsigned char 
  7920 ;;  exp             1   51[BANK1 ] unsigned char 
  7921 ;;  cntr            1   47[BANK1 ] unsigned char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  3   37[BANK1 ] float 
  7924 ;; Registers used:
  7925 ;;		wreg, status,2, status,0, pclath, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7931 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7932 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7933 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7934 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7935 ;;Total ram usage:       16 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    4
  7938 ;; This function calls:
  7939 ;;		___ftpack
  7940 ;; This function is called by:
  7941 ;;		_map
  7942 ;;		_scalePotValue
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           
  7947                           ;psect for function ___ftdiv
  7948  09F8                     ___ftdiv:	
  7949                           
  7950                           ;incstack = 0
  7951                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7952  09F8  0021               	movlb	1	; select bank1
  7953  09F9  0848               	movf	___ftdiv@f1^(0+128),w
  7954  09FA  00CB               	movwf	??___ftdiv^(0+128)
  7955  09FB  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  7956  09FC  00CC               	movwf	(??___ftdiv^(0+128)+1)
  7957  09FD  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  7958  09FE  00CD               	movwf	(??___ftdiv^(0+128)+2)
  7959  09FF  1003               	clrc
  7960  0A00  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  7961  0A01  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  7962  0A02  00CE               	movwf	(??___ftdiv+3)^(0+128)
  7963  0A03  084E               	movf	(??___ftdiv+3)^(0+128),w
  7964  0A04  00D3               	movwf	___ftdiv@exp^(0+128)
  7965  0A05  0853               	movf	___ftdiv@exp^(0+128),w
  7966  0A06  1D03               	btfss	3,2
  7967  0A07  2A0F               	goto	l6500
  7968  0A08  3000               	movlw	0
  7969  0A09  00C5               	movwf	?___ftdiv^(0+128)
  7970  0A0A  3000               	movlw	0
  7971  0A0B  00C6               	movwf	(?___ftdiv+1)^(0+128)
  7972  0A0C  3000               	movlw	0
  7973  0A0D  00C7               	movwf	(?___ftdiv+2)^(0+128)
  7974  0A0E  0008               	return
  7975  0A0F                     l6500:	
  7976  0A0F  0845               	movf	___ftdiv@f2^(0+128),w
  7977  0A10  00CB               	movwf	??___ftdiv^(0+128)
  7978  0A11  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  7979  0A12  00CC               	movwf	(??___ftdiv^(0+128)+1)
  7980  0A13  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  7981  0A14  00CD               	movwf	(??___ftdiv^(0+128)+2)
  7982  0A15  1003               	clrc
  7983  0A16  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  7984  0A17  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  7985  0A18  00CE               	movwf	(??___ftdiv+3)^(0+128)
  7986  0A19  084E               	movf	(??___ftdiv+3)^(0+128),w
  7987  0A1A  00D4               	movwf	___ftdiv@sign^(0+128)
  7988  0A1B  0854               	movf	___ftdiv@sign^(0+128),w
  7989  0A1C  1D03               	btfss	3,2
  7990  0A1D  2A25               	goto	l6506
  7991  0A1E  3000               	movlw	0
  7992  0A1F  00C5               	movwf	?___ftdiv^(0+128)
  7993  0A20  3000               	movlw	0
  7994  0A21  00C6               	movwf	(?___ftdiv+1)^(0+128)
  7995  0A22  3000               	movlw	0
  7996  0A23  00C7               	movwf	(?___ftdiv+2)^(0+128)
  7997  0A24  0008               	return
  7998  0A25                     l6506:	
  7999  0A25  3000               	movlw	0
  8000  0A26  00D0               	movwf	___ftdiv@f3^(0+128)
  8001  0A27  3000               	movlw	0
  8002  0A28  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
  8003  0A29  3000               	movlw	0
  8004  0A2A  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
  8005  0A2B  3089               	movlw	137
  8006  0A2C  0754               	addwf	___ftdiv@sign^(0+128),w
  8007  0A2D  00CB               	movwf	??___ftdiv^(0+128)
  8008  0A2E  084B               	movf	??___ftdiv^(0+128),w
  8009  0A2F  02D3               	subwf	___ftdiv@exp^(0+128),f
  8010  0A30  0848               	movf	___ftdiv@f1^(0+128),w
  8011  0A31  00CB               	movwf	??___ftdiv^(0+128)
  8012  0A32  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  8013  0A33  00CC               	movwf	(??___ftdiv^(0+128)+1)
  8014  0A34  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  8015  0A35  00CD               	movwf	(??___ftdiv^(0+128)+2)
  8016  0A36  3010               	movlw	16
  8017  0A37                     u6665:	
  8018  0A37  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  8019  0A38  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  8020  0A39  0CCB               	rrf	??___ftdiv^(0+128),f
  8021  0A3A  0B89               	decfsz	9,f
  8022  0A3B  2A37               	goto	u6665
  8023  0A3C  084B               	movf	??___ftdiv^(0+128),w
  8024  0A3D  00CE               	movwf	(??___ftdiv+3)^(0+128)
  8025  0A3E  084E               	movf	(??___ftdiv+3)^(0+128),w
  8026  0A3F  00D4               	movwf	___ftdiv@sign^(0+128)
  8027  0A40  0845               	movf	___ftdiv@f2^(0+128),w
  8028  0A41  00CB               	movwf	??___ftdiv^(0+128)
  8029  0A42  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  8030  0A43  00CC               	movwf	(??___ftdiv^(0+128)+1)
  8031  0A44  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  8032  0A45  00CD               	movwf	(??___ftdiv^(0+128)+2)
  8033  0A46  3010               	movlw	16
  8034  0A47                     u6675:	
  8035  0A47  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  8036  0A48  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  8037  0A49  0CCB               	rrf	??___ftdiv^(0+128),f
  8038  0A4A  0B89               	decfsz	9,f
  8039  0A4B  2A47               	goto	u6675
  8040  0A4C  084B               	movf	??___ftdiv^(0+128),w
  8041  0A4D  00CE               	movwf	(??___ftdiv+3)^(0+128)
  8042  0A4E  084E               	movf	(??___ftdiv+3)^(0+128),w
  8043  0A4F  06D4               	xorwf	___ftdiv@sign^(0+128),f
  8044  0A50  3080               	movlw	128
  8045  0A51  00CB               	movwf	??___ftdiv^(0+128)
  8046  0A52  084B               	movf	??___ftdiv^(0+128),w
  8047  0A53  05D4               	andwf	___ftdiv@sign^(0+128),f
  8048  0A54  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
  8049  0A55  30FF               	movlw	255
  8050  0A56  05C8               	andwf	___ftdiv@f1^(0+128),f
  8051  0A57  30FF               	movlw	255
  8052  0A58  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
  8053  0A59  3000               	movlw	0
  8054  0A5A  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
  8055  0A5B  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
  8056  0A5C  30FF               	movlw	255
  8057  0A5D  05C5               	andwf	___ftdiv@f2^(0+128),f
  8058  0A5E  30FF               	movlw	255
  8059  0A5F  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
  8060  0A60  3000               	movlw	0
  8061  0A61  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
  8062  0A62  3018               	movlw	24
  8063  0A63  00CB               	movwf	??___ftdiv^(0+128)
  8064  0A64  084B               	movf	??___ftdiv^(0+128),w
  8065  0A65  00CF               	movwf	___ftdiv@cntr^(0+128)
  8066  0A66                     l6520:	
  8067  0A66  3001               	movlw	1
  8068  0A67                     u6685:	
  8069  0A67  35D0               	lslf	___ftdiv@f3^(0+128),f
  8070  0A68  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
  8071  0A69  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
  8072  0A6A  0B89               	decfsz	9,f
  8073  0A6B  2A67               	goto	u6685
  8074  0A6C  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  8075  0A6D  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
  8076  0A6E  1D03               	skipz
  8077  0A6F  2A76               	goto	u6695
  8078  0A70  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  8079  0A71  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
  8080  0A72  1D03               	skipz
  8081  0A73  2A76               	goto	u6695
  8082  0A74  0845               	movf	___ftdiv@f2^(0+128),w
  8083  0A75  0248               	subwf	___ftdiv@f1^(0+128),w
  8084  0A76                     u6695:	
  8085  0A76  1C03               	skipc
  8086  0A77  2A7F               	goto	l6528
  8087  0A78  0845               	movf	___ftdiv@f2^(0+128),w
  8088  0A79  02C8               	subwf	___ftdiv@f1^(0+128),f
  8089  0A7A  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  8090  0A7B  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
  8091  0A7C  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  8092  0A7D  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
  8093  0A7E  1450               	bsf	___ftdiv@f3^(0+128),0
  8094  0A7F                     l6528:	
  8095  0A7F  3001               	movlw	1
  8096  0A80                     u6705:	
  8097  0A80  35C8               	lslf	___ftdiv@f1^(0+128),f
  8098  0A81  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
  8099  0A82  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
  8100  0A83  0B89               	decfsz	9,f
  8101  0A84  2A80               	goto	u6705
  8102  0A85  3001               	movlw	1
  8103  0A86  02CF               	subwf	___ftdiv@cntr^(0+128),f
  8104  0A87  1D03               	btfss	3,2
  8105  0A88  2A66               	goto	l6520
  8106  0A89  0850               	movf	___ftdiv@f3^(0+128),w
  8107  0A8A  00A0               	movwf	___ftpack@arg^(0+128)
  8108  0A8B  0851               	movf	(___ftdiv@f3+1)^(0+128),w
  8109  0A8C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  8110  0A8D  0852               	movf	(___ftdiv@f3+2)^(0+128),w
  8111  0A8E  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  8112  0A8F  0853               	movf	___ftdiv@exp^(0+128),w
  8113  0A90  00CB               	movwf	??___ftdiv^(0+128)
  8114  0A91  084B               	movf	??___ftdiv^(0+128),w
  8115  0A92  00A3               	movwf	___ftpack@exp^(0+128)
  8116  0A93  0854               	movf	___ftdiv@sign^(0+128),w
  8117  0A94  00CC               	movwf	(??___ftdiv+1)^(0+128)
  8118  0A95  084C               	movf	(??___ftdiv+1)^(0+128),w
  8119  0A96  00A4               	movwf	___ftpack@sign^(0+128)
  8120  0A97  3197  2725         	fcall	___ftpack
  8121  0A99  0021               	movlb	1	; select bank1
  8122  0A9A  0820               	movf	?___ftpack^(0+128),w
  8123  0A9B  00C5               	movwf	?___ftdiv^(0+128)
  8124  0A9C  0821               	movf	(?___ftpack+1)^(0+128),w
  8125  0A9D  00C6               	movwf	(?___ftdiv+1)^(0+128)
  8126  0A9E  0822               	movf	(?___ftpack+2)^(0+128),w
  8127  0A9F  00C7               	movwf	(?___ftdiv+2)^(0+128)
  8128  0AA0  0008               	return
  8129  0AA1                     __end_of___ftdiv:	
  8130                           
  8131                           	psect	text11
  8132  05FE                     __ptext11:	
  8133 ;; *************** function ___ftadd *****************
  8134 ;; Defined at:
  8135 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;  f1              3    8[BANK1 ] float 
  8138 ;;  f2              3   11[BANK1 ] float 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  exp1            1   20[BANK1 ] unsigned char 
  8141 ;;  exp2            1   19[BANK1 ] unsigned char 
  8142 ;;  sign            1   18[BANK1 ] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  3    8[BANK1 ] float 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0, pclath, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8152 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8153 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8154 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8155 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8156 ;;Total ram usage:       13 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    4
  8159 ;; This function calls:
  8160 ;;		___ftpack
  8161 ;; This function is called by:
  8162 ;;		_map
  8163 ;;		_scalePotValue
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function ___ftadd
  8169  05FE                     ___ftadd:	
  8170                           
  8171                           ;incstack = 0
  8172                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8173  05FE  0021               	movlb	1	; select bank1
  8174  05FF  0828               	movf	___ftadd@f1^(0+128),w
  8175  0600  00AE               	movwf	??___ftadd^(0+128)
  8176  0601  0829               	movf	(___ftadd@f1+1)^(0+128),w
  8177  0602  00AF               	movwf	(??___ftadd^(0+128)+1)
  8178  0603  082A               	movf	(___ftadd@f1+2)^(0+128),w
  8179  0604  00B0               	movwf	(??___ftadd^(0+128)+2)
  8180  0605  1003               	clrc
  8181  0606  0D2F               	rlf	(??___ftadd^(0+128)+1),w
  8182  0607  0D30               	rlf	(??___ftadd^(0+128)+2),w
  8183  0608  00B1               	movwf	(??___ftadd+3)^(0+128)
  8184  0609  0831               	movf	(??___ftadd+3)^(0+128),w
  8185  060A  00B4               	movwf	___ftadd@exp1^(0+128)
  8186  060B  082B               	movf	___ftadd@f2^(0+128),w
  8187  060C  00AE               	movwf	??___ftadd^(0+128)
  8188  060D  082C               	movf	(___ftadd@f2+1)^(0+128),w
  8189  060E  00AF               	movwf	(??___ftadd^(0+128)+1)
  8190  060F  082D               	movf	(___ftadd@f2+2)^(0+128),w
  8191  0610  00B0               	movwf	(??___ftadd^(0+128)+2)
  8192  0611  1003               	clrc
  8193  0612  0D2F               	rlf	(??___ftadd^(0+128)+1),w
  8194  0613  0D30               	rlf	(??___ftadd^(0+128)+2),w
  8195  0614  00B1               	movwf	(??___ftadd+3)^(0+128)
  8196  0615  0831               	movf	(??___ftadd+3)^(0+128),w
  8197  0616  00B3               	movwf	___ftadd@exp2^(0+128)
  8198  0617  0834               	movf	___ftadd@exp1^(0+128),w
  8199  0618  1903               	btfsc	3,2
  8200  0619  2E26               	goto	l6430
  8201  061A  0833               	movf	___ftadd@exp2^(0+128),w
  8202  061B  0234               	subwf	___ftadd@exp1^(0+128),w
  8203  061C  1803               	skipnc
  8204  061D  2E2D               	goto	l6434
  8205  061E  0334               	decf	___ftadd@exp1^(0+128),w
  8206  061F  3AFF               	xorlw	255
  8207  0620  0733               	addwf	___ftadd@exp2^(0+128),w
  8208  0621  00AE               	movwf	??___ftadd^(0+128)
  8209  0622  3019               	movlw	25
  8210  0623  022E               	subwf	??___ftadd^(0+128),w
  8211  0624  1C03               	skipc
  8212  0625  2E2D               	goto	l6434
  8213  0626                     l6430:	
  8214  0626  082B               	movf	___ftadd@f2^(0+128),w
  8215  0627  00A8               	movwf	?___ftadd^(0+128)
  8216  0628  082C               	movf	(___ftadd@f2+1)^(0+128),w
  8217  0629  00A9               	movwf	(?___ftadd+1)^(0+128)
  8218  062A  082D               	movf	(___ftadd@f2+2)^(0+128),w
  8219  062B  00AA               	movwf	(?___ftadd+2)^(0+128)
  8220  062C  0008               	return
  8221  062D                     l6434:	
  8222  062D  0833               	movf	___ftadd@exp2^(0+128),w
  8223  062E  1903               	btfsc	3,2
  8224  062F  0008               	return
  8225  0630  0834               	movf	___ftadd@exp1^(0+128),w
  8226  0631  0233               	subwf	___ftadd@exp2^(0+128),w
  8227  0632  1803               	skipnc
  8228  0633  2E3C               	goto	l6440
  8229  0634  0333               	decf	___ftadd@exp2^(0+128),w
  8230  0635  3AFF               	xorlw	255
  8231  0636  0734               	addwf	___ftadd@exp1^(0+128),w
  8232  0637  00AE               	movwf	??___ftadd^(0+128)
  8233  0638  3019               	movlw	25
  8234  0639  022E               	subwf	??___ftadd^(0+128),w
  8235  063A  1803               	btfsc	3,0
  8236  063B  0008               	return
  8237  063C                     l6440:	
  8238  063C  3006               	movlw	6
  8239  063D  00AE               	movwf	??___ftadd^(0+128)
  8240  063E  082E               	movf	??___ftadd^(0+128),w
  8241  063F  00B2               	movwf	___ftadd@sign^(0+128)
  8242  0640  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
  8243  0641  17B2               	bsf	___ftadd@sign^(0+128),7
  8244  0642  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
  8245  0643  1732               	bsf	___ftadd@sign^(0+128),6
  8246  0644  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
  8247  0645  30FF               	movlw	255
  8248  0646  05A8               	andwf	___ftadd@f1^(0+128),f
  8249  0647  30FF               	movlw	255
  8250  0648  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
  8251  0649  3000               	movlw	0
  8252  064A  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
  8253  064B  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
  8254  064C  30FF               	movlw	255
  8255  064D  05AB               	andwf	___ftadd@f2^(0+128),f
  8256  064E  30FF               	movlw	255
  8257  064F  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
  8258  0650  3000               	movlw	0
  8259  0651  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
  8260  0652  0833               	movf	___ftadd@exp2^(0+128),w
  8261  0653  0234               	subwf	___ftadd@exp1^(0+128),w
  8262  0654  1803               	skipnc
  8263  0655  2E78               	goto	l6462
  8264  0656                     l6452:	
  8265  0656  3001               	movlw	1
  8266  0657                     u6505:	
  8267  0657  35AB               	lslf	___ftadd@f2^(0+128),f
  8268  0658  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
  8269  0659  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
  8270  065A  0B89               	decfsz	9,f
  8271  065B  2E57               	goto	u6505
  8272  065C  3001               	movlw	1
  8273  065D  02B3               	subwf	___ftadd@exp2^(0+128),f
  8274  065E  0833               	movf	___ftadd@exp2^(0+128),w
  8275  065F  0634               	xorwf	___ftadd@exp1^(0+128),w
  8276  0660  1903               	skipnz
  8277  0661  2E73               	goto	l6460
  8278  0662  3001               	movlw	1
  8279  0663  02B2               	subwf	___ftadd@sign^(0+128),f
  8280  0664  0832               	movf	___ftadd@sign^(0+128),w
  8281  0665  3907               	andlw	7
  8282  0666  1903               	btfsc	3,2
  8283  0667  2E73               	goto	l6460
  8284  0668  2E56               	goto	l6452
  8285  0669                     l6458:	
  8286  0669  3001               	movlw	1
  8287  066A                     u6535:	
  8288  066A  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
  8289  066B  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
  8290  066C  0CA8               	rrf	___ftadd@f1^(0+128),f
  8291  066D  0B89               	decfsz	9,f
  8292  066E  2E6A               	goto	u6535
  8293  066F  3001               	movlw	1
  8294  0670  00AE               	movwf	??___ftadd^(0+128)
  8295  0671  082E               	movf	??___ftadd^(0+128),w
  8296  0672  07B4               	addwf	___ftadd@exp1^(0+128),f
  8297  0673                     l6460:	
  8298  0673  0834               	movf	___ftadd@exp1^(0+128),w
  8299  0674  0633               	xorwf	___ftadd@exp2^(0+128),w
  8300  0675  1903               	btfsc	3,2
  8301  0676  2E9D               	goto	l1921
  8302  0677  2E69               	goto	l6458
  8303  0678                     l6462:	
  8304  0678  0834               	movf	___ftadd@exp1^(0+128),w
  8305  0679  0233               	subwf	___ftadd@exp2^(0+128),w
  8306  067A  1803               	skipnc
  8307  067B  2E9D               	goto	l1921
  8308  067C                     l6464:	
  8309  067C  3001               	movlw	1
  8310  067D                     u6565:	
  8311  067D  35A8               	lslf	___ftadd@f1^(0+128),f
  8312  067E  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
  8313  067F  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
  8314  0680  0B89               	decfsz	9,f
  8315  0681  2E7D               	goto	u6565
  8316  0682  3001               	movlw	1
  8317  0683  02B4               	subwf	___ftadd@exp1^(0+128),f
  8318  0684  0833               	movf	___ftadd@exp2^(0+128),w
  8319  0685  0634               	xorwf	___ftadd@exp1^(0+128),w
  8320  0686  1903               	skipnz
  8321  0687  2E99               	goto	l6472
  8322  0688  3001               	movlw	1
  8323  0689  02B2               	subwf	___ftadd@sign^(0+128),f
  8324  068A  0832               	movf	___ftadd@sign^(0+128),w
  8325  068B  3907               	andlw	7
  8326  068C  1903               	btfsc	3,2
  8327  068D  2E99               	goto	l6472
  8328  068E  2E7C               	goto	l6464
  8329  068F                     l6470:	
  8330  068F  3001               	movlw	1
  8331  0690                     u6595:	
  8332  0690  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
  8333  0691  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
  8334  0692  0CAB               	rrf	___ftadd@f2^(0+128),f
  8335  0693  0B89               	decfsz	9,f
  8336  0694  2E90               	goto	u6595
  8337  0695  3001               	movlw	1
  8338  0696  00AE               	movwf	??___ftadd^(0+128)
  8339  0697  082E               	movf	??___ftadd^(0+128),w
  8340  0698  07B3               	addwf	___ftadd@exp2^(0+128),f
  8341  0699                     l6472:	
  8342  0699  0834               	movf	___ftadd@exp1^(0+128),w
  8343  069A  0633               	xorwf	___ftadd@exp2^(0+128),w
  8344  069B  1D03               	skipz
  8345  069C  2E8F               	goto	l6470
  8346  069D                     l1921:	
  8347  069D  1FB2               	btfss	___ftadd@sign^(0+128),7
  8348  069E  2EAF               	goto	l6476
  8349  069F  30FF               	movlw	255
  8350  06A0  06A8               	xorwf	___ftadd@f1^(0+128),f
  8351  06A1  30FF               	movlw	255
  8352  06A2  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
  8353  06A3  30FF               	movlw	255
  8354  06A4  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
  8355  06A5  3001               	movlw	1
  8356  06A6  07A8               	addwf	___ftadd@f1^(0+128),f
  8357  06A7  3000               	movlw	0
  8358  06A8  1803               	skipnc
  8359  06A9  3001               	movlw	1
  8360  06AA  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
  8361  06AB  3000               	movlw	0
  8362  06AC  1803               	skipnc
  8363  06AD  3001               	movlw	1
  8364  06AE  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
  8365  06AF                     l6476:	
  8366  06AF  1F32               	btfss	___ftadd@sign^(0+128),6
  8367  06B0  2EC1               	goto	l6480
  8368  06B1  30FF               	movlw	255
  8369  06B2  06AB               	xorwf	___ftadd@f2^(0+128),f
  8370  06B3  30FF               	movlw	255
  8371  06B4  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
  8372  06B5  30FF               	movlw	255
  8373  06B6  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
  8374  06B7  3001               	movlw	1
  8375  06B8  07AB               	addwf	___ftadd@f2^(0+128),f
  8376  06B9  3000               	movlw	0
  8377  06BA  1803               	skipnc
  8378  06BB  3001               	movlw	1
  8379  06BC  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
  8380  06BD  3000               	movlw	0
  8381  06BE  1803               	skipnc
  8382  06BF  3001               	movlw	1
  8383  06C0  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
  8384  06C1                     l6480:	
  8385  06C1  01B2               	clrf	___ftadd@sign^(0+128)
  8386  06C2  0828               	movf	___ftadd@f1^(0+128),w
  8387  06C3  07AB               	addwf	___ftadd@f2^(0+128),f
  8388  06C4  0829               	movf	(___ftadd@f1+1)^(0+128),w
  8389  06C5  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
  8390  06C6  082A               	movf	(___ftadd@f1+2)^(0+128),w
  8391  06C7  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
  8392  06C8  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
  8393  06C9  2EDC               	goto	l6490
  8394  06CA  30FF               	movlw	255
  8395  06CB  06AB               	xorwf	___ftadd@f2^(0+128),f
  8396  06CC  30FF               	movlw	255
  8397  06CD  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
  8398  06CE  30FF               	movlw	255
  8399  06CF  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
  8400  06D0  3001               	movlw	1
  8401  06D1  07AB               	addwf	___ftadd@f2^(0+128),f
  8402  06D2  3000               	movlw	0
  8403  06D3  1803               	skipnc
  8404  06D4  3001               	movlw	1
  8405  06D5  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
  8406  06D6  3000               	movlw	0
  8407  06D7  1803               	skipnc
  8408  06D8  3001               	movlw	1
  8409  06D9  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
  8410  06DA  01B2               	clrf	___ftadd@sign^(0+128)
  8411  06DB  0AB2               	incf	___ftadd@sign^(0+128),f
  8412  06DC                     l6490:	
  8413  06DC  082B               	movf	___ftadd@f2^(0+128),w
  8414  06DD  00A0               	movwf	___ftpack@arg^(0+128)
  8415  06DE  082C               	movf	(___ftadd@f2+1)^(0+128),w
  8416  06DF  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  8417  06E0  082D               	movf	(___ftadd@f2+2)^(0+128),w
  8418  06E1  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  8419  06E2  0834               	movf	___ftadd@exp1^(0+128),w
  8420  06E3  00AE               	movwf	??___ftadd^(0+128)
  8421  06E4  082E               	movf	??___ftadd^(0+128),w
  8422  06E5  00A3               	movwf	___ftpack@exp^(0+128)
  8423  06E6  0832               	movf	___ftadd@sign^(0+128),w
  8424  06E7  00AF               	movwf	(??___ftadd+1)^(0+128)
  8425  06E8  082F               	movf	(??___ftadd+1)^(0+128),w
  8426  06E9  00A4               	movwf	___ftpack@sign^(0+128)
  8427  06EA  3197  2725         	fcall	___ftpack
  8428  06EC  0021               	movlb	1	; select bank1
  8429  06ED  0820               	movf	?___ftpack^(0+128),w
  8430  06EE  00A8               	movwf	?___ftadd^(0+128)
  8431  06EF  0821               	movf	(?___ftpack+1)^(0+128),w
  8432  06F0  00A9               	movwf	(?___ftadd+1)^(0+128)
  8433  06F1  0822               	movf	(?___ftpack+2)^(0+128),w
  8434  06F2  00AA               	movwf	(?___ftadd+2)^(0+128)
  8435  06F3  0008               	return
  8436  06F4                     __end_of___ftadd:	
  8437                           
  8438                           	psect	text12
  8439  1725                     __ptext12:	
  8440 ;; *************** function ___ftpack *****************
  8441 ;; Defined at:
  8442 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;  arg             3    0[BANK1 ] unsigned um
  8445 ;;  exp             1    3[BANK1 ] unsigned char 
  8446 ;;  sign            1    4[BANK1 ] unsigned char 
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  3    0[BANK1 ] float 
  8451 ;; Registers used:
  8452 ;;		wreg, status,2, status,0
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8458 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8460 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8461 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8462 ;;Total ram usage:        8 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    3
  8465 ;; This function calls:
  8466 ;;		Nothing
  8467 ;; This function is called by:
  8468 ;;		___altoft
  8469 ;;		___awtoft
  8470 ;;		___ftadd
  8471 ;;		___ftdiv
  8472 ;;		___ftmul
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           
  8477                           ;psect for function ___ftpack
  8478  1725                     ___ftpack:	
  8479                           
  8480                           ;incstack = 0
  8481                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8482  1725  0021               	movlb	1	; select bank1
  8483  1726  0823               	movf	___ftpack@exp^(0+128),w
  8484  1727  1903               	btfsc	3,2
  8485  1728  2F2E               	goto	l6130
  8486  1729  0822               	movf	(___ftpack@arg+2)^(0+128),w
  8487  172A  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  8488  172B  0420               	iorwf	___ftpack@arg^(0+128),w
  8489  172C  1D03               	skipz
  8490  172D  2F3F               	goto	l6136
  8491  172E                     l6130:	
  8492  172E  3000               	movlw	0
  8493  172F  00A0               	movwf	?___ftpack^(0+128)
  8494  1730  3000               	movlw	0
  8495  1731  00A1               	movwf	(?___ftpack+1)^(0+128)
  8496  1732  3000               	movlw	0
  8497  1733  00A2               	movwf	(?___ftpack+2)^(0+128)
  8498  1734  0008               	return
  8499  1735                     l6134:	
  8500  1735  3001               	movlw	1
  8501  1736  00A5               	movwf	??___ftpack^(0+128)
  8502  1737  0825               	movf	??___ftpack^(0+128),w
  8503  1738  07A3               	addwf	___ftpack@exp^(0+128),f
  8504  1739  3001               	movlw	1
  8505  173A                     u6065:	
  8506  173A  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8507  173B  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8508  173C  0CA0               	rrf	___ftpack@arg^(0+128),f
  8509  173D  0B89               	decfsz	9,f
  8510  173E  2F3A               	goto	u6065
  8511  173F                     l6136:	
  8512  173F  30FE               	movlw	254
  8513  1740  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8514  1741  1903               	btfsc	3,2
  8515  1742  2F58               	goto	l1890
  8516  1743  2F35               	goto	l6134
  8517  1744                     l6138:	
  8518  1744  3001               	movlw	1
  8519  1745  00A5               	movwf	??___ftpack^(0+128)
  8520  1746  0825               	movf	??___ftpack^(0+128),w
  8521  1747  07A3               	addwf	___ftpack@exp^(0+128),f
  8522  1748  3001               	movlw	1
  8523  1749  07A0               	addwf	___ftpack@arg^(0+128),f
  8524  174A  3000               	movlw	0
  8525  174B  1803               	skipnc
  8526  174C  3001               	movlw	1
  8527  174D  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
  8528  174E  3000               	movlw	0
  8529  174F  1803               	skipnc
  8530  1750  3001               	movlw	1
  8531  1751  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
  8532  1752  3001               	movlw	1
  8533  1753                     u6085:	
  8534  1753  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8535  1754  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8536  1755  0CA0               	rrf	___ftpack@arg^(0+128),f
  8537  1756  0B89               	decfsz	9,f
  8538  1757  2F53               	goto	u6085
  8539  1758                     l1890:	
  8540  1758  30FF               	movlw	255
  8541  1759  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8542  175A  1903               	btfsc	3,2
  8543  175B  2F65               	goto	l6146
  8544  175C  2F44               	goto	l6138
  8545  175D                     l6144:	
  8546  175D  3001               	movlw	1
  8547  175E  02A3               	subwf	___ftpack@exp^(0+128),f
  8548  175F  3001               	movlw	1
  8549  1760                     u6105:	
  8550  1760  35A0               	lslf	___ftpack@arg^(0+128),f
  8551  1761  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  8552  1762  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  8553  1763  0B89               	decfsz	9,f
  8554  1764  2F60               	goto	u6105
  8555  1765                     l6146:	
  8556  1765  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
  8557  1766  2F6B               	goto	l1897
  8558  1767  3002               	movlw	2
  8559  1768  0223               	subwf	___ftpack@exp^(0+128),w
  8560  1769  1803               	skipnc
  8561  176A  2F5D               	goto	l6144
  8562  176B                     l1897:	
  8563  176B  1823               	btfsc	___ftpack@exp^(0+128),0
  8564  176C  2F73               	goto	l1898
  8565  176D  30FF               	movlw	255
  8566  176E  05A0               	andwf	___ftpack@arg^(0+128),f
  8567  176F  307F               	movlw	127
  8568  1770  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
  8569  1771  30FF               	movlw	255
  8570  1772  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
  8571  1773                     l1898:	
  8572  1773  1003               	clrc
  8573  1774  0CA3               	rrf	___ftpack@exp^(0+128),f
  8574  1775  0823               	movf	___ftpack@exp^(0+128),w
  8575  1776  00A5               	movwf	??___ftpack^(0+128)
  8576  1777  01A6               	clrf	(??___ftpack^(0+128)+1)
  8577  1778  01A7               	clrf	(??___ftpack^(0+128)+2)
  8578  1779  3010               	movlw	16
  8579  177A                     u6145:	
  8580  177A  35A5               	lslf	??___ftpack^(0+128),f
  8581  177B  0DA6               	rlf	(??___ftpack^(0+128)+1),f
  8582  177C  0DA7               	rlf	(??___ftpack^(0+128)+2),f
  8583  177D  0B89               	decfsz	9,f
  8584  177E  2F7A               	goto	u6145
  8585  177F  0825               	movf	??___ftpack^(0+128),w
  8586  1780  04A0               	iorwf	___ftpack@arg^(0+128),f
  8587  1781  0826               	movf	(??___ftpack+1)^(0+128),w
  8588  1782  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  8589  1783  0827               	movf	(??___ftpack+2)^(0+128),w
  8590  1784  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  8591  1785  0824               	movf	___ftpack@sign^(0+128),w
  8592  1786  1903               	btfsc	3,2
  8593  1787  0008               	return
  8594  1788  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  8595  1789  0008               	return
  8596  178A                     __end_of___ftpack:	
  8597                           
  8598                           	psect	text13
  8599  1220                     __ptext13:	
  8600 ;; *************** function _initSwitchBypass *****************
  8601 ;; Defined at:
  8602 ;;		line 29 in file "SwitchBypass.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  initState       2   22[BANK1 ] int 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      void 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8617 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8619 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    6
  8623 ;; This function calls:
  8624 ;;		_getSwitchBypassState
  8625 ;;		_setSwitchBypassState
  8626 ;; This function is called by:
  8627 ;;		_main
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _initSwitchBypass
  8633  1220                     _initSwitchBypass:	
  8634                           
  8635                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  8639  1220  3191  21D4  3192   	fcall	_getSwitchBypassState
  8640  1223  0021               	movlb	1	; select bank1
  8641  1224  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
  8642  1225  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
  8643  1226  0820               	movf	?_getSwitchBypassState^(0+128),w
  8644  1227  00B6               	movwf	initSwitchBypass@initState^(0+128)
  8645                           
  8646                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
  8647  1228  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
  8648  1229  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8649  122A  0836               	movf	initSwitchBypass@initState^(0+128),w
  8650  122B  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8651  122C  3196  2636         	fcall	_setSwitchBypassState
  8652  122E  0008               	return
  8653  122F                     __end_of_initSwitchBypass:	
  8654                           
  8655                           	psect	text14
  8656  1636                     __ptext14:	
  8657 ;; *************** function _setSwitchBypassState *****************
  8658 ;; Defined at:
  8659 ;;		line 134 in file "SwitchBypass.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  f_state         2   18[BANK1 ] int 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;		None
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8673 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8675 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8676 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8677 ;;Total ram usage:        4 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    5
  8680 ;; This function calls:
  8681 ;;		_updateSwitchBypassState
  8682 ;;		_wait_ms
  8683 ;; This function is called by:
  8684 ;;		_initSwitchBypass
  8685 ;;		_updateSwitchBypass
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           
  8690                           ;psect for function _setSwitchBypassState
  8691  1636                     _setSwitchBypassState:	
  8692                           
  8693                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
  8694                           
  8695                           ;incstack = 0
  8696                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
  8697  1636  0020               	movlb	0	; select bank0
  8698  1637  0857               	movf	_switchBypass_state,w
  8699  1638  0021               	movlb	1	; select bank1
  8700  1639  00B4               	movwf	??_setSwitchBypassState^(0+128)
  8701  163A  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
  8702  163B  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
  8703  163C  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
  8704  163D  1D03               	skipz
  8705  163E  2E41               	goto	u6375
  8706  163F  0832               	movf	setSwitchBypassState@f_state^(0+128),w
  8707  1640  0634               	xorwf	??_setSwitchBypassState^(0+128),w
  8708  1641                     u6375:	
  8709  1641  1903               	btfsc	3,2
  8710  1642  0008               	return
  8711                           
  8712                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
  8713  1643  0832               	movf	setSwitchBypassState@f_state^(0+128),w
  8714  1644  00B4               	movwf	??_setSwitchBypassState^(0+128)
  8715  1645  0834               	movf	??_setSwitchBypassState^(0+128),w
  8716  1646  0020               	movlb	0	; select bank0
  8717  1647  00D7               	movwf	_switchBypass_state
  8718                           
  8719                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
  8720  1648  0021               	movlb	1	; select bank1
  8721  1649  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
  8722  164A  0022               	movlb	2	; select bank2
  8723  164B  1C03               	skipc
  8724  164C  110D               	bcf	13,2	;volatile
  8725  164D  1803               	skipnc
  8726  164E  150D               	bsf	13,2	;volatile
  8727                           
  8728                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
  8729  164F  118D               	bcf	13,3	;volatile
  8730                           
  8731                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
  8732  1650  0021               	movlb	1	; select bank1
  8733  1651  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
  8734  1652  0027               	movlb	7	; select bank7
  8735  1653  1C03               	skipc
  8736  1654  110D               	bcf	13,2	;volatile
  8737  1655  1803               	skipnc
  8738  1656  150D               	bsf	13,2	;volatile
  8739                           
  8740                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
  8741  1657  0021               	movlb	1	; select bank1
  8742  1658  0832               	movf	setSwitchBypassState@f_state^(0+128),w
  8743  1659  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
  8744  165A  1D03               	btfss	3,2
  8745  165B  2E5F               	goto	u6380
  8746  165C  0027               	movlb	7	; select bank7
  8747  165D  148D               	bsf	13,1	;volatile
  8748  165E  2E61               	goto	l6402
  8749  165F                     u6380:	
  8750  165F  0027               	movlb	7	; select bank7
  8751  1660  108D               	bcf	13,1	;volatile
  8752  1661                     l6402:	
  8753                           
  8754                           ;SwitchBypass.c: 142: wait_ms(20);
  8755  1661  3014               	movlw	20
  8756  1662  0021               	movlb	1	; select bank1
  8757  1663  00AC               	movwf	wait_ms@timeSec^(0+128)
  8758  1664  3000               	movlw	0
  8759  1665  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8760  1666  3193  2383  3196   	fcall	_wait_ms
  8761                           
  8762                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
  8763  1669  0027               	movlb	7	; select bank7
  8764  166A  110D               	bcf	13,2	;volatile
  8765                           
  8766                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
  8767  166B  108D               	bcf	13,1	;volatile
  8768                           
  8769                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
  8770  166C  0020               	movlb	0	; select bank0
  8771  166D  0857               	movf	_switchBypass_state,w
  8772  166E  0021               	movlb	1	; select bank1
  8773  166F  00B4               	movwf	??_setSwitchBypassState^(0+128)
  8774  1670  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
  8775  1671  0834               	movf	??_setSwitchBypassState^(0+128),w
  8776  1672  00A0               	movwf	updateSwitchBypassState@state^(0+128)
  8777  1673  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
  8778  1674  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
  8779  1675  3180  2003  3196   	fcall	_updateSwitchBypassState
  8780                           
  8781                           ;SwitchBypass.c: 148: wait_ms(20);
  8782  1678  3014               	movlw	20
  8783  1679  0021               	movlb	1	; select bank1
  8784  167A  00AC               	movwf	wait_ms@timeSec^(0+128)
  8785  167B  3000               	movlw	0
  8786  167C  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8787  167D  3193  2383         	fcall	_wait_ms
  8788  167F  0008               	return
  8789  1680                     __end_of_setSwitchBypassState:	
  8790                           
  8791                           	psect	text15
  8792  1383                     __ptext15:	
  8793 ;; *************** function _wait_ms *****************
  8794 ;; Defined at:
  8795 ;;		line 23 in file "system.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  timeSec         2   12[BANK1 ] unsigned int 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  timemsl         4   14[BANK1 ] long 
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, status,2, status,0, pclath, cstack
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8809 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8810 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8812 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8813 ;;Total ram usage:        6 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    4
  8816 ;; This function calls:
  8817 ;;		___lmul
  8818 ;; This function is called by:
  8819 ;;		_setSwitchBypassState
  8820 ;;		_showError_Alternating
  8821 ;;		_show_error
  8822 ;;		_show_cancel
  8823 ;;		_star_tactiles
  8824 ;;		_ring_tactiles
  8825 ;;		_solidring_tactiles
  8826 ;;		_read_bottom_tactile
  8827 ;;		_read_top_tactile
  8828 ;;		_setDoublePressState
  8829 ;;		_initExpModeState
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function _wait_ms
  8835  1383                     _wait_ms:	
  8836                           
  8837                           ;system.c: 25: long timemsl = 0;
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  8841  1383  3000               	movlw	0
  8842  1384  0021               	movlb	1	; select bank1
  8843  1385  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
  8844  1386  3000               	movlw	0
  8845  1387  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
  8846  1388  3000               	movlw	0
  8847  1389  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
  8848  138A  3000               	movlw	0
  8849  138B  00AE               	movwf	wait_ms@timemsl^(0+128)
  8850                           
  8851                           ;system.c: 26: timemsl = timeSec * 1000l;
  8852  138C  082C               	movf	wait_ms@timeSec^(0+128),w
  8853  138D  00A0               	movwf	___lmul@multiplier^(0+128)
  8854  138E  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
  8855  138F  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
  8856  1390  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
  8857  1391  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
  8858  1392  3000               	movlw	0
  8859  1393  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  8860  1394  3000               	movlw	0
  8861  1395  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  8862  1396  3003               	movlw	3
  8863  1397  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  8864  1398  30E8               	movlw	232
  8865  1399  00A4               	movwf	___lmul@multiplicand^(0+128)
  8866  139A  3193  2353  3193   	fcall	___lmul
  8867  139D  0021               	movlb	1	; select bank1
  8868  139E  0823               	movf	(?___lmul+3)^(0+128),w
  8869  139F  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
  8870  13A0  0822               	movf	(?___lmul+2)^(0+128),w
  8871  13A1  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
  8872  13A2  0821               	movf	(?___lmul+1)^(0+128),w
  8873  13A3  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
  8874  13A4  0820               	movf	?___lmul^(0+128),w
  8875  13A5  00AE               	movwf	wait_ms@timemsl^(0+128)
  8876  13A6                     l383:	
  8877                           ;system.c: 27: for( ; timemsl; timemsl--);
  8878                           
  8879  13A6  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
  8880  13A7  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
  8881  13A8  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
  8882  13A9  042E               	iorwf	wait_ms@timemsl^(0+128),w
  8883  13AA  1903               	btfsc	3,2
  8884  13AB  0008               	return
  8885  13AC  30FF               	movlw	255
  8886  13AD  07AE               	addwf	wait_ms@timemsl^(0+128),f
  8887  13AE  30FF               	movlw	255
  8888  13AF  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
  8889  13B0  30FF               	movlw	255
  8890  13B1  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
  8891  13B2  30FF               	movlw	255
  8892  13B3  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
  8893  13B4  2BA6               	goto	l383
  8894  13B5                     __end_of_wait_ms:	
  8895                           
  8896                           	psect	text16
  8897  1353                     __ptext16:	
  8898 ;; *************** function ___lmul *****************
  8899 ;; Defined at:
  8900 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  multiplier      4    0[BANK1 ] unsigned long 
  8903 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  product         4    8[BANK1 ] unsigned long 
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  4    0[BANK1 ] unsigned long 
  8908 ;; Registers used:
  8909 ;;		wreg, status,2, status,0
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8915 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8916 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8918 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8919 ;;Total ram usage:       12 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    3
  8922 ;; This function calls:
  8923 ;;		Nothing
  8924 ;; This function is called by:
  8925 ;;		_wait_ms
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function ___lmul
  8931  1353                     ___lmul:	
  8932                           
  8933                           ;incstack = 0
  8934                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8935  1353  3000               	movlw	0
  8936  1354  0021               	movlb	1	; select bank1
  8937  1355  00AB               	movwf	(___lmul@product+3)^(0+128)
  8938  1356  3000               	movlw	0
  8939  1357  00AA               	movwf	(___lmul@product+2)^(0+128)
  8940  1358  3000               	movlw	0
  8941  1359  00A9               	movwf	(___lmul@product+1)^(0+128)
  8942  135A  3000               	movlw	0
  8943  135B  00A8               	movwf	___lmul@product^(0+128)
  8944  135C                     l6114:	
  8945  135C  1C20               	btfss	___lmul@multiplier^(0+128),0
  8946  135D  2B66               	goto	l6118
  8947  135E  0824               	movf	___lmul@multiplicand^(0+128),w
  8948  135F  07A8               	addwf	___lmul@product^(0+128),f
  8949  1360  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  8950  1361  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
  8951  1362  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  8952  1363  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
  8953  1364  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  8954  1365  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
  8955  1366                     l6118:	
  8956  1366  3001               	movlw	1
  8957  1367                     u6015:	
  8958  1367  35A4               	lslf	___lmul@multiplicand^(0+128),f
  8959  1368  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  8960  1369  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  8961  136A  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  8962  136B  0B89               	decfsz	9,f
  8963  136C  2B67               	goto	u6015
  8964  136D  3001               	movlw	1
  8965  136E                     u6025:	
  8966  136E  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
  8967  136F  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  8968  1370  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  8969  1371  0CA0               	rrf	___lmul@multiplier^(0+128),f
  8970  1372  0B89               	decfsz	9,f
  8971  1373  2B6E               	goto	u6025
  8972  1374  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  8973  1375  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  8974  1376  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  8975  1377  0420               	iorwf	___lmul@multiplier^(0+128),w
  8976  1378  1D03               	skipz
  8977  1379  2B5C               	goto	l6114
  8978  137A  082B               	movf	(___lmul@product+3)^(0+128),w
  8979  137B  00A3               	movwf	(?___lmul+3)^(0+128)
  8980  137C  082A               	movf	(___lmul@product+2)^(0+128),w
  8981  137D  00A2               	movwf	(?___lmul+2)^(0+128)
  8982  137E  0829               	movf	(___lmul@product+1)^(0+128),w
  8983  137F  00A1               	movwf	(?___lmul+1)^(0+128)
  8984  1380  0828               	movf	___lmul@product^(0+128),w
  8985  1381  00A0               	movwf	?___lmul^(0+128)
  8986  1382  0008               	return
  8987  1383                     __end_of___lmul:	
  8988                           
  8989                           	psect	text17
  8990  0003                     __ptext17:	
  8991 ;; *************** function _updateSwitchBypassState *****************
  8992 ;; Defined at:
  8993 ;;		line 96 in file "state_manager.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;  state           2    0[BANK1 ] int 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		None
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9007 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9010 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9011 ;;Total ram usage:        2 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    3
  9014 ;; This function calls:
  9015 ;;		Nothing
  9016 ;; This function is called by:
  9017 ;;		_setSwitchBypassState
  9018 ;; This function uses a non-reentrant model
  9019 ;;
  9020                           
  9021                           
  9022                           ;psect for function _updateSwitchBypassState
  9023  0003                     _updateSwitchBypassState:	
  9024                           
  9025                           ;incstack = 0
  9026                           ; Regs used in _updateSwitchBypassState: []
  9027  0003  0008               	return
  9028  0004                     __end_of_updateSwitchBypassState:	
  9029                           
  9030                           	psect	text18
  9031  11D4                     __ptext18:	
  9032 ;; *************** function _getSwitchBypassState *****************
  9033 ;; Defined at:
  9034 ;;		line 103 in file "state_manager.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  2    0[BANK1 ] int 
  9041 ;; Registers used:
  9042 ;;		status,2
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9048 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9051 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9052 ;;Total ram usage:        2 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    3
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_initSwitchBypass
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _getSwitchBypassState
  9064  11D4                     _getSwitchBypassState:	
  9065                           
  9066                           ;state_manager.c: 108: return 0;
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in _getSwitchBypassState: [status,2]
  9070  11D4  0021               	movlb	1	; select bank1
  9071  11D5  01A0               	clrf	?_getSwitchBypassState^(0+128)
  9072  11D6  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
  9073  11D7  0008               	return
  9074  11D8                     __end_of_getSwitchBypassState:	
  9075                           
  9076                           	psect	text19
  9077  123E                     __ptext19:	
  9078 ;; *************** function _adc_convert *****************
  9079 ;; Defined at:
  9080 ;;		line 122 in file "user.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  channel         1    wreg     unsigned char 
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;  channel         1    3[BANK1 ] unsigned char 
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  2    0[BANK1 ] unsigned int 
  9087 ;; Registers used:
  9088 ;;		wreg, status,2, status,0
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9094 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9095 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9096 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9097 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9098 ;;Total ram usage:        4 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; Hardware stack levels required when called:    3
  9101 ;; This function calls:
  9102 ;;		Nothing
  9103 ;; This function is called by:
  9104 ;;		_main
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           
  9109                           ;psect for function _adc_convert
  9110  123E                     _adc_convert:	
  9111                           
  9112                           ;incstack = 0
  9113                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
  9114                           ;adc_convert@channel stored from wreg
  9115  123E  0021               	movlb	1	; select bank1
  9116  123F  00A3               	movwf	adc_convert@channel^(0+128)
  9117                           
  9118                           ;user.c: 123: ADCON0bits.CHS = channel;
  9119  1240  0823               	movf	adc_convert@channel^(0+128),w
  9120  1241  00A2               	movwf	??_adc_convert^(0+128)
  9121  1242  0DA2               	rlf	??_adc_convert^(0+128),f
  9122  1243  0DA2               	rlf	??_adc_convert^(0+128),f
  9123  1244  081D               	movf	29,w	;volatile
  9124  1245  0622               	xorwf	??_adc_convert^(0+128),w
  9125  1246  3983               	andlw	-125
  9126  1247  0622               	xorwf	??_adc_convert^(0+128),w
  9127  1248  009D               	movwf	29	;volatile
  9128                           
  9129                           ;user.c: 124: ADCON0bits.GO = 0b1;
  9130  1249  149D               	bsf	29,1	;volatile
  9131  124A                     l581:	
  9132                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
  9133                           
  9134  124A  189D               	btfsc	29,1	;volatile
  9135  124B  2A4A               	goto	l581
  9136                           
  9137                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
  9138  124C  081C               	movf	28,w	;volatile
  9139  124D  00A1               	movwf	(?_adc_convert+1)^(0+128)
  9140  124E  081B               	movf	27,w	;volatile
  9141  124F  00A0               	movwf	?_adc_convert^(0+128)
  9142  1250  0008               	return
  9143  1251                     __end_of_adc_convert:	
  9144                           
  9145                           	psect	text20
  9146  1563                     __ptext20:	
  9147 ;; *************** function _USARTInit *****************
  9148 ;; Defined at:
  9149 ;;		line 31 in file "usart_pic16.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  baud_rate       2    0[BANK1 ] unsigned int 
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;		None
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  1    wreg      void 
  9156 ;; Registers used:
  9157 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9163 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9165 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9166 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9167 ;;Total ram usage:        3 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; Hardware stack levels required when called:    3
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_main
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _USARTInit
  9179  1563                     _USARTInit:	
  9180                           
  9181                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
  9182                           
  9183                           ;incstack = 0
  9184                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  9185  1563  30FF               	movlw	255
  9186  1564  0020               	movlb	0	; select bank0
  9187  1565  00E9               	movwf	_UQEnd	;volatile
  9188  1566  0021               	movlb	1	; select bank1
  9189  1567  00A2               	movwf	??_USARTInit^(0+128)
  9190  1568  0822               	movf	??_USARTInit^(0+128),w
  9191  1569  00FD               	movwf	_UQFront	;volatile
  9192                           
  9193                           ;usart_pic16.c: 37: switch(baud_rate)
  9194  156A  2D75               	goto	l6606
  9195  156B                     l6596:	
  9196                           ;usart_pic16.c: 38: {
  9197                           ;usart_pic16.c: 39: case 9600:
  9198                           
  9199                           
  9200                           ;usart_pic16.c: 40: SPBRG=103;
  9201  156B  3067               	movlw	103
  9202  156C  2D72               	goto	L10
  9203  156D                     l6598:	
  9204                           ;usart_pic16.c: 42: case 19200:
  9205                           
  9206                           ;usart_pic16.c: 41: break;
  9207                           
  9208                           
  9209                           ;usart_pic16.c: 43: SPBRG=51;
  9210  156D  3033               	movlw	51
  9211  156E  2D72               	goto	L10
  9212  156F                     l6600:	
  9213                           ;usart_pic16.c: 45: case 31250:
  9214                           
  9215                           ;usart_pic16.c: 44: break;
  9216                           
  9217                           
  9218                           ;usart_pic16.c: 46: SPBRG = 31;
  9219  156F  301F               	movlw	31
  9220  1570  2D72               	goto	L10
  9221  1571                     l6602:	
  9222                           ;usart_pic16.c: 48: case 38400:
  9223                           
  9224                           ;usart_pic16.c: 47: break;
  9225                           
  9226                           
  9227                           ;usart_pic16.c: 49: SPBRG=25;
  9228  1571  3019               	movlw	25
  9229  1572                     L10:	
  9230  1572  0023               	movlb	3	; select bank3
  9231  1573  009B               	movwf	27	;volatile
  9232                           
  9233                           ;usart_pic16.c: 51: }
  9234                           
  9235                           ;usart_pic16.c: 50: break;
  9236  1574  2D98               	goto	l1644
  9237  1575                     l6606:	
  9238                           
  9239                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  9240                           ; Switch size 1, requested type "space"
  9241                           ; Number of cases is 4, Range of values is 37 to 150
  9242                           ; switch strategies available:
  9243                           ; Name         Instructions Cycles
  9244                           ; simple_byte           13     7 (average)
  9245                           ; direct_byte          237     9 (fixed)
  9246                           ; jumptable            263     9 (fixed)
  9247                           ;	Chosen strategy is simple_byte
  9248  1575  0021               	movlb	1	; select bank1
  9249  1576  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
  9250  1577  3A25               	xorlw	37	; case 37
  9251  1578  1903               	skipnz
  9252  1579  2D84               	goto	l7570
  9253  157A  3A6E               	xorlw	110	; case 75
  9254  157B  1903               	skipnz
  9255  157C  2D89               	goto	l7572
  9256  157D  3A31               	xorlw	49	; case 122
  9257  157E  1903               	skipnz
  9258  157F  2D8E               	goto	l7574
  9259  1580  3AEC               	xorlw	236	; case 150
  9260  1581  1903               	skipnz
  9261  1582  2D93               	goto	l7576
  9262  1583  2D98               	goto	l1644
  9263  1584                     l7570:	
  9264                           
  9265                           ; Switch size 1, requested type "space"
  9266                           ; Number of cases is 1, Range of values is 128 to 128
  9267                           ; switch strategies available:
  9268                           ; Name         Instructions Cycles
  9269                           ; simple_byte            4     3 (average)
  9270                           ; direct_byte           11     9 (fixed)
  9271                           ; jumptable            263     9 (fixed)
  9272                           ;	Chosen strategy is simple_byte
  9273  1584  0820               	movf	USARTInit@baud_rate^(0+128),w
  9274  1585  3A80               	xorlw	128	; case 128
  9275  1586  1903               	skipnz
  9276  1587  2D6B               	goto	l6596
  9277  1588  2D98               	goto	l1644
  9278  1589                     l7572:	
  9279                           
  9280                           ; Switch size 1, requested type "space"
  9281                           ; Number of cases is 1, Range of values is 0 to 0
  9282                           ; switch strategies available:
  9283                           ; Name         Instructions Cycles
  9284                           ; simple_byte            4     3 (average)
  9285                           ; direct_byte            8     6 (fixed)
  9286                           ; jumptable            260     6 (fixed)
  9287                           ;	Chosen strategy is simple_byte
  9288  1589  0820               	movf	USARTInit@baud_rate^(0+128),w
  9289  158A  3A00               	xorlw	0	; case 0
  9290  158B  1903               	skipnz
  9291  158C  2D6D               	goto	l6598
  9292  158D  2D98               	goto	l1644
  9293  158E                     l7574:	
  9294                           
  9295                           ; Switch size 1, requested type "space"
  9296                           ; Number of cases is 1, Range of values is 18 to 18
  9297                           ; switch strategies available:
  9298                           ; Name         Instructions Cycles
  9299                           ; simple_byte            4     3 (average)
  9300                           ; direct_byte           11     9 (fixed)
  9301                           ; jumptable            263     9 (fixed)
  9302                           ;	Chosen strategy is simple_byte
  9303  158E  0820               	movf	USARTInit@baud_rate^(0+128),w
  9304  158F  3A12               	xorlw	18	; case 18
  9305  1590  1903               	skipnz
  9306  1591  2D6F               	goto	l6600
  9307  1592  2D98               	goto	l1644
  9308  1593                     l7576:	
  9309                           
  9310                           ; Switch size 1, requested type "space"
  9311                           ; Number of cases is 1, Range of values is 0 to 0
  9312                           ; switch strategies available:
  9313                           ; Name         Instructions Cycles
  9314                           ; simple_byte            4     3 (average)
  9315                           ; direct_byte            8     6 (fixed)
  9316                           ; jumptable            260     6 (fixed)
  9317                           ;	Chosen strategy is simple_byte
  9318  1593  0820               	movf	USARTInit@baud_rate^(0+128),w
  9319  1594  3A00               	xorlw	0	; case 0
  9320  1595  1903               	skipnz
  9321  1596  2D71               	goto	l6602
  9322  1597  2D98               	goto	l1644
  9323  1598                     l1644:	
  9324                           
  9325                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
  9326  1598  0023               	movlb	3	; select bank3
  9327  1599  131E               	bcf	30,6	;volatile
  9328                           
  9329                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
  9330  159A  169E               	bsf	30,5	;volatile
  9331                           
  9332                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
  9333  159B  121E               	bcf	30,4	;volatile
  9334                           
  9335                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
  9336  159C  151E               	bsf	30,2	;volatile
  9337                           
  9338                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
  9339  159D  179D               	bsf	29,7	;volatile
  9340                           
  9341                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
  9342  159E  131D               	bcf	29,6	;volatile
  9343                           
  9344                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
  9345  159F  161D               	bsf	29,4	;volatile
  9346                           
  9347                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
  9348  15A0  119D               	bcf	29,3	;volatile
  9349                           
  9350                           ;usart_pic16.c: 65: RCIE=1;
  9351  15A1  0021               	movlb	1	; select bank1
  9352  15A2  1691               	bsf	17,5	;volatile
  9353                           
  9354                           ;usart_pic16.c: 66: PEIE=1;
  9355  15A3  170B               	bsf	11,6	;volatile
  9356                           
  9357                           ;usart_pic16.c: 68: (GIE = 1);
  9358  15A4  178B               	bsf	11,7	;volatile
  9359  15A5  0008               	return
  9360  15A6                     __end_of_USARTInit:	
  9361                           
  9362                           	psect	text21
  9363  178A                     __ptext21:	
  9364 ;; *************** function _ReadSavedSettings *****************
  9365 ;; Defined at:
  9366 ;;		line 199 in file "user.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;		None
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;		None
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  1    wreg      void 
  9373 ;; Registers used:
  9374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9382 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9383 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9384 ;;Total ram usage:        1 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    4
  9387 ;; This function calls:
  9388 ;;		_FLASH_ReadWord
  9389 ;;		_set_leds_bottom
  9390 ;;		_set_leds_top
  9391 ;; This function is called by:
  9392 ;;		_main
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           
  9397                           ;psect for function _ReadSavedSettings
  9398  178A                     _ReadSavedSettings:	
  9399                           
  9400                           ;user.c: 201: top_push_state = FLASH_ReadWord(0x1F81);
  9401                           
  9402                           ;incstack = 0
  9403                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9404  178A  3081               	movlw	129
  9405  178B  0021               	movlb	1	; select bank1
  9406  178C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
  9407  178D  301F               	movlw	31
  9408  178E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
  9409  178F  3192  2264  3197   	fcall	_FLASH_ReadWord
  9410  1792  0021               	movlb	1	; select bank1
  9411  1793  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
  9412  1794  0020               	movlb	0	; select bank0
  9413  1795  00D2               	movwf	_top_push_state+1
  9414  1796  0021               	movlb	1	; select bank1
  9415  1797  0820               	movf	?_FLASH_ReadWord^(0+128),w
  9416  1798  0020               	movlb	0	; select bank0
  9417  1799  00D1               	movwf	_top_push_state
  9418                           
  9419                           ;user.c: 202: bottom_push_state = FLASH_ReadWord(0x1F82);
  9420  179A  3082               	movlw	130
  9421  179B  0021               	movlb	1	; select bank1
  9422  179C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
  9423  179D  301F               	movlw	31
  9424  179E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
  9425  179F  3192  2264  3197   	fcall	_FLASH_ReadWord
  9426  17A2  0021               	movlb	1	; select bank1
  9427  17A3  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
  9428  17A4  0020               	movlb	0	; select bank0
  9429  17A5  00CE               	movwf	_bottom_push_state+1
  9430  17A6  0021               	movlb	1	; select bank1
  9431  17A7  0820               	movf	?_FLASH_ReadWord^(0+128),w
  9432  17A8  0020               	movlb	0	; select bank0
  9433  17A9  00CD               	movwf	_bottom_push_state
  9434                           
  9435                           ;user.c: 204: if (top_push_state > 6) {
  9436  17AA  0852               	movf	_top_push_state+1,w
  9437  17AB  3A80               	xorlw	128
  9438  17AC  0021               	movlb	1	; select bank1
  9439  17AD  00A4               	movwf	??_ReadSavedSettings^(0+128)
  9440  17AE  3080               	movlw	128
  9441  17AF  0224               	subwf	??_ReadSavedSettings^(0+128),w
  9442  17B0  1D03               	skipz
  9443  17B1  2FB5               	goto	u6885
  9444  17B2  3007               	movlw	7
  9445  17B3  0020               	movlb	0	; select bank0
  9446  17B4  0251               	subwf	_top_push_state,w
  9447  17B5                     u6885:	
  9448  17B5  1C03               	skipc
  9449  17B6  2FBC               	goto	l610
  9450                           
  9451                           ;user.c: 206: top_push_state = 6;
  9452  17B7  3006               	movlw	6
  9453  17B8  0020               	movlb	0	; select bank0
  9454  17B9  00D1               	movwf	_top_push_state
  9455  17BA  3000               	movlw	0
  9456  17BB  00D2               	movwf	_top_push_state+1
  9457  17BC                     l610:	
  9458                           
  9459                           ;user.c: 207: }
  9460                           ;user.c: 208: if (bottom_push_state > 6) {
  9461  17BC  0020               	movlb	0	; select bank0
  9462  17BD  084E               	movf	_bottom_push_state+1,w
  9463  17BE  3A80               	xorlw	128
  9464  17BF  0021               	movlb	1	; select bank1
  9465  17C0  00A4               	movwf	??_ReadSavedSettings^(0+128)
  9466  17C1  3080               	movlw	128
  9467  17C2  0224               	subwf	??_ReadSavedSettings^(0+128),w
  9468  17C3  1D03               	skipz
  9469  17C4  2FC8               	goto	u6895
  9470  17C5  3007               	movlw	7
  9471  17C6  0020               	movlb	0	; select bank0
  9472  17C7  024D               	subwf	_bottom_push_state,w
  9473  17C8                     u6895:	
  9474  17C8  1C03               	skipc
  9475  17C9  2FCF               	goto	l6660
  9476                           
  9477                           ;user.c: 210: bottom_push_state = 6;
  9478  17CA  3006               	movlw	6
  9479  17CB  0020               	movlb	0	; select bank0
  9480  17CC  00CD               	movwf	_bottom_push_state
  9481  17CD  3000               	movlw	0
  9482  17CE  00CE               	movwf	_bottom_push_state+1
  9483  17CF                     l6660:	
  9484                           
  9485                           ;user.c: 211: }
  9486                           ;user.c: 214: LATGbits.LATG1 = !switchBypass_state;
  9487  17CF  0020               	movlb	0	; select bank0
  9488  17D0  0857               	movf	_switchBypass_state,w
  9489  17D1  1D03               	btfss	3,2
  9490  17D2  2FD6               	goto	u6900
  9491  17D3  0027               	movlb	7	; select bank7
  9492  17D4  148D               	bsf	13,1	;volatile
  9493  17D5  2FD8               	goto	l6662
  9494  17D6                     u6900:	
  9495  17D6  0027               	movlb	7	; select bank7
  9496  17D7  108D               	bcf	13,1	;volatile
  9497  17D8                     l6662:	
  9498                           
  9499                           ;user.c: 215: LATGbits.LATG2 = switchBypass_state;
  9500  17D8  0020               	movlb	0	; select bank0
  9501  17D9  0C57               	rrf	_switchBypass_state,w
  9502  17DA  0027               	movlb	7	; select bank7
  9503  17DB  1C03               	skipc
  9504  17DC  110D               	bcf	13,2	;volatile
  9505  17DD  1803               	skipnc
  9506  17DE  150D               	bsf	13,2	;volatile
  9507                           
  9508                           ;user.c: 216: LATBbits.LATB2 = 0;
  9509  17DF  0022               	movlb	2	; select bank2
  9510  17E0  110D               	bcf	13,2	;volatile
  9511                           
  9512                           ;user.c: 217: LATBbits.LATB3 = 0;
  9513  17E1  118D               	bcf	13,3	;volatile
  9514                           
  9515                           ;user.c: 219: LATBbits.LATB4 = 0;
  9516  17E2  120D               	bcf	13,4	;volatile
  9517                           
  9518                           ;user.c: 220: LATBbits.LATB5 = 0;
  9519  17E3  128D               	bcf	13,5	;volatile
  9520                           
  9521                           ;user.c: 222: LATBbits.LATB1 = 0;
  9522  17E4  108D               	bcf	13,1	;volatile
  9523                           
  9524                           ;user.c: 223: LATBbits.LATB0 = 0;
  9525  17E5  100D               	bcf	13,0	;volatile
  9526                           
  9527                           ;user.c: 226: set_leds_top(top_push_state, 1);
  9528  17E6  0020               	movlb	0	; select bank0
  9529  17E7  0852               	movf	_top_push_state+1,w
  9530  17E8  0021               	movlb	1	; select bank1
  9531  17E9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9532  17EA  0020               	movlb	0	; select bank0
  9533  17EB  0851               	movf	_top_push_state,w
  9534  17EC  0021               	movlb	1	; select bank1
  9535  17ED  00A0               	movwf	set_leds_top@x^(0+128)
  9536  17EE  3001               	movlw	1
  9537  17EF  00A2               	movwf	set_leds_top@ledState^(0+128)
  9538  17F0  3000               	movlw	0
  9539  17F1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9540  17F2  3196  26D1  3197   	fcall	_set_leds_top
  9541                           
  9542                           ;user.c: 227: set_leds_bottom(bottom_push_state);
  9543  17F5  0020               	movlb	0	; select bank0
  9544  17F6  084E               	movf	_bottom_push_state+1,w
  9545  17F7  0021               	movlb	1	; select bank1
  9546  17F8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9547  17F9  0020               	movlb	0	; select bank0
  9548  17FA  084D               	movf	_bottom_push_state,w
  9549  17FB  0021               	movlb	1	; select bank1
  9550  17FC  00A0               	movwf	set_leds_bottom@x^(0+128)
  9551  17FD  3193  23EF         	fcall	_set_leds_bottom
  9552  17FF  0008               	return
  9553  1800                     __end_of_ReadSavedSettings:	
  9554                           
  9555                           	psect	text22
  9556  16D1                     __ptext22:	
  9557 ;; *************** function _set_leds_top *****************
  9558 ;; Defined at:
  9559 ;;		line 16 in file "LEDs.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  x               2    0[BANK1 ] int 
  9562 ;;  ledState        2    2[BANK1 ] int 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;		None
  9565 ;; Return value:  Size  Location     Type
  9566 ;;                  1    wreg      void 
  9567 ;; Registers used:
  9568 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9574 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9577 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9578 ;;Total ram usage:        4 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; Hardware stack levels required when called:    3
  9581 ;; This function calls:
  9582 ;;		Nothing
  9583 ;; This function is called by:
  9584 ;;		_ReadSavedSettings
  9585 ;;		_star_tactiles
  9586 ;;		_ring_tactiles
  9587 ;;		_solidring_tactiles
  9588 ;;		_read_top_tactile
  9589 ;;		_setPresetDisplay
  9590 ;;		_resetRingLEDs
  9591 ;;		_setExpressionDisplay
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _set_leds_top
  9597  16D1                     _set_leds_top:	
  9598                           
  9599                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
  9600                           
  9601                           ;incstack = 0
  9602                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
  9603  16D1  0027               	movlb	7	; select bank7
  9604  16D2  100C               	bcf	12,0	;volatile
  9605                           
  9606                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
  9607  16D3  108C               	bcf	12,1	;volatile
  9608                           
  9609                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
  9610  16D4  110C               	bcf	12,2	;volatile
  9611                           
  9612                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
  9613  16D5  118C               	bcf	12,3	;volatile
  9614                           
  9615                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
  9616  16D6  120C               	bcf	12,4	;volatile
  9617                           
  9618                           ;LEDs.c: 22: switch (x) {
  9619  16D7  2F07               	goto	l6260
  9620  16D8                     l6248:	
  9621                           ;LEDs.c: 23: case 1:
  9622                           
  9623                           
  9624                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
  9625  16D8  0021               	movlb	1	; select bank1
  9626  16D9  0C22               	rrf	set_leds_top@ledState^(0+128),w
  9627  16DA  0027               	movlb	7	; select bank7
  9628  16DB  1C03               	skipc
  9629  16DC  100C               	bcf	12,0	;volatile
  9630  16DD  1803               	skipnc
  9631  16DE  140C               	bsf	12,0	;volatile
  9632                           
  9633                           ;LEDs.c: 25: break;
  9634  16DF  0008               	return
  9635  16E0                     l6250:	
  9636                           ;LEDs.c: 26: case 2:
  9637                           
  9638                           
  9639                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
  9640  16E0  0021               	movlb	1	; select bank1
  9641  16E1  0C22               	rrf	set_leds_top@ledState^(0+128),w
  9642  16E2  0027               	movlb	7	; select bank7
  9643  16E3  1C03               	skipc
  9644  16E4  108C               	bcf	12,1	;volatile
  9645  16E5  1803               	skipnc
  9646  16E6  148C               	bsf	12,1	;volatile
  9647                           
  9648                           ;LEDs.c: 28: break;
  9649  16E7  0008               	return
  9650  16E8                     l6252:	
  9651                           ;LEDs.c: 29: case 3:
  9652                           
  9653                           
  9654                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
  9655  16E8  0021               	movlb	1	; select bank1
  9656  16E9  0C22               	rrf	set_leds_top@ledState^(0+128),w
  9657  16EA  0027               	movlb	7	; select bank7
  9658  16EB  1C03               	skipc
  9659  16EC  110C               	bcf	12,2	;volatile
  9660  16ED  1803               	skipnc
  9661  16EE  150C               	bsf	12,2	;volatile
  9662                           
  9663                           ;LEDs.c: 31: break;
  9664  16EF  0008               	return
  9665  16F0                     l6254:	
  9666                           ;LEDs.c: 32: case 4:
  9667                           
  9668                           
  9669                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
  9670  16F0  0021               	movlb	1	; select bank1
  9671  16F1  0C22               	rrf	set_leds_top@ledState^(0+128),w
  9672  16F2  0027               	movlb	7	; select bank7
  9673  16F3  1C03               	skipc
  9674  16F4  118C               	bcf	12,3	;volatile
  9675  16F5  1803               	skipnc
  9676  16F6  158C               	bsf	12,3	;volatile
  9677                           
  9678                           ;LEDs.c: 34: break;
  9679  16F7  0008               	return
  9680  16F8                     l6256:	
  9681                           ;LEDs.c: 35: case 5:
  9682                           
  9683                           
  9684                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
  9685  16F8  0021               	movlb	1	; select bank1
  9686  16F9  0C22               	rrf	set_leds_top@ledState^(0+128),w
  9687  16FA  0027               	movlb	7	; select bank7
  9688  16FB  1C03               	skipc
  9689  16FC  120C               	bcf	12,4	;volatile
  9690  16FD  1803               	skipnc
  9691  16FE  160C               	bsf	12,4	;volatile
  9692                           
  9693                           ;LEDs.c: 39: break;
  9694                           
  9695                           ;LEDs.c: 38: case 6:
  9696                           
  9697                           ;LEDs.c: 37: break;
  9698  16FF  0008               	return
  9699  1700                     l765:	
  9700                           ;LEDs.c: 40: case 100:
  9701                           
  9702                           
  9703                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
  9704  1700  0027               	movlb	7	; select bank7
  9705  1701  140C               	bsf	12,0	;volatile
  9706                           
  9707                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
  9708  1702  148C               	bsf	12,1	;volatile
  9709                           
  9710                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
  9711  1703  150C               	bsf	12,2	;volatile
  9712                           
  9713                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
  9714  1704  158C               	bsf	12,3	;volatile
  9715                           
  9716                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
  9717  1705  160C               	bsf	12,4	;volatile
  9718                           
  9719                           ;LEDs.c: 47: }
  9720                           
  9721                           ;LEDs.c: 46: break;
  9722  1706  0008               	return
  9723  1707                     l6260:	
  9724                           
  9725                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9726                           ; Switch size 1, requested type "space"
  9727                           ; Number of cases is 1, Range of values is 0 to 0
  9728                           ; switch strategies available:
  9729                           ; Name         Instructions Cycles
  9730                           ; simple_byte            4     3 (average)
  9731                           ; direct_byte            8     6 (fixed)
  9732                           ; jumptable            260     6 (fixed)
  9733                           ;	Chosen strategy is simple_byte
  9734  1707  0021               	movlb	1	; select bank1
  9735  1708  0821               	movf	(set_leds_top@x+1)^(0+128),w
  9736  1709  3A00               	xorlw	0	; case 0
  9737  170A  1903               	skipnz
  9738  170B  2F0D               	goto	l7578
  9739  170C  2F24               	goto	l766
  9740  170D                     l7578:	
  9741                           
  9742                           ; Switch size 1, requested type "space"
  9743                           ; Number of cases is 7, Range of values is 1 to 100
  9744                           ; switch strategies available:
  9745                           ; Name         Instructions Cycles
  9746                           ; simple_byte           22    12 (average)
  9747                           ; direct_byte          209     9 (fixed)
  9748                           ; jumptable            263     9 (fixed)
  9749                           ;	Chosen strategy is simple_byte
  9750  170D  0820               	movf	set_leds_top@x^(0+128),w
  9751  170E  3A01               	xorlw	1	; case 1
  9752  170F  1903               	skipnz
  9753  1710  2ED8               	goto	l6248
  9754  1711  3A03               	xorlw	3	; case 2
  9755  1712  1903               	skipnz
  9756  1713  2EE0               	goto	l6250
  9757  1714  3A01               	xorlw	1	; case 3
  9758  1715  1903               	skipnz
  9759  1716  2EE8               	goto	l6252
  9760  1717  3A07               	xorlw	7	; case 4
  9761  1718  1903               	skipnz
  9762  1719  2EF0               	goto	l6254
  9763  171A  3A01               	xorlw	1	; case 5
  9764  171B  1903               	skipnz
  9765  171C  2EF8               	goto	l6256
  9766  171D  3A03               	xorlw	3	; case 6
  9767  171E  1903               	skipnz
  9768  171F  2F24               	goto	l766
  9769  1720  3A62               	xorlw	98	; case 100
  9770  1721  1903               	skipnz
  9771  1722  2F00               	goto	l765
  9772  1723  2F24               	goto	l766
  9773  1724                     l766:	
  9774  1724  0008               	return
  9775  1725                     __end_of_set_leds_top:	
  9776                           
  9777                           	psect	text23
  9778  13EF                     __ptext23:	
  9779 ;; *************** function _set_leds_bottom *****************
  9780 ;; Defined at:
  9781 ;;		line 51 in file "LEDs.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  x               2    0[BANK1 ] int 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9795 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9798 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9799 ;;Total ram usage:        2 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    3
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_ReadSavedSettings
  9806 ;;		_star_tactiles
  9807 ;;		_ring_tactiles
  9808 ;;		_solidring_tactiles
  9809 ;;		_read_bottom_tactile
  9810 ;;		_setPresetDisplay
  9811 ;;		_resetRingLEDs
  9812 ;;		_setExpressionDisplay
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           
  9817                           ;psect for function _set_leds_bottom
  9818  13EF                     _set_leds_bottom:	
  9819                           
  9820                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
  9821                           
  9822                           ;incstack = 0
  9823                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
  9824  13EF  0022               	movlb	2	; select bank2
  9825  13F0  100F               	bcf	15,0	;volatile
  9826                           
  9827                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
  9828  13F1  108F               	bcf	15,1	;volatile
  9829                           
  9830                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
  9831  13F2  110F               	bcf	15,2	;volatile
  9832                           
  9833                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
  9834  13F3  118F               	bcf	15,3	;volatile
  9835                           
  9836                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
  9837  13F4  120F               	bcf	15,4	;volatile
  9838                           
  9839                           ;LEDs.c: 57: switch (x) {
  9840  13F5  2C0C               	goto	l6338
  9841  13F6                     l770:	
  9842                           ;LEDs.c: 58: case 1:
  9843                           
  9844                           
  9845                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
  9846  13F6  0022               	movlb	2	; select bank2
  9847  13F7  140F               	bsf	15,0	;volatile
  9848                           
  9849                           ;LEDs.c: 60: break;
  9850  13F8  0008               	return
  9851  13F9                     l772:	
  9852                           ;LEDs.c: 61: case 2:
  9853                           
  9854                           
  9855                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
  9856  13F9  0022               	movlb	2	; select bank2
  9857  13FA  148F               	bsf	15,1	;volatile
  9858                           
  9859                           ;LEDs.c: 63: break;
  9860  13FB  0008               	return
  9861  13FC                     l773:	
  9862                           ;LEDs.c: 64: case 3:
  9863                           
  9864                           
  9865                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
  9866  13FC  0022               	movlb	2	; select bank2
  9867  13FD  150F               	bsf	15,2	;volatile
  9868                           
  9869                           ;LEDs.c: 66: break;
  9870  13FE  0008               	return
  9871  13FF                     l774:	
  9872                           ;LEDs.c: 67: case 4:
  9873                           
  9874                           
  9875                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
  9876  13FF  0022               	movlb	2	; select bank2
  9877  1400  158F               	bsf	15,3	;volatile
  9878                           
  9879                           ;LEDs.c: 69: break;
  9880  1401  0008               	return
  9881  1402                     l775:	
  9882                           ;LEDs.c: 70: case 5:
  9883                           
  9884                           
  9885                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
  9886  1402  0022               	movlb	2	; select bank2
  9887  1403  160F               	bsf	15,4	;volatile
  9888                           
  9889                           ;LEDs.c: 74: break;
  9890                           
  9891                           ;LEDs.c: 73: case 6:
  9892                           
  9893                           ;LEDs.c: 72: break;
  9894  1404  0008               	return
  9895  1405                     l777:	
  9896                           ;LEDs.c: 75: case 100:
  9897                           
  9898                           
  9899                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
  9900  1405  0022               	movlb	2	; select bank2
  9901  1406  140F               	bsf	15,0	;volatile
  9902                           
  9903                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
  9904  1407  148F               	bsf	15,1	;volatile
  9905                           
  9906                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
  9907  1408  150F               	bsf	15,2	;volatile
  9908                           
  9909                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
  9910  1409  158F               	bsf	15,3	;volatile
  9911                           
  9912                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
  9913  140A  160F               	bsf	15,4	;volatile
  9914                           
  9915                           ;LEDs.c: 82: }
  9916                           
  9917                           ;LEDs.c: 81: break;
  9918  140B  0008               	return
  9919  140C                     l6338:	
  9920                           
  9921                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9922                           ; Switch size 1, requested type "space"
  9923                           ; Number of cases is 1, Range of values is 0 to 0
  9924                           ; switch strategies available:
  9925                           ; Name         Instructions Cycles
  9926                           ; simple_byte            4     3 (average)
  9927                           ; direct_byte            8     6 (fixed)
  9928                           ; jumptable            260     6 (fixed)
  9929                           ;	Chosen strategy is simple_byte
  9930  140C  0021               	movlb	1	; select bank1
  9931  140D  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
  9932  140E  3A00               	xorlw	0	; case 0
  9933  140F  1903               	skipnz
  9934  1410  2C12               	goto	l7580
  9935  1411  2C29               	goto	l778
  9936  1412                     l7580:	
  9937                           
  9938                           ; Switch size 1, requested type "space"
  9939                           ; Number of cases is 7, Range of values is 1 to 100
  9940                           ; switch strategies available:
  9941                           ; Name         Instructions Cycles
  9942                           ; simple_byte           22    12 (average)
  9943                           ; direct_byte          209     9 (fixed)
  9944                           ; jumptable            263     9 (fixed)
  9945                           ;	Chosen strategy is simple_byte
  9946  1412  0820               	movf	set_leds_bottom@x^(0+128),w
  9947  1413  3A01               	xorlw	1	; case 1
  9948  1414  1903               	skipnz
  9949  1415  2BF6               	goto	l770
  9950  1416  3A03               	xorlw	3	; case 2
  9951  1417  1903               	skipnz
  9952  1418  2BF9               	goto	l772
  9953  1419  3A01               	xorlw	1	; case 3
  9954  141A  1903               	skipnz
  9955  141B  2BFC               	goto	l773
  9956  141C  3A07               	xorlw	7	; case 4
  9957  141D  1903               	skipnz
  9958  141E  2BFF               	goto	l774
  9959  141F  3A01               	xorlw	1	; case 5
  9960  1420  1903               	skipnz
  9961  1421  2C02               	goto	l775
  9962  1422  3A03               	xorlw	3	; case 6
  9963  1423  1903               	skipnz
  9964  1424  2C29               	goto	l778
  9965  1425  3A62               	xorlw	98	; case 100
  9966  1426  1903               	skipnz
  9967  1427  2C05               	goto	l777
  9968  1428  2C29               	goto	l778
  9969  1429                     l778:	
  9970  1429  0008               	return
  9971  142A                     __end_of_set_leds_bottom:	
  9972                           
  9973                           	psect	text24
  9974  1264                     __ptext24:	
  9975 ;; *************** function _FLASH_ReadWord *****************
  9976 ;; Defined at:
  9977 ;;		line 58 in file "memory.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;  flashAddr       2    0[BANK1 ] unsigned int 
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  2    0[BANK1 ] unsigned int 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9991 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9992 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9994 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9995 ;;Total ram usage:        3 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    3
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_ReadSavedSettings
 10002 ;;		_FLASH_WriteWord
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           
 10007                           ;psect for function _FLASH_ReadWord
 10008  1264                     _FLASH_ReadWord:	
 10009                           
 10010                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 10011                           
 10012                           ;incstack = 0
 10013                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 10014  1264  3000               	movlw	0
 10015  1265  1B8B               	btfsc	11,7	;volatile
 10016  1266  3001               	movlw	1
 10017  1267  0021               	movlb	1	; select bank1
 10018  1268  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 10019                           
 10020                           ;memory.c: 61: INTCONbits.GIE = 0;
 10021  1269  138B               	bcf	11,7	;volatile
 10022                           
 10023                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 10024  126A  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 10025  126B  0023               	movlb	3	; select bank3
 10026  126C  0091               	movwf	17	;volatile
 10027                           
 10028                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 10029  126D  0021               	movlb	1	; select bank1
 10030  126E  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 10031  126F  0023               	movlb	3	; select bank3
 10032  1270  0092               	movwf	18	;volatile
 10033                           
 10034                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 10035  1271  1315               	bcf	21,6	;volatile
 10036                           
 10037                           ;memory.c: 66: PMCON1bits.RD = 1;
 10038  1272  1415               	bsf	21,0	;volatile
 10039                           
 10040                           ;memory.c: 67: __nop();
 10041  1273  0000               	nop
 10042                           
 10043                           ;memory.c: 68: __nop();
 10044  1274  0000               	nop
 10045                           
 10046                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 10047  1275  0021               	movlb	1	; select bank1
 10048  1276  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 10049  1277  1C03               	skipc
 10050  1278  138B               	bcf	11,7	;volatile
 10051  1279  1803               	skipnc
 10052  127A  178B               	bsf	11,7	;volatile
 10053                           
 10054                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 10055  127B  0023               	movlb	3	; select bank3
 10056  127C  0814               	movf	20,w	;volatile
 10057  127D  0021               	movlb	1	; select bank1
 10058  127E  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 10059  127F  0023               	movlb	3	; select bank3
 10060  1280  0813               	movf	19,w	;volatile
 10061  1281  0021               	movlb	1	; select bank1
 10062  1282  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 10063  1283  0008               	return
 10064  1284                     __end_of_FLASH_ReadWord:	
 10065                           
 10066                           	psect	text25
 10067  12A6                     __ptext25:	
 10068 ;; *************** function _InitializeTaps *****************
 10069 ;; Defined at:
 10070 ;;		line 193 in file "user.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;		None
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;  itap            2    1[BANK1 ] int 
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      void 
 10077 ;; Registers used:
 10078 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10079 ;; Tracked objects:
 10080 ;;		On entry : 0/0
 10081 ;;		On exit  : 0/0
 10082 ;;		Unchanged: 0/0
 10083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10085 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10086 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10087 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10088 ;;Total ram usage:        3 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; Hardware stack levels required when called:    3
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		_main
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           
 10099                           ;psect for function _InitializeTaps
 10100  12A6                     _InitializeTaps:	
 10101                           
 10102                           ;user.c: 194: for (int itap = 0; itap < 12; itap++) {
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 10106  12A6  0021               	movlb	1	; select bank1
 10107  12A7  01A1               	clrf	InitializeTaps@itap^(0+128)
 10108  12A8  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 10109  12A9                     L11:	
 10110  12A9  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 10111  12AA  3A80               	xorlw	128
 10112  12AB  00A0               	movwf	??_InitializeTaps^(0+128)
 10113  12AC  3080               	movlw	128
 10114  12AD  0220               	subwf	??_InitializeTaps^(0+128),w
 10115  12AE  1D03               	skipz
 10116  12AF  2AB2               	goto	u6855
 10117  12B0  300C               	movlw	12
 10118  12B1  0221               	subwf	InitializeTaps@itap^(0+128),w
 10119  12B2                     u6855:	
 10120  12B2  1803               	btfsc	3,0
 10121  12B3  0008               	return
 10122                           
 10123                           ;user.c: 195: tap[itap] = 0;
 10124  12B4  0021               	movlb	1	; select bank1
 10125  12B5  0821               	movf	InitializeTaps@itap^(0+128),w
 10126  12B6  00A0               	movwf	??_InitializeTaps^(0+128)
 10127  12B7  3001               	movlw	1
 10128  12B8                     u6865:	
 10129  12B8  35A0               	lslf	??_InitializeTaps^(0+128),f
 10130  12B9  3EFF               	addlw	-1
 10131  12BA  1D03               	skipz
 10132  12BB  2AB8               	goto	u6865
 10133  12BC  3520               	lslf	??_InitializeTaps^(0+128),w
 10134  12BD  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 10135  12BE  0086               	movwf	6
 10136  12BF  3002               	movlw	2	; select bank5/6
 10137  12C0  0087               	movwf	7
 10138  12C1  3000               	movlw	0
 10139  12C2  3FC0               	movwi [0]fsr1
 10140  12C3  3000               	movlw	0
 10141  12C4  3FC1               	movwi [1]fsr1
 10142  12C5  3FC2               	movwi [2]fsr1
 10143  12C6  3FC3               	movwi [3]fsr1
 10144  12C7  3001               	movlw	1
 10145  12C8  07A1               	addwf	InitializeTaps@itap^(0+128),f
 10146  12C9  3000               	movlw	0
 10147  12CA  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 10148  12CB  2AA9               	goto	L11
 10149  12CC                     __end_of_InitializeTaps:	
 10150                           
 10151                           	psect	text26
 10152  1323                     __ptext26:	
 10153 ;; *************** function _InitApp *****************
 10154 ;; Defined at:
 10155 ;;		line 23 in file "user.c"
 10156 ;; Parameters:    Size  Location     Type
 10157 ;;		None
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  1    wreg      void 
 10162 ;; Registers used:
 10163 ;;		wreg, status,2, status,0, pclath, cstack
 10164 ;; Tracked objects:
 10165 ;;		On entry : 0/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10173 ;;Total ram usage:        0 bytes
 10174 ;; Hardware stack levels used:    1
 10175 ;; Hardware stack levels required when called:    5
 10176 ;; This function calls:
 10177 ;;		_init_adc
 10178 ;;		_init_pwm
 10179 ;; This function is called by:
 10180 ;;		_main
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _InitApp
 10186  1323                     _InitApp:	
 10187                           
 10188                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 10192  1323  0021               	movlb	1	; select bank1
 10193  1324  100D               	bcf	13,0	;volatile
 10194                           
 10195                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 10196  1325  108D               	bcf	13,1	;volatile
 10197                           
 10198                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 10199  1326  110D               	bcf	13,2	;volatile
 10200                           
 10201                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 10202  1327  118D               	bcf	13,3	;volatile
 10203                           
 10204                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 10205  1328  120D               	bcf	13,4	;volatile
 10206                           
 10207                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 10208  1329  128D               	bcf	13,5	;volatile
 10209                           
 10210                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 10211  132A  140E               	bsf	14,0	;volatile
 10212                           
 10213                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 10214  132B  120E               	bcf	14,4	;volatile
 10215                           
 10216                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 10217  132C  128E               	bcf	14,5	;volatile
 10218                           
 10219                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 10220  132D  100F               	bcf	15,0	;volatile
 10221                           
 10222                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 10223  132E  108F               	bcf	15,1	;volatile
 10224                           
 10225                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 10226  132F  110F               	bcf	15,2	;volatile
 10227                           
 10228                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 10229  1330  118F               	bcf	15,3	;volatile
 10230                           
 10231                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 10232  1331  120F               	bcf	15,4	;volatile
 10233                           
 10234                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 10235  1332  168F               	bsf	15,5	;volatile
 10236                           
 10237                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 10238  1333  170F               	bsf	15,6	;volatile
 10239                           
 10240                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 10241  1334  178F               	bsf	15,7	;volatile
 10242                           
 10243                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 10244  1335  1410               	bsf	16,0	;volatile
 10245                           
 10246                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 10247  1336  1490               	bsf	16,1	;volatile
 10248                           
 10249                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 10250  1337  0023               	movlb	3	; select bank3
 10251  1338  1010               	bcf	16,0	;volatile
 10252                           
 10253                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 10254  1339  1090               	bcf	16,1	;volatile
 10255                           
 10256                           ;user.c: 53: PORTEbits.RE0 = 0;
 10257  133A  0020               	movlb	0	; select bank0
 10258  133B  1010               	bcf	16,0	;volatile
 10259                           
 10260                           ;user.c: 54: PORTEbits.RE1 = 0;
 10261  133C  1090               	bcf	16,1	;volatile
 10262                           
 10263                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 10264  133D  0026               	movlb	6	; select bank6
 10265  133E  100C               	bcf	12,0	;volatile
 10266                           
 10267                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 10268  133F  108C               	bcf	12,1	;volatile
 10269                           
 10270                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 10271  1340  110C               	bcf	12,2	;volatile
 10272                           
 10273                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 10274  1341  118C               	bcf	12,3	;volatile
 10275                           
 10276                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 10277  1342  120C               	bcf	12,4	;volatile
 10278                           
 10279                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 10280  1343  128C               	bcf	12,5	;volatile
 10281                           
 10282                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 10283  1344  170C               	bsf	12,6	;volatile
 10284                           
 10285                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 10286  1345  0028               	movlb	8	; select bank8
 10287  1346  130C               	bcf	12,6	;volatile
 10288                           
 10289                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 10290  1347  0026               	movlb	6	; select bank6
 10291  1348  108D               	bcf	13,1	;volatile
 10292                           
 10293                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 10294  1349  110D               	bcf	13,2	;volatile
 10295                           
 10296                           ;user.c: 68: init_adc();
 10297  134A  3191  21F1  3193   	fcall	_init_adc
 10298                           
 10299                           ;user.c: 69: init_pwm();
 10300  134D  3195  2522         	fcall	_init_pwm
 10301                           
 10302                           ;user.c: 71: INTCONbits.GIE = 0b1;
 10303  134F  178B               	bsf	11,7	;volatile
 10304                           
 10305                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 10306  1350  168B               	bsf	11,5	;volatile
 10307                           
 10308                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 10309  1351  110B               	bcf	11,2	;volatile
 10310  1352  0008               	return
 10311  1353                     __end_of_InitApp:	
 10312                           
 10313                           	psect	text27
 10314  1522                     __ptext27:	
 10315 ;; *************** function _init_pwm *****************
 10316 ;; Defined at:
 10317 ;;		line 129 in file "user.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;		None
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      void 
 10324 ;; Registers used:
 10325 ;;		wreg, status,2, status,0, pclath, cstack
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10335 ;;Total ram usage:        0 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; Hardware stack levels required when called:    4
 10338 ;; This function calls:
 10339 ;;		_init_timer0
 10340 ;;		_init_timer2
 10341 ;; This function is called by:
 10342 ;;		_InitApp
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           
 10347                           ;psect for function _init_pwm
 10348  1522                     _init_pwm:	
 10349                           
 10350                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 10351                           
 10352                           ;incstack = 0
 10353                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 10354  1522  0022               	movlb	2	; select bank2
 10355  1523  101D               	bcf	29,0	;volatile
 10356                           
 10357                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 10358  1524  0021               	movlb	1	; select bank1
 10359  1525  110E               	bcf	14,2	;volatile
 10360                           
 10361                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 10362  1526  108E               	bcf	14,1	;volatile
 10363                           
 10364                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 10365  1527  0026               	movlb	6	; select bank6
 10366  1528  100D               	bcf	13,0	;volatile
 10367                           
 10368                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 10369  1529  118D               	bcf	13,3	;volatile
 10370                           
 10371                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 10372  152A  120D               	bcf	13,4	;volatile
 10373                           
 10374                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 10375  152B  0021               	movlb	1	; select bank1
 10376  152C  1310               	bcf	16,6	;volatile
 10377                           
 10378                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 10379  152D  1290               	bcf	16,5	;volatile
 10380                           
 10381                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 10382  152E  1210               	bcf	16,4	;volatile
 10383                           
 10384                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 10385  152F  1190               	bcf	16,3	;volatile
 10386                           
 10387                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 10388  1530  1110               	bcf	16,2	;volatile
 10389                           
 10390                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 10391  1531  300F               	movlw	15
 10392  1532  0025               	movlb	5	; select bank5
 10393  1533  0493               	iorwf	19,f	;volatile
 10394                           
 10395                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 10396  1534  300F               	movlw	15
 10397  1535  049A               	iorwf	26,f	;volatile
 10398                           
 10399                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 10400  1536  300F               	movlw	15
 10401  1537  0026               	movlb	6	; select bank6
 10402  1538  0493               	iorwf	19,f	;volatile
 10403                           
 10404                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 10405  1539  300F               	movlw	15
 10406  153A  049A               	iorwf	26,f	;volatile
 10407                           
 10408                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 10409  153B  300F               	movlw	15
 10410  153C  049E               	iorwf	30,f	;volatile
 10411                           
 10412                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 10413  153D  300F               	movlw	15
 10414  153E  002C               	movlb	12	; select bank12
 10415  153F  0493               	iorwf	19,f	;volatile
 10416                           
 10417                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 10418  1540  300F               	movlw	15
 10419  1541  0496               	iorwf	22,f	;volatile
 10420                           
 10421                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 10422  1542  300F               	movlw	15
 10423  1543  0499               	iorwf	25,f	;volatile
 10424                           
 10425                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 10426  1544  300F               	movlw	15
 10427  1545  049C               	iorwf	28,f	;volatile
 10428                           
 10429                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 10430  1546  300F               	movlw	15
 10431  1547  049F               	iorwf	31,f	;volatile
 10432                           
 10433                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 10434  1548  0025               	movlb	5	; select bank5
 10435  1549  019D               	clrf	29	;volatile
 10436                           
 10437                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 10438  154A  019E               	clrf	30	;volatile
 10439                           
 10440                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 10441  154B  019F               	clrf	31	;volatile
 10442                           
 10443                           ;user.c: 154: CCPR1 = 50;
 10444  154C  3000               	movlw	0
 10445  154D  0092               	movwf	18	;volatile
 10446  154E  3032               	movlw	50
 10447  154F  0091               	movwf	17	;volatile
 10448                           
 10449                           ;user.c: 155: CCPR2 = 100;
 10450  1550  3000               	movlw	0
 10451  1551  0099               	movwf	25	;volatile
 10452  1552  3064               	movlw	100
 10453  1553  0098               	movwf	24	;volatile
 10454                           
 10455                           ;user.c: 156: CCPR3 = 150;
 10456  1554  3000               	movlw	0
 10457  1555  0026               	movlb	6	; select bank6
 10458  1556  0092               	movwf	18	;volatile
 10459  1557  3096               	movlw	150
 10460  1558  0091               	movwf	17	;volatile
 10461                           
 10462                           ;user.c: 157: CCPR4 = 200;
 10463  1559  3000               	movlw	0
 10464  155A  0099               	movwf	25	;volatile
 10465  155B  30C8               	movlw	200
 10466  155C  0098               	movwf	24	;volatile
 10467                           
 10468                           ;user.c: 158: init_timer2();
 10469  155D  3191  21DF  3195   	fcall	_init_timer2
 10470                           
 10471                           ;user.c: 159: init_timer0();
 10472  1560  3191  21D8         	fcall	_init_timer0
 10473  1562  0008               	return
 10474  1563                     __end_of_init_pwm:	
 10475                           
 10476                           	psect	text28
 10477  11DF                     __ptext28:	
 10478 ;; *************** function _init_timer2 *****************
 10479 ;; Defined at:
 10480 ;;		line 162 in file "user.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;		None
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;		None
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  1    wreg      void 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10498 ;;Total ram usage:        0 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    3
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_init_pwm
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function _init_timer2
 10510  11DF                     _init_timer2:	
 10511                           
 10512                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 10513                           
 10514                           ;incstack = 0
 10515                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 10516  11DF  3087               	movlw	-121
 10517  11E0  0020               	movlb	0	; select bank0
 10518  11E1  059C               	andwf	28,f	;volatile
 10519                           
 10520                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 10521  11E2  30FC               	movlw	-4
 10522  11E3  059C               	andwf	28,f	;volatile
 10523                           
 10524                           ;user.c: 165: PR2 = 0xFF;
 10525  11E4  30FF               	movlw	255
 10526  11E5  009B               	movwf	27	;volatile
 10527                           
 10528                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 10529  11E6  151C               	bsf	28,2	;volatile
 10530  11E7  0008               	return
 10531  11E8                     __end_of_init_timer2:	
 10532                           
 10533                           	psect	text29
 10534  11D8                     __ptext29:	
 10535 ;; *************** function _init_timer0 *****************
 10536 ;; Defined at:
 10537 ;;		line 169 in file "user.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;		None
 10542 ;; Return value:  Size  Location     Type
 10543 ;;                  1    wreg      void 
 10544 ;; Registers used:
 10545 ;;		None
 10546 ;; Tracked objects:
 10547 ;;		On entry : 0/0
 10548 ;;		On exit  : 0/0
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10555 ;;Total ram usage:        0 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    3
 10558 ;; This function calls:
 10559 ;;		Nothing
 10560 ;; This function is called by:
 10561 ;;		_init_pwm
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           
 10566                           ;psect for function _init_timer0
 10567  11D8                     _init_timer0:	
 10568                           
 10569                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 10570                           
 10571                           ;incstack = 0
 10572                           ; Regs used in _init_timer0: []
 10573  11D8  0021               	movlb	1	; select bank1
 10574  11D9  1295               	bcf	21,5	;volatile
 10575                           
 10576                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 10577  11DA  1195               	bcf	21,3	;volatile
 10578                           
 10579                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 10580  11DB  1015               	bcf	21,0	;volatile
 10581                           
 10582                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 10583  11DC  1495               	bsf	21,1	;volatile
 10584                           
 10585                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 10586  11DD  1115               	bcf	21,2	;volatile
 10587  11DE  0008               	return
 10588  11DF                     __end_of_init_timer0:	
 10589                           
 10590                           	psect	text30
 10591  11F1                     __ptext30:	
 10592 ;; *************** function _init_adc *****************
 10593 ;; Defined at:
 10594 ;;		line 115 in file "user.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      void 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10612 ;;Total ram usage:        0 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    3
 10615 ;; This function calls:
 10616 ;;		Nothing
 10617 ;; This function is called by:
 10618 ;;		_InitApp
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function _init_adc
 10624  11F1                     _init_adc:	
 10625                           
 10626                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 10630  11F1  0021               	movlb	1	; select bank1
 10631  11F2  179E               	bsf	30,7	;volatile
 10632                           
 10633                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 10634  11F3  081E               	movf	30,w	;volatile
 10635  11F4  398F               	andlw	-113
 10636  11F5  3860               	iorlw	96
 10637  11F6  009E               	movwf	30	;volatile
 10638                           
 10639                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 10640  11F7  30FC               	movlw	-4
 10641  11F8  059E               	andwf	30,f	;volatile
 10642                           
 10643                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 10644  11F9  141D               	bsf	29,0	;volatile
 10645  11FA  0008               	return
 10646  11FB                     __end_of_init_adc:	
 10647                           
 10648                           	psect	text31
 10649  11D0                     __ptext31:	
 10650 ;; *************** function _ConfigureOscillator *****************
 10651 ;; Defined at:
 10652 ;;		line 18 in file "system.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;		None
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;		None
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      void 
 10659 ;; Registers used:
 10660 ;;		wreg, status,2, status,0
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10670 ;;Total ram usage:        0 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    3
 10673 ;; This function calls:
 10674 ;;		Nothing
 10675 ;; This function is called by:
 10676 ;;		_main
 10677 ;; This function uses a non-reentrant model
 10678 ;;
 10679                           
 10680                           
 10681                           ;psect for function _ConfigureOscillator
 10682  11D0                     _ConfigureOscillator:	
 10683                           
 10684                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 10685                           
 10686                           ;incstack = 0
 10687                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 10688  11D0  30FC               	movlw	-4
 10689  11D1  0021               	movlb	1	; select bank1
 10690  11D2  0599               	andwf	25,f	;volatile
 10691  11D3  0008               	return
 10692  11D4                     __end_of_ConfigureOscillator:	
 10693                           
 10694                           	psect	intentry
 10695  0004                     __pintentry:	
 10696 ;; *************** function _isr *****************
 10697 ;; Defined at:
 10698 ;;		line 27 in file "interrupts.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;		None
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  tmpSubDelay     2   35[BANK0 ] int 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10714 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10715 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10716 ;;Total ram usage:       11 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    2
 10719 ;; This function calls:
 10720 ;;		_USARTHandleRxInt
 10721 ;;		___awdiv
 10722 ;;		_modulation
 10723 ;;		i1_set_leds_top
 10724 ;; This function is called by:
 10725 ;;		Interrupt level 1
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729  0004                     _isr:	
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10733  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10734  0005  3180               	pagesel	$
 10735  0006  0020               	movlb	0	; select bank0
 10736  0007  087F               	movf	127,w
 10737  0008  00C2               	movwf	??_isr+8
 10738                           
 10739                           ;interrupts.c: 28: int tmpSubDelay;
 10740                           ;interrupts.c: 30: extern volatile long timer;
 10741                           ;interrupts.c: 31: extern volatile long sub_timer;
 10742                           ;interrupts.c: 32: extern volatile long tap_timer;
 10743                           ;interrupts.c: 33: extern signed int adjusted_pot_value;
 10744                           ;interrupts.c: 34: extern int mod_delay_time;
 10745                           ;interrupts.c: 36: extern volatile long baseline_delay_time;
 10746                           ;interrupts.c: 38: extern int top_push_state;
 10747                           ;interrupts.c: 39: extern uint8_t feedback_start;
 10748                           ;interrupts.c: 40: extern volatile long mod_timer;
 10749                           ;interrupts.c: 41: extern volatile long delay_time;
 10750  0009  0021               	movlb	1	; select bank1
 10751  000A  1E91               	btfss	17,5	;volatile
 10752  000B  2812               	goto	i1l5004
 10753  000C  0020               	movlb	0	; select bank0
 10754  000D  1E91               	btfss	17,5	;volatile
 10755  000E  2812               	goto	i1l5004
 10756                           
 10757                           ;interrupts.c: 50: USARTHandleRxInt();
 10758  000F  3195  25A6  3180   	fcall	_USARTHandleRxInt
 10759  0012                     i1l5004:	
 10760                           
 10761                           ;interrupts.c: 74: }
 10762                           ;interrupts.c: 77: if (INTCONbits.TMR0IF == 1) {
 10763  0012  1D0B               	btfss	11,2	;volatile
 10764  0013  2928               	goto	i1l144
 10765                           
 10766                           ;interrupts.c: 78: tmpSubDelay = delay_time;
 10767  0014  0020               	movlb	0	; select bank0
 10768  0015  084A               	movf	_delay_time+1,w	;volatile
 10769  0016  00C4               	movwf	isr@tmpSubDelay+1
 10770  0017  0849               	movf	_delay_time,w	;volatile
 10771  0018  00C3               	movwf	isr@tmpSubDelay
 10772                           
 10773                           ;interrupts.c: 79: timer = timer + 1;
 10774  0019  3001               	movlw	1
 10775  001A  00BA               	movwf	??_isr
 10776  001B  3000               	movlw	0
 10777  001C  00BB               	movwf	??_isr+1
 10778  001D  3000               	movlw	0
 10779  001E  00BC               	movwf	??_isr+2
 10780  001F  3000               	movlw	0
 10781  0020  00BD               	movwf	??_isr+3
 10782  0021  0860               	movf	_timer,w	;volatile
 10783  0022  07BA               	addwf	??_isr,f
 10784  0023  0861               	movf	_timer+1,w	;volatile
 10785  0024  3DBB               	addwfc	??_isr+1,f
 10786  0025  0862               	movf	_timer+2,w	;volatile
 10787  0026  3DBC               	addwfc	??_isr+2,f
 10788  0027  0863               	movf	_timer+3,w	;volatile
 10789  0028  3DBD               	addwfc	??_isr+3,f
 10790  0029  083D               	movf	??_isr+3,w
 10791  002A  00E3               	movwf	_timer+3	;volatile
 10792  002B  083C               	movf	??_isr+2,w
 10793  002C  00E2               	movwf	_timer+2	;volatile
 10794  002D  083B               	movf	??_isr+1,w
 10795  002E  00E1               	movwf	_timer+1	;volatile
 10796  002F  083A               	movf	??_isr,w
 10797  0030  00E0               	movwf	_timer	;volatile
 10798                           
 10799                           ;interrupts.c: 80: sub_timer = sub_timer + 1;
 10800  0031  3001               	movlw	1
 10801  0032  00BA               	movwf	??_isr
 10802  0033  3000               	movlw	0
 10803  0034  00BB               	movwf	??_isr+1
 10804  0035  3000               	movlw	0
 10805  0036  00BC               	movwf	??_isr+2
 10806  0037  3000               	movlw	0
 10807  0038  00BD               	movwf	??_isr+3
 10808  0039  0858               	movf	_sub_timer,w	;volatile
 10809  003A  07BA               	addwf	??_isr,f
 10810  003B  0859               	movf	_sub_timer+1,w	;volatile
 10811  003C  3DBB               	addwfc	??_isr+1,f
 10812  003D  085A               	movf	_sub_timer+2,w	;volatile
 10813  003E  3DBC               	addwfc	??_isr+2,f
 10814  003F  085B               	movf	_sub_timer+3,w	;volatile
 10815  0040  3DBD               	addwfc	??_isr+3,f
 10816  0041  083D               	movf	??_isr+3,w
 10817  0042  00DB               	movwf	_sub_timer+3	;volatile
 10818  0043  083C               	movf	??_isr+2,w
 10819  0044  00DA               	movwf	_sub_timer+2	;volatile
 10820  0045  083B               	movf	??_isr+1,w
 10821  0046  00D9               	movwf	_sub_timer+1	;volatile
 10822  0047  083A               	movf	??_isr,w
 10823  0048  00D8               	movwf	_sub_timer	;volatile
 10824                           
 10825                           ;interrupts.c: 81: tap_timer = tap_timer + 1;
 10826  0049  3001               	movlw	1
 10827  004A  00BA               	movwf	??_isr
 10828  004B  3000               	movlw	0
 10829  004C  00BB               	movwf	??_isr+1
 10830  004D  3000               	movlw	0
 10831  004E  00BC               	movwf	??_isr+2
 10832  004F  3000               	movlw	0
 10833  0050  00BD               	movwf	??_isr+3
 10834  0051  085C               	movf	_tap_timer,w	;volatile
 10835  0052  07BA               	addwf	??_isr,f
 10836  0053  085D               	movf	_tap_timer+1,w	;volatile
 10837  0054  3DBB               	addwfc	??_isr+1,f
 10838  0055  085E               	movf	_tap_timer+2,w	;volatile
 10839  0056  3DBC               	addwfc	??_isr+2,f
 10840  0057  085F               	movf	_tap_timer+3,w	;volatile
 10841  0058  3DBD               	addwfc	??_isr+3,f
 10842  0059  083D               	movf	??_isr+3,w
 10843  005A  00DF               	movwf	_tap_timer+3	;volatile
 10844  005B  083C               	movf	??_isr+2,w
 10845  005C  00DE               	movwf	_tap_timer+2	;volatile
 10846  005D  083B               	movf	??_isr+1,w
 10847  005E  00DD               	movwf	_tap_timer+1	;volatile
 10848  005F  083A               	movf	??_isr,w
 10849  0060  00DC               	movwf	_tap_timer	;volatile
 10850                           
 10851                           ;interrupts.c: 82: mod_timer = mod_timer + 1;
 10852  0061  3001               	movlw	1
 10853  0062  00BA               	movwf	??_isr
 10854  0063  3000               	movlw	0
 10855  0064  00BB               	movwf	??_isr+1
 10856  0065  3000               	movlw	0
 10857  0066  00BC               	movwf	??_isr+2
 10858  0067  3000               	movlw	0
 10859  0068  00BD               	movwf	??_isr+3
 10860  0069  0023               	movlb	3	; select bank3
 10861  006A  082D               	movf	_mod_timer^(0+384),w	;volatile
 10862  006B  0020               	movlb	0	; select bank0
 10863  006C  07BA               	addwf	??_isr,f
 10864  006D  0023               	movlb	3	; select bank3
 10865  006E  082E               	movf	(_mod_timer+1)^(0+384),w	;volatile
 10866  006F  0020               	movlb	0	; select bank0
 10867  0070  3DBB               	addwfc	??_isr+1,f
 10868  0071  0023               	movlb	3	; select bank3
 10869  0072  082F               	movf	(_mod_timer+2)^(0+384),w	;volatile
 10870  0073  0020               	movlb	0	; select bank0
 10871  0074  3DBC               	addwfc	??_isr+2,f
 10872  0075  0023               	movlb	3	; select bank3
 10873  0076  0830               	movf	(_mod_timer+3)^(0+384),w	;volatile
 10874  0077  0020               	movlb	0	; select bank0
 10875  0078  3DBD               	addwfc	??_isr+3,f
 10876  0079  083D               	movf	??_isr+3,w
 10877  007A  0023               	movlb	3	; select bank3
 10878  007B  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 10879  007C  0020               	movlb	0	; select bank0
 10880  007D  083C               	movf	??_isr+2,w
 10881  007E  0023               	movlb	3	; select bank3
 10882  007F  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 10883  0080  0020               	movlb	0	; select bank0
 10884  0081  083B               	movf	??_isr+1,w
 10885  0082  0023               	movlb	3	; select bank3
 10886  0083  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 10887  0084  0020               	movlb	0	; select bank0
 10888  0085  083A               	movf	??_isr,w
 10889  0086  0023               	movlb	3	; select bank3
 10890  0087  00AD               	movwf	_mod_timer^(0+384)	;volatile
 10891                           
 10892                           ;interrupts.c: 83: double_timer++;
 10893  0088  3001               	movlw	1
 10894  0089  07A5               	addwf	_double_timer^(0+384),f	;volatile
 10895  008A  3000               	movlw	0
 10896  008B  3DA6               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 10897  008C  3000               	movlw	0
 10898  008D  3DA7               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 10899  008E  3000               	movlw	0
 10900  008F  3DA8               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 10901                           
 10902                           ;interrupts.c: 84: test_timer++;
 10903  0090  3001               	movlw	1
 10904  0091  07B5               	addwf	_test_timer^(0+384),f	;volatile
 10905  0092  3000               	movlw	0
 10906  0093  3DB6               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 10907  0094  3000               	movlw	0
 10908  0095  3DB7               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 10909  0096  3000               	movlw	0
 10910  0097  3DB8               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 10911                           
 10912                           ;interrupts.c: 85: if (feedback_start == 1) {
 10913  0098  0022               	movlb	2	; select bank2
 10914  0099  035B               	decf	_feedback_start^(0+256),w
 10915  009A  1D03               	btfss	3,2
 10916  009B  28B2               	goto	i1l5014
 10917                           
 10918                           ;interrupts.c: 86: feedback_timer++;
 10919  009C  3001               	movlw	1
 10920  009D  07D3               	addwf	_feedback_timer^(0+256),f	;volatile
 10921  009E  3000               	movlw	0
 10922  009F  3DD4               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 10923                           
 10924                           ;interrupts.c: 87: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 10925  00A0  0854               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 10926  00A1  0020               	movlb	0	; select bank0
 10927  00A2  0250               	subwf	_long_press_limit+1,w
 10928  00A3  1D03               	skipz
 10929  00A4  28A9               	goto	u436_25
 10930  00A5  0022               	movlb	2	; select bank2
 10931  00A6  0853               	movf	_feedback_timer^(0+256),w	;volatile
 10932  00A7  0020               	movlb	0	; select bank0
 10933  00A8  024F               	subwf	_long_press_limit,w
 10934  00A9                     u436_25:	
 10935  00A9  1803               	skipnc
 10936  00AA  28B2               	goto	i1l5014
 10937  00AB  0850               	movf	_long_press_limit+1,w
 10938  00AC  0022               	movlb	2	; select bank2
 10939  00AD  00D4               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 10940  00AE  0020               	movlb	0	; select bank0
 10941  00AF  084F               	movf	_long_press_limit,w
 10942  00B0  0022               	movlb	2	; select bank2
 10943  00B1  00D3               	movwf	_feedback_timer^(0+256)	;volatile
 10944  00B2                     i1l5014:	
 10945                           
 10946                           ;interrupts.c: 88: }
 10947                           ;interrupts.c: 89: if (longTap_start == 1) {
 10948  00B2  0022               	movlb	2	; select bank2
 10949  00B3  035C               	decf	_longTap_start^(0+256),w
 10950  00B4  1D03               	btfss	3,2
 10951  00B5  28CC               	goto	i1l5020
 10952                           
 10953                           ;interrupts.c: 90: longTap_timer++;
 10954  00B6  3001               	movlw	1
 10955  00B7  07D5               	addwf	_longTap_timer^(0+256),f	;volatile
 10956  00B8  3000               	movlw	0
 10957  00B9  3DD6               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 10958                           
 10959                           ;interrupts.c: 91: if (longTap_timer > long_press_limit) {
 10960  00BA  0856               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 10961  00BB  0020               	movlb	0	; select bank0
 10962  00BC  0250               	subwf	_long_press_limit+1,w
 10963  00BD  1D03               	skipz
 10964  00BE  28C3               	goto	u438_25
 10965  00BF  0022               	movlb	2	; select bank2
 10966  00C0  0855               	movf	_longTap_timer^(0+256),w	;volatile
 10967  00C1  0020               	movlb	0	; select bank0
 10968  00C2  024F               	subwf	_long_press_limit,w
 10969  00C3                     u438_25:	
 10970  00C3  1803               	skipnc
 10971  00C4  28CC               	goto	i1l5020
 10972                           
 10973                           ;interrupts.c: 92: longTap_timer = long_press_limit;
 10974  00C5  0850               	movf	_long_press_limit+1,w
 10975  00C6  0022               	movlb	2	; select bank2
 10976  00C7  00D6               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 10977  00C8  0020               	movlb	0	; select bank0
 10978  00C9  084F               	movf	_long_press_limit,w
 10979  00CA  0022               	movlb	2	; select bank2
 10980  00CB  00D5               	movwf	_longTap_timer^(0+256)	;volatile
 10981  00CC                     i1l5020:	
 10982                           
 10983                           ;interrupts.c: 93: }
 10984                           ;interrupts.c: 94: }
 10985                           ;interrupts.c: 95: INTCONbits.TMR0IF = 0;
 10986  00CC  110B               	bcf	11,2	;volatile
 10987                           
 10988                           ;interrupts.c: 97: if (adjust_sub_delay == 1) {
 10989  00CD  0023               	movlb	3	; select bank3
 10990  00CE  0339               	decf	_adjust_sub_delay^(0+384),w
 10991  00CF  043A               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 10992  00D0  1D03               	btfss	3,2
 10993  00D1  2928               	goto	i1l144
 10994                           
 10995                           ;interrupts.c: 98: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 10996  00D2  0020               	movlb	0	; select bank0
 10997  00D3  085B               	movf	_sub_timer+3,w	;volatile
 10998  00D4  3A80               	xorlw	128
 10999  00D5  00BA               	movwf	??_isr
 11000  00D6  084C               	movf	_delay_time+3,w	;volatile
 11001  00D7  3A80               	xorlw	128
 11002  00D8  023A               	subwf	??_isr,w
 11003  00D9  1D03               	skipz
 11004  00DA  28E5               	goto	u440_23
 11005  00DB  084B               	movf	_delay_time+2,w	;volatile
 11006  00DC  025A               	subwf	_sub_timer+2,w	;volatile
 11007  00DD  1D03               	skipz
 11008  00DE  28E5               	goto	u440_23
 11009  00DF  084A               	movf	_delay_time+1,w	;volatile
 11010  00E0  0259               	subwf	_sub_timer+1,w	;volatile
 11011  00E1  1D03               	skipz
 11012  00E2  28E5               	goto	u440_23
 11013  00E3  0849               	movf	_delay_time,w	;volatile
 11014  00E4  0258               	subwf	_sub_timer,w	;volatile
 11015  00E5                     u440_23:	
 11016  00E5  1C03               	skipc
 11017  00E6  2928               	goto	i1l144
 11018  00E7  0845               	movf	_baseline_delay_time,w	;volatile
 11019  00E8  00BA               	movwf	??_isr
 11020  00E9  0846               	movf	_baseline_delay_time+1,w	;volatile
 11021  00EA  00BB               	movwf	??_isr+1
 11022  00EB  0847               	movf	_baseline_delay_time+2,w	;volatile
 11023  00EC  00BC               	movwf	??_isr+2
 11024  00ED  0848               	movf	_baseline_delay_time+3,w	;volatile
 11025  00EE  00BD               	movwf	??_isr+3
 11026  00EF  0960               	comf	_timer,w	;volatile
 11027  00F0  00BE               	movwf	??_isr+4
 11028  00F1  0961               	comf	_timer+1,w	;volatile
 11029  00F2  00BF               	movwf	??_isr+5
 11030  00F3  0962               	comf	_timer+2,w	;volatile
 11031  00F4  00C0               	movwf	??_isr+6
 11032  00F5  0963               	comf	_timer+3,w	;volatile
 11033  00F6  00C1               	movwf	??_isr+7
 11034  00F7  0ABE               	incf	??_isr+4,f
 11035  00F8  1903               	skipnz
 11036  00F9  0ABF               	incf	??_isr+5,f
 11037  00FA  1903               	skipnz
 11038  00FB  0AC0               	incf	??_isr+6,f
 11039  00FC  1903               	skipnz
 11040  00FD  0AC1               	incf	??_isr+7,f
 11041  00FE  083E               	movf	??_isr+4,w
 11042  00FF  07BA               	addwf	??_isr,f
 11043  0100  083F               	movf	??_isr+5,w
 11044  0101  3DBB               	addwfc	??_isr+1,f
 11045  0102  0840               	movf	??_isr+6,w
 11046  0103  3DBC               	addwfc	??_isr+2,f
 11047  0104  0841               	movf	??_isr+7,w
 11048  0105  3DBD               	addwfc	??_isr+3,f
 11049  0106  1BBD               	btfsc	??_isr+3,7
 11050  0107  2915               	goto	i1l5028
 11051  0108  083D               	movf	??_isr+3,w
 11052  0109  1D03               	btfss	3,2
 11053  010A  2928               	goto	i1l144
 11054  010B  083C               	movf	??_isr+2,w
 11055  010C  1D03               	btfss	3,2
 11056  010D  2928               	goto	i1l144
 11057  010E  083B               	movf	??_isr+1,w
 11058  010F  1D03               	btfss	3,2
 11059  0110  2928               	goto	i1l144
 11060  0111  3004               	movlw	4
 11061  0112  023A               	subwf	??_isr,w
 11062  0113  1803               	btfsc	3,0
 11063  0114  2928               	goto	i1l144
 11064  0115                     i1l5028:	
 11065                           
 11066                           ;interrupts.c: 99: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 11067  0115  0960               	comf	_timer,w	;volatile
 11068  0116  00BA               	movwf	??_isr
 11069  0117  0961               	comf	_timer+1,w	;volatile
 11070  0118  00BB               	movwf	??_isr+1
 11071  0119  0ABA               	incf	??_isr,f
 11072  011A  1903               	skipnz
 11073  011B  0ABB               	incf	??_isr+1,f
 11074  011C  0845               	movf	_baseline_delay_time,w	;volatile
 11075  011D  073A               	addwf	??_isr,w
 11076  011E  00BC               	movwf	??_isr+2
 11077  011F  0846               	movf	_baseline_delay_time+1,w	;volatile
 11078  0120  3D3B               	addwfc	??_isr+1,w
 11079  0121  00BD               	movwf	??_isr+3
 11080  0122  0858               	movf	_sub_timer,w	;volatile
 11081  0123  073C               	addwf	??_isr+2,w
 11082  0124  00C3               	movwf	isr@tmpSubDelay
 11083  0125  0859               	movf	_sub_timer+1,w	;volatile
 11084  0126  3D3D               	addwfc	??_isr+3,w
 11085  0127  00C4               	movwf	isr@tmpSubDelay+1
 11086  0128                     i1l144:	
 11087                           
 11088                           ;interrupts.c: 100: }
 11089                           ;interrupts.c: 101: }
 11090                           ;interrupts.c: 102: }
 11091                           ;interrupts.c: 115: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) 
      +                          {
 11092  0128  0020               	movlb	0	; select bank0
 11093  0129  0854               	movf	_longTap_state,w	;volatile
 11094  012A  1D03               	btfss	3,2
 11095  012B  2988               	goto	i1l5054
 11096  012C  0864               	movf	_doubleTap_state,w	;volatile
 11097  012D  1D03               	btfss	3,2
 11098  012E  2988               	goto	i1l5054
 11099  012F  0866               	movf	_presetSaveMode,w
 11100  0130  1D03               	btfss	3,2
 11101  0131  2988               	goto	i1l5054
 11102                           
 11103                           ;interrupts.c: 118: if (timer >= baseline_delay_time) {
 11104  0132  0863               	movf	_timer+3,w	;volatile
 11105  0133  3A80               	xorlw	128
 11106  0134  00BA               	movwf	??_isr
 11107  0135  0848               	movf	_baseline_delay_time+3,w	;volatile
 11108  0136  3A80               	xorlw	128
 11109  0137  023A               	subwf	??_isr,w
 11110  0138  1D03               	skipz
 11111  0139  2944               	goto	u445_23
 11112  013A  0847               	movf	_baseline_delay_time+2,w	;volatile
 11113  013B  0262               	subwf	_timer+2,w	;volatile
 11114  013C  1D03               	skipz
 11115  013D  2944               	goto	u445_23
 11116  013E  0846               	movf	_baseline_delay_time+1,w	;volatile
 11117  013F  0261               	subwf	_timer+1,w	;volatile
 11118  0140  1D03               	skipz
 11119  0141  2944               	goto	u445_23
 11120  0142  0845               	movf	_baseline_delay_time,w	;volatile
 11121  0143  0260               	subwf	_timer,w	;volatile
 11122  0144                     u445_23:	
 11123  0144  1C03               	skipc
 11124  0145  2976               	goto	i1l5050
 11125                           
 11126                           ;interrupts.c: 121: LATBbits.LATB4 = 1;
 11127  0146  0022               	movlb	2	; select bank2
 11128  0147  160D               	bsf	13,4	;volatile
 11129                           
 11130                           ;interrupts.c: 123: timer = 0;
 11131  0148  3000               	movlw	0
 11132  0149  0020               	movlb	0	; select bank0
 11133  014A  00E3               	movwf	_timer+3	;volatile
 11134  014B  3000               	movlw	0
 11135  014C  00E2               	movwf	_timer+2	;volatile
 11136  014D  3000               	movlw	0
 11137  014E  00E1               	movwf	_timer+1	;volatile
 11138  014F  3000               	movlw	0
 11139  0150  00E0               	movwf	_timer	;volatile
 11140                           
 11141                           ;interrupts.c: 124: if (reset_sub_delay == 1) {
 11142  0151  0023               	movlb	3	; select bank3
 11143  0152  0355               	decf	_reset_sub_delay^(0+384),w
 11144  0153  0456               	iorwf	(_reset_sub_delay+1)^(0+384),w
 11145  0154  1D03               	btfss	3,2
 11146  0155  2976               	goto	i1l5050
 11147                           
 11148                           ;interrupts.c: 126: CCPR1 = delay_counter;
 11149  0156  0022               	movlb	2	; select bank2
 11150  0157  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
 11151  0158  0025               	movlb	5	; select bank5
 11152  0159  0092               	movwf	18	;volatile
 11153  015A  0022               	movlb	2	; select bank2
 11154  015B  0851               	movf	_delay_counter^(0+256),w	;volatile
 11155  015C  0025               	movlb	5	; select bank5
 11156  015D  0091               	movwf	17	;volatile
 11157                           
 11158                           ;interrupts.c: 129: mod_counter = 0;
 11159  015E  0022               	movlb	2	; select bank2
 11160  015F  01D7               	clrf	_mod_counter^(0+256)
 11161  0160  01D8               	clrf	(_mod_counter+1)^(0+256)
 11162                           
 11163                           ;interrupts.c: 130: mod_timer = mod_delay_time;
 11164  0161  0023               	movlb	3	; select bank3
 11165  0162  0863               	movf	_mod_delay_time^(0+384),w
 11166  0163  00AD               	movwf	_mod_timer^(0+384)	;volatile
 11167  0164  0864               	movf	(_mod_delay_time+1)^(0+384),w
 11168  0165  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 11169  0166  0D89               	rlf	9,f
 11170  0167  3B89               	subwfb	9,f
 11171  0168  0989               	comf	9,f
 11172  0169  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 11173  016A  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 11174                           
 11175                           ;interrupts.c: 132: reset_sub_delay = 0;
 11176  016B  01D5               	clrf	_reset_sub_delay^(0+384)
 11177  016C  01D6               	clrf	(_reset_sub_delay+1)^(0+384)
 11178                           
 11179                           ;interrupts.c: 133: sub_timer = delay_time;
 11180  016D  0020               	movlb	0	; select bank0
 11181  016E  084C               	movf	_delay_time+3,w	;volatile
 11182  016F  00DB               	movwf	_sub_timer+3	;volatile
 11183  0170  084B               	movf	_delay_time+2,w	;volatile
 11184  0171  00DA               	movwf	_sub_timer+2	;volatile
 11185  0172  084A               	movf	_delay_time+1,w	;volatile
 11186  0173  00D9               	movwf	_sub_timer+1	;volatile
 11187  0174  0849               	movf	_delay_time,w	;volatile
 11188  0175  00D8               	movwf	_sub_timer	;volatile
 11189  0176                     i1l5050:	
 11190                           
 11191                           ;interrupts.c: 134: }
 11192                           ;interrupts.c: 135: }
 11193                           ;interrupts.c: 137: if (timer >= 30) {
 11194  0176  0020               	movlb	0	; select bank0
 11195  0177  1BE3               	btfsc	_timer+3,7	;volatile
 11196  0178  2988               	goto	i1l5054
 11197  0179  0863               	movf	_timer+3,w	;volatile
 11198  017A  1D03               	btfss	3,2
 11199  017B  2986               	goto	i1l5052
 11200  017C  0862               	movf	_timer+2,w	;volatile
 11201  017D  1D03               	btfss	3,2
 11202  017E  2986               	goto	i1l5052
 11203  017F  0861               	movf	_timer+1,w	;volatile
 11204  0180  1D03               	btfss	3,2
 11205  0181  2986               	goto	i1l5052
 11206  0182  301E               	movlw	30
 11207  0183  0260               	subwf	_timer,w	;volatile
 11208  0184  1C03               	btfss	3,0
 11209  0185  2988               	goto	i1l5054
 11210  0186                     i1l5052:	
 11211                           
 11212                           ;interrupts.c: 139: LATBbits.LATB4 = 0;
 11213  0186  0022               	movlb	2	; select bank2
 11214  0187  120D               	bcf	13,4	;volatile
 11215  0188                     i1l5054:	
 11216                           
 11217                           ;interrupts.c: 141: }
 11218                           ;interrupts.c: 142: }
 11219                           ;interrupts.c: 145: if (presetSaveMode == 1) {
 11220  0188  0020               	movlb	0	; select bank0
 11221  0189  0366               	decf	_presetSaveMode,w
 11222  018A  1D03               	btfss	3,2
 11223  018B  29B8               	goto	i1l5066
 11224                           
 11225                           ;interrupts.c: 148: if (double_timer >= 250) {
 11226  018C  0023               	movlb	3	; select bank3
 11227  018D  1BA8               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 11228  018E  29A7               	goto	i1l5062
 11229  018F  0828               	movf	(_double_timer+3)^(0+384),w	;volatile
 11230  0190  1D03               	btfss	3,2
 11231  0191  299C               	goto	i1l5058
 11232  0192  0827               	movf	(_double_timer+2)^(0+384),w	;volatile
 11233  0193  1D03               	btfss	3,2
 11234  0194  299C               	goto	i1l5058
 11235  0195  0826               	movf	(_double_timer+1)^(0+384),w	;volatile
 11236  0196  1D03               	btfss	3,2
 11237  0197  299C               	goto	i1l5058
 11238  0198  30FA               	movlw	250
 11239  0199  0225               	subwf	_double_timer^(0+384),w	;volatile
 11240  019A  1C03               	btfss	3,0
 11241  019B  29A7               	goto	i1l5062
 11242  019C                     i1l5058:	
 11243                           
 11244                           ;interrupts.c: 149: LATBbits.LATB0 = 1;
 11245  019C  0022               	movlb	2	; select bank2
 11246  019D  140D               	bsf	13,0	;volatile
 11247                           
 11248                           ;interrupts.c: 150: double_timer = 0;
 11249  019E  3000               	movlw	0
 11250  019F  0023               	movlb	3	; select bank3
 11251  01A0  00A8               	movwf	(_double_timer+3)^(0+384)	;volatile
 11252  01A1  3000               	movlw	0
 11253  01A2  00A7               	movwf	(_double_timer+2)^(0+384)	;volatile
 11254  01A3  3000               	movlw	0
 11255  01A4  00A6               	movwf	(_double_timer+1)^(0+384)	;volatile
 11256  01A5  3000               	movlw	0
 11257  01A6  00A5               	movwf	_double_timer^(0+384)	;volatile
 11258  01A7                     i1l5062:	
 11259                           
 11260                           ;interrupts.c: 152: }
 11261                           ;interrupts.c: 153: if (double_timer >= 30) {
 11262  01A7  1BA8               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 11263  01A8  29B8               	goto	i1l5066
 11264  01A9  0828               	movf	(_double_timer+3)^(0+384),w	;volatile
 11265  01AA  1D03               	btfss	3,2
 11266  01AB  29B6               	goto	i1l5064
 11267  01AC  0827               	movf	(_double_timer+2)^(0+384),w	;volatile
 11268  01AD  1D03               	btfss	3,2
 11269  01AE  29B6               	goto	i1l5064
 11270  01AF  0826               	movf	(_double_timer+1)^(0+384),w	;volatile
 11271  01B0  1D03               	btfss	3,2
 11272  01B1  29B6               	goto	i1l5064
 11273  01B2  301E               	movlw	30
 11274  01B3  0225               	subwf	_double_timer^(0+384),w	;volatile
 11275  01B4  1C03               	btfss	3,0
 11276  01B5  29B8               	goto	i1l5066
 11277  01B6                     i1l5064:	
 11278                           
 11279                           ;interrupts.c: 155: LATBbits.LATB0 = 0;
 11280  01B6  0022               	movlb	2	; select bank2
 11281  01B7  100D               	bcf	13,0	;volatile
 11282  01B8                     i1l5066:	
 11283                           
 11284                           ;interrupts.c: 156: }
 11285                           ;interrupts.c: 157: }
 11286                           ;interrupts.c: 159: if (presetSaveMode < 1 && mode2_state == 0) {
 11287  01B8  0020               	movlb	0	; select bank0
 11288  01B9  0866               	movf	_presetSaveMode,w
 11289  01BA  1D03               	btfss	3,2
 11290  01BB  2A13               	goto	i1l5086
 11291  01BC  0865               	movf	_mode2_state,w
 11292  01BD  1D03               	btfss	3,2
 11293  01BE  2A13               	goto	i1l5086
 11294                           
 11295                           ;interrupts.c: 160: if (sub_timer >= tmpSubDelay ) {
 11296  01BF  0843               	movf	isr@tmpSubDelay,w
 11297  01C0  00BA               	movwf	??_isr
 11298  01C1  0844               	movf	isr@tmpSubDelay+1,w
 11299  01C2  00BB               	movwf	??_isr+1
 11300  01C3  3000               	movlw	0
 11301  01C4  1BBB               	btfsc	??_isr+1,7
 11302  01C5  30FF               	movlw	255
 11303  01C6  00BC               	movwf	??_isr+2
 11304  01C7  00BD               	movwf	??_isr+3
 11305  01C8  085B               	movf	_sub_timer+3,w	;volatile
 11306  01C9  3A80               	xorlw	128
 11307  01CA  00BE               	movwf	??_isr+4
 11308  01CB  083D               	movf	??_isr+3,w
 11309  01CC  3A80               	xorlw	128
 11310  01CD  023E               	subwf	??_isr+4,w
 11311  01CE  1D03               	skipz
 11312  01CF  29DA               	goto	u453_23
 11313  01D0  083C               	movf	??_isr+2,w
 11314  01D1  025A               	subwf	_sub_timer+2,w	;volatile
 11315  01D2  1D03               	skipz
 11316  01D3  29DA               	goto	u453_23
 11317  01D4  083B               	movf	??_isr+1,w
 11318  01D5  0259               	subwf	_sub_timer+1,w	;volatile
 11319  01D6  1D03               	skipz
 11320  01D7  29DA               	goto	u453_23
 11321  01D8  083A               	movf	??_isr,w
 11322  01D9  0258               	subwf	_sub_timer,w	;volatile
 11323  01DA                     u453_23:	
 11324  01DA  1C03               	skipc
 11325  01DB  29F7               	goto	i1l5080
 11326                           
 11327                           ;interrupts.c: 161: if (suspend_blink == 0) {
 11328  01DC  0867               	movf	_suspend_blink,w	;volatile
 11329  01DD  1D03               	btfss	3,2
 11330  01DE  29EA               	goto	i1l5076
 11331                           
 11332                           ;interrupts.c: 162: set_leds_top(top_push_state, 1);
 11333  01DF  0852               	movf	_top_push_state+1,w
 11334  01E0  00F1               	movwf	i1set_leds_top@x+1
 11335  01E1  0851               	movf	_top_push_state,w
 11336  01E2  00F0               	movwf	i1set_leds_top@x
 11337  01E3  3001               	movlw	1
 11338  01E4  00F2               	movwf	i1set_leds_top@ledState
 11339  01E5  3000               	movlw	0
 11340  01E6  00F3               	movwf	i1set_leds_top@ledState+1
 11341  01E7  3195  25EE  3180   	fcall	i1_set_leds_top
 11342  01EA                     i1l5076:	
 11343                           
 11344                           ;interrupts.c: 163: }
 11345                           ;interrupts.c: 164: tmpSubDelay = delay_time;
 11346  01EA  0020               	movlb	0	; select bank0
 11347  01EB  084A               	movf	_delay_time+1,w	;volatile
 11348  01EC  00C4               	movwf	isr@tmpSubDelay+1
 11349  01ED  0849               	movf	_delay_time,w	;volatile
 11350  01EE  00C3               	movwf	isr@tmpSubDelay
 11351                           
 11352                           ;interrupts.c: 165: sub_timer = 0;
 11353  01EF  3000               	movlw	0
 11354  01F0  00DB               	movwf	_sub_timer+3	;volatile
 11355  01F1  3000               	movlw	0
 11356  01F2  00DA               	movwf	_sub_timer+2	;volatile
 11357  01F3  3000               	movlw	0
 11358  01F4  00D9               	movwf	_sub_timer+1	;volatile
 11359  01F5  3000               	movlw	0
 11360  01F6  00D8               	movwf	_sub_timer	;volatile
 11361  01F7                     i1l5080:	
 11362                           
 11363                           ;interrupts.c: 166: }
 11364                           ;interrupts.c: 168: if (sub_timer >= 20) {
 11365  01F7  1BDB               	btfsc	_sub_timer+3,7	;volatile
 11366  01F8  2A13               	goto	i1l5086
 11367  01F9  085B               	movf	_sub_timer+3,w	;volatile
 11368  01FA  1D03               	btfss	3,2
 11369  01FB  2A06               	goto	i1l5082
 11370  01FC  085A               	movf	_sub_timer+2,w	;volatile
 11371  01FD  1D03               	btfss	3,2
 11372  01FE  2A06               	goto	i1l5082
 11373  01FF  0859               	movf	_sub_timer+1,w	;volatile
 11374  0200  1D03               	btfss	3,2
 11375  0201  2A06               	goto	i1l5082
 11376  0202  3014               	movlw	20
 11377  0203  0258               	subwf	_sub_timer,w	;volatile
 11378  0204  1C03               	btfss	3,0
 11379  0205  2A13               	goto	i1l5086
 11380  0206                     i1l5082:	
 11381                           
 11382                           ;interrupts.c: 169: if (suspend_blink == 0) {
 11383  0206  0867               	movf	_suspend_blink,w	;volatile
 11384  0207  1D03               	btfss	3,2
 11385  0208  2A13               	goto	i1l5086
 11386                           
 11387                           ;interrupts.c: 170: set_leds_top(top_push_state, 0);
 11388  0209  0852               	movf	_top_push_state+1,w
 11389  020A  00F1               	movwf	i1set_leds_top@x+1
 11390  020B  0851               	movf	_top_push_state,w
 11391  020C  00F0               	movwf	i1set_leds_top@x
 11392  020D  3000               	movlw	0
 11393  020E  00F2               	movwf	i1set_leds_top@ledState
 11394  020F  00F3               	movwf	i1set_leds_top@ledState+1
 11395  0210  3195  25EE  3180   	fcall	i1_set_leds_top
 11396  0213                     i1l5086:	
 11397                           
 11398                           ;interrupts.c: 171: }
 11399                           ;interrupts.c: 172: }
 11400                           ;interrupts.c: 173: }
 11401                           ;interrupts.c: 188: if (mod_timer >= mod_delay_time) {
 11402  0213  0023               	movlb	3	; select bank3
 11403  0214  0863               	movf	_mod_delay_time^(0+384),w
 11404  0215  0020               	movlb	0	; select bank0
 11405  0216  00BA               	movwf	??_isr
 11406  0217  0023               	movlb	3	; select bank3
 11407  0218  0864               	movf	(_mod_delay_time+1)^(0+384),w
 11408  0219  0020               	movlb	0	; select bank0
 11409  021A  00BB               	movwf	??_isr+1
 11410  021B  3000               	movlw	0
 11411  021C  1BBB               	btfsc	??_isr+1,7
 11412  021D  30FF               	movlw	255
 11413  021E  00BC               	movwf	??_isr+2
 11414  021F  00BD               	movwf	??_isr+3
 11415  0220  0023               	movlb	3	; select bank3
 11416  0221  0830               	movf	(_mod_timer+3)^(0+384),w	;volatile
 11417  0222  3A80               	xorlw	128
 11418  0223  0020               	movlb	0	; select bank0
 11419  0224  00BE               	movwf	??_isr+4
 11420  0225  083D               	movf	??_isr+3,w
 11421  0226  3A80               	xorlw	128
 11422  0227  023E               	subwf	??_isr+4,w
 11423  0228  0023               	movlb	3	; select bank3
 11424  0229  1D03               	skipz
 11425  022A  2A3B               	goto	u457_23
 11426  022B  0020               	movlb	0	; select bank0
 11427  022C  083C               	movf	??_isr+2,w
 11428  022D  0023               	movlb	3	; select bank3
 11429  022E  022F               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 11430  022F  1D03               	skipz
 11431  0230  2A3B               	goto	u457_23
 11432  0231  0020               	movlb	0	; select bank0
 11433  0232  083B               	movf	??_isr+1,w
 11434  0233  0023               	movlb	3	; select bank3
 11435  0234  022E               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 11436  0235  1D03               	skipz
 11437  0236  2A3B               	goto	u457_23
 11438  0237  0020               	movlb	0	; select bank0
 11439  0238  083A               	movf	??_isr,w
 11440  0239  0023               	movlb	3	; select bank3
 11441  023A  022D               	subwf	_mod_timer^(0+384),w	;volatile
 11442  023B                     u457_23:	
 11443  023B  1C03               	skipc
 11444  023C  2AF6               	goto	i1l5130
 11445                           
 11446                           ;interrupts.c: 189: mod_timer = 0;
 11447  023D  3000               	movlw	0
 11448  023E  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 11449  023F  3000               	movlw	0
 11450  0240  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 11451  0241  3000               	movlw	0
 11452  0242  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 11453  0243  3000               	movlw	0
 11454  0244  00AD               	movwf	_mod_timer^(0+384)	;volatile
 11455                           
 11456                           ;interrupts.c: 192: if (mod_counter >= 60) {
 11457  0245  0022               	movlb	2	; select bank2
 11458  0246  0858               	movf	(_mod_counter+1)^(0+256),w
 11459  0247  3A80               	xorlw	128
 11460  0248  0020               	movlb	0	; select bank0
 11461  0249  00BA               	movwf	??_isr
 11462  024A  3080               	movlw	128
 11463  024B  023A               	subwf	??_isr,w
 11464  024C  1D03               	skipz
 11465  024D  2A51               	goto	u458_25
 11466  024E  303C               	movlw	60
 11467  024F  0022               	movlb	2	; select bank2
 11468  0250  0257               	subwf	_mod_counter^(0+256),w
 11469  0251                     u458_25:	
 11470  0251  1C03               	skipc
 11471  0252  2A9C               	goto	i1l5122
 11472                           
 11473                           ;interrupts.c: 193: mod_counter = 0;
 11474  0253  0022               	movlb	2	; select bank2
 11475  0254  01D7               	clrf	_mod_counter^(0+256)
 11476  0255  01D8               	clrf	(_mod_counter+1)^(0+256)
 11477                           
 11478                           ;interrupts.c: 194: }
 11479                           ;interrupts.c: 206: switch (bottom_push_state) {
 11480  0256  2A9C               	goto	i1l5122
 11481  0257                     i1l5092:	
 11482                           ;interrupts.c: 207: case 1:
 11483                           
 11484                           
 11485                           ;interrupts.c: 208: mod_value = (int)mod1[mod_counter];
 11486  0257  0022               	movlb	2	; select bank2
 11487  0258  0857               	movf	_mod_counter^(0+256),w
 11488  0259  3EA0               	addlw	(low (_mod1| (0+768)))& (0+255)
 11489  025A  0086               	movwf	6
 11490  025B  3003               	movlw	3	; select bank7/8
 11491  025C  2A66               	goto	L14
 11492  025D                     i1l5096:	
 11493                           ;interrupts.c: 211: case 2:
 11494                           
 11495                           ;interrupts.c: 210: break;
 11496                           
 11497                           ;interrupts.c: 209: PORTCbits.RC4 = 0;
 11498                           
 11499                           
 11500                           ;interrupts.c: 212: mod_value = (int)mod2[mod_counter];
 11501  025D  0022               	movlb	2	; select bank2
 11502  025E  0857               	movf	_mod_counter^(0+256),w
 11503  025F  3E20               	addlw	(low (_mod2| (0+1024)))& (0+255)
 11504  0260  2A64               	goto	L15
 11505  0261                     i1l5100:	
 11506                           ;interrupts.c: 215: case 3:
 11507                           
 11508                           ;interrupts.c: 214: break;
 11509                           
 11510                           ;interrupts.c: 213: PORTCbits.RC4 = 0;
 11511                           
 11512                           
 11513                           ;interrupts.c: 216: mod_value = (int)mod3[mod_counter];
 11514  0261  0022               	movlb	2	; select bank2
 11515  0262  0857               	movf	_mod_counter^(0+256),w
 11516  0263  3EA0               	addlw	(low (_mod3| (0+1024)))& (0+255)
 11517  0264                     L15:	
 11518  0264  0086               	movwf	6
 11519  0265  3004               	movlw	4	; select bank9/10
 11520  0266                     L14:	
 11521  0266  0087               	movwf	7
 11522  0267  0801               	movf	1,w
 11523  0268  0023               	movlb	3	; select bank3
 11524  0269  00D3               	movwf	_mod_value^(0+384)
 11525  026A  01D4               	clrf	(_mod_value+1)^(0+384)
 11526  026B  1BD3               	btfsc	_mod_value^(0+384),7
 11527  026C  03D4               	decf	(_mod_value+1)^(0+384),f
 11528  026D  2A99               	goto	i1l5118
 11529  026E                     i1l5104:	
 11530                           ;interrupts.c: 219: case 4:
 11531                           
 11532                           ;interrupts.c: 218: break;
 11533                           
 11534                           ;interrupts.c: 217: PORTCbits.RC4 = 0;
 11535                           
 11536                           
 11537                           ;interrupts.c: 220: if (mod_counter <31) {
 11538  026E  0022               	movlb	2	; select bank2
 11539  026F  0858               	movf	(_mod_counter+1)^(0+256),w
 11540  0270  3A80               	xorlw	128
 11541  0271  0020               	movlb	0	; select bank0
 11542  0272  00BA               	movwf	??_isr
 11543  0273  3080               	movlw	128
 11544  0274  023A               	subwf	??_isr,w
 11545  0275  1D03               	skipz
 11546  0276  2A7A               	goto	u459_25
 11547  0277  301F               	movlw	31
 11548  0278  0022               	movlb	2	; select bank2
 11549  0279  0257               	subwf	_mod_counter^(0+256),w
 11550  027A                     u459_25:	
 11551  027A  1803               	skipnc
 11552  027B  2A81               	goto	i1l5108
 11553                           
 11554                           ;interrupts.c: 221: mod_value = 100;
 11555  027C  3064               	movlw	100
 11556  027D  0023               	movlb	3	; select bank3
 11557  027E  00D3               	movwf	_mod_value^(0+384)
 11558  027F  3000               	movlw	0
 11559  0280  2A85               	goto	L12
 11560  0281                     i1l5108:	
 11561                           ;interrupts.c: 222: } else {
 11562                           
 11563                           
 11564                           ;interrupts.c: 223: mod_value = -100;
 11565  0281  309C               	movlw	156
 11566  0282  0023               	movlb	3	; select bank3
 11567  0283  00D3               	movwf	_mod_value^(0+384)
 11568  0284  30FF               	movlw	255
 11569  0285                     L12:	
 11570  0285  00D4               	movwf	(_mod_value^(0+384)+1)
 11571  0286  2A99               	goto	i1l5118
 11572  0287                     i1l5112:	
 11573                           ;interrupts.c: 227: case 5:
 11574                           
 11575                           ;interrupts.c: 226: break;
 11576                           
 11577                           ;interrupts.c: 224: }
 11578                           ;interrupts.c: 225: PORTCbits.RC4 = 0;
 11579                           
 11580                           
 11581                           ;interrupts.c: 228: mod_value = (int)mod1[mod_counter];
 11582  0287  0022               	movlb	2	; select bank2
 11583  0288  0857               	movf	_mod_counter^(0+256),w
 11584  0289  3EA0               	addlw	(low (_mod1| (0+768)))& (0+255)
 11585  028A  0086               	movwf	6
 11586  028B  3003               	movlw	3	; select bank7/8
 11587  028C  0087               	movwf	7
 11588  028D  0801               	movf	1,w
 11589  028E  0023               	movlb	3	; select bank3
 11590  028F  00D3               	movwf	_mod_value^(0+384)
 11591  0290  01D4               	clrf	(_mod_value+1)^(0+384)
 11592  0291  1BD3               	btfsc	_mod_value^(0+384),7
 11593  0292  03D4               	decf	(_mod_value+1)^(0+384),f
 11594                           
 11595                           ;interrupts.c: 230: PORTCbits.RC4 = 1;
 11596  0293  0020               	movlb	0	; select bank0
 11597  0294  160E               	bsf	14,4	;volatile
 11598                           
 11599                           ;interrupts.c: 232: break;
 11600  0295  2AB3               	goto	i1l5124
 11601  0296                     i1l5116:	
 11602                           ;interrupts.c: 233: default:
 11603                           
 11604                           
 11605                           ;interrupts.c: 234: mod_value = 0;
 11606  0296  0023               	movlb	3	; select bank3
 11607  0297  01D3               	clrf	_mod_value^(0+384)
 11608  0298  01D4               	clrf	(_mod_value+1)^(0+384)
 11609  0299                     i1l5118:	
 11610                           
 11611                           ;interrupts.c: 235: PORTCbits.RC4 = 0;
 11612  0299  0020               	movlb	0	; select bank0
 11613  029A  120E               	bcf	14,4	;volatile
 11614                           
 11615                           ;interrupts.c: 237: }
 11616                           
 11617                           ;interrupts.c: 236: break;
 11618  029B  2AB3               	goto	i1l5124
 11619  029C                     i1l5122:	
 11620                           
 11621                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11622                           ; Switch size 1, requested type "space"
 11623                           ; Number of cases is 1, Range of values is 0 to 0
 11624                           ; switch strategies available:
 11625                           ; Name         Instructions Cycles
 11626                           ; simple_byte            4     3 (average)
 11627                           ; direct_byte            8     6 (fixed)
 11628                           ; jumptable            260     6 (fixed)
 11629                           ;	Chosen strategy is simple_byte
 11630  029C  0020               	movlb	0	; select bank0
 11631  029D  084E               	movf	_bottom_push_state+1,w
 11632  029E  3A00               	xorlw	0	; case 0
 11633  029F  1903               	skipnz
 11634  02A0  2AA2               	goto	i1l7582
 11635  02A1  2A96               	goto	i1l5116
 11636  02A2                     i1l7582:	
 11637                           
 11638                           ; Switch size 1, requested type "space"
 11639                           ; Number of cases is 5, Range of values is 1 to 5
 11640                           ; switch strategies available:
 11641                           ; Name         Instructions Cycles
 11642                           ; simple_byte           16     9 (average)
 11643                           ; direct_byte           19     9 (fixed)
 11644                           ; jumptable            263     9 (fixed)
 11645                           ;	Chosen strategy is simple_byte
 11646  02A2  084D               	movf	_bottom_push_state,w
 11647  02A3  3A01               	xorlw	1	; case 1
 11648  02A4  1903               	skipnz
 11649  02A5  2A57               	goto	i1l5092
 11650  02A6  3A03               	xorlw	3	; case 2
 11651  02A7  1903               	skipnz
 11652  02A8  2A5D               	goto	i1l5096
 11653  02A9  3A01               	xorlw	1	; case 3
 11654  02AA  1903               	skipnz
 11655  02AB  2A61               	goto	i1l5100
 11656  02AC  3A07               	xorlw	7	; case 4
 11657  02AD  1903               	skipnz
 11658  02AE  2A6E               	goto	i1l5104
 11659  02AF  3A01               	xorlw	1	; case 5
 11660  02B0  1903               	skipnz
 11661  02B1  2A87               	goto	i1l5112
 11662  02B2  2A96               	goto	i1l5116
 11663  02B3                     i1l5124:	
 11664                           
 11665                           ;interrupts.c: 253: mod_value = modulation(mod_value, adjusted_pot_value);
 11666  02B3  0023               	movlb	3	; select bank3
 11667  02B4  0853               	movf	_mod_value^(0+384),w
 11668  02B5  0020               	movlb	0	; select bank0
 11669  02B6  00AE               	movwf	modulation@x
 11670  02B7  0023               	movlb	3	; select bank3
 11671  02B8  0854               	movf	(_mod_value+1)^(0+384),w
 11672  02B9  0020               	movlb	0	; select bank0
 11673  02BA  00AF               	movwf	modulation@x+1
 11674  02BB  0D89               	rlf	9,f
 11675  02BC  3B89               	subwfb	9,f
 11676  02BD  0989               	comf	9,f
 11677  02BE  00B0               	movwf	modulation@x+2
 11678  02BF  00B1               	movwf	modulation@x+3
 11679  02C0  0023               	movlb	3	; select bank3
 11680  02C1  083B               	movf	_adjusted_pot_value^(0+384),w
 11681  02C2  0020               	movlb	0	; select bank0
 11682  02C3  00B2               	movwf	modulation@y
 11683  02C4  0023               	movlb	3	; select bank3
 11684  02C5  083C               	movf	(_adjusted_pot_value+1)^(0+384),w
 11685  02C6  0020               	movlb	0	; select bank0
 11686  02C7  00B3               	movwf	modulation@y+1
 11687  02C8  0D89               	rlf	9,f
 11688  02C9  3B89               	subwfb	9,f
 11689  02CA  0989               	comf	9,f
 11690  02CB  00B4               	movwf	modulation@y+2
 11691  02CC  00B5               	movwf	modulation@y+3
 11692  02CD  3194  24E1  3180   	fcall	_modulation
 11693  02D0  0020               	movlb	0	; select bank0
 11694  02D1  082F               	movf	?_modulation+1,w
 11695  02D2  0023               	movlb	3	; select bank3
 11696  02D3  00D4               	movwf	(_mod_value+1)^(0+384)
 11697  02D4  0020               	movlb	0	; select bank0
 11698  02D5  082E               	movf	?_modulation,w
 11699  02D6  0023               	movlb	3	; select bank3
 11700  02D7  00D3               	movwf	_mod_value^(0+384)
 11701                           
 11702                           ;interrupts.c: 254: CCPR9 = mod_value / 2;
 11703  02D8  3002               	movlw	2
 11704  02D9  00F0               	movwf	___awdiv@divisor
 11705  02DA  3000               	movlw	0
 11706  02DB  00F1               	movwf	___awdiv@divisor+1
 11707  02DC  0854               	movf	(_mod_value+1)^(0+384),w
 11708  02DD  00F3               	movwf	___awdiv@dividend+1
 11709  02DE  0853               	movf	_mod_value^(0+384),w
 11710  02DF  00F2               	movwf	___awdiv@dividend
 11711  02E0  3196  2680  3180   	fcall	___awdiv
 11712  02E3  0871               	movf	?___awdiv+1,w
 11713  02E4  002C               	movlb	12	; select bank12
 11714  02E5  009B               	movwf	27	;volatile
 11715  02E6  0870               	movf	?___awdiv,w
 11716  02E7  009A               	movwf	26	;volatile
 11717                           
 11718                           ;interrupts.c: 255: mod_timer = 0;
 11719  02E8  3000               	movlw	0
 11720  02E9  0023               	movlb	3	; select bank3
 11721  02EA  00B0               	movwf	(_mod_timer+3)^(0+384)	;volatile
 11722  02EB  3000               	movlw	0
 11723  02EC  00AF               	movwf	(_mod_timer+2)^(0+384)	;volatile
 11724  02ED  3000               	movlw	0
 11725  02EE  00AE               	movwf	(_mod_timer+1)^(0+384)	;volatile
 11726  02EF  3000               	movlw	0
 11727  02F0  00AD               	movwf	_mod_timer^(0+384)	;volatile
 11728                           
 11729                           ;interrupts.c: 256: mod_counter++;
 11730  02F1  3001               	movlw	1
 11731  02F2  0022               	movlb	2	; select bank2
 11732  02F3  07D7               	addwf	_mod_counter^(0+256),f
 11733  02F4  3000               	movlw	0
 11734  02F5  3DD8               	addwfc	(_mod_counter+1)^(0+256),f
 11735  02F6                     i1l5130:	
 11736                           
 11737                           ;interrupts.c: 270: }
 11738                           ;interrupts.c: 295: if (preset_programmning_on == 1) {
 11739  02F6  0023               	movlb	3	; select bank3
 11740  02F7  035E               	decf	_preset_programmning_on^(0+384),w
 11741  02F8  1D03               	btfss	3,2
 11742  02F9  2B29               	goto	i1l5142
 11743                           
 11744                           ;interrupts.c: 296: preset_blink++;
 11745  02FA  3001               	movlw	1
 11746  02FB  0020               	movlb	0	; select bank0
 11747  02FC  00BA               	movwf	??_isr
 11748  02FD  083A               	movf	??_isr,w
 11749  02FE  0022               	movlb	2	; select bank2
 11750  02FF  07DD               	addwf	_preset_blink^(0+256),f
 11751                           
 11752                           ;interrupts.c: 298: if (preset_blink >= blink_delay) {
 11753  0300  0023               	movlb	3	; select bank3
 11754  0301  0860               	movf	(_blink_delay+1)^(0+384),w
 11755  0302  3A80               	xorlw	128
 11756  0303  3C80               	sublw	128
 11757  0304  1D03               	skipz
 11758  0305  2B09               	goto	u461_25
 11759  0306  085F               	movf	_blink_delay^(0+384),w
 11760  0307  0022               	movlb	2	; select bank2
 11761  0308  025D               	subwf	_preset_blink^(0+256),w
 11762  0309                     u461_25:	
 11763  0309  1C03               	skipc
 11764  030A  2B27               	goto	i1l176
 11765                           
 11766                           ;interrupts.c: 299: LATBbits.LATB1 = 1;
 11767  030B  0022               	movlb	2	; select bank2
 11768  030C  148D               	bsf	13,1	;volatile
 11769                           
 11770                           ;interrupts.c: 300: if (preset_blink > blink_delay*2) {
 11771  030D  0023               	movlb	3	; select bank3
 11772  030E  0860               	movf	(_blink_delay+1)^(0+384),w
 11773  030F  0020               	movlb	0	; select bank0
 11774  0310  00BB               	movwf	??_isr+1
 11775  0311  0023               	movlb	3	; select bank3
 11776  0312  085F               	movf	_blink_delay^(0+384),w
 11777  0313  0020               	movlb	0	; select bank0
 11778  0314  00BA               	movwf	??_isr
 11779  0315  35BA               	lslf	??_isr,f
 11780  0316  0DBB               	rlf	??_isr+1,f
 11781  0317  083B               	movf	??_isr+1,w
 11782  0318  3A80               	xorlw	128
 11783  0319  00BC               	movwf	??_isr+2
 11784  031A  3080               	movlw	128
 11785  031B  023C               	subwf	??_isr+2,w
 11786  031C  1D03               	skipz
 11787  031D  2B22               	goto	u462_25
 11788  031E  0022               	movlb	2	; select bank2
 11789  031F  085D               	movf	_preset_blink^(0+256),w
 11790  0320  0020               	movlb	0	; select bank0
 11791  0321  023A               	subwf	??_isr,w
 11792  0322                     u462_25:	
 11793  0322  1803               	skipnc
 11794  0323  2B2F               	goto	i1l181
 11795                           
 11796                           ;interrupts.c: 301: preset_blink = 0;
 11797  0324  0022               	movlb	2	; select bank2
 11798  0325  01DD               	clrf	_preset_blink^(0+256)
 11799                           
 11800                           ;interrupts.c: 302: }
 11801                           ;interrupts.c: 304: } else {
 11802  0326  2B2F               	goto	i1l181
 11803  0327                     i1l176:	
 11804                           
 11805                           ;interrupts.c: 305: LATBbits.LATB1 = 0;
 11806  0327  0022               	movlb	2	; select bank2
 11807  0328  2B2E               	goto	i1l5146
 11808  0329                     i1l5142:	
 11809                           ;interrupts.c: 306: }
 11810                           ;interrupts.c: 308: } else {
 11811                           
 11812                           
 11813                           ;interrupts.c: 309: if (preset_blink > 0) {
 11814  0329  0022               	movlb	2	; select bank2
 11815  032A  085D               	movf	_preset_blink^(0+256),w
 11816  032B  1903               	btfsc	3,2
 11817  032C  2B2F               	goto	i1l181
 11818                           
 11819                           ;interrupts.c: 310: preset_blink = 0;
 11820  032D  01DD               	clrf	_preset_blink^(0+256)
 11821  032E                     i1l5146:	
 11822                           
 11823                           ;interrupts.c: 311: LATBbits.LATB1 = 0;
 11824  032E  108D               	bcf	13,1	;volatile
 11825  032F                     i1l181:	
 11826  032F  0020               	movlb	0	; select bank0
 11827  0330  0842               	movf	??_isr+8,w
 11828  0331  00FF               	movwf	127
 11829  0332  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11830  0333  0009               	retfie
 11831  0334                     __end_of_isr:	
 11832                           
 11833                           	psect	text33
 11834  15EE                     __ptext33:	
 11835 ;; *************** function i1_set_leds_top *****************
 11836 ;; Defined at:
 11837 ;;		line 16 in file "LEDs.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  x               2    0[COMMON] int 
 11840 ;;  ledState        2    2[COMMON] int 
 11841 ;; Auto vars:     Size  Location     Type
 11842 ;;		None
 11843 ;; Return value:  Size  Location     Type
 11844 ;;                  1    wreg      void 
 11845 ;; Registers used:
 11846 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11847 ;; Tracked objects:
 11848 ;;		On entry : 0/0
 11849 ;;		On exit  : 0/0
 11850 ;;		Unchanged: 0/0
 11851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11852 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11855 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11856 ;;Total ram usage:        4 bytes
 11857 ;; Hardware stack levels used:    1
 11858 ;; This function calls:
 11859 ;;		Nothing
 11860 ;; This function is called by:
 11861 ;;		_isr
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function i1_set_leds_top
 11867  15EE                     i1_set_leds_top:	
 11868                           
 11869                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11870                           
 11871                           ;incstack = 0
 11872                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 11873  15EE  0027               	movlb	7	; select bank7
 11874  15EF  100C               	bcf	12,0	;volatile
 11875                           
 11876                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11877  15F0  108C               	bcf	12,1	;volatile
 11878                           
 11879                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11880  15F1  110C               	bcf	12,2	;volatile
 11881                           
 11882                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11883  15F2  118C               	bcf	12,3	;volatile
 11884                           
 11885                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11886  15F3  120C               	bcf	12,4	;volatile
 11887                           
 11888                           ;LEDs.c: 22: switch (x) {
 11889  15F4  2E19               	goto	i1l4992
 11890  15F5                     i1l4980:	
 11891                           ;LEDs.c: 23: case 1:
 11892                           
 11893                           
 11894                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11895  15F5  0C72               	rrf	i1set_leds_top@ledState,w
 11896  15F6  1C03               	skipc
 11897  15F7  100C               	bcf	12,0	;volatile
 11898  15F8  1803               	skipnc
 11899  15F9  140C               	bsf	12,0	;volatile
 11900                           
 11901                           ;LEDs.c: 25: break;
 11902  15FA  0008               	return
 11903  15FB                     i1l4982:	
 11904                           ;LEDs.c: 26: case 2:
 11905                           
 11906                           
 11907                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11908  15FB  0C72               	rrf	i1set_leds_top@ledState,w
 11909  15FC  1C03               	skipc
 11910  15FD  108C               	bcf	12,1	;volatile
 11911  15FE  1803               	skipnc
 11912  15FF  148C               	bsf	12,1	;volatile
 11913                           
 11914                           ;LEDs.c: 28: break;
 11915  1600  0008               	return
 11916  1601                     i1l4984:	
 11917                           ;LEDs.c: 29: case 3:
 11918                           
 11919                           
 11920                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11921  1601  0C72               	rrf	i1set_leds_top@ledState,w
 11922  1602  1C03               	skipc
 11923  1603  110C               	bcf	12,2	;volatile
 11924  1604  1803               	skipnc
 11925  1605  150C               	bsf	12,2	;volatile
 11926                           
 11927                           ;LEDs.c: 31: break;
 11928  1606  0008               	return
 11929  1607                     i1l4986:	
 11930                           ;LEDs.c: 32: case 4:
 11931                           
 11932                           
 11933                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11934  1607  0C72               	rrf	i1set_leds_top@ledState,w
 11935  1608  1C03               	skipc
 11936  1609  118C               	bcf	12,3	;volatile
 11937  160A  1803               	skipnc
 11938  160B  158C               	bsf	12,3	;volatile
 11939                           
 11940                           ;LEDs.c: 34: break;
 11941  160C  0008               	return
 11942  160D                     i1l4988:	
 11943                           ;LEDs.c: 35: case 5:
 11944                           
 11945                           
 11946                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11947  160D  0C72               	rrf	i1set_leds_top@ledState,w
 11948  160E  1C03               	skipc
 11949  160F  120C               	bcf	12,4	;volatile
 11950  1610  1803               	skipnc
 11951  1611  160C               	bsf	12,4	;volatile
 11952                           
 11953                           ;LEDs.c: 39: break;
 11954                           
 11955                           ;LEDs.c: 38: case 6:
 11956                           
 11957                           ;LEDs.c: 37: break;
 11958  1612  0008               	return
 11959  1613                     i1l765:	
 11960                           ;LEDs.c: 40: case 100:
 11961                           
 11962                           
 11963                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11964  1613  140C               	bsf	12,0	;volatile
 11965                           
 11966                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11967  1614  148C               	bsf	12,1	;volatile
 11968                           
 11969                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11970  1615  150C               	bsf	12,2	;volatile
 11971                           
 11972                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11973  1616  158C               	bsf	12,3	;volatile
 11974                           
 11975                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11976  1617  160C               	bsf	12,4	;volatile
 11977                           
 11978                           ;LEDs.c: 47: }
 11979                           
 11980                           ;LEDs.c: 46: break;
 11981  1618  0008               	return
 11982  1619                     i1l4992:	
 11983                           
 11984                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11985                           ; Switch size 1, requested type "space"
 11986                           ; Number of cases is 1, Range of values is 0 to 0
 11987                           ; switch strategies available:
 11988                           ; Name         Instructions Cycles
 11989                           ; simple_byte            4     3 (average)
 11990                           ; direct_byte            8     6 (fixed)
 11991                           ; jumptable            260     6 (fixed)
 11992                           ;	Chosen strategy is simple_byte
 11993  1619  0871               	movf	i1set_leds_top@x+1,w
 11994  161A  3A00               	xorlw	0	; case 0
 11995  161B  1903               	skipnz
 11996  161C  2E1E               	goto	i1l7584
 11997  161D  2E35               	goto	i1l766
 11998  161E                     i1l7584:	
 11999                           
 12000                           ; Switch size 1, requested type "space"
 12001                           ; Number of cases is 7, Range of values is 1 to 100
 12002                           ; switch strategies available:
 12003                           ; Name         Instructions Cycles
 12004                           ; simple_byte           22    12 (average)
 12005                           ; direct_byte          209     9 (fixed)
 12006                           ; jumptable            263     9 (fixed)
 12007                           ;	Chosen strategy is simple_byte
 12008  161E  0870               	movf	i1set_leds_top@x,w
 12009  161F  3A01               	xorlw	1	; case 1
 12010  1620  1903               	skipnz
 12011  1621  2DF5               	goto	i1l4980
 12012  1622  3A03               	xorlw	3	; case 2
 12013  1623  1903               	skipnz
 12014  1624  2DFB               	goto	i1l4982
 12015  1625  3A01               	xorlw	1	; case 3
 12016  1626  1903               	skipnz
 12017  1627  2E01               	goto	i1l4984
 12018  1628  3A07               	xorlw	7	; case 4
 12019  1629  1903               	skipnz
 12020  162A  2E07               	goto	i1l4986
 12021  162B  3A01               	xorlw	1	; case 5
 12022  162C  1903               	skipnz
 12023  162D  2E0D               	goto	i1l4988
 12024  162E  3A03               	xorlw	3	; case 6
 12025  162F  1903               	skipnz
 12026  1630  2E35               	goto	i1l766
 12027  1631  3A62               	xorlw	98	; case 100
 12028  1632  1903               	skipnz
 12029  1633  2E13               	goto	i1l765
 12030  1634  2E35               	goto	i1l766
 12031  1635                     i1l766:	
 12032  1635  0008               	return
 12033  1636                     __end_ofi1_set_leds_top:	
 12034                           
 12035                           	psect	text34
 12036  14E1                     __ptext34:	
 12037 ;; *************** function _modulation *****************
 12038 ;; Defined at:
 12039 ;;		line 187 in file "user.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;  x               4   14[BANK0 ] long 
 12042 ;;  y               4   18[BANK0 ] long 
 12043 ;; Auto vars:     Size  Location     Type
 12044 ;;		None
 12045 ;; Return value:  Size  Location     Type
 12046 ;;                  4   14[BANK0 ] long 
 12047 ;; Registers used:
 12048 ;;		wreg, status,2, status,0, pclath, cstack
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/0
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12054 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12056 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12057 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12058 ;;Total ram usage:       12 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    1
 12061 ;; This function calls:
 12062 ;;		___aldiv
 12063 ;;		i1___lmul
 12064 ;; This function is called by:
 12065 ;;		_isr
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           
 12070                           ;psect for function _modulation
 12071  14E1                     _modulation:	
 12072                           
 12073                           ;user.c: 190: return (127500 + (y * x)) / 1000;
 12074                           
 12075                           ;incstack = 0
 12076                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 12077  14E1  3000               	movlw	0
 12078  14E2  0020               	movlb	0	; select bank0
 12079  14E3  00A3               	movwf	___aldiv@divisor+3
 12080  14E4  3000               	movlw	0
 12081  14E5  00A2               	movwf	___aldiv@divisor+2
 12082  14E6  3003               	movlw	3
 12083  14E7  00A1               	movwf	___aldiv@divisor+1
 12084  14E8  30E8               	movlw	232
 12085  14E9  00A0               	movwf	___aldiv@divisor
 12086  14EA  300C               	movlw	12
 12087  14EB  00B6               	movwf	??_modulation
 12088  14EC  30F2               	movlw	242
 12089  14ED  00B7               	movwf	??_modulation+1
 12090  14EE  3001               	movlw	1
 12091  14EF  00B8               	movwf	??_modulation+2
 12092  14F0  3000               	movlw	0
 12093  14F1  00B9               	movwf	??_modulation+3
 12094  14F2  0835               	movf	modulation@y+3,w
 12095  14F3  00F3               	movwf	i1___lmul@multiplier+3
 12096  14F4  0834               	movf	modulation@y+2,w
 12097  14F5  00F2               	movwf	i1___lmul@multiplier+2
 12098  14F6  0833               	movf	modulation@y+1,w
 12099  14F7  00F1               	movwf	i1___lmul@multiplier+1
 12100  14F8  0832               	movf	modulation@y,w
 12101  14F9  00F0               	movwf	i1___lmul@multiplier
 12102  14FA  0831               	movf	modulation@x+3,w
 12103  14FB  00F7               	movwf	i1___lmul@multiplicand+3
 12104  14FC  0830               	movf	modulation@x+2,w
 12105  14FD  00F6               	movwf	i1___lmul@multiplicand+2
 12106  14FE  082F               	movf	modulation@x+1,w
 12107  14FF  00F5               	movwf	i1___lmul@multiplicand+1
 12108  1500  082E               	movf	modulation@x,w
 12109  1501  00F4               	movwf	i1___lmul@multiplicand
 12110  1502  3192  22F4  3194   	fcall	i1___lmul
 12111  1505  0870               	movf	?i1___lmul,w
 12112  1506  0020               	movlb	0	; select bank0
 12113  1507  07B6               	addwf	??_modulation,f
 12114  1508  0871               	movf	?i1___lmul+1,w
 12115  1509  3DB7               	addwfc	??_modulation+1,f
 12116  150A  0872               	movf	?i1___lmul+2,w
 12117  150B  3DB8               	addwfc	??_modulation+2,f
 12118  150C  0873               	movf	?i1___lmul+3,w
 12119  150D  3DB9               	addwfc	??_modulation+3,f
 12120  150E  0839               	movf	??_modulation+3,w
 12121  150F  00A7               	movwf	___aldiv@dividend+3
 12122  1510  0838               	movf	??_modulation+2,w
 12123  1511  00A6               	movwf	___aldiv@dividend+2
 12124  1512  0837               	movf	??_modulation+1,w
 12125  1513  00A5               	movwf	___aldiv@dividend+1
 12126  1514  0836               	movf	??_modulation,w
 12127  1515  00A4               	movwf	___aldiv@dividend
 12128  1516  3188  204C         	fcall	___aldiv
 12129  1518  0020               	movlb	0	; select bank0
 12130  1519  0823               	movf	?___aldiv+3,w
 12131  151A  00B1               	movwf	?_modulation+3
 12132  151B  0822               	movf	?___aldiv+2,w
 12133  151C  00B0               	movwf	?_modulation+2
 12134  151D  0821               	movf	?___aldiv+1,w
 12135  151E  00AF               	movwf	?_modulation+1
 12136  151F  0820               	movf	?___aldiv,w
 12137  1520  00AE               	movwf	?_modulation
 12138  1521  0008               	return
 12139  1522                     __end_of_modulation:	
 12140                           
 12141                           	psect	text35
 12142  12F4                     __ptext35:	
 12143 ;; *************** function i1___lmul *****************
 12144 ;; Defined at:
 12145 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;  multiplier      4    0[COMMON] unsigned long 
 12148 ;;  multiplicand    4    4[COMMON] unsigned long 
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;  __lmul          4    8[COMMON] unsigned long 
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  4    0[COMMON] unsigned long 
 12153 ;; Registers used:
 12154 ;;		wreg, status,2, status,0
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12160 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12161 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12163 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12164 ;;Total ram usage:       12 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; This function calls:
 12167 ;;		Nothing
 12168 ;; This function is called by:
 12169 ;;		_modulation
 12170 ;; This function uses a non-reentrant model
 12171 ;;
 12172                           
 12173                           
 12174                           ;psect for function i1___lmul
 12175  12F4                     i1___lmul:	
 12176                           
 12177                           ;incstack = 0
 12178                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 12179  12F4  3000               	movlw	0
 12180  12F5  00FB               	movwf	i1___lmul@product+3
 12181  12F6  3000               	movlw	0
 12182  12F7  00FA               	movwf	i1___lmul@product+2
 12183  12F8  3000               	movlw	0
 12184  12F9  00F9               	movwf	i1___lmul@product+1
 12185  12FA  3000               	movlw	0
 12186  12FB  00F8               	movwf	i1___lmul@product
 12187  12FC                     i1l4678:	
 12188  12FC  1C70               	btfss	i1___lmul@multiplier,0
 12189  12FD  2B06               	goto	i1l4682
 12190  12FE  0874               	movf	i1___lmul@multiplicand,w
 12191  12FF  07F8               	addwf	i1___lmul@product,f
 12192  1300  0875               	movf	i1___lmul@multiplicand+1,w
 12193  1301  3DF9               	addwfc	i1___lmul@product+1,f
 12194  1302  0876               	movf	i1___lmul@multiplicand+2,w
 12195  1303  3DFA               	addwfc	i1___lmul@product+2,f
 12196  1304  0877               	movf	i1___lmul@multiplicand+3,w
 12197  1305  3DFB               	addwfc	i1___lmul@product+3,f
 12198  1306                     i1l4682:	
 12199  1306  3001               	movlw	1
 12200  1307                     u394_25:	
 12201  1307  35F4               	lslf	i1___lmul@multiplicand,f
 12202  1308  0DF5               	rlf	i1___lmul@multiplicand+1,f
 12203  1309  0DF6               	rlf	i1___lmul@multiplicand+2,f
 12204  130A  0DF7               	rlf	i1___lmul@multiplicand+3,f
 12205  130B  0B89               	decfsz	9,f
 12206  130C  2B07               	goto	u394_25
 12207  130D  3001               	movlw	1
 12208  130E                     u395_25:	
 12209  130E  36F3               	lsrf	i1___lmul@multiplier+3,f
 12210  130F  0CF2               	rrf	i1___lmul@multiplier+2,f
 12211  1310  0CF1               	rrf	i1___lmul@multiplier+1,f
 12212  1311  0CF0               	rrf	i1___lmul@multiplier,f
 12213  1312  0B89               	decfsz	9,f
 12214  1313  2B0E               	goto	u395_25
 12215  1314  0873               	movf	i1___lmul@multiplier+3,w
 12216  1315  0472               	iorwf	i1___lmul@multiplier+2,w
 12217  1316  0471               	iorwf	i1___lmul@multiplier+1,w
 12218  1317  0470               	iorwf	i1___lmul@multiplier,w
 12219  1318  1D03               	skipz
 12220  1319  2AFC               	goto	i1l4678
 12221  131A  087B               	movf	i1___lmul@product+3,w
 12222  131B  00F3               	movwf	?i1___lmul+3
 12223  131C  087A               	movf	i1___lmul@product+2,w
 12224  131D  00F2               	movwf	?i1___lmul+2
 12225  131E  0879               	movf	i1___lmul@product+1,w
 12226  131F  00F1               	movwf	?i1___lmul+1
 12227  1320  0878               	movf	i1___lmul@product,w
 12228  1321  00F0               	movwf	?i1___lmul
 12229  1322  0008               	return
 12230  1323                     __end_ofi1___lmul:	
 12231                           
 12232                           	psect	text36
 12233  084C                     __ptext36:	
 12234 ;; *************** function ___aldiv *****************
 12235 ;; Defined at:
 12236 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 12237 ;; Parameters:    Size  Location     Type
 12238 ;;  divisor         4    0[BANK0 ] long 
 12239 ;;  dividend        4    4[BANK0 ] long 
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;  quotient        4   10[BANK0 ] long 
 12242 ;;  sign            1    9[BANK0 ] unsigned char 
 12243 ;;  counter         1    8[BANK0 ] unsigned char 
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  4    0[BANK0 ] long 
 12246 ;; Registers used:
 12247 ;;		wreg, status,2, status,0
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12253 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12254 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12255 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12256 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12257 ;;Total ram usage:       15 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; This function calls:
 12260 ;;		Nothing
 12261 ;; This function is called by:
 12262 ;;		_modulation
 12263 ;;		_updateSwitchTap
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           
 12268                           ;psect for function ___aldiv
 12269  084C                     ___aldiv:	
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12273  084C  0020               	movlb	0	; select bank0
 12274  084D  01A9               	clrf	___aldiv@sign
 12275  084E  1FA3               	btfss	___aldiv@divisor+3,7
 12276  084F  285D               	goto	i1l1784
 12277  0850  09A0               	comf	___aldiv@divisor,f
 12278  0851  09A1               	comf	___aldiv@divisor+1,f
 12279  0852  09A2               	comf	___aldiv@divisor+2,f
 12280  0853  09A3               	comf	___aldiv@divisor+3,f
 12281  0854  0AA0               	incf	___aldiv@divisor,f
 12282  0855  1903               	skipnz
 12283  0856  0AA1               	incf	___aldiv@divisor+1,f
 12284  0857  1903               	skipnz
 12285  0858  0AA2               	incf	___aldiv@divisor+2,f
 12286  0859  1903               	skipnz
 12287  085A  0AA3               	incf	___aldiv@divisor+3,f
 12288  085B  01A9               	clrf	___aldiv@sign
 12289  085C  0AA9               	incf	___aldiv@sign,f
 12290  085D                     i1l1784:	
 12291  085D  1FA7               	btfss	___aldiv@dividend+3,7
 12292  085E  286E               	goto	i1l4464
 12293  085F  09A4               	comf	___aldiv@dividend,f
 12294  0860  09A5               	comf	___aldiv@dividend+1,f
 12295  0861  09A6               	comf	___aldiv@dividend+2,f
 12296  0862  09A7               	comf	___aldiv@dividend+3,f
 12297  0863  0AA4               	incf	___aldiv@dividend,f
 12298  0864  1903               	skipnz
 12299  0865  0AA5               	incf	___aldiv@dividend+1,f
 12300  0866  1903               	skipnz
 12301  0867  0AA6               	incf	___aldiv@dividend+2,f
 12302  0868  1903               	skipnz
 12303  0869  0AA7               	incf	___aldiv@dividend+3,f
 12304  086A  3001               	movlw	1
 12305  086B  00FC               	movwf	??___aldiv
 12306  086C  087C               	movf	??___aldiv,w
 12307  086D  06A9               	xorwf	___aldiv@sign,f
 12308  086E                     i1l4464:	
 12309  086E  3000               	movlw	0
 12310  086F  00AD               	movwf	___aldiv@quotient+3
 12311  0870  3000               	movlw	0
 12312  0871  00AC               	movwf	___aldiv@quotient+2
 12313  0872  3000               	movlw	0
 12314  0873  00AB               	movwf	___aldiv@quotient+1
 12315  0874  3000               	movlw	0
 12316  0875  00AA               	movwf	___aldiv@quotient
 12317  0876  0823               	movf	___aldiv@divisor+3,w
 12318  0877  0422               	iorwf	___aldiv@divisor+2,w
 12319  0878  0421               	iorwf	___aldiv@divisor+1,w
 12320  0879  0420               	iorwf	___aldiv@divisor,w
 12321  087A  1903               	skipnz
 12322  087B  28B7               	goto	i1l4486
 12323  087C  01A8               	clrf	___aldiv@counter
 12324  087D  0AA8               	incf	___aldiv@counter,f
 12325  087E                     i1l4472:	
 12326  087E  1BA3               	btfsc	___aldiv@divisor+3,7
 12327  087F  288C               	goto	i1l4474
 12328  0880  3001               	movlw	1
 12329  0881                     u341_25:	
 12330  0881  35A0               	lslf	___aldiv@divisor,f
 12331  0882  0DA1               	rlf	___aldiv@divisor+1,f
 12332  0883  0DA2               	rlf	___aldiv@divisor+2,f
 12333  0884  0DA3               	rlf	___aldiv@divisor+3,f
 12334  0885  0B89               	decfsz	9,f
 12335  0886  2881               	goto	u341_25
 12336  0887  3001               	movlw	1
 12337  0888  00FC               	movwf	??___aldiv
 12338  0889  087C               	movf	??___aldiv,w
 12339  088A  07A8               	addwf	___aldiv@counter,f
 12340  088B  287E               	goto	i1l4472
 12341  088C                     i1l4474:	
 12342  088C  3001               	movlw	1
 12343  088D                     u343_25:	
 12344  088D  35AA               	lslf	___aldiv@quotient,f
 12345  088E  0DAB               	rlf	___aldiv@quotient+1,f
 12346  088F  0DAC               	rlf	___aldiv@quotient+2,f
 12347  0890  0DAD               	rlf	___aldiv@quotient+3,f
 12348  0891  0B89               	decfsz	9,f
 12349  0892  288D               	goto	u343_25
 12350  0893  0823               	movf	___aldiv@divisor+3,w
 12351  0894  0227               	subwf	___aldiv@dividend+3,w
 12352  0895  1D03               	skipz
 12353  0896  28A1               	goto	u344_25
 12354  0897  0822               	movf	___aldiv@divisor+2,w
 12355  0898  0226               	subwf	___aldiv@dividend+2,w
 12356  0899  1D03               	skipz
 12357  089A  28A1               	goto	u344_25
 12358  089B  0821               	movf	___aldiv@divisor+1,w
 12359  089C  0225               	subwf	___aldiv@dividend+1,w
 12360  089D  1D03               	skipz
 12361  089E  28A1               	goto	u344_25
 12362  089F  0820               	movf	___aldiv@divisor,w
 12363  08A0  0224               	subwf	___aldiv@dividend,w
 12364  08A1                     u344_25:	
 12365  08A1  1C03               	skipc
 12366  08A2  28AC               	goto	i1l4482
 12367  08A3  0820               	movf	___aldiv@divisor,w
 12368  08A4  02A4               	subwf	___aldiv@dividend,f
 12369  08A5  0821               	movf	___aldiv@divisor+1,w
 12370  08A6  3BA5               	subwfb	___aldiv@dividend+1,f
 12371  08A7  0822               	movf	___aldiv@divisor+2,w
 12372  08A8  3BA6               	subwfb	___aldiv@dividend+2,f
 12373  08A9  0823               	movf	___aldiv@divisor+3,w
 12374  08AA  3BA7               	subwfb	___aldiv@dividend+3,f
 12375  08AB  142A               	bsf	___aldiv@quotient,0
 12376  08AC                     i1l4482:	
 12377  08AC  3001               	movlw	1
 12378  08AD                     u345_25:	
 12379  08AD  36A3               	lsrf	___aldiv@divisor+3,f
 12380  08AE  0CA2               	rrf	___aldiv@divisor+2,f
 12381  08AF  0CA1               	rrf	___aldiv@divisor+1,f
 12382  08B0  0CA0               	rrf	___aldiv@divisor,f
 12383  08B1  0B89               	decfsz	9,f
 12384  08B2  28AD               	goto	u345_25
 12385  08B3  3001               	movlw	1
 12386  08B4  02A8               	subwf	___aldiv@counter,f
 12387  08B5  1D03               	btfss	3,2
 12388  08B6  288C               	goto	i1l4474
 12389  08B7                     i1l4486:	
 12390  08B7  0829               	movf	___aldiv@sign,w
 12391  08B8  1903               	btfsc	3,2
 12392  08B9  28C5               	goto	i1l4490
 12393  08BA  09AA               	comf	___aldiv@quotient,f
 12394  08BB  09AB               	comf	___aldiv@quotient+1,f
 12395  08BC  09AC               	comf	___aldiv@quotient+2,f
 12396  08BD  09AD               	comf	___aldiv@quotient+3,f
 12397  08BE  0AAA               	incf	___aldiv@quotient,f
 12398  08BF  1903               	skipnz
 12399  08C0  0AAB               	incf	___aldiv@quotient+1,f
 12400  08C1  1903               	skipnz
 12401  08C2  0AAC               	incf	___aldiv@quotient+2,f
 12402  08C3  1903               	skipnz
 12403  08C4  0AAD               	incf	___aldiv@quotient+3,f
 12404  08C5                     i1l4490:	
 12405  08C5  082D               	movf	___aldiv@quotient+3,w
 12406  08C6  00A3               	movwf	?___aldiv+3
 12407  08C7  082C               	movf	___aldiv@quotient+2,w
 12408  08C8  00A2               	movwf	?___aldiv+2
 12409  08C9  082B               	movf	___aldiv@quotient+1,w
 12410  08CA  00A1               	movwf	?___aldiv+1
 12411  08CB  082A               	movf	___aldiv@quotient,w
 12412  08CC  00A0               	movwf	?___aldiv
 12413  08CD  0008               	return
 12414  08CE                     __end_of___aldiv:	
 12415                           
 12416                           	psect	text37
 12417  1680                     __ptext37:	
 12418 ;; *************** function ___awdiv *****************
 12419 ;; Defined at:
 12420 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 12421 ;; Parameters:    Size  Location     Type
 12422 ;;  divisor         2    0[COMMON] int 
 12423 ;;  dividend        2    2[COMMON] int 
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;  quotient        2    7[COMMON] int 
 12426 ;;  sign            1    6[COMMON] unsigned char 
 12427 ;;  counter         1    5[COMMON] unsigned char 
 12428 ;; Return value:  Size  Location     Type
 12429 ;;                  2    0[COMMON] int 
 12430 ;; Registers used:
 12431 ;;		wreg, status,2, status,0
 12432 ;; Tracked objects:
 12433 ;;		On entry : 0/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12437 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12438 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12440 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12441 ;;Total ram usage:        9 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; This function calls:
 12444 ;;		Nothing
 12445 ;; This function is called by:
 12446 ;;		_isr
 12447 ;;		_USARTWriteInt
 12448 ;; This function uses a non-reentrant model
 12449 ;;
 12450                           
 12451                           
 12452                           ;psect for function ___awdiv
 12453  1680                     ___awdiv:	
 12454                           
 12455                           ;incstack = 0
 12456                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12457  1680  01F6               	clrf	___awdiv@sign
 12458  1681  1FF1               	btfss	___awdiv@divisor+1,7
 12459  1682  2E8A               	goto	i1l4942
 12460  1683  09F0               	comf	___awdiv@divisor,f
 12461  1684  09F1               	comf	___awdiv@divisor+1,f
 12462  1685  0AF0               	incf	___awdiv@divisor,f
 12463  1686  1903               	skipnz
 12464  1687  0AF1               	incf	___awdiv@divisor+1,f
 12465  1688  01F6               	clrf	___awdiv@sign
 12466  1689  0AF6               	incf	___awdiv@sign,f
 12467  168A                     i1l4942:	
 12468  168A  1FF3               	btfss	___awdiv@dividend+1,7
 12469  168B  2E95               	goto	i1l4948
 12470  168C  09F2               	comf	___awdiv@dividend,f
 12471  168D  09F3               	comf	___awdiv@dividend+1,f
 12472  168E  0AF2               	incf	___awdiv@dividend,f
 12473  168F  1903               	skipnz
 12474  1690  0AF3               	incf	___awdiv@dividend+1,f
 12475  1691  3001               	movlw	1
 12476  1692  00F4               	movwf	??___awdiv
 12477  1693  0874               	movf	??___awdiv,w
 12478  1694  06F6               	xorwf	___awdiv@sign,f
 12479  1695                     i1l4948:	
 12480  1695  01F7               	clrf	___awdiv@quotient
 12481  1696  01F8               	clrf	___awdiv@quotient+1
 12482  1697  0870               	movf	___awdiv@divisor,w
 12483  1698  0471               	iorwf	___awdiv@divisor+1,w
 12484  1699  1903               	btfsc	3,2
 12485  169A  2EC4               	goto	i1l4970
 12486  169B  01F5               	clrf	___awdiv@counter
 12487  169C  0AF5               	incf	___awdiv@counter,f
 12488  169D                     i1l4958:	
 12489  169D  1BF1               	btfsc	___awdiv@divisor+1,7
 12490  169E  2EA9               	goto	i1l4960
 12491  169F  3001               	movlw	1
 12492  16A0                     u425_25:	
 12493  16A0  35F0               	lslf	___awdiv@divisor,f
 12494  16A1  0DF1               	rlf	___awdiv@divisor+1,f
 12495  16A2  0B89               	decfsz	9,f
 12496  16A3  2EA0               	goto	u425_25
 12497  16A4  3001               	movlw	1
 12498  16A5  00F4               	movwf	??___awdiv
 12499  16A6  0874               	movf	??___awdiv,w
 12500  16A7  07F5               	addwf	___awdiv@counter,f
 12501  16A8  2E9D               	goto	i1l4958
 12502  16A9                     i1l4960:	
 12503  16A9  3001               	movlw	1
 12504  16AA                     u427_25:	
 12505  16AA  35F7               	lslf	___awdiv@quotient,f
 12506  16AB  0DF8               	rlf	___awdiv@quotient+1,f
 12507  16AC  0B89               	decfsz	9,f
 12508  16AD  2EAA               	goto	u427_25
 12509  16AE  0871               	movf	___awdiv@divisor+1,w
 12510  16AF  0273               	subwf	___awdiv@dividend+1,w
 12511  16B0  1D03               	skipz
 12512  16B1  2EB4               	goto	u428_25
 12513  16B2  0870               	movf	___awdiv@divisor,w
 12514  16B3  0272               	subwf	___awdiv@dividend,w
 12515  16B4                     u428_25:	
 12516  16B4  1C03               	skipc
 12517  16B5  2EBB               	goto	i1l4966
 12518  16B6  0870               	movf	___awdiv@divisor,w
 12519  16B7  02F2               	subwf	___awdiv@dividend,f
 12520  16B8  0871               	movf	___awdiv@divisor+1,w
 12521  16B9  3BF3               	subwfb	___awdiv@dividend+1,f
 12522  16BA  1477               	bsf	___awdiv@quotient,0
 12523  16BB                     i1l4966:	
 12524  16BB  3001               	movlw	1
 12525  16BC                     u429_25:	
 12526  16BC  36F1               	lsrf	___awdiv@divisor+1,f
 12527  16BD  0CF0               	rrf	___awdiv@divisor,f
 12528  16BE  0B89               	decfsz	9,f
 12529  16BF  2EBC               	goto	u429_25
 12530  16C0  3001               	movlw	1
 12531  16C1  02F5               	subwf	___awdiv@counter,f
 12532  16C2  1D03               	btfss	3,2
 12533  16C3  2EA9               	goto	i1l4960
 12534  16C4                     i1l4970:	
 12535  16C4  0876               	movf	___awdiv@sign,w
 12536  16C5  1903               	btfsc	3,2
 12537  16C6  2ECC               	goto	i1l4974
 12538  16C7  09F7               	comf	___awdiv@quotient,f
 12539  16C8  09F8               	comf	___awdiv@quotient+1,f
 12540  16C9  0AF7               	incf	___awdiv@quotient,f
 12541  16CA  1903               	skipnz
 12542  16CB  0AF8               	incf	___awdiv@quotient+1,f
 12543  16CC                     i1l4974:	
 12544  16CC  0878               	movf	___awdiv@quotient+1,w
 12545  16CD  00F1               	movwf	?___awdiv+1
 12546  16CE  0877               	movf	___awdiv@quotient,w
 12547  16CF  00F0               	movwf	?___awdiv
 12548  16D0  0008               	return
 12549  16D1                     __end_of___awdiv:	
 12550                           
 12551                           	psect	text38
 12552  15A6                     __ptext38:	
 12553 ;; *************** function _USARTHandleRxInt *****************
 12554 ;; Defined at:
 12555 ;;		line 93 in file "usart_pic16.c"
 12556 ;; Parameters:    Size  Location     Type
 12557 ;;		None
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;  data            1    4[COMMON] unsigned char 
 12560 ;; Return value:  Size  Location     Type
 12561 ;;                  1    wreg      void 
 12562 ;; Registers used:
 12563 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12564 ;; Tracked objects:
 12565 ;;		On entry : 0/0
 12566 ;;		On exit  : 0/0
 12567 ;;		Unchanged: 0/0
 12568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12571 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12572 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12573 ;;Total ram usage:        5 bytes
 12574 ;; Hardware stack levels used:    1
 12575 ;; This function calls:
 12576 ;;		Nothing
 12577 ;; This function is called by:
 12578 ;;		_isr
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           
 12583                           ;psect for function _USARTHandleRxInt
 12584  15A6                     _USARTHandleRxInt:	
 12585                           
 12586                           ;usart_pic16.c: 94: if(RB1==1)
 12587                           
 12588                           ;incstack = 0
 12589                           ; Regs used in _USARTHandleRxInt: [wreg+fsr1l+fsr1h+status,2+status,0]
 12590  15A6  0020               	movlb	0	; select bank0
 12591  15A7  1C8D               	btfss	13,1	;volatile
 12592  15A8  2DAB               	goto	i1l1666
 12593                           
 12594                           ;usart_pic16.c: 95: RB1=0;
 12595  15A9  108D               	bcf	13,1	;volatile
 12596  15AA  2DAC               	goto	i1l4694
 12597  15AB                     i1l1666:	
 12598                           
 12599                           ;usart_pic16.c: 96: else
 12600                           ;usart_pic16.c: 97: RB1=1;
 12601  15AB  148D               	bsf	13,1	;volatile
 12602  15AC                     i1l4694:	
 12603                           
 12604                           ;usart_pic16.c: 100: char data=RCREG;
 12605  15AC  0023               	movlb	3	; select bank3
 12606  15AD  0819               	movf	25,w	;volatile
 12607  15AE  00F0               	movwf	??_USARTHandleRxInt
 12608  15AF  0870               	movf	??_USARTHandleRxInt,w
 12609  15B0  00F4               	movwf	USARTHandleRxInt@data
 12610                           
 12611                           ;usart_pic16.c: 103: if(((UQEnd==64-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 12612  15B1  303F               	movlw	63
 12613  15B2  0020               	movlb	0	; select bank0
 12614  15B3  0669               	xorwf	_UQEnd,w	;volatile
 12615  15B4  1903               	btfsc	3,2
 12616  15B5  087D               	movf	_UQFront,w	;volatile
 12617  15B6  1903               	btfsc	3,2
 12618  15B7  2DCD               	goto	i1l4702
 12619  15B8  087D               	movf	_UQFront,w	;volatile
 12620  15B9  00F0               	movwf	??_USARTHandleRxInt
 12621  15BA  01F1               	clrf	??_USARTHandleRxInt+1
 12622  15BB  1BF0               	btfsc	??_USARTHandleRxInt,7
 12623  15BC  03F1               	decf	??_USARTHandleRxInt+1,f
 12624  15BD  3001               	movlw	1
 12625  15BE  0769               	addwf	_UQEnd,w	;volatile
 12626  15BF  00F2               	movwf	??_USARTHandleRxInt+2
 12627  15C0  01F3               	clrf	??_USARTHandleRxInt+3
 12628  15C1  1803               	skipnc
 12629  15C2  0AF3               	incf	??_USARTHandleRxInt+3,f
 12630  15C3  1BE9               	btfsc	_UQEnd,7	;volatile
 12631  15C4  03F3               	decf	??_USARTHandleRxInt+3,f
 12632  15C5  0871               	movf	??_USARTHandleRxInt+1,w
 12633  15C6  0673               	xorwf	??_USARTHandleRxInt+3,w
 12634  15C7  1D03               	skipz
 12635  15C8  2DCB               	goto	u401_25
 12636  15C9  0870               	movf	??_USARTHandleRxInt,w
 12637  15CA  0672               	xorwf	??_USARTHandleRxInt+2,w
 12638  15CB                     u401_25:	
 12639  15CB  1D03               	skipz
 12640  15CC  2DD5               	goto	i1l4706
 12641  15CD                     i1l4702:	
 12642                           
 12643                           ;usart_pic16.c: 104: {
 12644                           ;usart_pic16.c: 106: UQFront++;
 12645  15CD  3001               	movlw	1
 12646  15CE  00F0               	movwf	??_USARTHandleRxInt
 12647  15CF  0870               	movf	??_USARTHandleRxInt,w
 12648  15D0  07FD               	addwf	_UQFront,f	;volatile
 12649                           
 12650                           ;usart_pic16.c: 107: if(UQFront==64) UQFront=0;
 12651  15D1  3040               	movlw	64
 12652  15D2  067D               	xorwf	_UQFront,w	;volatile
 12653  15D3  1903               	btfsc	3,2
 12654  15D4  01FD               	clrf	_UQFront	;volatile
 12655  15D5                     i1l4706:	
 12656                           
 12657                           ;usart_pic16.c: 108: }
 12658                           ;usart_pic16.c: 110: if(UQEnd==64-1)
 12659  15D5  303F               	movlw	63
 12660  15D6  0020               	movlb	0	; select bank0
 12661  15D7  0669               	xorwf	_UQEnd,w	;volatile
 12662  15D8  1D03               	btfss	3,2
 12663  15D9  2DDC               	goto	i1l4710
 12664                           
 12665                           ;usart_pic16.c: 111: UQEnd=0;
 12666  15DA  01E9               	clrf	_UQEnd	;volatile
 12667  15DB  2DE0               	goto	i1l4712
 12668  15DC                     i1l4710:	
 12669                           
 12670                           ;usart_pic16.c: 112: else
 12671                           ;usart_pic16.c: 113: UQEnd++;
 12672  15DC  3001               	movlw	1
 12673  15DD  00F0               	movwf	??_USARTHandleRxInt
 12674  15DE  0870               	movf	??_USARTHandleRxInt,w
 12675  15DF  07E9               	addwf	_UQEnd,f	;volatile
 12676  15E0                     i1l4712:	
 12677                           
 12678                           ;usart_pic16.c: 115: URBuff[UQEnd]=data;
 12679  15E0  0874               	movf	USARTHandleRxInt@data,w
 12680  15E1  00F0               	movwf	??_USARTHandleRxInt
 12681  15E2  0869               	movf	_UQEnd,w
 12682  15E3  3E20               	addlw	(low (_URBuff| (0+768)))& (0+255)
 12683  15E4  0086               	movwf	6
 12684  15E5  3003               	movlw	3	; select bank6/7
 12685  15E6  0087               	movwf	7
 12686  15E7  0870               	movf	??_USARTHandleRxInt,w
 12687  15E8  0081               	movwf	1
 12688                           
 12689                           ;usart_pic16.c: 117: if(UQFront==-1) UQFront=0;
 12690  15E9  0A7D               	incf	_UQFront,w	;volatile
 12691  15EA  1D03               	btfss	3,2
 12692  15EB  0008               	return
 12693  15EC  01FD               	clrf	_UQFront	;volatile
 12694  15ED  0008               	return
 12695  15EE                     __end_of_USARTHandleRxInt:	
 12696  007E                     btemp	set	126	;btemp
 12697  007E                     int$flags	set	126
 12698  007E                     wtemp	set	126
 12699  007E                     wtemp0	set	126
 12700  0080                     wtemp1	set	128
 12701  0082                     wtemp2	set	130
 12702  0084                     wtemp3	set	132
 12703  0086                     wtemp4	set	134
 12704  0088                     wtemp5	set	136
 12705  007F                     wtemp6	set	127
 12706  007E                     ttemp	set	126
 12707  007E                     ttemp0	set	126
 12708  0081                     ttemp1	set	129
 12709  0084                     ttemp2	set	132
 12710  0087                     ttemp3	set	135
 12711  007F                     ttemp4	set	127
 12712  007E                     ltemp	set	126
 12713  007E                     ltemp0	set	126
 12714  0082                     ltemp1	set	130
 12715  0086                     ltemp2	set	134
 12716  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        790
    BSS         287
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     49      77
    BANK3            80      0      80
    BANK4            80      8      68
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      61
    BANK10           80      0      64
    BANK11           80      0       0
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->___aldiv
    ___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->___aldiv

Critical Paths under _main in BANK1

    _set_subdivision->_trunc
    _trunc->___fttol
    ___fttol->_map
    ___altoft->___fttol
    ___awtoft->___ftpack
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->_trunc
    _trunc->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   38538
                                             34 BANK2     15    15      0
                                              0 BANK4      8     8      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                    _set_subdivision
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   13002
                                             22 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    4642
                                             79 BANK1      1     1      0
                                             14 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     452
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1064
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2805
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3427
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14889
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     430
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3252
                                             37 BANK1     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (2) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0    1712
                                             26 BANK0     11    11      0
                   _USARTHandleRxInt
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _modulation                                          12     4      8     872
                                             14 BANK0     12     4      8
                            ___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             15     7      8     556
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (6) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
       _frexp (ARG)

 _isr (ROOT)
   _USARTHandleRxInt
   ___awdiv
   _modulation
     ___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2EC      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.3%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      40      26       80.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2EC      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Jan 05 23:57:44 2017

                    ___altoft@exp 012C                       __CFG_CP$OFF 0000                     ___altoft@sign 012D  
                    ___awdiv@sign 0076                _topTactile_pressed 015F                USARTInit@baud_rate 00A0  
                    ___ftadd@exp1 00B4                      ___ftadd@exp2 00B3                      ___ftadd@sign 00B2  
                             l610 17BC                               l383 13A6              __size_of_adc_convert 0013  
                             l581 124A                               l574 07A8                               l770 13F6  
                             l772 13F9                               l773 13FC                               l765 1700  
                             l774 13FF                               l766 1724                               l775 1402  
                             l777 1405                               l778 1429                               _GIE 005F  
                             _RB1 0069                               _PR2 001B                               _map 08CE  
                             _isr 0004                               _tap 02A0                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
             set_subdivision@tmpX 0140           __end_of_set_leds_bottom 142A                      __CFG_LVP$OFF 0000  
                    ___ftdiv@cntr 00CF                      ___ftdiv@sign 00D4                              _B25k 0220  
                            l1644 1598                              l1921 069D                              l6114 135C  
                            l1890 1758                              l6130 172E                              l6220 09CC  
                            l6212 09AD                              l1981 09D6                              l6118 1366  
                            l6134 1735                              l6222 09DA                              l6214 09BE  
                            l6302 07CB                              ?_map 00D5                              l6144 175D  
                            l6136 173F                              l1897 176B                              l6250 16E0  
                            l6402 1661                              l1898 1773                              l6146 1765  
                            l6138 1744                              l6226 09E8                              l6252 16E8  
                            l6260 1707                              l6500 0A0F                              l6420 128F  
                            l6236 13C3                              l6254 16F0                              l6430 0626  
                            l6182 0816                              l6256 16F8                              l6248 16D8  
                            l6600 156F                              l6440 063C                              l6520 0A66  
                            l6184 0826                              l6338 140C                              l6602 1571  
                            l6434 062D                              l6506 0A25                              l6194 0974  
                            l6460 0673                              l6452 0656                              l6700 0707  
                            l6606 1575                              l6470 068F                              l6462 0678  
                            l6542 0AB8                              l6702 070B                              l6710 071C  
                            l6480 06C1                              l6472 0699                              l6464 067C  
                            l6528 0A7F                              l6560 0B09                              l6704 0711  
                            l6712 0735                              l6800 0C80                              l6490 06DC  
                            l6458 0669                              l6706 0715                              l6660 17CF  
                            l6476 06AF                              l6572 0B25                              l6564 0B11  
                            l6548 0ACE                              l6820 0D57                              ?_isr 0070  
                            l6662 17D8                              l6576 0B2D                              l6840 0DFA  
                            l6808 0CEE                              l7570 1584                              l6834 0DBC  
                            l7580 1412                              l7572 1589                              l6596 156B  
                            l6860 0F24                              l6852 0EA2                              l7574 158E  
                            l6598 156D                              l6790 0BF4                              l6774 0B78  
                            l7576 1593                              l7568 0721                              l6880 0FF7  
                            l6864 0F6C                              l6856 0EEA                              l6848 0E68  
                            l7578 170D                              l6698 0703                              l6882 0FA3  
                            l6884 0FFD                              l6796 0C46                              u6015 1367  
                            u6025 136E                              u6105 1760                              _PEIE 005E  
                            u6215 097C                              u6145 177A                              u6065 173A  
                            u7123 0FEF                              u7115 0FD7                              u7035 0DD7  
                            _RCIE 048D                              _RCIF 008D                              u6085 1753  
                            u6245 09AE                              u7045 0DF4                              u6505 0657  
                            u6185 081B                              u7065 0E83                              u6275 09CD  
                            u7075 0EA0                              u6380 165F                              u7085 0F05  
                            u6375 1641                              u6535 066A                              u7095 0F22  
                            u6705 0A80                              u6900 17D6                              u6565 067D  
                            u6815 0B2E                              u6665 0A37                              u6825 0B34  
                            u6745 0ADA                              u6595 0690                              u6675 0A47  
                            u6755 0AEA                              u6685 0A67                              u6855 12B2  
                            u6695 0A76                              u6775 0B12                              u6935 07A1  
                            u6865 12B8                              u6785 0B18                              u6955 0BD5  
                            u6885 17B5                              u6965 0BF2                              u6895 17C8  
                            u6975 0C61                              u6985 0C7E                      __CFG_WRT$OFF 0000  
                   __CFG_FCMEN$ON 0000                              _iCnt 01DC                              _mod1 03A0  
                            _mod2 0420                              _mod3 04A0                              _main 0B55  
                    ___ftpack@arg 00A0                      ___ftpack@exp 00A3                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              map@x 00D5  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
                            start 0334                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 11D8                   _expressModeCnst 01EC      __end_of_setSwitchBypassState 1680  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00C3  
                    ___ftmul@sign 00C4                   __end_of_InitApp 1353                      ___fttol@exp1 0125  
                           ??_map 00E4                      ___fttol@lval 0121                             ??_isr 003A  
                 _switchBypass_up 01E5                 ?_USARTHandleRxInt 0070         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 08CE                             ?_main 0070                   __end_of___awdiv 16D1  
              ??_USARTHandleRxInt 0070                   __end_of___ftadd 06F4                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                             _CCPR9 061A                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 0AA1                   __end_of___ftneg 11F1                   __end_of___ftmul 0B55  
                 ___awdiv@divisor 0070                   __end_of___fttol 09F8                             i1l144 0128  
                           i1l181 032F                             i1l176 0327                             i1l765 1613  
                           i1l766 1635                   ___awdiv@counter 0075                             _RCREG 0199  
                           _SPBRG 019B                             _TXREG 019A                             _UQEnd 0069  
             _ConfigureOscillator 11D0                      ?_init_timer0 0070                      ?_init_timer2 0070  
             ___lmul@multiplicand 00A4                   _switchTap_state 016C                     ___awtoft@sign 00AD  
                           _frexp 13B5                             _myBuf 0520                             _errno 01C7  
                   ___ftpack@sign 00A4                             _timer 0060                             main@i 025C  
                           _trunc 07AE                  __end_ofi1___lmul 1323                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 13B5                __size_of_USARTInit 0043                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
           set_subdivision@scalar 013D              ?_ConfigureOscillator 0070                   __initialization 0336  
         _updateSwitchBypassState 0003                      __end_of_main 1000           __size_of_InitializeTaps 0026  
             i1___lmul@multiplier 0070                    __CFG_LPBOR$OFF 0000                   _set_subdivision 06F4  
                          ??_main 0142                     ___fttol@sign1 0120           __size_of_FLASH_ReadWord 0020  
                  _feedback_timer 0153                    _feedback_state 016B                    _feedback_start 015B  
                ?_set_leds_bottom 00A0                            ?_frexp 00A0                  __end_of___altoft 084C  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0072  
             _baseline_delay_time 0045                  __end_of___awtoft 12A6                  __end_of___ftpack 178A  
                          ?_trunc 012E                            i1l5100 0261                            i1l5020 00CC  
                          i1l5004 0012                            i1l5014 00B2                            i1l5112 0287  
                          i1l5104 026E                            i1l1666 15AB                            i1l5122 029C  
                          i1l5130 02F6                            i1l5050 0176                            i1l5116 0296  
                          i1l5108 0281                            i1l5124 02B3                            i1l5052 0186  
                          i1l5028 0115                            i1l5142 0329                            i1l5118 0299  
                          i1l5062 01A7                            i1l5054 0188                            i1l1784 085D  
                          i1l5080 01F7                            i1l5064 01B6                            i1l5146 032E  
                          i1l5082 0206                            i1l5058 019C                            i1l5066 01B8  
                          i1l5092 0257                            i1l5076 01EA                            i1l4710 15DC  
                          i1l4702 15CD                            i1l5086 0213                            i1l4712 15E0  
                          i1l4472 087E                            i1l4464 086E                            i1l5096 025D  
                          i1l4706 15D5                            i1l4490 08C5                            i1l4482 08AC  
                          i1l4474 088C                            i1l4486 08B7                            i1l4682 1306  
                          i1l4694 15AC                            i1l4942 168A                            i1l4678 12FC  
                          i1l4960 16A9                            i1l4970 16C4                            i1l4948 1695  
                          i1l4980 15F5                            i1l4974 16CC                            i1l4966 16BB  
                          i1l4958 169D                            i1l4982 15FB                            i1l4984 1601  
                          i1l4992 1619                            i1l4986 1607                            i1l4988 160D  
                          i1l7582 02A2                            i1l7584 161E                            u401_25 15CB  
                          u341_25 0881                            u343_25 088D                            u440_23 00E5  
                          _PMADRH 0192                            u344_25 08A1                            _PMADRL 0191  
                          u425_25 16A0                            u345_25 08AD                            _PMDATH 0194  
                          _PMDATL 0193                            u427_25 16AA                            _PMCON2 0196  
                          u428_25 16B4                            u436_25 00A9                            u453_23 01DA  
                          u445_23 0144                            u429_25 16BC                            u461_25 0309  
                          u462_25 0322                            u438_25 00C3                            u457_23 023B  
                          u394_25 1307                            u458_25 0251                            u395_25 130E  
                          u459_25 027A                    _debounce_count 01BF                    _debounce_mode1 01C1  
                  _debounce_mode2 01C3                            _URBuff 0320                         ??_InitApp 00A0  
           ??_ConfigureOscillator 00A0                    __CFG_PWRTE$OFF 0000                            ___lmul 1353  
                       ??___aldiv 007C                         ??___awdiv 0074                         ??___ftadd 00AE  
                  __CFG_STVREN$ON 0000                         ??___ftdiv 00CB                         ??___ftneg 00A3  
                       ??___ftmul 00BB                         ??___fttol 00EB                  __end_of_init_adc 11FB  
                __end_of_init_pwm 1563                  ___awdiv@quotient 0077                 __end_of_USARTInit 15A6  
           ___ftmul@f3_as_product 00C0                      __pdataBIGRAM 23E8           FLASH_ReadWord@flashAddr 00A0  
            _getSwitchBypassState 11D4                         ??_wait_ms 00AE              _setSwitchBypassState 1636  
                          trunc@i 0131                            trunc@x 012E           __end_of__initialization 03F2  
                      ___altoft@c 0126                        ___ftadd@f1 00A8                        ___ftadd@f2 00AB  
               _bypass_turning_on 015A                        ___ftdiv@f1 00C8                        ___ftdiv@f2 00C5  
                      ___ftdiv@f3 00D0                    _top_push_state 0051         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00A0               _switchBypass_toggle 01D9                        ___awtoft@c 00A8  
         __end_of_set_subdivision 07AE                        ___ftmul@f1 00B5                        ___ftmul@f2 00B8  
               _feedbackTriggered 01DB                        ___fttol@f1 00E7                    __pcstackCOMMON 0070  
                    __pidataBANK0 1251                      __pidataBANK2 1213                      __pidataBANK3 122F  
                    __pidataBANK4 12CC                      __pidataBANK7 14A4                      __pidataBANK8 1467  
                    __pidataBANK9 142A                     __end_of_frexp 13EF                     __end_of_trunc 0800  
                _initSwitchBypass 1220                         ?i1___lmul 0070                   _doubleTap_state 0064  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2  
                         ??_frexp 00A4              __size_of_init_timer0 0007              __size_of_init_timer2 0009  
                         ??_trunc 00EF                        __pbssBANK0 0058                        __pbssBANK2 0151  
                      __pbssBANK3 01A0                        __pbssBANK4 0248                        __pbssBANK5 02A0  
                      __pbssBANK6 0320                  ??i1_set_leds_top 0074                   __CFG_VCAPEN$OFF 0000  
                      __pnvCOMMON 007D                        _delayArray 23E8                        _delay_time 0049  
                _long_press_limit 004F                        _delayfound 01C5                        __pmaintext 0B55  
                  _InitializeTaps 12A6                           ?___lmul 00A0                        __pintentry 0004  
                      _blink_rate 0053                     ??_adc_convert 00A2                         ?___altoft 0126  
                  ___lmul@product 00A8                         ?___awtoft 00A8                         ?___ftpack 00A0  
                      ??i1___lmul 0078                    _FLASH_ReadWord 1264   __end_of_updateSwitchBypassState 0004  
                     modulation@x 002E                       modulation@y 0032                   _debounce_bypass 01BD  
              USARTWriteInt@F3536 01A0         __size_of_USARTHandleRxInt 0048                     _suspend_blink 0067  
                         _UQFront 007D                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 1323            __end_of_InitializeTaps 12CC                     ?_set_leds_top 00A0  
                      _knob1_prev 0160                        _knob2_prev 0162                        _knob3_prev 0164  
                      _knob4_prev 0166                        _knob5_prev 0168                  ?_set_subdivision 0136  
                         ___aldiv 084C                           ___awdiv 1680                   __size_of___lmul 0030  
                         ___ftadd 05FE                           ___ftdiv 09F8                           ___ftneg 11E8  
                      _knob_1_pos 01C9                        _knob_2_pos 01CB                           ___ftmul 0AA1  
                      _knob_3_pos 01CD                           ___fttol 0959                        _knob_4_pos 01CF  
                      _knob_5_pos 01D1                 _switchTap_pressed 0068                        ??___altoft 012A  
          __end_of_FLASH_ReadWord 1284                        ??___awtoft 00AB                        ??___ftpack 00A5  
              InitializeTaps@itap 00A1                           __ptext1 06F4                           __ptext2 07AE  
                         __ptext3 13B5                           __ptext4 0959                           __ptext5 0801  
                         __ptext6 1284                           __ptext7 08CE                           __ptext8 11E8  
                         __ptext9 0AA1            ??_getSwitchBypassState 00A2                         _T2CONbits 001C  
                _adjust_sub_delay 01B9                      __size_of_map 008B                      __size_of_isr 0330  
          ??_setSwitchBypassState 00B4               __end_of_adc_convert 1251                  ___aldiv@dividend 0024  
                         _wait_ms 1383                           clrloop0 1208              end_of_initialization 03F2  
                      _modulation 14E1                           init_ram 11FB                        ??_init_adc 00A0  
                         initloop 11FC                        ??_init_pwm 00A0      updateSwitchBypassState@state 00A0  
                   _longTap_timer 0155                     _longTap_state 0054                     _longTap_start 015C  
                  ??_set_leds_top 00A4                   ?_InitializeTaps 0070            i1set_leds_top@ledState 0072  
                       _RCSTAbits 019D                  ___aldiv@quotient 002A         FLASH_ReadWord@GIEBitValue 00A2  
                 ?_FLASH_ReadWord 00A0                 _expressionChannel 016A                         _PORTAbits 000C  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
                      _test_timer 01B5                         _USARTInit 1563                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D       __end_of_ConfigureOscillator 11D4  
                      map@out_max 00E1                        map@out_min 00DE          __end_of_initSwitchBypass 122F  
                     _CCP1CONbits 0293                       ___ftdiv@exp 00D3          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A                         _TXSTAbits 019E              _switchBypass_pressed 01D7  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                       _CCP7CONbits 0616                       ___ftmul@exp 00BF  
              adc_convert@channel 00A3                       _CCP8CONbits 0619                       _CCP9CONbits 061C  
            set_leds_top@ledState 00A2                    __end_of___lmul 1383                     __pidataBIGRAM 03F6  
                    _double_timer 01A5                       _adc_convert 123E                    _switchTap_down 015E  
           i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F               start_initialization 0336  
                      ?_USARTInit 00A0             _bottomTactile_pressed 0159                       __end_of_map 0959  
                     __end_of_isr 0334                  _USARTHandleRxInt 15A6                _adjusted_pot_value 01BB  
                     ?_modulation 002E                        frexp@value 00A0                          ??___lmul 00A8  
                     __pdataBANK0 0045                       __pdataBANK2 0160                       __pdataBANK3 01DF  
                     __pdataBANK4 0220                       __pdataBANK7 03A0                       __pdataBANK8 0420  
                     __pdataBANK9 04A0                     _tap_iteration 01E7                 __size_of___altoft 004B  
                     __pbssBANK10 0520                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0              __end_of_set_leds_top 1725  
                       ___latbits 0003                _switchBypass_state 0057                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK4 025C  
                  _expSwitchState 01EB                     _delay_counter 0151                  i1___lmul@product 0078  
        ?_updateSwitchBypassState 00A0                    isr@tmpSubDelay 0043                          ?_InitApp 0070  
                       __pnvBANK0 0069                         __pnvBANK3 01EE                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                          ?___aldiv 0020                 ??_set_leds_bottom 00A2  
              _currentBypassState 01EA                          ?___awdiv 0070                          ?___ftadd 00A8  
                        ?___ftdiv 00C5                          ?___ftneg 00A0                          ?___ftmul 00B5  
                        ?___fttol 00E7                       _blink_delay 01DF               __size_of_modulation 0041  
                     _blink_state 01E9                       ??_USARTInit 00A2                        _B25kLength 01EE  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                        ?_wait_ms 00AC                    __size_of_frexp 003A                    _presetModeCnst 01ED  
                  __size_of_trunc 0052               __end_of_init_timer0 11DF               __end_of_init_timer2 11E8  
                       _mod_value 01D3                         _mod_timer 01AD                  ??_InitializeTaps 00A0  
                 ___aldiv@divisor 0020                   ___aldiv@counter 0028                    _presetSaveMode 0066  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 01E3                         clear_ram0 1207  
                       _tap_timer 005C                         _tap_total 01B1                     set_leds_top@x 00A0  
                        _PIR1bits 0011                  ??_FLASH_ReadWord 00A2           __size_ofi1_set_leds_top 0048  
       initSwitchBypass@initState 00B6                         map@in_max 00DB                         map@in_min 00D8  
                       _sub_timer 0058                        _ADCON0bits 009D                          i1___lmul 12F4  
                      _ADCON1bits 009E                         main@i_385 025E                         main@i_386 0260  
                       main@i_387 0262          __size_of_set_subdivision 00BA                  set_subdivision@x 0136  
                set_subdivision@y 0138     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A  
               ___lmul@multiplier 00A0                 _ReadSavedSettings 178A                 ?_initSwitchBypass 0070  
                  wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070                    wait_ms@timemsl 00AE  
                       frexp@eptr 00A3       setSwitchBypassState@f_state 00B2                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                       _mode1_state 01DD                       _mode2_state 0065  
             ??_ReadSavedSettings 00A4                        _APFCONbits 011D          __end_of_USARTHandleRxInt 15EE  
                __size_of___aldiv 0082                  __size_of___awdiv 0051                  __size_of___ftadd 00F6  
                __size_of___ftdiv 00A9                      ?_adc_convert 00A0                  __size_of___ftneg 0009  
                        ___altoft 0801                  __size_of___ftmul 00B4                  __size_of___fttol 009F  
                        ___awtoft 1284             __size_of_set_leds_top 0054                          ___ftpack 1725  
                        _map$2555 00E4            _preset_programmning_on 01DE                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 00A0                       _init_timer0 11D8  
                     _init_timer2 11DF                _delay_time_changed 01E1                          __ptext10 09F8  
                        __ptext11 05FE                          __ptext20 1563                          __ptext12 1725  
                        __ptext21 178A                          __ptext13 1220                          __ptext30 11F1  
                        __ptext22 16D1                          __ptext14 1636                          __ptext31 11D0  
                        __ptext23 13EF                          __ptext15 1383                          __ptext24 1264  
                        __ptext16 1353                          __ptext33 15EE                          __ptext25 12A6  
                        __ptext17 0003                          __ptext34 14E1                          __ptext26 1323  
                        __ptext18 11D4                          __ptext35 12F4                          __ptext27 1522  
                        __ptext19 123E                          __ptext36 084C                          __ptext28 11DF  
                        __ptext37 1680                          __ptext29 11D8                          __ptext38 15A6  
       __end_of_ReadSavedSettings 1800                  __size_of_wait_ms 0032                          _ledState 01A9  
                   _presetChannel 0056                      ??_modulation 0036                       _mod_counter 0157  
                      trunc@expon 0134                          _init_adc 11F1                     __size_of_main 04AB  
                        _init_pwm 1522      __size_of_ConfigureOscillator 0004                      _set_leds_top 16D1  
                        _num_taps 0055                          int$flags 007E                   i1set_leds_top@x 0070  
              __end_of_modulation 1522                        _INTCONbits 000B                       _tap_history 0248  
               ??_set_subdivision 013A                          intlevel1 0000                   _set_leds_bottom 13EF  
                      _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 01D5  
                      _OSCCONbits 0099                      _preset_blink 015D                    i1_set_leds_top 15EE  
__size_of_updateSwitchBypassState 0001              USARTHandleRxInt@data 0074                      ___aldiv@sign 0029  
      __size_of_ReadSavedSettings 0076                      _CCP10CONbits 061F                 _bottom_push_state 004D  
          __end_ofi1_set_leds_top 1636  
