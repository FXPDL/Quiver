

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jan 15 18:27:25 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x920,80
   111                           	dabs	1,0x8A0,80
   112                           	dabs	1,0x820,80
   113                           	dabs	1,0x7A0,80
   114                           	dabs	1,0x742,46
   115                           	dabs	1,0x720,34
   116                           	dabs	1,0x6A0,80
   117                           	dabs	1,0x620,80
   118                           	dabs	1,0x5BA,54
   119                           	dabs	1,0x2482,0,_cosArray
   120                           	dabs	1,0x238A,0,_modArray
   121                           	dabs	1,0x7E,2
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0110                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  011D                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  018F                     	;# 
   182  0190                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0194                     	;# 
   189  0195                     	;# 
   190  0196                     	;# 
   191  0197                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  020D                     	;# 
   216  020F                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0219                     	;# 
   234  021A                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021D                     	;# 
   238  021E                     	;# 
   239  021F                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  029F                     	;# 
   253  030C                     	;# 
   254  030D                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0318                     	;# 
   260  0318                     	;# 
   261  0319                     	;# 
   262  031A                     	;# 
   263  031C                     	;# 
   264  031C                     	;# 
   265  031D                     	;# 
   266  031E                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  040C                     	;# 
   273  040D                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  048D                     	;# 
   291  0491                     	;# 
   292  0491                     	;# 
   293  0492                     	;# 
   294  0492                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0495                     	;# 
   302  0496                     	;# 
   303  0496                     	;# 
   304  0497                     	;# 
   305  0497                     	;# 
   306  0595                     	;# 
   307  0596                     	;# 
   308  0597                     	;# 
   309  059C                     	;# 
   310  059D                     	;# 
   311  059E                     	;# 
   312  0611                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0614                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0617                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  061A                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061D                     	;# 
   329  061D                     	;# 
   330  061E                     	;# 
   331  061F                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  008F                     	;# 
   377  0090                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0093                     	;# 
   381  0094                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0110                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  011D                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  018F                     	;# 
   403  0190                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  0197                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  020D                     	;# 
   437  020F                     	;# 
   438  0210                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0219                     	;# 
   455  021A                     	;# 
   456  021B                     	;# 
   457  021C                     	;# 
   458  021D                     	;# 
   459  021E                     	;# 
   460  021F                     	;# 
   461  028C                     	;# 
   462  028D                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  029D                     	;# 
   472  029E                     	;# 
   473  029F                     	;# 
   474  030C                     	;# 
   475  030D                     	;# 
   476  0311                     	;# 
   477  0311                     	;# 
   478  0312                     	;# 
   479  0313                     	;# 
   480  0318                     	;# 
   481  0318                     	;# 
   482  0319                     	;# 
   483  031A                     	;# 
   484  031C                     	;# 
   485  031C                     	;# 
   486  031D                     	;# 
   487  031E                     	;# 
   488  038C                     	;# 
   489  038D                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  040C                     	;# 
   494  040D                     	;# 
   495  0411                     	;# 
   496  0411                     	;# 
   497  0412                     	;# 
   498  0413                     	;# 
   499  0414                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  0418                     	;# 
   504  0418                     	;# 
   505  0419                     	;# 
   506  041A                     	;# 
   507  041B                     	;# 
   508  041C                     	;# 
   509  041D                     	;# 
   510  041E                     	;# 
   511  048D                     	;# 
   512  0491                     	;# 
   513  0491                     	;# 
   514  0492                     	;# 
   515  0492                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0494                     	;# 
   520  0494                     	;# 
   521  0495                     	;# 
   522  0495                     	;# 
   523  0496                     	;# 
   524  0496                     	;# 
   525  0497                     	;# 
   526  0497                     	;# 
   527  0595                     	;# 
   528  0596                     	;# 
   529  0597                     	;# 
   530  059C                     	;# 
   531  059D                     	;# 
   532  059E                     	;# 
   533  0611                     	;# 
   534  0611                     	;# 
   535  0612                     	;# 
   536  0613                     	;# 
   537  0614                     	;# 
   538  0614                     	;# 
   539  0615                     	;# 
   540  0616                     	;# 
   541  0617                     	;# 
   542  0617                     	;# 
   543  0618                     	;# 
   544  0619                     	;# 
   545  061A                     	;# 
   546  061A                     	;# 
   547  061B                     	;# 
   548  061C                     	;# 
   549  061D                     	;# 
   550  061D                     	;# 
   551  061E                     	;# 
   552  061F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  008F                     	;# 
   598  0090                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  010F                     	;# 
   617  0110                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018D                     	;# 
   623  018F                     	;# 
   624  0190                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0197                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  020F                     	;# 
   659  0210                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  028C                     	;# 
   683  028D                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  029D                     	;# 
   693  029E                     	;# 
   694  029F                     	;# 
   695  030C                     	;# 
   696  030D                     	;# 
   697  0311                     	;# 
   698  0311                     	;# 
   699  0312                     	;# 
   700  0313                     	;# 
   701  0318                     	;# 
   702  0318                     	;# 
   703  0319                     	;# 
   704  031A                     	;# 
   705  031C                     	;# 
   706  031C                     	;# 
   707  031D                     	;# 
   708  031E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  040C                     	;# 
   715  040D                     	;# 
   716  0411                     	;# 
   717  0411                     	;# 
   718  0412                     	;# 
   719  0413                     	;# 
   720  0414                     	;# 
   721  0415                     	;# 
   722  0416                     	;# 
   723  0417                     	;# 
   724  0418                     	;# 
   725  0418                     	;# 
   726  0419                     	;# 
   727  041A                     	;# 
   728  041B                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  048D                     	;# 
   733  0491                     	;# 
   734  0491                     	;# 
   735  0492                     	;# 
   736  0492                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0494                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0495                     	;# 
   744  0496                     	;# 
   745  0496                     	;# 
   746  0497                     	;# 
   747  0497                     	;# 
   748  0595                     	;# 
   749  0596                     	;# 
   750  0597                     	;# 
   751  059C                     	;# 
   752  059D                     	;# 
   753  059E                     	;# 
   754  0611                     	;# 
   755  0611                     	;# 
   756  0612                     	;# 
   757  0613                     	;# 
   758  0614                     	;# 
   759  0614                     	;# 
   760  0615                     	;# 
   761  0616                     	;# 
   762  0617                     	;# 
   763  0617                     	;# 
   764  0618                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061A                     	;# 
   768  061B                     	;# 
   769  061C                     	;# 
   770  061D                     	;# 
   771  061D                     	;# 
   772  061E                     	;# 
   773  061F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0110                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  011D                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018F                     	;# 
   845  0190                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0197                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  020F                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021E                     	;# 
   902  021F                     	;# 
   903  028C                     	;# 
   904  028D                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  029D                     	;# 
   914  029E                     	;# 
   915  029F                     	;# 
   916  030C                     	;# 
   917  030D                     	;# 
   918  0311                     	;# 
   919  0311                     	;# 
   920  0312                     	;# 
   921  0313                     	;# 
   922  0318                     	;# 
   923  0318                     	;# 
   924  0319                     	;# 
   925  031A                     	;# 
   926  031C                     	;# 
   927  031C                     	;# 
   928  031D                     	;# 
   929  031E                     	;# 
   930  038C                     	;# 
   931  038D                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  040C                     	;# 
   936  040D                     	;# 
   937  0411                     	;# 
   938  0411                     	;# 
   939  0412                     	;# 
   940  0413                     	;# 
   941  0414                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  0418                     	;# 
   946  0418                     	;# 
   947  0419                     	;# 
   948  041A                     	;# 
   949  041B                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  048D                     	;# 
   954  0491                     	;# 
   955  0491                     	;# 
   956  0492                     	;# 
   957  0492                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0494                     	;# 
   962  0494                     	;# 
   963  0495                     	;# 
   964  0495                     	;# 
   965  0496                     	;# 
   966  0496                     	;# 
   967  0497                     	;# 
   968  0497                     	;# 
   969  0595                     	;# 
   970  0596                     	;# 
   971  0597                     	;# 
   972  059C                     	;# 
   973  059D                     	;# 
   974  059E                     	;# 
   975  0611                     	;# 
   976  0611                     	;# 
   977  0612                     	;# 
   978  0613                     	;# 
   979  0614                     	;# 
   980  0614                     	;# 
   981  0615                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061A                     	;# 
   989  061B                     	;# 
   990  061C                     	;# 
   991  061D                     	;# 
   992  061D                     	;# 
   993  061E                     	;# 
   994  061F                     	;# 
   995  0FE4                     	;# 
   996  0FE5                     	;# 
   997  0FE6                     	;# 
   998  0FE7                     	;# 
   999  0FE8                     	;# 
  1000  0FE9                     	;# 
  1001  0FEA                     	;# 
  1002  0FEB                     	;# 
  1003  0FED                     	;# 
  1004  0FEE                     	;# 
  1005  0FEF                     	;# 
  1006  0000                     	;# 
  1007  0001                     	;# 
  1008  0002                     	;# 
  1009  0003                     	;# 
  1010  0004                     	;# 
  1011  0005                     	;# 
  1012  0006                     	;# 
  1013  0007                     	;# 
  1014  0008                     	;# 
  1015  0009                     	;# 
  1016  000A                     	;# 
  1017  000B                     	;# 
  1018  000C                     	;# 
  1019  000D                     	;# 
  1020  000E                     	;# 
  1021  000F                     	;# 
  1022  0010                     	;# 
  1023  0011                     	;# 
  1024  0012                     	;# 
  1025  0013                     	;# 
  1026  0014                     	;# 
  1027  0015                     	;# 
  1028  0016                     	;# 
  1029  0016                     	;# 
  1030  0017                     	;# 
  1031  0018                     	;# 
  1032  0019                     	;# 
  1033  001A                     	;# 
  1034  001B                     	;# 
  1035  001C                     	;# 
  1036  008C                     	;# 
  1037  008D                     	;# 
  1038  008E                     	;# 
  1039  008F                     	;# 
  1040  0090                     	;# 
  1041  0091                     	;# 
  1042  0092                     	;# 
  1043  0093                     	;# 
  1044  0094                     	;# 
  1045  0095                     	;# 
  1046  0096                     	;# 
  1047  0097                     	;# 
  1048  0099                     	;# 
  1049  009A                     	;# 
  1050  009B                     	;# 
  1051  009B                     	;# 
  1052  009C                     	;# 
  1053  009D                     	;# 
  1054  009E                     	;# 
  1055  010C                     	;# 
  1056  010D                     	;# 
  1057  010E                     	;# 
  1058  010F                     	;# 
  1059  0110                     	;# 
  1060  0116                     	;# 
  1061  0117                     	;# 
  1062  011D                     	;# 
  1063  018C                     	;# 
  1064  018D                     	;# 
  1065  018F                     	;# 
  1066  0190                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0194                     	;# 
  1073  0195                     	;# 
  1074  0196                     	;# 
  1075  0197                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  020D                     	;# 
  1100  020F                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0219                     	;# 
  1118  021A                     	;# 
  1119  021B                     	;# 
  1120  021C                     	;# 
  1121  021D                     	;# 
  1122  021E                     	;# 
  1123  021F                     	;# 
  1124  028C                     	;# 
  1125  028D                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0298                     	;# 
  1131  0298                     	;# 
  1132  0299                     	;# 
  1133  029A                     	;# 
  1134  029D                     	;# 
  1135  029E                     	;# 
  1136  029F                     	;# 
  1137  030C                     	;# 
  1138  030D                     	;# 
  1139  0311                     	;# 
  1140  0311                     	;# 
  1141  0312                     	;# 
  1142  0313                     	;# 
  1143  0318                     	;# 
  1144  0318                     	;# 
  1145  0319                     	;# 
  1146  031A                     	;# 
  1147  031C                     	;# 
  1148  031C                     	;# 
  1149  031D                     	;# 
  1150  031E                     	;# 
  1151  038C                     	;# 
  1152  038D                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  040C                     	;# 
  1157  040D                     	;# 
  1158  0411                     	;# 
  1159  0411                     	;# 
  1160  0412                     	;# 
  1161  0413                     	;# 
  1162  0414                     	;# 
  1163  0415                     	;# 
  1164  0416                     	;# 
  1165  0417                     	;# 
  1166  0418                     	;# 
  1167  0418                     	;# 
  1168  0419                     	;# 
  1169  041A                     	;# 
  1170  041B                     	;# 
  1171  041C                     	;# 
  1172  041D                     	;# 
  1173  041E                     	;# 
  1174  048D                     	;# 
  1175  0491                     	;# 
  1176  0491                     	;# 
  1177  0492                     	;# 
  1178  0492                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0494                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0495                     	;# 
  1186  0496                     	;# 
  1187  0496                     	;# 
  1188  0497                     	;# 
  1189  0497                     	;# 
  1190  0595                     	;# 
  1191  0596                     	;# 
  1192  0597                     	;# 
  1193  059C                     	;# 
  1194  059D                     	;# 
  1195  059E                     	;# 
  1196  0611                     	;# 
  1197  0611                     	;# 
  1198  0612                     	;# 
  1199  0613                     	;# 
  1200  0614                     	;# 
  1201  0614                     	;# 
  1202  0615                     	;# 
  1203  0616                     	;# 
  1204  0617                     	;# 
  1205  0617                     	;# 
  1206  0618                     	;# 
  1207  0619                     	;# 
  1208  061A                     	;# 
  1209  061A                     	;# 
  1210  061B                     	;# 
  1211  061C                     	;# 
  1212  061D                     	;# 
  1213  061D                     	;# 
  1214  061E                     	;# 
  1215  061F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  000F                     	;# 
  1243  0010                     	;# 
  1244  0011                     	;# 
  1245  0012                     	;# 
  1246  0013                     	;# 
  1247  0014                     	;# 
  1248  0015                     	;# 
  1249  0016                     	;# 
  1250  0016                     	;# 
  1251  0017                     	;# 
  1252  0018                     	;# 
  1253  0019                     	;# 
  1254  001A                     	;# 
  1255  001B                     	;# 
  1256  001C                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  008F                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0095                     	;# 
  1267  0096                     	;# 
  1268  0097                     	;# 
  1269  0099                     	;# 
  1270  009A                     	;# 
  1271  009B                     	;# 
  1272  009B                     	;# 
  1273  009C                     	;# 
  1274  009D                     	;# 
  1275  009E                     	;# 
  1276  010C                     	;# 
  1277  010D                     	;# 
  1278  010E                     	;# 
  1279  010F                     	;# 
  1280  0110                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  011D                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018F                     	;# 
  1287  0190                     	;# 
  1288  0191                     	;# 
  1289  0191                     	;# 
  1290  0192                     	;# 
  1291  0193                     	;# 
  1292  0193                     	;# 
  1293  0194                     	;# 
  1294  0195                     	;# 
  1295  0196                     	;# 
  1296  0197                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  020F                     	;# 
  1322  0210                     	;# 
  1323  0211                     	;# 
  1324  0211                     	;# 
  1325  0212                     	;# 
  1326  0212                     	;# 
  1327  0213                     	;# 
  1328  0213                     	;# 
  1329  0214                     	;# 
  1330  0214                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0216                     	;# 
  1335  0216                     	;# 
  1336  0217                     	;# 
  1337  0217                     	;# 
  1338  0219                     	;# 
  1339  021A                     	;# 
  1340  021B                     	;# 
  1341  021C                     	;# 
  1342  021D                     	;# 
  1343  021E                     	;# 
  1344  021F                     	;# 
  1345  028C                     	;# 
  1346  028D                     	;# 
  1347  0291                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0293                     	;# 
  1351  0298                     	;# 
  1352  0298                     	;# 
  1353  0299                     	;# 
  1354  029A                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  029F                     	;# 
  1358  030C                     	;# 
  1359  030D                     	;# 
  1360  0311                     	;# 
  1361  0311                     	;# 
  1362  0312                     	;# 
  1363  0313                     	;# 
  1364  0318                     	;# 
  1365  0318                     	;# 
  1366  0319                     	;# 
  1367  031A                     	;# 
  1368  031C                     	;# 
  1369  031C                     	;# 
  1370  031D                     	;# 
  1371  031E                     	;# 
  1372  038C                     	;# 
  1373  038D                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  040C                     	;# 
  1378  040D                     	;# 
  1379  0411                     	;# 
  1380  0411                     	;# 
  1381  0412                     	;# 
  1382  0413                     	;# 
  1383  0414                     	;# 
  1384  0415                     	;# 
  1385  0416                     	;# 
  1386  0417                     	;# 
  1387  0418                     	;# 
  1388  0418                     	;# 
  1389  0419                     	;# 
  1390  041A                     	;# 
  1391  041B                     	;# 
  1392  041C                     	;# 
  1393  041D                     	;# 
  1394  041E                     	;# 
  1395  048D                     	;# 
  1396  0491                     	;# 
  1397  0491                     	;# 
  1398  0492                     	;# 
  1399  0492                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0494                     	;# 
  1404  0494                     	;# 
  1405  0495                     	;# 
  1406  0495                     	;# 
  1407  0496                     	;# 
  1408  0496                     	;# 
  1409  0497                     	;# 
  1410  0497                     	;# 
  1411  0595                     	;# 
  1412  0596                     	;# 
  1413  0597                     	;# 
  1414  059C                     	;# 
  1415  059D                     	;# 
  1416  059E                     	;# 
  1417  0611                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061D                     	;# 
  1434  061D                     	;# 
  1435  061E                     	;# 
  1436  061F                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000D                     	;# 
  1462  000E                     	;# 
  1463  000F                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  008C                     	;# 
  1479  008D                     	;# 
  1480  008E                     	;# 
  1481  008F                     	;# 
  1482  0090                     	;# 
  1483  0091                     	;# 
  1484  0092                     	;# 
  1485  0093                     	;# 
  1486  0094                     	;# 
  1487  0095                     	;# 
  1488  0096                     	;# 
  1489  0097                     	;# 
  1490  0099                     	;# 
  1491  009A                     	;# 
  1492  009B                     	;# 
  1493  009B                     	;# 
  1494  009C                     	;# 
  1495  009D                     	;# 
  1496  009E                     	;# 
  1497  010C                     	;# 
  1498  010D                     	;# 
  1499  010E                     	;# 
  1500  010F                     	;# 
  1501  0110                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  011D                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  018F                     	;# 
  1508  0190                     	;# 
  1509  0191                     	;# 
  1510  0191                     	;# 
  1511  0192                     	;# 
  1512  0193                     	;# 
  1513  0193                     	;# 
  1514  0194                     	;# 
  1515  0195                     	;# 
  1516  0196                     	;# 
  1517  0197                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  020D                     	;# 
  1542  020F                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0219                     	;# 
  1560  021A                     	;# 
  1561  021B                     	;# 
  1562  021C                     	;# 
  1563  021D                     	;# 
  1564  021E                     	;# 
  1565  021F                     	;# 
  1566  028C                     	;# 
  1567  028D                     	;# 
  1568  0291                     	;# 
  1569  0291                     	;# 
  1570  0292                     	;# 
  1571  0293                     	;# 
  1572  0298                     	;# 
  1573  0298                     	;# 
  1574  0299                     	;# 
  1575  029A                     	;# 
  1576  029D                     	;# 
  1577  029E                     	;# 
  1578  029F                     	;# 
  1579  030C                     	;# 
  1580  030D                     	;# 
  1581  0311                     	;# 
  1582  0311                     	;# 
  1583  0312                     	;# 
  1584  0313                     	;# 
  1585  0318                     	;# 
  1586  0318                     	;# 
  1587  0319                     	;# 
  1588  031A                     	;# 
  1589  031C                     	;# 
  1590  031C                     	;# 
  1591  031D                     	;# 
  1592  031E                     	;# 
  1593  038C                     	;# 
  1594  038D                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  040C                     	;# 
  1599  040D                     	;# 
  1600  0411                     	;# 
  1601  0411                     	;# 
  1602  0412                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  0418                     	;# 
  1610  0419                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  048D                     	;# 
  1617  0491                     	;# 
  1618  0491                     	;# 
  1619  0492                     	;# 
  1620  0492                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0494                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0495                     	;# 
  1628  0496                     	;# 
  1629  0496                     	;# 
  1630  0497                     	;# 
  1631  0497                     	;# 
  1632  0595                     	;# 
  1633  0596                     	;# 
  1634  0597                     	;# 
  1635  059C                     	;# 
  1636  059D                     	;# 
  1637  059E                     	;# 
  1638  0611                     	;# 
  1639  0611                     	;# 
  1640  0612                     	;# 
  1641  0613                     	;# 
  1642  0614                     	;# 
  1643  0614                     	;# 
  1644  0615                     	;# 
  1645  0616                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  061D                     	;# 
  1655  061D                     	;# 
  1656  061E                     	;# 
  1657  061F                     	;# 
  1658  0FE4                     	;# 
  1659  0FE5                     	;# 
  1660  0FE6                     	;# 
  1661  0FE7                     	;# 
  1662  0FE8                     	;# 
  1663  0FE9                     	;# 
  1664  0FEA                     	;# 
  1665  0FEB                     	;# 
  1666  0FED                     	;# 
  1667  0FEE                     	;# 
  1668  0FEF                     	;# 
  1669  0000                     	;# 
  1670  0001                     	;# 
  1671  0002                     	;# 
  1672  0003                     	;# 
  1673  0004                     	;# 
  1674  0005                     	;# 
  1675  0006                     	;# 
  1676  0007                     	;# 
  1677  0008                     	;# 
  1678  0009                     	;# 
  1679  000A                     	;# 
  1680  000B                     	;# 
  1681  000C                     	;# 
  1682  000D                     	;# 
  1683  000E                     	;# 
  1684  000F                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  008C                     	;# 
  1700  008D                     	;# 
  1701  008E                     	;# 
  1702  008F                     	;# 
  1703  0090                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0093                     	;# 
  1707  0094                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0099                     	;# 
  1712  009A                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  010F                     	;# 
  1722  0110                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  011D                     	;# 
  1726  018C                     	;# 
  1727  018D                     	;# 
  1728  018F                     	;# 
  1729  0190                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0197                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028D                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0298                     	;# 
  1794  0298                     	;# 
  1795  0299                     	;# 
  1796  029A                     	;# 
  1797  029D                     	;# 
  1798  029E                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  0311                     	;# 
  1803  0311                     	;# 
  1804  0312                     	;# 
  1805  0313                     	;# 
  1806  0318                     	;# 
  1807  0318                     	;# 
  1808  0319                     	;# 
  1809  031A                     	;# 
  1810  031C                     	;# 
  1811  031C                     	;# 
  1812  031D                     	;# 
  1813  031E                     	;# 
  1814  038C                     	;# 
  1815  038D                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  040C                     	;# 
  1820  040D                     	;# 
  1821  0411                     	;# 
  1822  0411                     	;# 
  1823  0412                     	;# 
  1824  0413                     	;# 
  1825  0414                     	;# 
  1826  0415                     	;# 
  1827  0416                     	;# 
  1828  0417                     	;# 
  1829  0418                     	;# 
  1830  0418                     	;# 
  1831  0419                     	;# 
  1832  041A                     	;# 
  1833  041B                     	;# 
  1834  041C                     	;# 
  1835  041D                     	;# 
  1836  041E                     	;# 
  1837  048D                     	;# 
  1838  0491                     	;# 
  1839  0491                     	;# 
  1840  0492                     	;# 
  1841  0492                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0494                     	;# 
  1846  0494                     	;# 
  1847  0495                     	;# 
  1848  0495                     	;# 
  1849  0496                     	;# 
  1850  0496                     	;# 
  1851  0497                     	;# 
  1852  0497                     	;# 
  1853  0595                     	;# 
  1854  0596                     	;# 
  1855  0597                     	;# 
  1856  059C                     	;# 
  1857  059D                     	;# 
  1858  059E                     	;# 
  1859  0611                     	;# 
  1860  0611                     	;# 
  1861  0612                     	;# 
  1862  0613                     	;# 
  1863  0614                     	;# 
  1864  0614                     	;# 
  1865  0615                     	;# 
  1866  0616                     	;# 
  1867  0617                     	;# 
  1868  0617                     	;# 
  1869  0618                     	;# 
  1870  0619                     	;# 
  1871  061A                     	;# 
  1872  061A                     	;# 
  1873  061B                     	;# 
  1874  061C                     	;# 
  1875  061D                     	;# 
  1876  061D                     	;# 
  1877  061E                     	;# 
  1878  061F                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  000F                     	;# 
  1906  0010                     	;# 
  1907  0011                     	;# 
  1908  0012                     	;# 
  1909  0013                     	;# 
  1910  0014                     	;# 
  1911  0015                     	;# 
  1912  0016                     	;# 
  1913  0016                     	;# 
  1914  0017                     	;# 
  1915  0018                     	;# 
  1916  0019                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  008C                     	;# 
  1921  008D                     	;# 
  1922  008E                     	;# 
  1923  008F                     	;# 
  1924  0090                     	;# 
  1925  0091                     	;# 
  1926  0092                     	;# 
  1927  0093                     	;# 
  1928  0094                     	;# 
  1929  0095                     	;# 
  1930  0096                     	;# 
  1931  0097                     	;# 
  1932  0099                     	;# 
  1933  009A                     	;# 
  1934  009B                     	;# 
  1935  009B                     	;# 
  1936  009C                     	;# 
  1937  009D                     	;# 
  1938  009E                     	;# 
  1939  010C                     	;# 
  1940  010D                     	;# 
  1941  010E                     	;# 
  1942  010F                     	;# 
  1943  0110                     	;# 
  1944  0116                     	;# 
  1945  0117                     	;# 
  1946  011D                     	;# 
  1947  018C                     	;# 
  1948  018D                     	;# 
  1949  018F                     	;# 
  1950  0190                     	;# 
  1951  0191                     	;# 
  1952  0191                     	;# 
  1953  0192                     	;# 
  1954  0193                     	;# 
  1955  0193                     	;# 
  1956  0194                     	;# 
  1957  0195                     	;# 
  1958  0196                     	;# 
  1959  0197                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  020D                     	;# 
  1984  020F                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0219                     	;# 
  2002  021A                     	;# 
  2003  021B                     	;# 
  2004  021C                     	;# 
  2005  021D                     	;# 
  2006  021E                     	;# 
  2007  021F                     	;# 
  2008  028C                     	;# 
  2009  028D                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  029D                     	;# 
  2019  029E                     	;# 
  2020  029F                     	;# 
  2021  030C                     	;# 
  2022  030D                     	;# 
  2023  0311                     	;# 
  2024  0311                     	;# 
  2025  0312                     	;# 
  2026  0313                     	;# 
  2027  0318                     	;# 
  2028  0318                     	;# 
  2029  0319                     	;# 
  2030  031A                     	;# 
  2031  031C                     	;# 
  2032  031C                     	;# 
  2033  031D                     	;# 
  2034  031E                     	;# 
  2035  038C                     	;# 
  2036  038D                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  040C                     	;# 
  2041  040D                     	;# 
  2042  0411                     	;# 
  2043  0411                     	;# 
  2044  0412                     	;# 
  2045  0413                     	;# 
  2046  0414                     	;# 
  2047  0415                     	;# 
  2048  0416                     	;# 
  2049  0417                     	;# 
  2050  0418                     	;# 
  2051  0418                     	;# 
  2052  0419                     	;# 
  2053  041A                     	;# 
  2054  041B                     	;# 
  2055  041C                     	;# 
  2056  041D                     	;# 
  2057  041E                     	;# 
  2058  048D                     	;# 
  2059  0491                     	;# 
  2060  0491                     	;# 
  2061  0492                     	;# 
  2062  0492                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0494                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0495                     	;# 
  2070  0496                     	;# 
  2071  0496                     	;# 
  2072  0497                     	;# 
  2073  0497                     	;# 
  2074  0595                     	;# 
  2075  0596                     	;# 
  2076  0597                     	;# 
  2077  059C                     	;# 
  2078  059D                     	;# 
  2079  059E                     	;# 
  2080  0611                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  0614                     	;# 
  2086  0615                     	;# 
  2087  0616                     	;# 
  2088  0617                     	;# 
  2089  0617                     	;# 
  2090  0618                     	;# 
  2091  0619                     	;# 
  2092  061A                     	;# 
  2093  061A                     	;# 
  2094  061B                     	;# 
  2095  061C                     	;# 
  2096  061D                     	;# 
  2097  061D                     	;# 
  2098  061E                     	;# 
  2099  061F                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111  0000                     	;# 
  2112  0001                     	;# 
  2113  0002                     	;# 
  2114  0003                     	;# 
  2115  0004                     	;# 
  2116  0005                     	;# 
  2117  0006                     	;# 
  2118  0007                     	;# 
  2119  0008                     	;# 
  2120  0009                     	;# 
  2121  000A                     	;# 
  2122  000B                     	;# 
  2123  000C                     	;# 
  2124  000D                     	;# 
  2125  000E                     	;# 
  2126  000F                     	;# 
  2127  0010                     	;# 
  2128  0011                     	;# 
  2129  0012                     	;# 
  2130  0013                     	;# 
  2131  0014                     	;# 
  2132  0015                     	;# 
  2133  0016                     	;# 
  2134  0016                     	;# 
  2135  0017                     	;# 
  2136  0018                     	;# 
  2137  0019                     	;# 
  2138  001A                     	;# 
  2139  001B                     	;# 
  2140  001C                     	;# 
  2141  008C                     	;# 
  2142  008D                     	;# 
  2143  008E                     	;# 
  2144  008F                     	;# 
  2145  0090                     	;# 
  2146  0091                     	;# 
  2147  0092                     	;# 
  2148  0093                     	;# 
  2149  0094                     	;# 
  2150  0095                     	;# 
  2151  0096                     	;# 
  2152  0097                     	;# 
  2153  0099                     	;# 
  2154  009A                     	;# 
  2155  009B                     	;# 
  2156  009B                     	;# 
  2157  009C                     	;# 
  2158  009D                     	;# 
  2159  009E                     	;# 
  2160  010C                     	;# 
  2161  010D                     	;# 
  2162  010E                     	;# 
  2163  010F                     	;# 
  2164  0110                     	;# 
  2165  0116                     	;# 
  2166  0117                     	;# 
  2167  011D                     	;# 
  2168  018C                     	;# 
  2169  018D                     	;# 
  2170  018F                     	;# 
  2171  0190                     	;# 
  2172  0191                     	;# 
  2173  0191                     	;# 
  2174  0192                     	;# 
  2175  0193                     	;# 
  2176  0193                     	;# 
  2177  0194                     	;# 
  2178  0195                     	;# 
  2179  0196                     	;# 
  2180  0197                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  020D                     	;# 
  2205  020F                     	;# 
  2206  0210                     	;# 
  2207  0211                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0212                     	;# 
  2211  0213                     	;# 
  2212  0213                     	;# 
  2213  0214                     	;# 
  2214  0214                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0216                     	;# 
  2219  0216                     	;# 
  2220  0217                     	;# 
  2221  0217                     	;# 
  2222  0219                     	;# 
  2223  021A                     	;# 
  2224  021B                     	;# 
  2225  021C                     	;# 
  2226  021D                     	;# 
  2227  021E                     	;# 
  2228  021F                     	;# 
  2229  028C                     	;# 
  2230  028D                     	;# 
  2231  0291                     	;# 
  2232  0291                     	;# 
  2233  0292                     	;# 
  2234  0293                     	;# 
  2235  0298                     	;# 
  2236  0298                     	;# 
  2237  0299                     	;# 
  2238  029A                     	;# 
  2239  029D                     	;# 
  2240  029E                     	;# 
  2241  029F                     	;# 
  2242  030C                     	;# 
  2243  030D                     	;# 
  2244  0311                     	;# 
  2245  0311                     	;# 
  2246  0312                     	;# 
  2247  0313                     	;# 
  2248  0318                     	;# 
  2249  0318                     	;# 
  2250  0319                     	;# 
  2251  031A                     	;# 
  2252  031C                     	;# 
  2253  031C                     	;# 
  2254  031D                     	;# 
  2255  031E                     	;# 
  2256  038C                     	;# 
  2257  038D                     	;# 
  2258  0394                     	;# 
  2259  0395                     	;# 
  2260  0396                     	;# 
  2261  040C                     	;# 
  2262  040D                     	;# 
  2263  0411                     	;# 
  2264  0411                     	;# 
  2265  0412                     	;# 
  2266  0413                     	;# 
  2267  0414                     	;# 
  2268  0415                     	;# 
  2269  0416                     	;# 
  2270  0417                     	;# 
  2271  0418                     	;# 
  2272  0418                     	;# 
  2273  0419                     	;# 
  2274  041A                     	;# 
  2275  041B                     	;# 
  2276  041C                     	;# 
  2277  041D                     	;# 
  2278  041E                     	;# 
  2279  048D                     	;# 
  2280  0491                     	;# 
  2281  0491                     	;# 
  2282  0492                     	;# 
  2283  0492                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0494                     	;# 
  2288  0494                     	;# 
  2289  0495                     	;# 
  2290  0495                     	;# 
  2291  0496                     	;# 
  2292  0496                     	;# 
  2293  0497                     	;# 
  2294  0497                     	;# 
  2295  0595                     	;# 
  2296  0596                     	;# 
  2297  0597                     	;# 
  2298  059C                     	;# 
  2299  059D                     	;# 
  2300  059E                     	;# 
  2301  0611                     	;# 
  2302  0611                     	;# 
  2303  0612                     	;# 
  2304  0613                     	;# 
  2305  0614                     	;# 
  2306  0614                     	;# 
  2307  0615                     	;# 
  2308  0616                     	;# 
  2309  0617                     	;# 
  2310  0617                     	;# 
  2311  0618                     	;# 
  2312  0619                     	;# 
  2313  061A                     	;# 
  2314  061A                     	;# 
  2315  061B                     	;# 
  2316  061C                     	;# 
  2317  061D                     	;# 
  2318  061D                     	;# 
  2319  061E                     	;# 
  2320  061F                     	;# 
  2321  0FE4                     	;# 
  2322  0FE5                     	;# 
  2323  0FE6                     	;# 
  2324  0FE7                     	;# 
  2325  0FE8                     	;# 
  2326  0FE9                     	;# 
  2327  0FEA                     	;# 
  2328  0FEB                     	;# 
  2329  0FED                     	;# 
  2330  0FEE                     	;# 
  2331  0FEF                     	;# 
  2332  0000                     	;# 
  2333  0001                     	;# 
  2334  0002                     	;# 
  2335  0003                     	;# 
  2336  0004                     	;# 
  2337  0005                     	;# 
  2338  0006                     	;# 
  2339  0007                     	;# 
  2340  0008                     	;# 
  2341  0009                     	;# 
  2342  000A                     	;# 
  2343  000B                     	;# 
  2344  000C                     	;# 
  2345  000D                     	;# 
  2346  000E                     	;# 
  2347  000F                     	;# 
  2348  0010                     	;# 
  2349  0011                     	;# 
  2350  0012                     	;# 
  2351  0013                     	;# 
  2352  0014                     	;# 
  2353  0015                     	;# 
  2354  0016                     	;# 
  2355  0016                     	;# 
  2356  0017                     	;# 
  2357  0018                     	;# 
  2358  0019                     	;# 
  2359  001A                     	;# 
  2360  001B                     	;# 
  2361  001C                     	;# 
  2362  008C                     	;# 
  2363  008D                     	;# 
  2364  008E                     	;# 
  2365  008F                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0097                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  010C                     	;# 
  2382  010D                     	;# 
  2383  010E                     	;# 
  2384  010F                     	;# 
  2385  0110                     	;# 
  2386  0116                     	;# 
  2387  0117                     	;# 
  2388  011D                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018F                     	;# 
  2392  0190                     	;# 
  2393  0191                     	;# 
  2394  0191                     	;# 
  2395  0192                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0197                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  020D                     	;# 
  2426  020F                     	;# 
  2427  0210                     	;# 
  2428  0211                     	;# 
  2429  0211                     	;# 
  2430  0212                     	;# 
  2431  0212                     	;# 
  2432  0213                     	;# 
  2433  0213                     	;# 
  2434  0214                     	;# 
  2435  0214                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0216                     	;# 
  2440  0216                     	;# 
  2441  0217                     	;# 
  2442  0217                     	;# 
  2443  0219                     	;# 
  2444  021A                     	;# 
  2445  021B                     	;# 
  2446  021C                     	;# 
  2447  021D                     	;# 
  2448  021E                     	;# 
  2449  021F                     	;# 
  2450  028C                     	;# 
  2451  028D                     	;# 
  2452  0291                     	;# 
  2453  0291                     	;# 
  2454  0292                     	;# 
  2455  0293                     	;# 
  2456  0298                     	;# 
  2457  0298                     	;# 
  2458  0299                     	;# 
  2459  029A                     	;# 
  2460  029D                     	;# 
  2461  029E                     	;# 
  2462  029F                     	;# 
  2463  030C                     	;# 
  2464  030D                     	;# 
  2465  0311                     	;# 
  2466  0311                     	;# 
  2467  0312                     	;# 
  2468  0313                     	;# 
  2469  0318                     	;# 
  2470  0318                     	;# 
  2471  0319                     	;# 
  2472  031A                     	;# 
  2473  031C                     	;# 
  2474  031C                     	;# 
  2475  031D                     	;# 
  2476  031E                     	;# 
  2477  038C                     	;# 
  2478  038D                     	;# 
  2479  0394                     	;# 
  2480  0395                     	;# 
  2481  0396                     	;# 
  2482  040C                     	;# 
  2483  040D                     	;# 
  2484  0411                     	;# 
  2485  0411                     	;# 
  2486  0412                     	;# 
  2487  0413                     	;# 
  2488  0414                     	;# 
  2489  0415                     	;# 
  2490  0416                     	;# 
  2491  0417                     	;# 
  2492  0418                     	;# 
  2493  0418                     	;# 
  2494  0419                     	;# 
  2495  041A                     	;# 
  2496  041B                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  048D                     	;# 
  2501  0491                     	;# 
  2502  0491                     	;# 
  2503  0492                     	;# 
  2504  0492                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0494                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0495                     	;# 
  2512  0496                     	;# 
  2513  0496                     	;# 
  2514  0497                     	;# 
  2515  0497                     	;# 
  2516  0595                     	;# 
  2517  0596                     	;# 
  2518  0597                     	;# 
  2519  059C                     	;# 
  2520  059D                     	;# 
  2521  059E                     	;# 
  2522  0611                     	;# 
  2523  0611                     	;# 
  2524  0612                     	;# 
  2525  0613                     	;# 
  2526  0614                     	;# 
  2527  0614                     	;# 
  2528  0615                     	;# 
  2529  0616                     	;# 
  2530  0617                     	;# 
  2531  0617                     	;# 
  2532  0618                     	;# 
  2533  0619                     	;# 
  2534  061A                     	;# 
  2535  061A                     	;# 
  2536  061B                     	;# 
  2537  061C                     	;# 
  2538  061D                     	;# 
  2539  061D                     	;# 
  2540  061E                     	;# 
  2541  061F                     	;# 
  2542  0FE4                     	;# 
  2543  0FE5                     	;# 
  2544  0FE6                     	;# 
  2545  0FE7                     	;# 
  2546  0FE8                     	;# 
  2547  0FE9                     	;# 
  2548  0FEA                     	;# 
  2549  0FEB                     	;# 
  2550  0FED                     	;# 
  2551  0FEE                     	;# 
  2552  0FEF                     	;# 
  2553  0000                     	;# 
  2554  0001                     	;# 
  2555  0002                     	;# 
  2556  0003                     	;# 
  2557  0004                     	;# 
  2558  0005                     	;# 
  2559  0006                     	;# 
  2560  0007                     	;# 
  2561  0008                     	;# 
  2562  0009                     	;# 
  2563  000A                     	;# 
  2564  000B                     	;# 
  2565  000C                     	;# 
  2566  000D                     	;# 
  2567  000E                     	;# 
  2568  000F                     	;# 
  2569  0010                     	;# 
  2570  0011                     	;# 
  2571  0012                     	;# 
  2572  0013                     	;# 
  2573  0014                     	;# 
  2574  0015                     	;# 
  2575  0016                     	;# 
  2576  0016                     	;# 
  2577  0017                     	;# 
  2578  0018                     	;# 
  2579  0019                     	;# 
  2580  001A                     	;# 
  2581  001B                     	;# 
  2582  001C                     	;# 
  2583  008C                     	;# 
  2584  008D                     	;# 
  2585  008E                     	;# 
  2586  008F                     	;# 
  2587  0090                     	;# 
  2588  0091                     	;# 
  2589  0092                     	;# 
  2590  0093                     	;# 
  2591  0094                     	;# 
  2592  0095                     	;# 
  2593  0096                     	;# 
  2594  0097                     	;# 
  2595  0099                     	;# 
  2596  009A                     	;# 
  2597  009B                     	;# 
  2598  009B                     	;# 
  2599  009C                     	;# 
  2600  009D                     	;# 
  2601  009E                     	;# 
  2602  010C                     	;# 
  2603  010D                     	;# 
  2604  010E                     	;# 
  2605  010F                     	;# 
  2606  0110                     	;# 
  2607  0116                     	;# 
  2608  0117                     	;# 
  2609  011D                     	;# 
  2610  018C                     	;# 
  2611  018D                     	;# 
  2612  018F                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0194                     	;# 
  2620  0195                     	;# 
  2621  0196                     	;# 
  2622  0197                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  020D                     	;# 
  2647  020F                     	;# 
  2648  0210                     	;# 
  2649  0211                     	;# 
  2650  0211                     	;# 
  2651  0212                     	;# 
  2652  0212                     	;# 
  2653  0213                     	;# 
  2654  0213                     	;# 
  2655  0214                     	;# 
  2656  0214                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0216                     	;# 
  2661  0216                     	;# 
  2662  0217                     	;# 
  2663  0217                     	;# 
  2664  0219                     	;# 
  2665  021A                     	;# 
  2666  021B                     	;# 
  2667  021C                     	;# 
  2668  021D                     	;# 
  2669  021E                     	;# 
  2670  021F                     	;# 
  2671  028C                     	;# 
  2672  028D                     	;# 
  2673  0291                     	;# 
  2674  0291                     	;# 
  2675  0292                     	;# 
  2676  0293                     	;# 
  2677  0298                     	;# 
  2678  0298                     	;# 
  2679  0299                     	;# 
  2680  029A                     	;# 
  2681  029D                     	;# 
  2682  029E                     	;# 
  2683  029F                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  0311                     	;# 
  2687  0311                     	;# 
  2688  0312                     	;# 
  2689  0313                     	;# 
  2690  0318                     	;# 
  2691  0318                     	;# 
  2692  0319                     	;# 
  2693  031A                     	;# 
  2694  031C                     	;# 
  2695  031C                     	;# 
  2696  031D                     	;# 
  2697  031E                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  0394                     	;# 
  2701  0395                     	;# 
  2702  0396                     	;# 
  2703  040C                     	;# 
  2704  040D                     	;# 
  2705  0411                     	;# 
  2706  0411                     	;# 
  2707  0412                     	;# 
  2708  0413                     	;# 
  2709  0414                     	;# 
  2710  0415                     	;# 
  2711  0416                     	;# 
  2712  0417                     	;# 
  2713  0418                     	;# 
  2714  0418                     	;# 
  2715  0419                     	;# 
  2716  041A                     	;# 
  2717  041B                     	;# 
  2718  041C                     	;# 
  2719  041D                     	;# 
  2720  041E                     	;# 
  2721  048D                     	;# 
  2722  0491                     	;# 
  2723  0491                     	;# 
  2724  0492                     	;# 
  2725  0492                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0494                     	;# 
  2730  0494                     	;# 
  2731  0495                     	;# 
  2732  0495                     	;# 
  2733  0496                     	;# 
  2734  0496                     	;# 
  2735  0497                     	;# 
  2736  0497                     	;# 
  2737  0595                     	;# 
  2738  0596                     	;# 
  2739  0597                     	;# 
  2740  059C                     	;# 
  2741  059D                     	;# 
  2742  059E                     	;# 
  2743  0611                     	;# 
  2744  0611                     	;# 
  2745  0612                     	;# 
  2746  0613                     	;# 
  2747  0614                     	;# 
  2748  0614                     	;# 
  2749  0615                     	;# 
  2750  0616                     	;# 
  2751  0617                     	;# 
  2752  0617                     	;# 
  2753  0618                     	;# 
  2754  0619                     	;# 
  2755  061A                     	;# 
  2756  061A                     	;# 
  2757  061B                     	;# 
  2758  061C                     	;# 
  2759  061D                     	;# 
  2760  061D                     	;# 
  2761  061E                     	;# 
  2762  061F                     	;# 
  2763  0FE4                     	;# 
  2764  0FE5                     	;# 
  2765  0FE6                     	;# 
  2766  0FE7                     	;# 
  2767  0FE8                     	;# 
  2768  0FE9                     	;# 
  2769  0FEA                     	;# 
  2770  0FEB                     	;# 
  2771  0FED                     	;# 
  2772  0FEE                     	;# 
  2773  0FEF                     	;# 
  2774  0000                     	;# 
  2775  0001                     	;# 
  2776  0002                     	;# 
  2777  0003                     	;# 
  2778  0004                     	;# 
  2779  0005                     	;# 
  2780  0006                     	;# 
  2781  0007                     	;# 
  2782  0008                     	;# 
  2783  0009                     	;# 
  2784  000A                     	;# 
  2785  000B                     	;# 
  2786  000C                     	;# 
  2787  000D                     	;# 
  2788  000E                     	;# 
  2789  000F                     	;# 
  2790  0010                     	;# 
  2791  0011                     	;# 
  2792  0012                     	;# 
  2793  0013                     	;# 
  2794  0014                     	;# 
  2795  0015                     	;# 
  2796  0016                     	;# 
  2797  0016                     	;# 
  2798  0017                     	;# 
  2799  0018                     	;# 
  2800  0019                     	;# 
  2801  001A                     	;# 
  2802  001B                     	;# 
  2803  001C                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  008F                     	;# 
  2808  0090                     	;# 
  2809  0091                     	;# 
  2810  0092                     	;# 
  2811  0093                     	;# 
  2812  0094                     	;# 
  2813  0095                     	;# 
  2814  0096                     	;# 
  2815  0097                     	;# 
  2816  0099                     	;# 
  2817  009A                     	;# 
  2818  009B                     	;# 
  2819  009B                     	;# 
  2820  009C                     	;# 
  2821  009D                     	;# 
  2822  009E                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  010F                     	;# 
  2827  0110                     	;# 
  2828  0116                     	;# 
  2829  0117                     	;# 
  2830  011D                     	;# 
  2831  018C                     	;# 
  2832  018D                     	;# 
  2833  018F                     	;# 
  2834  0190                     	;# 
  2835  0191                     	;# 
  2836  0191                     	;# 
  2837  0192                     	;# 
  2838  0193                     	;# 
  2839  0193                     	;# 
  2840  0194                     	;# 
  2841  0195                     	;# 
  2842  0196                     	;# 
  2843  0197                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  020D                     	;# 
  2868  020F                     	;# 
  2869  0210                     	;# 
  2870  0211                     	;# 
  2871  0211                     	;# 
  2872  0212                     	;# 
  2873  0212                     	;# 
  2874  0213                     	;# 
  2875  0213                     	;# 
  2876  0214                     	;# 
  2877  0214                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0216                     	;# 
  2882  0216                     	;# 
  2883  0217                     	;# 
  2884  0217                     	;# 
  2885  0219                     	;# 
  2886  021A                     	;# 
  2887  021B                     	;# 
  2888  021C                     	;# 
  2889  021D                     	;# 
  2890  021E                     	;# 
  2891  021F                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0298                     	;# 
  2899  0298                     	;# 
  2900  0299                     	;# 
  2901  029A                     	;# 
  2902  029D                     	;# 
  2903  029E                     	;# 
  2904  029F                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  0311                     	;# 
  2908  0311                     	;# 
  2909  0312                     	;# 
  2910  0313                     	;# 
  2911  0318                     	;# 
  2912  0318                     	;# 
  2913  0319                     	;# 
  2914  031A                     	;# 
  2915  031C                     	;# 
  2916  031C                     	;# 
  2917  031D                     	;# 
  2918  031E                     	;# 
  2919  038C                     	;# 
  2920  038D                     	;# 
  2921  0394                     	;# 
  2922  0395                     	;# 
  2923  0396                     	;# 
  2924  040C                     	;# 
  2925  040D                     	;# 
  2926  0411                     	;# 
  2927  0411                     	;# 
  2928  0412                     	;# 
  2929  0413                     	;# 
  2930  0414                     	;# 
  2931  0415                     	;# 
  2932  0416                     	;# 
  2933  0417                     	;# 
  2934  0418                     	;# 
  2935  0418                     	;# 
  2936  0419                     	;# 
  2937  041A                     	;# 
  2938  041B                     	;# 
  2939  041C                     	;# 
  2940  041D                     	;# 
  2941  041E                     	;# 
  2942  048D                     	;# 
  2943  0491                     	;# 
  2944  0491                     	;# 
  2945  0492                     	;# 
  2946  0492                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0494                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0495                     	;# 
  2954  0496                     	;# 
  2955  0496                     	;# 
  2956  0497                     	;# 
  2957  0497                     	;# 
  2958  0595                     	;# 
  2959  0596                     	;# 
  2960  0597                     	;# 
  2961  059C                     	;# 
  2962  059D                     	;# 
  2963  059E                     	;# 
  2964  0611                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0614                     	;# 
  2970  0615                     	;# 
  2971  0616                     	;# 
  2972  0617                     	;# 
  2973  0617                     	;# 
  2974  0618                     	;# 
  2975  0619                     	;# 
  2976  061A                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061D                     	;# 
  2982  061E                     	;# 
  2983  061F                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  008C                     	;# 
  3026  008D                     	;# 
  3027  008E                     	;# 
  3028  008F                     	;# 
  3029  0090                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0099                     	;# 
  3038  009A                     	;# 
  3039  009B                     	;# 
  3040  009B                     	;# 
  3041  009C                     	;# 
  3042  009D                     	;# 
  3043  009E                     	;# 
  3044  010C                     	;# 
  3045  010D                     	;# 
  3046  010E                     	;# 
  3047  010F                     	;# 
  3048  0110                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  011D                     	;# 
  3052  018C                     	;# 
  3053  018D                     	;# 
  3054  018F                     	;# 
  3055  0190                     	;# 
  3056  0191                     	;# 
  3057  0191                     	;# 
  3058  0192                     	;# 
  3059  0193                     	;# 
  3060  0193                     	;# 
  3061  0194                     	;# 
  3062  0195                     	;# 
  3063  0196                     	;# 
  3064  0197                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  020D                     	;# 
  3089  020F                     	;# 
  3090  0210                     	;# 
  3091  0211                     	;# 
  3092  0211                     	;# 
  3093  0212                     	;# 
  3094  0212                     	;# 
  3095  0213                     	;# 
  3096  0213                     	;# 
  3097  0214                     	;# 
  3098  0214                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0216                     	;# 
  3103  0216                     	;# 
  3104  0217                     	;# 
  3105  0217                     	;# 
  3106  0219                     	;# 
  3107  021A                     	;# 
  3108  021B                     	;# 
  3109  021C                     	;# 
  3110  021D                     	;# 
  3111  021E                     	;# 
  3112  021F                     	;# 
  3113  028C                     	;# 
  3114  028D                     	;# 
  3115  0291                     	;# 
  3116  0291                     	;# 
  3117  0292                     	;# 
  3118  0293                     	;# 
  3119  0298                     	;# 
  3120  0298                     	;# 
  3121  0299                     	;# 
  3122  029A                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  029F                     	;# 
  3126  030C                     	;# 
  3127  030D                     	;# 
  3128  0311                     	;# 
  3129  0311                     	;# 
  3130  0312                     	;# 
  3131  0313                     	;# 
  3132  0318                     	;# 
  3133  0318                     	;# 
  3134  0319                     	;# 
  3135  031A                     	;# 
  3136  031C                     	;# 
  3137  031C                     	;# 
  3138  031D                     	;# 
  3139  031E                     	;# 
  3140  038C                     	;# 
  3141  038D                     	;# 
  3142  0394                     	;# 
  3143  0395                     	;# 
  3144  0396                     	;# 
  3145  040C                     	;# 
  3146  040D                     	;# 
  3147  0411                     	;# 
  3148  0411                     	;# 
  3149  0412                     	;# 
  3150  0413                     	;# 
  3151  0414                     	;# 
  3152  0415                     	;# 
  3153  0416                     	;# 
  3154  0417                     	;# 
  3155  0418                     	;# 
  3156  0418                     	;# 
  3157  0419                     	;# 
  3158  041A                     	;# 
  3159  041B                     	;# 
  3160  041C                     	;# 
  3161  041D                     	;# 
  3162  041E                     	;# 
  3163  048D                     	;# 
  3164  0491                     	;# 
  3165  0491                     	;# 
  3166  0492                     	;# 
  3167  0492                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0494                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0495                     	;# 
  3175  0496                     	;# 
  3176  0496                     	;# 
  3177  0497                     	;# 
  3178  0497                     	;# 
  3179  0595                     	;# 
  3180  0596                     	;# 
  3181  0597                     	;# 
  3182  059C                     	;# 
  3183  059D                     	;# 
  3184  059E                     	;# 
  3185  0611                     	;# 
  3186  0611                     	;# 
  3187  0612                     	;# 
  3188  0613                     	;# 
  3189  0614                     	;# 
  3190  0614                     	;# 
  3191  0615                     	;# 
  3192  0616                     	;# 
  3193  0617                     	;# 
  3194  0617                     	;# 
  3195  0618                     	;# 
  3196  0619                     	;# 
  3197  061A                     	;# 
  3198  061A                     	;# 
  3199  061B                     	;# 
  3200  061C                     	;# 
  3201  061D                     	;# 
  3202  061D                     	;# 
  3203  061E                     	;# 
  3204  061F                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  000F                     	;# 
  3232  0010                     	;# 
  3233  0011                     	;# 
  3234  0012                     	;# 
  3235  0013                     	;# 
  3236  0014                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  001A                     	;# 
  3244  001B                     	;# 
  3245  001C                     	;# 
  3246  008C                     	;# 
  3247  008D                     	;# 
  3248  008E                     	;# 
  3249  008F                     	;# 
  3250  0090                     	;# 
  3251  0091                     	;# 
  3252  0092                     	;# 
  3253  0093                     	;# 
  3254  0094                     	;# 
  3255  0095                     	;# 
  3256  0096                     	;# 
  3257  0097                     	;# 
  3258  0099                     	;# 
  3259  009A                     	;# 
  3260  009B                     	;# 
  3261  009B                     	;# 
  3262  009C                     	;# 
  3263  009D                     	;# 
  3264  009E                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  010F                     	;# 
  3269  0110                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  011D                     	;# 
  3273  018C                     	;# 
  3274  018D                     	;# 
  3275  018F                     	;# 
  3276  0190                     	;# 
  3277  0191                     	;# 
  3278  0191                     	;# 
  3279  0192                     	;# 
  3280  0193                     	;# 
  3281  0193                     	;# 
  3282  0194                     	;# 
  3283  0195                     	;# 
  3284  0196                     	;# 
  3285  0197                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  020D                     	;# 
  3310  020F                     	;# 
  3311  0210                     	;# 
  3312  0211                     	;# 
  3313  0211                     	;# 
  3314  0212                     	;# 
  3315  0212                     	;# 
  3316  0213                     	;# 
  3317  0213                     	;# 
  3318  0214                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0216                     	;# 
  3324  0216                     	;# 
  3325  0217                     	;# 
  3326  0217                     	;# 
  3327  0219                     	;# 
  3328  021A                     	;# 
  3329  021B                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021E                     	;# 
  3333  021F                     	;# 
  3334  028C                     	;# 
  3335  028D                     	;# 
  3336  0291                     	;# 
  3337  0291                     	;# 
  3338  0292                     	;# 
  3339  0293                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  029F                     	;# 
  3347  030C                     	;# 
  3348  030D                     	;# 
  3349  0311                     	;# 
  3350  0311                     	;# 
  3351  0312                     	;# 
  3352  0313                     	;# 
  3353  0318                     	;# 
  3354  0318                     	;# 
  3355  0319                     	;# 
  3356  031A                     	;# 
  3357  031C                     	;# 
  3358  031C                     	;# 
  3359  031D                     	;# 
  3360  031E                     	;# 
  3361  038C                     	;# 
  3362  038D                     	;# 
  3363  0394                     	;# 
  3364  0395                     	;# 
  3365  0396                     	;# 
  3366  040C                     	;# 
  3367  040D                     	;# 
  3368  0411                     	;# 
  3369  0411                     	;# 
  3370  0412                     	;# 
  3371  0413                     	;# 
  3372  0414                     	;# 
  3373  0415                     	;# 
  3374  0416                     	;# 
  3375  0417                     	;# 
  3376  0418                     	;# 
  3377  0418                     	;# 
  3378  0419                     	;# 
  3379  041A                     	;# 
  3380  041B                     	;# 
  3381  041C                     	;# 
  3382  041D                     	;# 
  3383  041E                     	;# 
  3384  048D                     	;# 
  3385  0491                     	;# 
  3386  0491                     	;# 
  3387  0492                     	;# 
  3388  0492                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0494                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0495                     	;# 
  3396  0496                     	;# 
  3397  0496                     	;# 
  3398  0497                     	;# 
  3399  0497                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  059C                     	;# 
  3404  059D                     	;# 
  3405  059E                     	;# 
  3406  0611                     	;# 
  3407  0611                     	;# 
  3408  0612                     	;# 
  3409  0613                     	;# 
  3410  0614                     	;# 
  3411  0614                     	;# 
  3412  0615                     	;# 
  3413  0616                     	;# 
  3414  0617                     	;# 
  3415  0617                     	;# 
  3416  0618                     	;# 
  3417  0619                     	;# 
  3418  061A                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061D                     	;# 
  3424  061E                     	;# 
  3425  061F                     	;# 
  3426  0FE4                     	;# 
  3427  0FE5                     	;# 
  3428  0FE6                     	;# 
  3429  0FE7                     	;# 
  3430  0FE8                     	;# 
  3431  0FE9                     	;# 
  3432  0FEA                     	;# 
  3433  0FEB                     	;# 
  3434  0FED                     	;# 
  3435  0FEE                     	;# 
  3436  0FEF                     	;_modArray
  3437                           
  3438                           	psect	idataBANK0
  3439  2DBE                     __pidataBANK0:	
  3440                           
  3441                           ;initializer for _delay_time
  3442  2DBE  34D0               	retlw	208
  3443  2DBF  3407               	retlw	7
  3444  2DC0  3400               	retlw	0
  3445  2DC1  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  2DC2  3401               	retlw	1
  3449  2DC3  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  2DC4  34E8               	retlw	232
  3453  2DC5  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  2DC6  3406               	retlw	6
  3457  2DC7  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  2DC8  3414               	retlw	20
  3461                           
  3462                           ;initializer for _longTap_state
  3463  2DC9  34FF               	retlw	255
  3464                           
  3465                           ;initializer for _num_taps
  3466  2DCA  3404               	retlw	4
  3467                           
  3468                           ;initializer for _switchBypass_state
  3469  2DCB  34FF               	retlw	255
  3470                           
  3471                           	psect	idataBANK2
  3472  07FF                     __pidataBANK2:	
  3473                           
  3474                           ;initializer for _presetChannel
  3475  07FF  3401               	retlw	1
  3476                           
  3477                           	psect	idataBANK3
  3478  2EC2                     __pidataBANK3:	
  3479                           
  3480                           ;initializer for _baseline_mod_time
  3481  2EC2  34D0               	retlw	208
  3482  2EC3  3407               	retlw	7
  3483  2EC4  3400               	retlw	0
  3484  2EC5  3400               	retlw	0
  3485                           
  3486                           ;initializer for _blink_delay
  3487  2EC6  3464               	retlw	100
  3488  2EC7  3400               	retlw	0
  3489                           
  3490                           ;initializer for _knob1_prev
  3491  2EC8  34D0               	retlw	208
  3492  2EC9  3407               	retlw	7
  3493                           
  3494                           ;initializer for _knob2_prev
  3495  2ECA  34D0               	retlw	208
  3496  2ECB  3407               	retlw	7
  3497                           
  3498                           ;initializer for _knob3_prev
  3499  2ECC  34D0               	retlw	208
  3500  2ECD  3407               	retlw	7
  3501                           
  3502                           ;initializer for _knob4_prev
  3503  2ECE  34D0               	retlw	208
  3504  2ECF  3407               	retlw	7
  3505                           
  3506                           ;initializer for _knob5_prev
  3507  2ED0  34D0               	retlw	208
  3508  2ED1  3407               	retlw	7
  3509                           
  3510                           ;initializer for _mod_counter
  3511  2ED2  3401               	retlw	1
  3512  2ED3  3400               	retlw	0
  3513                           
  3514                           ;initializer for _mod_delay_time
  3515  2ED4  34D0               	retlw	208
  3516  2ED5  3407               	retlw	7
  3517                           
  3518                           ;initializer for _symmetry
  3519  2ED6  34B4               	retlw	180
  3520  2ED7  3400               	retlw	0
  3521                           
  3522                           ;initializer for _tap_iteration
  3523  2ED8  3401               	retlw	1
  3524  2ED9  3400               	retlw	0
  3525                           
  3526                           ;initializer for _blink_state
  3527  2EDA  3401               	retlw	1
  3528                           
  3529                           ;initializer for _currentBypassState
  3530  2EDB  34FF               	retlw	255
  3531                           
  3532                           ;initializer for _expSwitchState
  3533  2EDC  34FF               	retlw	255
  3534                           
  3535                           ;initializer for _expressModeCnst
  3536  2EDD  3402               	retlw	2
  3537                           
  3538                           ;initializer for _expressionChannel
  3539  2EDE  3401               	retlw	1
  3540                           
  3541                           ;initializer for _mod_time_changed
  3542  2EDF  3401               	retlw	1
  3543                           
  3544                           ;initializer for _presetModeCnst
  3545  2EE0  3401               	retlw	1
  3546                           
  3547                           ;initializer for _switchTap_state
  3548  2EE1  34FF               	retlw	255
  3549                           
  3550                           	psect	idataBANK4
  3551  07FD                     __pidataBANK4:	
  3552                           
  3553                           ;initializer for _switchBypass_up
  3554  07FD  3401               	retlw	1
  3555  07FE  3400               	retlw	0
  3556                           
  3557                           	psect	stringtext
  3558  2800                     __pstringtext:	
  3559  2800                     exp@coeff:	
  3560  2800  3400               	retlw	0
  3561  2801  3480               	retlw	128
  3562  2802  343F               	retlw	63
  3563  2803  3472               	retlw	114
  3564  2804  3431               	retlw	49
  3565  2805  343F               	retlw	63
  3566  2806  34FE               	retlw	254
  3567  2807  3475               	retlw	117
  3568  2808  343E               	retlw	62
  3569  2809  3458               	retlw	88
  3570  280A  3463               	retlw	99
  3571  280B  343D               	retlw	61
  3572  280C  3495               	retlw	149
  3573  280D  341D               	retlw	29
  3574  280E  343C               	retlw	60
  3575  280F  34C5               	retlw	197
  3576  2810  34AE               	retlw	174
  3577  2811  343A               	retlw	58
  3578  2812  3479               	retlw	121
  3579  2813  3421               	retlw	33
  3580  2814  3439               	retlw	57
  3581  2815  3494               	retlw	148
  3582  2816  3480               	retlw	128
  3583  2817  3437               	retlw	55
  3584  2818  3493               	retlw	147
  3585  2819  34A7               	retlw	167
  3586  281A  3435               	retlw	53
  3587  281B  3456               	retlw	86
  3588  281C  3415               	retlw	21
  3589  281D  3434               	retlw	52
  3590  281E                     __end_ofexp@coeff:	
  3591  281E                     log@coeff:	
  3592  281E  3400               	retlw	0
  3593  281F  3400               	retlw	0
  3594  2820  3400               	retlw	0
  3595  2821  3400               	retlw	0
  3596  2822  3480               	retlw	128
  3597  2823  343F               	retlw	63
  3598  2824  34F0               	retlw	240
  3599  2825  34FF               	retlw	255
  3600  2826  34BE               	retlw	190
  3601  2827  34E2               	retlw	226
  3602  2828  34A9               	retlw	169
  3603  2829  343E               	retlw	62
  3604  282A  3483               	retlw	131
  3605  282B  3476               	retlw	118
  3606  282C  34BE               	retlw	190
  3607  282D  34AE               	retlw	174
  3608  282E  342B               	retlw	43
  3609  282F  343E               	retlw	62
  3610  2830  343C               	retlw	60
  3611  2831  34C3               	retlw	195
  3612  2832  34BD               	retlw	189
  3613  2833  34D2               	retlw	210
  3614  2834  3413               	retlw	19
  3615  2835  343D               	retlw	61
  3616  2836  3478               	retlw	120
  3617  2837  34D3               	retlw	211
  3618  2838  34BB               	retlw	187
  3619  2839                     __end_oflog@coeff:	
  3620  2839                     sin@coeff_a:	
  3621  2839  34F4               	retlw	244
  3622  283A  344A               	retlw	74
  3623  283B  3448               	retlw	72
  3624  283C  3495               	retlw	149
  3625  283D  3495               	retlw	149
  3626  283E  34C7               	retlw	199
  3627  283F  34C1               	retlw	193
  3628  2840  34DC               	retlw	220
  3629  2841  3445               	retlw	69
  3630  2842  34DC               	retlw	220
  3631  2843  346D               	retlw	109
  3632  2844  34C3               	retlw	195
  3633  2845  34B3               	retlw	179
  3634  2846  3433               	retlw	51
  3635  2847  3440               	retlw	64
  3636  2848                     __end_ofsin@coeff_a:	
  3637  2848                     sin@coeff_b:	
  3638  2848  3434               	retlw	52
  3639  2849  3401               	retlw	1
  3640  284A  3448               	retlw	72
  3641  284B  349D               	retlw	157
  3642  284C  34B0               	retlw	176
  3643  284D  3445               	retlw	69
  3644  284E  3400               	retlw	0
  3645  284F  34DA               	retlw	218
  3646  2850  3442               	retlw	66
  3647  2851  3400               	retlw	0
  3648  2852  3480               	retlw	128
  3649  2853  343F               	retlw	63
  3650  2854                     __end_ofsin@coeff_b:	
  3651  000B                     _INTCONbits	set	11
  3652  0011                     _PIR1bits	set	17
  3653  000C                     _PORTAbits	set	12
  3654  000E                     _PORTCbits	set	14
  3655  000F                     _PORTDbits	set	15
  3656  0010                     _PORTEbits	set	16
  3657  001B                     _PR2	set	27
  3658  001C                     _T2CONbits	set	28
  3659  005F                     _GIE	set	95
  3660  005E                     _PEIE	set	94
  3661  0069                     _RB1	set	105
  3662  009D                     _ADCON0bits	set	157
  3663  009E                     _ADCON1bits	set	158
  3664  009C                     _ADRESH	set	156
  3665  009B                     _ADRESL	set	155
  3666  0095                     _OPTION_REGbits	set	149
  3667  0099                     _OSCCONbits	set	153
  3668  008D                     _TRISBbits	set	141
  3669  008E                     _TRISCbits	set	142
  3670  008F                     _TRISDbits	set	143
  3671  0090                     _TRISEbits	set	144
  3672  048D                     _RCIE	set	1165
  3673  011D                     _APFCONbits	set	285
  3674  010D                     _LATBbits	set	269
  3675  010F                     _LATDbits	set	271
  3676  0190                     _ANSELEbits	set	400
  3677  0192                     _PMADRH	set	402
  3678  0191                     _PMADRL	set	401
  3679  0195                     _PMCON1bits	set	405
  3680  0196                     _PMCON2	set	406
  3681  0194                     _PMDATH	set	404
  3682  0193                     _PMDATL	set	403
  3683  0199                     _RCREG	set	409
  3684  019D                     _RCSTAbits	set	413
  3685  019B                     _SPBRG	set	411
  3686  019A                     _TXREG	set	410
  3687  019E                     _TXSTAbits	set	414
  3688  0291                     _CCPR1	set	657
  3689  0298                     _CCPR2	set	664
  3690  0293                     _CCP1CONbits	set	659
  3691  029A                     _CCP2CONbits	set	666
  3692  029D                     _CCPTMRS0	set	669
  3693  029E                     _CCPTMRS1	set	670
  3694  029F                     _CCPTMRS2	set	671
  3695  0311                     _CCPR3	set	785
  3696  0318                     _CCPR4	set	792
  3697  031C                     _CCPR5	set	796
  3698  0313                     _CCP3CONbits	set	787
  3699  031A                     _CCP4CONbits	set	794
  3700  031E                     _CCP5CONbits	set	798
  3701  030C                     _TRISFbits	set	780
  3702  030D                     _TRISGbits	set	781
  3703  038C                     _LATFbits	set	908
  3704  038D                     _LATGbits	set	909
  3705  040C                     _ANSELFbits	set	1036
  3706  061F                     _CCP10CONbits	set	1567
  3707  0613                     _CCP6CONbits	set	1555
  3708  0616                     _CCP7CONbits	set	1558
  3709  0619                     _CCP8CONbits	set	1561
  3710  061C                     _CCP9CONbits	set	1564
  3711                           
  3712                           ; #config settings
  3713  0000                     
  3714                           	psect	cinit
  3715  02DF                     start_initialization:	
  3716  02DF                     __initialization:		;BIGRAM
  3717                           
  3718                           ; Clear objects allocated to BIGRAM
  3719  02DF  308A               	movlw	low (0+9098)
  3720  02E0  0084               	movwf	4
  3721  02E1  3023               	movlw	high (0+9098)
  3722  02E2  0085               	movwf	5
  3723  02E3  3066               	movlw	102
  3724  02E4  00FE               	movwf	btemp
  3725  02E5  3002               	movlw	2
  3726  02E6  00FF               	movwf	btemp+1
  3727  02E7  31AD  25B2  3182   	fcall	clear_ram0
  3728                           
  3729                           ; Clear objects allocated to BANK0
  3730  02EA  3040               	movlw	low __pbssBANK0
  3731  02EB  0084               	movwf	4
  3732  02EC  3000               	movlw	high __pbssBANK0
  3733  02ED  0085               	movwf	5
  3734  02EE  3012               	movlw	18
  3735  02EF  00FE               	movwf	btemp
  3736  02F0  3000               	movlw	0
  3737  02F1  00FF               	movwf	btemp+1
  3738  02F2  31AD  25B2  3182   	fcall	clear_ram0
  3739                           
  3740                           ; Clear objects allocated to BANK2
  3741  02F5  0022               	movlb	2	; select bank2
  3742  02F6  01EA               	clrf	__pbssBANK2& (0+127)
  3743  02F7  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3744  02F8  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3745  02F9  01ED               	clrf	(__pbssBANK2+3)& (0+127)
  3746  02FA  01EE               	clrf	(__pbssBANK2+4)& (0+127)
  3747                           
  3748                           ; Clear objects allocated to BANK3
  3749  02FB  30A0               	movlw	low __pbssBANK3
  3750  02FC  0084               	movwf	4
  3751  02FD  3001               	movlw	high __pbssBANK3
  3752  02FE  0085               	movwf	5
  3753  02FF  3027               	movlw	39
  3754  0300  00FE               	movwf	btemp
  3755  0301  3000               	movlw	0
  3756  0302  00FF               	movwf	btemp+1
  3757  0303  31AD  25B2  3182   	fcall	clear_ram0
  3758                           
  3759                           ; Clear objects allocated to BANK4
  3760  0306  3020               	movlw	low __pbssBANK4
  3761  0307  0084               	movwf	4
  3762  0308  3002               	movlw	high __pbssBANK4
  3763  0309  0085               	movwf	5
  3764  030A  3035               	movlw	53
  3765  030B  00FE               	movwf	btemp
  3766  030C  3000               	movlw	0
  3767  030D  00FF               	movwf	btemp+1
  3768  030E  31AD  25B2  3182   	fcall	clear_ram0
  3769                           
  3770                           ; Clear objects allocated to BANK5
  3771  0311  30A0               	movlw	low __pbssBANK5
  3772  0312  0084               	movwf	4
  3773  0313  3002               	movlw	high __pbssBANK5
  3774  0314  0085               	movwf	5
  3775  0315  302C               	movlw	44
  3776  0316  00FE               	movwf	btemp
  3777  0317  3000               	movlw	0
  3778  0318  00FF               	movwf	btemp+1
  3779  0319  31AD  25B2  3182   	fcall	clear_ram0
  3780                           
  3781                           ; Clear objects allocated to BANK6
  3782  031C  3020               	movlw	low __pbssBANK6
  3783  031D  0084               	movwf	4
  3784  031E  3003               	movlw	high __pbssBANK6
  3785  031F  0085               	movwf	5
  3786  0320  3040               	movlw	64
  3787  0321  00FE               	movwf	btemp
  3788  0322  3000               	movlw	0
  3789  0323  00FF               	movwf	btemp+1
  3790  0324  31AD  25B2  3182   	fcall	clear_ram0
  3791                           
  3792                           ; Clear objects allocated to BANK7
  3793  0327  30A0               	movlw	low __pbssBANK7
  3794  0328  0084               	movwf	4
  3795  0329  3003               	movlw	high __pbssBANK7
  3796  032A  0085               	movwf	5
  3797  032B  3040               	movlw	64
  3798  032C  00FE               	movwf	btemp
  3799  032D  3000               	movlw	0
  3800  032E  00FF               	movwf	btemp+1
  3801  032F  31AD  25B2  3182   	fcall	clear_ram0
  3802                           
  3803                           ; Initialize objects allocated to BANK0
  3804  0332  30BE               	movlw	low __pidataBANK0
  3805  0333  0084               	movwf	4
  3806  0334  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3807  0335  0085               	movwf	5
  3808  0336  3052               	movlw	low __pdataBANK0
  3809  0337  0086               	movwf	6
  3810  0338  3000               	movlw	high __pdataBANK0
  3811  0339  0087               	movwf	7
  3812  033A  3000               	movlw	0
  3813  033B  00FF               	movwf	btemp+1
  3814  033C  300E               	movlw	14
  3815  033D  31AD  25A6  3182   	fcall	init_ram
  3816                           
  3817                           ; Initialize objects allocated to BANK2
  3818  0340  3187  27FF  3182   	fcall	__pidataBANK2	;fetch initializer
  3819  0343  00EF               	movwf	__pdataBANK2& (0+127)
  3820                           
  3821                           ; Initialize objects allocated to BANK3
  3822  0344  30C2               	movlw	low __pidataBANK3
  3823  0345  0084               	movwf	4
  3824  0346  30AE               	movlw	(high __pidataBANK3)| (0+128)
  3825  0347  0085               	movwf	5
  3826  0348  30C7               	movlw	low __pdataBANK3
  3827  0349  0086               	movwf	6
  3828  034A  3001               	movlw	high __pdataBANK3
  3829  034B  0087               	movwf	7
  3830  034C  3000               	movlw	0
  3831  034D  00FF               	movwf	btemp+1
  3832  034E  3020               	movlw	32
  3833  034F  31AD  25A6  3182   	fcall	init_ram
  3834                           
  3835                           ; Initialize objects allocated to BANK4
  3836  0352  0024               	movlb	4	; select bank4
  3837  0353  3187  27FD  3182   	fcall	__pidataBANK4	;fetch initializer
  3838  0356  00E3               	movwf	__pdataBANK4& (0+127)
  3839  0357  3187  27FE         	fcall	__pidataBANK4+1	;fetch initializer
  3840  0359  00E4               	movwf	(__pdataBANK4+1)& (0+127)
  3841  035A                     end_of_initialization:	
  3842                           ;End of C runtime variable initialization code
  3843                           
  3844  035A                     __end_of__initialization:	
  3845  035A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3846  035B  0020               	movlb	0
  3847  035C  3183  2B5E         	ljmp	_main	;jump to C main() function
  3848                           
  3849                           	psect	bssBANK0
  3850  0040                     __pbssBANK0:	
  3851  0040                     _sub_timer:	
  3852  0040                     	ds	4
  3853  0044                     _tap_timer:	
  3854  0044                     	ds	4
  3855  0048                     _timer:	
  3856  0048                     	ds	4
  3857  004C                     _UQEnd:	
  3858  004C                     	ds	1
  3859  004D                     _UQFront:	
  3860  004D                     	ds	1
  3861  004E                     _doubleTap_state:	
  3862  004E                     	ds	1
  3863  004F                     _longBypass_state:	
  3864  004F                     	ds	1
  3865  0050                     _mode2_state:	
  3866  0050                     	ds	1
  3867  0051                     _presetSaveMode:	
  3868  0051                     	ds	1
  3869                           
  3870                           	psect	dataBANK0
  3871  0052                     __pdataBANK0:	
  3872  0052                     _delay_time:	
  3873  0052                     	ds	4
  3874  0056                     _bottom_push_state:	
  3875  0056                     	ds	2
  3876  0058                     _long_press_limit:	
  3877  0058                     	ds	2
  3878  005A                     _top_push_state:	
  3879  005A                     	ds	2
  3880  005C                     _blink_rate:	
  3881  005C                     	ds	1
  3882  005D                     _longTap_state:	
  3883  005D                     	ds	1
  3884  005E                     _num_taps:	
  3885  005E                     	ds	1
  3886  005F                     _switchBypass_state:	
  3887  005F                     	ds	1
  3888                           
  3889                           	psect	bssBANK2
  3890  016A                     __pbssBANK2:	
  3891  016A                     _longBypass_start:	
  3892  016A                     	ds	1
  3893  016B                     _longTap_start:	
  3894  016B                     	ds	1
  3895  016C                     _preset_blink:	
  3896  016C                     	ds	1
  3897  016D                     _suspend_blink:	
  3898  016D                     	ds	1
  3899  016E                     _switchTap_pressed:	
  3900  016E                     	ds	1
  3901                           
  3902                           	psect	dataBANK2
  3903  016F                     __pdataBANK2:	
  3904  016F                     _presetChannel:	
  3905  016F                     	ds	1
  3906                           
  3907                           	psect	bssBANK3
  3908  01A0                     __pbssBANK3:	
  3909  01A0                     _double_timer:	
  3910  01A0                     	ds	4
  3911  01A4                     _mod_timer:	
  3912  01A4                     	ds	4
  3913  01A8                     _knob_1_pos:	
  3914  01A8                     	ds	2
  3915  01AA                     _knob_2_pos:	
  3916  01AA                     	ds	2
  3917  01AC                     _knob_3_pos:	
  3918  01AC                     	ds	2
  3919  01AE                     _knob_4_pos:	
  3920  01AE                     	ds	2
  3921  01B0                     _knob_5_pos:	
  3922  01B0                     	ds	2
  3923  01B2                     _longBypass_timer:	
  3924  01B2                     	ds	2
  3925  01B4                     _longTap_timer:	
  3926  01B4                     	ds	2
  3927  01B6                     _switchBypass_pressed:	
  3928  01B6                     	ds	2
  3929  01B8                     _tmpModDelay:	
  3930  01B8                     	ds	2
  3931  01BA                     _adjust_mod_delay:	
  3932  01BA                     	ds	1
  3933  01BB                     _bottomTactile_pressed:	
  3934  01BB                     	ds	1
  3935  01BC                     _bypass_turning_on:	
  3936  01BC                     	ds	1
  3937  01BD                     _iCnt:	
  3938  01BD                     	ds	1
  3939  01BE                     _isInitialized:	
  3940  01BE                     	ds	1
  3941  01BF                     _longBypass_down:	
  3942  01BF                     	ds	1
  3943  01C0                     _longBypass_save:	
  3944  01C0                     	ds	1
  3945  01C1                     _mode1_state:	
  3946  01C1                     	ds	1
  3947  01C2                     _modulation_changed:	
  3948  01C2                     	ds	1
  3949  01C3                     _preset_programmning_on:	
  3950  01C3                     	ds	1
  3951  01C4                     _reset_sub_delay:	
  3952  01C4                     	ds	1
  3953  01C5                     _switchTap_down:	
  3954  01C5                     	ds	1
  3955  01C6                     _topTactile_pressed:	
  3956  01C6                     	ds	1
  3957                           
  3958                           	psect	dataBANK3
  3959  01C7                     __pdataBANK3:	
  3960  01C7                     _baseline_mod_time:	
  3961  01C7                     	ds	4
  3962  01CB                     _blink_delay:	
  3963  01CB                     	ds	2
  3964  01CD                     _knob1_prev:	
  3965  01CD                     	ds	2
  3966  01CF                     _knob2_prev:	
  3967  01CF                     	ds	2
  3968  01D1                     _knob3_prev:	
  3969  01D1                     	ds	2
  3970  01D3                     _knob4_prev:	
  3971  01D3                     	ds	2
  3972  01D5                     _knob5_prev:	
  3973  01D5                     	ds	2
  3974  01D7                     _mod_counter:	
  3975  01D7                     	ds	2
  3976  01D9                     _mod_delay_time:	
  3977  01D9                     	ds	2
  3978  01DB                     _symmetry:	
  3979  01DB                     	ds	2
  3980  01DD                     _tap_iteration:	
  3981  01DD                     	ds	2
  3982  01DF                     _blink_state:	
  3983  01DF                     	ds	1
  3984  01E0                     _currentBypassState:	
  3985  01E0                     	ds	1
  3986  01E1                     _expSwitchState:	
  3987  01E1                     	ds	1
  3988  01E2                     _expressModeCnst:	
  3989  01E2                     	ds	1
  3990  01E3                     _expressionChannel:	
  3991  01E3                     	ds	1
  3992  01E4                     _mod_time_changed:	
  3993  01E4                     	ds	1
  3994  01E5                     _presetModeCnst:	
  3995  01E5                     	ds	1
  3996  01E6                     _switchTap_state:	
  3997  01E6                     	ds	1
  3998                           
  3999                           	psect	bssBANK4
  4000  0220                     __pbssBANK4:	
  4001  0220                     _tap_history:	
  4002  0220                     	ds	20
  4003  0234                     USARTWriteInt@F3536:	
  4004  0234                     	ds	5
  4005  0239                     _ledState:	
  4006  0239                     	ds	4
  4007  023D                     _tap_total:	
  4008  023D                     	ds	4
  4009  0241                     _adjusted_pot_value:	
  4010  0241                     	ds	2
  4011  0243                     _debounce_bypass:	
  4012  0243                     	ds	2
  4013  0245                     _debounce_count:	
  4014  0245                     	ds	2
  4015  0247                     _debounce_mode1:	
  4016  0247                     	ds	2
  4017  0249                     _debounce_mode2:	
  4018  0249                     	ds	2
  4019  024B                     _delayfound:	
  4020  024B                     	ds	2
  4021  024D                     _errno:	
  4022  024D                     	ds	2
  4023  024F                     _mod_value:	
  4024  024F                     	ds	2
  4025  0251                     _switchBypass_toggle:	
  4026  0251                     	ds	2
  4027  0253                     _tmpVal:	
  4028  0253                     	ds	2
  4029                           
  4030                           	psect	dataBANK4
  4031  0263                     __pdataBANK4:	
  4032  0263                     _switchBypass_up:	
  4033  0263                     	ds	2
  4034                           
  4035                           	psect	bssBANK5
  4036  02A0                     __pbssBANK5:	
  4037  02A0                     _tap:	
  4038  02A0                     	ds	44
  4039                           
  4040                           	psect	bssBANK6
  4041  0320                     __pbssBANK6:	
  4042  0320                     _URBuff:	
  4043  0320                     	ds	64
  4044                           
  4045                           	psect	bssBANK7
  4046  03A0                     __pbssBANK7:	
  4047  03A0                     _myBuf:	
  4048  03A0                     	ds	64
  4049                           
  4050                           	psect	clrtext
  4051  2DB2                     clear_ram0:	
  4052                           ;	Called with FSR0 containing the base address, and
  4053                           ;	btemp/btemp+1 has the size to clear
  4054                           
  4055  2DB2  0064               	clrwdt	;clear the watchdog before getting into this loop
  4056  2DB3                     clrloop0:	
  4057  2DB3  0180               	clrf	0	;clear RAM location pointed to by FSR
  4058  2DB4  3101               	addfsr 0,1
  4059  2DB5  3001               	movlw	1
  4060  2DB6  02FE               	subwf	126,f
  4061  2DB7  3000               	movlw	0
  4062  2DB8  3BFF               	subwfb	127,f
  4063  2DB9  087F               	movf	127,w
  4064  2DBA  047E               	iorwf	126,w
  4065  2DBB  1903               	btfsc	3,2
  4066  2DBC  3400               	retlw	0	;all done for this memory range, return
  4067  2DBD  2DB3               	goto	clrloop0	;have we reached the end yet?
  4068                           
  4069                           	psect	inittext
  4070  2DA6                     init_ram:	
  4071  2DA6  00FE               	movwf	126
  4072  2DA7                     initloop:	
  4073  2DA7  0012               	moviw fsr0++
  4074  2DA8  001E               	movwi fsr1++
  4075  2DA9  3001               	movlw	1
  4076  2DAA  02FE               	subwf	126,f
  4077  2DAB  3000               	movlw	0
  4078  2DAC  3BFF               	subwfb	127,f
  4079  2DAD  087F               	movf	127,w
  4080  2DAE  047E               	iorwf	126,w
  4081  2DAF  1903               	btfsc	3,2
  4082  2DB0  3400               	retlw	0
  4083  2DB1  2DA7               	goto	initloop
  4084                           
  4085                           	psect	cstackBANK4
  4086  0255                     __pcstackBANK4:	
  4087  0255                     ??_main:	
  4088                           
  4089                           ; 1 bytes @ 0x0
  4090  0255                     	ds	5
  4091  025A                     _main$2842:	
  4092                           
  4093                           ; 3 bytes @ 0x5
  4094  025A                     	ds	3
  4095  025D                     _main$2843:	
  4096                           
  4097                           ; 3 bytes @ 0x8
  4098  025D                     	ds	3
  4099  0260                     _main$2844:	
  4100                           
  4101                           ; 3 bytes @ 0xB
  4102  0260                     	ds	3
  4103                           
  4104                           	psect	cstackBANK3
  4105  01E7                     __pcstackBANK3:	
  4106  01E7                     scaleA100kPot@pwm:	
  4107  01E7                     scaleA10kPot@pwm:	
  4108                           ; 3 bytes @ 0x0
  4109                           
  4110  01E7                     scaleiA10kPot@pwm:	
  4111                           ; 3 bytes @ 0x0
  4112                           
  4113                           
  4114                           ; 3 bytes @ 0x0
  4115  01E7                     	ds	3
  4116  01EA                     _scaleA100kPot$2847:	
  4117  01EA                     _scaleA10kPot$2851:	
  4118                           ; 3 bytes @ 0x3
  4119                           
  4120  01EA                     _scaleiA10kPot$2853:	
  4121                           ; 3 bytes @ 0x3
  4122                           
  4123                           
  4124                           ; 3 bytes @ 0x3
  4125  01EA                     	ds	3
  4126  01ED                     _scaleA100kPot$2848:	
  4127  01ED                     _scaleA10kPot$2852:	
  4128                           ; 3 bytes @ 0x6
  4129                           
  4130  01ED                     _scaleiA10kPot$2854:	
  4131                           ; 3 bytes @ 0x6
  4132                           
  4133                           
  4134                           ; 3 bytes @ 0x6
  4135  01ED                     	ds	3
  4136                           
  4137                           	psect	cstackBANK2
  4138  0120                     __pcstackBANK2:	
  4139  0120                     ?___fttol:	
  4140  0120                     ___fttol@f1:	
  4141                           ; 4 bytes @ 0x0
  4142                           
  4143                           
  4144                           ; 3 bytes @ 0x0
  4145  0120                     	ds	4
  4146  0124                     ??___fttol:	
  4147                           
  4148                           ; 1 bytes @ 0x4
  4149  0124                     	ds	4
  4150  0128                     ___fttol@sign1:	
  4151                           
  4152                           ; 1 bytes @ 0x8
  4153  0128                     	ds	1
  4154  0129                     ___fttol@lval:	
  4155                           
  4156                           ; 4 bytes @ 0x9
  4157  0129                     	ds	4
  4158  012D                     ___fttol@exp1:	
  4159                           
  4160                           ; 1 bytes @ 0xD
  4161  012D                     	ds	1
  4162  012E                     ?_set_subdivision:	
  4163  012E                     ?_modTri:	
  4164                           ; 2 bytes @ 0xE
  4165                           
  4166  012E                     ?_modSaw:	
  4167                           ; 2 bytes @ 0xE
  4168                           
  4169  012E                     ?___wmul:	
  4170                           ; 2 bytes @ 0xE
  4171                           
  4172  012E                     ?_floor:	
  4173                           ; 2 bytes @ 0xE
  4174                           
  4175  012E                     set_subdivision@x:	
  4176                           ; 3 bytes @ 0xE
  4177                           
  4178  012E                     getModulationDelayTime@subDiv:	
  4179                           ; 2 bytes @ 0xE
  4180                           
  4181  012E                     ___wmul@multiplier:	
  4182                           ; 2 bytes @ 0xE
  4183                           
  4184  012E                     modTri@angle:	
  4185                           ; 2 bytes @ 0xE
  4186                           
  4187  012E                     modSaw@angle:	
  4188                           ; 3 bytes @ 0xE
  4189                           
  4190  012E                     floor@x:	
  4191                           ; 3 bytes @ 0xE
  4192                           
  4193                           
  4194                           ; 3 bytes @ 0xE
  4195  012E                     	ds	2
  4196  0130                     set_subdivision@y:	
  4197  0130                     ___wmul@multiplicand:	
  4198                           ; 2 bytes @ 0x10
  4199                           
  4200                           
  4201                           ; 2 bytes @ 0x10
  4202  0130                     	ds	1
  4203  0131                     ??_floor:	
  4204  0131                     modTri@inflection:	
  4205                           ; 1 bytes @ 0x11
  4206                           
  4207  0131                     modSaw@inflection:	
  4208                           ; 3 bytes @ 0x11
  4209                           
  4210                           
  4211                           ; 3 bytes @ 0x11
  4212  0131                     	ds	1
  4213  0132                     ___wmul@product:	
  4214  0132                     set_subdivision@scalar:	
  4215                           ; 2 bytes @ 0x12
  4216                           
  4217  0132                     floor@i:	
  4218                           ; 3 bytes @ 0x12
  4219                           
  4220                           
  4221                           ; 3 bytes @ 0x12
  4222  0132                     	ds	2
  4223  0134                     ?_modCos:	
  4224  0134                     ?_eval_poly:	
  4225                           ; 2 bytes @ 0x14
  4226                           
  4227  0134                     modCos@angle:	
  4228                           ; 3 bytes @ 0x14
  4229                           
  4230  0134                     eval_poly@x:	
  4231                           ; 3 bytes @ 0x14
  4232                           
  4233  0134                     _modTri$2856:	
  4234                           ; 3 bytes @ 0x14
  4235                           
  4236  0134                     _modSaw$2857:	
  4237                           ; 3 bytes @ 0x14
  4238                           
  4239                           
  4240                           ; 3 bytes @ 0x14
  4241  0134                     	ds	1
  4242  0135                     set_subdivision@tmpX:	
  4243  0135                     floor@expon:	
  4244                           ; 2 bytes @ 0x15
  4245                           
  4246                           
  4247                           ; 2 bytes @ 0x15
  4248  0135                     	ds	2
  4249  0137                     ?___ftsub:	
  4250  0137                     eval_poly@d:	
  4251                           ; 3 bytes @ 0x17
  4252                           
  4253  0137                     modCos@inflection:	
  4254                           ; 2 bytes @ 0x17
  4255                           
  4256  0137                     modTri@shift:	
  4257                           ; 3 bytes @ 0x17
  4258                           
  4259  0137                     ___ftsub@f2:	
  4260                           ; 3 bytes @ 0x17
  4261                           
  4262  0137                     _modSaw$2858:	
  4263                           ; 3 bytes @ 0x17
  4264                           
  4265                           
  4266                           ; 3 bytes @ 0x17
  4267  0137                     	ds	2
  4268  0139                     eval_poly@n:	
  4269                           
  4270                           ; 2 bytes @ 0x19
  4271  0139                     	ds	1
  4272  013A                     ??_modCos:	
  4273  013A                     modSaw@mod:	
  4274                           ; 1 bytes @ 0x1A
  4275                           
  4276  013A                     modTri@period:	
  4277                           ; 2 bytes @ 0x1A
  4278                           
  4279  013A                     ___ftsub@f1:	
  4280                           ; 3 bytes @ 0x1A
  4281                           
  4282                           
  4283                           ; 3 bytes @ 0x1A
  4284  013A                     	ds	1
  4285  013B                     eval_poly@res:	
  4286                           
  4287                           ; 3 bytes @ 0x1B
  4288  013B                     	ds	1
  4289  013C                     modSaw@shift:	
  4290  013C                     _modCos$2855:	
  4291                           ; 3 bytes @ 0x1C
  4292                           
  4293                           
  4294                           ; 3 bytes @ 0x1C
  4295  013C                     	ds	1
  4296  013D                     modTri@tmpVal:	
  4297                           
  4298                           ; 3 bytes @ 0x1D
  4299  013D                     	ds	1
  4300  013E                     ?_sin:	
  4301  013E                     ?_log:	
  4302                           ; 3 bytes @ 0x1E
  4303                           
  4304  013E                     ?_ldexp:	
  4305                           ; 3 bytes @ 0x1E
  4306                           
  4307  013E                     sin@f:	
  4308                           ; 3 bytes @ 0x1E
  4309                           
  4310  013E                     ldexp@value:	
  4311                           ; 3 bytes @ 0x1E
  4312                           
  4313  013E                     log@x:	
  4314                           ; 3 bytes @ 0x1E
  4315                           
  4316                           
  4317                           ; 3 bytes @ 0x1E
  4318  013E                     	ds	1
  4319  013F                     modCos@shift:	
  4320  013F                     modSaw@period:	
  4321                           ; 3 bytes @ 0x1F
  4322                           
  4323                           
  4324                           ; 3 bytes @ 0x1F
  4325  013F                     	ds	2
  4326  0141                     ??_sin:	
  4327  0141                     ??_log:	
  4328                           ; 1 bytes @ 0x21
  4329                           
  4330  0141                     ldexp@newexp:	
  4331                           ; 1 bytes @ 0x21
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x21
  4335  0141                     	ds	1
  4336  0142                     ?_modSawRev:	
  4337  0142                     log@exponent:	
  4338                           ; 2 bytes @ 0x22
  4339                           
  4340  0142                     modCos@period:	
  4341                           ; 2 bytes @ 0x22
  4342                           
  4343  0142                     modSawRev@angle:	
  4344                           ; 3 bytes @ 0x22
  4345                           
  4346  0142                     sin@y:	
  4347                           ; 3 bytes @ 0x22
  4348                           
  4349                           
  4350                           ; 3 bytes @ 0x22
  4351  0142                     	ds	1
  4352  0143                     ??_ldexp:	
  4353                           
  4354                           ; 1 bytes @ 0x23
  4355  0143                     	ds	2
  4356  0145                     modCos@tmpVal:	
  4357  0145                     modSawRev@inflection:	
  4358                           ; 3 bytes @ 0x25
  4359                           
  4360  0145                     _ldexp$2651:	
  4361                           ; 3 bytes @ 0x25
  4362                           
  4363  0145                     _sin$2862:	
  4364                           ; 3 bytes @ 0x25
  4365                           
  4366                           
  4367                           ; 3 bytes @ 0x25
  4368  0145                     	ds	3
  4369  0148                     ??_modSawRev:	
  4370  0148                     ?_modSquare:	
  4371                           ; 1 bytes @ 0x28
  4372                           
  4373  0148                     ?_exp:	
  4374                           ; 2 bytes @ 0x28
  4375                           
  4376  0148                     modSquare@angle:	
  4377                           ; 3 bytes @ 0x28
  4378                           
  4379  0148                     sin@x2:	
  4380                           ; 3 bytes @ 0x28
  4381                           
  4382  0148                     exp@x:	
  4383                           ; 3 bytes @ 0x28
  4384                           
  4385                           
  4386                           ; 3 bytes @ 0x28
  4387  0148                     	ds	3
  4388  014B                     ??_exp:	
  4389  014B                     sin@sgn:	
  4390                           ; 1 bytes @ 0x2B
  4391                           
  4392  014B                     modSquare@inflection:	
  4393                           ; 1 bytes @ 0x2B
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x2B
  4397  014B                     	ds	1
  4398  014C                     ?_cos:	
  4399  014C                     cos@f:	
  4400                           ; 3 bytes @ 0x2C
  4401                           
  4402  014C                     _exp$2863:	
  4403                           ; 3 bytes @ 0x2C
  4404                           
  4405                           
  4406                           ; 3 bytes @ 0x2C
  4407  014C                     	ds	2
  4408  014E                     modSquare@tmpVal:	
  4409                           
  4410                           ; 2 bytes @ 0x2E
  4411  014E                     	ds	1
  4412  014F                     _exp$2614:	
  4413  014F                     _cos$2859:	
  4414                           ; 3 bytes @ 0x2F
  4415                           
  4416                           
  4417                           ; 3 bytes @ 0x2F
  4418  014F                     	ds	1
  4419  0150                     ??_updateModulationArray:	
  4420                           
  4421                           ; 1 bytes @ 0x30
  4422  0150                     	ds	2
  4423  0152                     ??_calcCosArray:	
  4424  0152                     exp@exponent:	
  4425                           ; 1 bytes @ 0x32
  4426                           
  4427                           
  4428                           ; 2 bytes @ 0x32
  4429  0152                     	ds	2
  4430  0154                     exp@sign:	
  4431  0154                     updateModulationArray@angleFactor:	
  4432                           ; 1 bytes @ 0x34
  4433                           
  4434                           
  4435                           ; 2 bytes @ 0x34
  4436  0154                     	ds	1
  4437  0155                     ?_pow:	
  4438  0155                     pow@x:	
  4439                           ; 3 bytes @ 0x35
  4440                           
  4441                           
  4442                           ; 3 bytes @ 0x35
  4443  0155                     	ds	1
  4444  0156                     updateModulationArray@iAngle_2350:	
  4445  0156                     calcCosArray@tmpVal:	
  4446                           ; 1 bytes @ 0x36
  4447                           
  4448                           
  4449                           ; 3 bytes @ 0x36
  4450  0156                     	ds	1
  4451  0157                     updateModulationArray@subDiv:	
  4452                           
  4453                           ; 2 bytes @ 0x37
  4454  0157                     	ds	1
  4455  0158                     pow@y:	
  4456                           
  4457                           ; 3 bytes @ 0x38
  4458  0158                     	ds	1
  4459  0159                     calcCosArray@iAngle:	
  4460  0159                     updateModulationArray@thisAngle:	
  4461                           ; 1 bytes @ 0x39
  4462                           
  4463                           
  4464                           ; 2 bytes @ 0x39
  4465  0159                     	ds	2
  4466  015B                     ??_pow:	
  4467  015B                     updateModulationArray@iAngle:	
  4468                           ; 1 bytes @ 0x3B
  4469                           
  4470                           
  4471                           ; 1 bytes @ 0x3B
  4472  015B                     	ds	1
  4473  015C                     _pow$2860:	
  4474                           
  4475                           ; 3 bytes @ 0x3C
  4476  015C                     	ds	3
  4477  015F                     _pow$2861:	
  4478                           
  4479                           ; 3 bytes @ 0x3F
  4480  015F                     	ds	3
  4481  0162                     pow@sign:	
  4482                           
  4483                           ; 1 bytes @ 0x42
  4484  0162                     	ds	1
  4485  0163                     pow@yi:	
  4486                           
  4487                           ; 4 bytes @ 0x43
  4488  0163                     	ds	4
  4489  0167                     ?_scaleA10kPot:	
  4490  0167                     ?_scaleiA10kPot:	
  4491                           ; 2 bytes @ 0x47
  4492                           
  4493  0167                     ?_scaleA100kPot:	
  4494                           ; 2 bytes @ 0x47
  4495                           
  4496  0167                     scaleA100kPot@input:	
  4497                           ; 2 bytes @ 0x47
  4498                           
  4499  0167                     scaleA10kPot@input:	
  4500                           ; 3 bytes @ 0x47
  4501                           
  4502  0167                     scaleiA10kPot@input:	
  4503                           ; 3 bytes @ 0x47
  4504                           
  4505                           
  4506                           ; 3 bytes @ 0x47
  4507  0167                     	ds	3
  4508                           
  4509                           	psect	cstackBANK1
  4510  00A0                     __pcstackBANK1:	
  4511  00A0                     ?___ftge:	
  4512  00A0                     ?_set_leds_top:	
  4513                           ; 1 bit 
  4514                           
  4515  00A0                     ?_USARTInit:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  00A0                     ??_ConfigureOscillator:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  00A0                     ??_InitApp:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  00A0                     ??_InitializeTaps:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  00A0                     ??_init_adc:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  00A0                     ??_init_pwm:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  00A0                     ??_init_timer2:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  00A0                     ??_init_timer0:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  00A0                     ?_set_leds_bottom:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  00A0                     ?_setLongBypassState:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  00A0                     ?_setLongTapState:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  00A0                     ?_updateSwitchBypassState:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  00A0                     ?_getModulationSubdivision:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  00A0                     ?_adc_convert:	
  4555                           ; 2 bytes @ 0x0
  4556                           
  4557  00A0                     ?_FLASH_ReadWord:	
  4558                           ; 2 bytes @ 0x0
  4559                           
  4560  00A0                     ?_getSwitchBypassState:	
  4561                           ; 2 bytes @ 0x0
  4562                           
  4563  00A0                     ?___awdiv:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  00A0                     ?___ftpack:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  00A0                     ?_frexp:	
  4570                           ; 3 bytes @ 0x0
  4571                           
  4572  00A0                     ?___lmul:	
  4573                           ; 3 bytes @ 0x0
  4574                           
  4575  00A0                     ?___aldiv:	
  4576                           ; 4 bytes @ 0x0
  4577                           
  4578  00A0                     FLASH_ReadWord@flashAddr:	
  4579                           ; 4 bytes @ 0x0
  4580                           
  4581  00A0                     set_leds_top@x:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  00A0                     set_leds_bottom@x:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  00A0                     updateSwitchBypassState@state:	
  4588                           ; 2 bytes @ 0x0
  4589                           
  4590  00A0                     setLongBypassState@f_state:	
  4591                           ; 2 bytes @ 0x0
  4592                           
  4593  00A0                     setLongTapState@f_state:	
  4594                           ; 2 bytes @ 0x0
  4595                           
  4596  00A0                     USARTInit@baud_rate:	
  4597                           ; 2 bytes @ 0x0
  4598                           
  4599  00A0                     ___awdiv@divisor:	
  4600                           ; 2 bytes @ 0x0
  4601                           
  4602  00A0                     ___ftpack@arg:	
  4603                           ; 2 bytes @ 0x0
  4604                           
  4605  00A0                     ___ftge@ff1:	
  4606                           ; 3 bytes @ 0x0
  4607                           
  4608  00A0                     frexp@value:	
  4609                           ; 3 bytes @ 0x0
  4610                           
  4611  00A0                     ___lmul@multiplier:	
  4612                           ; 3 bytes @ 0x0
  4613                           
  4614  00A0                     ___aldiv@divisor:	
  4615                           ; 4 bytes @ 0x0
  4616                           
  4617                           
  4618                           ; 4 bytes @ 0x0
  4619  00A0                     	ds	1
  4620  00A1                     InitializeTaps@itap:	
  4621                           
  4622                           ; 2 bytes @ 0x1
  4623  00A1                     	ds	1
  4624  00A2                     ??_getModulationSubdivision:	
  4625  00A2                     ??_USARTInit:	
  4626                           ; 1 bytes @ 0x2
  4627                           
  4628  00A2                     ??_adc_convert:	
  4629                           ; 1 bytes @ 0x2
  4630                           
  4631  00A2                     ??_FLASH_ReadWord:	
  4632                           ; 1 bytes @ 0x2
  4633                           
  4634  00A2                     ??_set_leds_bottom:	
  4635                           ; 1 bytes @ 0x2
  4636                           
  4637  00A2                     ??_setLongBypassState:	
  4638                           ; 1 bytes @ 0x2
  4639                           
  4640  00A2                     ??_setLongTapState:	
  4641                           ; 1 bytes @ 0x2
  4642                           
  4643  00A2                     ??_updateSwitchBypassState:	
  4644                           ; 1 bytes @ 0x2
  4645                           
  4646  00A2                     ??_getSwitchBypassState:	
  4647                           ; 1 bytes @ 0x2
  4648                           
  4649  00A2                     FLASH_ReadWord@GIEBitValue:	
  4650                           ; 1 bytes @ 0x2
  4651                           
  4652  00A2                     set_leds_top@ledState:	
  4653                           ; 1 bytes @ 0x2
  4654                           
  4655  00A2                     ___awdiv@dividend:	
  4656                           ; 2 bytes @ 0x2
  4657                           
  4658                           
  4659                           ; 2 bytes @ 0x2
  4660  00A2                     	ds	1
  4661  00A3                     adc_convert@channel:	
  4662  00A3                     ___ftpack@exp:	
  4663                           ; 1 bytes @ 0x3
  4664                           
  4665  00A3                     frexp@eptr:	
  4666                           ; 1 bytes @ 0x3
  4667                           
  4668  00A3                     ___ftge@ff2:	
  4669                           ; 1 bytes @ 0x3
  4670                           
  4671                           
  4672                           ; 3 bytes @ 0x3
  4673  00A3                     	ds	1
  4674  00A4                     ??_set_leds_top:	
  4675  00A4                     ??_ReadSavedSettings:	
  4676                           ; 1 bytes @ 0x4
  4677                           
  4678  00A4                     ??_resetRingLEDs:	
  4679                           ; 1 bytes @ 0x4
  4680                           
  4681  00A4                     ??_setPresetDisplay:	
  4682                           ; 1 bytes @ 0x4
  4683                           
  4684  00A4                     ??_setExpressionDisplay:	
  4685                           ; 1 bytes @ 0x4
  4686                           
  4687  00A4                     ??_frexp:	
  4688                           ; 1 bytes @ 0x4
  4689                           
  4690  00A4                     ??___awdiv:	
  4691                           ; 1 bytes @ 0x4
  4692                           
  4693  00A4                     ___ftpack@sign:	
  4694                           ; 1 bytes @ 0x4
  4695                           
  4696  00A4                     ___lmul@multiplicand:	
  4697                           ; 1 bytes @ 0x4
  4698                           
  4699  00A4                     ___aldiv@dividend:	
  4700                           ; 4 bytes @ 0x4
  4701                           
  4702                           
  4703                           ; 4 bytes @ 0x4
  4704  00A4                     	ds	1
  4705  00A5                     ??___ftpack:	
  4706  00A5                     ___awdiv@counter:	
  4707                           ; 1 bytes @ 0x5
  4708                           
  4709                           
  4710                           ; 1 bytes @ 0x5
  4711  00A5                     	ds	1
  4712  00A6                     ??___ftge:	
  4713  00A6                     setPresetDisplay@ledChannel:	
  4714                           ; 1 bytes @ 0x6
  4715                           
  4716  00A6                     setExpressionDisplay@ledChannel:	
  4717                           ; 1 bytes @ 0x6
  4718                           
  4719  00A6                     ___awdiv@sign:	
  4720                           ; 1 bytes @ 0x6
  4721                           
  4722                           
  4723                           ; 1 bytes @ 0x6
  4724  00A6                     	ds	1
  4725  00A7                     ??_update_mode:	
  4726  00A7                     ??_update_selectMode:	
  4727                           ; 1 bytes @ 0x7
  4728                           
  4729  00A7                     ??_setPedalMode:	
  4730                           ; 1 bytes @ 0x7
  4731                           
  4732  00A7                     ___awdiv@quotient:	
  4733                           ; 1 bytes @ 0x7
  4734                           
  4735                           
  4736                           ; 2 bytes @ 0x7
  4737  00A7                     	ds	1
  4738  00A8                     ??___lmul:	
  4739  00A8                     ??___aldiv:	
  4740                           ; 1 bytes @ 0x8
  4741                           
  4742  00A8                     ?___altoft:	
  4743                           ; 1 bytes @ 0x8
  4744                           
  4745  00A8                     ?___awtoft:	
  4746                           ; 3 bytes @ 0x8
  4747                           
  4748  00A8                     ?___lltoft:	
  4749                           ; 3 bytes @ 0x8
  4750                           
  4751  00A8                     ___awtoft@c:	
  4752                           ; 3 bytes @ 0x8
  4753                           
  4754  00A8                     ___lmul@product:	
  4755                           ; 2 bytes @ 0x8
  4756                           
  4757  00A8                     ___altoft@c:	
  4758                           ; 4 bytes @ 0x8
  4759                           
  4760  00A8                     ___lltoft@c:	
  4761                           ; 4 bytes @ 0x8
  4762                           
  4763                           
  4764                           ; 4 bytes @ 0x8
  4765  00A8                     	ds	1
  4766  00A9                     ___aldiv@counter:	
  4767                           
  4768                           ; 1 bytes @ 0x9
  4769  00A9                     	ds	1
  4770  00AA                     ___aldiv@sign:	
  4771                           
  4772                           ; 1 bytes @ 0xA
  4773  00AA                     	ds	1
  4774  00AB                     ??___awtoft:	
  4775  00AB                     ___aldiv@quotient:	
  4776                           ; 1 bytes @ 0xB
  4777                           
  4778                           
  4779                           ; 4 bytes @ 0xB
  4780  00AB                     	ds	1
  4781  00AC                     ?_wait_ms:	
  4782  00AC                     ??___altoft:	
  4783                           ; 1 bytes @ 0xC
  4784                           
  4785  00AC                     ??___lltoft:	
  4786                           ; 1 bytes @ 0xC
  4787                           
  4788  00AC                     wait_ms@timeSec:	
  4789                           ; 1 bytes @ 0xC
  4790                           
  4791                           
  4792                           ; 2 bytes @ 0xC
  4793  00AC                     	ds	1
  4794  00AD                     ___awtoft@sign:	
  4795  00AD                     ___lltoft@exp:	
  4796                           ; 1 bytes @ 0xD
  4797                           
  4798                           
  4799                           ; 1 bytes @ 0xD
  4800  00AD                     	ds	1
  4801  00AE                     ??_wait_ms:	
  4802  00AE                     ?___ftmul:	
  4803                           ; 1 bytes @ 0xE
  4804                           
  4805  00AE                     ___altoft@exp:	
  4806                           ; 3 bytes @ 0xE
  4807                           
  4808  00AE                     ___ftmul@f1:	
  4809                           ; 1 bytes @ 0xE
  4810                           
  4811  00AE                     wait_ms@timemsl:	
  4812                           ; 3 bytes @ 0xE
  4813                           
  4814                           
  4815                           ; 4 bytes @ 0xE
  4816  00AE                     	ds	1
  4817  00AF                     ___altoft@sign:	
  4818                           
  4819                           ; 1 bytes @ 0xF
  4820  00AF                     	ds	2
  4821  00B1                     ___ftmul@f2:	
  4822                           
  4823                           ; 3 bytes @ 0x11
  4824  00B1                     	ds	1
  4825  00B2                     ??_read_bottom_tactile:	
  4826  00B2                     ??_read_top_tactile:	
  4827                           ; 1 bytes @ 0x12
  4828                           
  4829  00B2                     ??_solidring_tactiles:	
  4830                           ; 1 bytes @ 0x12
  4831                           
  4832  00B2                     ??_ring_tactiles:	
  4833                           ; 1 bytes @ 0x12
  4834                           
  4835  00B2                     ?_setSwitchBypassRelays:	
  4836                           ; 1 bytes @ 0x12
  4837                           
  4838  00B2                     setSwitchBypassRelays@f_state:	
  4839                           ; 1 bytes @ 0x12
  4840                           
  4841                           
  4842                           ; 2 bytes @ 0x12
  4843  00B2                     	ds	1
  4844  00B3                     ring_tactiles@iLed:	
  4845                           
  4846                           ; 2 bytes @ 0x13
  4847  00B3                     	ds	1
  4848  00B4                     ??_setSwitchBypassRelays:	
  4849  00B4                     ??___ftmul:	
  4850                           ; 1 bytes @ 0x14
  4851                           
  4852  00B4                     solidring_tactiles@ring_delay:	
  4853                           ; 1 bytes @ 0x14
  4854                           
  4855                           
  4856                           ; 1 bytes @ 0x14
  4857  00B4                     	ds	1
  4858  00B5                     ring_tactiles@iLed_1533:	
  4859                           
  4860                           ; 2 bytes @ 0x15
  4861  00B5                     	ds	1
  4862  00B6                     ?_setSwitchBypassState:	
  4863  00B6                     setSwitchBypassState@f_state:	
  4864                           ; 1 bytes @ 0x16
  4865                           
  4866                           
  4867                           ; 2 bytes @ 0x16
  4868  00B6                     	ds	1
  4869  00B7                     ??_showSave:	
  4870                           
  4871                           ; 1 bytes @ 0x17
  4872  00B7                     	ds	1
  4873  00B8                     ??_setSwitchBypassState:	
  4874  00B8                     ?_setDoublePressState:	
  4875                           ; 1 bytes @ 0x18
  4876                           
  4877  00B8                     ___ftmul@exp:	
  4878                           ; 1 bytes @ 0x18
  4879                           
  4880  00B8                     setDoublePressState@f_state:	
  4881                           ; 1 bytes @ 0x18
  4882                           
  4883                           
  4884                           ; 2 bytes @ 0x18
  4885  00B8                     	ds	1
  4886  00B9                     ___ftmul@f3_as_product:	
  4887                           
  4888                           ; 3 bytes @ 0x19
  4889  00B9                     	ds	1
  4890  00BA                     ??_initSwitchBypass:	
  4891  00BA                     ??_setDoublePressState:	
  4892                           ; 1 bytes @ 0x1A
  4893                           
  4894  00BA                     initSwitchBypass@initState:	
  4895                           ; 1 bytes @ 0x1A
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x1A
  4899  00BA                     	ds	2
  4900  00BC                     ??_updateSwitchBypass:	
  4901  00BC                     ??_updateSwitchTap:	
  4902                           ; 1 bytes @ 0x1C
  4903                           
  4904  00BC                     ___ftmul@cntr:	
  4905                           ; 1 bytes @ 0x1C
  4906                           
  4907                           
  4908                           ; 1 bytes @ 0x1C
  4909  00BC                     	ds	1
  4910  00BD                     ___ftmul@sign:	
  4911                           
  4912                           ; 1 bytes @ 0x1D
  4913  00BD                     	ds	1
  4914  00BE                     ?___ftneg:	
  4915  00BE                     ___ftneg@f1:	
  4916                           ; 3 bytes @ 0x1E
  4917                           
  4918                           
  4919                           ; 3 bytes @ 0x1E
  4920  00BE                     	ds	3
  4921  00C1                     ??___ftneg:	
  4922  00C1                     ?___ftadd:	
  4923                           ; 1 bytes @ 0x21
  4924                           
  4925  00C1                     ___ftadd@f1:	
  4926                           ; 3 bytes @ 0x21
  4927                           
  4928                           
  4929                           ; 3 bytes @ 0x21
  4930  00C1                     	ds	1
  4931  00C2                     updateSwitchTap@tapCntDivisor:	
  4932                           
  4933                           ; 2 bytes @ 0x22
  4934  00C2                     	ds	2
  4935  00C4                     updateSwitchTap@iCnt:	
  4936  00C4                     ___ftadd@f2:	
  4937                           ; 1 bytes @ 0x24
  4938                           
  4939                           
  4940                           ; 3 bytes @ 0x24
  4941  00C4                     	ds	3
  4942  00C7                     ??___ftadd:	
  4943                           
  4944                           ; 1 bytes @ 0x27
  4945  00C7                     	ds	4
  4946  00CB                     ___ftadd@sign:	
  4947                           
  4948                           ; 1 bytes @ 0x2B
  4949  00CB                     	ds	1
  4950  00CC                     ___ftadd@exp2:	
  4951                           
  4952                           ; 1 bytes @ 0x2C
  4953  00CC                     	ds	1
  4954  00CD                     ___ftadd@exp1:	
  4955                           
  4956                           ; 1 bytes @ 0x2D
  4957  00CD                     	ds	1
  4958  00CE                     ?___ftdiv:	
  4959  00CE                     ___ftdiv@f2:	
  4960                           ; 3 bytes @ 0x2E
  4961                           
  4962                           
  4963                           ; 3 bytes @ 0x2E
  4964  00CE                     	ds	3
  4965  00D1                     ___ftdiv@f1:	
  4966                           
  4967                           ; 3 bytes @ 0x31
  4968  00D1                     	ds	3
  4969  00D4                     ??___ftdiv:	
  4970                           
  4971                           ; 1 bytes @ 0x34
  4972  00D4                     	ds	4
  4973  00D8                     ___ftdiv@cntr:	
  4974                           
  4975                           ; 1 bytes @ 0x38
  4976  00D8                     	ds	1
  4977  00D9                     ___ftdiv@f3:	
  4978                           
  4979                           ; 3 bytes @ 0x39
  4980  00D9                     	ds	3
  4981  00DC                     ___ftdiv@exp:	
  4982                           
  4983                           ; 1 bytes @ 0x3C
  4984  00DC                     	ds	1
  4985  00DD                     ___ftdiv@sign:	
  4986                           
  4987                           ; 1 bytes @ 0x3D
  4988  00DD                     	ds	1
  4989  00DE                     ?_map:	
  4990  00DE                     map@x:	
  4991                           ; 3 bytes @ 0x3E
  4992                           
  4993                           
  4994                           ; 3 bytes @ 0x3E
  4995  00DE                     	ds	3
  4996  00E1                     map@in_min:	
  4997                           
  4998                           ; 3 bytes @ 0x41
  4999  00E1                     	ds	3
  5000  00E4                     map@in_max:	
  5001                           
  5002                           ; 3 bytes @ 0x44
  5003  00E4                     	ds	3
  5004  00E7                     map@out_min:	
  5005                           
  5006                           ; 3 bytes @ 0x47
  5007  00E7                     	ds	3
  5008  00EA                     map@out_max:	
  5009                           
  5010                           ; 3 bytes @ 0x4A
  5011  00EA                     	ds	3
  5012  00ED                     ??_map:	
  5013  00ED                     _map$2845:	
  5014                           ; 1 bytes @ 0x4D
  5015                           
  5016                           
  5017                           ; 3 bytes @ 0x4D
  5018  00ED                     	ds	3
  5019  00F0                     ??_scaleA10kPot:	
  5020  00F0                     ??_scaleiA10kPot:	
  5021                           ; 1 bytes @ 0x50
  5022                           
  5023  00F0                     ??_scaleA100kPot:	
  5024                           ; 1 bytes @ 0x50
  5025                           
  5026  00F0                     ??_set_subdivision:	
  5027                           ; 1 bytes @ 0x50
  5028                           
  5029  00F0                     ??_getModulationDelayTime:	
  5030                           ; 1 bytes @ 0x50
  5031                           
  5032  00F0                     ??_cos:	
  5033                           ; 1 bytes @ 0x50
  5034                           
  5035  00F0                     ??_modTri:	
  5036                           ; 1 bytes @ 0x50
  5037                           
  5038  00F0                     ??_modSquare:	
  5039                           ; 1 bytes @ 0x50
  5040                           
  5041  00F0                     ??_modSaw:	
  5042                           ; 1 bytes @ 0x50
  5043                           
  5044  00F0                     ??_eval_poly:	
  5045                           ; 1 bytes @ 0x50
  5046                           
  5047  00F0                     ??___wmul:	
  5048                           ; 1 bytes @ 0x50
  5049                           
  5050  00F0                     ??___ftsub:	
  5051                           ; 1 bytes @ 0x50
  5052                           
  5053                           
  5054                           	psect	cstackCOMMON
  5055  0070                     __pcstackCOMMON:	
  5056                           ; 1 bytes @ 0x50
  5057                           
  5058  0070                     ?_calcCosArray:	
  5059  0070                     ?_updateModulationArray:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_ConfigureOscillator:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_InitApp:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_InitializeTaps:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_initSwitchBypass:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_ReadSavedSettings:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?_update_mode:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?_update_selectMode:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?_updateSwitchBypass:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     ?_updateSwitchTap:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     ?_read_bottom_tactile:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     ?_read_top_tactile:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     ?_getModulationDelayTime:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     ?_init_adc:	
  5099                           ; 1 bytes @ 0x0
  5100                           
  5101  0070                     ?_init_pwm:	
  5102                           ; 1 bytes @ 0x0
  5103                           
  5104  0070                     ?_init_timer2:	
  5105                           ; 1 bytes @ 0x0
  5106                           
  5107  0070                     ?_init_timer0:	
  5108                           ; 1 bytes @ 0x0
  5109                           
  5110  0070                     ?_solidring_tactiles:	
  5111                           ; 1 bytes @ 0x0
  5112                           
  5113  0070                     ?_ring_tactiles:	
  5114                           ; 1 bytes @ 0x0
  5115                           
  5116  0070                     ?_resetRingLEDs:	
  5117                           ; 1 bytes @ 0x0
  5118                           
  5119  0070                     ?_setPedalMode:	
  5120                           ; 1 bytes @ 0x0
  5121                           
  5122  0070                     ?_setPresetDisplay:	
  5123                           ; 1 bytes @ 0x0
  5124                           
  5125  0070                     ?_setExpressionDisplay:	
  5126                           ; 1 bytes @ 0x0
  5127                           
  5128  0070                     ?_isr:	
  5129                           ; 1 bytes @ 0x0
  5130                           
  5131  0070                     ?_main:	
  5132                           ; 1 bytes @ 0x0
  5133                           
  5134  0070                     ?_showSave:	
  5135                           ; 1 bytes @ 0x0
  5136                           
  5137  0070                     ?i1_set_leds_top:	
  5138                           ; 1 bytes @ 0x0
  5139                           
  5140  0070                     ?i1_getModulationSubdivision:	
  5141                           ; 1 bytes @ 0x0
  5142                           
  5143  0070                     ?i1___awdiv:	
  5144                           ; 2 bytes @ 0x0
  5145                           
  5146  0070                     ?i1___lmul:	
  5147                           ; 2 bytes @ 0x0
  5148                           
  5149  0070                     i1set_leds_top@x:	
  5150                           ; 4 bytes @ 0x0
  5151                           
  5152  0070                     i1___awdiv@divisor:	
  5153                           ; 2 bytes @ 0x0
  5154                           
  5155  0070                     i1___lmul@multiplier:	
  5156                           ; 2 bytes @ 0x0
  5157                           
  5158                           
  5159                           ; 4 bytes @ 0x0
  5160  0070                     	ds	2
  5161  0072                     ??i1_getModulationSubdivision:	
  5162  0072                     i1set_leds_top@ledState:	
  5163                           ; 1 bytes @ 0x2
  5164                           
  5165  0072                     i1___awdiv@dividend:	
  5166                           ; 2 bytes @ 0x2
  5167                           
  5168                           
  5169                           ; 2 bytes @ 0x2
  5170  0072                     	ds	2
  5171  0074                     ??i1_set_leds_top:	
  5172  0074                     ??i1___awdiv:	
  5173                           ; 1 bytes @ 0x4
  5174                           
  5175  0074                     i1___lmul@multiplicand:	
  5176                           ; 1 bytes @ 0x4
  5177                           
  5178                           
  5179                           ; 4 bytes @ 0x4
  5180  0074                     	ds	1
  5181  0075                     i1___awdiv@counter:	
  5182                           
  5183                           ; 1 bytes @ 0x5
  5184  0075                     	ds	1
  5185  0076                     i1___awdiv@sign:	
  5186                           
  5187                           ; 1 bytes @ 0x6
  5188  0076                     	ds	1
  5189  0077                     i1___awdiv@quotient:	
  5190                           
  5191                           ; 2 bytes @ 0x7
  5192  0077                     	ds	1
  5193  0078                     ??i1___lmul:	
  5194  0078                     i1___lmul@product:	
  5195                           ; 1 bytes @ 0x8
  5196                           
  5197                           
  5198                           ; 4 bytes @ 0x8
  5199  0078                     	ds	4
  5200  007C                     ??i1___aldiv:	
  5201                           
  5202                           ; 1 bytes @ 0xC
  5203  007C                     	ds	1
  5204  007D                     isr@subDiv:	
  5205                           
  5206                           ; 1 bytes @ 0xD
  5207  007D                     	ds	1
  5208                           
  5209                           	psect	cstackBANK0
  5210  0020                     __pcstackBANK0:	
  5211  0020                     ?i1___aldiv:	
  5212  0020                     i1___aldiv@divisor:	
  5213                           ; 4 bytes @ 0x0
  5214                           
  5215                           
  5216                           ; 4 bytes @ 0x0
  5217  0020                     	ds	4
  5218  0024                     i1___aldiv@dividend:	
  5219                           
  5220                           ; 4 bytes @ 0x4
  5221  0024                     	ds	4
  5222  0028                     i1___aldiv@counter:	
  5223                           
  5224                           ; 1 bytes @ 0x8
  5225  0028                     	ds	1
  5226  0029                     i1___aldiv@sign:	
  5227                           
  5228                           ; 1 bytes @ 0x9
  5229  0029                     	ds	1
  5230  002A                     i1___aldiv@quotient:	
  5231                           
  5232                           ; 4 bytes @ 0xA
  5233  002A                     	ds	4
  5234  002E                     ?_modulation:	
  5235  002E                     modulation@x:	
  5236                           ; 4 bytes @ 0xE
  5237                           
  5238                           
  5239                           ; 4 bytes @ 0xE
  5240  002E                     	ds	4
  5241  0032                     modulation@y:	
  5242                           
  5243                           ; 4 bytes @ 0x12
  5244  0032                     	ds	4
  5245  0036                     ??_modulation:	
  5246                           
  5247                           ; 1 bytes @ 0x16
  5248  0036                     	ds	4
  5249  003A                     ??_isr:	
  5250                           
  5251                           ; 1 bytes @ 0x1A
  5252  003A                     	ds	6
  5253                           
  5254                           	psect	maintext
  5255  035E                     __pmaintext:	
  5256 ;;
  5257 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5258 ;;
  5259 ;; *************** function _main *****************
  5260 ;; Defined at:
  5261 ;;		line 68 in file "main.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : B1F/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5279 ;;Total ram usage:       14 bytes
  5280 ;; Hardware stack levels required when called:    9
  5281 ;; This function calls:
  5282 ;;		_ConfigureOscillator
  5283 ;;		_InitApp
  5284 ;;		_InitializeTaps
  5285 ;;		_ReadSavedSettings
  5286 ;;		_USARTInit
  5287 ;;		___awtoft
  5288 ;;		___fttol
  5289 ;;		_adc_convert
  5290 ;;		_calcCosArray
  5291 ;;		_getModulationDelayTime
  5292 ;;		_initSwitchBypass
  5293 ;;		_map
  5294 ;;		_read_bottom_tactile
  5295 ;;		_read_top_tactile
  5296 ;;		_scaleA100kPot
  5297 ;;		_scaleA10kPot
  5298 ;;		_scaleiA10kPot
  5299 ;;		_set_subdivision
  5300 ;;		_updateModulationArray
  5301 ;;		_updateSwitchBypass
  5302 ;;		_updateSwitchTap
  5303 ;;		_update_mode
  5304 ;;		_update_selectMode
  5305 ;; This function is called by:
  5306 ;;		Startup code after reset
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _main
  5312  035E                     _main:	
  5313                           
  5314                           ;main.c: 70: calcCosArray();
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5318  035E  3198  2050  3183   	fcall	_calcCosArray
  5319                           
  5320                           ;main.c: 71: bottom_push_state = 4;
  5321  0361  3004               	movlw	4
  5322  0362  0020               	movlb	0	; select bank0
  5323  0363  00D6               	movwf	_bottom_push_state
  5324  0364  3000               	movlw	0
  5325  0365  00D7               	movwf	_bottom_push_state+1
  5326                           
  5327                           ;main.c: 72: symmetry = 180;
  5328  0366  30B4               	movlw	180
  5329  0367  0023               	movlb	3	; select bank3
  5330  0368  00DB               	movwf	_symmetry^(0+384)
  5331  0369  3000               	movlw	0
  5332  036A  00DC               	movwf	(_symmetry^(0+384)+1)
  5333                           
  5334                           ;main.c: 73: delay_time = 2400;
  5335  036B  3000               	movlw	0
  5336  036C  0020               	movlb	0	; select bank0
  5337  036D  00D5               	movwf	_delay_time+3	;volatile
  5338  036E  3000               	movlw	0
  5339  036F  00D4               	movwf	_delay_time+2	;volatile
  5340  0370  3009               	movlw	9
  5341  0371  00D3               	movwf	_delay_time+1	;volatile
  5342  0372  3060               	movlw	96
  5343  0373  00D2               	movwf	_delay_time	;volatile
  5344                           
  5345                           ;main.c: 74: updateModulationArray();
  5346  0374  318D  25BA  3183   	fcall	_updateModulationArray
  5347                           
  5348                           ;main.c: 75: __nop();
  5349  0377  0000               	nop
  5350                           
  5351                           ;main.c: 84: USARTInit(31250);
  5352  0378  3012               	movlw	18
  5353  0379  0021               	movlb	1	; select bank1
  5354  037A  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5355  037B  307A               	movlw	122
  5356  037C  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5357  037D  31A3  2370  3183   	fcall	_USARTInit
  5358                           
  5359                           ;main.c: 85: ConfigureOscillator();
  5360  0380  31AD  257F  3183   	fcall	_ConfigureOscillator
  5361                           
  5362                           ;main.c: 86: InitApp();
  5363  0383  31A0  2006  3183   	fcall	_InitApp
  5364                           
  5365                           ;main.c: 88: PORTEbits.RE0 = 1;
  5366  0386  0020               	movlb	0	; select bank0
  5367  0387  1410               	bsf	16,0	;volatile
  5368                           
  5369                           ;main.c: 89: PORTEbits.RE1 = 1;
  5370  0388  1490               	bsf	16,1	;volatile
  5371                           
  5372                           ;main.c: 90: PORTDbits.RD6 = 1;
  5373  0389  170F               	bsf	15,6	;volatile
  5374                           
  5375                           ;main.c: 91: PORTDbits.RD5 = 1;
  5376  038A  168F               	bsf	15,5	;volatile
  5377                           
  5378                           ;main.c: 92: PORTCbits.RC0 = 1;
  5379  038B  140E               	bsf	14,0	;volatile
  5380                           
  5381                           ;main.c: 93: PORTDbits.RD7 = 1;
  5382  038C  178F               	bsf	15,7	;volatile
  5383                           
  5384                           ;main.c: 95: InitializeTaps();
  5385  038D  31AF  2727  3183   	fcall	_InitializeTaps
  5386                           
  5387                           ;main.c: 96: initSwitchBypass();
  5388  0390  31AD  25CC  3183   	fcall	_initSwitchBypass
  5389                           
  5390                           ;main.c: 99: ReadSavedSettings();
  5391  0393  31A7  270E  3183   	fcall	_ReadSavedSettings
  5392                           
  5393                           ;main.c: 100: updateModulationArray();
  5394  0396  318D  25BA  3183   	fcall	_updateModulationArray
  5395  0399                     l9312:	
  5396                           ;main.c: 101: while (1) {
  5397                           
  5398                           
  5399                           ;main.c: 104: update_mode();
  5400  0399  31A0  20CE  3183   	fcall	_update_mode
  5401                           
  5402                           ;main.c: 105: update_selectMode();
  5403  039C  31A5  25DE  3183   	fcall	_update_selectMode
  5404                           
  5405                           ;main.c: 108: updateSwitchBypass();
  5406  039F  3192  223D  3183   	fcall	_updateSwitchBypass
  5407                           
  5408                           ;main.c: 109: if (presetSaveMode != 1) {
  5409  03A2  0020               	movlb	0	; select bank0
  5410  03A3  0351               	decf	_presetSaveMode,w
  5411  03A4  1903               	btfsc	3,2
  5412  03A5  2BA9               	goto	l9322
  5413                           
  5414                           ;main.c: 110: updateSwitchTap();
  5415  03A6  318B  23D3  3183   	fcall	_updateSwitchTap
  5416  03A9                     l9322:	
  5417                           
  5418                           ;main.c: 111: }
  5419                           ;main.c: 113: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5420  03A9  0020               	movlb	0	; select bank0
  5421  03AA  0351               	decf	_presetSaveMode,w
  5422  03AB  1903               	btfsc	3,2
  5423  03AC  2BB8               	goto	l9328
  5424  03AD  0850               	movf	_mode2_state,w
  5425  03AE  0023               	movlb	3	; select bank3
  5426  03AF  0665               	xorwf	_presetModeCnst^(0+384),w
  5427  03B0  1903               	skipnz
  5428  03B1  2BB8               	goto	l9328
  5429                           
  5430                           ;main.c: 114: read_bottom_tactile();
  5431  03B2  31A3  23FC  3183   	fcall	_read_bottom_tactile
  5432                           
  5433                           ;main.c: 115: read_top_tactile();
  5434  03B5  31A4  2446  3183   	fcall	_read_top_tactile
  5435  03B8                     l9328:	
  5436                           
  5437                           ;main.c: 116: }
  5438                           ;main.c: 119: knob_1_pos = adc_convert(0);
  5439  03B8  3000               	movlw	0
  5440  03B9  31AD  25DB  3183   	fcall	_adc_convert
  5441  03BC  0021               	movlb	1	; select bank1
  5442  03BD  0821               	movf	(?_adc_convert+1)^(0+128),w
  5443  03BE  0023               	movlb	3	; select bank3
  5444  03BF  00A9               	movwf	(_knob_1_pos+1)^(0+384)
  5445  03C0  0021               	movlb	1	; select bank1
  5446  03C1  0820               	movf	?_adc_convert^(0+128),w
  5447  03C2  0023               	movlb	3	; select bank3
  5448  03C3  00A8               	movwf	_knob_1_pos^(0+384)
  5449                           
  5450                           ;main.c: 120: knob_2_pos = adc_convert(1);
  5451  03C4  3001               	movlw	1
  5452  03C5  31AD  25DB  3183   	fcall	_adc_convert
  5453  03C8  0021               	movlb	1	; select bank1
  5454  03C9  0821               	movf	(?_adc_convert+1)^(0+128),w
  5455  03CA  0023               	movlb	3	; select bank3
  5456  03CB  00AB               	movwf	(_knob_2_pos+1)^(0+384)
  5457  03CC  0021               	movlb	1	; select bank1
  5458  03CD  0820               	movf	?_adc_convert^(0+128),w
  5459  03CE  0023               	movlb	3	; select bank3
  5460  03CF  00AA               	movwf	_knob_2_pos^(0+384)
  5461                           
  5462                           ;main.c: 121: knob_3_pos = adc_convert(2);
  5463  03D0  3002               	movlw	2
  5464  03D1  31AD  25DB  3183   	fcall	_adc_convert
  5465  03D4  0021               	movlb	1	; select bank1
  5466  03D5  0821               	movf	(?_adc_convert+1)^(0+128),w
  5467  03D6  0023               	movlb	3	; select bank3
  5468  03D7  00AD               	movwf	(_knob_3_pos+1)^(0+384)
  5469  03D8  0021               	movlb	1	; select bank1
  5470  03D9  0820               	movf	?_adc_convert^(0+128),w
  5471  03DA  0023               	movlb	3	; select bank3
  5472  03DB  00AC               	movwf	_knob_3_pos^(0+384)
  5473                           
  5474                           ;main.c: 122: knob_4_pos = adc_convert(3);
  5475  03DC  3003               	movlw	3
  5476  03DD  31AD  25DB  3183   	fcall	_adc_convert
  5477  03E0  0021               	movlb	1	; select bank1
  5478  03E1  0821               	movf	(?_adc_convert+1)^(0+128),w
  5479  03E2  0023               	movlb	3	; select bank3
  5480  03E3  00AF               	movwf	(_knob_4_pos+1)^(0+384)
  5481  03E4  0021               	movlb	1	; select bank1
  5482  03E5  0820               	movf	?_adc_convert^(0+128),w
  5483  03E6  0023               	movlb	3	; select bank3
  5484  03E7  00AE               	movwf	_knob_4_pos^(0+384)
  5485                           
  5486                           ;main.c: 123: knob_5_pos = adc_convert(4);
  5487  03E8  3004               	movlw	4
  5488  03E9  31AD  25DB  3183   	fcall	_adc_convert
  5489  03EC  0021               	movlb	1	; select bank1
  5490  03ED  0821               	movf	(?_adc_convert+1)^(0+128),w
  5491  03EE  0023               	movlb	3	; select bank3
  5492  03EF  00B1               	movwf	(_knob_5_pos+1)^(0+384)
  5493  03F0  0021               	movlb	1	; select bank1
  5494  03F1  0820               	movf	?_adc_convert^(0+128),w
  5495  03F2  0023               	movlb	3	; select bank3
  5496  03F3  00B0               	movwf	_knob_5_pos^(0+384)
  5497                           
  5498                           ;main.c: 127: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5499  03F4  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5500  03F5  0024               	movlb	4	; select bank4
  5501  03F6  00D5               	movwf	??_main^(0+512)
  5502  03F7  0023               	movlb	3	; select bank3
  5503  03F8  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5504  03F9  0024               	movlb	4	; select bank4
  5505  03FA  00D6               	movwf	(??_main^(0+512)+1)
  5506  03FB  0AD5               	incf	??_main^(0+512),f
  5507  03FC  1903               	skipnz
  5508  03FD  0AD6               	incf	(??_main^(0+512)+1),f
  5509  03FE  0023               	movlb	3	; select bank3
  5510  03FF  0828               	movf	_knob_1_pos^(0+384),w
  5511  0400  0024               	movlb	4	; select bank4
  5512  0401  0755               	addwf	??_main^(0+512),w
  5513  0402  00D7               	movwf	(??_main+2)^(0+512)
  5514  0403  0023               	movlb	3	; select bank3
  5515  0404  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5516  0405  0024               	movlb	4	; select bank4
  5517  0406  3D56               	addwfc	(??_main+1)^(0+512),w
  5518  0407  00D8               	movwf	(??_main+3)^(0+512)
  5519  0408  0858               	movf	(??_main+3)^(0+512),w
  5520  0409  3A80               	xorlw	128
  5521  040A  00D9               	movwf	(??_main+4)^(0+512)
  5522  040B  3080               	movlw	128
  5523  040C  0259               	subwf	(??_main+4)^(0+512),w
  5524  040D  1D03               	skipz
  5525  040E  2C11               	goto	u10245
  5526  040F  3004               	movlw	4
  5527  0410  0257               	subwf	(??_main+2)^(0+512),w
  5528  0411                     u10245:	
  5529  0411  1803               	skipnc
  5530  0412  2C33               	goto	l9342
  5531  0413  0023               	movlb	3	; select bank3
  5532  0414  094D               	comf	_knob1_prev^(0+384),w	;volatile
  5533  0415  0024               	movlb	4	; select bank4
  5534  0416  00D5               	movwf	??_main^(0+512)
  5535  0417  0023               	movlb	3	; select bank3
  5536  0418  094E               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5537  0419  0024               	movlb	4	; select bank4
  5538  041A  00D6               	movwf	(??_main^(0+512)+1)
  5539  041B  0AD5               	incf	??_main^(0+512),f
  5540  041C  1903               	skipnz
  5541  041D  0AD6               	incf	(??_main^(0+512)+1),f
  5542  041E  0023               	movlb	3	; select bank3
  5543  041F  0828               	movf	_knob_1_pos^(0+384),w
  5544  0420  0024               	movlb	4	; select bank4
  5545  0421  0755               	addwf	??_main^(0+512),w
  5546  0422  00D7               	movwf	(??_main+2)^(0+512)
  5547  0423  0023               	movlb	3	; select bank3
  5548  0424  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5549  0425  0024               	movlb	4	; select bank4
  5550  0426  3D56               	addwfc	(??_main+1)^(0+512),w
  5551  0427  00D8               	movwf	(??_main+3)^(0+512)
  5552  0428  0858               	movf	(??_main+3)^(0+512),w
  5553  0429  3A80               	xorlw	128
  5554  042A  00D9               	movwf	(??_main+4)^(0+512)
  5555  042B  307F               	movlw	127
  5556  042C  0259               	subwf	(??_main+4)^(0+512),w
  5557  042D  1D03               	skipz
  5558  042E  2C31               	goto	u10255
  5559  042F  30FD               	movlw	253
  5560  0430  0257               	subwf	(??_main+2)^(0+512),w
  5561  0431                     u10255:	
  5562  0431  1803               	skipnc
  5563  0432  2C91               	goto	l9352
  5564  0433                     l9342:	
  5565                           
  5566                           ;main.c: 128: knob1_prev = knob_1_pos;
  5567  0433  0023               	movlb	3	; select bank3
  5568  0434  0829               	movf	(_knob_1_pos+1)^(0+384),w
  5569  0435  00CE               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5570  0436  0828               	movf	_knob_1_pos^(0+384),w
  5571  0437  00CD               	movwf	_knob1_prev^(0+384)	;volatile
  5572                           
  5573                           ;main.c: 129: CCPR4 = scaleA10kPot(knob1_prev);
  5574  0438  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5575  0439  0021               	movlb	1	; select bank1
  5576  043A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5577  043B  0023               	movlb	3	; select bank3
  5578  043C  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5579  043D  0021               	movlb	1	; select bank1
  5580  043E  00A8               	movwf	___awtoft@c^(0+128)
  5581  043F  31AE  26E2  3183   	fcall	___awtoft
  5582  0442  0021               	movlb	1	; select bank1
  5583  0443  0828               	movf	?___awtoft^(0+128),w
  5584  0444  0024               	movlb	4	; select bank4
  5585  0445  00DA               	movwf	_main$2842^(0+512)
  5586  0446  0021               	movlb	1	; select bank1
  5587  0447  0829               	movf	(?___awtoft+1)^(0+128),w
  5588  0448  0024               	movlb	4	; select bank4
  5589  0449  00DB               	movwf	(_main$2842+1)^(0+512)
  5590  044A  0021               	movlb	1	; select bank1
  5591  044B  082A               	movf	(?___awtoft+2)^(0+128),w
  5592  044C  0024               	movlb	4	; select bank4
  5593  044D  00DC               	movwf	(_main$2842+2)^(0+512)
  5594                           
  5595                           ;main.c: 129: CCPR4 = scaleA10kPot(knob1_prev);
  5596  044E  085A               	movf	_main$2842^(0+512),w
  5597  044F  0022               	movlb	2	; select bank2
  5598  0450  00E7               	movwf	scaleA10kPot@input^(0+256)
  5599  0451  0024               	movlb	4	; select bank4
  5600  0452  085B               	movf	(_main$2842+1)^(0+512),w
  5601  0453  0022               	movlb	2	; select bank2
  5602  0454  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5603  0455  0024               	movlb	4	; select bank4
  5604  0456  085C               	movf	(_main$2842+2)^(0+512),w
  5605  0457  0022               	movlb	2	; select bank2
  5606  0458  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5607  0459  319B  23F7  3183   	fcall	_scaleA10kPot
  5608  045C  0022               	movlb	2	; select bank2
  5609  045D  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5610  045E  0026               	movlb	6	; select bank6
  5611  045F  0099               	movwf	25	;volatile
  5612  0460  0022               	movlb	2	; select bank2
  5613  0461  0867               	movf	?_scaleA10kPot^(0+256),w
  5614  0462  0026               	movlb	6	; select bank6
  5615  0463  0098               	movwf	24	;volatile
  5616                           
  5617                           ;main.c: 130: CCPR5 = scaleiA10kPot(knob1_prev);
  5618  0464  0023               	movlb	3	; select bank3
  5619  0465  084E               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5620  0466  0021               	movlb	1	; select bank1
  5621  0467  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5622  0468  0023               	movlb	3	; select bank3
  5623  0469  084D               	movf	_knob1_prev^(0+384),w	;volatile
  5624  046A  0021               	movlb	1	; select bank1
  5625  046B  00A8               	movwf	___awtoft@c^(0+128)
  5626  046C  31AE  26E2  3183   	fcall	___awtoft
  5627  046F  0021               	movlb	1	; select bank1
  5628  0470  0828               	movf	?___awtoft^(0+128),w
  5629  0471  0024               	movlb	4	; select bank4
  5630  0472  00DD               	movwf	_main$2843^(0+512)
  5631  0473  0021               	movlb	1	; select bank1
  5632  0474  0829               	movf	(?___awtoft+1)^(0+128),w
  5633  0475  0024               	movlb	4	; select bank4
  5634  0476  00DE               	movwf	(_main$2843+1)^(0+512)
  5635  0477  0021               	movlb	1	; select bank1
  5636  0478  082A               	movf	(?___awtoft+2)^(0+128),w
  5637  0479  0024               	movlb	4	; select bank4
  5638  047A  00DF               	movwf	(_main$2843+2)^(0+512)
  5639                           
  5640                           ;main.c: 130: CCPR5 = scaleiA10kPot(knob1_prev);
  5641  047B  085D               	movf	_main$2843^(0+512),w
  5642  047C  0022               	movlb	2	; select bank2
  5643  047D  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5644  047E  0024               	movlb	4	; select bank4
  5645  047F  085E               	movf	(_main$2843+1)^(0+512),w
  5646  0480  0022               	movlb	2	; select bank2
  5647  0481  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5648  0482  0024               	movlb	4	; select bank4
  5649  0483  085F               	movf	(_main$2843+2)^(0+512),w
  5650  0484  0022               	movlb	2	; select bank2
  5651  0485  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5652  0486  3187  2752  3183   	fcall	_scaleiA10kPot
  5653  0489  0022               	movlb	2	; select bank2
  5654  048A  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5655  048B  0026               	movlb	6	; select bank6
  5656  048C  009D               	movwf	29	;volatile
  5657  048D  0022               	movlb	2	; select bank2
  5658  048E  0867               	movf	?_scaleiA10kPot^(0+256),w
  5659  048F  0026               	movlb	6	; select bank6
  5660  0490  009C               	movwf	28	;volatile
  5661  0491                     l9352:	
  5662                           
  5663                           ;main.c: 132: }
  5664                           ;main.c: 136: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5665  0491  0023               	movlb	3	; select bank3
  5666  0492  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5667  0493  0024               	movlb	4	; select bank4
  5668  0494  00D5               	movwf	??_main^(0+512)
  5669  0495  0023               	movlb	3	; select bank3
  5670  0496  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5671  0497  0024               	movlb	4	; select bank4
  5672  0498  00D6               	movwf	(??_main^(0+512)+1)
  5673  0499  0AD5               	incf	??_main^(0+512),f
  5674  049A  1903               	skipnz
  5675  049B  0AD6               	incf	(??_main^(0+512)+1),f
  5676  049C  0023               	movlb	3	; select bank3
  5677  049D  082A               	movf	_knob_2_pos^(0+384),w
  5678  049E  0024               	movlb	4	; select bank4
  5679  049F  0755               	addwf	??_main^(0+512),w
  5680  04A0  00D7               	movwf	(??_main+2)^(0+512)
  5681  04A1  0023               	movlb	3	; select bank3
  5682  04A2  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5683  04A3  0024               	movlb	4	; select bank4
  5684  04A4  3D56               	addwfc	(??_main+1)^(0+512),w
  5685  04A5  00D8               	movwf	(??_main+3)^(0+512)
  5686  04A6  0858               	movf	(??_main+3)^(0+512),w
  5687  04A7  3A80               	xorlw	128
  5688  04A8  00D9               	movwf	(??_main+4)^(0+512)
  5689  04A9  3080               	movlw	128
  5690  04AA  0259               	subwf	(??_main+4)^(0+512),w
  5691  04AB  1D03               	skipz
  5692  04AC  2CAF               	goto	u10265
  5693  04AD  3004               	movlw	4
  5694  04AE  0257               	subwf	(??_main+2)^(0+512),w
  5695  04AF                     u10265:	
  5696  04AF  1803               	skipnc
  5697  04B0  2CD1               	goto	l9356
  5698  04B1  0023               	movlb	3	; select bank3
  5699  04B2  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5700  04B3  0024               	movlb	4	; select bank4
  5701  04B4  00D5               	movwf	??_main^(0+512)
  5702  04B5  0023               	movlb	3	; select bank3
  5703  04B6  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5704  04B7  0024               	movlb	4	; select bank4
  5705  04B8  00D6               	movwf	(??_main^(0+512)+1)
  5706  04B9  0AD5               	incf	??_main^(0+512),f
  5707  04BA  1903               	skipnz
  5708  04BB  0AD6               	incf	(??_main^(0+512)+1),f
  5709  04BC  0023               	movlb	3	; select bank3
  5710  04BD  082A               	movf	_knob_2_pos^(0+384),w
  5711  04BE  0024               	movlb	4	; select bank4
  5712  04BF  0755               	addwf	??_main^(0+512),w
  5713  04C0  00D7               	movwf	(??_main+2)^(0+512)
  5714  04C1  0023               	movlb	3	; select bank3
  5715  04C2  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5716  04C3  0024               	movlb	4	; select bank4
  5717  04C4  3D56               	addwfc	(??_main+1)^(0+512),w
  5718  04C5  00D8               	movwf	(??_main+3)^(0+512)
  5719  04C6  0858               	movf	(??_main+3)^(0+512),w
  5720  04C7  3A80               	xorlw	128
  5721  04C8  00D9               	movwf	(??_main+4)^(0+512)
  5722  04C9  307F               	movlw	127
  5723  04CA  0259               	subwf	(??_main+4)^(0+512),w
  5724  04CB  1D03               	skipz
  5725  04CC  2CCF               	goto	u10275
  5726  04CD  30FD               	movlw	253
  5727  04CE  0257               	subwf	(??_main+2)^(0+512),w
  5728  04CF                     u10275:	
  5729  04CF  1803               	skipnc
  5730  04D0  2D47               	goto	l9366
  5731  04D1                     l9356:	
  5732                           
  5733                           ;main.c: 137: knob2_prev = knob_2_pos;
  5734  04D1  0023               	movlb	3	; select bank3
  5735  04D2  082B               	movf	(_knob_2_pos+1)^(0+384),w
  5736  04D3  00D0               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5737  04D4  082A               	movf	_knob_2_pos^(0+384),w
  5738  04D5  00CF               	movwf	_knob2_prev^(0+384)	;volatile
  5739                           
  5740                           ;main.c: 138: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5741  04D6  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5742  04D7  0024               	movlb	4	; select bank4
  5743  04D8  00D5               	movwf	??_main^(0+512)
  5744  04D9  0023               	movlb	3	; select bank3
  5745  04DA  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5746  04DB  0024               	movlb	4	; select bank4
  5747  04DC  00D6               	movwf	(??_main^(0+512)+1)
  5748  04DD  0AD5               	incf	??_main^(0+512),f
  5749  04DE  1903               	skipnz
  5750  04DF  0AD6               	incf	(??_main^(0+512)+1),f
  5751  04E0  0855               	movf	??_main^(0+512),w
  5752  04E1  3EFF               	addlw	255
  5753  04E2  0021               	movlb	1	; select bank1
  5754  04E3  00A8               	movwf	___awtoft@c^(0+128)
  5755  04E4  3003               	movlw	3
  5756  04E5  0024               	movlb	4	; select bank4
  5757  04E6  3D56               	addwfc	(??_main+1)^(0+512),w
  5758  04E7  0021               	movlb	1	; select bank1
  5759  04E8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5760  04E9  31AE  26E2  3183   	fcall	___awtoft
  5761  04EC  0021               	movlb	1	; select bank1
  5762  04ED  0828               	movf	?___awtoft^(0+128),w
  5763  04EE  0024               	movlb	4	; select bank4
  5764  04EF  00E0               	movwf	_main$2844^(0+512)
  5765  04F0  0021               	movlb	1	; select bank1
  5766  04F1  0829               	movf	(?___awtoft+1)^(0+128),w
  5767  04F2  0024               	movlb	4	; select bank4
  5768  04F3  00E1               	movwf	(_main$2844+1)^(0+512)
  5769  04F4  0021               	movlb	1	; select bank1
  5770  04F5  082A               	movf	(?___awtoft+2)^(0+128),w
  5771  04F6  0024               	movlb	4	; select bank4
  5772  04F7  00E2               	movwf	(_main$2844+2)^(0+512)
  5773                           
  5774                           ;main.c: 138: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5775  04F8  0860               	movf	_main$2844^(0+512),w
  5776  04F9  0022               	movlb	2	; select bank2
  5777  04FA  00E7               	movwf	scaleA100kPot@input^(0+256)
  5778  04FB  0024               	movlb	4	; select bank4
  5779  04FC  0861               	movf	(_main$2844+1)^(0+512),w
  5780  04FD  0022               	movlb	2	; select bank2
  5781  04FE  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5782  04FF  0024               	movlb	4	; select bank4
  5783  0500  0862               	movf	(_main$2844+2)^(0+512),w
  5784  0501  0022               	movlb	2	; select bank2
  5785  0502  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5786  0503  3199  21D5  3183   	fcall	_scaleA100kPot
  5787  0506  0022               	movlb	2	; select bank2
  5788  0507  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5789  0508  0025               	movlb	5	; select bank5
  5790  0509  0092               	movwf	18	;volatile
  5791  050A  0022               	movlb	2	; select bank2
  5792  050B  0867               	movf	?_scaleA100kPot^(0+256),w
  5793  050C  0025               	movlb	5	; select bank5
  5794  050D  0091               	movwf	17	;volatile
  5795                           
  5796                           ;main.c: 139: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5797  050E  0023               	movlb	3	; select bank3
  5798  050F  094F               	comf	_knob2_prev^(0+384),w	;volatile
  5799  0510  0024               	movlb	4	; select bank4
  5800  0511  00D5               	movwf	??_main^(0+512)
  5801  0512  0023               	movlb	3	; select bank3
  5802  0513  0950               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5803  0514  0024               	movlb	4	; select bank4
  5804  0515  00D6               	movwf	(??_main^(0+512)+1)
  5805  0516  0AD5               	incf	??_main^(0+512),f
  5806  0517  1903               	skipnz
  5807  0518  0AD6               	incf	(??_main^(0+512)+1),f
  5808  0519  0855               	movf	??_main^(0+512),w
  5809  051A  3EFF               	addlw	255
  5810  051B  0021               	movlb	1	; select bank1
  5811  051C  00A8               	movwf	___awtoft@c^(0+128)
  5812  051D  3003               	movlw	3
  5813  051E  0024               	movlb	4	; select bank4
  5814  051F  3D56               	addwfc	(??_main+1)^(0+512),w
  5815  0520  0021               	movlb	1	; select bank1
  5816  0521  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5817  0522  31AE  26E2  3183   	fcall	___awtoft
  5818  0525  0021               	movlb	1	; select bank1
  5819  0526  0828               	movf	?___awtoft^(0+128),w
  5820  0527  0024               	movlb	4	; select bank4
  5821  0528  00E0               	movwf	_main$2844^(0+512)
  5822  0529  0021               	movlb	1	; select bank1
  5823  052A  0829               	movf	(?___awtoft+1)^(0+128),w
  5824  052B  0024               	movlb	4	; select bank4
  5825  052C  00E1               	movwf	(_main$2844+1)^(0+512)
  5826  052D  0021               	movlb	1	; select bank1
  5827  052E  082A               	movf	(?___awtoft+2)^(0+128),w
  5828  052F  0024               	movlb	4	; select bank4
  5829  0530  00E2               	movwf	(_main$2844+2)^(0+512)
  5830                           
  5831                           ;main.c: 139: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5832  0531  0860               	movf	_main$2844^(0+512),w
  5833  0532  0022               	movlb	2	; select bank2
  5834  0533  00E7               	movwf	scaleA100kPot@input^(0+256)
  5835  0534  0024               	movlb	4	; select bank4
  5836  0535  0861               	movf	(_main$2844+1)^(0+512),w
  5837  0536  0022               	movlb	2	; select bank2
  5838  0537  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5839  0538  0024               	movlb	4	; select bank4
  5840  0539  0862               	movf	(_main$2844+2)^(0+512),w
  5841  053A  0022               	movlb	2	; select bank2
  5842  053B  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5843  053C  3199  21D5  3183   	fcall	_scaleA100kPot
  5844  053F  0022               	movlb	2	; select bank2
  5845  0540  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5846  0541  0025               	movlb	5	; select bank5
  5847  0542  0099               	movwf	25	;volatile
  5848  0543  0022               	movlb	2	; select bank2
  5849  0544  0867               	movf	?_scaleA100kPot^(0+256),w
  5850  0545  0025               	movlb	5	; select bank5
  5851  0546  0098               	movwf	24	;volatile
  5852  0547                     l9366:	
  5853                           
  5854                           ;main.c: 140: }
  5855                           ;main.c: 150: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5856  0547  0023               	movlb	3	; select bank3
  5857  0548  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5858  0549  0024               	movlb	4	; select bank4
  5859  054A  00D5               	movwf	??_main^(0+512)
  5860  054B  0023               	movlb	3	; select bank3
  5861  054C  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5862  054D  0024               	movlb	4	; select bank4
  5863  054E  00D6               	movwf	(??_main^(0+512)+1)
  5864  054F  0AD5               	incf	??_main^(0+512),f
  5865  0550  1903               	skipnz
  5866  0551  0AD6               	incf	(??_main^(0+512)+1),f
  5867  0552  0023               	movlb	3	; select bank3
  5868  0553  082C               	movf	_knob_3_pos^(0+384),w
  5869  0554  0024               	movlb	4	; select bank4
  5870  0555  0755               	addwf	??_main^(0+512),w
  5871  0556  00D7               	movwf	(??_main+2)^(0+512)
  5872  0557  0023               	movlb	3	; select bank3
  5873  0558  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5874  0559  0024               	movlb	4	; select bank4
  5875  055A  3D56               	addwfc	(??_main+1)^(0+512),w
  5876  055B  00D8               	movwf	(??_main+3)^(0+512)
  5877  055C  0858               	movf	(??_main+3)^(0+512),w
  5878  055D  3A80               	xorlw	128
  5879  055E  00D9               	movwf	(??_main+4)^(0+512)
  5880  055F  3080               	movlw	128
  5881  0560  0259               	subwf	(??_main+4)^(0+512),w
  5882  0561  1D03               	skipz
  5883  0562  2D65               	goto	u10285
  5884  0563  3004               	movlw	4
  5885  0564  0257               	subwf	(??_main+2)^(0+512),w
  5886  0565                     u10285:	
  5887  0565  1803               	skipnc
  5888  0566  2D87               	goto	l9370
  5889  0567  0023               	movlb	3	; select bank3
  5890  0568  0951               	comf	_knob3_prev^(0+384),w	;volatile
  5891  0569  0024               	movlb	4	; select bank4
  5892  056A  00D5               	movwf	??_main^(0+512)
  5893  056B  0023               	movlb	3	; select bank3
  5894  056C  0952               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5895  056D  0024               	movlb	4	; select bank4
  5896  056E  00D6               	movwf	(??_main^(0+512)+1)
  5897  056F  0AD5               	incf	??_main^(0+512),f
  5898  0570  1903               	skipnz
  5899  0571  0AD6               	incf	(??_main^(0+512)+1),f
  5900  0572  0023               	movlb	3	; select bank3
  5901  0573  082C               	movf	_knob_3_pos^(0+384),w
  5902  0574  0024               	movlb	4	; select bank4
  5903  0575  0755               	addwf	??_main^(0+512),w
  5904  0576  00D7               	movwf	(??_main+2)^(0+512)
  5905  0577  0023               	movlb	3	; select bank3
  5906  0578  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5907  0579  0024               	movlb	4	; select bank4
  5908  057A  3D56               	addwfc	(??_main+1)^(0+512),w
  5909  057B  00D8               	movwf	(??_main+3)^(0+512)
  5910  057C  0858               	movf	(??_main+3)^(0+512),w
  5911  057D  3A80               	xorlw	128
  5912  057E  00D9               	movwf	(??_main+4)^(0+512)
  5913  057F  307F               	movlw	127
  5914  0580  0259               	subwf	(??_main+4)^(0+512),w
  5915  0581  1D03               	skipz
  5916  0582  2D85               	goto	u10295
  5917  0583  30FD               	movlw	253
  5918  0584  0257               	subwf	(??_main+2)^(0+512),w
  5919  0585                     u10295:	
  5920  0585  1803               	skipnc
  5921  0586  2DF3               	goto	l9382
  5922  0587                     l9370:	
  5923                           
  5924                           ;main.c: 151: knob3_prev = knob_3_pos;
  5925  0587  0023               	movlb	3	; select bank3
  5926  0588  082D               	movf	(_knob_3_pos+1)^(0+384),w
  5927  0589  00D2               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5928  058A  082C               	movf	_knob_3_pos^(0+384),w
  5929  058B  00D1               	movwf	_knob3_prev^(0+384)	;volatile
  5930                           
  5931                           ;main.c: 152: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5932  058C  3080               	movlw	128
  5933  058D  0021               	movlb	1	; select bank1
  5934  058E  00EA               	movwf	map@out_max^(0+128)
  5935  058F  309D               	movlw	157
  5936  0590  00EB               	movwf	(map@out_max+1)^(0+128)
  5937  0591  3043               	movlw	67
  5938  0592  00EC               	movwf	(map@out_max+2)^(0+128)
  5939  0593  3000               	movlw	0
  5940  0594  00E7               	movwf	map@out_min^(0+128)
  5941  0595  3034               	movlw	52
  5942  0596  00E8               	movwf	(map@out_min+1)^(0+128)
  5943  0597  3042               	movlw	66
  5944  0598  00E9               	movwf	(map@out_min+2)^(0+128)
  5945  0599  30C0               	movlw	192
  5946  059A  00E4               	movwf	map@in_max^(0+128)
  5947  059B  307F               	movlw	127
  5948  059C  00E5               	movwf	(map@in_max+1)^(0+128)
  5949  059D  3044               	movlw	68
  5950  059E  00E6               	movwf	(map@in_max+2)^(0+128)
  5951  059F  3000               	movlw	0
  5952  05A0  00E1               	movwf	map@in_min^(0+128)
  5953  05A1  3000               	movlw	0
  5954  05A2  00E2               	movwf	(map@in_min+1)^(0+128)
  5955  05A3  3000               	movlw	0
  5956  05A4  00E3               	movwf	(map@in_min+2)^(0+128)
  5957  05A5  0023               	movlb	3	; select bank3
  5958  05A6  0852               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5959  05A7  0021               	movlb	1	; select bank1
  5960  05A8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5961  05A9  0023               	movlb	3	; select bank3
  5962  05AA  0851               	movf	_knob3_prev^(0+384),w	;volatile
  5963  05AB  0021               	movlb	1	; select bank1
  5964  05AC  00A8               	movwf	___awtoft@c^(0+128)
  5965  05AD  31AE  26E2  3183   	fcall	___awtoft
  5966  05B0  0021               	movlb	1	; select bank1
  5967  05B1  0828               	movf	?___awtoft^(0+128),w
  5968  05B2  00DE               	movwf	map@x^(0+128)
  5969  05B3  0829               	movf	(?___awtoft+1)^(0+128),w
  5970  05B4  00DF               	movwf	(map@x+1)^(0+128)
  5971  05B5  082A               	movf	(?___awtoft+2)^(0+128),w
  5972  05B6  00E0               	movwf	(map@x+2)^(0+128)
  5973  05B7  319A  22E1  3183   	fcall	_map
  5974  05BA  0021               	movlb	1	; select bank1
  5975  05BB  085E               	movf	?_map^(0+128),w
  5976  05BC  0022               	movlb	2	; select bank2
  5977  05BD  00A0               	movwf	___fttol@f1^(0+256)
  5978  05BE  0021               	movlb	1	; select bank1
  5979  05BF  085F               	movf	(?_map+1)^(0+128),w
  5980  05C0  0022               	movlb	2	; select bank2
  5981  05C1  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5982  05C2  0021               	movlb	1	; select bank1
  5983  05C3  0860               	movf	(?_map+2)^(0+128),w
  5984  05C4  0022               	movlb	2	; select bank2
  5985  05C5  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5986  05C6  319A  225A  3183   	fcall	___fttol
  5987  05C9  0022               	movlb	2	; select bank2
  5988  05CA  0821               	movf	(?___fttol^(0+256)+1),w
  5989  05CB  0023               	movlb	3	; select bank3
  5990  05CC  00DC               	movwf	(_symmetry+1)^(0+384)
  5991  05CD  0022               	movlb	2	; select bank2
  5992  05CE  0820               	movf	?___fttol^(0+256),w
  5993  05CF  0023               	movlb	3	; select bank3
  5994  05D0  00DB               	movwf	_symmetry^(0+384)
  5995                           
  5996                           ;main.c: 154: modulation_changed = 1;
  5997  05D1  01C2               	clrf	_modulation_changed^(0+384)
  5998  05D2  0AC2               	incf	_modulation_changed^(0+384),f
  5999                           
  6000                           ;main.c: 155: if (symmetry > 174 && symmetry < 185) {
  6001  05D3  085C               	movf	(_symmetry+1)^(0+384),w
  6002  05D4  3A80               	xorlw	128
  6003  05D5  0024               	movlb	4	; select bank4
  6004  05D6  00D5               	movwf	??_main^(0+512)
  6005  05D7  3080               	movlw	128
  6006  05D8  0255               	subwf	??_main^(0+512),w
  6007  05D9  1D03               	skipz
  6008  05DA  2DDE               	goto	u10305
  6009  05DB  30AF               	movlw	175
  6010  05DC  0023               	movlb	3	; select bank3
  6011  05DD  025B               	subwf	_symmetry^(0+384),w
  6012  05DE                     u10305:	
  6013  05DE  1C03               	skipc
  6014  05DF  2DF1               	goto	l366
  6015  05E0  0023               	movlb	3	; select bank3
  6016  05E1  085C               	movf	(_symmetry+1)^(0+384),w
  6017  05E2  3A80               	xorlw	128
  6018  05E3  0024               	movlb	4	; select bank4
  6019  05E4  00D5               	movwf	??_main^(0+512)
  6020  05E5  3080               	movlw	128
  6021  05E6  0255               	subwf	??_main^(0+512),w
  6022  05E7  1D03               	skipz
  6023  05E8  2DEC               	goto	u10315
  6024  05E9  30B9               	movlw	185
  6025  05EA  0023               	movlb	3	; select bank3
  6026  05EB  025B               	subwf	_symmetry^(0+384),w
  6027  05EC                     u10315:	
  6028  05EC  1803               	skipnc
  6029  05ED  2DF1               	goto	l366
  6030                           
  6031                           ;main.c: 156: LATBbits.LATB1 = 1;
  6032  05EE  0022               	movlb	2	; select bank2
  6033  05EF  148D               	bsf	13,1	;volatile
  6034                           
  6035                           ;main.c: 157: } else {
  6036  05F0  2DF3               	goto	l9382
  6037  05F1                     l366:	
  6038                           
  6039                           ;main.c: 158: LATBbits.LATB1 = 0;
  6040  05F1  0022               	movlb	2	; select bank2
  6041  05F2  108D               	bcf	13,1	;volatile
  6042  05F3                     l9382:	
  6043                           
  6044                           ;main.c: 159: }
  6045                           ;main.c: 160: }
  6046                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6047  05F3  0023               	movlb	3	; select bank3
  6048  05F4  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6049  05F5  0024               	movlb	4	; select bank4
  6050  05F6  00D5               	movwf	??_main^(0+512)
  6051  05F7  0023               	movlb	3	; select bank3
  6052  05F8  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6053  05F9  0024               	movlb	4	; select bank4
  6054  05FA  00D6               	movwf	(??_main^(0+512)+1)
  6055  05FB  0AD5               	incf	??_main^(0+512),f
  6056  05FC  1903               	skipnz
  6057  05FD  0AD6               	incf	(??_main^(0+512)+1),f
  6058  05FE  0023               	movlb	3	; select bank3
  6059  05FF  082E               	movf	_knob_4_pos^(0+384),w
  6060  0600  0024               	movlb	4	; select bank4
  6061  0601  0755               	addwf	??_main^(0+512),w
  6062  0602  00D7               	movwf	(??_main+2)^(0+512)
  6063  0603  0023               	movlb	3	; select bank3
  6064  0604  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6065  0605  0024               	movlb	4	; select bank4
  6066  0606  3D56               	addwfc	(??_main+1)^(0+512),w
  6067  0607  00D8               	movwf	(??_main+3)^(0+512)
  6068  0608  0858               	movf	(??_main+3)^(0+512),w
  6069  0609  3A80               	xorlw	128
  6070  060A  00D9               	movwf	(??_main+4)^(0+512)
  6071  060B  3080               	movlw	128
  6072  060C  0259               	subwf	(??_main+4)^(0+512),w
  6073  060D  1D03               	skipz
  6074  060E  2E11               	goto	u10325
  6075  060F  3004               	movlw	4
  6076  0610  0257               	subwf	(??_main+2)^(0+512),w
  6077  0611                     u10325:	
  6078  0611  1803               	skipnc
  6079  0612  2E33               	goto	l9386
  6080  0613  0023               	movlb	3	; select bank3
  6081  0614  0953               	comf	_knob4_prev^(0+384),w	;volatile
  6082  0615  0024               	movlb	4	; select bank4
  6083  0616  00D5               	movwf	??_main^(0+512)
  6084  0617  0023               	movlb	3	; select bank3
  6085  0618  0954               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6086  0619  0024               	movlb	4	; select bank4
  6087  061A  00D6               	movwf	(??_main^(0+512)+1)
  6088  061B  0AD5               	incf	??_main^(0+512),f
  6089  061C  1903               	skipnz
  6090  061D  0AD6               	incf	(??_main^(0+512)+1),f
  6091  061E  0023               	movlb	3	; select bank3
  6092  061F  082E               	movf	_knob_4_pos^(0+384),w
  6093  0620  0024               	movlb	4	; select bank4
  6094  0621  0755               	addwf	??_main^(0+512),w
  6095  0622  00D7               	movwf	(??_main+2)^(0+512)
  6096  0623  0023               	movlb	3	; select bank3
  6097  0624  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6098  0625  0024               	movlb	4	; select bank4
  6099  0626  3D56               	addwfc	(??_main+1)^(0+512),w
  6100  0627  00D8               	movwf	(??_main+3)^(0+512)
  6101  0628  0858               	movf	(??_main+3)^(0+512),w
  6102  0629  3A80               	xorlw	128
  6103  062A  00D9               	movwf	(??_main+4)^(0+512)
  6104  062B  307F               	movlw	127
  6105  062C  0259               	subwf	(??_main+4)^(0+512),w
  6106  062D  1D03               	skipz
  6107  062E  2E31               	goto	u10335
  6108  062F  30FD               	movlw	253
  6109  0630  0257               	subwf	(??_main+2)^(0+512),w
  6110  0631                     u10335:	
  6111  0631  1803               	skipnc
  6112  0632  2E84               	goto	l9392
  6113  0633                     l9386:	
  6114                           
  6115                           ;main.c: 170: knob4_prev = knob_4_pos;
  6116  0633  0023               	movlb	3	; select bank3
  6117  0634  082F               	movf	(_knob_4_pos+1)^(0+384),w
  6118  0635  00D4               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6119  0636  082E               	movf	_knob_4_pos^(0+384),w
  6120  0637  00D3               	movwf	_knob4_prev^(0+384)	;volatile
  6121                           
  6122                           ;main.c: 171: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6123  0638  3040               	movlw	64
  6124  0639  0021               	movlb	1	; select bank1
  6125  063A  00EA               	movwf	map@out_max^(0+128)
  6126  063B  3030               	movlw	48
  6127  063C  00EB               	movwf	(map@out_max+1)^(0+128)
  6128  063D  3045               	movlw	69
  6129  063E  00EC               	movwf	(map@out_max+2)^(0+128)
  6130  063F  3000               	movlw	0
  6131  0640  00E7               	movwf	map@out_min^(0+128)
  6132  0641  3034               	movlw	52
  6133  0642  00E8               	movwf	(map@out_min+1)^(0+128)
  6134  0643  3043               	movlw	67
  6135  0644  00E9               	movwf	(map@out_min+2)^(0+128)
  6136  0645  30C0               	movlw	192
  6137  0646  00E4               	movwf	map@in_max^(0+128)
  6138  0647  307F               	movlw	127
  6139  0648  00E5               	movwf	(map@in_max+1)^(0+128)
  6140  0649  3044               	movlw	68
  6141  064A  00E6               	movwf	(map@in_max+2)^(0+128)
  6142  064B  3000               	movlw	0
  6143  064C  00E1               	movwf	map@in_min^(0+128)
  6144  064D  3000               	movlw	0
  6145  064E  00E2               	movwf	(map@in_min+1)^(0+128)
  6146  064F  3000               	movlw	0
  6147  0650  00E3               	movwf	(map@in_min+2)^(0+128)
  6148  0651  0023               	movlb	3	; select bank3
  6149  0652  0854               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6150  0653  0021               	movlb	1	; select bank1
  6151  0654  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6152  0655  0023               	movlb	3	; select bank3
  6153  0656  0853               	movf	_knob4_prev^(0+384),w	;volatile
  6154  0657  0021               	movlb	1	; select bank1
  6155  0658  00A8               	movwf	___awtoft@c^(0+128)
  6156  0659  31AE  26E2  3183   	fcall	___awtoft
  6157  065C  0021               	movlb	1	; select bank1
  6158  065D  0828               	movf	?___awtoft^(0+128),w
  6159  065E  00DE               	movwf	map@x^(0+128)
  6160  065F  0829               	movf	(?___awtoft+1)^(0+128),w
  6161  0660  00DF               	movwf	(map@x+1)^(0+128)
  6162  0661  082A               	movf	(?___awtoft+2)^(0+128),w
  6163  0662  00E0               	movwf	(map@x+2)^(0+128)
  6164  0663  319A  22E1  3183   	fcall	_map
  6165  0666  0021               	movlb	1	; select bank1
  6166  0667  085E               	movf	?_map^(0+128),w
  6167  0668  0022               	movlb	2	; select bank2
  6168  0669  00A0               	movwf	___fttol@f1^(0+256)
  6169  066A  0021               	movlb	1	; select bank1
  6170  066B  085F               	movf	(?_map+1)^(0+128),w
  6171  066C  0022               	movlb	2	; select bank2
  6172  066D  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6173  066E  0021               	movlb	1	; select bank1
  6174  066F  0860               	movf	(?_map+2)^(0+128),w
  6175  0670  0022               	movlb	2	; select bank2
  6176  0671  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6177  0672  319A  225A  3183   	fcall	___fttol
  6178  0675  0022               	movlb	2	; select bank2
  6179  0676  0820               	movf	?___fttol^(0+256),w
  6180  0677  0023               	movlb	3	; select bank3
  6181  0678  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  6182  0679  0022               	movlb	2	; select bank2
  6183  067A  0821               	movf	(?___fttol^(0+256)+1),w
  6184  067B  0023               	movlb	3	; select bank3
  6185  067C  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6186  067D  0D89               	rlf	9,f
  6187  067E  3B89               	subwfb	9,f
  6188  067F  0989               	comf	9,f
  6189  0680  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6190  0681  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6191                           
  6192                           ;main.c: 172: mod_time_changed = 1;
  6193  0682  01E4               	clrf	_mod_time_changed^(0+384)
  6194  0683  0AE4               	incf	_mod_time_changed^(0+384),f
  6195  0684                     l9392:	
  6196                           
  6197                           ;main.c: 174: }
  6198                           ;main.c: 177: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6199  0684  0023               	movlb	3	; select bank3
  6200  0685  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6201  0686  0024               	movlb	4	; select bank4
  6202  0687  00D5               	movwf	??_main^(0+512)
  6203  0688  0023               	movlb	3	; select bank3
  6204  0689  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6205  068A  0024               	movlb	4	; select bank4
  6206  068B  00D6               	movwf	(??_main^(0+512)+1)
  6207  068C  0AD5               	incf	??_main^(0+512),f
  6208  068D  1903               	skipnz
  6209  068E  0AD6               	incf	(??_main^(0+512)+1),f
  6210  068F  0023               	movlb	3	; select bank3
  6211  0690  0830               	movf	_knob_5_pos^(0+384),w
  6212  0691  0024               	movlb	4	; select bank4
  6213  0692  0755               	addwf	??_main^(0+512),w
  6214  0693  00D7               	movwf	(??_main+2)^(0+512)
  6215  0694  0023               	movlb	3	; select bank3
  6216  0695  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6217  0696  0024               	movlb	4	; select bank4
  6218  0697  3D56               	addwfc	(??_main+1)^(0+512),w
  6219  0698  00D8               	movwf	(??_main+3)^(0+512)
  6220  0699  0858               	movf	(??_main+3)^(0+512),w
  6221  069A  3A80               	xorlw	128
  6222  069B  00D9               	movwf	(??_main+4)^(0+512)
  6223  069C  3080               	movlw	128
  6224  069D  0259               	subwf	(??_main+4)^(0+512),w
  6225  069E  1D03               	skipz
  6226  069F  2EA2               	goto	u10345
  6227  06A0  3004               	movlw	4
  6228  06A1  0257               	subwf	(??_main+2)^(0+512),w
  6229  06A2                     u10345:	
  6230  06A2  1803               	skipnc
  6231  06A3  2EC4               	goto	l9396
  6232  06A4  0023               	movlb	3	; select bank3
  6233  06A5  0955               	comf	_knob5_prev^(0+384),w	;volatile
  6234  06A6  0024               	movlb	4	; select bank4
  6235  06A7  00D5               	movwf	??_main^(0+512)
  6236  06A8  0023               	movlb	3	; select bank3
  6237  06A9  0956               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6238  06AA  0024               	movlb	4	; select bank4
  6239  06AB  00D6               	movwf	(??_main^(0+512)+1)
  6240  06AC  0AD5               	incf	??_main^(0+512),f
  6241  06AD  1903               	skipnz
  6242  06AE  0AD6               	incf	(??_main^(0+512)+1),f
  6243  06AF  0023               	movlb	3	; select bank3
  6244  06B0  0830               	movf	_knob_5_pos^(0+384),w
  6245  06B1  0024               	movlb	4	; select bank4
  6246  06B2  0755               	addwf	??_main^(0+512),w
  6247  06B3  00D7               	movwf	(??_main+2)^(0+512)
  6248  06B4  0023               	movlb	3	; select bank3
  6249  06B5  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6250  06B6  0024               	movlb	4	; select bank4
  6251  06B7  3D56               	addwfc	(??_main+1)^(0+512),w
  6252  06B8  00D8               	movwf	(??_main+3)^(0+512)
  6253  06B9  0858               	movf	(??_main+3)^(0+512),w
  6254  06BA  3A80               	xorlw	128
  6255  06BB  00D9               	movwf	(??_main+4)^(0+512)
  6256  06BC  307F               	movlw	127
  6257  06BD  0259               	subwf	(??_main+4)^(0+512),w
  6258  06BE  1D03               	skipz
  6259  06BF  2EC2               	goto	u10355
  6260  06C0  30FD               	movlw	253
  6261  06C1  0257               	subwf	(??_main+2)^(0+512),w
  6262  06C2                     u10355:	
  6263  06C2  1803               	skipnc
  6264  06C3  2F0E               	goto	l9400
  6265  06C4                     l9396:	
  6266                           
  6267                           ;main.c: 178: knob5_prev = knob_5_pos;
  6268  06C4  0023               	movlb	3	; select bank3
  6269  06C5  0831               	movf	(_knob_5_pos+1)^(0+384),w
  6270  06C6  00D6               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6271  06C7  0830               	movf	_knob_5_pos^(0+384),w
  6272  06C8  00D5               	movwf	_knob5_prev^(0+384)	;volatile
  6273                           
  6274                           ;main.c: 179: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6275  06C9  3000               	movlw	0
  6276  06CA  0021               	movlb	1	; select bank1
  6277  06CB  00EA               	movwf	map@out_max^(0+128)
  6278  06CC  3000               	movlw	0
  6279  06CD  00EB               	movwf	(map@out_max+1)^(0+128)
  6280  06CE  3000               	movlw	0
  6281  06CF  00EC               	movwf	(map@out_max+2)^(0+128)
  6282  06D0  3060               	movlw	96
  6283  06D1  00E7               	movwf	map@out_min^(0+128)
  6284  06D2  309F               	movlw	159
  6285  06D3  00E8               	movwf	(map@out_min+1)^(0+128)
  6286  06D4  3044               	movlw	68
  6287  06D5  00E9               	movwf	(map@out_min+2)^(0+128)
  6288  06D6  30C0               	movlw	192
  6289  06D7  00E4               	movwf	map@in_max^(0+128)
  6290  06D8  307F               	movlw	127
  6291  06D9  00E5               	movwf	(map@in_max+1)^(0+128)
  6292  06DA  3044               	movlw	68
  6293  06DB  00E6               	movwf	(map@in_max+2)^(0+128)
  6294  06DC  3000               	movlw	0
  6295  06DD  00E1               	movwf	map@in_min^(0+128)
  6296  06DE  3000               	movlw	0
  6297  06DF  00E2               	movwf	(map@in_min+1)^(0+128)
  6298  06E0  3000               	movlw	0
  6299  06E1  00E3               	movwf	(map@in_min+2)^(0+128)
  6300  06E2  0023               	movlb	3	; select bank3
  6301  06E3  0856               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6302  06E4  0021               	movlb	1	; select bank1
  6303  06E5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6304  06E6  0023               	movlb	3	; select bank3
  6305  06E7  0855               	movf	_knob5_prev^(0+384),w	;volatile
  6306  06E8  0021               	movlb	1	; select bank1
  6307  06E9  00A8               	movwf	___awtoft@c^(0+128)
  6308  06EA  31AE  26E2  3183   	fcall	___awtoft
  6309  06ED  0021               	movlb	1	; select bank1
  6310  06EE  0828               	movf	?___awtoft^(0+128),w
  6311  06EF  00DE               	movwf	map@x^(0+128)
  6312  06F0  0829               	movf	(?___awtoft+1)^(0+128),w
  6313  06F1  00DF               	movwf	(map@x+1)^(0+128)
  6314  06F2  082A               	movf	(?___awtoft+2)^(0+128),w
  6315  06F3  00E0               	movwf	(map@x+2)^(0+128)
  6316  06F4  319A  22E1  3183   	fcall	_map
  6317  06F7  0021               	movlb	1	; select bank1
  6318  06F8  085E               	movf	?_map^(0+128),w
  6319  06F9  0022               	movlb	2	; select bank2
  6320  06FA  00A0               	movwf	___fttol@f1^(0+256)
  6321  06FB  0021               	movlb	1	; select bank1
  6322  06FC  085F               	movf	(?_map+1)^(0+128),w
  6323  06FD  0022               	movlb	2	; select bank2
  6324  06FE  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6325  06FF  0021               	movlb	1	; select bank1
  6326  0700  0860               	movf	(?_map+2)^(0+128),w
  6327  0701  0022               	movlb	2	; select bank2
  6328  0702  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6329  0703  319A  225A  3183   	fcall	___fttol
  6330  0706  0022               	movlb	2	; select bank2
  6331  0707  0821               	movf	(?___fttol^(0+256)+1),w
  6332  0708  0024               	movlb	4	; select bank4
  6333  0709  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6334  070A  0022               	movlb	2	; select bank2
  6335  070B  0820               	movf	?___fttol^(0+256),w
  6336  070C  0024               	movlb	4	; select bank4
  6337  070D  00C1               	movwf	_adjusted_pot_value^(0+512)
  6338  070E                     l9400:	
  6339                           
  6340                           ;main.c: 180: }
  6341                           ;main.c: 185: if (mod_time_changed == 1) {
  6342  070E  0023               	movlb	3	; select bank3
  6343  070F  0364               	decf	_mod_time_changed^(0+384),w
  6344  0710  1D03               	btfss	3,2
  6345  0711  2F48               	goto	l9412
  6346                           
  6347                           ;main.c: 187: delay_time = baseline_mod_time;
  6348  0712  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6349  0713  0020               	movlb	0	; select bank0
  6350  0714  00D5               	movwf	_delay_time+3	;volatile
  6351  0715  0023               	movlb	3	; select bank3
  6352  0716  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6353  0717  0020               	movlb	0	; select bank0
  6354  0718  00D4               	movwf	_delay_time+2	;volatile
  6355  0719  0023               	movlb	3	; select bank3
  6356  071A  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6357  071B  0020               	movlb	0	; select bank0
  6358  071C  00D3               	movwf	_delay_time+1	;volatile
  6359  071D  0023               	movlb	3	; select bank3
  6360  071E  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6361  071F  0020               	movlb	0	; select bank0
  6362  0720  00D2               	movwf	_delay_time	;volatile
  6363                           
  6364                           ;main.c: 188: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6365  0721  0023               	movlb	3	; select bank3
  6366  0722  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6367  0723  0022               	movlb	2	; select bank2
  6368  0724  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6369  0725  0023               	movlb	3	; select bank3
  6370  0726  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
  6371  0727  0022               	movlb	2	; select bank2
  6372  0728  00AE               	movwf	set_subdivision@x^(0+256)
  6373  0729  0020               	movlb	0	; select bank0
  6374  072A  085B               	movf	_top_push_state+1,w
  6375  072B  0022               	movlb	2	; select bank2
  6376  072C  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6377  072D  0020               	movlb	0	; select bank0
  6378  072E  085A               	movf	_top_push_state,w
  6379  072F  0022               	movlb	2	; select bank2
  6380  0730  00B0               	movwf	set_subdivision@y^(0+256)
  6381  0731  319B  236C  3183   	fcall	_set_subdivision
  6382  0734  0022               	movlb	2	; select bank2
  6383  0735  082E               	movf	?_set_subdivision^(0+256),w
  6384  0736  0020               	movlb	0	; select bank0
  6385  0737  00D2               	movwf	_delay_time	;volatile
  6386  0738  0022               	movlb	2	; select bank2
  6387  0739  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6388  073A  0020               	movlb	0	; select bank0
  6389  073B  00D3               	movwf	_delay_time+1	;volatile
  6390  073C  0D89               	rlf	9,f
  6391  073D  3B89               	subwfb	9,f
  6392  073E  0989               	comf	9,f
  6393  073F  00D4               	movwf	_delay_time+2	;volatile
  6394  0740  00D5               	movwf	_delay_time+3	;volatile
  6395                           
  6396                           ;main.c: 189: getModulationDelayTime();
  6397  0741  31A5  2537  3183   	fcall	_getModulationDelayTime
  6398                           
  6399                           ;main.c: 190: modulation_changed = 1;
  6400  0744  0023               	movlb	3	; select bank3
  6401  0745  01C2               	clrf	_modulation_changed^(0+384)
  6402  0746  0AC2               	incf	_modulation_changed^(0+384),f
  6403                           
  6404                           ;main.c: 191: mod_time_changed = 0;
  6405  0747  01E4               	clrf	_mod_time_changed^(0+384)
  6406  0748                     l9412:	
  6407                           
  6408                           ;main.c: 192: }
  6409                           ;main.c: 195: if (modulation_changed == 1) {
  6410  0748  0342               	decf	_modulation_changed^(0+384),w
  6411  0749  1D03               	btfss	3,2
  6412  074A  2B99               	goto	l9312
  6413                           
  6414                           ;main.c: 196: updateModulationArray();
  6415  074B  318D  25BA  3183   	fcall	_updateModulationArray
  6416                           
  6417                           ;main.c: 197: isInitialized = 1;
  6418  074E  0023               	movlb	3	; select bank3
  6419  074F  01BE               	clrf	_isInitialized^(0+384)
  6420  0750  0ABE               	incf	_isInitialized^(0+384),f
  6421  0751  2B99               	goto	l9312
  6422  0752                     __end_of_main:	
  6423                           
  6424                           	psect	text1
  6425  25DE                     __ptext1:	
  6426 ;; *************** function _update_selectMode *****************
  6427 ;; Defined at:
  6428 ;;		line 139 in file "tactiles.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6444 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6445 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6446 ;;Total ram usage:        1 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    5
  6449 ;; This function calls:
  6450 ;;		_setExpressionDisplay
  6451 ;;		_setPresetDisplay
  6452 ;; This function is called by:
  6453 ;;		_main
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function _update_selectMode
  6459  25DE                     _update_selectMode:	
  6460                           
  6461                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6465  25DE  0020               	movlb	0	; select bank0
  6466  25DF  0850               	movf	_mode2_state,w
  6467  25E0  1D03               	btfss	3,2
  6468  25E1  2DE5               	goto	l1006
  6469  25E2  0351               	decf	_presetSaveMode,w
  6470  25E3  1D03               	btfss	3,2
  6471  25E4  0008               	return
  6472  25E5                     l1006:	
  6473                           ;tactiles.c: 142: return;
  6474                           
  6475                           
  6476                           ;tactiles.c: 143: }
  6477                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6478  25E5  1B8F               	btfsc	15,7	;volatile
  6479  25E6  2E33               	goto	l8898
  6480                           
  6481                           ;tactiles.c: 145: debounce_mode1++;
  6482  25E7  3001               	movlw	1
  6483  25E8  0024               	movlb	4	; select bank4
  6484  25E9  07C7               	addwf	_debounce_mode1^(0+512),f
  6485  25EA  3000               	movlw	0
  6486  25EB  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6487                           
  6488                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6489  25EC  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6490  25ED  3A80               	xorlw	128
  6491  25EE  0021               	movlb	1	; select bank1
  6492  25EF  00A7               	movwf	??_update_selectMode^(0+128)
  6493  25F0  3080               	movlw	128
  6494  25F1  0227               	subwf	??_update_selectMode^(0+128),w
  6495  25F2  1D03               	skipz
  6496  25F3  2DF7               	goto	u9465
  6497  25F4  301A               	movlw	26
  6498  25F5  0024               	movlb	4	; select bank4
  6499  25F6  0247               	subwf	_debounce_mode1^(0+512),w
  6500  25F7                     u9465:	
  6501  25F7  1C03               	skipc
  6502  25F8  0008               	return
  6503                           
  6504                           ;tactiles.c: 147: debounce_mode1 = 25;
  6505  25F9  3019               	movlw	25
  6506  25FA  0024               	movlb	4	; select bank4
  6507  25FB  00C7               	movwf	_debounce_mode1^(0+512)
  6508  25FC  3000               	movlw	0
  6509  25FD  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6510                           
  6511                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6512  25FE  0020               	movlb	0	; select bank0
  6513  25FF  0850               	movf	_mode2_state,w
  6514  2600  0023               	movlb	3	; select bank3
  6515  2601  0665               	xorwf	_presetModeCnst^(0+384),w
  6516  2602  1903               	skipnz
  6517  2603  2E08               	goto	l8880
  6518  2604  0020               	movlb	0	; select bank0
  6519  2605  0351               	decf	_presetSaveMode,w
  6520  2606  1D03               	btfss	3,2
  6521  2607  2E19               	goto	l8888
  6522  2608                     l8880:	
  6523                           
  6524                           ;tactiles.c: 149: presetChannel++;
  6525  2608  3001               	movlw	1
  6526  2609  0021               	movlb	1	; select bank1
  6527  260A  00A7               	movwf	??_update_selectMode^(0+128)
  6528  260B  0827               	movf	??_update_selectMode^(0+128),w
  6529  260C  0022               	movlb	2	; select bank2
  6530  260D  07EF               	addwf	_presetChannel^(0+256),f
  6531                           
  6532                           ;tactiles.c: 150: if (presetChannel > 10) {
  6533  260E  300B               	movlw	11
  6534  260F  026F               	subwf	_presetChannel^(0+256),w
  6535  2610  1C03               	skipc
  6536  2611  2E14               	goto	l8886
  6537                           
  6538                           ;tactiles.c: 151: presetChannel = 1;
  6539  2612  01EF               	clrf	_presetChannel^(0+256)
  6540  2613  0AEF               	incf	_presetChannel^(0+256),f
  6541  2614                     l8886:	
  6542                           
  6543                           ;tactiles.c: 152: }
  6544                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6545  2614  086F               	movf	_presetChannel^(0+256),w
  6546  2615  31A1  2106  31A5   	fcall	_setPresetDisplay
  6547                           
  6548                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6549  2618  2E2F               	goto	l1017
  6550  2619                     l8888:	
  6551  2619  0020               	movlb	0	; select bank0
  6552  261A  0850               	movf	_mode2_state,w
  6553  261B  0023               	movlb	3	; select bank3
  6554  261C  0662               	xorwf	_expressModeCnst^(0+384),w
  6555  261D  1D03               	skipz
  6556  261E  2E2F               	goto	l1017
  6557                           
  6558                           ;tactiles.c: 155: expressionChannel++;
  6559  261F  3001               	movlw	1
  6560  2620  0021               	movlb	1	; select bank1
  6561  2621  00A7               	movwf	??_update_selectMode^(0+128)
  6562  2622  0827               	movf	??_update_selectMode^(0+128),w
  6563  2623  0023               	movlb	3	; select bank3
  6564  2624  07E3               	addwf	_expressionChannel^(0+384),f
  6565                           
  6566                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6567  2625  3006               	movlw	6
  6568  2626  0263               	subwf	_expressionChannel^(0+384),w
  6569  2627  1C03               	skipc
  6570  2628  2E2B               	goto	l8896
  6571                           
  6572                           ;tactiles.c: 157: expressionChannel = 1;
  6573  2629  01E3               	clrf	_expressionChannel^(0+384)
  6574  262A  0AE3               	incf	_expressionChannel^(0+384),f
  6575  262B                     l8896:	
  6576                           
  6577                           ;tactiles.c: 158: }
  6578                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6579  262B  0863               	movf	_expressionChannel^(0+384),w
  6580  262C  31AE  2602  31A5   	fcall	_setExpressionDisplay
  6581  262F                     l1017:	
  6582                           ;tactiles.c: 160: }
  6583                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6584                           
  6585  262F  0020               	movlb	0	; select bank0
  6586  2630  1B8F               	btfsc	15,7	;volatile
  6587  2631  0008               	return
  6588  2632  2E2F               	goto	l1017
  6589  2633                     l8898:	
  6590                           ;tactiles.c: 168: }
  6591                           ;tactiles.c: 169: }
  6592                           ;tactiles.c: 170: } else {
  6593                           
  6594                           
  6595                           ;tactiles.c: 171: debounce_mode1 = 0;
  6596  2633  0024               	movlb	4	; select bank4
  6597  2634  01C7               	clrf	_debounce_mode1^(0+512)
  6598  2635  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6599  2636  0008               	return
  6600  2637                     __end_of_update_selectMode:	
  6601                           
  6602                           	psect	text2
  6603  20CE                     __ptext2:	
  6604 ;; *************** function _update_mode *****************
  6605 ;; Defined at:
  6606 ;;		line 87 in file "tactiles.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6622 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6623 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6624 ;;Total ram usage:        1 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    6
  6627 ;; This function calls:
  6628 ;;		_resetRingLEDs
  6629 ;;		_setPedalMode
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _update_mode
  6637  20CE                     _update_mode:	
  6638                           
  6639                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6643  20CE  0020               	movlb	0	; select bank0
  6644  20CF  180E               	btfsc	14,0	;volatile
  6645  20D0  2902               	goto	l8866
  6646                           
  6647                           ;tactiles.c: 95: debounce_mode2++;
  6648  20D1  3001               	movlw	1
  6649  20D2  0024               	movlb	4	; select bank4
  6650  20D3  07C9               	addwf	_debounce_mode2^(0+512),f
  6651  20D4  3000               	movlw	0
  6652  20D5  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6653                           
  6654                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6655  20D6  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6656  20D7  3A80               	xorlw	128
  6657  20D8  0021               	movlb	1	; select bank1
  6658  20D9  00A7               	movwf	??_update_mode^(0+128)
  6659  20DA  3080               	movlw	128
  6660  20DB  0227               	subwf	??_update_mode^(0+128),w
  6661  20DC  1D03               	skipz
  6662  20DD  28E1               	goto	u9395
  6663  20DE  301A               	movlw	26
  6664  20DF  0024               	movlb	4	; select bank4
  6665  20E0  0249               	subwf	_debounce_mode2^(0+512),w
  6666  20E1                     u9395:	
  6667  20E1  1C03               	skipc
  6668  20E2  0008               	return
  6669                           
  6670                           ;tactiles.c: 97: debounce_mode2 = 25;
  6671  20E3  3019               	movlw	25
  6672  20E4  0024               	movlb	4	; select bank4
  6673  20E5  00C9               	movwf	_debounce_mode2^(0+512)
  6674  20E6  3000               	movlw	0
  6675  20E7  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6676                           
  6677                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6678  20E8  0020               	movlb	0	; select bank0
  6679  20E9  0351               	decf	_presetSaveMode,w
  6680  20EA  1D03               	btfss	3,2
  6681  20EB  28F1               	goto	l8858
  6682                           
  6683                           ;tactiles.c: 100: presetSaveMode = 0;
  6684  20EC  01D1               	clrf	_presetSaveMode
  6685                           
  6686                           ;tactiles.c: 101: resetRingLEDs();
  6687  20ED  31AE  261A  31A0   	fcall	_resetRingLEDs
  6688                           
  6689                           ;tactiles.c: 102: } else {
  6690  20F0  28FB               	goto	l8864
  6691  20F1                     l8858:	
  6692                           
  6693                           ;tactiles.c: 103: mode2_state++;
  6694  20F1  3001               	movlw	1
  6695  20F2  0021               	movlb	1	; select bank1
  6696  20F3  00A7               	movwf	??_update_mode^(0+128)
  6697  20F4  0827               	movf	??_update_mode^(0+128),w
  6698  20F5  0020               	movlb	0	; select bank0
  6699  20F6  07D0               	addwf	_mode2_state,f
  6700                           
  6701                           ;tactiles.c: 104: if (mode2_state > 2) {
  6702  20F7  3003               	movlw	3
  6703  20F8  0250               	subwf	_mode2_state,w
  6704  20F9  1803               	btfsc	3,0
  6705                           
  6706                           ;tactiles.c: 105: mode2_state = 0;
  6707  20FA  01D0               	clrf	_mode2_state
  6708  20FB                     l8864:	
  6709                           
  6710                           ;tactiles.c: 106: }
  6711                           ;tactiles.c: 107: }
  6712                           ;tactiles.c: 109: setPedalMode();
  6713  20FB  31AF  2704  31A0   	fcall	_setPedalMode
  6714  20FE                     l991:	
  6715                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6716                           
  6717  20FE  0020               	movlb	0	; select bank0
  6718  20FF  180E               	btfsc	14,0	;volatile
  6719  2100  0008               	return
  6720  2101  28FE               	goto	l991
  6721  2102                     l8866:	
  6722                           ;tactiles.c: 111: }
  6723                           ;tactiles.c: 112: }
  6724                           ;tactiles.c: 113: } else {
  6725                           
  6726                           
  6727                           ;tactiles.c: 114: debounce_mode2 = 0;
  6728  2102  0024               	movlb	4	; select bank4
  6729  2103  01C9               	clrf	_debounce_mode2^(0+512)
  6730  2104  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6731  2105  0008               	return
  6732  2106                     __end_of_update_mode:	
  6733                           
  6734                           	psect	text3
  6735  0BD3                     __ptext3:	
  6736 ;; *************** function _updateSwitchTap *****************
  6737 ;; Defined at:
  6738 ;;		line 48 in file "SwitchTap.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6743 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      void 
  6746 ;; Registers used:
  6747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6754 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6755 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6756 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6757 ;;Total ram usage:        9 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:    8
  6760 ;; This function calls:
  6761 ;;		___aldiv
  6762 ;;		_setDoublePressState
  6763 ;;		_setLongTapState
  6764 ;; This function is called by:
  6765 ;;		_main
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           
  6770                           ;psect for function _updateSwitchTap
  6771  0BD3                     _updateSwitchTap:	
  6772                           
  6773                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6774                           
  6775                           ;incstack = 0
  6776                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6777  0BD3  0021               	movlb	1	; select bank1
  6778  0BD4  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6779                           
  6780                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6781  0BD5  0020               	movlb	0	; select bank0
  6782  0BD6  1810               	btfsc	16,0	;volatile
  6783  0BD7  2BDF               	goto	l9022
  6784                           
  6785                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6786  0BD8  0022               	movlb	2	; select bank2
  6787  0BD9  086E               	movf	_switchTap_pressed^(0+256),w
  6788  0BDA  1903               	btfsc	3,2
  6789  0BDB  2BEA               	goto	l1420
  6790                           
  6791                           ;SwitchTap.c: 59: switchTap_pressed--;
  6792  0BDC  3001               	movlw	1
  6793  0BDD  02EE               	subwf	_switchTap_pressed^(0+256),f
  6794                           
  6795                           ;SwitchTap.c: 60: }
  6796                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6797  0BDE  2BEA               	goto	l1420
  6798  0BDF                     l9022:	
  6799  0BDF  3019               	movlw	25
  6800  0BE0  0022               	movlb	2	; select bank2
  6801  0BE1  026E               	subwf	_switchTap_pressed^(0+256),w
  6802  0BE2  1803               	skipnc
  6803  0BE3  2BEA               	goto	l1420
  6804                           
  6805                           ;SwitchTap.c: 62: switchTap_pressed++;
  6806  0BE4  3001               	movlw	1
  6807  0BE5  0021               	movlb	1	; select bank1
  6808  0BE6  00BC               	movwf	??_updateSwitchTap^(0+128)
  6809  0BE7  083C               	movf	??_updateSwitchTap^(0+128),w
  6810  0BE8  0022               	movlb	2	; select bank2
  6811  0BE9  07EE               	addwf	_switchTap_pressed^(0+256),f
  6812  0BEA                     l1420:	
  6813                           
  6814                           ;SwitchTap.c: 63: }
  6815                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6816  0BEA  086E               	movf	_switchTap_pressed^(0+256),w
  6817  0BEB  1D03               	btfss	3,2
  6818  0BEC  2DA0               	goto	l9106
  6819                           
  6820                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6821  0BED  0020               	movlb	0	; select bank0
  6822  0BEE  1BC7               	btfsc	_tap_timer+3,7	;volatile
  6823  0BEF  2C75               	goto	l9066
  6824  0BF0  0847               	movf	_tap_timer+3,w	;volatile
  6825  0BF1  1D03               	btfss	3,2
  6826  0BF2  2BFC               	goto	l9028
  6827  0BF3  0846               	movf	_tap_timer+2,w	;volatile
  6828  0BF4  1D03               	btfss	3,2
  6829  0BF5  2BFC               	goto	l9028
  6830  0BF6  301B               	movlw	27
  6831  0BF7  0244               	subwf	_tap_timer,w	;volatile
  6832  0BF8  3006               	movlw	6
  6833  0BF9  3B45               	subwfb	_tap_timer+1,w	;volatile
  6834  0BFA  1C03               	btfss	3,0
  6835  0BFB  2C75               	goto	l9066
  6836  0BFC                     l9028:	
  6837                           
  6838                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6839  0BFC  0023               	movlb	3	; select bank3
  6840  0BFD  0345               	decf	_switchTap_down^(0+384),w
  6841  0BFE  1903               	btfsc	3,2
  6842  0BFF  2C3B               	goto	l9044
  6843                           
  6844                           ;SwitchTap.c: 78: switchTap_down = 1;
  6845  0C00  01C5               	clrf	_switchTap_down^(0+384)
  6846  0C01  0AC5               	incf	_switchTap_down^(0+384),f
  6847                           
  6848                           ;SwitchTap.c: 79: tap_timer = 0;
  6849  0C02  3000               	movlw	0
  6850  0C03  0020               	movlb	0	; select bank0
  6851  0C04  00C7               	movwf	_tap_timer+3	;volatile
  6852  0C05  3000               	movlw	0
  6853  0C06  00C6               	movwf	_tap_timer+2	;volatile
  6854  0C07  3000               	movlw	0
  6855  0C08  00C5               	movwf	_tap_timer+1	;volatile
  6856  0C09  3000               	movlw	0
  6857  0C0A  00C4               	movwf	_tap_timer	;volatile
  6858                           
  6859                           ;SwitchTap.c: 80: tap_iteration = 1;
  6860  0C0B  3001               	movlw	1
  6861  0C0C  0023               	movlb	3	; select bank3
  6862  0C0D  00DD               	movwf	_tap_iteration^(0+384)
  6863  0C0E  3000               	movlw	0
  6864  0C0F  00DE               	movwf	(_tap_iteration^(0+384)+1)
  6865                           
  6866                           ;SwitchTap.c: 81: tap_total = 0;
  6867  0C10  3000               	movlw	0
  6868  0C11  0024               	movlb	4	; select bank4
  6869  0C12  00C0               	movwf	(_tap_total+3)^(0+512)
  6870  0C13  3000               	movlw	0
  6871  0C14  00BF               	movwf	(_tap_total+2)^(0+512)
  6872  0C15  3000               	movlw	0
  6873  0C16  00BE               	movwf	(_tap_total+1)^(0+512)
  6874  0C17  3000               	movlw	0
  6875  0C18  00BD               	movwf	_tap_total^(0+512)
  6876                           
  6877                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6878  0C19  0023               	movlb	3	; select bank3
  6879  0C1A  01E4               	clrf	_mod_time_changed^(0+384)
  6880                           
  6881                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6882  0C1B  0021               	movlb	1	; select bank1
  6883  0C1C  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6884  0C1D  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6885  0C1E                     l9042:	
  6886  0C1E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6887  0C1F  0020               	movlb	0	; select bank0
  6888  0C20  025E               	subwf	_num_taps,w
  6889  0C21  1C03               	btfss	3,0
  6890  0C22  2C3B               	goto	l9044
  6891                           
  6892                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6893  0C23  0021               	movlb	1	; select bank1
  6894  0C24  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6895  0C25  00BC               	movwf	??_updateSwitchTap^(0+128)
  6896  0C26  3001               	movlw	1
  6897  0C27                     u9835:	
  6898  0C27  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6899  0C28  3EFF               	addlw	-1
  6900  0C29  1D03               	skipz
  6901  0C2A  2C27               	goto	u9835
  6902  0C2B  353C               	lslf	??_updateSwitchTap^(0+128),w
  6903  0C2C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6904  0C2D  0086               	movwf	6
  6905  0C2E  3002               	movlw	2	; select bank4/5
  6906  0C2F  0087               	movwf	7
  6907  0C30  3000               	movlw	0
  6908  0C31  3FC0               	movwi [0]fsr1
  6909  0C32  3000               	movlw	0
  6910  0C33  3FC1               	movwi [1]fsr1
  6911  0C34  3FC2               	movwi [2]fsr1
  6912  0C35  3FC3               	movwi [3]fsr1
  6913  0C36  3001               	movlw	1
  6914  0C37  00BC               	movwf	??_updateSwitchTap^(0+128)
  6915  0C38  083C               	movf	??_updateSwitchTap^(0+128),w
  6916  0C39  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6917  0C3A  2C1E               	goto	l9042
  6918  0C3B                     l9044:	
  6919                           
  6920                           ;SwitchTap.c: 86: }
  6921                           ;SwitchTap.c: 87: }
  6922                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6923  0C3B  0022               	movlb	2	; select bank2
  6924  0C3C  086B               	movf	_longTap_start^(0+256),w
  6925  0C3D  1D03               	btfss	3,2
  6926  0C3E  2C46               	goto	l9050
  6927                           
  6928                           ;SwitchTap.c: 91: longTap_start = 1;
  6929  0C3F  01EB               	clrf	_longTap_start^(0+256)
  6930  0C40  0AEB               	incf	_longTap_start^(0+256),f
  6931                           
  6932                           ;SwitchTap.c: 92: longTap_state = 0;
  6933  0C41  0020               	movlb	0	; select bank0
  6934  0C42  01DD               	clrf	_longTap_state	;volatile
  6935                           
  6936                           ;SwitchTap.c: 93: longTap_timer = 0;
  6937  0C43  0023               	movlb	3	; select bank3
  6938  0C44  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6939  0C45  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6940  0C46                     l9050:	
  6941                           
  6942                           ;SwitchTap.c: 94: }
  6943                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6944  0C46  0020               	movlb	0	; select bank0
  6945  0C47  0859               	movf	_long_press_limit+1,w
  6946  0C48  0023               	movlb	3	; select bank3
  6947  0C49  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6948  0C4A  1D03               	skipz
  6949  0C4B  2C50               	goto	u9865
  6950  0C4C  0020               	movlb	0	; select bank0
  6951  0C4D  0858               	movf	_long_press_limit,w
  6952  0C4E  0023               	movlb	3	; select bank3
  6953  0C4F  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6954  0C50                     u9865:	
  6955  0C50  1C03               	skipc
  6956  0C51  0008               	return
  6957  0C52  0020               	movlb	0	; select bank0
  6958  0C53  085D               	movf	_longTap_state,w	;volatile
  6959  0C54  1D03               	btfss	3,2
  6960  0C55  0008               	return
  6961  0C56  084E               	movf	_doubleTap_state,w	;volatile
  6962  0C57  1D03               	btfss	3,2
  6963  0C58  0008               	return
  6964                           
  6965                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6966  0C59  0859               	movf	_long_press_limit+1,w
  6967  0C5A  0023               	movlb	3	; select bank3
  6968  0C5B  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6969  0C5C  0020               	movlb	0	; select bank0
  6970  0C5D  0858               	movf	_long_press_limit,w
  6971  0C5E  0023               	movlb	3	; select bank3
  6972  0C5F  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6973                           
  6974                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6975  0C60  0022               	movlb	2	; select bank2
  6976  0C61  120D               	bcf	13,4	;volatile
  6977                           
  6978                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6979  0C62  036A               	decf	_longBypass_start^(0+256),w
  6980  0C63  1903               	btfsc	3,2
  6981  0C64  2C6D               	goto	l9064
  6982                           
  6983                           ;SwitchTap.c: 104: setLongTapState(1);
  6984  0C65  3001               	movlw	1
  6985  0C66  0021               	movlb	1	; select bank1
  6986  0C67  00A0               	movwf	setLongTapState@f_state^(0+128)
  6987  0C68  3000               	movlw	0
  6988  0C69  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6989  0C6A  31AE  2634         	fcall	_setLongTapState
  6990                           
  6991                           ;SwitchTap.c: 105: } else {
  6992  0C6C  0008               	return
  6993  0C6D                     l9064:	
  6994                           
  6995                           ;SwitchTap.c: 106: setDoublePressState(1);
  6996  0C6D  3001               	movlw	1
  6997  0C6E  0021               	movlb	1	; select bank1
  6998  0C6F  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6999  0C70  3000               	movlw	0
  7000  0C71  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7001  0C72  31A2  2231         	fcall	_setDoublePressState
  7002                           
  7003                           ;SwitchTap.c: 107: }
  7004                           ;SwitchTap.c: 108: }
  7005                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7006  0C74  0008               	return
  7007  0C75                     l9066:	
  7008  0C75  0020               	movlb	0	; select bank0
  7009  0C76  1BC7               	btfsc	_tap_timer+3,7	;volatile
  7010  0C77  2C84               	goto	l9068
  7011  0C78  0847               	movf	_tap_timer+3,w	;volatile
  7012  0C79  1D03               	btfss	3,2
  7013  0C7A  0008               	return
  7014  0C7B  0846               	movf	_tap_timer+2,w	;volatile
  7015  0C7C  1D03               	btfss	3,2
  7016  0C7D  0008               	return
  7017  0C7E  301B               	movlw	27
  7018  0C7F  0244               	subwf	_tap_timer,w	;volatile
  7019  0C80  3006               	movlw	6
  7020  0C81  3B45               	subwfb	_tap_timer+1,w	;volatile
  7021  0C82  1803               	btfsc	3,0
  7022  0C83  0008               	return
  7023  0C84                     l9068:	
  7024  0C84  085D               	movf	_longTap_state,w	;volatile
  7025  0C85  1D03               	btfss	3,2
  7026  0C86  0008               	return
  7027  0C87  0023               	movlb	3	; select bank3
  7028  0C88  0345               	decf	_switchTap_down^(0+384),w
  7029  0C89  1903               	btfsc	3,2
  7030  0C8A  0008               	return
  7031                           
  7032                           ;SwitchTap.c: 112: switchTap_down = 1;
  7033  0C8B  01C5               	clrf	_switchTap_down^(0+384)
  7034  0C8C  0AC5               	incf	_switchTap_down^(0+384),f
  7035                           
  7036                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7037  0C8D  0020               	movlb	0	; select bank0
  7038  0C8E  1BC7               	btfsc	_tap_timer+3,7	;volatile
  7039  0C8F  2CA4               	goto	l1434
  7040  0C90  0847               	movf	_tap_timer+3,w	;volatile
  7041  0C91  1D03               	btfss	3,2
  7042  0C92  2C9C               	goto	l9076
  7043  0C93  0846               	movf	_tap_timer+2,w	;volatile
  7044  0C94  1D03               	btfss	3,2
  7045  0C95  2C9C               	goto	l9076
  7046  0C96  3094               	movlw	148
  7047  0C97  0244               	subwf	_tap_timer,w	;volatile
  7048  0C98  3004               	movlw	4
  7049  0C99  3B45               	subwfb	_tap_timer+1,w	;volatile
  7050  0C9A  1C03               	btfss	3,0
  7051  0C9B  2CA4               	goto	l1434
  7052  0C9C                     l9076:	
  7053                           
  7054                           ;SwitchTap.c: 114: tap_timer = 1172;
  7055  0C9C  3000               	movlw	0
  7056  0C9D  00C7               	movwf	_tap_timer+3	;volatile
  7057  0C9E  3000               	movlw	0
  7058  0C9F  00C6               	movwf	_tap_timer+2	;volatile
  7059  0CA0  3004               	movlw	4
  7060  0CA1  00C5               	movwf	_tap_timer+1	;volatile
  7061  0CA2  3094               	movlw	148
  7062  0CA3  00C4               	movwf	_tap_timer	;volatile
  7063  0CA4                     l1434:	
  7064                           
  7065                           ;SwitchTap.c: 115: }
  7066                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7067  0CA4  085E               	movf	_num_taps,w
  7068  0CA5  0021               	movlb	1	; select bank1
  7069  0CA6  00BC               	movwf	??_updateSwitchTap^(0+128)
  7070  0CA7  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7071  0CA8  083C               	movf	??_updateSwitchTap^(0+128),w
  7072  0CA9  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7073  0CAA  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7074  0CAB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7075                           
  7076                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7077  0CAC  0023               	movlb	3	; select bank3
  7078  0CAD  085E               	movf	(_tap_iteration+1)^(0+384),w
  7079  0CAE  3A80               	xorlw	128
  7080  0CAF  3C80               	sublw	128
  7081  0CB0  1D03               	skipz
  7082  0CB1  2CB5               	goto	u9945
  7083  0CB2  085D               	movf	_tap_iteration^(0+384),w
  7084  0CB3  0020               	movlb	0	; select bank0
  7085  0CB4  025E               	subwf	_num_taps,w
  7086  0CB5                     u9945:	
  7087  0CB5  1C03               	skipc
  7088  0CB6  2CE7               	goto	l9084
  7089                           
  7090                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7091  0CB7  0020               	movlb	0	; select bank0
  7092  0CB8  0844               	movf	_tap_timer,w	;volatile
  7093  0CB9  0024               	movlb	4	; select bank4
  7094  0CBA  07BD               	addwf	_tap_total^(0+512),f
  7095  0CBB  0020               	movlb	0	; select bank0
  7096  0CBC  0845               	movf	_tap_timer+1,w	;volatile
  7097  0CBD  0024               	movlb	4	; select bank4
  7098  0CBE  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7099  0CBF  0020               	movlb	0	; select bank0
  7100  0CC0  0846               	movf	_tap_timer+2,w	;volatile
  7101  0CC1  0024               	movlb	4	; select bank4
  7102  0CC2  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7103  0CC3  0020               	movlb	0	; select bank0
  7104  0CC4  0847               	movf	_tap_timer+3,w	;volatile
  7105  0CC5  0024               	movlb	4	; select bank4
  7106  0CC6  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7107                           
  7108                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7109  0CC7  0023               	movlb	3	; select bank3
  7110  0CC8  085D               	movf	_tap_iteration^(0+384),w
  7111  0CC9  0021               	movlb	1	; select bank1
  7112  0CCA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7113  0CCB  3001               	movlw	1
  7114  0CCC                     u9955:	
  7115  0CCC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7116  0CCD  3EFF               	addlw	-1
  7117  0CCE  1D03               	skipz
  7118  0CCF  2CCC               	goto	u9955
  7119  0CD0  353C               	lslf	??_updateSwitchTap^(0+128),w
  7120  0CD1  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7121  0CD2  0086               	movwf	6
  7122  0CD3  3002               	movlw	2	; select bank4/5
  7123  0CD4  0087               	movwf	7
  7124  0CD5  0020               	movlb	0	; select bank0
  7125  0CD6  0844               	movf	_tap_timer,w	;volatile
  7126  0CD7  3FC0               	movwi [0]fsr1
  7127  0CD8  0845               	movf	_tap_timer+1,w	;volatile
  7128  0CD9  3FC1               	movwi [1]fsr1
  7129  0CDA  0846               	movf	_tap_timer+2,w	;volatile
  7130  0CDB  3FC2               	movwi [2]fsr1
  7131  0CDC  0847               	movf	_tap_timer+3,w	;volatile
  7132  0CDD  3FC3               	movwi [3]fsr1
  7133                           
  7134                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7135  0CDE  0023               	movlb	3	; select bank3
  7136  0CDF  085E               	movf	(_tap_iteration+1)^(0+384),w
  7137  0CE0  0021               	movlb	1	; select bank1
  7138  0CE1  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7139  0CE2  0023               	movlb	3	; select bank3
  7140  0CE3  085D               	movf	_tap_iteration^(0+384),w
  7141  0CE4  0021               	movlb	1	; select bank1
  7142  0CE5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7143                           
  7144                           ;SwitchTap.c: 122: } else {
  7145  0CE6  2D63               	goto	l9098
  7146  0CE7                     l9084:	
  7147                           
  7148                           ;SwitchTap.c: 123: tap_total = 0;
  7149  0CE7  3000               	movlw	0
  7150  0CE8  0024               	movlb	4	; select bank4
  7151  0CE9  00C0               	movwf	(_tap_total+3)^(0+512)
  7152  0CEA  3000               	movlw	0
  7153  0CEB  00BF               	movwf	(_tap_total+2)^(0+512)
  7154  0CEC  3000               	movlw	0
  7155  0CED  00BE               	movwf	(_tap_total+1)^(0+512)
  7156  0CEE  3000               	movlw	0
  7157  0CEF  00BD               	movwf	_tap_total^(0+512)
  7158                           
  7159                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7160  0CF0  0021               	movlb	1	; select bank1
  7161  0CF1  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7162  0CF2  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7163  0CF3                     l9092:	
  7164  0CF3  0020               	movlb	0	; select bank0
  7165  0CF4  085E               	movf	_num_taps,w
  7166  0CF5  0021               	movlb	1	; select bank1
  7167  0CF6  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7168  0CF7  1803               	btfsc	3,0
  7169  0CF8  2D3D               	goto	l9094
  7170                           
  7171                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7172  0CF9  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7173  0CFA  00BC               	movwf	??_updateSwitchTap^(0+128)
  7174  0CFB  3001               	movlw	1
  7175  0CFC                     u9965:	
  7176  0CFC  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7177  0CFD  3EFF               	addlw	-1
  7178  0CFE  1D03               	skipz
  7179  0CFF  2CFC               	goto	u9965
  7180  0D00  353C               	lslf	??_updateSwitchTap^(0+128),w
  7181  0D01  3E04               	addlw	4
  7182  0D02  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7183  0D03  0086               	movwf	6
  7184  0D04  3002               	movlw	2	; select bank4/5
  7185  0D05  0087               	movwf	7
  7186  0D06  3F40               	moviw [0]fsr1
  7187  0D07  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7188  0D08  3F41               	moviw [1]fsr1
  7189  0D09  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7190  0D0A  3F42               	moviw [2]fsr1
  7191  0D0B  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7192  0D0C  3F43               	moviw [3]fsr1
  7193  0D0D  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7194  0D0E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7195  0D0F  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7196  0D10  3001               	movlw	1
  7197  0D11                     u9975:	
  7198  0D11  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7199  0D12  3EFF               	addlw	-1
  7200  0D13  1D03               	skipz
  7201  0D14  2D11               	goto	u9975
  7202  0D15  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7203  0D16  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7204  0D17  0086               	movwf	6
  7205  0D18  3002               	movlw	2	; select bank4/5
  7206  0D19  0087               	movwf	7
  7207  0D1A  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7208  0D1B  3FC0               	movwi [0]fsr1
  7209  0D1C  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7210  0D1D  3FC1               	movwi [1]fsr1
  7211  0D1E  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7212  0D1F  3FC2               	movwi [2]fsr1
  7213  0D20  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7214  0D21  3FC3               	movwi [3]fsr1
  7215                           
  7216                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7217  0D22  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7218  0D23  00BC               	movwf	??_updateSwitchTap^(0+128)
  7219  0D24  3001               	movlw	1
  7220  0D25                     u9985:	
  7221  0D25  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7222  0D26  3EFF               	addlw	-1
  7223  0D27  1D03               	skipz
  7224  0D28  2D25               	goto	u9985
  7225  0D29  353C               	lslf	??_updateSwitchTap^(0+128),w
  7226  0D2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7227  0D2B  0086               	movwf	6
  7228  0D2C  3002               	movlw	2	; select bank4/5
  7229  0D2D  0087               	movwf	7
  7230  0D2E  3F40               	moviw [0]fsr1
  7231  0D2F  0024               	movlb	4	; select bank4
  7232  0D30  07BD               	addwf	_tap_total^(0+512),f
  7233  0D31  3F41               	moviw [1]fsr1
  7234  0D32  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7235  0D33  3F42               	moviw [2]fsr1
  7236  0D34  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7237  0D35  3F43               	moviw [3]fsr1
  7238  0D36  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7239  0D37  3001               	movlw	1
  7240  0D38  0021               	movlb	1	; select bank1
  7241  0D39  00BC               	movwf	??_updateSwitchTap^(0+128)
  7242  0D3A  083C               	movf	??_updateSwitchTap^(0+128),w
  7243  0D3B  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7244  0D3C  2CF3               	goto	l9092
  7245  0D3D                     l9094:	
  7246                           
  7247                           ;SwitchTap.c: 127: }
  7248                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7249  0D3D  0020               	movlb	0	; select bank0
  7250  0D3E  085E               	movf	_num_taps,w
  7251  0D3F  0021               	movlb	1	; select bank1
  7252  0D40  00BC               	movwf	??_updateSwitchTap^(0+128)
  7253  0D41  3001               	movlw	1
  7254  0D42                     u10005:	
  7255  0D42  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7256  0D43  3EFF               	addlw	-1
  7257  0D44  1D03               	skipz
  7258  0D45  2D42               	goto	u10005
  7259  0D46  353C               	lslf	??_updateSwitchTap^(0+128),w
  7260  0D47  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7261  0D48  0086               	movwf	6
  7262  0D49  3002               	movlw	2	; select bank4/5
  7263  0D4A  0087               	movwf	7
  7264  0D4B  0020               	movlb	0	; select bank0
  7265  0D4C  0844               	movf	_tap_timer,w	;volatile
  7266  0D4D  3FC0               	movwi [0]fsr1
  7267  0D4E  0845               	movf	_tap_timer+1,w	;volatile
  7268  0D4F  3FC1               	movwi [1]fsr1
  7269  0D50  0846               	movf	_tap_timer+2,w	;volatile
  7270  0D51  3FC2               	movwi [2]fsr1
  7271  0D52  0847               	movf	_tap_timer+3,w	;volatile
  7272  0D53  3FC3               	movwi [3]fsr1
  7273                           
  7274                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7275  0D54  0844               	movf	_tap_timer,w	;volatile
  7276  0D55  0024               	movlb	4	; select bank4
  7277  0D56  07BD               	addwf	_tap_total^(0+512),f
  7278  0D57  0020               	movlb	0	; select bank0
  7279  0D58  0845               	movf	_tap_timer+1,w	;volatile
  7280  0D59  0024               	movlb	4	; select bank4
  7281  0D5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7282  0D5B  0020               	movlb	0	; select bank0
  7283  0D5C  0846               	movf	_tap_timer+2,w	;volatile
  7284  0D5D  0024               	movlb	4	; select bank4
  7285  0D5E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7286  0D5F  0020               	movlb	0	; select bank0
  7287  0D60  0847               	movf	_tap_timer+3,w	;volatile
  7288  0D61  0024               	movlb	4	; select bank4
  7289  0D62  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7290  0D63                     l9098:	
  7291                           
  7292                           ;SwitchTap.c: 130: }
  7293                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7294  0D63  0021               	movlb	1	; select bank1
  7295  0D64  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7296  0D65  00A0               	movwf	___aldiv@divisor^(0+128)
  7297  0D66  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7298  0D67  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7299  0D68  0D89               	rlf	9,f
  7300  0D69  3B89               	subwfb	9,f
  7301  0D6A  0989               	comf	9,f
  7302  0D6B  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7303  0D6C  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7304  0D6D  0024               	movlb	4	; select bank4
  7305  0D6E  0840               	movf	(_tap_total+3)^(0+512),w
  7306  0D6F  0021               	movlb	1	; select bank1
  7307  0D70  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7308  0D71  0024               	movlb	4	; select bank4
  7309  0D72  083F               	movf	(_tap_total+2)^(0+512),w
  7310  0D73  0021               	movlb	1	; select bank1
  7311  0D74  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7312  0D75  0024               	movlb	4	; select bank4
  7313  0D76  083E               	movf	(_tap_total+1)^(0+512),w
  7314  0D77  0021               	movlb	1	; select bank1
  7315  0D78  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7316  0D79  0024               	movlb	4	; select bank4
  7317  0D7A  083D               	movf	_tap_total^(0+512),w
  7318  0D7B  0021               	movlb	1	; select bank1
  7319  0D7C  00A4               	movwf	___aldiv@dividend^(0+128)
  7320  0D7D  3199  2153         	fcall	___aldiv
  7321  0D7F  0021               	movlb	1	; select bank1
  7322  0D80  0823               	movf	(?___aldiv+3)^(0+128),w
  7323  0D81  0023               	movlb	3	; select bank3
  7324  0D82  00CA               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7325  0D83  0021               	movlb	1	; select bank1
  7326  0D84  0822               	movf	(?___aldiv+2)^(0+128),w
  7327  0D85  0023               	movlb	3	; select bank3
  7328  0D86  00C9               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7329  0D87  0021               	movlb	1	; select bank1
  7330  0D88  0821               	movf	(?___aldiv+1)^(0+128),w
  7331  0D89  0023               	movlb	3	; select bank3
  7332  0D8A  00C8               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7333  0D8B  0021               	movlb	1	; select bank1
  7334  0D8C  0820               	movf	?___aldiv^(0+128),w
  7335  0D8D  0023               	movlb	3	; select bank3
  7336  0D8E  00C7               	movwf	_baseline_mod_time^(0+384)	;volatile
  7337                           
  7338                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7339  0D8F  01E4               	clrf	_mod_time_changed^(0+384)
  7340  0D90  0AE4               	incf	_mod_time_changed^(0+384),f
  7341                           
  7342                           ;SwitchTap.c: 134: tap_timer = 0;
  7343  0D91  3000               	movlw	0
  7344  0D92  0020               	movlb	0	; select bank0
  7345  0D93  00C7               	movwf	_tap_timer+3	;volatile
  7346  0D94  3000               	movlw	0
  7347  0D95  00C6               	movwf	_tap_timer+2	;volatile
  7348  0D96  3000               	movlw	0
  7349  0D97  00C5               	movwf	_tap_timer+1	;volatile
  7350  0D98  3000               	movlw	0
  7351  0D99  00C4               	movwf	_tap_timer	;volatile
  7352                           
  7353                           ;SwitchTap.c: 136: tap_iteration++;
  7354  0D9A  3001               	movlw	1
  7355  0D9B  0023               	movlb	3	; select bank3
  7356  0D9C  07DD               	addwf	_tap_iteration^(0+384),f
  7357  0D9D  3000               	movlw	0
  7358  0D9E  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7359                           
  7360                           ;SwitchTap.c: 137: }
  7361                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7362  0D9F  0008               	return
  7363  0DA0                     l9106:	
  7364  0DA0  3019               	movlw	25
  7365  0DA1  0022               	movlb	2	; select bank2
  7366  0DA2  026E               	subwf	_switchTap_pressed^(0+256),w
  7367  0DA3  1C03               	skipc
  7368  0DA4  0008               	return
  7369                           
  7370                           ;SwitchTap.c: 140: switchTap_down = 0;
  7371  0DA5  0023               	movlb	3	; select bank3
  7372  0DA6  01C5               	clrf	_switchTap_down^(0+384)
  7373                           
  7374                           ;SwitchTap.c: 141: switchTap_state = 0;
  7375  0DA7  01E6               	clrf	_switchTap_state^(0+384)
  7376                           
  7377                           ;SwitchTap.c: 147: setLongTapState(0);
  7378  0DA8  3000               	movlw	0
  7379  0DA9  0021               	movlb	1	; select bank1
  7380  0DAA  00A0               	movwf	setLongTapState@f_state^(0+128)
  7381  0DAB  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7382  0DAC  31AE  2634         	fcall	_setLongTapState
  7383                           
  7384                           ;SwitchTap.c: 149: longTap_timer = 0;
  7385  0DAE  0023               	movlb	3	; select bank3
  7386  0DAF  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7387  0DB0  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7388                           
  7389                           ;SwitchTap.c: 150: longTap_start = 0;
  7390  0DB1  0022               	movlb	2	; select bank2
  7391  0DB2  01EB               	clrf	_longTap_start^(0+256)
  7392                           
  7393                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7394  0DB3  3019               	movlw	25
  7395  0DB4  0021               	movlb	1	; select bank1
  7396  0DB5  00BC               	movwf	??_updateSwitchTap^(0+128)
  7397  0DB6  083C               	movf	??_updateSwitchTap^(0+128),w
  7398  0DB7  0022               	movlb	2	; select bank2
  7399  0DB8  00EE               	movwf	_switchTap_pressed^(0+256)
  7400  0DB9  0008               	return
  7401  0DBA                     __end_of_updateSwitchTap:	
  7402                           
  7403                           	psect	text4
  7404  2E34                     __ptext4:	
  7405 ;; *************** function _setLongTapState *****************
  7406 ;; Defined at:
  7407 ;;		line 167 in file "SwitchTap.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  f_state         2    0[BANK1 ] int 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      void 
  7414 ;; Registers used:
  7415 ;;		wreg, status,0
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7421 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7423 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7424 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7425 ;;Total ram usage:        4 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    3
  7428 ;; This function calls:
  7429 ;;		Nothing
  7430 ;; This function is called by:
  7431 ;;		_updateSwitchTap
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _setLongTapState
  7437  2E34                     _setLongTapState:	
  7438                           
  7439                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _setLongTapState: [wreg+status,0]
  7443  2E34  0020               	movlb	0	; select bank0
  7444  2E35  085D               	movf	_longTap_state,w	;volatile
  7445  2E36  0021               	movlb	1	; select bank1
  7446  2E37  00A2               	movwf	??_setLongTapState^(0+128)
  7447  2E38  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7448  2E39  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7449  2E3A  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7450  2E3B  1D03               	skipz
  7451  2E3C  2E3F               	goto	u8985
  7452  2E3D  0820               	movf	setLongTapState@f_state^(0+128),w
  7453  2E3E  0622               	xorwf	??_setLongTapState^(0+128),w
  7454  2E3F                     u8985:	
  7455  2E3F  1903               	btfsc	3,2
  7456  2E40  0008               	return
  7457                           
  7458                           ;SwitchTap.c: 169: longTap_state = f_state;
  7459  2E41  0820               	movf	setLongTapState@f_state^(0+128),w
  7460  2E42  00A2               	movwf	??_setLongTapState^(0+128)
  7461  2E43  0822               	movf	??_setLongTapState^(0+128),w
  7462  2E44  0020               	movlb	0	; select bank0
  7463  2E45  00DD               	movwf	_longTap_state	;volatile
  7464                           
  7465                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7466  2E46  0021               	movlb	1	; select bank1
  7467  2E47  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7468  2E48  0022               	movlb	2	; select bank2
  7469  2E49  1C03               	skipc
  7470  2E4A  128D               	bcf	13,5	;volatile
  7471  2E4B  1803               	skipnc
  7472  2E4C  168D               	bsf	13,5	;volatile
  7473  2E4D  0008               	return
  7474  2E4E                     __end_of_setLongTapState:	
  7475                           
  7476                           	psect	text5
  7477  1953                     __ptext5:	
  7478 ;; *************** function ___aldiv *****************
  7479 ;; Defined at:
  7480 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  divisor         4    0[BANK1 ] long 
  7483 ;;  dividend        4    4[BANK1 ] long 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  quotient        4   11[BANK1 ] long 
  7486 ;;  sign            1   10[BANK1 ] unsigned char 
  7487 ;;  counter         1    9[BANK1 ] unsigned char 
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  4    0[BANK1 ] long 
  7490 ;; Registers used:
  7491 ;;		wreg, status,2, status,0
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7497 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7498 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7499 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7500 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7501 ;;Total ram usage:       15 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    3
  7504 ;; This function calls:
  7505 ;;		Nothing
  7506 ;; This function is called by:
  7507 ;;		_updateSwitchTap
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           
  7512                           ;psect for function ___aldiv
  7513  1953                     ___aldiv:	
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7517  1953  0021               	movlb	1	; select bank1
  7518  1954  01AA               	clrf	___aldiv@sign^(0+128)
  7519  1955  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7520  1956  2964               	goto	l2017
  7521  1957  09A0               	comf	___aldiv@divisor^(0+128),f
  7522  1958  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7523  1959  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7524  195A  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7525  195B  0AA0               	incf	___aldiv@divisor^(0+128),f
  7526  195C  1903               	skipnz
  7527  195D  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7528  195E  1903               	skipnz
  7529  195F  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7530  1960  1903               	skipnz
  7531  1961  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7532  1962  01AA               	clrf	___aldiv@sign^(0+128)
  7533  1963  0AAA               	incf	___aldiv@sign^(0+128),f
  7534  1964                     l2017:	
  7535  1964  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7536  1965  2975               	goto	l8618
  7537  1966  09A4               	comf	___aldiv@dividend^(0+128),f
  7538  1967  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7539  1968  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7540  1969  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7541  196A  0AA4               	incf	___aldiv@dividend^(0+128),f
  7542  196B  1903               	skipnz
  7543  196C  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7544  196D  1903               	skipnz
  7545  196E  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7546  196F  1903               	skipnz
  7547  1970  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7548  1971  3001               	movlw	1
  7549  1972  00A8               	movwf	??___aldiv^(0+128)
  7550  1973  0828               	movf	??___aldiv^(0+128),w
  7551  1974  06AA               	xorwf	___aldiv@sign^(0+128),f
  7552  1975                     l8618:	
  7553  1975  3000               	movlw	0
  7554  1976  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7555  1977  3000               	movlw	0
  7556  1978  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7557  1979  3000               	movlw	0
  7558  197A  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7559  197B  3000               	movlw	0
  7560  197C  00AB               	movwf	___aldiv@quotient^(0+128)
  7561  197D  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7562  197E  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7563  197F  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7564  1980  0420               	iorwf	___aldiv@divisor^(0+128),w
  7565  1981  1903               	skipnz
  7566  1982  29BE               	goto	l8640
  7567  1983  01A9               	clrf	___aldiv@counter^(0+128)
  7568  1984  0AA9               	incf	___aldiv@counter^(0+128),f
  7569  1985                     l8626:	
  7570  1985  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7571  1986  2993               	goto	l8628
  7572  1987  3001               	movlw	1
  7573  1988                     u9065:	
  7574  1988  35A0               	lslf	___aldiv@divisor^(0+128),f
  7575  1989  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7576  198A  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7577  198B  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7578  198C  0B89               	decfsz	9,f
  7579  198D  2988               	goto	u9065
  7580  198E  3001               	movlw	1
  7581  198F  00A8               	movwf	??___aldiv^(0+128)
  7582  1990  0828               	movf	??___aldiv^(0+128),w
  7583  1991  07A9               	addwf	___aldiv@counter^(0+128),f
  7584  1992  2985               	goto	l8626
  7585  1993                     l8628:	
  7586  1993  3001               	movlw	1
  7587  1994                     u9085:	
  7588  1994  35AB               	lslf	___aldiv@quotient^(0+128),f
  7589  1995  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7590  1996  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7591  1997  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7592  1998  0B89               	decfsz	9,f
  7593  1999  2994               	goto	u9085
  7594  199A  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7595  199B  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7596  199C  1D03               	skipz
  7597  199D  29A8               	goto	u9095
  7598  199E  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7599  199F  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7600  19A0  1D03               	skipz
  7601  19A1  29A8               	goto	u9095
  7602  19A2  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7603  19A3  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7604  19A4  1D03               	skipz
  7605  19A5  29A8               	goto	u9095
  7606  19A6  0820               	movf	___aldiv@divisor^(0+128),w
  7607  19A7  0224               	subwf	___aldiv@dividend^(0+128),w
  7608  19A8                     u9095:	
  7609  19A8  1C03               	skipc
  7610  19A9  29B3               	goto	l8636
  7611  19AA  0820               	movf	___aldiv@divisor^(0+128),w
  7612  19AB  02A4               	subwf	___aldiv@dividend^(0+128),f
  7613  19AC  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7614  19AD  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7615  19AE  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7616  19AF  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7617  19B0  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7618  19B1  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7619  19B2  142B               	bsf	___aldiv@quotient^(0+128),0
  7620  19B3                     l8636:	
  7621  19B3  3001               	movlw	1
  7622  19B4                     u9105:	
  7623  19B4  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7624  19B5  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7625  19B6  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7626  19B7  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7627  19B8  0B89               	decfsz	9,f
  7628  19B9  29B4               	goto	u9105
  7629  19BA  3001               	movlw	1
  7630  19BB  02A9               	subwf	___aldiv@counter^(0+128),f
  7631  19BC  1D03               	btfss	3,2
  7632  19BD  2993               	goto	l8628
  7633  19BE                     l8640:	
  7634  19BE  082A               	movf	___aldiv@sign^(0+128),w
  7635  19BF  1903               	btfsc	3,2
  7636  19C0  29CC               	goto	l8644
  7637  19C1  09AB               	comf	___aldiv@quotient^(0+128),f
  7638  19C2  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7639  19C3  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7640  19C4  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7641  19C5  0AAB               	incf	___aldiv@quotient^(0+128),f
  7642  19C6  1903               	skipnz
  7643  19C7  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7644  19C8  1903               	skipnz
  7645  19C9  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7646  19CA  1903               	skipnz
  7647  19CB  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7648  19CC                     l8644:	
  7649  19CC  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7650  19CD  00A3               	movwf	(?___aldiv+3)^(0+128)
  7651  19CE  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7652  19CF  00A2               	movwf	(?___aldiv+2)^(0+128)
  7653  19D0  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7654  19D1  00A1               	movwf	(?___aldiv+1)^(0+128)
  7655  19D2  082B               	movf	___aldiv@quotient^(0+128),w
  7656  19D3  00A0               	movwf	?___aldiv^(0+128)
  7657  19D4  0008               	return
  7658  19D5                     __end_of___aldiv:	
  7659                           
  7660                           	psect	text6
  7661  123D                     __ptext6:	
  7662 ;; *************** function _updateSwitchBypass *****************
  7663 ;; Defined at:
  7664 ;;		line 34 in file "SwitchBypass.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;		None
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;		None
  7669 ;; Return value:  Size  Location     Type
  7670 ;;                  1    wreg      void 
  7671 ;; Registers used:
  7672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7673 ;; Tracked objects:
  7674 ;;		On entry : 0/0
  7675 ;;		On exit  : 0/0
  7676 ;;		Unchanged: 0/0
  7677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7680 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7681 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7682 ;;Total ram usage:        2 bytes
  7683 ;; Hardware stack levels used:    1
  7684 ;; Hardware stack levels required when called:    8
  7685 ;; This function calls:
  7686 ;;		_setDoublePressState
  7687 ;;		_setLongBypassState
  7688 ;;		_setSwitchBypassRelays
  7689 ;;		_setSwitchBypassState
  7690 ;; This function is called by:
  7691 ;;		_main
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function _updateSwitchBypass
  7697  123D                     _updateSwitchBypass:	
  7698                           
  7699                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7703  123D  0020               	movlb	0	; select bank0
  7704  123E  1890               	btfsc	16,1	;volatile
  7705  123F  2A53               	goto	l8906
  7706                           
  7707                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7708  1240  0023               	movlb	3	; select bank3
  7709  1241  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7710  1242  3A80               	xorlw	128
  7711  1243  0021               	movlb	1	; select bank1
  7712  1244  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7713  1245  3080               	movlw	128
  7714  1246  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7715  1247  1D03               	skipz
  7716  1248  2A4C               	goto	u9545
  7717  1249  3001               	movlw	1
  7718  124A  0023               	movlb	3	; select bank3
  7719  124B  0236               	subwf	_switchBypass_pressed^(0+384),w
  7720  124C                     u9545:	
  7721  124C  1C03               	skipc
  7722  124D  2A66               	goto	l8910
  7723                           
  7724                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7725  124E  30FF               	movlw	255
  7726  124F  0023               	movlb	3	; select bank3
  7727  1250  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7728  1251  30FF               	movlw	255
  7729  1252  2A65               	goto	L1
  7730  1253                     l8906:	
  7731                           ;SwitchBypass.c: 44: }
  7732                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7733                           
  7734  1253  0023               	movlb	3	; select bank3
  7735  1254  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7736  1255  3A80               	xorlw	128
  7737  1256  0021               	movlb	1	; select bank1
  7738  1257  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7739  1258  3080               	movlw	128
  7740  1259  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7741  125A  1D03               	skipz
  7742  125B  2A5F               	goto	u9555
  7743  125C  3019               	movlw	25
  7744  125D  0023               	movlb	3	; select bank3
  7745  125E  0236               	subwf	_switchBypass_pressed^(0+384),w
  7746  125F                     u9555:	
  7747  125F  1803               	skipnc
  7748  1260  2A66               	goto	l8910
  7749                           
  7750                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7751  1261  3001               	movlw	1
  7752  1262  0023               	movlb	3	; select bank3
  7753  1263  07B6               	addwf	_switchBypass_pressed^(0+384),f
  7754  1264  3000               	movlw	0
  7755  1265                     L1:	
  7756  1265  3DB7               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7757  1266                     l8910:	
  7758                           
  7759                           ;SwitchBypass.c: 47: }
  7760                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7761  1266  0023               	movlb	3	; select bank3
  7762  1267  0836               	movf	_switchBypass_pressed^(0+384),w
  7763  1268  0437               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7764  1269  1D03               	btfss	3,2
  7765  126A  2AF1               	goto	l8972
  7766                           
  7767                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7768  126B  0022               	movlb	2	; select bank2
  7769  126C  086A               	movf	_longBypass_start^(0+256),w
  7770  126D  1D03               	btfss	3,2
  7771  126E  2A74               	goto	l8918
  7772                           
  7773                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7774  126F  01EA               	clrf	_longBypass_start^(0+256)
  7775  1270  0AEA               	incf	_longBypass_start^(0+256),f
  7776                           
  7777                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7778  1271  0023               	movlb	3	; select bank3
  7779  1272  01B2               	clrf	_longBypass_timer^(0+384)	;volatile
  7780  1273  01B3               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7781  1274                     l8918:	
  7782                           
  7783                           ;SwitchBypass.c: 59: }
  7784                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7785  1274  0020               	movlb	0	; select bank0
  7786  1275  0859               	movf	_long_press_limit+1,w
  7787  1276  0023               	movlb	3	; select bank3
  7788  1277  0233               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7789  1278  1D03               	skipz
  7790  1279  2A7E               	goto	u9585
  7791  127A  0020               	movlb	0	; select bank0
  7792  127B  0858               	movf	_long_press_limit,w
  7793  127C  0023               	movlb	3	; select bank3
  7794  127D  0232               	subwf	_longBypass_timer^(0+384),w	;volatile
  7795  127E                     u9585:	
  7796  127E  1C03               	skipc
  7797  127F  2ABC               	goto	l8944
  7798  1280  083F               	movf	_longBypass_down^(0+384),w
  7799  1281  1D03               	btfss	3,2
  7800  1282  2ABC               	goto	l8944
  7801  1283  0020               	movlb	0	; select bank0
  7802  1284  084E               	movf	_doubleTap_state,w	;volatile
  7803  1285  1D03               	btfss	3,2
  7804  1286  2ABC               	goto	l8944
  7805                           
  7806                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7807  1287  0022               	movlb	2	; select bank2
  7808  1288  110D               	bcf	13,2	;volatile
  7809                           
  7810                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7811  1289  036B               	decf	_longTap_start^(0+256),w
  7812  128A  1903               	btfsc	3,2
  7813  128B  2AB4               	goto	l8942
  7814                           
  7815                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7816  128C  0020               	movlb	0	; select bank0
  7817  128D  035F               	decf	_switchBypass_state,w
  7818  128E  1D03               	btfss	3,2
  7819  128F  2ABC               	goto	l8944
  7820                           
  7821                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7822  1290  0023               	movlb	3	; select bank3
  7823  1291  01BF               	clrf	_longBypass_down^(0+384)
  7824  1292  0ABF               	incf	_longBypass_down^(0+384),f
  7825                           
  7826                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7827  1293  0020               	movlb	0	; select bank0
  7828  1294  084F               	movf	_longBypass_state,w	;volatile
  7829  1295  1D03               	btfss	3,2
  7830  1296  2AA2               	goto	l8938
  7831                           
  7832                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7833  1297  0022               	movlb	2	; select bank2
  7834  1298  110D               	bcf	13,2	;volatile
  7835                           
  7836                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7837  1299  3001               	movlw	1
  7838  129A  0021               	movlb	1	; select bank1
  7839  129B  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7840  129C  3000               	movlw	0
  7841  129D  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7842  129E  3188  2000  3192   	fcall	_setLongBypassState
  7843                           
  7844                           ;SwitchBypass.c: 71: } else {
  7845  12A1  2ABC               	goto	l8944
  7846  12A2                     l8938:	
  7847                           
  7848                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7849  12A2  3001               	movlw	1
  7850  12A3  0021               	movlb	1	; select bank1
  7851  12A4  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7852  12A5  3000               	movlw	0
  7853  12A6  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7854  12A7  31AE  266A  3192   	fcall	_setSwitchBypassState
  7855                           
  7856                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7857  12AA  3000               	movlw	0
  7858  12AB  0021               	movlb	1	; select bank1
  7859  12AC  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7860  12AD  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7861  12AE  3188  2000  3192   	fcall	_setLongBypassState
  7862                           
  7863                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7864  12B1  0022               	movlb	2	; select bank2
  7865  12B2  150D               	bsf	13,2	;volatile
  7866                           
  7867                           ;SwitchBypass.c: 75: }
  7868                           ;SwitchBypass.c: 76: }
  7869                           ;SwitchBypass.c: 77: } else {
  7870  12B3  2ABC               	goto	l8944
  7871  12B4                     l8942:	
  7872                           
  7873                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7874  12B4  3001               	movlw	1
  7875  12B5  0021               	movlb	1	; select bank1
  7876  12B6  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7877  12B7  3000               	movlw	0
  7878  12B8  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7879  12B9  31A2  2231  3192   	fcall	_setDoublePressState
  7880  12BC                     l8944:	
  7881                           
  7882                           ;SwitchBypass.c: 79: }
  7883                           ;SwitchBypass.c: 80: }
  7884                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7885  12BC  0022               	movlb	2	; select bank2
  7886  12BD  120F               	bcf	15,4	;volatile
  7887                           
  7888                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7889  12BE  0020               	movlb	0	; select bank0
  7890  12BF  084E               	movf	_doubleTap_state,w	;volatile
  7891  12C0  1D03               	btfss	3,2
  7892  12C1  2AED               	goto	l8970
  7893  12C2  0023               	movlb	3	; select bank3
  7894  12C3  083F               	movf	_longBypass_down^(0+384),w
  7895  12C4  1D03               	btfss	3,2
  7896  12C5  2AED               	goto	l8970
  7897                           
  7898                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7899  12C6  0020               	movlb	0	; select bank0
  7900  12C7  035F               	decf	_switchBypass_state,w
  7901  12C8  1D03               	btfss	3,2
  7902  12C9  2AD8               	goto	l8958
  7903                           
  7904                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7905  12CA  0024               	movlb	4	; select bank4
  7906  12CB  0363               	decf	_switchBypass_up^(0+512),w
  7907  12CC  0464               	iorwf	(_switchBypass_up+1)^(0+512),w
  7908  12CD  1D03               	btfss	3,2
  7909  12CE  2AED               	goto	l8970
  7910                           
  7911                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7912  12CF  0023               	movlb	3	; select bank3
  7913  12D0  01E0               	clrf	_currentBypassState^(0+384)
  7914  12D1  0AE0               	incf	_currentBypassState^(0+384),f
  7915                           
  7916                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7917  12D2  3001               	movlw	1
  7918  12D3  0024               	movlb	4	; select bank4
  7919  12D4  00D1               	movwf	_switchBypass_toggle^(0+512)
  7920  12D5  3000               	movlw	0
  7921  12D6  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7922                           
  7923                           ;SwitchBypass.c: 88: }
  7924                           ;SwitchBypass.c: 89: } else {
  7925  12D7  2AED               	goto	l8970
  7926  12D8                     l8958:	
  7927                           
  7928                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7929  12D8  0023               	movlb	3	; select bank3
  7930  12D9  033C               	decf	_bypass_turning_on^(0+384),w
  7931  12DA  1903               	btfsc	3,2
  7932  12DB  2AED               	goto	l8970
  7933                           
  7934                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7935  12DC  01E0               	clrf	_currentBypassState^(0+384)
  7936                           
  7937                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7938  12DD  01BC               	clrf	_bypass_turning_on^(0+384)
  7939  12DE  0ABC               	incf	_bypass_turning_on^(0+384),f
  7940                           
  7941                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7942  12DF  0024               	movlb	4	; select bank4
  7943  12E0  01D1               	clrf	_switchBypass_toggle^(0+512)
  7944  12E1  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7945                           
  7946                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7947  12E2  0020               	movlb	0	; select bank0
  7948  12E3  084F               	movf	_longBypass_state,w	;volatile
  7949  12E4  0021               	movlb	1	; select bank1
  7950  12E5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7951  12E6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7952  12E7  0023               	movlb	3	; select bank3
  7953  12E8  00C0               	movwf	_longBypass_save^(0+384)
  7954                           
  7955                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7956  12E9  0020               	movlb	0	; select bank0
  7957  12EA  01CF               	clrf	_longBypass_state	;volatile
  7958                           
  7959                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7960  12EB  0022               	movlb	2	; select bank2
  7961  12EC  01EA               	clrf	_longBypass_start^(0+256)
  7962  12ED                     l8970:	
  7963                           
  7964                           ;SwitchBypass.c: 100: }
  7965                           ;SwitchBypass.c: 101: }
  7966                           ;SwitchBypass.c: 103: }
  7967                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7968  12ED  0024               	movlb	4	; select bank4
  7969  12EE  01E3               	clrf	_switchBypass_up^(0+512)
  7970  12EF  01E4               	clrf	(_switchBypass_up+1)^(0+512)
  7971                           
  7972                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7973  12F0  0008               	return
  7974  12F1                     l8972:	
  7975  12F1  0023               	movlb	3	; select bank3
  7976  12F2  0837               	movf	(_switchBypass_pressed+1)^(0+384),w
  7977  12F3  3A80               	xorlw	128
  7978  12F4  0021               	movlb	1	; select bank1
  7979  12F5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7980  12F6  3080               	movlw	128
  7981  12F7  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7982  12F8  1D03               	skipz
  7983  12F9  2AFD               	goto	u9695
  7984  12FA  3019               	movlw	25
  7985  12FB  0023               	movlb	3	; select bank3
  7986  12FC  0236               	subwf	_switchBypass_pressed^(0+384),w
  7987  12FD                     u9695:	
  7988  12FD  1C03               	skipc
  7989  12FE  0008               	return
  7990                           
  7991                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7992  12FF  0020               	movlb	0	; select bank0
  7993  1300  034E               	decf	_doubleTap_state,w	;volatile
  7994  1301  1D03               	btfss	3,2
  7995  1302  2B0C               	goto	l8978
  7996                           
  7997                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7998  1303  0023               	movlb	3	; select bank3
  7999  1304  0860               	movf	_currentBypassState^(0+384),w
  8000  1305  0021               	movlb	1	; select bank1
  8001  1306  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8002  1307  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8003  1308  083C               	movf	??_updateSwitchBypass^(0+128),w
  8004  1309  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8005  130A  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8006  130B  2B3C               	goto	L2
  8007  130C                     l8978:	
  8008                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  8009                           
  8010  130C  0023               	movlb	3	; select bank3
  8011  130D  033C               	decf	_bypass_turning_on^(0+384),w
  8012  130E  1D03               	btfss	3,2
  8013  130F  2B2C               	goto	l8988
  8014                           
  8015                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  8016  1310  0340               	decf	_longBypass_save^(0+384),w
  8017  1311  1D03               	btfss	3,2
  8018  1312  2B26               	goto	l8986
  8019                           
  8020                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  8021  1313  0022               	movlb	2	; select bank2
  8022  1314  110D               	bcf	13,2	;volatile
  8023                           
  8024                           ;SwitchBypass.c: 112: setLongBypassState(1);
  8025  1315  3001               	movlw	1
  8026  1316  0021               	movlb	1	; select bank1
  8027  1317  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8028  1318  3000               	movlw	0
  8029  1319  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8030  131A  3188  2000  3192   	fcall	_setLongBypassState
  8031                           
  8032                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  8033  131D  3001               	movlw	1
  8034  131E  0021               	movlb	1	; select bank1
  8035  131F  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8036  1320  3000               	movlw	0
  8037  1321  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8038  1322  31A0  2098  3192   	fcall	_setSwitchBypassRelays
  8039                           
  8040                           ;SwitchBypass.c: 114: } else {
  8041  1325  2B40               	goto	l8996
  8042  1326                     l8986:	
  8043                           
  8044                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  8045  1326  3001               	movlw	1
  8046  1327  0021               	movlb	1	; select bank1
  8047  1328  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8048  1329  3000               	movlw	0
  8049  132A  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8050  132B  2B3D               	goto	L3
  8051  132C                     l8988:	
  8052                           ;SwitchBypass.c: 116: }
  8053                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8054                           
  8055  132C  0024               	movlb	4	; select bank4
  8056  132D  0351               	decf	_switchBypass_toggle^(0+512),w
  8057  132E  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8058  132F  1D03               	btfss	3,2
  8059  1330  2B40               	goto	l8996
  8060  1331  0023               	movlb	3	; select bank3
  8061  1332  083F               	movf	_longBypass_down^(0+384),w
  8062  1333  1D03               	btfss	3,2
  8063  1334  2B40               	goto	l8996
  8064  1335  0020               	movlb	0	; select bank0
  8065  1336  084E               	movf	_doubleTap_state,w	;volatile
  8066  1337  1D03               	btfss	3,2
  8067  1338  2B40               	goto	l8996
  8068                           
  8069                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8070  1339  3000               	movlw	0
  8071  133A  0021               	movlb	1	; select bank1
  8072  133B  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8073  133C                     L2:	
  8074  133C  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8075  133D                     L3:	
  8076  133D  31AE  266A  3192   	fcall	_setSwitchBypassState
  8077  1340                     l8996:	
  8078                           
  8079                           ;SwitchBypass.c: 120: }
  8080                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8081  1340  0023               	movlb	3	; select bank3
  8082  1341  01BF               	clrf	_longBypass_down^(0+384)
  8083                           
  8084                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8085  1342  0020               	movlb	0	; select bank0
  8086  1343  084F               	movf	_longBypass_state,w	;volatile
  8087  1344  1D03               	btfss	3,2
  8088  1345  2B4C               	goto	l9002
  8089                           
  8090                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8091  1346  0C5F               	rrf	_switchBypass_state,w
  8092  1347  0022               	movlb	2	; select bank2
  8093  1348  1C03               	skipc
  8094  1349  110D               	bcf	13,2	;volatile
  8095  134A  1803               	skipnc
  8096  134B  150D               	bsf	13,2	;volatile
  8097  134C                     l9002:	
  8098                           
  8099                           ;SwitchBypass.c: 125: }
  8100                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8101  134C  3000               	movlw	0
  8102  134D  0021               	movlb	1	; select bank1
  8103  134E  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8104  134F  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8105  1350  31A2  2231         	fcall	_setDoublePressState
  8106                           
  8107                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8108  1352  0022               	movlb	2	; select bank2
  8109  1353  01EA               	clrf	_longBypass_start^(0+256)
  8110                           
  8111                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8112  1354  0023               	movlb	3	; select bank3
  8113  1355  01BC               	clrf	_bypass_turning_on^(0+384)
  8114                           
  8115                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8116  1356  0024               	movlb	4	; select bank4
  8117  1357  01D1               	clrf	_switchBypass_toggle^(0+512)
  8118  1358  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8119                           
  8120                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8121  1359  3001               	movlw	1
  8122  135A  00E3               	movwf	_switchBypass_up^(0+512)
  8123  135B  3000               	movlw	0
  8124  135C  00E4               	movwf	(_switchBypass_up^(0+512)+1)
  8125                           
  8126                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8127  135D  3019               	movlw	25
  8128  135E  0023               	movlb	3	; select bank3
  8129  135F  00B6               	movwf	_switchBypass_pressed^(0+384)
  8130  1360  3000               	movlw	0
  8131  1361  00B7               	movwf	(_switchBypass_pressed^(0+384)+1)
  8132  1362  0008               	return
  8133  1363                     __end_of_updateSwitchBypass:	
  8134                           
  8135                           	psect	text7
  8136  0800                     __ptext7:	
  8137 ;; *************** function _setLongBypassState *****************
  8138 ;; Defined at:
  8139 ;;		line 163 in file "SwitchBypass.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  f_state         2    0[BANK1 ] int 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;		None
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg, status,0
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8153 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8155 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8156 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8157 ;;Total ram usage:        4 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    3
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_updateSwitchBypass
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _setLongBypassState
  8169  0800                     _setLongBypassState:	
  8170                           
  8171                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8175  0800  0020               	movlb	0	; select bank0
  8176  0801  084F               	movf	_longBypass_state,w	;volatile
  8177  0802  0021               	movlb	1	; select bank1
  8178  0803  00A2               	movwf	??_setLongBypassState^(0+128)
  8179  0804  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8180  0805  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8181  0806  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8182  0807  1D03               	skipz
  8183  0808  280B               	goto	u8935
  8184  0809  0820               	movf	setLongBypassState@f_state^(0+128),w
  8185  080A  0622               	xorwf	??_setLongBypassState^(0+128),w
  8186  080B                     u8935:	
  8187  080B  1903               	btfsc	3,2
  8188  080C  0008               	return
  8189                           
  8190                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8191  080D  0820               	movf	setLongBypassState@f_state^(0+128),w
  8192  080E  00A2               	movwf	??_setLongBypassState^(0+128)
  8193  080F  0822               	movf	??_setLongBypassState^(0+128),w
  8194  0810  0020               	movlb	0	; select bank0
  8195  0811  00CF               	movwf	_longBypass_state	;volatile
  8196                           
  8197                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8198  0812  0021               	movlb	1	; select bank1
  8199  0813  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8200  0814  0022               	movlb	2	; select bank2
  8201  0815  1C03               	skipc
  8202  0816  118D               	bcf	13,3	;volatile
  8203  0817  1803               	skipnc
  8204  0818  158D               	bsf	13,3	;volatile
  8205                           
  8206                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8207  0819  0021               	movlb	1	; select bank1
  8208  081A  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8209  081B  0020               	movlb	0	; select bank0
  8210  081C  1C03               	skipc
  8211  081D  120E               	bcf	14,4	;volatile
  8212  081E  1803               	skipnc
  8213  081F  160E               	bsf	14,4	;volatile
  8214  0820  0008               	return
  8215  0821                     __end_of_setLongBypassState:	
  8216                           
  8217                           	psect	text8
  8218  2231                     __ptext8:	
  8219 ;; *************** function _setDoublePressState *****************
  8220 ;; Defined at:
  8221 ;;		line 21 in file "preset_programming.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  f_state         2   24[BANK1 ] int 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  1    wreg      void 
  8228 ;; Registers used:
  8229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8235 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8237 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8238 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8239 ;;Total ram usage:        4 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    7
  8242 ;; This function calls:
  8243 ;;		_resetRingLEDs
  8244 ;;		_setPedalMode
  8245 ;;		_setPresetDisplay
  8246 ;;		_showSave
  8247 ;;		_wait_ms
  8248 ;; This function is called by:
  8249 ;;		_updateSwitchBypass
  8250 ;;		_updateSwitchTap
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           
  8255                           ;psect for function _setDoublePressState
  8256  2231                     _setDoublePressState:	
  8257                           
  8258                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8259                           
  8260                           ;incstack = 0
  8261                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8262  2231  0020               	movlb	0	; select bank0
  8263  2232  084E               	movf	_doubleTap_state,w	;volatile
  8264  2233  0021               	movlb	1	; select bank1
  8265  2234  00BA               	movwf	??_setDoublePressState^(0+128)
  8266  2235  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8267  2236  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8268  2237  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8269  2238  1D03               	skipz
  8270  2239  2A3C               	goto	u8945
  8271  223A  0838               	movf	setDoublePressState@f_state^(0+128),w
  8272  223B  063A               	xorwf	??_setDoublePressState^(0+128),w
  8273  223C                     u8945:	
  8274  223C  1903               	btfsc	3,2
  8275  223D  0008               	return
  8276                           
  8277                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8278  223E  0838               	movf	setDoublePressState@f_state^(0+128),w
  8279  223F  00BA               	movwf	??_setDoublePressState^(0+128)
  8280  2240  083A               	movf	??_setDoublePressState^(0+128),w
  8281  2241  0020               	movlb	0	; select bank0
  8282  2242  00CE               	movwf	_doubleTap_state	;volatile
  8283                           
  8284                           ;preset_programming.c: 24: if (f_state == 1) {
  8285  2243  0021               	movlb	1	; select bank1
  8286  2244  0338               	decf	setDoublePressState@f_state^(0+128),w
  8287  2245  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8288  2246  1D03               	btfss	3,2
  8289  2247  2A4B               	goto	l8540
  8290                           
  8291                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8292  2248  0022               	movlb	2	; select bank2
  8293  2249  120D               	bcf	13,4	;volatile
  8294                           
  8295                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8296  224A  128D               	bcf	13,5	;volatile
  8297  224B                     l8540:	
  8298                           
  8299                           ;preset_programming.c: 30: }
  8300                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8301  224B  0020               	movlb	0	; select bank0
  8302  224C  034E               	decf	_doubleTap_state,w	;volatile
  8303  224D  1D03               	btfss	3,2
  8304  224E  2A66               	goto	l8556
  8305                           
  8306                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8307  224F  0851               	movf	_presetSaveMode,w
  8308  2250  1D03               	btfss	3,2
  8309  2251  2A5B               	goto	l8548
  8310                           
  8311                           ;preset_programming.c: 34: presetSaveMode = 1;
  8312  2252  01D1               	clrf	_presetSaveMode
  8313  2253  0AD1               	incf	_presetSaveMode,f
  8314                           
  8315                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8316  2254  0022               	movlb	2	; select bank2
  8317  2255  108D               	bcf	13,1	;volatile
  8318                           
  8319                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8320  2256  086F               	movf	_presetChannel^(0+256),w
  8321  2257  31A1  2106  31A2   	fcall	_setPresetDisplay
  8322                           
  8323                           ;preset_programming.c: 37: } else {
  8324  225A  2A66               	goto	l8556
  8325  225B                     l8548:	
  8326                           
  8327                           ;preset_programming.c: 39: presetSaveMode = 0;
  8328  225B  0020               	movlb	0	; select bank0
  8329  225C  01D1               	clrf	_presetSaveMode
  8330                           
  8331                           ;preset_programming.c: 40: setPedalMode();
  8332  225D  31AF  2704  31A2   	fcall	_setPedalMode
  8333                           
  8334                           ;preset_programming.c: 41: resetRingLEDs();
  8335  2260  31AE  261A  31A2   	fcall	_resetRingLEDs
  8336                           
  8337                           ;preset_programming.c: 42: showSave();
  8338  2263  31AD  25EE  31A2   	fcall	_showSave
  8339  2266                     l8556:	
  8340                           
  8341                           ;preset_programming.c: 44: }
  8342                           ;preset_programming.c: 45: }
  8343                           ;preset_programming.c: 47: wait_ms(20);
  8344  2266  3014               	movlw	20
  8345  2267  0021               	movlb	1	; select bank1
  8346  2268  00AC               	movwf	wait_ms@timeSec^(0+128)
  8347  2269  3000               	movlw	0
  8348  226A  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8349  226B  31A0  2066         	fcall	_wait_ms
  8350  226D  0008               	return
  8351  226E                     __end_of_setDoublePressState:	
  8352                           
  8353                           	psect	text9
  8354  2DEE                     __ptext9:	
  8355 ;; *************** function _showSave *****************
  8356 ;; Defined at:
  8357 ;;		line 112 in file "LEDs.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;		None
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;		None
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8373 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8374 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8375 ;;Total ram usage:        1 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    6
  8378 ;; This function calls:
  8379 ;;		_ring_tactiles
  8380 ;;		_solidring_tactiles
  8381 ;; This function is called by:
  8382 ;;		_setDoublePressState
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           
  8387                           ;psect for function _showSave
  8388  2DEE                     _showSave:	
  8389                           
  8390                           ;LEDs.c: 113: suspend_blink = 1;
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8394  2DEE  3001               	movlw	1
  8395  2DEF  0021               	movlb	1	; select bank1
  8396  2DF0  00B7               	movwf	??_showSave^(0+128)
  8397  2DF1  0837               	movf	??_showSave^(0+128),w
  8398  2DF2  0022               	movlb	2	; select bank2
  8399  2DF3  00ED               	movwf	_suspend_blink^(0+256)	;volatile
  8400                           
  8401                           ;LEDs.c: 114: ring_tactiles();
  8402  2DF4  3198  2000  31AD   	fcall	_ring_tactiles
  8403                           
  8404                           ;LEDs.c: 115: ring_tactiles();
  8405  2DF7  3198  2000  31AD   	fcall	_ring_tactiles
  8406                           
  8407                           ;LEDs.c: 116: solidring_tactiles();
  8408  2DFA  31A2  22AE  31AD   	fcall	_solidring_tactiles
  8409                           
  8410                           ;LEDs.c: 117: solidring_tactiles();
  8411  2DFD  31A2  22AE         	fcall	_solidring_tactiles
  8412                           
  8413                           ;LEDs.c: 118: suspend_blink = 0;
  8414  2DFF  0022               	movlb	2	; select bank2
  8415  2E00  01ED               	clrf	_suspend_blink^(0+256)	;volatile
  8416  2E01  0008               	return
  8417  2E02                     __end_of_showSave:	
  8418                           
  8419                           	psect	text10
  8420  22AE                     __ptext10:	
  8421 ;; *************** function _solidring_tactiles *****************
  8422 ;; Defined at:
  8423 ;;		line 208 in file "LEDs.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8438 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8439 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8440 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8441 ;;Total ram usage:        3 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    5
  8444 ;; This function calls:
  8445 ;;		_set_leds_bottom
  8446 ;;		_set_leds_top
  8447 ;;		_wait_ms
  8448 ;; This function is called by:
  8449 ;;		_showSave
  8450 ;;		_showBootSequence
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           
  8455                           ;psect for function _solidring_tactiles
  8456  22AE                     _solidring_tactiles:	
  8457                           
  8458                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8459                           
  8460                           ;incstack = 0
  8461                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8462  22AE  301E               	movlw	30
  8463  22AF  0021               	movlb	1	; select bank1
  8464  22B0  00B2               	movwf	??_solidring_tactiles^(0+128)
  8465  22B1  0832               	movf	??_solidring_tactiles^(0+128),w
  8466  22B2  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8467                           
  8468                           ;LEDs.c: 210: set_leds_top(100, 1);
  8469  22B3  3064               	movlw	100
  8470  22B4  00A0               	movwf	set_leds_top@x^(0+128)
  8471  22B5  3000               	movlw	0
  8472  22B6  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8473  22B7  3001               	movlw	1
  8474  22B8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8475  22B9  3000               	movlw	0
  8476  22BA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8477  22BB  31A5  258A  31A2   	fcall	_set_leds_top
  8478                           
  8479                           ;LEDs.c: 211: set_leds_bottom(100);
  8480  22BE  3064               	movlw	100
  8481  22BF  0021               	movlb	1	; select bank1
  8482  22C0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8483  22C1  3000               	movlw	0
  8484  22C2  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8485  22C3  31A1  2140  31A2   	fcall	_set_leds_bottom
  8486                           
  8487                           ;LEDs.c: 212: wait_ms(ring_delay);
  8488  22C6  0021               	movlb	1	; select bank1
  8489  22C7  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8490  22C8  00B2               	movwf	??_solidring_tactiles^(0+128)
  8491  22C9  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8492  22CA  0832               	movf	??_solidring_tactiles^(0+128),w
  8493  22CB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8494  22CC  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8495  22CD  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8496  22CE  31A0  2066  31A2   	fcall	_wait_ms
  8497                           
  8498                           ;LEDs.c: 214: set_leds_top(0, 1);
  8499  22D1  3000               	movlw	0
  8500  22D2  0021               	movlb	1	; select bank1
  8501  22D3  00A0               	movwf	set_leds_top@x^(0+128)
  8502  22D4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8503  22D5  3001               	movlw	1
  8504  22D6  00A2               	movwf	set_leds_top@ledState^(0+128)
  8505  22D7  3000               	movlw	0
  8506  22D8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8507  22D9  31A5  258A  31A2   	fcall	_set_leds_top
  8508                           
  8509                           ;LEDs.c: 215: set_leds_bottom(0);
  8510  22DC  3000               	movlw	0
  8511  22DD  0021               	movlb	1	; select bank1
  8512  22DE  00A0               	movwf	set_leds_bottom@x^(0+128)
  8513  22DF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8514  22E0  31A1  2140  31A2   	fcall	_set_leds_bottom
  8515                           
  8516                           ;LEDs.c: 216: wait_ms(ring_delay);
  8517  22E3  0021               	movlb	1	; select bank1
  8518  22E4  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8519  22E5  00B2               	movwf	??_solidring_tactiles^(0+128)
  8520  22E6  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8521  22E7  0832               	movf	??_solidring_tactiles^(0+128),w
  8522  22E8  00AC               	movwf	wait_ms@timeSec^(0+128)
  8523  22E9  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8524  22EA  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8525  22EB  31A0  2066         	fcall	_wait_ms
  8526  22ED  0008               	return
  8527  22EE                     __end_of_solidring_tactiles:	
  8528                           
  8529                           	psect	text11
  8530  1800                     __ptext11:	
  8531 ;; *************** function _ring_tactiles *****************
  8532 ;; Defined at:
  8533 ;;		line 196 in file "LEDs.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  iLed            2   21[BANK1 ] int 
  8538 ;;  iLed            2   19[BANK1 ] int 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  1    wreg      void 
  8541 ;; Registers used:
  8542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8549 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8550 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8551 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8552 ;;Total ram usage:        5 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    5
  8555 ;; This function calls:
  8556 ;;		_set_leds_bottom
  8557 ;;		_set_leds_top
  8558 ;;		_wait_ms
  8559 ;; This function is called by:
  8560 ;;		_showSave
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _ring_tactiles
  8566  1800                     _ring_tactiles:	
  8567                           
  8568                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8572  1800  3001               	movlw	1
  8573  1801  0021               	movlb	1	; select bank1
  8574  1802  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8575  1803  3000               	movlw	0
  8576  1804  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8577  1805  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8578  1806  3A80               	xorlw	128
  8579  1807  00B2               	movwf	??_ring_tactiles^(0+128)
  8580  1808  3080               	movlw	128
  8581  1809  0232               	subwf	??_ring_tactiles^(0+128),w
  8582  180A  1D03               	skipz
  8583  180B  280E               	goto	u8385
  8584  180C  3007               	movlw	7
  8585  180D  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8586  180E                     u8385:	
  8587  180E  1803               	btfsc	3,0
  8588  180F  2834               	goto	l8032
  8589  1810                     l8024:	
  8590                           
  8591                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8592  1810  0021               	movlb	1	; select bank1
  8593  1811  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8594  1812  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8595  1813  0833               	movf	ring_tactiles@iLed^(0+128),w
  8596  1814  00A0               	movwf	set_leds_top@x^(0+128)
  8597  1815  3001               	movlw	1
  8598  1816  00A2               	movwf	set_leds_top@ledState^(0+128)
  8599  1817  3000               	movlw	0
  8600  1818  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8601  1819  31A5  258A  3198   	fcall	_set_leds_top
  8602                           
  8603                           ;LEDs.c: 199: wait_ms(5);
  8604  181C  3005               	movlw	5
  8605  181D  0021               	movlb	1	; select bank1
  8606  181E  00AC               	movwf	wait_ms@timeSec^(0+128)
  8607  181F  3000               	movlw	0
  8608  1820  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8609  1821  31A0  2066  3198   	fcall	_wait_ms
  8610  1824  3001               	movlw	1
  8611  1825  0021               	movlb	1	; select bank1
  8612  1826  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8613  1827  3000               	movlw	0
  8614  1828  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8615  1829  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8616  182A  3A80               	xorlw	128
  8617  182B  00B2               	movwf	??_ring_tactiles^(0+128)
  8618  182C  3080               	movlw	128
  8619  182D  0232               	subwf	??_ring_tactiles^(0+128),w
  8620  182E  1D03               	skipz
  8621  182F  2832               	goto	u8395
  8622  1830  3007               	movlw	7
  8623  1831  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8624  1832                     u8395:	
  8625  1832  1C03               	skipc
  8626  1833  2810               	goto	l8024
  8627  1834                     l8032:	
  8628                           
  8629                           ;LEDs.c: 200: }
  8630                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8631  1834  3005               	movlw	5
  8632  1835  0021               	movlb	1	; select bank1
  8633  1836  00B5               	movwf	ring_tactiles@iLed_1533^(0+128)
  8634  1837  3000               	movlw	0
  8635  1838  00B6               	movwf	(ring_tactiles@iLed_1533^(0+128)+1)
  8636  1839                     L4:	
  8637  1839  1BB6               	btfsc	(ring_tactiles@iLed_1533+1)^(0+128),7
  8638  183A  0008               	return
  8639                           
  8640                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8641  183B  0836               	movf	(ring_tactiles@iLed_1533+1)^(0+128),w
  8642  183C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8643  183D  0835               	movf	ring_tactiles@iLed_1533^(0+128),w
  8644  183E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8645  183F  31A1  2140  3198   	fcall	_set_leds_bottom
  8646                           
  8647                           ;LEDs.c: 203: wait_ms(5);
  8648  1842  3005               	movlw	5
  8649  1843  0021               	movlb	1	; select bank1
  8650  1844  00AC               	movwf	wait_ms@timeSec^(0+128)
  8651  1845  3000               	movlw	0
  8652  1846  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8653  1847  31A0  2066  3198   	fcall	_wait_ms
  8654  184A  30FF               	movlw	255
  8655  184B  0021               	movlb	1	; select bank1
  8656  184C  07B5               	addwf	ring_tactiles@iLed_1533^(0+128),f
  8657  184D  30FF               	movlw	255
  8658  184E  3DB6               	addwfc	(ring_tactiles@iLed_1533+1)^(0+128),f
  8659  184F  2839               	goto	L4
  8660  1850                     __end_of_ring_tactiles:	
  8661                           
  8662                           	psect	text12
  8663  2F04                     __ptext12:	
  8664 ;; *************** function _setPedalMode *****************
  8665 ;; Defined at:
  8666 ;;		line 119 in file "tactiles.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8684 ;;Total ram usage:        0 bytes
  8685 ;; Hardware stack levels used:    1
  8686 ;; Hardware stack levels required when called:    5
  8687 ;; This function calls:
  8688 ;;		_resetRingLEDs
  8689 ;;		_setExpressionDisplay
  8690 ;;		_setPresetDisplay
  8691 ;; This function is called by:
  8692 ;;		_update_mode
  8693 ;;		_setDoublePressState
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _setPedalMode
  8699  2F04                     _setPedalMode:	
  8700                           
  8701                           ;tactiles.c: 120: switch (mode2_state) {
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8705  2F04  2F1A               	goto	l8232
  8706  2F05                     l999:	
  8707                           ;tactiles.c: 121: case 0:
  8708                           
  8709                           
  8710                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8711  2F05  0022               	movlb	2	; select bank2
  8712  2F06  108D               	bcf	13,1	;volatile
  8713                           
  8714                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8715  2F07  100D               	bcf	13,0	;volatile
  8716                           
  8717                           ;tactiles.c: 124: resetRingLEDs();
  8718  2F08  31AE  261A         	fcall	_resetRingLEDs
  8719                           
  8720                           ;tactiles.c: 125: break;
  8721  2F0A  0008               	return
  8722  2F0B                     l1001:	
  8723                           ;tactiles.c: 126: case 1:
  8724                           
  8725                           
  8726                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8727  2F0B  0022               	movlb	2	; select bank2
  8728  2F0C  108D               	bcf	13,1	;volatile
  8729                           
  8730                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8731  2F0D  140D               	bsf	13,0	;volatile
  8732                           
  8733                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8734  2F0E  086F               	movf	_presetChannel^(0+256),w
  8735  2F0F  31A1  2106         	fcall	_setPresetDisplay
  8736                           
  8737                           ;tactiles.c: 130: break;
  8738  2F11  0008               	return
  8739  2F12                     l1002:	
  8740                           ;tactiles.c: 131: case 2:
  8741                           
  8742                           
  8743                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8744  2F12  0022               	movlb	2	; select bank2
  8745  2F13  148D               	bsf	13,1	;volatile
  8746                           
  8747                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8748  2F14  100D               	bcf	13,0	;volatile
  8749                           
  8750                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8751  2F15  0023               	movlb	3	; select bank3
  8752  2F16  0863               	movf	_expressionChannel^(0+384),w
  8753  2F17  31AE  2602         	fcall	_setExpressionDisplay
  8754                           
  8755                           ;tactiles.c: 136: }
  8756                           
  8757                           ;tactiles.c: 135: break;
  8758  2F19  0008               	return
  8759  2F1A                     l8232:	
  8760  2F1A  0020               	movlb	0	; select bank0
  8761  2F1B  0850               	movf	_mode2_state,w
  8762                           
  8763                           ; Switch size 1, requested type "space"
  8764                           ; Number of cases is 3, Range of values is 0 to 2
  8765                           ; switch strategies available:
  8766                           ; Name         Instructions Cycles
  8767                           ; simple_byte           10     6 (average)
  8768                           ; direct_byte           12     6 (fixed)
  8769                           ; jumptable            260     6 (fixed)
  8770                           ;	Chosen strategy is simple_byte
  8771  2F1C  3A00               	xorlw	0	; case 0
  8772  2F1D  1903               	skipnz
  8773  2F1E  2F05               	goto	l999
  8774  2F1F  3A01               	xorlw	1	; case 1
  8775  2F20  1903               	skipnz
  8776  2F21  2F0B               	goto	l1001
  8777  2F22  3A03               	xorlw	3	; case 2
  8778  2F23  1903               	skipnz
  8779  2F24  2F12               	goto	l1002
  8780  2F25  2F26               	goto	l1003
  8781  2F26                     l1003:	
  8782  2F26  0008               	return
  8783  2F27                     __end_of_setPedalMode:	
  8784                           
  8785                           	psect	text13
  8786  2106                     __ptext13:	
  8787 ;; *************** function _setPresetDisplay *****************
  8788 ;; Defined at:
  8789 ;;		line 51 in file "preset_programming.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  ledChannel      1    wreg     unsigned char 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  1    wreg      void 
  8796 ;; Registers used:
  8797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8804 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8805 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8806 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8807 ;;Total ram usage:        3 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    4
  8810 ;; This function calls:
  8811 ;;		_set_leds_bottom
  8812 ;;		_set_leds_top
  8813 ;; This function is called by:
  8814 ;;		_setPedalMode
  8815 ;;		_update_selectMode
  8816 ;;		_setDoublePressState
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _setPresetDisplay
  8822  2106                     _setPresetDisplay:	
  8823                           
  8824                           ;incstack = 0
  8825                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8826                           ;setPresetDisplay@ledChannel stored from wreg
  8827  2106  0021               	movlb	1	; select bank1
  8828  2107  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8829                           
  8830                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8831  2108  3006               	movlw	6
  8832  2109  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8833  210A  1803               	skipnc
  8834  210B  2922               	goto	l8052
  8835                           
  8836                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8837  210C  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8838  210D  00A4               	movwf	??_setPresetDisplay^(0+128)
  8839  210E  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8840  210F  0824               	movf	??_setPresetDisplay^(0+128),w
  8841  2110  00A0               	movwf	set_leds_top@x^(0+128)
  8842  2111  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8843  2112  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8844  2113  3001               	movlw	1
  8845  2114  00A2               	movwf	set_leds_top@ledState^(0+128)
  8846  2115  3000               	movlw	0
  8847  2116  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8848  2117  31A5  258A  31A1   	fcall	_set_leds_top
  8849                           
  8850                           ;preset_programming.c: 54: set_leds_bottom(6);
  8851  211A  3006               	movlw	6
  8852  211B  0021               	movlb	1	; select bank1
  8853  211C  00A0               	movwf	set_leds_bottom@x^(0+128)
  8854  211D  3000               	movlw	0
  8855  211E  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8856  211F  31A1  2140         	fcall	_set_leds_bottom
  8857                           
  8858                           ;preset_programming.c: 55: } else {
  8859  2121  0008               	return
  8860  2122                     l8052:	
  8861                           
  8862                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8863  2122  3006               	movlw	6
  8864  2123  0021               	movlb	1	; select bank1
  8865  2124  00A0               	movwf	set_leds_top@x^(0+128)
  8866  2125  3000               	movlw	0
  8867  2126  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8868  2127  3001               	movlw	1
  8869  2128  00A2               	movwf	set_leds_top@ledState^(0+128)
  8870  2129  3000               	movlw	0
  8871  212A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8872  212B  31A5  258A  31A1   	fcall	_set_leds_top
  8873                           
  8874                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8875  212E  0021               	movlb	1	; select bank1
  8876  212F  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8877  2130  00A4               	movwf	??_setPresetDisplay^(0+128)
  8878  2131  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8879  2132  09A4               	comf	??_setPresetDisplay^(0+128),f
  8880  2133  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8881  2134  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8882  2135  1903               	skipnz
  8883  2136  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8884  2137  0824               	movf	??_setPresetDisplay^(0+128),w
  8885  2138  3E0B               	addlw	11
  8886  2139  00A0               	movwf	set_leds_bottom@x^(0+128)
  8887  213A  3000               	movlw	0
  8888  213B  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8889  213C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8890  213D  31A1  2140         	fcall	_set_leds_bottom
  8891  213F  0008               	return
  8892  2140                     __end_of_setPresetDisplay:	
  8893                           
  8894                           	psect	text14
  8895  2E02                     __ptext14:	
  8896 ;; *************** function _setExpressionDisplay *****************
  8897 ;; Defined at:
  8898 ;;		line 66 in file "preset_programming.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  ledChannel      1    wreg     unsigned char 
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  1    wreg      void 
  8905 ;; Registers used:
  8906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8913 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8914 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8915 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8916 ;;Total ram usage:        3 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    4
  8919 ;; This function calls:
  8920 ;;		_set_leds_bottom
  8921 ;;		_set_leds_top
  8922 ;; This function is called by:
  8923 ;;		_setPedalMode
  8924 ;;		_update_selectMode
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           
  8929                           ;psect for function _setExpressionDisplay
  8930  2E02                     _setExpressionDisplay:	
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8934                           ;setExpressionDisplay@ledChannel stored from wreg
  8935  2E02  0021               	movlb	1	; select bank1
  8936  2E03  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8937                           
  8938                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8939  2E04  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8940  2E05  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8941  2E06  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8942  2E07  0824               	movf	??_setExpressionDisplay^(0+128),w
  8943  2E08  00A0               	movwf	set_leds_top@x^(0+128)
  8944  2E09  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8945  2E0A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8946  2E0B  3001               	movlw	1
  8947  2E0C  00A2               	movwf	set_leds_top@ledState^(0+128)
  8948  2E0D  3000               	movlw	0
  8949  2E0E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8950  2E0F  31A5  258A  31AE   	fcall	_set_leds_top
  8951                           
  8952                           ;preset_programming.c: 68: set_leds_bottom(6);
  8953  2E12  3006               	movlw	6
  8954  2E13  0021               	movlb	1	; select bank1
  8955  2E14  00A0               	movwf	set_leds_bottom@x^(0+128)
  8956  2E15  3000               	movlw	0
  8957  2E16  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8958  2E17  31A1  2140         	fcall	_set_leds_bottom
  8959  2E19  0008               	return
  8960  2E1A                     __end_of_setExpressionDisplay:	
  8961                           
  8962                           	psect	text15
  8963  2E1A                     __ptext15:	
  8964 ;; *************** function _resetRingLEDs *****************
  8965 ;; Defined at:
  8966 ;;		line 61 in file "preset_programming.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;		None
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;		None
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      void 
  8973 ;; Registers used:
  8974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8984 ;;Total ram usage:        0 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    4
  8987 ;; This function calls:
  8988 ;;		_set_leds_bottom
  8989 ;;		_set_leds_top
  8990 ;; This function is called by:
  8991 ;;		_update_mode
  8992 ;;		_setPedalMode
  8993 ;;		_setDoublePressState
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _resetRingLEDs
  8999  2E1A                     _resetRingLEDs:	
  9000                           
  9001                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9005  2E1A  0020               	movlb	0	; select bank0
  9006  2E1B  085B               	movf	_top_push_state+1,w
  9007  2E1C  0021               	movlb	1	; select bank1
  9008  2E1D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9009  2E1E  0020               	movlb	0	; select bank0
  9010  2E1F  085A               	movf	_top_push_state,w
  9011  2E20  0021               	movlb	1	; select bank1
  9012  2E21  00A0               	movwf	set_leds_top@x^(0+128)
  9013  2E22  3001               	movlw	1
  9014  2E23  00A2               	movwf	set_leds_top@ledState^(0+128)
  9015  2E24  3000               	movlw	0
  9016  2E25  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9017  2E26  31A5  258A  31AE   	fcall	_set_leds_top
  9018                           
  9019                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9020  2E29  0020               	movlb	0	; select bank0
  9021  2E2A  0857               	movf	_bottom_push_state+1,w
  9022  2E2B  0021               	movlb	1	; select bank1
  9023  2E2C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9024  2E2D  0020               	movlb	0	; select bank0
  9025  2E2E  0856               	movf	_bottom_push_state,w
  9026  2E2F  0021               	movlb	1	; select bank1
  9027  2E30  00A0               	movwf	set_leds_bottom@x^(0+128)
  9028  2E31  31A1  2140         	fcall	_set_leds_bottom
  9029  2E33  0008               	return
  9030  2E34                     __end_of_resetRingLEDs:	
  9031                           
  9032                           	psect	text16
  9033  0DBA                     __ptext16:	
  9034 ;; *************** function _updateModulationArray *****************
  9035 ;; Defined at:
  9036 ;;		line 44 in file "modulation.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;		None
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  thisAngle       2   57[BANK2 ] int 
  9041 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9042 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9043 ;;  subDiv          2   55[BANK2 ] int 
  9044 ;;  angleFactor     2   52[BANK2 ] int 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9055 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9056 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9057 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9058 ;;Total ram usage:       12 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    7
  9061 ;; This function calls:
  9062 ;;		___awdiv
  9063 ;;		___awtoft
  9064 ;;		___wmul
  9065 ;;		_getModulationSubdivision
  9066 ;;		_modCos
  9067 ;;		_modSaw
  9068 ;;		_modSawRev
  9069 ;;		_modSquare
  9070 ;;		_modTri
  9071 ;; This function is called by:
  9072 ;;		_main
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _updateModulationArray
  9078  0DBA                     _updateModulationArray:	
  9079                           
  9080                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9084  0DBA  31A0  2036  318D   	fcall	_getModulationSubdivision
  9085  0DBD  0021               	movlb	1	; select bank1
  9086  0DBE  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9087  0DBF  0022               	movlb	2	; select bank2
  9088  0DC0  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9089  0DC1  0021               	movlb	1	; select bank1
  9090  0DC2  0820               	movf	?_getModulationSubdivision^(0+128),w
  9091  0DC3  0022               	movlb	2	; select bank2
  9092  0DC4  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9093                           
  9094                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9095  0DC5  307A               	movlw	122
  9096  0DC6  0086               	movwf	6
  9097  0DC7  3024               	movlw	36
  9098  0DC8  0087               	movwf	7
  9099  0DC9  3F40               	moviw [0]fsr1
  9100  0DCA  00D0               	movwf	??_updateModulationArray^(0+256)
  9101  0DCB  3F41               	moviw [1]fsr1
  9102  0DCC  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9103  0DCD  0020               	movlb	0	; select bank0
  9104  0DCE  0857               	movf	_bottom_push_state+1,w
  9105  0DCF  0022               	movlb	2	; select bank2
  9106  0DD0  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9107  0DD1  1D03               	skipz
  9108  0DD2  2DD7               	goto	u9255
  9109  0DD3  0020               	movlb	0	; select bank0
  9110  0DD4  0856               	movf	_bottom_push_state,w
  9111  0DD5  0022               	movlb	2	; select bank2
  9112  0DD6  0650               	xorwf	??_updateModulationArray^(0+256),w
  9113  0DD7                     u9255:	
  9114  0DD7  1D03               	skipz
  9115  0DD8  2DFD               	goto	l8718
  9116  0DD9  307C               	movlw	124
  9117  0DDA  0086               	movwf	6
  9118  0DDB  3024               	movlw	36
  9119  0DDC  0087               	movwf	7
  9120  0DDD  3F40               	moviw [0]fsr1
  9121  0DDE  00D0               	movwf	??_updateModulationArray^(0+256)
  9122  0DDF  3F41               	moviw [1]fsr1
  9123  0DE0  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9124  0DE1  0023               	movlb	3	; select bank3
  9125  0DE2  085C               	movf	(_symmetry+1)^(0+384),w
  9126  0DE3  0022               	movlb	2	; select bank2
  9127  0DE4  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9128  0DE5  1D03               	skipz
  9129  0DE6  2DEB               	goto	u9265
  9130  0DE7  0023               	movlb	3	; select bank3
  9131  0DE8  085B               	movf	_symmetry^(0+384),w
  9132  0DE9  0022               	movlb	2	; select bank2
  9133  0DEA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9134  0DEB                     u9265:	
  9135  0DEB  1D03               	skipz
  9136  0DEC  2DFD               	goto	l8718
  9137  0DED  307E               	movlw	126
  9138  0DEE  0086               	movwf	6
  9139  0DEF  3024               	movlw	36
  9140  0DF0  0087               	movwf	7
  9141  0DF1  3F40               	moviw [0]fsr1
  9142  0DF2  00D0               	movwf	??_updateModulationArray^(0+256)
  9143  0DF3  3F41               	moviw [1]fsr1
  9144  0DF4  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9145  0DF5  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9146  0DF6  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9147  0DF7  1D03               	skipz
  9148  0DF8  2DFB               	goto	u9275
  9149  0DF9  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9150  0DFA  0650               	xorwf	??_updateModulationArray^(0+256),w
  9151  0DFB                     u9275:	
  9152  0DFB  1903               	btfsc	3,2
  9153  0DFC  0008               	return
  9154  0DFD                     l8718:	
  9155                           ;modulation.c: 48: return;
  9156                           
  9157                           
  9158                           ;modulation.c: 49: }
  9159                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9160  0DFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9161  0DFE  0021               	movlb	1	; select bank1
  9162  0DFF  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9163  0E00  0022               	movlb	2	; select bank2
  9164  0E01  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9165  0E02  0021               	movlb	1	; select bank1
  9166  0E03  00A0               	movwf	___awdiv@divisor^(0+128)
  9167  0E04  3068               	movlw	104
  9168  0E05  00A2               	movwf	___awdiv@dividend^(0+128)
  9169  0E06  3001               	movlw	1
  9170  0E07  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9171  0E08  31A4  24E5  318D   	fcall	___awdiv
  9172  0E0B  0021               	movlb	1	; select bank1
  9173  0E0C  0821               	movf	(?___awdiv+1)^(0+128),w
  9174  0E0D  0022               	movlb	2	; select bank2
  9175  0E0E  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9176  0E0F  0021               	movlb	1	; select bank1
  9177  0E10  0820               	movf	?___awdiv^(0+128),w
  9178  0E11  0022               	movlb	2	; select bank2
  9179  0E12  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9180                           
  9181                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9182  0E13  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9183  0E14                     l8742:	
  9184  0E14  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9185  0E15  3A80               	xorlw	128
  9186  0E16  3C80               	sublw	128
  9187  0E17  1D03               	skipz
  9188  0E18  2E1B               	goto	u9285
  9189  0E19  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9190  0E1A  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9191  0E1B                     u9285:	
  9192  0E1B  1803               	btfsc	3,0
  9193  0E1C  2FC1               	goto	l8744
  9194                           
  9195                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9196  0E1D  0022               	movlb	2	; select bank2
  9197  0E1E  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9198  0E1F  00D0               	movwf	??_updateModulationArray^(0+256)
  9199  0E20  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9200  0E21  0850               	movf	??_updateModulationArray^(0+256),w
  9201  0E22  00AE               	movwf	___wmul@multiplier^(0+256)
  9202  0E23  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9203  0E24  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9204  0E25  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9205  0E26  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9206  0E27  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9207  0E28  00B0               	movwf	___wmul@multiplicand^(0+256)
  9208  0E29  31AE  264E  318D   	fcall	___wmul
  9209  0E2C  0022               	movlb	2	; select bank2
  9210  0E2D  082F               	movf	(?___wmul+1)^(0+256),w
  9211  0E2E  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9212  0E2F  082E               	movf	?___wmul^(0+256),w
  9213  0E30  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9214                           
  9215                           ;modulation.c: 54: switch (bottom_push_state) {
  9216  0E31  2FA4               	goto	l8738
  9217  0E32                     l8724:	
  9218                           ;modulation.c: 55: case 1:
  9219                           
  9220                           
  9221                           ;modulation.c: 56: modArray[iAngle] = modCos(thisAngle, symmetry);
  9222  0E32  0022               	movlb	2	; select bank2
  9223  0E33  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9224  0E34  0021               	movlb	1	; select bank1
  9225  0E35  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9226  0E36  0022               	movlb	2	; select bank2
  9227  0E37  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9228  0E38  0021               	movlb	1	; select bank1
  9229  0E39  00A8               	movwf	___awtoft@c^(0+128)
  9230  0E3A  31AE  26E2  318D   	fcall	___awtoft
  9231  0E3D  0021               	movlb	1	; select bank1
  9232  0E3E  0828               	movf	?___awtoft^(0+128),w
  9233  0E3F  0022               	movlb	2	; select bank2
  9234  0E40  00B4               	movwf	modCos@angle^(0+256)
  9235  0E41  0021               	movlb	1	; select bank1
  9236  0E42  0829               	movf	(?___awtoft+1)^(0+128),w
  9237  0E43  0022               	movlb	2	; select bank2
  9238  0E44  00B5               	movwf	(modCos@angle+1)^(0+256)
  9239  0E45  0021               	movlb	1	; select bank1
  9240  0E46  082A               	movf	(?___awtoft+2)^(0+128),w
  9241  0E47  0022               	movlb	2	; select bank2
  9242  0E48  00B6               	movwf	(modCos@angle+2)^(0+256)
  9243  0E49  0023               	movlb	3	; select bank3
  9244  0E4A  085C               	movf	(_symmetry+1)^(0+384),w
  9245  0E4B  0021               	movlb	1	; select bank1
  9246  0E4C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9247  0E4D  0023               	movlb	3	; select bank3
  9248  0E4E  085B               	movf	_symmetry^(0+384),w
  9249  0E4F  0021               	movlb	1	; select bank1
  9250  0E50  00A8               	movwf	___awtoft@c^(0+128)
  9251  0E51  31AE  26E2  318D   	fcall	___awtoft
  9252  0E54  0021               	movlb	1	; select bank1
  9253  0E55  0828               	movf	?___awtoft^(0+128),w
  9254  0E56  0022               	movlb	2	; select bank2
  9255  0E57  00B7               	movwf	modCos@inflection^(0+256)
  9256  0E58  0021               	movlb	1	; select bank1
  9257  0E59  0829               	movf	(?___awtoft+1)^(0+128),w
  9258  0E5A  0022               	movlb	2	; select bank2
  9259  0E5B  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9260  0E5C  0021               	movlb	1	; select bank1
  9261  0E5D  082A               	movf	(?___awtoft+2)^(0+128),w
  9262  0E5E  0022               	movlb	2	; select bank2
  9263  0E5F  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9264  0E60  3196  2654  318D   	fcall	_modCos
  9265  0E63  0022               	movlb	2	; select bank2
  9266  0E64  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9267  0E65  00D0               	movwf	??_updateModulationArray^(0+256)
  9268  0E66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9269  0E67  35D0               	lslf	??_updateModulationArray^(0+256),f
  9270  0E68  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9271  0E69  308A               	movlw	138
  9272  0E6A  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9273  0E6B  3023               	movlw	35
  9274  0E6C  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9275  0E6D  0850               	movf	??_updateModulationArray^(0+256),w
  9276  0E6E  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9277  0E6F  0086               	movwf	6
  9278  0E70  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9279  0E71  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9280  0E72  0087               	movwf	7
  9281  0E73  0834               	movf	?_modCos^(0+256),w
  9282  0E74  3FC0               	movwi [0]fsr1
  9283  0E75  0835               	movf	(?_modCos+1)^(0+256),w
  9284  0E76  3FC1               	movwi [1]fsr1
  9285                           
  9286                           ;modulation.c: 57: break;
  9287  0E77  2FBB               	goto	l8740
  9288  0E78                     l8726:	
  9289                           ;modulation.c: 58: case 2:
  9290                           
  9291                           
  9292                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9293  0E78  0022               	movlb	2	; select bank2
  9294  0E79  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9295  0E7A  0021               	movlb	1	; select bank1
  9296  0E7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9297  0E7C  0022               	movlb	2	; select bank2
  9298  0E7D  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9299  0E7E  0021               	movlb	1	; select bank1
  9300  0E7F  00A8               	movwf	___awtoft@c^(0+128)
  9301  0E80  31AE  26E2  318D   	fcall	___awtoft
  9302  0E83  0021               	movlb	1	; select bank1
  9303  0E84  0828               	movf	?___awtoft^(0+128),w
  9304  0E85  0022               	movlb	2	; select bank2
  9305  0E86  00AE               	movwf	modTri@angle^(0+256)
  9306  0E87  0021               	movlb	1	; select bank1
  9307  0E88  0829               	movf	(?___awtoft+1)^(0+128),w
  9308  0E89  0022               	movlb	2	; select bank2
  9309  0E8A  00AF               	movwf	(modTri@angle+1)^(0+256)
  9310  0E8B  0021               	movlb	1	; select bank1
  9311  0E8C  082A               	movf	(?___awtoft+2)^(0+128),w
  9312  0E8D  0022               	movlb	2	; select bank2
  9313  0E8E  00B0               	movwf	(modTri@angle+2)^(0+256)
  9314  0E8F  0023               	movlb	3	; select bank3
  9315  0E90  085C               	movf	(_symmetry+1)^(0+384),w
  9316  0E91  0021               	movlb	1	; select bank1
  9317  0E92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9318  0E93  0023               	movlb	3	; select bank3
  9319  0E94  085B               	movf	_symmetry^(0+384),w
  9320  0E95  0021               	movlb	1	; select bank1
  9321  0E96  00A8               	movwf	___awtoft@c^(0+128)
  9322  0E97  31AE  26E2  318D   	fcall	___awtoft
  9323  0E9A  0021               	movlb	1	; select bank1
  9324  0E9B  0828               	movf	?___awtoft^(0+128),w
  9325  0E9C  0022               	movlb	2	; select bank2
  9326  0E9D  00B1               	movwf	modTri@inflection^(0+256)
  9327  0E9E  0021               	movlb	1	; select bank1
  9328  0E9F  0829               	movf	(?___awtoft+1)^(0+128),w
  9329  0EA0  0022               	movlb	2	; select bank2
  9330  0EA1  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9331  0EA2  0021               	movlb	1	; select bank1
  9332  0EA3  082A               	movf	(?___awtoft+2)^(0+128),w
  9333  0EA4  0022               	movlb	2	; select bank2
  9334  0EA5  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9335  0EA6  3189  21F0  318D   	fcall	_modTri
  9336  0EA9  0022               	movlb	2	; select bank2
  9337  0EAA  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9338  0EAB  00D0               	movwf	??_updateModulationArray^(0+256)
  9339  0EAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9340  0EAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9341  0EAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9342  0EAF  308A               	movlw	138
  9343  0EB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9344  0EB1  3023               	movlw	35
  9345  0EB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9346  0EB3  0850               	movf	??_updateModulationArray^(0+256),w
  9347  0EB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9348  0EB5  0086               	movwf	6
  9349  0EB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9350  0EB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9351  0EB8  0087               	movwf	7
  9352  0EB9  082E               	movf	?_modTri^(0+256),w
  9353  0EBA  3FC0               	movwi [0]fsr1
  9354  0EBB  082F               	movf	(?_modTri+1)^(0+256),w
  9355  0EBC  3FC1               	movwi [1]fsr1
  9356                           
  9357                           ;modulation.c: 60: break;
  9358  0EBD  2FBB               	goto	l8740
  9359  0EBE                     l8728:	
  9360                           ;modulation.c: 61: case 3:
  9361                           
  9362                           
  9363                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9364  0EBE  0022               	movlb	2	; select bank2
  9365  0EBF  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9366  0EC0  0021               	movlb	1	; select bank1
  9367  0EC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9368  0EC2  0022               	movlb	2	; select bank2
  9369  0EC3  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9370  0EC4  0021               	movlb	1	; select bank1
  9371  0EC5  00A8               	movwf	___awtoft@c^(0+128)
  9372  0EC6  31AE  26E2  318D   	fcall	___awtoft
  9373  0EC9  0021               	movlb	1	; select bank1
  9374  0ECA  0828               	movf	?___awtoft^(0+128),w
  9375  0ECB  0022               	movlb	2	; select bank2
  9376  0ECC  00C8               	movwf	modSquare@angle^(0+256)
  9377  0ECD  0021               	movlb	1	; select bank1
  9378  0ECE  0829               	movf	(?___awtoft+1)^(0+128),w
  9379  0ECF  0022               	movlb	2	; select bank2
  9380  0ED0  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9381  0ED1  0021               	movlb	1	; select bank1
  9382  0ED2  082A               	movf	(?___awtoft+2)^(0+128),w
  9383  0ED3  0022               	movlb	2	; select bank2
  9384  0ED4  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9385  0ED5  0023               	movlb	3	; select bank3
  9386  0ED6  085C               	movf	(_symmetry+1)^(0+384),w
  9387  0ED7  0021               	movlb	1	; select bank1
  9388  0ED8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9389  0ED9  0023               	movlb	3	; select bank3
  9390  0EDA  085B               	movf	_symmetry^(0+384),w
  9391  0EDB  0021               	movlb	1	; select bank1
  9392  0EDC  00A8               	movwf	___awtoft@c^(0+128)
  9393  0EDD  31AE  26E2  318D   	fcall	___awtoft
  9394  0EE0  0021               	movlb	1	; select bank1
  9395  0EE1  0828               	movf	?___awtoft^(0+128),w
  9396  0EE2  0022               	movlb	2	; select bank2
  9397  0EE3  00CB               	movwf	modSquare@inflection^(0+256)
  9398  0EE4  0021               	movlb	1	; select bank1
  9399  0EE5  0829               	movf	(?___awtoft+1)^(0+128),w
  9400  0EE6  0022               	movlb	2	; select bank2
  9401  0EE7  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9402  0EE8  0021               	movlb	1	; select bank1
  9403  0EE9  082A               	movf	(?___awtoft+2)^(0+128),w
  9404  0EEA  0022               	movlb	2	; select bank2
  9405  0EEB  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9406  0EEC  31A1  21F4  318D   	fcall	_modSquare
  9407  0EEF  0022               	movlb	2	; select bank2
  9408  0EF0  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9409  0EF1  00D0               	movwf	??_updateModulationArray^(0+256)
  9410  0EF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9411  0EF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  9412  0EF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9413  0EF5  308A               	movlw	138
  9414  0EF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9415  0EF7  3023               	movlw	35
  9416  0EF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9417  0EF9  0850               	movf	??_updateModulationArray^(0+256),w
  9418  0EFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9419  0EFB  0086               	movwf	6
  9420  0EFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9421  0EFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9422  0EFE  0087               	movwf	7
  9423  0EFF  0848               	movf	?_modSquare^(0+256),w
  9424  0F00  3FC0               	movwi [0]fsr1
  9425  0F01  0849               	movf	(?_modSquare+1)^(0+256),w
  9426  0F02  3FC1               	movwi [1]fsr1
  9427                           
  9428                           ;modulation.c: 63: break;
  9429  0F03  2FBB               	goto	l8740
  9430  0F04                     l8730:	
  9431                           ;modulation.c: 64: case 4:
  9432                           
  9433                           
  9434                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9435  0F04  0022               	movlb	2	; select bank2
  9436  0F05  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9437  0F06  0021               	movlb	1	; select bank1
  9438  0F07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9439  0F08  0022               	movlb	2	; select bank2
  9440  0F09  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9441  0F0A  0021               	movlb	1	; select bank1
  9442  0F0B  00A8               	movwf	___awtoft@c^(0+128)
  9443  0F0C  31AE  26E2  318D   	fcall	___awtoft
  9444  0F0F  0021               	movlb	1	; select bank1
  9445  0F10  0828               	movf	?___awtoft^(0+128),w
  9446  0F11  0022               	movlb	2	; select bank2
  9447  0F12  00C2               	movwf	modSawRev@angle^(0+256)
  9448  0F13  0021               	movlb	1	; select bank1
  9449  0F14  0829               	movf	(?___awtoft+1)^(0+128),w
  9450  0F15  0022               	movlb	2	; select bank2
  9451  0F16  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9452  0F17  0021               	movlb	1	; select bank1
  9453  0F18  082A               	movf	(?___awtoft+2)^(0+128),w
  9454  0F19  0022               	movlb	2	; select bank2
  9455  0F1A  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9456  0F1B  0023               	movlb	3	; select bank3
  9457  0F1C  085C               	movf	(_symmetry+1)^(0+384),w
  9458  0F1D  0021               	movlb	1	; select bank1
  9459  0F1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9460  0F1F  0023               	movlb	3	; select bank3
  9461  0F20  085B               	movf	_symmetry^(0+384),w
  9462  0F21  0021               	movlb	1	; select bank1
  9463  0F22  00A8               	movwf	___awtoft@c^(0+128)
  9464  0F23  31AE  26E2  318D   	fcall	___awtoft
  9465  0F26  0021               	movlb	1	; select bank1
  9466  0F27  0828               	movf	?___awtoft^(0+128),w
  9467  0F28  0022               	movlb	2	; select bank2
  9468  0F29  00C5               	movwf	modSawRev@inflection^(0+256)
  9469  0F2A  0021               	movlb	1	; select bank1
  9470  0F2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9471  0F2C  0022               	movlb	2	; select bank2
  9472  0F2D  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9473  0F2E  0021               	movlb	1	; select bank1
  9474  0F2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9475  0F30  0022               	movlb	2	; select bank2
  9476  0F31  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9477  0F32  31AE  2686  318D   	fcall	_modSawRev
  9478  0F35  0022               	movlb	2	; select bank2
  9479  0F36  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9480  0F37  00D0               	movwf	??_updateModulationArray^(0+256)
  9481  0F38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9482  0F39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9483  0F3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9484  0F3B  308A               	movlw	138
  9485  0F3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9486  0F3D  3023               	movlw	35
  9487  0F3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9488  0F3F  0850               	movf	??_updateModulationArray^(0+256),w
  9489  0F40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9490  0F41  0086               	movwf	6
  9491  0F42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9492  0F43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9493  0F44  0087               	movwf	7
  9494  0F45  0842               	movf	?_modSawRev^(0+256),w
  9495  0F46  3FC0               	movwi [0]fsr1
  9496  0F47  0843               	movf	(?_modSawRev+1)^(0+256),w
  9497  0F48  3FC1               	movwi [1]fsr1
  9498                           
  9499                           ;modulation.c: 66: break;
  9500  0F49  2FBB               	goto	l8740
  9501  0F4A                     l8732:	
  9502                           ;modulation.c: 67: case 5:
  9503                           
  9504                           
  9505                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9506  0F4A  0022               	movlb	2	; select bank2
  9507  0F4B  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9508  0F4C  0021               	movlb	1	; select bank1
  9509  0F4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9510  0F4E  0022               	movlb	2	; select bank2
  9511  0F4F  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9512  0F50  0021               	movlb	1	; select bank1
  9513  0F51  00A8               	movwf	___awtoft@c^(0+128)
  9514  0F52  31AE  26E2  318D   	fcall	___awtoft
  9515  0F55  0021               	movlb	1	; select bank1
  9516  0F56  0828               	movf	?___awtoft^(0+128),w
  9517  0F57  0022               	movlb	2	; select bank2
  9518  0F58  00AE               	movwf	modSaw@angle^(0+256)
  9519  0F59  0021               	movlb	1	; select bank1
  9520  0F5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9521  0F5B  0022               	movlb	2	; select bank2
  9522  0F5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9523  0F5D  0021               	movlb	1	; select bank1
  9524  0F5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9525  0F5F  0022               	movlb	2	; select bank2
  9526  0F60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9527  0F61  0023               	movlb	3	; select bank3
  9528  0F62  085C               	movf	(_symmetry+1)^(0+384),w
  9529  0F63  0021               	movlb	1	; select bank1
  9530  0F64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9531  0F65  0023               	movlb	3	; select bank3
  9532  0F66  085B               	movf	_symmetry^(0+384),w
  9533  0F67  0021               	movlb	1	; select bank1
  9534  0F68  00A8               	movwf	___awtoft@c^(0+128)
  9535  0F69  31AE  26E2  318D   	fcall	___awtoft
  9536  0F6C  0021               	movlb	1	; select bank1
  9537  0F6D  0828               	movf	?___awtoft^(0+128),w
  9538  0F6E  0022               	movlb	2	; select bank2
  9539  0F6F  00B1               	movwf	modSaw@inflection^(0+256)
  9540  0F70  0021               	movlb	1	; select bank1
  9541  0F71  0829               	movf	(?___awtoft+1)^(0+128),w
  9542  0F72  0022               	movlb	2	; select bank2
  9543  0F73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9544  0F74  0021               	movlb	1	; select bank1
  9545  0F75  082A               	movf	(?___awtoft+2)^(0+128),w
  9546  0F76  0022               	movlb	2	; select bank2
  9547  0F77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9548  0F78  3194  24BC  318D   	fcall	_modSaw
  9549  0F7B  0022               	movlb	2	; select bank2
  9550  0F7C  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9551  0F7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9552  0F7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9553  0F7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9554  0F80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9555  0F81  308A               	movlw	138
  9556  0F82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9557  0F83  3023               	movlw	35
  9558  0F84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9559  0F85  0850               	movf	??_updateModulationArray^(0+256),w
  9560  0F86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9561  0F87  0086               	movwf	6
  9562  0F88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9563  0F89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9564  0F8A  0087               	movwf	7
  9565  0F8B  082E               	movf	?_modSaw^(0+256),w
  9566  0F8C  3FC0               	movwi [0]fsr1
  9567  0F8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9568  0F8E  3FC1               	movwi [1]fsr1
  9569                           
  9570                           ;modulation.c: 69: break;
  9571  0F8F  2FBB               	goto	l8740
  9572  0F90                     l8734:	
  9573                           ;modulation.c: 70: default:
  9574                           
  9575                           
  9576                           ;modulation.c: 71: modArray[iAngle] = 0;
  9577  0F90  0022               	movlb	2	; select bank2
  9578  0F91  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9579  0F92  00D0               	movwf	??_updateModulationArray^(0+256)
  9580  0F93  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9581  0F94  35D0               	lslf	??_updateModulationArray^(0+256),f
  9582  0F95  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9583  0F96  308A               	movlw	138
  9584  0F97  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9585  0F98  3023               	movlw	35
  9586  0F99  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9587  0F9A  0850               	movf	??_updateModulationArray^(0+256),w
  9588  0F9B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9589  0F9C  0086               	movwf	6
  9590  0F9D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9591  0F9E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9592  0F9F  0087               	movwf	7
  9593  0FA0  3000               	movlw	0
  9594  0FA1  3FC0               	movwi [0]fsr1
  9595  0FA2  3FC1               	movwi [1]fsr1
  9596                           
  9597                           ;modulation.c: 73: }
  9598                           
  9599                           ;modulation.c: 72: break;
  9600  0FA3  2FBB               	goto	l8740
  9601  0FA4                     l8738:	
  9602                           
  9603                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9604                           ; Switch size 1, requested type "space"
  9605                           ; Number of cases is 1, Range of values is 0 to 0
  9606                           ; switch strategies available:
  9607                           ; Name         Instructions Cycles
  9608                           ; simple_byte            4     3 (average)
  9609                           ; direct_byte            8     6 (fixed)
  9610                           ; jumptable            260     6 (fixed)
  9611                           ;	Chosen strategy is simple_byte
  9612  0FA4  0020               	movlb	0	; select bank0
  9613  0FA5  0857               	movf	_bottom_push_state+1,w
  9614  0FA6  3A00               	xorlw	0	; case 0
  9615  0FA7  1903               	skipnz
  9616  0FA8  2FAA               	goto	l9842
  9617  0FA9  2F90               	goto	l8734
  9618  0FAA                     l9842:	
  9619                           
  9620                           ; Switch size 1, requested type "space"
  9621                           ; Number of cases is 5, Range of values is 1 to 5
  9622                           ; switch strategies available:
  9623                           ; Name         Instructions Cycles
  9624                           ; simple_byte           16     9 (average)
  9625                           ; direct_byte           19     9 (fixed)
  9626                           ; jumptable            263     9 (fixed)
  9627                           ;	Chosen strategy is simple_byte
  9628  0FAA  0856               	movf	_bottom_push_state,w
  9629  0FAB  3A01               	xorlw	1	; case 1
  9630  0FAC  1903               	skipnz
  9631  0FAD  2E32               	goto	l8724
  9632  0FAE  3A03               	xorlw	3	; case 2
  9633  0FAF  1903               	skipnz
  9634  0FB0  2E78               	goto	l8726
  9635  0FB1  3A01               	xorlw	1	; case 3
  9636  0FB2  1903               	skipnz
  9637  0FB3  2EBE               	goto	l8728
  9638  0FB4  3A07               	xorlw	7	; case 4
  9639  0FB5  1903               	skipnz
  9640  0FB6  2F04               	goto	l8730
  9641  0FB7  3A01               	xorlw	1	; case 5
  9642  0FB8  1903               	skipnz
  9643  0FB9  2F4A               	goto	l8732
  9644  0FBA  2F90               	goto	l8734
  9645  0FBB                     l8740:	
  9646  0FBB  3001               	movlw	1
  9647  0FBC  0022               	movlb	2	; select bank2
  9648  0FBD  00D0               	movwf	??_updateModulationArray^(0+256)
  9649  0FBE  0850               	movf	??_updateModulationArray^(0+256),w
  9650  0FBF  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9651  0FC0  2E14               	goto	l8742
  9652  0FC1                     l8744:	
  9653                           
  9654                           ;modulation.c: 74: }
  9655                           ;modulation.c: 75: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9656  0FC1  0022               	movlb	2	; select bank2
  9657  0FC2  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9658  0FC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9659  0FC4  0850               	movf	??_updateModulationArray^(0+256),w
  9660  0FC5  00D6               	movwf	updateModulationArray@iAngle_2350^(0+256)
  9661  0FC6  3078               	movlw	120
  9662  0FC7  0256               	subwf	updateModulationArray@iAngle_2350^(0+256),w
  9663  0FC8  1803               	btfsc	3,0
  9664  0FC9  2FE4               	goto	l8754
  9665  0FCA                     l8748:	
  9666                           
  9667                           ;modulation.c: 76: modArray[iAngle] = 0 ;
  9668  0FCA  0856               	movf	updateModulationArray@iAngle_2350^(0+256),w
  9669  0FCB  00D0               	movwf	??_updateModulationArray^(0+256)
  9670  0FCC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9671  0FCD  35D0               	lslf	??_updateModulationArray^(0+256),f
  9672  0FCE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9673  0FCF  308A               	movlw	138
  9674  0FD0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9675  0FD1  3023               	movlw	35
  9676  0FD2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9677  0FD3  0850               	movf	??_updateModulationArray^(0+256),w
  9678  0FD4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9679  0FD5  0086               	movwf	6
  9680  0FD6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9681  0FD7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9682  0FD8  0087               	movwf	7
  9683  0FD9  3000               	movlw	0
  9684  0FDA  3FC0               	movwi [0]fsr1
  9685  0FDB  3FC1               	movwi [1]fsr1
  9686  0FDC  3001               	movlw	1
  9687  0FDD  00D0               	movwf	??_updateModulationArray^(0+256)
  9688  0FDE  0850               	movf	??_updateModulationArray^(0+256),w
  9689  0FDF  07D6               	addwf	updateModulationArray@iAngle_2350^(0+256),f
  9690  0FE0  3078               	movlw	120
  9691  0FE1  0256               	subwf	updateModulationArray@iAngle_2350^(0+256),w
  9692  0FE2  1C03               	skipc
  9693  0FE3  2FCA               	goto	l8748
  9694  0FE4                     l8754:	
  9695                           
  9696                           ;modulation.c: 77: }
  9697                           ;modulation.c: 78: modArray[120] = bottom_push_state;
  9698  0FE4  307A               	movlw	122
  9699  0FE5  0086               	movwf	6
  9700  0FE6  3024               	movlw	36
  9701  0FE7  0087               	movwf	7
  9702  0FE8  0020               	movlb	0	; select bank0
  9703  0FE9  0856               	movf	_bottom_push_state,w
  9704  0FEA  3FC0               	movwi [0]fsr1
  9705  0FEB  0857               	movf	_bottom_push_state+1,w
  9706  0FEC  3FC1               	movwi [1]fsr1
  9707                           
  9708                           ;modulation.c: 79: modArray[121] = symmetry;
  9709  0FED  307C               	movlw	124
  9710  0FEE  0086               	movwf	6
  9711  0FEF  3024               	movlw	36
  9712  0FF0  0087               	movwf	7
  9713  0FF1  0023               	movlb	3	; select bank3
  9714  0FF2  085B               	movf	_symmetry^(0+384),w
  9715  0FF3  3FC0               	movwi [0]fsr1
  9716  0FF4  085C               	movf	(_symmetry+1)^(0+384),w
  9717  0FF5  3FC1               	movwi [1]fsr1
  9718                           
  9719                           ;modulation.c: 80: modArray[122] = subDiv;
  9720  0FF6  307E               	movlw	126
  9721  0FF7  0086               	movwf	6
  9722  0FF8  3024               	movlw	36
  9723  0FF9  0087               	movwf	7
  9724  0FFA  0022               	movlb	2	; select bank2
  9725  0FFB  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9726  0FFC  3FC0               	movwi [0]fsr1
  9727  0FFD  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9728  0FFE  3FC1               	movwi [1]fsr1
  9729  0FFF  0008               	return
  9730  1000                     __end_of_updateModulationArray:	
  9731                           
  9732                           	psect	text17
  9733  09F0                     __ptext17:	
  9734 ;; *************** function _modTri *****************
  9735 ;; Defined at:
  9736 ;;		line 99 in file "modulation.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  angle           3   14[BANK2 ] void 
  9739 ;;  inflection      3   17[BANK2 ] void 
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;  tmpVal          3   29[BANK2 ] void 
  9742 ;;  period          3   26[BANK2 ] void 
  9743 ;;  shift           3   23[BANK2 ] void 
  9744 ;; Return value:  Size  Location     Type
  9745 ;;                  2   14[BANK2 ] int 
  9746 ;; Registers used:
  9747 ;;		wreg, status,2, status,0, pclath, cstack
  9748 ;; Tracked objects:
  9749 ;;		On entry : 0/0
  9750 ;;		On exit  : 0/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9753 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9754 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9756 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9757 ;;Total ram usage:       18 bytes
  9758 ;; Hardware stack levels used:    1
  9759 ;; Hardware stack levels required when called:    5
  9760 ;; This function calls:
  9761 ;;		___ftadd
  9762 ;;		___ftdiv
  9763 ;;		___ftge
  9764 ;;		___ftmul
  9765 ;;		___ftneg
  9766 ;;		___fttol
  9767 ;; This function is called by:
  9768 ;;		_updateModulationArray
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           
  9773                           ;psect for function _modTri
  9774  09F0                     _modTri:	
  9775                           
  9776                           ;modulation.c: 100: double period = 1.0;
  9777                           
  9778                           ;incstack = 0
  9779                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9780  09F0  3000               	movlw	0
  9781  09F1  0022               	movlb	2	; select bank2
  9782  09F2  00BA               	movwf	modTri@period^(0+256)
  9783  09F3  3080               	movlw	128
  9784  09F4  00BB               	movwf	(modTri@period+1)^(0+256)
  9785  09F5  303F               	movlw	63
  9786  09F6  00BC               	movwf	(modTri@period+2)^(0+256)
  9787                           
  9788                           ;modulation.c: 101: double shift = 0;
  9789  09F7  3000               	movlw	0
  9790  09F8  00B7               	movwf	modTri@shift^(0+256)
  9791  09F9  3000               	movlw	0
  9792  09FA  00B8               	movwf	(modTri@shift+1)^(0+256)
  9793  09FB  3000               	movlw	0
  9794  09FC  00B9               	movwf	(modTri@shift+2)^(0+256)
  9795                           
  9796                           ;modulation.c: 103: if(angle<=inflection) {
  9797  09FD  0831               	movf	modTri@inflection^(0+256),w
  9798  09FE  0021               	movlb	1	; select bank1
  9799  09FF  00A0               	movwf	___ftge@ff1^(0+128)
  9800  0A00  0022               	movlb	2	; select bank2
  9801  0A01  0832               	movf	(modTri@inflection+1)^(0+256),w
  9802  0A02  0021               	movlb	1	; select bank1
  9803  0A03  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9804  0A04  0022               	movlb	2	; select bank2
  9805  0A05  0833               	movf	(modTri@inflection+2)^(0+256),w
  9806  0A06  0021               	movlb	1	; select bank1
  9807  0A07  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9808  0A08  0022               	movlb	2	; select bank2
  9809  0A09  082E               	movf	modTri@angle^(0+256),w
  9810  0A0A  0021               	movlb	1	; select bank1
  9811  0A0B  00A3               	movwf	___ftge@ff2^(0+128)
  9812  0A0C  0022               	movlb	2	; select bank2
  9813  0A0D  082F               	movf	(modTri@angle+1)^(0+256),w
  9814  0A0E  0021               	movlb	1	; select bank1
  9815  0A0F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9816  0A10  0022               	movlb	2	; select bank2
  9817  0A11  0830               	movf	(modTri@angle+2)^(0+256),w
  9818  0A12  0021               	movlb	1	; select bank1
  9819  0A13  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9820  0A14  31A1  217B  3189   	fcall	___ftge
  9821  0A17  1C03               	btfss	3,0
  9822  0A18  2A25               	goto	l8586
  9823                           
  9824                           ;modulation.c: 104: period = 180.0/inflection;
  9825  0A19  0022               	movlb	2	; select bank2
  9826  0A1A  0831               	movf	modTri@inflection^(0+256),w
  9827  0A1B  0021               	movlb	1	; select bank1
  9828  0A1C  00CE               	movwf	___ftdiv@f2^(0+128)
  9829  0A1D  0022               	movlb	2	; select bank2
  9830  0A1E  0832               	movf	(modTri@inflection+1)^(0+256),w
  9831  0A1F  0021               	movlb	1	; select bank1
  9832  0A20  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9833  0A21  0022               	movlb	2	; select bank2
  9834  0A22  0833               	movf	(modTri@inflection+2)^(0+256),w
  9835  0A23  0021               	movlb	1	; select bank1
  9836  0A24  2AE0               	goto	L5
  9837  0A25                     l8586:	
  9838                           ;modulation.c: 105: } else {
  9839                           
  9840                           
  9841                           ;modulation.c: 106: shift = -(360-inflection*2)*(180/(360-inflection));
  9842  0A25  0022               	movlb	2	; select bank2
  9843  0A26  0831               	movf	modTri@inflection^(0+256),w
  9844  0A27  0021               	movlb	1	; select bank1
  9845  0A28  00B1               	movwf	___ftmul@f2^(0+128)
  9846  0A29  0022               	movlb	2	; select bank2
  9847  0A2A  0832               	movf	(modTri@inflection+1)^(0+256),w
  9848  0A2B  0021               	movlb	1	; select bank1
  9849  0A2C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9850  0A2D  0022               	movlb	2	; select bank2
  9851  0A2E  0833               	movf	(modTri@inflection+2)^(0+256),w
  9852  0A2F  0021               	movlb	1	; select bank1
  9853  0A30  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9854  0A31  3000               	movlw	0
  9855  0A32  00AE               	movwf	___ftmul@f1^(0+128)
  9856  0A33  3000               	movlw	0
  9857  0A34  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9858  0A35  3040               	movlw	64
  9859  0A36  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9860  0A37  319E  267B  3189   	fcall	___ftmul
  9861  0A3A  0021               	movlb	1	; select bank1
  9862  0A3B  082E               	movf	?___ftmul^(0+128),w
  9863  0A3C  00BE               	movwf	___ftneg@f1^(0+128)
  9864  0A3D  082F               	movf	(?___ftmul+1)^(0+128),w
  9865  0A3E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9866  0A3F  0830               	movf	(?___ftmul+2)^(0+128),w
  9867  0A40  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9868  0A41  31AD  2593  3189   	fcall	___ftneg
  9869  0A44  0021               	movlb	1	; select bank1
  9870  0A45  083E               	movf	?___ftneg^(0+128),w
  9871  0A46  00C4               	movwf	___ftadd@f2^(0+128)
  9872  0A47  083F               	movf	(?___ftneg+1)^(0+128),w
  9873  0A48  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9874  0A49  0840               	movf	(?___ftneg+2)^(0+128),w
  9875  0A4A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9876  0A4B  3000               	movlw	0
  9877  0A4C  00C1               	movwf	___ftadd@f1^(0+128)
  9878  0A4D  30B4               	movlw	180
  9879  0A4E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9880  0A4F  3043               	movlw	67
  9881  0A50  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9882  0A51  3190  2031  3189   	fcall	___ftadd
  9883  0A54  0021               	movlb	1	; select bank1
  9884  0A55  0841               	movf	?___ftadd^(0+128),w
  9885  0A56  0022               	movlb	2	; select bank2
  9886  0A57  00B4               	movwf	_modTri$2856^(0+256)
  9887  0A58  0021               	movlb	1	; select bank1
  9888  0A59  0842               	movf	(?___ftadd+1)^(0+128),w
  9889  0A5A  0022               	movlb	2	; select bank2
  9890  0A5B  00B5               	movwf	(_modTri$2856+1)^(0+256)
  9891  0A5C  0021               	movlb	1	; select bank1
  9892  0A5D  0843               	movf	(?___ftadd+2)^(0+128),w
  9893  0A5E  0022               	movlb	2	; select bank2
  9894  0A5F  00B6               	movwf	(_modTri$2856+2)^(0+256)
  9895                           
  9896                           ;modulation.c: 106: shift = -(360-inflection*2)*(180/(360-inflection));
  9897  0A60  0834               	movf	_modTri$2856^(0+256),w
  9898  0A61  0021               	movlb	1	; select bank1
  9899  0A62  00BE               	movwf	___ftneg@f1^(0+128)
  9900  0A63  0022               	movlb	2	; select bank2
  9901  0A64  0835               	movf	(_modTri$2856+1)^(0+256),w
  9902  0A65  0021               	movlb	1	; select bank1
  9903  0A66  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9904  0A67  0022               	movlb	2	; select bank2
  9905  0A68  0836               	movf	(_modTri$2856+2)^(0+256),w
  9906  0A69  0021               	movlb	1	; select bank1
  9907  0A6A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9908  0A6B  31AD  2593  3189   	fcall	___ftneg
  9909  0A6E  0021               	movlb	1	; select bank1
  9910  0A6F  083E               	movf	?___ftneg^(0+128),w
  9911  0A70  00AE               	movwf	___ftmul@f1^(0+128)
  9912  0A71  083F               	movf	(?___ftneg+1)^(0+128),w
  9913  0A72  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9914  0A73  0840               	movf	(?___ftneg+2)^(0+128),w
  9915  0A74  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9916  0A75  3000               	movlw	0
  9917  0A76  00C1               	movwf	___ftadd@f1^(0+128)
  9918  0A77  30B4               	movlw	180
  9919  0A78  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9920  0A79  3043               	movlw	67
  9921  0A7A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9922  0A7B  0022               	movlb	2	; select bank2
  9923  0A7C  0831               	movf	modTri@inflection^(0+256),w
  9924  0A7D  0021               	movlb	1	; select bank1
  9925  0A7E  00BE               	movwf	___ftneg@f1^(0+128)
  9926  0A7F  0022               	movlb	2	; select bank2
  9927  0A80  0832               	movf	(modTri@inflection+1)^(0+256),w
  9928  0A81  0021               	movlb	1	; select bank1
  9929  0A82  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9930  0A83  0022               	movlb	2	; select bank2
  9931  0A84  0833               	movf	(modTri@inflection+2)^(0+256),w
  9932  0A85  0021               	movlb	1	; select bank1
  9933  0A86  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9934  0A87  31AD  2593  3189   	fcall	___ftneg
  9935  0A8A  0021               	movlb	1	; select bank1
  9936  0A8B  083E               	movf	?___ftneg^(0+128),w
  9937  0A8C  00C4               	movwf	___ftadd@f2^(0+128)
  9938  0A8D  083F               	movf	(?___ftneg+1)^(0+128),w
  9939  0A8E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9940  0A8F  0840               	movf	(?___ftneg+2)^(0+128),w
  9941  0A90  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9942  0A91  3190  2031  3189   	fcall	___ftadd
  9943  0A94  0021               	movlb	1	; select bank1
  9944  0A95  0841               	movf	?___ftadd^(0+128),w
  9945  0A96  00CE               	movwf	___ftdiv@f2^(0+128)
  9946  0A97  0842               	movf	(?___ftadd+1)^(0+128),w
  9947  0A98  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9948  0A99  0843               	movf	(?___ftadd+2)^(0+128),w
  9949  0A9A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9950  0A9B  3000               	movlw	0
  9951  0A9C  00D1               	movwf	___ftdiv@f1^(0+128)
  9952  0A9D  3034               	movlw	52
  9953  0A9E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9954  0A9F  3043               	movlw	67
  9955  0AA0  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9956  0AA1  319D  251F  3189   	fcall	___ftdiv
  9957  0AA4  0021               	movlb	1	; select bank1
  9958  0AA5  084E               	movf	?___ftdiv^(0+128),w
  9959  0AA6  00B1               	movwf	___ftmul@f2^(0+128)
  9960  0AA7  084F               	movf	(?___ftdiv+1)^(0+128),w
  9961  0AA8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9962  0AA9  0850               	movf	(?___ftdiv+2)^(0+128),w
  9963  0AAA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9964  0AAB  319E  267B  3189   	fcall	___ftmul
  9965  0AAE  0021               	movlb	1	; select bank1
  9966  0AAF  082E               	movf	?___ftmul^(0+128),w
  9967  0AB0  0022               	movlb	2	; select bank2
  9968  0AB1  00B7               	movwf	modTri@shift^(0+256)
  9969  0AB2  0021               	movlb	1	; select bank1
  9970  0AB3  082F               	movf	(?___ftmul+1)^(0+128),w
  9971  0AB4  0022               	movlb	2	; select bank2
  9972  0AB5  00B8               	movwf	(modTri@shift+1)^(0+256)
  9973  0AB6  0021               	movlb	1	; select bank1
  9974  0AB7  0830               	movf	(?___ftmul+2)^(0+128),w
  9975  0AB8  0022               	movlb	2	; select bank2
  9976  0AB9  00B9               	movwf	(modTri@shift+2)^(0+256)
  9977                           
  9978                           ;modulation.c: 107: period = 180/(360-inflection);
  9979  0ABA  3000               	movlw	0
  9980  0ABB  0021               	movlb	1	; select bank1
  9981  0ABC  00C1               	movwf	___ftadd@f1^(0+128)
  9982  0ABD  30B4               	movlw	180
  9983  0ABE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9984  0ABF  3043               	movlw	67
  9985  0AC0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9986  0AC1  0022               	movlb	2	; select bank2
  9987  0AC2  0831               	movf	modTri@inflection^(0+256),w
  9988  0AC3  0021               	movlb	1	; select bank1
  9989  0AC4  00BE               	movwf	___ftneg@f1^(0+128)
  9990  0AC5  0022               	movlb	2	; select bank2
  9991  0AC6  0832               	movf	(modTri@inflection+1)^(0+256),w
  9992  0AC7  0021               	movlb	1	; select bank1
  9993  0AC8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9994  0AC9  0022               	movlb	2	; select bank2
  9995  0ACA  0833               	movf	(modTri@inflection+2)^(0+256),w
  9996  0ACB  0021               	movlb	1	; select bank1
  9997  0ACC  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9998  0ACD  31AD  2593  3189   	fcall	___ftneg
  9999  0AD0  0021               	movlb	1	; select bank1
 10000  0AD1  083E               	movf	?___ftneg^(0+128),w
 10001  0AD2  00C4               	movwf	___ftadd@f2^(0+128)
 10002  0AD3  083F               	movf	(?___ftneg+1)^(0+128),w
 10003  0AD4  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10004  0AD5  0840               	movf	(?___ftneg+2)^(0+128),w
 10005  0AD6  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10006  0AD7  3190  2031  3189   	fcall	___ftadd
 10007  0ADA  0021               	movlb	1	; select bank1
 10008  0ADB  0841               	movf	?___ftadd^(0+128),w
 10009  0ADC  00CE               	movwf	___ftdiv@f2^(0+128)
 10010  0ADD  0842               	movf	(?___ftadd+1)^(0+128),w
 10011  0ADE  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10012  0ADF  0843               	movf	(?___ftadd+2)^(0+128),w
 10013  0AE0                     L5:	
 10014  0AE0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10015  0AE1  3000               	movlw	0
 10016  0AE2  00D1               	movwf	___ftdiv@f1^(0+128)
 10017  0AE3  3034               	movlw	52
 10018  0AE4  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10019  0AE5  3043               	movlw	67
 10020  0AE6  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10021  0AE7  319D  251F  3189   	fcall	___ftdiv
 10022  0AEA  0021               	movlb	1	; select bank1
 10023  0AEB  084E               	movf	?___ftdiv^(0+128),w
 10024  0AEC  0022               	movlb	2	; select bank2
 10025  0AED  00BA               	movwf	modTri@period^(0+256)
 10026  0AEE  0021               	movlb	1	; select bank1
 10027  0AEF  084F               	movf	(?___ftdiv+1)^(0+128),w
 10028  0AF0  0022               	movlb	2	; select bank2
 10029  0AF1  00BB               	movwf	(modTri@period+1)^(0+256)
 10030  0AF2  0021               	movlb	1	; select bank1
 10031  0AF3  0850               	movf	(?___ftdiv+2)^(0+128),w
 10032  0AF4  0022               	movlb	2	; select bank2
 10033  0AF5  00BC               	movwf	(modTri@period+2)^(0+256)
 10034                           
 10035                           ;modulation.c: 109: }
 10036                           ;modulation.c: 110: double tmpVal = (period*angle-shift) ;
 10037  0AF6  0837               	movf	modTri@shift^(0+256),w
 10038  0AF7  0021               	movlb	1	; select bank1
 10039  0AF8  00BE               	movwf	___ftneg@f1^(0+128)
 10040  0AF9  0022               	movlb	2	; select bank2
 10041  0AFA  0838               	movf	(modTri@shift+1)^(0+256),w
 10042  0AFB  0021               	movlb	1	; select bank1
 10043  0AFC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10044  0AFD  0022               	movlb	2	; select bank2
 10045  0AFE  0839               	movf	(modTri@shift+2)^(0+256),w
 10046  0AFF  0021               	movlb	1	; select bank1
 10047  0B00  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10048  0B01  31AD  2593  3189   	fcall	___ftneg
 10049  0B04  0021               	movlb	1	; select bank1
 10050  0B05  083E               	movf	?___ftneg^(0+128),w
 10051  0B06  00C1               	movwf	___ftadd@f1^(0+128)
 10052  0B07  083F               	movf	(?___ftneg+1)^(0+128),w
 10053  0B08  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10054  0B09  0840               	movf	(?___ftneg+2)^(0+128),w
 10055  0B0A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10056  0B0B  0022               	movlb	2	; select bank2
 10057  0B0C  082E               	movf	modTri@angle^(0+256),w
 10058  0B0D  0021               	movlb	1	; select bank1
 10059  0B0E  00AE               	movwf	___ftmul@f1^(0+128)
 10060  0B0F  0022               	movlb	2	; select bank2
 10061  0B10  082F               	movf	(modTri@angle+1)^(0+256),w
 10062  0B11  0021               	movlb	1	; select bank1
 10063  0B12  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10064  0B13  0022               	movlb	2	; select bank2
 10065  0B14  0830               	movf	(modTri@angle+2)^(0+256),w
 10066  0B15  0021               	movlb	1	; select bank1
 10067  0B16  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10068  0B17  0022               	movlb	2	; select bank2
 10069  0B18  083A               	movf	modTri@period^(0+256),w
 10070  0B19  0021               	movlb	1	; select bank1
 10071  0B1A  00B1               	movwf	___ftmul@f2^(0+128)
 10072  0B1B  0022               	movlb	2	; select bank2
 10073  0B1C  083B               	movf	(modTri@period+1)^(0+256),w
 10074  0B1D  0021               	movlb	1	; select bank1
 10075  0B1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10076  0B1F  0022               	movlb	2	; select bank2
 10077  0B20  083C               	movf	(modTri@period+2)^(0+256),w
 10078  0B21  0021               	movlb	1	; select bank1
 10079  0B22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10080  0B23  319E  267B  3189   	fcall	___ftmul
 10081  0B26  0021               	movlb	1	; select bank1
 10082  0B27  082E               	movf	?___ftmul^(0+128),w
 10083  0B28  00C4               	movwf	___ftadd@f2^(0+128)
 10084  0B29  082F               	movf	(?___ftmul+1)^(0+128),w
 10085  0B2A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10086  0B2B  0830               	movf	(?___ftmul+2)^(0+128),w
 10087  0B2C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10088  0B2D  3190  2031  3189   	fcall	___ftadd
 10089  0B30  0021               	movlb	1	; select bank1
 10090  0B31  0841               	movf	?___ftadd^(0+128),w
 10091  0B32  0022               	movlb	2	; select bank2
 10092  0B33  00BD               	movwf	modTri@tmpVal^(0+256)
 10093  0B34  0021               	movlb	1	; select bank1
 10094  0B35  0842               	movf	(?___ftadd+1)^(0+128),w
 10095  0B36  0022               	movlb	2	; select bank2
 10096  0B37  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10097  0B38  0021               	movlb	1	; select bank1
 10098  0B39  0843               	movf	(?___ftadd+2)^(0+128),w
 10099  0B3A  0022               	movlb	2	; select bank2
 10100  0B3B  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10101                           
 10102                           ;modulation.c: 111: if (tmpVal > 180) {
 10103  0B3C  3000               	movlw	0
 10104  0B3D  0021               	movlb	1	; select bank1
 10105  0B3E  00A0               	movwf	___ftge@ff1^(0+128)
 10106  0B3F  3034               	movlw	52
 10107  0B40  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10108  0B41  3043               	movlw	67
 10109  0B42  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10110  0B43  0022               	movlb	2	; select bank2
 10111  0B44  083D               	movf	modTri@tmpVal^(0+256),w
 10112  0B45  0021               	movlb	1	; select bank1
 10113  0B46  00A3               	movwf	___ftge@ff2^(0+128)
 10114  0B47  0022               	movlb	2	; select bank2
 10115  0B48  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10116  0B49  0021               	movlb	1	; select bank1
 10117  0B4A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10118  0B4B  0022               	movlb	2	; select bank2
 10119  0B4C  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10120  0B4D  0021               	movlb	1	; select bank1
 10121  0B4E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10122  0B4F  31A1  217B  3189   	fcall	___ftge
 10123  0B52  1803               	btfsc	3,0
 10124  0B53  2B67               	goto	l8590
 10125                           
 10126                           ;modulation.c: 112: tmpVal = tmpVal - 270.0;
 10127  0B54  3000               	movlw	0
 10128  0B55  0021               	movlb	1	; select bank1
 10129  0B56  00C1               	movwf	___ftadd@f1^(0+128)
 10130  0B57  3087               	movlw	135
 10131  0B58  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10132  0B59  30C3               	movlw	195
 10133  0B5A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10134  0B5B  0022               	movlb	2	; select bank2
 10135  0B5C  083D               	movf	modTri@tmpVal^(0+256),w
 10136  0B5D  0021               	movlb	1	; select bank1
 10137  0B5E  00C4               	movwf	___ftadd@f2^(0+128)
 10138  0B5F  0022               	movlb	2	; select bank2
 10139  0B60  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10140  0B61  0021               	movlb	1	; select bank1
 10141  0B62  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10142  0B63  0022               	movlb	2	; select bank2
 10143  0B64  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10144  0B65  0021               	movlb	1	; select bank1
 10145  0B66  2B83               	goto	L6
 10146  0B67                     l8590:	
 10147                           ;modulation.c: 113: } else {
 10148                           
 10149                           
 10150                           ;modulation.c: 114: tmpVal = 90 - tmpVal;
 10151  0B67  3000               	movlw	0
 10152  0B68  0021               	movlb	1	; select bank1
 10153  0B69  00C1               	movwf	___ftadd@f1^(0+128)
 10154  0B6A  30B4               	movlw	180
 10155  0B6B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10156  0B6C  3042               	movlw	66
 10157  0B6D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10158  0B6E  0022               	movlb	2	; select bank2
 10159  0B6F  083D               	movf	modTri@tmpVal^(0+256),w
 10160  0B70  0021               	movlb	1	; select bank1
 10161  0B71  00BE               	movwf	___ftneg@f1^(0+128)
 10162  0B72  0022               	movlb	2	; select bank2
 10163  0B73  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10164  0B74  0021               	movlb	1	; select bank1
 10165  0B75  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10166  0B76  0022               	movlb	2	; select bank2
 10167  0B77  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10168  0B78  0021               	movlb	1	; select bank1
 10169  0B79  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10170  0B7A  31AD  2593  3189   	fcall	___ftneg
 10171  0B7D  0021               	movlb	1	; select bank1
 10172  0B7E  083E               	movf	?___ftneg^(0+128),w
 10173  0B7F  00C4               	movwf	___ftadd@f2^(0+128)
 10174  0B80  083F               	movf	(?___ftneg+1)^(0+128),w
 10175  0B81  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10176  0B82  0840               	movf	(?___ftneg+2)^(0+128),w
 10177  0B83                     L6:	
 10178  0B83  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10179  0B84  3190  2031  3189   	fcall	___ftadd
 10180  0B87  0021               	movlb	1	; select bank1
 10181  0B88  0841               	movf	?___ftadd^(0+128),w
 10182  0B89  0022               	movlb	2	; select bank2
 10183  0B8A  00BD               	movwf	modTri@tmpVal^(0+256)
 10184  0B8B  0021               	movlb	1	; select bank1
 10185  0B8C  0842               	movf	(?___ftadd+1)^(0+128),w
 10186  0B8D  0022               	movlb	2	; select bank2
 10187  0B8E  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10188  0B8F  0021               	movlb	1	; select bank1
 10189  0B90  0843               	movf	(?___ftadd+2)^(0+128),w
 10190  0B91  0022               	movlb	2	; select bank2
 10191  0B92  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10192                           
 10193                           ;modulation.c: 115: }
 10194                           ;modulation.c: 116: tmpVal = tmpVal * -10/9;
 10195  0B93  3000               	movlw	0
 10196  0B94  0021               	movlb	1	; select bank1
 10197  0B95  00CE               	movwf	___ftdiv@f2^(0+128)
 10198  0B96  3010               	movlw	16
 10199  0B97  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10200  0B98  3041               	movlw	65
 10201  0B99  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10202  0B9A  3000               	movlw	0
 10203  0B9B  00AE               	movwf	___ftmul@f1^(0+128)
 10204  0B9C  3020               	movlw	32
 10205  0B9D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10206  0B9E  30C1               	movlw	193
 10207  0B9F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10208  0BA0  0022               	movlb	2	; select bank2
 10209  0BA1  083D               	movf	modTri@tmpVal^(0+256),w
 10210  0BA2  0021               	movlb	1	; select bank1
 10211  0BA3  00B1               	movwf	___ftmul@f2^(0+128)
 10212  0BA4  0022               	movlb	2	; select bank2
 10213  0BA5  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10214  0BA6  0021               	movlb	1	; select bank1
 10215  0BA7  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10216  0BA8  0022               	movlb	2	; select bank2
 10217  0BA9  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10218  0BAA  0021               	movlb	1	; select bank1
 10219  0BAB  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10220  0BAC  319E  267B  3189   	fcall	___ftmul
 10221  0BAF  0021               	movlb	1	; select bank1
 10222  0BB0  082E               	movf	?___ftmul^(0+128),w
 10223  0BB1  00D1               	movwf	___ftdiv@f1^(0+128)
 10224  0BB2  082F               	movf	(?___ftmul+1)^(0+128),w
 10225  0BB3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10226  0BB4  0830               	movf	(?___ftmul+2)^(0+128),w
 10227  0BB5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10228  0BB6  319D  251F  3189   	fcall	___ftdiv
 10229  0BB9  0021               	movlb	1	; select bank1
 10230  0BBA  084E               	movf	?___ftdiv^(0+128),w
 10231  0BBB  0022               	movlb	2	; select bank2
 10232  0BBC  00BD               	movwf	modTri@tmpVal^(0+256)
 10233  0BBD  0021               	movlb	1	; select bank1
 10234  0BBE  084F               	movf	(?___ftdiv+1)^(0+128),w
 10235  0BBF  0022               	movlb	2	; select bank2
 10236  0BC0  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10237  0BC1  0021               	movlb	1	; select bank1
 10238  0BC2  0850               	movf	(?___ftdiv+2)^(0+128),w
 10239  0BC3  0022               	movlb	2	; select bank2
 10240  0BC4  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10241                           
 10242                           ;modulation.c: 118: return (int)(tmpVal);
 10243  0BC5  083D               	movf	modTri@tmpVal^(0+256),w
 10244  0BC6  00A0               	movwf	___fttol@f1^(0+256)
 10245  0BC7  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10246  0BC8  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10247  0BC9  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10248  0BCA  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10249  0BCB  319A  225A         	fcall	___fttol
 10250  0BCD  0022               	movlb	2	; select bank2
 10251  0BCE  0821               	movf	(?___fttol^(0+256)+1),w
 10252  0BCF  00AF               	movwf	(?_modTri+1)^(0+256)
 10253  0BD0  0820               	movf	?___fttol^(0+256),w
 10254  0BD1  00AE               	movwf	?_modTri^(0+256)
 10255  0BD2  0008               	return
 10256  0BD3                     __end_of_modTri:	
 10257                           
 10258                           	psect	text18
 10259  21F4                     __ptext18:	
 10260 ;; *************** function _modSquare *****************
 10261 ;; Defined at:
 10262 ;;		line 142 in file "modulation.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;  angle           3   40[BANK2 ] int 
 10265 ;;  inflection      3   43[BANK2 ] int 
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;  tmpVal          2   46[BANK2 ] int 
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  2   40[BANK2 ] int 
 10270 ;; Registers used:
 10271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10277 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10278 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10280 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10281 ;;Total ram usage:        8 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    6
 10284 ;; This function calls:
 10285 ;;		___ftge
 10286 ;;		_modCos
 10287 ;; This function is called by:
 10288 ;;		_updateModulationArray
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           
 10293                           ;psect for function _modSquare
 10294  21F4                     _modSquare:	
 10295                           
 10296                           ;modulation.c: 143: int tmpVal = modCos(angle, inflection);
 10297                           
 10298                           ;incstack = 0
 10299                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10300  21F4  0022               	movlb	2	; select bank2
 10301  21F5  0848               	movf	modSquare@angle^(0+256),w
 10302  21F6  00B4               	movwf	modCos@angle^(0+256)
 10303  21F7  0849               	movf	(modSquare@angle+1)^(0+256),w
 10304  21F8  00B5               	movwf	(modCos@angle+1)^(0+256)
 10305  21F9  084A               	movf	(modSquare@angle+2)^(0+256),w
 10306  21FA  00B6               	movwf	(modCos@angle+2)^(0+256)
 10307  21FB  084B               	movf	modSquare@inflection^(0+256),w
 10308  21FC  00B7               	movwf	modCos@inflection^(0+256)
 10309  21FD  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10310  21FE  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10311  21FF  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10312  2200  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10313  2201  3196  2654  31A1   	fcall	_modCos
 10314  2204  0022               	movlb	2	; select bank2
 10315  2205  0835               	movf	(?_modCos+1)^(0+256),w
 10316  2206  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10317  2207  0834               	movf	?_modCos^(0+256),w
 10318  2208  00CE               	movwf	modSquare@tmpVal^(0+256)
 10319                           
 10320                           ;modulation.c: 144: return (angle <= inflection) ? -100 : 100;
 10321  2209  084B               	movf	modSquare@inflection^(0+256),w
 10322  220A  0021               	movlb	1	; select bank1
 10323  220B  00A0               	movwf	___ftge@ff1^(0+128)
 10324  220C  0022               	movlb	2	; select bank2
 10325  220D  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10326  220E  0021               	movlb	1	; select bank1
 10327  220F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10328  2210  0022               	movlb	2	; select bank2
 10329  2211  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10330  2212  0021               	movlb	1	; select bank1
 10331  2213  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10332  2214  0022               	movlb	2	; select bank2
 10333  2215  0848               	movf	modSquare@angle^(0+256),w
 10334  2216  0021               	movlb	1	; select bank1
 10335  2217  00A3               	movwf	___ftge@ff2^(0+128)
 10336  2218  0022               	movlb	2	; select bank2
 10337  2219  0849               	movf	(modSquare@angle+1)^(0+256),w
 10338  221A  0021               	movlb	1	; select bank1
 10339  221B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10340  221C  0022               	movlb	2	; select bank2
 10341  221D  084A               	movf	(modSquare@angle+2)^(0+256),w
 10342  221E  0021               	movlb	1	; select bank1
 10343  221F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10344  2220  31A1  217B  31A1   	fcall	___ftge
 10345  2223  1803               	btfsc	3,0
 10346  2224  2A2B               	goto	l8600
 10347  2225  3064               	movlw	100
 10348  2226  0022               	movlb	2	; select bank2
 10349  2227  00C8               	movwf	?_modSquare^(0+256)
 10350  2228  3000               	movlw	0
 10351  2229  00C9               	movwf	(?_modSquare^(0+256)+1)
 10352  222A  0008               	return
 10353  222B                     l8600:	
 10354  222B  309C               	movlw	156
 10355  222C  0022               	movlb	2	; select bank2
 10356  222D  00C8               	movwf	?_modSquare^(0+256)
 10357  222E  30FF               	movlw	255
 10358  222F  00C9               	movwf	(?_modSquare^(0+256)+1)
 10359  2230  0008               	return
 10360  2231                     __end_of_modSquare:	
 10361                           
 10362                           	psect	text19
 10363  1654                     __ptext19:	
 10364 ;; *************** function _modCos *****************
 10365 ;; Defined at:
 10366 ;;		line 83 in file "modulation.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  angle           3   20[BANK2 ] int 
 10369 ;;  inflection      3   23[BANK2 ] int 
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;  tmpVal          3   37[BANK2 ] int 
 10372 ;;  period          3   34[BANK2 ] int 
 10373 ;;  shift           3   31[BANK2 ] int 
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  2   20[BANK2 ] int 
 10376 ;; Registers used:
 10377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10383 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10384 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10385 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10386 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10387 ;;Total ram usage:       20 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    5
 10390 ;; This function calls:
 10391 ;;		___ftadd
 10392 ;;		___ftdiv
 10393 ;;		___ftge
 10394 ;;		___ftmul
 10395 ;;		___ftneg
 10396 ;;		___fttol
 10397 ;;		___wmul
 10398 ;; This function is called by:
 10399 ;;		_updateModulationArray
 10400 ;;		_modSquare
 10401 ;; This function uses a non-reentrant model
 10402 ;;
 10403                           
 10404                           
 10405                           ;psect for function _modCos
 10406  1654                     _modCos:	
 10407                           
 10408                           ;modulation.c: 84: double period = 1.0;
 10409                           
 10410                           ;incstack = 0
 10411                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10412  1654  3000               	movlw	0
 10413  1655  0022               	movlb	2	; select bank2
 10414  1656  00C2               	movwf	modCos@period^(0+256)
 10415  1657  3080               	movlw	128
 10416  1658  00C3               	movwf	(modCos@period+1)^(0+256)
 10417  1659  303F               	movlw	63
 10418  165A  00C4               	movwf	(modCos@period+2)^(0+256)
 10419                           
 10420                           ;modulation.c: 85: double shift = 0.0;
 10421  165B  3000               	movlw	0
 10422  165C  00BF               	movwf	modCos@shift^(0+256)
 10423  165D  3000               	movlw	0
 10424  165E  00C0               	movwf	(modCos@shift+1)^(0+256)
 10425  165F  3000               	movlw	0
 10426  1660  00C1               	movwf	(modCos@shift+2)^(0+256)
 10427                           
 10428                           ;modulation.c: 87: if(angle<=inflection) {
 10429  1661  0837               	movf	modCos@inflection^(0+256),w
 10430  1662  0021               	movlb	1	; select bank1
 10431  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10432  1664  0022               	movlb	2	; select bank2
 10433  1665  0838               	movf	(modCos@inflection+1)^(0+256),w
 10434  1666  0021               	movlb	1	; select bank1
 10435  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10436  1668  0022               	movlb	2	; select bank2
 10437  1669  0839               	movf	(modCos@inflection+2)^(0+256),w
 10438  166A  0021               	movlb	1	; select bank1
 10439  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10440  166C  0022               	movlb	2	; select bank2
 10441  166D  0834               	movf	modCos@angle^(0+256),w
 10442  166E  0021               	movlb	1	; select bank1
 10443  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10444  1670  0022               	movlb	2	; select bank2
 10445  1671  0835               	movf	(modCos@angle+1)^(0+256),w
 10446  1672  0021               	movlb	1	; select bank1
 10447  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10448  1674  0022               	movlb	2	; select bank2
 10449  1675  0836               	movf	(modCos@angle+2)^(0+256),w
 10450  1676  0021               	movlb	1	; select bank1
 10451  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10452  1678  31A1  217B  3196   	fcall	___ftge
 10453  167B  1C03               	btfss	3,0
 10454  167C  2E89               	goto	l8256
 10455                           
 10456                           ;modulation.c: 88: period = 180.0/inflection;
 10457  167D  0022               	movlb	2	; select bank2
 10458  167E  0837               	movf	modCos@inflection^(0+256),w
 10459  167F  0021               	movlb	1	; select bank1
 10460  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10461  1681  0022               	movlb	2	; select bank2
 10462  1682  0838               	movf	(modCos@inflection+1)^(0+256),w
 10463  1683  0021               	movlb	1	; select bank1
 10464  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10465  1685  0022               	movlb	2	; select bank2
 10466  1686  0839               	movf	(modCos@inflection+2)^(0+256),w
 10467  1687  0021               	movlb	1	; select bank1
 10468  1688  2F44               	goto	L7
 10469  1689                     l8256:	
 10470                           ;modulation.c: 89: } else {
 10471                           
 10472                           
 10473                           ;modulation.c: 90: shift = -(360-inflection*2)*(180/(360-inflection));
 10474  1689  0022               	movlb	2	; select bank2
 10475  168A  0837               	movf	modCos@inflection^(0+256),w
 10476  168B  0021               	movlb	1	; select bank1
 10477  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10478  168D  0022               	movlb	2	; select bank2
 10479  168E  0838               	movf	(modCos@inflection+1)^(0+256),w
 10480  168F  0021               	movlb	1	; select bank1
 10481  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10482  1691  0022               	movlb	2	; select bank2
 10483  1692  0839               	movf	(modCos@inflection+2)^(0+256),w
 10484  1693  0021               	movlb	1	; select bank1
 10485  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10486  1695  3000               	movlw	0
 10487  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10488  1697  3000               	movlw	0
 10489  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10490  1699  3040               	movlw	64
 10491  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10492  169B  319E  267B  3196   	fcall	___ftmul
 10493  169E  0021               	movlb	1	; select bank1
 10494  169F  082E               	movf	?___ftmul^(0+128),w
 10495  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10496  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10497  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10498  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10499  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10500  16A5  31AD  2593  3196   	fcall	___ftneg
 10501  16A8  0021               	movlb	1	; select bank1
 10502  16A9  083E               	movf	?___ftneg^(0+128),w
 10503  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10504  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10505  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10506  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10507  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10508  16AF  3000               	movlw	0
 10509  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10510  16B1  30B4               	movlw	180
 10511  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10512  16B3  3043               	movlw	67
 10513  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10514  16B5  3190  2031  3196   	fcall	___ftadd
 10515  16B8  0021               	movlb	1	; select bank1
 10516  16B9  0841               	movf	?___ftadd^(0+128),w
 10517  16BA  0022               	movlb	2	; select bank2
 10518  16BB  00BC               	movwf	_modCos$2855^(0+256)
 10519  16BC  0021               	movlb	1	; select bank1
 10520  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10521  16BE  0022               	movlb	2	; select bank2
 10522  16BF  00BD               	movwf	(_modCos$2855+1)^(0+256)
 10523  16C0  0021               	movlb	1	; select bank1
 10524  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10525  16C2  0022               	movlb	2	; select bank2
 10526  16C3  00BE               	movwf	(_modCos$2855+2)^(0+256)
 10527                           
 10528                           ;modulation.c: 90: shift = -(360-inflection*2)*(180/(360-inflection));
 10529  16C4  083C               	movf	_modCos$2855^(0+256),w
 10530  16C5  0021               	movlb	1	; select bank1
 10531  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10532  16C7  0022               	movlb	2	; select bank2
 10533  16C8  083D               	movf	(_modCos$2855+1)^(0+256),w
 10534  16C9  0021               	movlb	1	; select bank1
 10535  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10536  16CB  0022               	movlb	2	; select bank2
 10537  16CC  083E               	movf	(_modCos$2855+2)^(0+256),w
 10538  16CD  0021               	movlb	1	; select bank1
 10539  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10540  16CF  31AD  2593  3196   	fcall	___ftneg
 10541  16D2  0021               	movlb	1	; select bank1
 10542  16D3  083E               	movf	?___ftneg^(0+128),w
 10543  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10544  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10545  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10546  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10547  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10548  16D9  3000               	movlw	0
 10549  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10550  16DB  30B4               	movlw	180
 10551  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10552  16DD  3043               	movlw	67
 10553  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10554  16DF  0022               	movlb	2	; select bank2
 10555  16E0  0837               	movf	modCos@inflection^(0+256),w
 10556  16E1  0021               	movlb	1	; select bank1
 10557  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10558  16E3  0022               	movlb	2	; select bank2
 10559  16E4  0838               	movf	(modCos@inflection+1)^(0+256),w
 10560  16E5  0021               	movlb	1	; select bank1
 10561  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10562  16E7  0022               	movlb	2	; select bank2
 10563  16E8  0839               	movf	(modCos@inflection+2)^(0+256),w
 10564  16E9  0021               	movlb	1	; select bank1
 10565  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10566  16EB  31AD  2593  3196   	fcall	___ftneg
 10567  16EE  0021               	movlb	1	; select bank1
 10568  16EF  083E               	movf	?___ftneg^(0+128),w
 10569  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10570  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10571  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10572  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10573  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10574  16F5  3190  2031  3196   	fcall	___ftadd
 10575  16F8  0021               	movlb	1	; select bank1
 10576  16F9  0841               	movf	?___ftadd^(0+128),w
 10577  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10578  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10579  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10580  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10581  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10582  16FF  3000               	movlw	0
 10583  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10584  1701  3034               	movlw	52
 10585  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10586  1703  3043               	movlw	67
 10587  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10588  1705  319D  251F  3196   	fcall	___ftdiv
 10589  1708  0021               	movlb	1	; select bank1
 10590  1709  084E               	movf	?___ftdiv^(0+128),w
 10591  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10592  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10593  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10594  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10595  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10596  170F  319E  267B  3196   	fcall	___ftmul
 10597  1712  0021               	movlb	1	; select bank1
 10598  1713  082E               	movf	?___ftmul^(0+128),w
 10599  1714  0022               	movlb	2	; select bank2
 10600  1715  00BF               	movwf	modCos@shift^(0+256)
 10601  1716  0021               	movlb	1	; select bank1
 10602  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10603  1718  0022               	movlb	2	; select bank2
 10604  1719  00C0               	movwf	(modCos@shift+1)^(0+256)
 10605  171A  0021               	movlb	1	; select bank1
 10606  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10607  171C  0022               	movlb	2	; select bank2
 10608  171D  00C1               	movwf	(modCos@shift+2)^(0+256)
 10609                           
 10610                           ;modulation.c: 91: period = 180/(360-inflection);
 10611  171E  3000               	movlw	0
 10612  171F  0021               	movlb	1	; select bank1
 10613  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10614  1721  30B4               	movlw	180
 10615  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10616  1723  3043               	movlw	67
 10617  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10618  1725  0022               	movlb	2	; select bank2
 10619  1726  0837               	movf	modCos@inflection^(0+256),w
 10620  1727  0021               	movlb	1	; select bank1
 10621  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10622  1729  0022               	movlb	2	; select bank2
 10623  172A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10624  172B  0021               	movlb	1	; select bank1
 10625  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10626  172D  0022               	movlb	2	; select bank2
 10627  172E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10628  172F  0021               	movlb	1	; select bank1
 10629  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10630  1731  31AD  2593  3196   	fcall	___ftneg
 10631  1734  0021               	movlb	1	; select bank1
 10632  1735  083E               	movf	?___ftneg^(0+128),w
 10633  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10634  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10635  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10636  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10637  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10638  173B  3190  2031  3196   	fcall	___ftadd
 10639  173E  0021               	movlb	1	; select bank1
 10640  173F  0841               	movf	?___ftadd^(0+128),w
 10641  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10642  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10643  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10644  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10645  1744                     L7:	
 10646  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10647  1745  3000               	movlw	0
 10648  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10649  1747  3034               	movlw	52
 10650  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10651  1749  3043               	movlw	67
 10652  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10653  174B  319D  251F  3196   	fcall	___ftdiv
 10654  174E  0021               	movlb	1	; select bank1
 10655  174F  084E               	movf	?___ftdiv^(0+128),w
 10656  1750  0022               	movlb	2	; select bank2
 10657  1751  00C2               	movwf	modCos@period^(0+256)
 10658  1752  0021               	movlb	1	; select bank1
 10659  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10660  1754  0022               	movlb	2	; select bank2
 10661  1755  00C3               	movwf	(modCos@period+1)^(0+256)
 10662  1756  0021               	movlb	1	; select bank1
 10663  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10664  1758  0022               	movlb	2	; select bank2
 10665  1759  00C4               	movwf	(modCos@period+2)^(0+256)
 10666                           
 10667                           ;modulation.c: 93: }
 10668                           ;modulation.c: 94: double tmpVal = (period*angle-shift) /3;
 10669  175A  3000               	movlw	0
 10670  175B  0021               	movlb	1	; select bank1
 10671  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10672  175D  3040               	movlw	64
 10673  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10674  175F  3040               	movlw	64
 10675  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10676  1761  0022               	movlb	2	; select bank2
 10677  1762  083F               	movf	modCos@shift^(0+256),w
 10678  1763  0021               	movlb	1	; select bank1
 10679  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10680  1765  0022               	movlb	2	; select bank2
 10681  1766  0840               	movf	(modCos@shift+1)^(0+256),w
 10682  1767  0021               	movlb	1	; select bank1
 10683  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10684  1769  0022               	movlb	2	; select bank2
 10685  176A  0841               	movf	(modCos@shift+2)^(0+256),w
 10686  176B  0021               	movlb	1	; select bank1
 10687  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10688  176D  31AD  2593  3196   	fcall	___ftneg
 10689  1770  0021               	movlb	1	; select bank1
 10690  1771  083E               	movf	?___ftneg^(0+128),w
 10691  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10692  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10693  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10694  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10695  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10696  1777  0022               	movlb	2	; select bank2
 10697  1778  0834               	movf	modCos@angle^(0+256),w
 10698  1779  0021               	movlb	1	; select bank1
 10699  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10700  177B  0022               	movlb	2	; select bank2
 10701  177C  0835               	movf	(modCos@angle+1)^(0+256),w
 10702  177D  0021               	movlb	1	; select bank1
 10703  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10704  177F  0022               	movlb	2	; select bank2
 10705  1780  0836               	movf	(modCos@angle+2)^(0+256),w
 10706  1781  0021               	movlb	1	; select bank1
 10707  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10708  1783  0022               	movlb	2	; select bank2
 10709  1784  0842               	movf	modCos@period^(0+256),w
 10710  1785  0021               	movlb	1	; select bank1
 10711  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10712  1787  0022               	movlb	2	; select bank2
 10713  1788  0843               	movf	(modCos@period+1)^(0+256),w
 10714  1789  0021               	movlb	1	; select bank1
 10715  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10716  178B  0022               	movlb	2	; select bank2
 10717  178C  0844               	movf	(modCos@period+2)^(0+256),w
 10718  178D  0021               	movlb	1	; select bank1
 10719  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10720  178F  319E  267B  3196   	fcall	___ftmul
 10721  1792  0021               	movlb	1	; select bank1
 10722  1793  082E               	movf	?___ftmul^(0+128),w
 10723  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10724  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10725  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10726  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10727  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10728  1799  3190  2031  3196   	fcall	___ftadd
 10729  179C  0021               	movlb	1	; select bank1
 10730  179D  0841               	movf	?___ftadd^(0+128),w
 10731  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10732  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10733  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10734  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10735  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10736  17A3  319D  251F  3196   	fcall	___ftdiv
 10737  17A6  0021               	movlb	1	; select bank1
 10738  17A7  084E               	movf	?___ftdiv^(0+128),w
 10739  17A8  0022               	movlb	2	; select bank2
 10740  17A9  00C5               	movwf	modCos@tmpVal^(0+256)
 10741  17AA  0021               	movlb	1	; select bank1
 10742  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10743  17AC  0022               	movlb	2	; select bank2
 10744  17AD  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10745  17AE  0021               	movlb	1	; select bank1
 10746  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10747  17B0  0022               	movlb	2	; select bank2
 10748  17B1  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10749                           
 10750                           ;modulation.c: 95: tmpVal = cosArray[(int)(tmpVal)];
 10751  17B2  0845               	movf	modCos@tmpVal^(0+256),w
 10752  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10753  17B4  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10754  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10755  17B6  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10756  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10757  17B8  319A  225A  3196   	fcall	___fttol
 10758  17BB  0022               	movlb	2	; select bank2
 10759  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10760  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10761  17BE  0820               	movf	?___fttol^(0+256),w
 10762  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10763  17C0  3003               	movlw	3
 10764  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10765  17C2  3000               	movlw	0
 10766  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10767  17C4  31AE  264E  3196   	fcall	___wmul
 10768  17C7  3082               	movlw	130
 10769  17C8  0022               	movlb	2	; select bank2
 10770  17C9  00BA               	movwf	??_modCos^(0+256)
 10771  17CA  3024               	movlw	36
 10772  17CB  00BB               	movwf	(??_modCos^(0+256)+1)
 10773  17CC  082E               	movf	?___wmul^(0+256),w
 10774  17CD  073A               	addwf	??_modCos^(0+256),w
 10775  17CE  0086               	movwf	6
 10776  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10777  17D0  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 10778  17D1  0087               	movwf	7
 10779  17D2  3F40               	moviw [0]fsr1
 10780  17D3  00C5               	movwf	modCos@tmpVal^(0+256)
 10781  17D4  3F41               	moviw [1]fsr1
 10782  17D5  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10783  17D6  3F42               	moviw [2]fsr1
 10784  17D7  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10785                           
 10786                           ;modulation.c: 96: return (int)(-100.0 * tmpVal);
 10787  17D8  0845               	movf	modCos@tmpVal^(0+256),w
 10788  17D9  0021               	movlb	1	; select bank1
 10789  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10790  17DB  0022               	movlb	2	; select bank2
 10791  17DC  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10792  17DD  0021               	movlb	1	; select bank1
 10793  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10794  17DF  0022               	movlb	2	; select bank2
 10795  17E0  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10796  17E1  0021               	movlb	1	; select bank1
 10797  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10798  17E3  3000               	movlw	0
 10799  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10800  17E5  30C8               	movlw	200
 10801  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10802  17E7  30C2               	movlw	194
 10803  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10804  17E9  319E  267B  3196   	fcall	___ftmul
 10805  17EC  0021               	movlb	1	; select bank1
 10806  17ED  082E               	movf	?___ftmul^(0+128),w
 10807  17EE  0022               	movlb	2	; select bank2
 10808  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10809  17F0  0021               	movlb	1	; select bank1
 10810  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10811  17F2  0022               	movlb	2	; select bank2
 10812  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10813  17F4  0021               	movlb	1	; select bank1
 10814  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10815  17F6  0022               	movlb	2	; select bank2
 10816  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10817  17F8  319A  225A         	fcall	___fttol
 10818  17FA  0022               	movlb	2	; select bank2
 10819  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10820  17FC  00B5               	movwf	(?_modCos+1)^(0+256)
 10821  17FD  0820               	movf	?___fttol^(0+256),w
 10822  17FE  00B4               	movwf	?_modCos^(0+256)
 10823  17FF  0008               	return
 10824  1800                     __end_of_modCos:	
 10825                           
 10826                           	psect	text20
 10827  2E86                     __ptext20:	
 10828 ;; *************** function _modSawRev *****************
 10829 ;; Defined at:
 10830 ;;		line 137 in file "modulation.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  angle           3   34[BANK2 ] int 
 10833 ;;  inflection      3   37[BANK2 ] int 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  2   34[BANK2 ] int 
 10838 ;; Registers used:
 10839 ;;		wreg, status,2, status,0, pclath, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10845 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10847 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10848 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10849 ;;Total ram usage:        8 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    6
 10852 ;; This function calls:
 10853 ;;		_modSaw
 10854 ;; This function is called by:
 10855 ;;		_updateModulationArray
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _modSawRev
 10861  2E86                     _modSawRev:	
 10862                           
 10863                           ;modulation.c: 138: return -1 * modSaw(angle, inflection);
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10867  2E86  0022               	movlb	2	; select bank2
 10868  2E87  0842               	movf	modSawRev@angle^(0+256),w
 10869  2E88  00AE               	movwf	modSaw@angle^(0+256)
 10870  2E89  0843               	movf	(modSawRev@angle+1)^(0+256),w
 10871  2E8A  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10872  2E8B  0844               	movf	(modSawRev@angle+2)^(0+256),w
 10873  2E8C  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10874  2E8D  0845               	movf	modSawRev@inflection^(0+256),w
 10875  2E8E  00B1               	movwf	modSaw@inflection^(0+256)
 10876  2E8F  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 10877  2E90  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10878  2E91  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 10879  2E92  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10880  2E93  3194  24BC         	fcall	_modSaw
 10881  2E95  0022               	movlb	2	; select bank2
 10882  2E96  092E               	comf	?_modSaw^(0+256),w
 10883  2E97  00C8               	movwf	??_modSawRev^(0+256)
 10884  2E98  092F               	comf	(?_modSaw+1)^(0+256),w
 10885  2E99  00C9               	movwf	(??_modSawRev^(0+256)+1)
 10886  2E9A  0AC8               	incf	??_modSawRev^(0+256),f
 10887  2E9B  1903               	skipnz
 10888  2E9C  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 10889  2E9D  0848               	movf	??_modSawRev^(0+256),w
 10890  2E9E  00C2               	movwf	?_modSawRev^(0+256)
 10891  2E9F  0849               	movf	(??_modSawRev+1)^(0+256),w
 10892  2EA0  00C3               	movwf	(?_modSawRev+1)^(0+256)
 10893  2EA1  0008               	return
 10894  2EA2                     __end_of_modSawRev:	
 10895                           
 10896                           	psect	text21
 10897  14BC                     __ptext21:	
 10898 ;; *************** function _modSaw *****************
 10899 ;; Defined at:
 10900 ;;		line 122 in file "modulation.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;  angle           3   14[BANK2 ] int 
 10903 ;;  inflection      3   17[BANK2 ] int 
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;  period          3   31[BANK2 ] int 
 10906 ;;  shift           3   28[BANK2 ] int 
 10907 ;;  mod             2   26[BANK2 ] int 
 10908 ;; Return value:  Size  Location     Type
 10909 ;;                  2   14[BANK2 ] int 
 10910 ;; Registers used:
 10911 ;;		wreg, status,2, status,0, pclath, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10917 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10918 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10920 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10921 ;;Total ram usage:       20 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    5
 10924 ;; This function calls:
 10925 ;;		___ftadd
 10926 ;;		___ftdiv
 10927 ;;		___ftge
 10928 ;;		___ftmul
 10929 ;;		___ftneg
 10930 ;;		___fttol
 10931 ;; This function is called by:
 10932 ;;		_updateModulationArray
 10933 ;;		_modSawRev
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           
 10938                           ;psect for function _modSaw
 10939  14BC                     _modSaw:	
 10940                           
 10941                           ;modulation.c: 123: double period = 1.0;
 10942                           
 10943                           ;incstack = 0
 10944                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10945  14BC  3000               	movlw	0
 10946  14BD  0022               	movlb	2	; select bank2
 10947  14BE  00BF               	movwf	modSaw@period^(0+256)
 10948  14BF  3080               	movlw	128
 10949  14C0  00C0               	movwf	(modSaw@period+1)^(0+256)
 10950  14C1  303F               	movlw	63
 10951  14C2  00C1               	movwf	(modSaw@period+2)^(0+256)
 10952                           
 10953                           ;modulation.c: 124: double shift = 0;
 10954  14C3  3000               	movlw	0
 10955  14C4  00BC               	movwf	modSaw@shift^(0+256)
 10956  14C5  3000               	movlw	0
 10957  14C6  00BD               	movwf	(modSaw@shift+1)^(0+256)
 10958  14C7  3000               	movlw	0
 10959  14C8  00BE               	movwf	(modSaw@shift+2)^(0+256)
 10960                           
 10961                           ;modulation.c: 126: if(angle<=inflection) {
 10962  14C9  0831               	movf	modSaw@inflection^(0+256),w
 10963  14CA  0021               	movlb	1	; select bank1
 10964  14CB  00A0               	movwf	___ftge@ff1^(0+128)
 10965  14CC  0022               	movlb	2	; select bank2
 10966  14CD  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10967  14CE  0021               	movlb	1	; select bank1
 10968  14CF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10969  14D0  0022               	movlb	2	; select bank2
 10970  14D1  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10971  14D2  0021               	movlb	1	; select bank1
 10972  14D3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10973  14D4  0022               	movlb	2	; select bank2
 10974  14D5  082E               	movf	modSaw@angle^(0+256),w
 10975  14D6  0021               	movlb	1	; select bank1
 10976  14D7  00A3               	movwf	___ftge@ff2^(0+128)
 10977  14D8  0022               	movlb	2	; select bank2
 10978  14D9  082F               	movf	(modSaw@angle+1)^(0+256),w
 10979  14DA  0021               	movlb	1	; select bank1
 10980  14DB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10981  14DC  0022               	movlb	2	; select bank2
 10982  14DD  0830               	movf	(modSaw@angle+2)^(0+256),w
 10983  14DE  0021               	movlb	1	; select bank1
 10984  14DF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10985  14E0  31A1  217B  3194   	fcall	___ftge
 10986  14E3  1C03               	btfss	3,0
 10987  14E4  2CF1               	goto	l8270
 10988                           
 10989                           ;modulation.c: 127: period = 180.0/inflection;
 10990  14E5  0022               	movlb	2	; select bank2
 10991  14E6  0831               	movf	modSaw@inflection^(0+256),w
 10992  14E7  0021               	movlb	1	; select bank1
 10993  14E8  00CE               	movwf	___ftdiv@f2^(0+128)
 10994  14E9  0022               	movlb	2	; select bank2
 10995  14EA  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10996  14EB  0021               	movlb	1	; select bank1
 10997  14EC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10998  14ED  0022               	movlb	2	; select bank2
 10999  14EE  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11000  14EF  0021               	movlb	1	; select bank1
 11001  14F0  2DAC               	goto	L8
 11002  14F1                     l8270:	
 11003                           ;modulation.c: 128: } else {
 11004                           
 11005                           
 11006                           ;modulation.c: 129: shift = -(360-inflection*2)*(180/(360-inflection));
 11007  14F1  0022               	movlb	2	; select bank2
 11008  14F2  0831               	movf	modSaw@inflection^(0+256),w
 11009  14F3  0021               	movlb	1	; select bank1
 11010  14F4  00B1               	movwf	___ftmul@f2^(0+128)
 11011  14F5  0022               	movlb	2	; select bank2
 11012  14F6  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11013  14F7  0021               	movlb	1	; select bank1
 11014  14F8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11015  14F9  0022               	movlb	2	; select bank2
 11016  14FA  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11017  14FB  0021               	movlb	1	; select bank1
 11018  14FC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11019  14FD  3000               	movlw	0
 11020  14FE  00AE               	movwf	___ftmul@f1^(0+128)
 11021  14FF  3000               	movlw	0
 11022  1500  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11023  1501  3040               	movlw	64
 11024  1502  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11025  1503  319E  267B  3194   	fcall	___ftmul
 11026  1506  0021               	movlb	1	; select bank1
 11027  1507  082E               	movf	?___ftmul^(0+128),w
 11028  1508  00BE               	movwf	___ftneg@f1^(0+128)
 11029  1509  082F               	movf	(?___ftmul+1)^(0+128),w
 11030  150A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11031  150B  0830               	movf	(?___ftmul+2)^(0+128),w
 11032  150C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11033  150D  31AD  2593  3194   	fcall	___ftneg
 11034  1510  0021               	movlb	1	; select bank1
 11035  1511  083E               	movf	?___ftneg^(0+128),w
 11036  1512  00C4               	movwf	___ftadd@f2^(0+128)
 11037  1513  083F               	movf	(?___ftneg+1)^(0+128),w
 11038  1514  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11039  1515  0840               	movf	(?___ftneg+2)^(0+128),w
 11040  1516  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11041  1517  3000               	movlw	0
 11042  1518  00C1               	movwf	___ftadd@f1^(0+128)
 11043  1519  30B4               	movlw	180
 11044  151A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11045  151B  3043               	movlw	67
 11046  151C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11047  151D  3190  2031  3194   	fcall	___ftadd
 11048  1520  0021               	movlb	1	; select bank1
 11049  1521  0841               	movf	?___ftadd^(0+128),w
 11050  1522  0022               	movlb	2	; select bank2
 11051  1523  00B4               	movwf	_modSaw$2857^(0+256)
 11052  1524  0021               	movlb	1	; select bank1
 11053  1525  0842               	movf	(?___ftadd+1)^(0+128),w
 11054  1526  0022               	movlb	2	; select bank2
 11055  1527  00B5               	movwf	(_modSaw$2857+1)^(0+256)
 11056  1528  0021               	movlb	1	; select bank1
 11057  1529  0843               	movf	(?___ftadd+2)^(0+128),w
 11058  152A  0022               	movlb	2	; select bank2
 11059  152B  00B6               	movwf	(_modSaw$2857+2)^(0+256)
 11060                           
 11061                           ;modulation.c: 129: shift = -(360-inflection*2)*(180/(360-inflection));
 11062  152C  0834               	movf	_modSaw$2857^(0+256),w
 11063  152D  0021               	movlb	1	; select bank1
 11064  152E  00BE               	movwf	___ftneg@f1^(0+128)
 11065  152F  0022               	movlb	2	; select bank2
 11066  1530  0835               	movf	(_modSaw$2857+1)^(0+256),w
 11067  1531  0021               	movlb	1	; select bank1
 11068  1532  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11069  1533  0022               	movlb	2	; select bank2
 11070  1534  0836               	movf	(_modSaw$2857+2)^(0+256),w
 11071  1535  0021               	movlb	1	; select bank1
 11072  1536  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11073  1537  31AD  2593  3194   	fcall	___ftneg
 11074  153A  0021               	movlb	1	; select bank1
 11075  153B  083E               	movf	?___ftneg^(0+128),w
 11076  153C  00AE               	movwf	___ftmul@f1^(0+128)
 11077  153D  083F               	movf	(?___ftneg+1)^(0+128),w
 11078  153E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11079  153F  0840               	movf	(?___ftneg+2)^(0+128),w
 11080  1540  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11081  1541  3000               	movlw	0
 11082  1542  00C1               	movwf	___ftadd@f1^(0+128)
 11083  1543  30B4               	movlw	180
 11084  1544  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11085  1545  3043               	movlw	67
 11086  1546  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11087  1547  0022               	movlb	2	; select bank2
 11088  1548  0831               	movf	modSaw@inflection^(0+256),w
 11089  1549  0021               	movlb	1	; select bank1
 11090  154A  00BE               	movwf	___ftneg@f1^(0+128)
 11091  154B  0022               	movlb	2	; select bank2
 11092  154C  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11093  154D  0021               	movlb	1	; select bank1
 11094  154E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11095  154F  0022               	movlb	2	; select bank2
 11096  1550  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11097  1551  0021               	movlb	1	; select bank1
 11098  1552  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11099  1553  31AD  2593  3194   	fcall	___ftneg
 11100  1556  0021               	movlb	1	; select bank1
 11101  1557  083E               	movf	?___ftneg^(0+128),w
 11102  1558  00C4               	movwf	___ftadd@f2^(0+128)
 11103  1559  083F               	movf	(?___ftneg+1)^(0+128),w
 11104  155A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11105  155B  0840               	movf	(?___ftneg+2)^(0+128),w
 11106  155C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11107  155D  3190  2031  3194   	fcall	___ftadd
 11108  1560  0021               	movlb	1	; select bank1
 11109  1561  0841               	movf	?___ftadd^(0+128),w
 11110  1562  00CE               	movwf	___ftdiv@f2^(0+128)
 11111  1563  0842               	movf	(?___ftadd+1)^(0+128),w
 11112  1564  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11113  1565  0843               	movf	(?___ftadd+2)^(0+128),w
 11114  1566  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11115  1567  3000               	movlw	0
 11116  1568  00D1               	movwf	___ftdiv@f1^(0+128)
 11117  1569  3034               	movlw	52
 11118  156A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11119  156B  3043               	movlw	67
 11120  156C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11121  156D  319D  251F  3194   	fcall	___ftdiv
 11122  1570  0021               	movlb	1	; select bank1
 11123  1571  084E               	movf	?___ftdiv^(0+128),w
 11124  1572  00B1               	movwf	___ftmul@f2^(0+128)
 11125  1573  084F               	movf	(?___ftdiv+1)^(0+128),w
 11126  1574  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11127  1575  0850               	movf	(?___ftdiv+2)^(0+128),w
 11128  1576  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11129  1577  319E  267B  3194   	fcall	___ftmul
 11130  157A  0021               	movlb	1	; select bank1
 11131  157B  082E               	movf	?___ftmul^(0+128),w
 11132  157C  0022               	movlb	2	; select bank2
 11133  157D  00BC               	movwf	modSaw@shift^(0+256)
 11134  157E  0021               	movlb	1	; select bank1
 11135  157F  082F               	movf	(?___ftmul+1)^(0+128),w
 11136  1580  0022               	movlb	2	; select bank2
 11137  1581  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11138  1582  0021               	movlb	1	; select bank1
 11139  1583  0830               	movf	(?___ftmul+2)^(0+128),w
 11140  1584  0022               	movlb	2	; select bank2
 11141  1585  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11142                           
 11143                           ;modulation.c: 130: period = 180/(360-inflection);
 11144  1586  3000               	movlw	0
 11145  1587  0021               	movlb	1	; select bank1
 11146  1588  00C1               	movwf	___ftadd@f1^(0+128)
 11147  1589  30B4               	movlw	180
 11148  158A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11149  158B  3043               	movlw	67
 11150  158C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11151  158D  0022               	movlb	2	; select bank2
 11152  158E  0831               	movf	modSaw@inflection^(0+256),w
 11153  158F  0021               	movlb	1	; select bank1
 11154  1590  00BE               	movwf	___ftneg@f1^(0+128)
 11155  1591  0022               	movlb	2	; select bank2
 11156  1592  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11157  1593  0021               	movlb	1	; select bank1
 11158  1594  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11159  1595  0022               	movlb	2	; select bank2
 11160  1596  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11161  1597  0021               	movlb	1	; select bank1
 11162  1598  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11163  1599  31AD  2593  3194   	fcall	___ftneg
 11164  159C  0021               	movlb	1	; select bank1
 11165  159D  083E               	movf	?___ftneg^(0+128),w
 11166  159E  00C4               	movwf	___ftadd@f2^(0+128)
 11167  159F  083F               	movf	(?___ftneg+1)^(0+128),w
 11168  15A0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11169  15A1  0840               	movf	(?___ftneg+2)^(0+128),w
 11170  15A2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11171  15A3  3190  2031  3194   	fcall	___ftadd
 11172  15A6  0021               	movlb	1	; select bank1
 11173  15A7  0841               	movf	?___ftadd^(0+128),w
 11174  15A8  00CE               	movwf	___ftdiv@f2^(0+128)
 11175  15A9  0842               	movf	(?___ftadd+1)^(0+128),w
 11176  15AA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11177  15AB  0843               	movf	(?___ftadd+2)^(0+128),w
 11178  15AC                     L8:	
 11179  15AC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11180  15AD  3000               	movlw	0
 11181  15AE  00D1               	movwf	___ftdiv@f1^(0+128)
 11182  15AF  3034               	movlw	52
 11183  15B0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11184  15B1  3043               	movlw	67
 11185  15B2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11186  15B3  319D  251F  3194   	fcall	___ftdiv
 11187  15B6  0021               	movlb	1	; select bank1
 11188  15B7  084E               	movf	?___ftdiv^(0+128),w
 11189  15B8  0022               	movlb	2	; select bank2
 11190  15B9  00BF               	movwf	modSaw@period^(0+256)
 11191  15BA  0021               	movlb	1	; select bank1
 11192  15BB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11193  15BC  0022               	movlb	2	; select bank2
 11194  15BD  00C0               	movwf	(modSaw@period+1)^(0+256)
 11195  15BE  0021               	movlb	1	; select bank1
 11196  15BF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11197  15C0  0022               	movlb	2	; select bank2
 11198  15C1  00C1               	movwf	(modSaw@period+2)^(0+256)
 11199                           
 11200                           ;modulation.c: 131: }
 11201                           ;modulation.c: 133: int mod = (int)((period*angle-shift-180)*5/9);
 11202  15C2  083F               	movf	modSaw@period^(0+256),w
 11203  15C3  0021               	movlb	1	; select bank1
 11204  15C4  00B1               	movwf	___ftmul@f2^(0+128)
 11205  15C5  0022               	movlb	2	; select bank2
 11206  15C6  0840               	movf	(modSaw@period+1)^(0+256),w
 11207  15C7  0021               	movlb	1	; select bank1
 11208  15C8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11209  15C9  0022               	movlb	2	; select bank2
 11210  15CA  0841               	movf	(modSaw@period+2)^(0+256),w
 11211  15CB  0021               	movlb	1	; select bank1
 11212  15CC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11213  15CD  0022               	movlb	2	; select bank2
 11214  15CE  082E               	movf	modSaw@angle^(0+256),w
 11215  15CF  0021               	movlb	1	; select bank1
 11216  15D0  00AE               	movwf	___ftmul@f1^(0+128)
 11217  15D1  0022               	movlb	2	; select bank2
 11218  15D2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11219  15D3  0021               	movlb	1	; select bank1
 11220  15D4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11221  15D5  0022               	movlb	2	; select bank2
 11222  15D6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11223  15D7  0021               	movlb	1	; select bank1
 11224  15D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11225  15D9  319E  267B  3194   	fcall	___ftmul
 11226  15DC  0021               	movlb	1	; select bank1
 11227  15DD  082E               	movf	?___ftmul^(0+128),w
 11228  15DE  00C4               	movwf	___ftadd@f2^(0+128)
 11229  15DF  082F               	movf	(?___ftmul+1)^(0+128),w
 11230  15E0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11231  15E1  0830               	movf	(?___ftmul+2)^(0+128),w
 11232  15E2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11233  15E3  0022               	movlb	2	; select bank2
 11234  15E4  083C               	movf	modSaw@shift^(0+256),w
 11235  15E5  0021               	movlb	1	; select bank1
 11236  15E6  00BE               	movwf	___ftneg@f1^(0+128)
 11237  15E7  0022               	movlb	2	; select bank2
 11238  15E8  083D               	movf	(modSaw@shift+1)^(0+256),w
 11239  15E9  0021               	movlb	1	; select bank1
 11240  15EA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11241  15EB  0022               	movlb	2	; select bank2
 11242  15EC  083E               	movf	(modSaw@shift+2)^(0+256),w
 11243  15ED  0021               	movlb	1	; select bank1
 11244  15EE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11245  15EF  31AD  2593  3194   	fcall	___ftneg
 11246  15F2  0021               	movlb	1	; select bank1
 11247  15F3  083E               	movf	?___ftneg^(0+128),w
 11248  15F4  00C1               	movwf	___ftadd@f1^(0+128)
 11249  15F5  083F               	movf	(?___ftneg+1)^(0+128),w
 11250  15F6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11251  15F7  0840               	movf	(?___ftneg+2)^(0+128),w
 11252  15F8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11253  15F9  3190  2031  3194   	fcall	___ftadd
 11254  15FC  0021               	movlb	1	; select bank1
 11255  15FD  0841               	movf	?___ftadd^(0+128),w
 11256  15FE  0022               	movlb	2	; select bank2
 11257  15FF  00B7               	movwf	_modSaw$2858^(0+256)
 11258  1600  0021               	movlb	1	; select bank1
 11259  1601  0842               	movf	(?___ftadd+1)^(0+128),w
 11260  1602  0022               	movlb	2	; select bank2
 11261  1603  00B8               	movwf	(_modSaw$2858+1)^(0+256)
 11262  1604  0021               	movlb	1	; select bank1
 11263  1605  0843               	movf	(?___ftadd+2)^(0+128),w
 11264  1606  0022               	movlb	2	; select bank2
 11265  1607  00B9               	movwf	(_modSaw$2858+2)^(0+256)
 11266                           
 11267                           ;modulation.c: 131: }
 11268                           ;modulation.c: 133: int mod = (int)((period*angle-shift-180)*5/9);
 11269  1608  0837               	movf	_modSaw$2858^(0+256),w
 11270  1609  0021               	movlb	1	; select bank1
 11271  160A  00C4               	movwf	___ftadd@f2^(0+128)
 11272  160B  0022               	movlb	2	; select bank2
 11273  160C  0838               	movf	(_modSaw$2858+1)^(0+256),w
 11274  160D  0021               	movlb	1	; select bank1
 11275  160E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11276  160F  0022               	movlb	2	; select bank2
 11277  1610  0839               	movf	(_modSaw$2858+2)^(0+256),w
 11278  1611  0021               	movlb	1	; select bank1
 11279  1612  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11280  1613  3000               	movlw	0
 11281  1614  00C1               	movwf	___ftadd@f1^(0+128)
 11282  1615  3034               	movlw	52
 11283  1616  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11284  1617  30C3               	movlw	195
 11285  1618  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11286  1619  3190  2031  3194   	fcall	___ftadd
 11287  161C  0021               	movlb	1	; select bank1
 11288  161D  0841               	movf	?___ftadd^(0+128),w
 11289  161E  00B1               	movwf	___ftmul@f2^(0+128)
 11290  161F  0842               	movf	(?___ftadd+1)^(0+128),w
 11291  1620  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11292  1621  0843               	movf	(?___ftadd+2)^(0+128),w
 11293  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11294  1623  3000               	movlw	0
 11295  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11296  1625  30A0               	movlw	160
 11297  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11298  1627  3040               	movlw	64
 11299  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11300  1629  319E  267B  3194   	fcall	___ftmul
 11301  162C  0021               	movlb	1	; select bank1
 11302  162D  082E               	movf	?___ftmul^(0+128),w
 11303  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11304  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11305  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11306  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11307  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11308  1633  3000               	movlw	0
 11309  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11310  1635  3010               	movlw	16
 11311  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11312  1637  3041               	movlw	65
 11313  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11314  1639  319D  251F  3194   	fcall	___ftdiv
 11315  163C  0021               	movlb	1	; select bank1
 11316  163D  084E               	movf	?___ftdiv^(0+128),w
 11317  163E  0022               	movlb	2	; select bank2
 11318  163F  00A0               	movwf	___fttol@f1^(0+256)
 11319  1640  0021               	movlb	1	; select bank1
 11320  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11321  1642  0022               	movlb	2	; select bank2
 11322  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11323  1644  0021               	movlb	1	; select bank1
 11324  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11325  1646  0022               	movlb	2	; select bank2
 11326  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11327  1648  319A  225A         	fcall	___fttol
 11328  164A  0022               	movlb	2	; select bank2
 11329  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11330  164C  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11331  164D  0820               	movf	?___fttol^(0+256),w
 11332  164E  00BA               	movwf	modSaw@mod^(0+256)
 11333                           
 11334                           ;modulation.c: 134: return mod;
 11335  164F  083B               	movf	(modSaw@mod+1)^(0+256),w
 11336  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11337  1651  083A               	movf	modSaw@mod^(0+256),w
 11338  1652  00AE               	movwf	?_modSaw^(0+256)
 11339  1653  0008               	return
 11340  1654                     __end_of_modSaw:	
 11341                           
 11342                           	psect	text22
 11343  24E5                     __ptext22:	
 11344 ;; *************** function ___awdiv *****************
 11345 ;; Defined at:
 11346 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  divisor         2    0[BANK1 ] int 
 11349 ;;  dividend        2    2[BANK1 ] int 
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;  quotient        2    7[BANK1 ] int 
 11352 ;;  sign            1    6[BANK1 ] unsigned char 
 11353 ;;  counter         1    5[BANK1 ] unsigned char 
 11354 ;; Return value:  Size  Location     Type
 11355 ;;                  2    0[BANK1 ] int 
 11356 ;; Registers used:
 11357 ;;		wreg, status,2, status,0
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11363 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11364 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11365 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11366 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11367 ;;Total ram usage:        9 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; Hardware stack levels required when called:    3
 11370 ;; This function calls:
 11371 ;;		Nothing
 11372 ;; This function is called by:
 11373 ;;		_updateModulationArray
 11374 ;;		_USARTWriteInt
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           
 11379                           ;psect for function ___awdiv
 11380  24E5                     ___awdiv:	
 11381                           
 11382                           ;incstack = 0
 11383                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11384  24E5  0021               	movlb	1	; select bank1
 11385  24E6  01A6               	clrf	___awdiv@sign^(0+128)
 11386  24E7  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11387  24E8  2CF0               	goto	l8656
 11388  24E9  09A0               	comf	___awdiv@divisor^(0+128),f
 11389  24EA  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11390  24EB  0AA0               	incf	___awdiv@divisor^(0+128),f
 11391  24EC  1903               	skipnz
 11392  24ED  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11393  24EE  01A6               	clrf	___awdiv@sign^(0+128)
 11394  24EF  0AA6               	incf	___awdiv@sign^(0+128),f
 11395  24F0                     l8656:	
 11396  24F0  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11397  24F1  2CFB               	goto	l8662
 11398  24F2  09A2               	comf	___awdiv@dividend^(0+128),f
 11399  24F3  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11400  24F4  0AA2               	incf	___awdiv@dividend^(0+128),f
 11401  24F5  1903               	skipnz
 11402  24F6  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11403  24F7  3001               	movlw	1
 11404  24F8  00A4               	movwf	??___awdiv^(0+128)
 11405  24F9  0824               	movf	??___awdiv^(0+128),w
 11406  24FA  06A6               	xorwf	___awdiv@sign^(0+128),f
 11407  24FB                     l8662:	
 11408  24FB  01A7               	clrf	___awdiv@quotient^(0+128)
 11409  24FC  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11410  24FD  0820               	movf	___awdiv@divisor^(0+128),w
 11411  24FE  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11412  24FF  1903               	btfsc	3,2
 11413  2500  2D2A               	goto	l8684
 11414  2501  01A5               	clrf	___awdiv@counter^(0+128)
 11415  2502  0AA5               	incf	___awdiv@counter^(0+128),f
 11416  2503                     l8672:	
 11417  2503  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11418  2504  2D0F               	goto	l8674
 11419  2505  3001               	movlw	1
 11420  2506                     u9165:	
 11421  2506  35A0               	lslf	___awdiv@divisor^(0+128),f
 11422  2507  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11423  2508  0B89               	decfsz	9,f
 11424  2509  2D06               	goto	u9165
 11425  250A  3001               	movlw	1
 11426  250B  00A4               	movwf	??___awdiv^(0+128)
 11427  250C  0824               	movf	??___awdiv^(0+128),w
 11428  250D  07A5               	addwf	___awdiv@counter^(0+128),f
 11429  250E  2D03               	goto	l8672
 11430  250F                     l8674:	
 11431  250F  3001               	movlw	1
 11432  2510                     u9185:	
 11433  2510  35A7               	lslf	___awdiv@quotient^(0+128),f
 11434  2511  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11435  2512  0B89               	decfsz	9,f
 11436  2513  2D10               	goto	u9185
 11437  2514  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11438  2515  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11439  2516  1D03               	skipz
 11440  2517  2D1A               	goto	u9195
 11441  2518  0820               	movf	___awdiv@divisor^(0+128),w
 11442  2519  0222               	subwf	___awdiv@dividend^(0+128),w
 11443  251A                     u9195:	
 11444  251A  1C03               	skipc
 11445  251B  2D21               	goto	l8680
 11446  251C  0820               	movf	___awdiv@divisor^(0+128),w
 11447  251D  02A2               	subwf	___awdiv@dividend^(0+128),f
 11448  251E  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11449  251F  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11450  2520  1427               	bsf	___awdiv@quotient^(0+128),0
 11451  2521                     l8680:	
 11452  2521  3001               	movlw	1
 11453  2522                     u9205:	
 11454  2522  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11455  2523  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11456  2524  0B89               	decfsz	9,f
 11457  2525  2D22               	goto	u9205
 11458  2526  3001               	movlw	1
 11459  2527  02A5               	subwf	___awdiv@counter^(0+128),f
 11460  2528  1D03               	btfss	3,2
 11461  2529  2D0F               	goto	l8674
 11462  252A                     l8684:	
 11463  252A  0826               	movf	___awdiv@sign^(0+128),w
 11464  252B  1903               	btfsc	3,2
 11465  252C  2D32               	goto	l8688
 11466  252D  09A7               	comf	___awdiv@quotient^(0+128),f
 11467  252E  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11468  252F  0AA7               	incf	___awdiv@quotient^(0+128),f
 11469  2530  1903               	skipnz
 11470  2531  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11471  2532                     l8688:	
 11472  2532  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11473  2533  00A1               	movwf	(?___awdiv+1)^(0+128)
 11474  2534  0827               	movf	___awdiv@quotient^(0+128),w
 11475  2535  00A0               	movwf	?___awdiv^(0+128)
 11476  2536  0008               	return
 11477  2537                     __end_of___awdiv:	
 11478                           
 11479                           	psect	text23
 11480  1B6C                     __ptext23:	
 11481 ;; *************** function _set_subdivision *****************
 11482 ;; Defined at:
 11483 ;;		line 77 in file "user.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;  x               2   14[BANK2 ] int 
 11486 ;;  y               2   16[BANK2 ] int 
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;  scalar          3   18[BANK2 ] float 
 11489 ;;  tmpX            2   21[BANK2 ] int 
 11490 ;; Return value:  Size  Location     Type
 11491 ;;                  2   14[BANK2 ] int 
 11492 ;; Registers used:
 11493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11499 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11500 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11502 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11503 ;;Total ram usage:        9 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    5
 11506 ;; This function calls:
 11507 ;;		___awtoft
 11508 ;;		___ftmul
 11509 ;;		___fttol
 11510 ;; This function is called by:
 11511 ;;		_main
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           
 11516                           ;psect for function _set_subdivision
 11517  1B6C                     _set_subdivision:	
 11518                           
 11519                           ;user.c: 81: adjust_mod_delay = 0;
 11520                           
 11521                           ;incstack = 0
 11522                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11523  1B6C  0023               	movlb	3	; select bank3
 11524  1B6D  01BA               	clrf	_adjust_mod_delay^(0+384)
 11525                           
 11526                           ;user.c: 82: int tmpX = x;
 11527  1B6E  0022               	movlb	2	; select bank2
 11528  1B6F  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11529  1B70  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11530  1B71  082E               	movf	set_subdivision@x^(0+256),w
 11531  1B72  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11532                           
 11533                           ;user.c: 83: float scalar = 1.0;
 11534  1B73  3000               	movlw	0
 11535  1B74  00B2               	movwf	set_subdivision@scalar^(0+256)
 11536  1B75  3080               	movlw	128
 11537  1B76  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11538  1B77  303F               	movlw	63
 11539  1B78  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11540                           
 11541                           ;user.c: 85: switch (y) {
 11542  1B79  2B99               	goto	l9252
 11543  1B7A                     l9238:	
 11544                           ;user.c: 86: case 1:
 11545                           
 11546                           
 11547                           ;user.c: 87: scalar = 2.0;
 11548  1B7A  3000               	movlw	0
 11549  1B7B  00B2               	movwf	set_subdivision@scalar^(0+256)
 11550  1B7C  3000               	movlw	0
 11551  1B7D  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11552  1B7E  3040               	movlw	64
 11553  1B7F  2B97               	goto	L13
 11554  1B80                     l9240:	
 11555                           ;user.c: 89: case 2:
 11556                           
 11557                           ;user.c: 88: break;
 11558                           
 11559                           
 11560                           ;user.c: 90: scalar = 0.6666;
 11561  1B80  30A6               	movlw	166
 11562  1B81  00B2               	movwf	set_subdivision@scalar^(0+256)
 11563  1B82  302A               	movlw	42
 11564  1B83  2B95               	goto	L14
 11565  1B84                     l9242:	
 11566                           ;user.c: 92: case 3:
 11567                           
 11568                           ;user.c: 91: break;
 11569                           
 11570                           
 11571                           ;user.c: 93: scalar = .5;
 11572  1B84  3000               	movlw	0
 11573  1B85  00B2               	movwf	set_subdivision@scalar^(0+256)
 11574  1B86  3000               	movlw	0
 11575  1B87  2B95               	goto	L14
 11576  1B88                     l9244:	
 11577                           ;user.c: 95: case 4:
 11578                           
 11579                           ;user.c: 94: break;
 11580                           
 11581                           
 11582                           ;user.c: 96: scalar = 0.3333;
 11583  1B88  30A6               	movlw	166
 11584  1B89  00B2               	movwf	set_subdivision@scalar^(0+256)
 11585  1B8A  30AA               	movlw	170
 11586  1B8B  2B8F               	goto	L15
 11587  1B8C                     l9246:	
 11588                           ;user.c: 98: case 5:
 11589                           
 11590                           ;user.c: 97: break;
 11591                           
 11592                           
 11593                           ;user.c: 99: scalar = 0.25;
 11594  1B8C  3000               	movlw	0
 11595  1B8D  00B2               	movwf	set_subdivision@scalar^(0+256)
 11596  1B8E  3080               	movlw	128
 11597  1B8F                     L15:	
 11598  1B8F  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11599  1B90  303E               	movlw	62
 11600  1B91  2B97               	goto	L13
 11601  1B92                     l9248:	
 11602                           ;user.c: 101: case 6:
 11603                           
 11604                           ;user.c: 100: break;
 11605                           
 11606                           
 11607                           ;user.c: 102: scalar = 1.0;
 11608  1B92  3000               	movlw	0
 11609  1B93  00B2               	movwf	set_subdivision@scalar^(0+256)
 11610  1B94  3080               	movlw	128
 11611  1B95                     L14:	
 11612  1B95  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11613  1B96  303F               	movlw	63
 11614  1B97                     L13:	
 11615  1B97  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11616                           
 11617                           ;user.c: 104: }
 11618                           
 11619                           ;user.c: 103: break;
 11620  1B98  2BB2               	goto	l9254
 11621  1B99                     l9252:	
 11622                           
 11623                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11624                           ; Switch size 1, requested type "space"
 11625                           ; Number of cases is 1, Range of values is 0 to 0
 11626                           ; switch strategies available:
 11627                           ; Name         Instructions Cycles
 11628                           ; simple_byte            4     3 (average)
 11629                           ; direct_byte            8     6 (fixed)
 11630                           ; jumptable            260     6 (fixed)
 11631                           ;	Chosen strategy is simple_byte
 11632  1B99  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11633  1B9A  3A00               	xorlw	0	; case 0
 11634  1B9B  1903               	skipnz
 11635  1B9C  2B9E               	goto	l9844
 11636  1B9D  2BB2               	goto	l9254
 11637  1B9E                     l9844:	
 11638                           
 11639                           ; Switch size 1, requested type "space"
 11640                           ; Number of cases is 6, Range of values is 1 to 6
 11641                           ; switch strategies available:
 11642                           ; Name         Instructions Cycles
 11643                           ; simple_byte           19    10 (average)
 11644                           ; direct_byte           21     9 (fixed)
 11645                           ; jumptable            263     9 (fixed)
 11646                           ;	Chosen strategy is simple_byte
 11647  1B9E  0830               	movf	set_subdivision@y^(0+256),w
 11648  1B9F  3A01               	xorlw	1	; case 1
 11649  1BA0  1903               	skipnz
 11650  1BA1  2B7A               	goto	l9238
 11651  1BA2  3A03               	xorlw	3	; case 2
 11652  1BA3  1903               	skipnz
 11653  1BA4  2B80               	goto	l9240
 11654  1BA5  3A01               	xorlw	1	; case 3
 11655  1BA6  1903               	skipnz
 11656  1BA7  2B84               	goto	l9242
 11657  1BA8  3A07               	xorlw	7	; case 4
 11658  1BA9  1903               	skipnz
 11659  1BAA  2B88               	goto	l9244
 11660  1BAB  3A01               	xorlw	1	; case 5
 11661  1BAC  1903               	skipnz
 11662  1BAD  2B8C               	goto	l9246
 11663  1BAE  3A03               	xorlw	3	; case 6
 11664  1BAF  1903               	skipnz
 11665  1BB0  2B92               	goto	l9248
 11666  1BB1  2BB2               	goto	l9254
 11667  1BB2                     l9254:	
 11668                           
 11669                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11670  1BB2  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11671  1BB3  0021               	movlb	1	; select bank1
 11672  1BB4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11673  1BB5  0022               	movlb	2	; select bank2
 11674  1BB6  0835               	movf	set_subdivision@tmpX^(0+256),w
 11675  1BB7  0021               	movlb	1	; select bank1
 11676  1BB8  00A8               	movwf	___awtoft@c^(0+128)
 11677  1BB9  31AE  26E2  319B   	fcall	___awtoft
 11678  1BBC  0021               	movlb	1	; select bank1
 11679  1BBD  0828               	movf	?___awtoft^(0+128),w
 11680  1BBE  00B1               	movwf	___ftmul@f2^(0+128)
 11681  1BBF  0829               	movf	(?___awtoft+1)^(0+128),w
 11682  1BC0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11683  1BC1  082A               	movf	(?___awtoft+2)^(0+128),w
 11684  1BC2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11685  1BC3  0022               	movlb	2	; select bank2
 11686  1BC4  0832               	movf	set_subdivision@scalar^(0+256),w
 11687  1BC5  0021               	movlb	1	; select bank1
 11688  1BC6  00AE               	movwf	___ftmul@f1^(0+128)
 11689  1BC7  0022               	movlb	2	; select bank2
 11690  1BC8  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11691  1BC9  0021               	movlb	1	; select bank1
 11692  1BCA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11693  1BCB  0022               	movlb	2	; select bank2
 11694  1BCC  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11695  1BCD  0021               	movlb	1	; select bank1
 11696  1BCE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11697  1BCF  319E  267B  319B   	fcall	___ftmul
 11698  1BD2  0021               	movlb	1	; select bank1
 11699  1BD3  082E               	movf	?___ftmul^(0+128),w
 11700  1BD4  0022               	movlb	2	; select bank2
 11701  1BD5  00A0               	movwf	___fttol@f1^(0+256)
 11702  1BD6  0021               	movlb	1	; select bank1
 11703  1BD7  082F               	movf	(?___ftmul+1)^(0+128),w
 11704  1BD8  0022               	movlb	2	; select bank2
 11705  1BD9  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11706  1BDA  0021               	movlb	1	; select bank1
 11707  1BDB  0830               	movf	(?___ftmul+2)^(0+128),w
 11708  1BDC  0022               	movlb	2	; select bank2
 11709  1BDD  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11710  1BDE  319A  225A  319B   	fcall	___fttol
 11711  1BE1  0022               	movlb	2	; select bank2
 11712  1BE2  0821               	movf	(?___fttol^(0+256)+1),w
 11713  1BE3  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11714  1BE4  0820               	movf	?___fttol^(0+256),w
 11715  1BE5  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11716                           
 11717                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11718  1BE6  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11719  1BE7  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11720  1BE8  1D03               	skipz
 11721  1BE9  2BEC               	goto	u10205
 11722  1BEA  0835               	movf	set_subdivision@tmpX^(0+256),w
 11723  1BEB  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11724  1BEC                     u10205:	
 11725  1BEC  1903               	skipnz
 11726  1BED  2BF1               	goto	l9260
 11727                           
 11728                           ;user.c: 109: adjust_mod_delay = 1;
 11729  1BEE  0023               	movlb	3	; select bank3
 11730  1BEF  01BA               	clrf	_adjust_mod_delay^(0+384)
 11731  1BF0  0ABA               	incf	_adjust_mod_delay^(0+384),f
 11732  1BF1                     l9260:	
 11733                           
 11734                           ;user.c: 110: }
 11735                           ;user.c: 112: return tmpX;
 11736  1BF1  0022               	movlb	2	; select bank2
 11737  1BF2  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11738  1BF3  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11739  1BF4  0835               	movf	set_subdivision@tmpX^(0+256),w
 11740  1BF5  00AE               	movwf	?_set_subdivision^(0+256)
 11741  1BF6  0008               	return
 11742  1BF7                     __end_of_set_subdivision:	
 11743                           
 11744                           	psect	text24
 11745  0752                     __ptext24:	
 11746 ;; *************** function _scaleiA10kPot *****************
 11747 ;; Defined at:
 11748 ;;		line 211 in file "user.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;  input           3   71[BANK2 ] int 
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  pwm             3    0[BANK3 ] float 
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  2   71[BANK2 ] int 
 11755 ;; Registers used:
 11756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11762 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11763 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11765 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11766 ;;Total ram usage:       12 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    8
 11769 ;; This function calls:
 11770 ;;		___ftadd
 11771 ;;		___ftdiv
 11772 ;;		___ftmul
 11773 ;;		___ftneg
 11774 ;;		___fttol
 11775 ;;		_pow
 11776 ;; This function is called by:
 11777 ;;		_main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _scaleiA10kPot
 11783  0752                     _scaleiA10kPot:	
 11784                           
 11785                           ;user.c: 214: if (input == 0.0) {return 0;}
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11789  0752  0022               	movlb	2	; select bank2
 11790  0753  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11791  0754  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11792  0755  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11793  0756  1D03               	skipz
 11794  0757  2F5B               	goto	l9198
 11795  0758  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11796  0759  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11797  075A  0008               	return
 11798  075B                     l9198:	
 11799                           
 11800                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11801  075B  30C0               	movlw	192
 11802  075C  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11803  075D  307F               	movlw	127
 11804  075E  1903               	skipnz
 11805  075F  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11806  0760  3044               	movlw	68
 11807  0761  1903               	skipnz
 11808  0762  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11809  0763  1D03               	btfss	3,2
 11810  0764  2F6A               	goto	l9204
 11811  0765  30FF               	movlw	255
 11812  0766  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11813  0767  3000               	movlw	0
 11814  0768  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11815  0769  0008               	return
 11816  076A                     l9204:	
 11817                           
 11818                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11819  076A  3000               	movlw	0
 11820  076B  0021               	movlb	1	; select bank1
 11821  076C  00C1               	movwf	___ftadd@f1^(0+128)
 11822  076D  3080               	movlw	128
 11823  076E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11824  076F  303F               	movlw	63
 11825  0770  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11826  0771  0022               	movlb	2	; select bank2
 11827  0772  0867               	movf	scaleiA10kPot@input^(0+256),w
 11828  0773  0021               	movlb	1	; select bank1
 11829  0774  00D1               	movwf	___ftdiv@f1^(0+128)
 11830  0775  0022               	movlb	2	; select bank2
 11831  0776  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11832  0777  0021               	movlb	1	; select bank1
 11833  0778  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11834  0779  0022               	movlb	2	; select bank2
 11835  077A  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11836  077B  0021               	movlb	1	; select bank1
 11837  077C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11838  077D  30C0               	movlw	192
 11839  077E  00CE               	movwf	___ftdiv@f2^(0+128)
 11840  077F  307F               	movlw	127
 11841  0780  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11842  0781  3044               	movlw	68
 11843  0782  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11844  0783  319D  251F  3187   	fcall	___ftdiv
 11845  0786  0021               	movlb	1	; select bank1
 11846  0787  084E               	movf	?___ftdiv^(0+128),w
 11847  0788  00BE               	movwf	___ftneg@f1^(0+128)
 11848  0789  084F               	movf	(?___ftdiv+1)^(0+128),w
 11849  078A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11850  078B  0850               	movf	(?___ftdiv+2)^(0+128),w
 11851  078C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11852  078D  31AD  2593  3187   	fcall	___ftneg
 11853  0790  0021               	movlb	1	; select bank1
 11854  0791  083E               	movf	?___ftneg^(0+128),w
 11855  0792  00C4               	movwf	___ftadd@f2^(0+128)
 11856  0793  083F               	movf	(?___ftneg+1)^(0+128),w
 11857  0794  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11858  0795  0840               	movf	(?___ftneg+2)^(0+128),w
 11859  0796  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11860  0797  3190  2031  3187   	fcall	___ftadd
 11861  079A  0021               	movlb	1	; select bank1
 11862  079B  0841               	movf	?___ftadd^(0+128),w
 11863  079C  0023               	movlb	3	; select bank3
 11864  079D  00EA               	movwf	_scaleiA10kPot$2853^(0+384)
 11865  079E  0021               	movlb	1	; select bank1
 11866  079F  0842               	movf	(?___ftadd+1)^(0+128),w
 11867  07A0  0023               	movlb	3	; select bank3
 11868  07A1  00EB               	movwf	(_scaleiA10kPot$2853+1)^(0+384)
 11869  07A2  0021               	movlb	1	; select bank1
 11870  07A3  0843               	movf	(?___ftadd+2)^(0+128),w
 11871  07A4  0023               	movlb	3	; select bank3
 11872  07A5  00EC               	movwf	(_scaleiA10kPot$2853+2)^(0+384)
 11873                           
 11874                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11875  07A6  306A               	movlw	106
 11876  07A7  0022               	movlb	2	; select bank2
 11877  07A8  00D8               	movwf	pow@y^(0+256)
 11878  07A9  309C               	movlw	156
 11879  07AA  00D9               	movwf	(pow@y+1)^(0+256)
 11880  07AB  30BF               	movlw	191
 11881  07AC  00DA               	movwf	(pow@y+2)^(0+256)
 11882  07AD  0023               	movlb	3	; select bank3
 11883  07AE  086A               	movf	_scaleiA10kPot$2853^(0+384),w
 11884  07AF  0022               	movlb	2	; select bank2
 11885  07B0  00D5               	movwf	pow@x^(0+256)
 11886  07B1  0023               	movlb	3	; select bank3
 11887  07B2  086B               	movf	(_scaleiA10kPot$2853+1)^(0+384),w
 11888  07B3  0022               	movlb	2	; select bank2
 11889  07B4  00D6               	movwf	(pow@x+1)^(0+256)
 11890  07B5  0023               	movlb	3	; select bank3
 11891  07B6  086C               	movf	(_scaleiA10kPot$2853+2)^(0+384),w
 11892  07B7  0022               	movlb	2	; select bank2
 11893  07B8  00D7               	movwf	(pow@x+2)^(0+256)
 11894  07B9  3191  2127  3187   	fcall	_pow
 11895  07BC  0022               	movlb	2	; select bank2
 11896  07BD  0855               	movf	?_pow^(0+256),w
 11897  07BE  0023               	movlb	3	; select bank3
 11898  07BF  00ED               	movwf	_scaleiA10kPot$2854^(0+384)
 11899  07C0  0022               	movlb	2	; select bank2
 11900  07C1  0856               	movf	(?_pow+1)^(0+256),w
 11901  07C2  0023               	movlb	3	; select bank3
 11902  07C3  00EE               	movwf	(_scaleiA10kPot$2854+1)^(0+384)
 11903  07C4  0022               	movlb	2	; select bank2
 11904  07C5  0857               	movf	(?_pow+2)^(0+256),w
 11905  07C6  0023               	movlb	3	; select bank3
 11906  07C7  00EF               	movwf	(_scaleiA10kPot$2854+2)^(0+384)
 11907                           
 11908                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11909  07C8  30E3               	movlw	227
 11910  07C9  0021               	movlb	1	; select bank1
 11911  07CA  00AE               	movwf	___ftmul@f1^(0+128)
 11912  07CB  300B               	movlw	11
 11913  07CC  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11914  07CD  3041               	movlw	65
 11915  07CE  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11916  07CF  0023               	movlb	3	; select bank3
 11917  07D0  086D               	movf	_scaleiA10kPot$2854^(0+384),w
 11918  07D1  0021               	movlb	1	; select bank1
 11919  07D2  00B1               	movwf	___ftmul@f2^(0+128)
 11920  07D3  0023               	movlb	3	; select bank3
 11921  07D4  086E               	movf	(_scaleiA10kPot$2854+1)^(0+384),w
 11922  07D5  0021               	movlb	1	; select bank1
 11923  07D6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11924  07D7  0023               	movlb	3	; select bank3
 11925  07D8  086F               	movf	(_scaleiA10kPot$2854+2)^(0+384),w
 11926  07D9  0021               	movlb	1	; select bank1
 11927  07DA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11928  07DB  319E  267B  3187   	fcall	___ftmul
 11929  07DE  0021               	movlb	1	; select bank1
 11930  07DF  082E               	movf	?___ftmul^(0+128),w
 11931  07E0  0023               	movlb	3	; select bank3
 11932  07E1  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 11933  07E2  0021               	movlb	1	; select bank1
 11934  07E3  082F               	movf	(?___ftmul+1)^(0+128),w
 11935  07E4  0023               	movlb	3	; select bank3
 11936  07E5  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11937  07E6  0021               	movlb	1	; select bank1
 11938  07E7  0830               	movf	(?___ftmul+2)^(0+128),w
 11939  07E8  0023               	movlb	3	; select bank3
 11940  07E9  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11941                           
 11942                           ;user.c: 219: return (int)(pwm);
 11943  07EA  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 11944  07EB  0022               	movlb	2	; select bank2
 11945  07EC  00A0               	movwf	___fttol@f1^(0+256)
 11946  07ED  0023               	movlb	3	; select bank3
 11947  07EE  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11948  07EF  0022               	movlb	2	; select bank2
 11949  07F0  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11950  07F1  0023               	movlb	3	; select bank3
 11951  07F2  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11952  07F3  0022               	movlb	2	; select bank2
 11953  07F4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11954  07F5  319A  225A         	fcall	___fttol
 11955  07F7  0022               	movlb	2	; select bank2
 11956  07F8  0821               	movf	(?___fttol^(0+256)+1),w
 11957  07F9  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11958  07FA  0820               	movf	?___fttol^(0+256),w
 11959  07FB  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11960  07FC  0008               	return
 11961  07FD                     __end_of_scaleiA10kPot:	
 11962                           
 11963                           	psect	text25
 11964  1BF7                     __ptext25:	
 11965 ;; *************** function _scaleA10kPot *****************
 11966 ;; Defined at:
 11967 ;;		line 202 in file "user.c"
 11968 ;; Parameters:    Size  Location     Type
 11969 ;;  input           3   71[BANK2 ] int 
 11970 ;; Auto vars:     Size  Location     Type
 11971 ;;  pwm             3    0[BANK3 ] float 
 11972 ;; Return value:  Size  Location     Type
 11973 ;;                  2   71[BANK2 ] int 
 11974 ;; Registers used:
 11975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11976 ;; Tracked objects:
 11977 ;;		On entry : 0/0
 11978 ;;		On exit  : 0/0
 11979 ;;		Unchanged: 0/0
 11980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11981 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11982 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11984 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11985 ;;Total ram usage:       12 bytes
 11986 ;; Hardware stack levels used:    1
 11987 ;; Hardware stack levels required when called:    8
 11988 ;; This function calls:
 11989 ;;		___ftdiv
 11990 ;;		___ftmul
 11991 ;;		___fttol
 11992 ;;		_pow
 11993 ;; This function is called by:
 11994 ;;		_main
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           
 11999                           ;psect for function _scaleA10kPot
 12000  1BF7                     _scaleA10kPot:	
 12001                           
 12002                           ;user.c: 204: if (input == 0.0) {return 255;}
 12003                           
 12004                           ;incstack = 0
 12005                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12006  1BF7  0022               	movlb	2	; select bank2
 12007  1BF8  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12008  1BF9  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12009  1BFA  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12010  1BFB  1D03               	skipz
 12011  1BFC  2C02               	goto	l9176
 12012  1BFD  30FF               	movlw	255
 12013  1BFE  00E7               	movwf	?_scaleA10kPot^(0+256)
 12014  1BFF  3000               	movlw	0
 12015  1C00  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12016  1C01  0008               	return
 12017  1C02                     l9176:	
 12018                           
 12019                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12020  1C02  30C0               	movlw	192
 12021  1C03  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12022  1C04  307F               	movlw	127
 12023  1C05  1903               	skipnz
 12024  1C06  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12025  1C07  3044               	movlw	68
 12026  1C08  1903               	skipnz
 12027  1C09  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12028  1C0A  1D03               	btfss	3,2
 12029  1C0B  2C0F               	goto	l9182
 12030  1C0C  01E7               	clrf	?_scaleA10kPot^(0+256)
 12031  1C0D  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12032  1C0E  0008               	return
 12033  1C0F                     l9182:	
 12034                           
 12035                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12036  1C0F  30C0               	movlw	192
 12037  1C10  0021               	movlb	1	; select bank1
 12038  1C11  00CE               	movwf	___ftdiv@f2^(0+128)
 12039  1C12  307F               	movlw	127
 12040  1C13  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12041  1C14  3044               	movlw	68
 12042  1C15  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12043  1C16  0022               	movlb	2	; select bank2
 12044  1C17  0867               	movf	scaleA10kPot@input^(0+256),w
 12045  1C18  0021               	movlb	1	; select bank1
 12046  1C19  00D1               	movwf	___ftdiv@f1^(0+128)
 12047  1C1A  0022               	movlb	2	; select bank2
 12048  1C1B  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12049  1C1C  0021               	movlb	1	; select bank1
 12050  1C1D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12051  1C1E  0022               	movlb	2	; select bank2
 12052  1C1F  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12053  1C20  0021               	movlb	1	; select bank1
 12054  1C21  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12055  1C22  319D  251F  319B   	fcall	___ftdiv
 12056  1C25  0021               	movlb	1	; select bank1
 12057  1C26  084E               	movf	?___ftdiv^(0+128),w
 12058  1C27  0023               	movlb	3	; select bank3
 12059  1C28  00EA               	movwf	_scaleA10kPot$2851^(0+384)
 12060  1C29  0021               	movlb	1	; select bank1
 12061  1C2A  084F               	movf	(?___ftdiv+1)^(0+128),w
 12062  1C2B  0023               	movlb	3	; select bank3
 12063  1C2C  00EB               	movwf	(_scaleA10kPot$2851+1)^(0+384)
 12064  1C2D  0021               	movlb	1	; select bank1
 12065  1C2E  0850               	movf	(?___ftdiv+2)^(0+128),w
 12066  1C2F  0023               	movlb	3	; select bank3
 12067  1C30  00EC               	movwf	(_scaleA10kPot$2851+2)^(0+384)
 12068                           
 12069                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12070  1C31  306A               	movlw	106
 12071  1C32  0022               	movlb	2	; select bank2
 12072  1C33  00D8               	movwf	pow@y^(0+256)
 12073  1C34  309C               	movlw	156
 12074  1C35  00D9               	movwf	(pow@y+1)^(0+256)
 12075  1C36  30BF               	movlw	191
 12076  1C37  00DA               	movwf	(pow@y+2)^(0+256)
 12077  1C38  0023               	movlb	3	; select bank3
 12078  1C39  086A               	movf	_scaleA10kPot$2851^(0+384),w
 12079  1C3A  0022               	movlb	2	; select bank2
 12080  1C3B  00D5               	movwf	pow@x^(0+256)
 12081  1C3C  0023               	movlb	3	; select bank3
 12082  1C3D  086B               	movf	(_scaleA10kPot$2851+1)^(0+384),w
 12083  1C3E  0022               	movlb	2	; select bank2
 12084  1C3F  00D6               	movwf	(pow@x+1)^(0+256)
 12085  1C40  0023               	movlb	3	; select bank3
 12086  1C41  086C               	movf	(_scaleA10kPot$2851+2)^(0+384),w
 12087  1C42  0022               	movlb	2	; select bank2
 12088  1C43  00D7               	movwf	(pow@x+2)^(0+256)
 12089  1C44  3191  2127  319B   	fcall	_pow
 12090  1C47  0022               	movlb	2	; select bank2
 12091  1C48  0855               	movf	?_pow^(0+256),w
 12092  1C49  0023               	movlb	3	; select bank3
 12093  1C4A  00ED               	movwf	_scaleA10kPot$2852^(0+384)
 12094  1C4B  0022               	movlb	2	; select bank2
 12095  1C4C  0856               	movf	(?_pow+1)^(0+256),w
 12096  1C4D  0023               	movlb	3	; select bank3
 12097  1C4E  00EE               	movwf	(_scaleA10kPot$2852+1)^(0+384)
 12098  1C4F  0022               	movlb	2	; select bank2
 12099  1C50  0857               	movf	(?_pow+2)^(0+256),w
 12100  1C51  0023               	movlb	3	; select bank3
 12101  1C52  00EF               	movwf	(_scaleA10kPot$2852+2)^(0+384)
 12102                           
 12103                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12104  1C53  30E3               	movlw	227
 12105  1C54  0021               	movlb	1	; select bank1
 12106  1C55  00AE               	movwf	___ftmul@f1^(0+128)
 12107  1C56  300B               	movlw	11
 12108  1C57  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12109  1C58  3041               	movlw	65
 12110  1C59  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12111  1C5A  0023               	movlb	3	; select bank3
 12112  1C5B  086D               	movf	_scaleA10kPot$2852^(0+384),w
 12113  1C5C  0021               	movlb	1	; select bank1
 12114  1C5D  00B1               	movwf	___ftmul@f2^(0+128)
 12115  1C5E  0023               	movlb	3	; select bank3
 12116  1C5F  086E               	movf	(_scaleA10kPot$2852+1)^(0+384),w
 12117  1C60  0021               	movlb	1	; select bank1
 12118  1C61  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12119  1C62  0023               	movlb	3	; select bank3
 12120  1C63  086F               	movf	(_scaleA10kPot$2852+2)^(0+384),w
 12121  1C64  0021               	movlb	1	; select bank1
 12122  1C65  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12123  1C66  319E  267B  319B   	fcall	___ftmul
 12124  1C69  0021               	movlb	1	; select bank1
 12125  1C6A  082E               	movf	?___ftmul^(0+128),w
 12126  1C6B  0023               	movlb	3	; select bank3
 12127  1C6C  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 12128  1C6D  0021               	movlb	1	; select bank1
 12129  1C6E  082F               	movf	(?___ftmul+1)^(0+128),w
 12130  1C6F  0023               	movlb	3	; select bank3
 12131  1C70  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12132  1C71  0021               	movlb	1	; select bank1
 12133  1C72  0830               	movf	(?___ftmul+2)^(0+128),w
 12134  1C73  0023               	movlb	3	; select bank3
 12135  1C74  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12136                           
 12137                           ;user.c: 207: return (int)(pwm);
 12138  1C75  0867               	movf	scaleA10kPot@pwm^(0+384),w
 12139  1C76  0022               	movlb	2	; select bank2
 12140  1C77  00A0               	movwf	___fttol@f1^(0+256)
 12141  1C78  0023               	movlb	3	; select bank3
 12142  1C79  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12143  1C7A  0022               	movlb	2	; select bank2
 12144  1C7B  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12145  1C7C  0023               	movlb	3	; select bank3
 12146  1C7D  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12147  1C7E  0022               	movlb	2	; select bank2
 12148  1C7F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12149  1C80  319A  225A         	fcall	___fttol
 12150  1C82  0022               	movlb	2	; select bank2
 12151  1C83  0821               	movf	(?___fttol^(0+256)+1),w
 12152  1C84  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12153  1C85  0820               	movf	?___fttol^(0+256),w
 12154  1C86  00E7               	movwf	?_scaleA10kPot^(0+256)
 12155  1C87  0008               	return
 12156  1C88                     __end_of_scaleA10kPot:	
 12157                           
 12158                           	psect	text26
 12159  19D5                     __ptext26:	
 12160 ;; *************** function _scaleA100kPot *****************
 12161 ;; Defined at:
 12162 ;;		line 188 in file "user.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;  input           3   71[BANK2 ] int 
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  pwm             3    0[BANK3 ] float 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  2   71[BANK2 ] int 
 12169 ;; Registers used:
 12170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12176 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12177 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12179 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12180 ;;Total ram usage:       12 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    8
 12183 ;; This function calls:
 12184 ;;		___ftdiv
 12185 ;;		___ftmul
 12186 ;;		___fttol
 12187 ;;		_pow
 12188 ;; This function is called by:
 12189 ;;		_main
 12190 ;; This function uses a non-reentrant model
 12191 ;;
 12192                           
 12193                           
 12194                           ;psect for function _scaleA100kPot
 12195  19D5                     _scaleA100kPot:	
 12196                           
 12197                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12198                           
 12199                           ;incstack = 0
 12200                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12201  19D5  0022               	movlb	2	; select bank2
 12202  19D6  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12203  19D7  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12204  19D8  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12205  19D9  1D03               	skipz
 12206  19DA  29E1               	goto	l9218
 12207  19DB  3000               	movlw	0
 12208  19DC  00E7               	movwf	scaleA100kPot@input^(0+256)
 12209  19DD  3080               	movlw	128
 12210  19DE  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12211  19DF  303F               	movlw	63
 12212  19E0  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12213  19E1                     l9218:	
 12214                           
 12215                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12216  19E1  30C0               	movlw	192
 12217  19E2  0021               	movlb	1	; select bank1
 12218  19E3  00CE               	movwf	___ftdiv@f2^(0+128)
 12219  19E4  307F               	movlw	127
 12220  19E5  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12221  19E6  3044               	movlw	68
 12222  19E7  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12223  19E8  0022               	movlb	2	; select bank2
 12224  19E9  0867               	movf	scaleA100kPot@input^(0+256),w
 12225  19EA  0021               	movlb	1	; select bank1
 12226  19EB  00D1               	movwf	___ftdiv@f1^(0+128)
 12227  19EC  0022               	movlb	2	; select bank2
 12228  19ED  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12229  19EE  0021               	movlb	1	; select bank1
 12230  19EF  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12231  19F0  0022               	movlb	2	; select bank2
 12232  19F1  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12233  19F2  0021               	movlb	1	; select bank1
 12234  19F3  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12235  19F4  319D  251F  3199   	fcall	___ftdiv
 12236  19F7  0021               	movlb	1	; select bank1
 12237  19F8  084E               	movf	?___ftdiv^(0+128),w
 12238  19F9  0023               	movlb	3	; select bank3
 12239  19FA  00EA               	movwf	_scaleA100kPot$2847^(0+384)
 12240  19FB  0021               	movlb	1	; select bank1
 12241  19FC  084F               	movf	(?___ftdiv+1)^(0+128),w
 12242  19FD  0023               	movlb	3	; select bank3
 12243  19FE  00EB               	movwf	(_scaleA100kPot$2847+1)^(0+384)
 12244  19FF  0021               	movlb	1	; select bank1
 12245  1A00  0850               	movf	(?___ftdiv+2)^(0+128),w
 12246  1A01  0023               	movlb	3	; select bank3
 12247  1A02  00EC               	movwf	(_scaleA100kPot$2847+2)^(0+384)
 12248                           
 12249                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12250  1A03  3056               	movlw	86
 12251  1A04  0022               	movlb	2	; select bank2
 12252  1A05  00D8               	movwf	pow@y^(0+256)
 12253  1A06  308E               	movlw	142
 12254  1A07  00D9               	movwf	(pow@y+1)^(0+256)
 12255  1A08  30BF               	movlw	191
 12256  1A09  00DA               	movwf	(pow@y+2)^(0+256)
 12257  1A0A  0023               	movlb	3	; select bank3
 12258  1A0B  086A               	movf	_scaleA100kPot$2847^(0+384),w
 12259  1A0C  0022               	movlb	2	; select bank2
 12260  1A0D  00D5               	movwf	pow@x^(0+256)
 12261  1A0E  0023               	movlb	3	; select bank3
 12262  1A0F  086B               	movf	(_scaleA100kPot$2847+1)^(0+384),w
 12263  1A10  0022               	movlb	2	; select bank2
 12264  1A11  00D6               	movwf	(pow@x+1)^(0+256)
 12265  1A12  0023               	movlb	3	; select bank3
 12266  1A13  086C               	movf	(_scaleA100kPot$2847+2)^(0+384),w
 12267  1A14  0022               	movlb	2	; select bank2
 12268  1A15  00D7               	movwf	(pow@x+2)^(0+256)
 12269  1A16  3191  2127  3199   	fcall	_pow
 12270  1A19  0022               	movlb	2	; select bank2
 12271  1A1A  0855               	movf	?_pow^(0+256),w
 12272  1A1B  0023               	movlb	3	; select bank3
 12273  1A1C  00ED               	movwf	_scaleA100kPot$2848^(0+384)
 12274  1A1D  0022               	movlb	2	; select bank2
 12275  1A1E  0856               	movf	(?_pow+1)^(0+256),w
 12276  1A1F  0023               	movlb	3	; select bank3
 12277  1A20  00EE               	movwf	(_scaleA100kPot$2848+1)^(0+384)
 12278  1A21  0022               	movlb	2	; select bank2
 12279  1A22  0857               	movf	(?_pow+2)^(0+256),w
 12280  1A23  0023               	movlb	3	; select bank3
 12281  1A24  00EF               	movwf	(_scaleA100kPot$2848+2)^(0+384)
 12282                           
 12283                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12284  1A25  309F               	movlw	159
 12285  1A26  0021               	movlb	1	; select bank1
 12286  1A27  00AE               	movwf	___ftmul@f1^(0+128)
 12287  1A28  3068               	movlw	104
 12288  1A29  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12289  1A2A  3040               	movlw	64
 12290  1A2B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12291  1A2C  0023               	movlb	3	; select bank3
 12292  1A2D  086D               	movf	_scaleA100kPot$2848^(0+384),w
 12293  1A2E  0021               	movlb	1	; select bank1
 12294  1A2F  00B1               	movwf	___ftmul@f2^(0+128)
 12295  1A30  0023               	movlb	3	; select bank3
 12296  1A31  086E               	movf	(_scaleA100kPot$2848+1)^(0+384),w
 12297  1A32  0021               	movlb	1	; select bank1
 12298  1A33  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12299  1A34  0023               	movlb	3	; select bank3
 12300  1A35  086F               	movf	(_scaleA100kPot$2848+2)^(0+384),w
 12301  1A36  0021               	movlb	1	; select bank1
 12302  1A37  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12303  1A38  319E  267B  3199   	fcall	___ftmul
 12304  1A3B  0021               	movlb	1	; select bank1
 12305  1A3C  082E               	movf	?___ftmul^(0+128),w
 12306  1A3D  0023               	movlb	3	; select bank3
 12307  1A3E  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 12308  1A3F  0021               	movlb	1	; select bank1
 12309  1A40  082F               	movf	(?___ftmul+1)^(0+128),w
 12310  1A41  0023               	movlb	3	; select bank3
 12311  1A42  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12312  1A43  0021               	movlb	1	; select bank1
 12313  1A44  0830               	movf	(?___ftmul+2)^(0+128),w
 12314  1A45  0023               	movlb	3	; select bank3
 12315  1A46  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12316                           
 12317                           ;user.c: 192: return (int)(pwm);
 12318  1A47  0867               	movf	scaleA100kPot@pwm^(0+384),w
 12319  1A48  0022               	movlb	2	; select bank2
 12320  1A49  00A0               	movwf	___fttol@f1^(0+256)
 12321  1A4A  0023               	movlb	3	; select bank3
 12322  1A4B  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12323  1A4C  0022               	movlb	2	; select bank2
 12324  1A4D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12325  1A4E  0023               	movlb	3	; select bank3
 12326  1A4F  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12327  1A50  0022               	movlb	2	; select bank2
 12328  1A51  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12329  1A52  319A  225A         	fcall	___fttol
 12330  1A54  0022               	movlb	2	; select bank2
 12331  1A55  0821               	movf	(?___fttol^(0+256)+1),w
 12332  1A56  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12333  1A57  0820               	movf	?___fttol^(0+256),w
 12334  1A58  00E7               	movwf	?_scaleA100kPot^(0+256)
 12335  1A59  0008               	return
 12336  1A5A                     __end_of_scaleA100kPot:	
 12337                           
 12338                           	psect	text27
 12339  1127                     __ptext27:	
 12340 ;; *************** function _pow *****************
 12341 ;; Defined at:
 12342 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;  x               3   53[BANK2 ] int 
 12345 ;;  y               3   56[BANK2 ] int 
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;  yi              4   67[BANK2 ] unsigned long 
 12348 ;;  sign            1   66[BANK2 ] unsigned char 
 12349 ;; Return value:  Size  Location     Type
 12350 ;;                  3   53[BANK2 ] unsigned char 
 12351 ;; Registers used:
 12352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12353 ;; Tracked objects:
 12354 ;;		On entry : 0/0
 12355 ;;		On exit  : 0/0
 12356 ;;		Unchanged: 0/0
 12357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12358 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12359 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12360 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12361 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12362 ;;Total ram usage:       18 bytes
 12363 ;; Hardware stack levels used:    1
 12364 ;; Hardware stack levels required when called:    7
 12365 ;; This function calls:
 12366 ;;		___ftge
 12367 ;;		___ftmul
 12368 ;;		___ftneg
 12369 ;;		___fttol
 12370 ;;		___lltoft
 12371 ;;		_exp
 12372 ;;		_log
 12373 ;; This function is called by:
 12374 ;;		_scaleA100kPot
 12375 ;;		_scaleA10kPot
 12376 ;;		_scaleiA10kPot
 12377 ;;		_scaleiA100kPot
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           
 12382                           ;psect for function _pow
 12383  1127                     _pow:	
 12384                           
 12385                           ;incstack = 0
 12386                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12387  1127  0022               	movlb	2	; select bank2
 12388  1128  01E2               	clrf	pow@sign^(0+256)
 12389  1129  0857               	movf	(pow@x+2)^(0+256),w
 12390  112A  0456               	iorwf	(pow@x+1)^(0+256),w
 12391  112B  0455               	iorwf	pow@x^(0+256),w
 12392  112C  1D03               	skipz
 12393  112D  2953               	goto	l8454
 12394  112E  3000               	movlw	0
 12395  112F  0021               	movlb	1	; select bank1
 12396  1130  00A0               	movwf	___ftge@ff1^(0+128)
 12397  1131  3000               	movlw	0
 12398  1132  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12399  1133  3000               	movlw	0
 12400  1134  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12401  1135  0022               	movlb	2	; select bank2
 12402  1136  0858               	movf	pow@y^(0+256),w
 12403  1137  0021               	movlb	1	; select bank1
 12404  1138  00A3               	movwf	___ftge@ff2^(0+128)
 12405  1139  0022               	movlb	2	; select bank2
 12406  113A  0859               	movf	(pow@y+1)^(0+256),w
 12407  113B  0021               	movlb	1	; select bank1
 12408  113C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12409  113D  0022               	movlb	2	; select bank2
 12410  113E  085A               	movf	(pow@y+2)^(0+256),w
 12411  113F  0021               	movlb	1	; select bank1
 12412  1140  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12413  1141  31A1  217B  3191   	fcall	___ftge
 12414  1144  1C03               	btfss	3,0
 12415  1145  294B               	goto	l2332
 12416  1146  3021               	movlw	33
 12417  1147  0024               	movlb	4	; select bank4
 12418  1148  00CD               	movwf	_errno^(0+512)
 12419  1149  3000               	movlw	0
 12420  114A  00CE               	movwf	(_errno^(0+512)+1)
 12421  114B                     l2332:	
 12422  114B  3000               	movlw	0
 12423  114C  0022               	movlb	2	; select bank2
 12424  114D  00D5               	movwf	?_pow^(0+256)
 12425  114E  3000               	movlw	0
 12426  114F  00D6               	movwf	(?_pow+1)^(0+256)
 12427  1150  3000               	movlw	0
 12428  1151  00D7               	movwf	(?_pow+2)^(0+256)
 12429  1152  0008               	return
 12430  1153                     l8454:	
 12431  1153  085A               	movf	(pow@y+2)^(0+256),w
 12432  1154  0459               	iorwf	(pow@y+1)^(0+256),w
 12433  1155  0458               	iorwf	pow@y^(0+256),w
 12434  1156  1D03               	skipz
 12435  1157  295F               	goto	l8460
 12436  1158  3000               	movlw	0
 12437  1159  00D5               	movwf	?_pow^(0+256)
 12438  115A  3080               	movlw	128
 12439  115B  00D6               	movwf	(?_pow+1)^(0+256)
 12440  115C  303F               	movlw	63
 12441  115D  00D7               	movwf	(?_pow+2)^(0+256)
 12442  115E  0008               	return
 12443  115F                     l8460:	
 12444  115F  0855               	movf	pow@x^(0+256),w
 12445  1160  0021               	movlb	1	; select bank1
 12446  1161  00A0               	movwf	___ftge@ff1^(0+128)
 12447  1162  0022               	movlb	2	; select bank2
 12448  1163  0856               	movf	(pow@x+1)^(0+256),w
 12449  1164  0021               	movlb	1	; select bank1
 12450  1165  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12451  1166  0022               	movlb	2	; select bank2
 12452  1167  0857               	movf	(pow@x+2)^(0+256),w
 12453  1168  0021               	movlb	1	; select bank1
 12454  1169  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12455  116A  3000               	movlw	0
 12456  116B  00A3               	movwf	___ftge@ff2^(0+128)
 12457  116C  3000               	movlw	0
 12458  116D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12459  116E  3000               	movlw	0
 12460  116F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12461  1170  31A1  217B  3191   	fcall	___ftge
 12462  1173  1803               	btfsc	3,0
 12463  1174  29D9               	goto	l8472
 12464  1175  0022               	movlb	2	; select bank2
 12465  1176  0858               	movf	pow@y^(0+256),w
 12466  1177  00A0               	movwf	___fttol@f1^(0+256)
 12467  1178  0859               	movf	(pow@y+1)^(0+256),w
 12468  1179  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12469  117A  085A               	movf	(pow@y+2)^(0+256),w
 12470  117B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12471  117C  319A  225A  3191   	fcall	___fttol
 12472  117F  0022               	movlb	2	; select bank2
 12473  1180  0823               	movf	(?___fttol+3)^(0+256),w
 12474  1181  00E6               	movwf	(pow@yi+3)^(0+256)
 12475  1182  0822               	movf	(?___fttol+2)^(0+256),w
 12476  1183  00E5               	movwf	(pow@yi+2)^(0+256)
 12477  1184  0821               	movf	(?___fttol+1)^(0+256),w
 12478  1185  00E4               	movwf	(pow@yi+1)^(0+256)
 12479  1186  0820               	movf	?___fttol^(0+256),w
 12480  1187  00E3               	movwf	pow@yi^(0+256)
 12481  1188  0866               	movf	(pow@yi+3)^(0+256),w
 12482  1189  0021               	movlb	1	; select bank1
 12483  118A  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12484  118B  0022               	movlb	2	; select bank2
 12485  118C  0865               	movf	(pow@yi+2)^(0+256),w
 12486  118D  0021               	movlb	1	; select bank1
 12487  118E  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12488  118F  0022               	movlb	2	; select bank2
 12489  1190  0864               	movf	(pow@yi+1)^(0+256),w
 12490  1191  0021               	movlb	1	; select bank1
 12491  1192  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12492  1193  0022               	movlb	2	; select bank2
 12493  1194  0863               	movf	pow@yi^(0+256),w
 12494  1195  0021               	movlb	1	; select bank1
 12495  1196  00A8               	movwf	___lltoft@c^(0+128)
 12496  1197  31AF  274D  3191   	fcall	___lltoft
 12497  119A  0022               	movlb	2	; select bank2
 12498  119B  085A               	movf	(pow@y+2)^(0+256),w
 12499  119C  0021               	movlb	1	; select bank1
 12500  119D  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12501  119E  1D03               	skipz
 12502  119F  29AA               	goto	u8905
 12503  11A0  0022               	movlb	2	; select bank2
 12504  11A1  0859               	movf	(pow@y+1)^(0+256),w
 12505  11A2  0021               	movlb	1	; select bank1
 12506  11A3  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12507  11A4  1D03               	skipz
 12508  11A5  29AA               	goto	u8905
 12509  11A6  0022               	movlb	2	; select bank2
 12510  11A7  0858               	movf	pow@y^(0+256),w
 12511  11A8  0021               	movlb	1	; select bank1
 12512  11A9  0628               	xorwf	?___lltoft^(0+128),w
 12513  11AA                     u8905:	
 12514  11AA  1903               	skipnz
 12515  11AB  29B9               	goto	l8468
 12516  11AC  3021               	movlw	33
 12517  11AD  0024               	movlb	4	; select bank4
 12518  11AE  00CD               	movwf	_errno^(0+512)
 12519  11AF  3000               	movlw	0
 12520  11B0  00CE               	movwf	(_errno^(0+512)+1)
 12521  11B1  3000               	movlw	0
 12522  11B2  0022               	movlb	2	; select bank2
 12523  11B3  00D5               	movwf	?_pow^(0+256)
 12524  11B4  3000               	movlw	0
 12525  11B5  00D6               	movwf	(?_pow+1)^(0+256)
 12526  11B6  3000               	movlw	0
 12527  11B7  00D7               	movwf	(?_pow+2)^(0+256)
 12528  11B8  0008               	return
 12529  11B9                     l8468:	
 12530  11B9  0022               	movlb	2	; select bank2
 12531  11BA  0863               	movf	pow@yi^(0+256),w
 12532  11BB  3901               	andlw	1
 12533  11BC  00DB               	movwf	??_pow^(0+256)
 12534  11BD  085B               	movf	??_pow^(0+256),w
 12535  11BE  00E2               	movwf	pow@sign^(0+256)
 12536  11BF  0855               	movf	pow@x^(0+256),w
 12537  11C0  0021               	movlb	1	; select bank1
 12538  11C1  00BE               	movwf	___ftneg@f1^(0+128)
 12539  11C2  0022               	movlb	2	; select bank2
 12540  11C3  0856               	movf	(pow@x+1)^(0+256),w
 12541  11C4  0021               	movlb	1	; select bank1
 12542  11C5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12543  11C6  0022               	movlb	2	; select bank2
 12544  11C7  0857               	movf	(pow@x+2)^(0+256),w
 12545  11C8  0021               	movlb	1	; select bank1
 12546  11C9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12547  11CA  31AD  2593  3191   	fcall	___ftneg
 12548  11CD  0021               	movlb	1	; select bank1
 12549  11CE  083E               	movf	?___ftneg^(0+128),w
 12550  11CF  0022               	movlb	2	; select bank2
 12551  11D0  00D5               	movwf	pow@x^(0+256)
 12552  11D1  0021               	movlb	1	; select bank1
 12553  11D2  083F               	movf	(?___ftneg+1)^(0+128),w
 12554  11D3  0022               	movlb	2	; select bank2
 12555  11D4  00D6               	movwf	(pow@x+1)^(0+256)
 12556  11D5  0021               	movlb	1	; select bank1
 12557  11D6  0840               	movf	(?___ftneg+2)^(0+128),w
 12558  11D7  0022               	movlb	2	; select bank2
 12559  11D8  00D7               	movwf	(pow@x+2)^(0+256)
 12560  11D9                     l8472:	
 12561  11D9  0022               	movlb	2	; select bank2
 12562  11DA  0855               	movf	pow@x^(0+256),w
 12563  11DB  00BE               	movwf	log@x^(0+256)
 12564  11DC  0856               	movf	(pow@x+1)^(0+256),w
 12565  11DD  00BF               	movwf	(log@x+1)^(0+256)
 12566  11DE  0857               	movf	(pow@x+2)^(0+256),w
 12567  11DF  00C0               	movwf	(log@x+2)^(0+256)
 12568  11E0  319F  272F  3191   	fcall	_log
 12569  11E3  0022               	movlb	2	; select bank2
 12570  11E4  083E               	movf	?_log^(0+256),w
 12571  11E5  00DC               	movwf	_pow$2860^(0+256)
 12572  11E6  083F               	movf	(?_log+1)^(0+256),w
 12573  11E7  00DD               	movwf	(_pow$2860+1)^(0+256)
 12574  11E8  0840               	movf	(?_log+2)^(0+256),w
 12575  11E9  00DE               	movwf	(_pow$2860+2)^(0+256)
 12576  11EA  0858               	movf	pow@y^(0+256),w
 12577  11EB  0021               	movlb	1	; select bank1
 12578  11EC  00AE               	movwf	___ftmul@f1^(0+128)
 12579  11ED  0022               	movlb	2	; select bank2
 12580  11EE  0859               	movf	(pow@y+1)^(0+256),w
 12581  11EF  0021               	movlb	1	; select bank1
 12582  11F0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12583  11F1  0022               	movlb	2	; select bank2
 12584  11F2  085A               	movf	(pow@y+2)^(0+256),w
 12585  11F3  0021               	movlb	1	; select bank1
 12586  11F4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12587  11F5  0022               	movlb	2	; select bank2
 12588  11F6  085C               	movf	_pow$2860^(0+256),w
 12589  11F7  0021               	movlb	1	; select bank1
 12590  11F8  00B1               	movwf	___ftmul@f2^(0+128)
 12591  11F9  0022               	movlb	2	; select bank2
 12592  11FA  085D               	movf	(_pow$2860+1)^(0+256),w
 12593  11FB  0021               	movlb	1	; select bank1
 12594  11FC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12595  11FD  0022               	movlb	2	; select bank2
 12596  11FE  085E               	movf	(_pow$2860+2)^(0+256),w
 12597  11FF  0021               	movlb	1	; select bank1
 12598  1200  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12599  1201  319E  267B  3191   	fcall	___ftmul
 12600  1204  0021               	movlb	1	; select bank1
 12601  1205  082E               	movf	?___ftmul^(0+128),w
 12602  1206  0022               	movlb	2	; select bank2
 12603  1207  00DF               	movwf	_pow$2861^(0+256)
 12604  1208  0021               	movlb	1	; select bank1
 12605  1209  082F               	movf	(?___ftmul+1)^(0+128),w
 12606  120A  0022               	movlb	2	; select bank2
 12607  120B  00E0               	movwf	(_pow$2861+1)^(0+256)
 12608  120C  0021               	movlb	1	; select bank1
 12609  120D  0830               	movf	(?___ftmul+2)^(0+128),w
 12610  120E  0022               	movlb	2	; select bank2
 12611  120F  00E1               	movwf	(_pow$2861+2)^(0+256)
 12612  1210  085F               	movf	_pow$2861^(0+256),w
 12613  1211  00C8               	movwf	exp@x^(0+256)
 12614  1212  0860               	movf	(_pow$2861+1)^(0+256),w
 12615  1213  00C9               	movwf	(exp@x+1)^(0+256)
 12616  1214  0861               	movf	(_pow$2861+2)^(0+256),w
 12617  1215  00CA               	movwf	(exp@x+2)^(0+256)
 12618  1216  3193  2363  3191   	fcall	_exp
 12619  1219  0022               	movlb	2	; select bank2
 12620  121A  0848               	movf	?_exp^(0+256),w
 12621  121B  00D5               	movwf	pow@x^(0+256)
 12622  121C  0849               	movf	(?_exp+1)^(0+256),w
 12623  121D  00D6               	movwf	(pow@x+1)^(0+256)
 12624  121E  084A               	movf	(?_exp+2)^(0+256),w
 12625  121F  00D7               	movwf	(pow@x+2)^(0+256)
 12626  1220  0862               	movf	pow@sign^(0+256),w
 12627  1221  1903               	btfsc	3,2
 12628  1222  0008               	return
 12629  1223  0855               	movf	pow@x^(0+256),w
 12630  1224  0021               	movlb	1	; select bank1
 12631  1225  00BE               	movwf	___ftneg@f1^(0+128)
 12632  1226  0022               	movlb	2	; select bank2
 12633  1227  0856               	movf	(pow@x+1)^(0+256),w
 12634  1228  0021               	movlb	1	; select bank1
 12635  1229  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12636  122A  0022               	movlb	2	; select bank2
 12637  122B  0857               	movf	(pow@x+2)^(0+256),w
 12638  122C  0021               	movlb	1	; select bank1
 12639  122D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12640  122E  31AD  2593         	fcall	___ftneg
 12641  1230  0021               	movlb	1	; select bank1
 12642  1231  083E               	movf	?___ftneg^(0+128),w
 12643  1232  0022               	movlb	2	; select bank2
 12644  1233  00D5               	movwf	?_pow^(0+256)
 12645  1234  0021               	movlb	1	; select bank1
 12646  1235  083F               	movf	(?___ftneg+1)^(0+128),w
 12647  1236  0022               	movlb	2	; select bank2
 12648  1237  00D6               	movwf	(?_pow+1)^(0+256)
 12649  1238  0021               	movlb	1	; select bank1
 12650  1239  0840               	movf	(?___ftneg+2)^(0+128),w
 12651  123A  0022               	movlb	2	; select bank2
 12652  123B  00D7               	movwf	(?_pow+2)^(0+256)
 12653  123C  0008               	return
 12654  123D                     __end_of_pow:	
 12655                           
 12656                           	psect	text28
 12657  1F2F                     __ptext28:	
 12658 ;; *************** function _log *****************
 12659 ;; Defined at:
 12660 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12661 ;; Parameters:    Size  Location     Type
 12662 ;;  x               3   30[BANK2 ] unsigned char 
 12663 ;; Auto vars:     Size  Location     Type
 12664 ;;  exponent        2   34[BANK2 ] int 
 12665 ;; Return value:  Size  Location     Type
 12666 ;;                  3   30[BANK2 ] int 
 12667 ;; Registers used:
 12668 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12669 ;; Tracked objects:
 12670 ;;		On entry : 0/0
 12671 ;;		On exit  : 0/0
 12672 ;;		Unchanged: 0/0
 12673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12674 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12675 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12676 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12677 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12678 ;;Total ram usage:        6 bytes
 12679 ;; Hardware stack levels used:    1
 12680 ;; Hardware stack levels required when called:    6
 12681 ;; This function calls:
 12682 ;;		___awtoft
 12683 ;;		___ftadd
 12684 ;;		___ftge
 12685 ;;		___ftmul
 12686 ;;		_eval_poly
 12687 ;;		_frexp
 12688 ;; This function is called by:
 12689 ;;		_pow
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           
 12694                           ;psect for function _log
 12695  1F2F                     _log:	
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12699  1F2F  0022               	movlb	2	; select bank2
 12700  1F30  083E               	movf	log@x^(0+256),w
 12701  1F31  0021               	movlb	1	; select bank1
 12702  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12703  1F33  0022               	movlb	2	; select bank2
 12704  1F34  083F               	movf	(log@x+1)^(0+256),w
 12705  1F35  0021               	movlb	1	; select bank1
 12706  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12707  1F37  0022               	movlb	2	; select bank2
 12708  1F38  0840               	movf	(log@x+2)^(0+256),w
 12709  1F39  0021               	movlb	1	; select bank1
 12710  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12711  1F3B  3000               	movlw	0
 12712  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12713  1F3D  3000               	movlw	0
 12714  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12715  1F3F  3000               	movlw	0
 12716  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12717  1F41  31A1  217B  319F   	fcall	___ftge
 12718  1F44  1803               	btfsc	3,0
 12719  1F45  2F53               	goto	l8326
 12720  1F46  3021               	movlw	33
 12721  1F47  0024               	movlb	4	; select bank4
 12722  1F48  00CD               	movwf	_errno^(0+512)
 12723  1F49  3000               	movlw	0
 12724  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12725  1F4B  3000               	movlw	0
 12726  1F4C  0022               	movlb	2	; select bank2
 12727  1F4D  00BE               	movwf	?_log^(0+256)
 12728  1F4E  3000               	movlw	0
 12729  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12730  1F50  3000               	movlw	0
 12731  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12732  1F52  0008               	return
 12733  1F53                     l8326:	
 12734  1F53  0022               	movlb	2	; select bank2
 12735  1F54  0840               	movf	(log@x+2)^(0+256),w
 12736  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12737  1F56  043E               	iorwf	log@x^(0+256),w
 12738  1F57  1D03               	skipz
 12739  1F58  2F66               	goto	l8332
 12740  1F59  3022               	movlw	34
 12741  1F5A  0024               	movlb	4	; select bank4
 12742  1F5B  00CD               	movwf	_errno^(0+512)
 12743  1F5C  3000               	movlw	0
 12744  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12745  1F5E  3000               	movlw	0
 12746  1F5F  0022               	movlb	2	; select bank2
 12747  1F60  00BE               	movwf	?_log^(0+256)
 12748  1F61  3000               	movlw	0
 12749  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12750  1F63  3000               	movlw	0
 12751  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12752  1F65  0008               	return
 12753  1F66                     l8332:	
 12754  1F66  3000               	movlw	0
 12755  1F67  0021               	movlb	1	; select bank1
 12756  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12757  1F69  3080               	movlw	128
 12758  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12759  1F6B  30BF               	movlw	191
 12760  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12761  1F6D  3000               	movlw	0
 12762  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12763  1F6F  3000               	movlw	0
 12764  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12765  1F71  3040               	movlw	64
 12766  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12767  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12768  1F74  0022               	movlb	2	; select bank2
 12769  1F75  00C1               	movwf	??_log^(0+256)
 12770  1F76  0841               	movf	??_log^(0+256),w
 12771  1F77  0021               	movlb	1	; select bank1
 12772  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12773  1F79  0022               	movlb	2	; select bank2
 12774  1F7A  083E               	movf	log@x^(0+256),w
 12775  1F7B  0021               	movlb	1	; select bank1
 12776  1F7C  00A0               	movwf	frexp@value^(0+128)
 12777  1F7D  0022               	movlb	2	; select bank2
 12778  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12779  1F7F  0021               	movlb	1	; select bank1
 12780  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12781  1F81  0022               	movlb	2	; select bank2
 12782  1F82  0840               	movf	(log@x+2)^(0+256),w
 12783  1F83  0021               	movlb	1	; select bank1
 12784  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12785  1F85  31A2  226E  319F   	fcall	_frexp
 12786  1F88  0021               	movlb	1	; select bank1
 12787  1F89  0820               	movf	?_frexp^(0+128),w
 12788  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12789  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12790  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12791  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12792  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12793  1F8F  319E  267B  319F   	fcall	___ftmul
 12794  1F92  0021               	movlb	1	; select bank1
 12795  1F93  082E               	movf	?___ftmul^(0+128),w
 12796  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12797  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12798  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12799  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12800  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12801  1F99  3190  2031  319F   	fcall	___ftadd
 12802  1F9C  0021               	movlb	1	; select bank1
 12803  1F9D  0841               	movf	?___ftadd^(0+128),w
 12804  1F9E  0022               	movlb	2	; select bank2
 12805  1F9F  00BE               	movwf	log@x^(0+256)
 12806  1FA0  0021               	movlb	1	; select bank1
 12807  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12808  1FA2  0022               	movlb	2	; select bank2
 12809  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12810  1FA4  0021               	movlb	1	; select bank1
 12811  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12812  1FA6  0022               	movlb	2	; select bank2
 12813  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12814  1FA8  30FF               	movlw	255
 12815  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12816  1FAA  30FF               	movlw	255
 12817  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12818  1FAC  083E               	movf	log@x^(0+256),w
 12819  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12820  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12821  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12822  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12823  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12824  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12825  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12826  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12827  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12828  1FB6  3008               	movlw	8
 12829  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12830  1FB8  3000               	movlw	0
 12831  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12832  1FBA  31A6  269C  319F   	fcall	_eval_poly
 12833  1FBD  0022               	movlb	2	; select bank2
 12834  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12835  1FBF  00BE               	movwf	log@x^(0+256)
 12836  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12837  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12838  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12839  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12840  1FC4  083E               	movf	log@x^(0+256),w
 12841  1FC5  0021               	movlb	1	; select bank1
 12842  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12843  1FC7  0022               	movlb	2	; select bank2
 12844  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12845  1FC9  0021               	movlb	1	; select bank1
 12846  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12847  1FCB  0022               	movlb	2	; select bank2
 12848  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12849  1FCD  0021               	movlb	1	; select bank1
 12850  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12851  1FCF  3072               	movlw	114
 12852  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12853  1FD1  3031               	movlw	49
 12854  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12855  1FD3  303F               	movlw	63
 12856  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12857  1FD5  0022               	movlb	2	; select bank2
 12858  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12859  1FD7  0021               	movlb	1	; select bank1
 12860  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12861  1FD9  0022               	movlb	2	; select bank2
 12862  1FDA  0842               	movf	log@exponent^(0+256),w
 12863  1FDB  0021               	movlb	1	; select bank1
 12864  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12865  1FDD  31AE  26E2  319F   	fcall	___awtoft
 12866  1FE0  0021               	movlb	1	; select bank1
 12867  1FE1  0828               	movf	?___awtoft^(0+128),w
 12868  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12869  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12870  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12871  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12872  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12873  1FE7  319E  267B  319F   	fcall	___ftmul
 12874  1FEA  0021               	movlb	1	; select bank1
 12875  1FEB  082E               	movf	?___ftmul^(0+128),w
 12876  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12877  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 12878  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12879  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 12880  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12881  1FF1  3190  2031         	fcall	___ftadd
 12882  1FF3  0021               	movlb	1	; select bank1
 12883  1FF4  0841               	movf	?___ftadd^(0+128),w
 12884  1FF5  0022               	movlb	2	; select bank2
 12885  1FF6  00BE               	movwf	?_log^(0+256)
 12886  1FF7  0021               	movlb	1	; select bank1
 12887  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 12888  1FF9  0022               	movlb	2	; select bank2
 12889  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 12890  1FFB  0021               	movlb	1	; select bank1
 12891  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 12892  1FFD  0022               	movlb	2	; select bank2
 12893  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 12894  1FFF  0008               	return
 12895  2000                     __end_of_log:	
 12896                           
 12897                           	psect	text29
 12898  1363                     __ptext29:	
 12899 ;; *************** function _exp *****************
 12900 ;; Defined at:
 12901 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;  x               3   40[BANK2 ] int 
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;  exponent        2   50[BANK2 ] int 
 12906 ;;  sign            1   52[BANK2 ] unsigned char 
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  3   40[BANK2 ] unsigned char 
 12909 ;; Registers used:
 12910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12911 ;; Tracked objects:
 12912 ;;		On entry : 0/0
 12913 ;;		On exit  : 0/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12916 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12917 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12918 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12919 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12920 ;;Total ram usage:       13 bytes
 12921 ;; Hardware stack levels used:    1
 12922 ;; Hardware stack levels required when called:    6
 12923 ;; This function calls:
 12924 ;;		___awtoft
 12925 ;;		___ftdiv
 12926 ;;		___ftge
 12927 ;;		___ftmul
 12928 ;;		___ftneg
 12929 ;;		___ftsub
 12930 ;;		___fttol
 12931 ;;		_eval_poly
 12932 ;;		_floor
 12933 ;;		_ldexp
 12934 ;; This function is called by:
 12935 ;;		_pow
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           
 12940                           ;psect for function _exp
 12941  1363                     _exp:	
 12942                           
 12943                           ;incstack = 0
 12944                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12945  1363  0022               	movlb	2	; select bank2
 12946  1364  084A               	movf	(exp@x+2)^(0+256),w
 12947  1365  0449               	iorwf	(exp@x+1)^(0+256),w
 12948  1366  0448               	iorwf	exp@x^(0+256),w
 12949  1367  1D03               	skipz
 12950  1368  2B70               	goto	l8348
 12951  1369  3000               	movlw	0
 12952  136A  00C8               	movwf	?_exp^(0+256)
 12953  136B  3080               	movlw	128
 12954  136C  00C9               	movwf	(?_exp+1)^(0+256)
 12955  136D  303F               	movlw	63
 12956  136E  00CA               	movwf	(?_exp+2)^(0+256)
 12957  136F  0008               	return
 12958  1370                     l8348:	
 12959  1370  3072               	movlw	114
 12960  1371  0021               	movlb	1	; select bank1
 12961  1372  00A0               	movwf	___ftge@ff1^(0+128)
 12962  1373  3031               	movlw	49
 12963  1374  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12964  1375  3044               	movlw	68
 12965  1376  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12966  1377  0022               	movlb	2	; select bank2
 12967  1378  0848               	movf	exp@x^(0+256),w
 12968  1379  0021               	movlb	1	; select bank1
 12969  137A  00A3               	movwf	___ftge@ff2^(0+128)
 12970  137B  0022               	movlb	2	; select bank2
 12971  137C  0849               	movf	(exp@x+1)^(0+256),w
 12972  137D  0021               	movlb	1	; select bank1
 12973  137E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12974  137F  0022               	movlb	2	; select bank2
 12975  1380  084A               	movf	(exp@x+2)^(0+256),w
 12976  1381  0021               	movlb	1	; select bank1
 12977  1382  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12978  1383  31A1  217B  3193   	fcall	___ftge
 12979  1386  1803               	btfsc	3,0
 12980  1387  2B95               	goto	l8358
 12981  1388  3022               	movlw	34
 12982  1389  0024               	movlb	4	; select bank4
 12983  138A  00CD               	movwf	_errno^(0+512)
 12984  138B  3000               	movlw	0
 12985  138C  00CE               	movwf	(_errno^(0+512)+1)
 12986  138D  30FF               	movlw	255
 12987  138E  0022               	movlb	2	; select bank2
 12988  138F  00C8               	movwf	?_exp^(0+256)
 12989  1390  307F               	movlw	127
 12990  1391  00C9               	movwf	(?_exp+1)^(0+256)
 12991  1392  307F               	movlw	127
 12992  1393  00CA               	movwf	(?_exp+2)^(0+256)
 12993  1394  0008               	return
 12994  1395                     l8358:	
 12995  1395  0022               	movlb	2	; select bank2
 12996  1396  0848               	movf	exp@x^(0+256),w
 12997  1397  0021               	movlb	1	; select bank1
 12998  1398  00A0               	movwf	___ftge@ff1^(0+128)
 12999  1399  0022               	movlb	2	; select bank2
 13000  139A  0849               	movf	(exp@x+1)^(0+256),w
 13001  139B  0021               	movlb	1	; select bank1
 13002  139C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13003  139D  0022               	movlb	2	; select bank2
 13004  139E  084A               	movf	(exp@x+2)^(0+256),w
 13005  139F  0021               	movlb	1	; select bank1
 13006  13A0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13007  13A1  3049               	movlw	73
 13008  13A2  00A3               	movwf	___ftge@ff2^(0+128)
 13009  13A3  303A               	movlw	58
 13010  13A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13011  13A5  30C4               	movlw	196
 13012  13A6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13013  13A7  31A1  217B  3193   	fcall	___ftge
 13014  13AA  1803               	btfsc	3,0
 13015  13AB  2BB9               	goto	l8364
 13016  13AC  3022               	movlw	34
 13017  13AD  0024               	movlb	4	; select bank4
 13018  13AE  00CD               	movwf	_errno^(0+512)
 13019  13AF  3000               	movlw	0
 13020  13B0  00CE               	movwf	(_errno^(0+512)+1)
 13021  13B1  3000               	movlw	0
 13022  13B2  0022               	movlb	2	; select bank2
 13023  13B3  00C8               	movwf	?_exp^(0+256)
 13024  13B4  3000               	movlw	0
 13025  13B5  00C9               	movwf	(?_exp+1)^(0+256)
 13026  13B6  3000               	movlw	0
 13027  13B7  00CA               	movwf	(?_exp+2)^(0+256)
 13028  13B8  0008               	return
 13029  13B9                     l8364:	
 13030  13B9  0022               	movlb	2	; select bank2
 13031  13BA  0848               	movf	exp@x^(0+256),w
 13032  13BB  0021               	movlb	1	; select bank1
 13033  13BC  00A0               	movwf	___ftge@ff1^(0+128)
 13034  13BD  0022               	movlb	2	; select bank2
 13035  13BE  0849               	movf	(exp@x+1)^(0+256),w
 13036  13BF  0021               	movlb	1	; select bank1
 13037  13C0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13038  13C1  0022               	movlb	2	; select bank2
 13039  13C2  084A               	movf	(exp@x+2)^(0+256),w
 13040  13C3  0021               	movlb	1	; select bank1
 13041  13C4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13042  13C5  3000               	movlw	0
 13043  13C6  00A3               	movwf	___ftge@ff2^(0+128)
 13044  13C7  3000               	movlw	0
 13045  13C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13046  13C9  3000               	movlw	0
 13047  13CA  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13048  13CB  31A1  217B  3193   	fcall	___ftge
 13049  13CE  1803               	btfsc	3,0
 13050  13CF  2BD2               	goto	u8790
 13051  13D0  3001               	movlw	1
 13052  13D1  2BD3               	goto	u8800
 13053  13D2                     u8790:	
 13054  13D2  3000               	movlw	0
 13055  13D3                     u8800:	
 13056  13D3  0022               	movlb	2	; select bank2
 13057  13D4  00CB               	movwf	??_exp^(0+256)
 13058  13D5  084B               	movf	??_exp^(0+256),w
 13059  13D6  00D4               	movwf	exp@sign^(0+256)
 13060  13D7  0854               	movf	exp@sign^(0+256),w
 13061  13D8  1903               	btfsc	3,2
 13062  13D9  2BF4               	goto	l8370
 13063  13DA  0848               	movf	exp@x^(0+256),w
 13064  13DB  0021               	movlb	1	; select bank1
 13065  13DC  00BE               	movwf	___ftneg@f1^(0+128)
 13066  13DD  0022               	movlb	2	; select bank2
 13067  13DE  0849               	movf	(exp@x+1)^(0+256),w
 13068  13DF  0021               	movlb	1	; select bank1
 13069  13E0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13070  13E1  0022               	movlb	2	; select bank2
 13071  13E2  084A               	movf	(exp@x+2)^(0+256),w
 13072  13E3  0021               	movlb	1	; select bank1
 13073  13E4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13074  13E5  31AD  2593  3193   	fcall	___ftneg
 13075  13E8  0021               	movlb	1	; select bank1
 13076  13E9  083E               	movf	?___ftneg^(0+128),w
 13077  13EA  0022               	movlb	2	; select bank2
 13078  13EB  00C8               	movwf	exp@x^(0+256)
 13079  13EC  0021               	movlb	1	; select bank1
 13080  13ED  083F               	movf	(?___ftneg+1)^(0+128),w
 13081  13EE  0022               	movlb	2	; select bank2
 13082  13EF  00C9               	movwf	(exp@x+1)^(0+256)
 13083  13F0  0021               	movlb	1	; select bank1
 13084  13F1  0840               	movf	(?___ftneg+2)^(0+128),w
 13085  13F2  0022               	movlb	2	; select bank2
 13086  13F3  00CA               	movwf	(exp@x+2)^(0+256)
 13087  13F4                     l8370:	
 13088  13F4  30AA               	movlw	170
 13089  13F5  0021               	movlb	1	; select bank1
 13090  13F6  00AE               	movwf	___ftmul@f1^(0+128)
 13091  13F7  30B8               	movlw	184
 13092  13F8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13093  13F9  303F               	movlw	63
 13094  13FA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13095  13FB  0022               	movlb	2	; select bank2
 13096  13FC  0848               	movf	exp@x^(0+256),w
 13097  13FD  0021               	movlb	1	; select bank1
 13098  13FE  00B1               	movwf	___ftmul@f2^(0+128)
 13099  13FF  0022               	movlb	2	; select bank2
 13100  1400  0849               	movf	(exp@x+1)^(0+256),w
 13101  1401  0021               	movlb	1	; select bank1
 13102  1402  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13103  1403  0022               	movlb	2	; select bank2
 13104  1404  084A               	movf	(exp@x+2)^(0+256),w
 13105  1405  0021               	movlb	1	; select bank1
 13106  1406  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13107  1407  319E  267B  3193   	fcall	___ftmul
 13108  140A  0021               	movlb	1	; select bank1
 13109  140B  082E               	movf	?___ftmul^(0+128),w
 13110  140C  0022               	movlb	2	; select bank2
 13111  140D  00C8               	movwf	exp@x^(0+256)
 13112  140E  0021               	movlb	1	; select bank1
 13113  140F  082F               	movf	(?___ftmul+1)^(0+128),w
 13114  1410  0022               	movlb	2	; select bank2
 13115  1411  00C9               	movwf	(exp@x+1)^(0+256)
 13116  1412  0021               	movlb	1	; select bank1
 13117  1413  0830               	movf	(?___ftmul+2)^(0+128),w
 13118  1414  0022               	movlb	2	; select bank2
 13119  1415  00CA               	movwf	(exp@x+2)^(0+256)
 13120  1416  0848               	movf	exp@x^(0+256),w
 13121  1417  00AE               	movwf	floor@x^(0+256)
 13122  1418  0849               	movf	(exp@x+1)^(0+256),w
 13123  1419  00AF               	movwf	(floor@x+1)^(0+256)
 13124  141A  084A               	movf	(exp@x+2)^(0+256),w
 13125  141B  00B0               	movwf	(floor@x+2)^(0+256)
 13126  141C  319D  25C8  3193   	fcall	_floor
 13127  141F  0022               	movlb	2	; select bank2
 13128  1420  082E               	movf	?_floor^(0+256),w
 13129  1421  00CC               	movwf	_exp$2863^(0+256)
 13130  1422  082F               	movf	(?_floor+1)^(0+256),w
 13131  1423  00CD               	movwf	(_exp$2863+1)^(0+256)
 13132  1424  0830               	movf	(?_floor+2)^(0+256),w
 13133  1425  00CE               	movwf	(_exp$2863+2)^(0+256)
 13134  1426  084C               	movf	_exp$2863^(0+256),w
 13135  1427  00A0               	movwf	___fttol@f1^(0+256)
 13136  1428  084D               	movf	(_exp$2863+1)^(0+256),w
 13137  1429  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13138  142A  084E               	movf	(_exp$2863+2)^(0+256),w
 13139  142B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13140  142C  319A  225A  3193   	fcall	___fttol
 13141  142F  0022               	movlb	2	; select bank2
 13142  1430  0821               	movf	(?___fttol^(0+256)+1),w
 13143  1431  00D3               	movwf	(exp@exponent+1)^(0+256)
 13144  1432  0820               	movf	?___fttol^(0+256),w
 13145  1433  00D2               	movwf	exp@exponent^(0+256)
 13146  1434  0853               	movf	(exp@exponent+1)^(0+256),w
 13147  1435  0021               	movlb	1	; select bank1
 13148  1436  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13149  1437  0022               	movlb	2	; select bank2
 13150  1438  0852               	movf	exp@exponent^(0+256),w
 13151  1439  0021               	movlb	1	; select bank1
 13152  143A  00A8               	movwf	___awtoft@c^(0+128)
 13153  143B  31AE  26E2  3193   	fcall	___awtoft
 13154  143E  0021               	movlb	1	; select bank1
 13155  143F  0828               	movf	?___awtoft^(0+128),w
 13156  1440  0022               	movlb	2	; select bank2
 13157  1441  00B7               	movwf	___ftsub@f2^(0+256)
 13158  1442  0021               	movlb	1	; select bank1
 13159  1443  0829               	movf	(?___awtoft+1)^(0+128),w
 13160  1444  0022               	movlb	2	; select bank2
 13161  1445  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 13162  1446  0021               	movlb	1	; select bank1
 13163  1447  082A               	movf	(?___awtoft+2)^(0+128),w
 13164  1448  0022               	movlb	2	; select bank2
 13165  1449  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 13166  144A  0848               	movf	exp@x^(0+256),w
 13167  144B  00BA               	movwf	___ftsub@f1^(0+256)
 13168  144C  0849               	movf	(exp@x+1)^(0+256),w
 13169  144D  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 13170  144E  084A               	movf	(exp@x+2)^(0+256),w
 13171  144F  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 13172  1450  31AF  27A3  3193   	fcall	___ftsub
 13173  1453  0022               	movlb	2	; select bank2
 13174  1454  0837               	movf	?___ftsub^(0+256),w
 13175  1455  00C8               	movwf	exp@x^(0+256)
 13176  1456  0838               	movf	(?___ftsub+1)^(0+256),w
 13177  1457  00C9               	movwf	(exp@x+1)^(0+256)
 13178  1458  0839               	movf	(?___ftsub+2)^(0+256),w
 13179  1459  00CA               	movwf	(exp@x+2)^(0+256)
 13180  145A  0848               	movf	exp@x^(0+256),w
 13181  145B  00B4               	movwf	eval_poly@x^(0+256)
 13182  145C  0849               	movf	(exp@x+1)^(0+256),w
 13183  145D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13184  145E  084A               	movf	(exp@x+2)^(0+256),w
 13185  145F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13186  1460  3000               	movlw	low (exp@coeff| (0+32768))
 13187  1461  00B7               	movwf	eval_poly@d^(0+256)
 13188  1462  30A8               	movlw	high (exp@coeff| (0+32768))
 13189  1463  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13190  1464  3009               	movlw	9
 13191  1465  00B9               	movwf	eval_poly@n^(0+256)
 13192  1466  3000               	movlw	0
 13193  1467  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13194  1468  31A6  269C  3193   	fcall	_eval_poly
 13195  146B  0022               	movlb	2	; select bank2
 13196  146C  0834               	movf	?_eval_poly^(0+256),w
 13197  146D  00BE               	movwf	ldexp@value^(0+256)
 13198  146E  0835               	movf	(?_eval_poly+1)^(0+256),w
 13199  146F  00BF               	movwf	(ldexp@value+1)^(0+256)
 13200  1470  0836               	movf	(?_eval_poly+2)^(0+256),w
 13201  1471  00C0               	movwf	(ldexp@value+2)^(0+256)
 13202  1472  0853               	movf	(exp@exponent+1)^(0+256),w
 13203  1473  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13204  1474  0852               	movf	exp@exponent^(0+256),w
 13205  1475  00C1               	movwf	ldexp@newexp^(0+256)
 13206  1476  319C  2488  3193   	fcall	_ldexp
 13207  1479  0022               	movlb	2	; select bank2
 13208  147A  083E               	movf	?_ldexp^(0+256),w
 13209  147B  00C8               	movwf	exp@x^(0+256)
 13210  147C  083F               	movf	(?_ldexp+1)^(0+256),w
 13211  147D  00C9               	movwf	(exp@x+1)^(0+256)
 13212  147E  0840               	movf	(?_ldexp+2)^(0+256),w
 13213  147F  00CA               	movwf	(exp@x+2)^(0+256)
 13214  1480  0854               	movf	exp@sign^(0+256),w
 13215  1481  1903               	btfsc	3,2
 13216  1482  0008               	return
 13217  1483  30FF               	movlw	255
 13218  1484  00CF               	movwf	_exp$2614^(0+256)
 13219  1485  307F               	movlw	127
 13220  1486  00D0               	movwf	(_exp$2614+1)^(0+256)
 13221  1487  307F               	movlw	127
 13222  1488  00D1               	movwf	(_exp$2614+2)^(0+256)
 13223  1489  084A               	movf	(exp@x+2)^(0+256),w
 13224  148A  0651               	xorwf	(_exp$2614+2)^(0+256),w
 13225  148B  1D03               	skipz
 13226  148C  2C93               	goto	u8835
 13227  148D  0849               	movf	(exp@x+1)^(0+256),w
 13228  148E  0650               	xorwf	(_exp$2614+1)^(0+256),w
 13229  148F  1D03               	skipz
 13230  1490  2C93               	goto	u8835
 13231  1491  0848               	movf	exp@x^(0+256),w
 13232  1492  064F               	xorwf	_exp$2614^(0+256),w
 13233  1493                     u8835:	
 13234  1493  1D03               	skipz
 13235  1494  2C9C               	goto	l8392
 13236  1495  3000               	movlw	0
 13237  1496  00C8               	movwf	?_exp^(0+256)
 13238  1497  3000               	movlw	0
 13239  1498  00C9               	movwf	(?_exp+1)^(0+256)
 13240  1499  3000               	movlw	0
 13241  149A  00CA               	movwf	(?_exp+2)^(0+256)
 13242  149B  0008               	return
 13243  149C                     l8392:	
 13244  149C  0848               	movf	exp@x^(0+256),w
 13245  149D  0021               	movlb	1	; select bank1
 13246  149E  00CE               	movwf	___ftdiv@f2^(0+128)
 13247  149F  0022               	movlb	2	; select bank2
 13248  14A0  0849               	movf	(exp@x+1)^(0+256),w
 13249  14A1  0021               	movlb	1	; select bank1
 13250  14A2  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13251  14A3  0022               	movlb	2	; select bank2
 13252  14A4  084A               	movf	(exp@x+2)^(0+256),w
 13253  14A5  0021               	movlb	1	; select bank1
 13254  14A6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13255  14A7  3000               	movlw	0
 13256  14A8  00D1               	movwf	___ftdiv@f1^(0+128)
 13257  14A9  3080               	movlw	128
 13258  14AA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13259  14AB  303F               	movlw	63
 13260  14AC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13261  14AD  319D  251F         	fcall	___ftdiv
 13262  14AF  0021               	movlb	1	; select bank1
 13263  14B0  084E               	movf	?___ftdiv^(0+128),w
 13264  14B1  0022               	movlb	2	; select bank2
 13265  14B2  00C8               	movwf	?_exp^(0+256)
 13266  14B3  0021               	movlb	1	; select bank1
 13267  14B4  084F               	movf	(?___ftdiv+1)^(0+128),w
 13268  14B5  0022               	movlb	2	; select bank2
 13269  14B6  00C9               	movwf	(?_exp+1)^(0+256)
 13270  14B7  0021               	movlb	1	; select bank1
 13271  14B8  0850               	movf	(?___ftdiv+2)^(0+128),w
 13272  14B9  0022               	movlb	2	; select bank2
 13273  14BA  00CA               	movwf	(?_exp+2)^(0+256)
 13274  14BB  0008               	return
 13275  14BC                     __end_of_exp:	
 13276                           
 13277                           	psect	text30
 13278  1C88                     __ptext30:	
 13279 ;; *************** function _ldexp *****************
 13280 ;; Defined at:
 13281 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  value           3   30[BANK2 ] unsigned char 
 13284 ;;  newexp          2   33[BANK2 ] int 
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;		None
 13287 ;; Return value:  Size  Location     Type
 13288 ;;                  3   30[BANK2 ] int 
 13289 ;; Registers used:
 13290 ;;		wreg, status,2, status,0, pclath, cstack
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13296 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13297 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13298 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13299 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13300 ;;Total ram usage:       10 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    4
 13303 ;; This function calls:
 13304 ;;		___ftge
 13305 ;;		___ftneg
 13306 ;; This function is called by:
 13307 ;;		_exp
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function _ldexp
 13313  1C88                     _ldexp:	
 13314                           
 13315                           ;incstack = 0
 13316                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13317  1C88  0022               	movlb	2	; select bank2
 13318  1C89  0840               	movf	(ldexp@value+2)^(0+256),w
 13319  1C8A  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13320  1C8B  043E               	iorwf	ldexp@value^(0+256),w
 13321  1C8C  1D03               	skipz
 13322  1C8D  2C95               	goto	l8162
 13323  1C8E  3000               	movlw	0
 13324  1C8F  00BE               	movwf	?_ldexp^(0+256)
 13325  1C90  3000               	movlw	0
 13326  1C91  00BF               	movwf	(?_ldexp+1)^(0+256)
 13327  1C92  3000               	movlw	0
 13328  1C93  00C0               	movwf	(?_ldexp+2)^(0+256)
 13329  1C94  0008               	return
 13330  1C95                     l8162:	
 13331  1C95  0840               	movf	(ldexp@value^(0+256)+2),w
 13332  1C96  397F               	andlw	127
 13333  1C97  00C3               	movwf	??_ldexp^(0+256)
 13334  1C98  01C4               	clrf	(??_ldexp^(0+256)+1)
 13335  1C99  35C3               	lslf	??_ldexp^(0+256),f
 13336  1C9A  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13337  1C9B  0843               	movf	??_ldexp^(0+256),w
 13338  1C9C  07C1               	addwf	ldexp@newexp^(0+256),f
 13339  1C9D  0844               	movf	(??_ldexp+1)^(0+256),w
 13340  1C9E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13341  1C9F  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13342  1CA0  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13343  1CA1  3901               	andlw	1
 13344  1CA2  00C3               	movwf	??_ldexp^(0+256)
 13345  1CA3  01C4               	clrf	(??_ldexp^(0+256)+1)
 13346  1CA4  0843               	movf	??_ldexp^(0+256),w
 13347  1CA5  07C1               	addwf	ldexp@newexp^(0+256),f
 13348  1CA6  0844               	movf	(??_ldexp+1)^(0+256),w
 13349  1CA7  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13350  1CA8  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13351  1CA9  2CB7               	goto	l8172
 13352  1CAA  3022               	movlw	34
 13353  1CAB  0024               	movlb	4	; select bank4
 13354  1CAC  00CD               	movwf	_errno^(0+512)
 13355  1CAD  3000               	movlw	0
 13356  1CAE  00CE               	movwf	(_errno^(0+512)+1)
 13357  1CAF  3000               	movlw	0
 13358  1CB0  0022               	movlb	2	; select bank2
 13359  1CB1  00BE               	movwf	?_ldexp^(0+256)
 13360  1CB2  3000               	movlw	0
 13361  1CB3  00BF               	movwf	(?_ldexp+1)^(0+256)
 13362  1CB4  3000               	movlw	0
 13363  1CB5  00C0               	movwf	(?_ldexp+2)^(0+256)
 13364  1CB6  0008               	return
 13365  1CB7                     l8172:	
 13366  1CB7  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13367  1CB8  3A80               	xorlw	128
 13368  1CB9  00C3               	movwf	??_ldexp^(0+256)
 13369  1CBA  3081               	movlw	129
 13370  1CBB  0243               	subwf	??_ldexp^(0+256),w
 13371  1CBC  1D03               	skipz
 13372  1CBD  2CC0               	goto	u8605
 13373  1CBE  3000               	movlw	0
 13374  1CBF  0241               	subwf	ldexp@newexp^(0+256),w
 13375  1CC0                     u8605:	
 13376  1CC0  1C03               	skipc
 13377  1CC1  2D07               	goto	l8196
 13378  1CC2  3022               	movlw	34
 13379  1CC3  0024               	movlb	4	; select bank4
 13380  1CC4  00CD               	movwf	_errno^(0+512)
 13381  1CC5  3000               	movlw	0
 13382  1CC6  00CE               	movwf	(_errno^(0+512)+1)
 13383  1CC7  0022               	movlb	2	; select bank2
 13384  1CC8  083E               	movf	ldexp@value^(0+256),w
 13385  1CC9  0021               	movlb	1	; select bank1
 13386  1CCA  00A0               	movwf	___ftge@ff1^(0+128)
 13387  1CCB  0022               	movlb	2	; select bank2
 13388  1CCC  083F               	movf	(ldexp@value+1)^(0+256),w
 13389  1CCD  0021               	movlb	1	; select bank1
 13390  1CCE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13391  1CCF  0022               	movlb	2	; select bank2
 13392  1CD0  0840               	movf	(ldexp@value+2)^(0+256),w
 13393  1CD1  0021               	movlb	1	; select bank1
 13394  1CD2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13395  1CD3  3000               	movlw	0
 13396  1CD4  00A3               	movwf	___ftge@ff2^(0+128)
 13397  1CD5  3000               	movlw	0
 13398  1CD6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13399  1CD7  3000               	movlw	0
 13400  1CD8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13401  1CD9  31A1  217B  319C   	fcall	___ftge
 13402  1CDC  1803               	btfsc	3,0
 13403  1CDD  2CFF               	goto	l8192
 13404  1CDE  30FF               	movlw	255
 13405  1CDF  0022               	movlb	2	; select bank2
 13406  1CE0  00C5               	movwf	_ldexp$2651^(0+256)
 13407  1CE1  307F               	movlw	127
 13408  1CE2  00C6               	movwf	(_ldexp$2651+1)^(0+256)
 13409  1CE3  307F               	movlw	127
 13410  1CE4  00C7               	movwf	(_ldexp$2651+2)^(0+256)
 13411  1CE5  0845               	movf	_ldexp$2651^(0+256),w
 13412  1CE6  0021               	movlb	1	; select bank1
 13413  1CE7  00BE               	movwf	___ftneg@f1^(0+128)
 13414  1CE8  0022               	movlb	2	; select bank2
 13415  1CE9  0846               	movf	(_ldexp$2651+1)^(0+256),w
 13416  1CEA  0021               	movlb	1	; select bank1
 13417  1CEB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13418  1CEC  0022               	movlb	2	; select bank2
 13419  1CED  0847               	movf	(_ldexp$2651+2)^(0+256),w
 13420  1CEE  0021               	movlb	1	; select bank1
 13421  1CEF  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13422  1CF0  31AD  2593         	fcall	___ftneg
 13423  1CF2  0021               	movlb	1	; select bank1
 13424  1CF3  083E               	movf	?___ftneg^(0+128),w
 13425  1CF4  0022               	movlb	2	; select bank2
 13426  1CF5  00BE               	movwf	?_ldexp^(0+256)
 13427  1CF6  0021               	movlb	1	; select bank1
 13428  1CF7  083F               	movf	(?___ftneg+1)^(0+128),w
 13429  1CF8  0022               	movlb	2	; select bank2
 13430  1CF9  00BF               	movwf	(?_ldexp+1)^(0+256)
 13431  1CFA  0021               	movlb	1	; select bank1
 13432  1CFB  0840               	movf	(?___ftneg+2)^(0+128),w
 13433  1CFC  0022               	movlb	2	; select bank2
 13434  1CFD  00C0               	movwf	(?_ldexp+2)^(0+256)
 13435  1CFE  0008               	return
 13436  1CFF                     l8192:	
 13437  1CFF  30FF               	movlw	255
 13438  1D00  0022               	movlb	2	; select bank2
 13439  1D01  00BE               	movwf	?_ldexp^(0+256)
 13440  1D02  307F               	movlw	127
 13441  1D03  00BF               	movwf	(?_ldexp+1)^(0+256)
 13442  1D04  307F               	movlw	127
 13443  1D05  00C0               	movwf	(?_ldexp+2)^(0+256)
 13444  1D06  0008               	return
 13445  1D07                     l8196:	
 13446  1D07  0022               	movlb	2	; select bank2
 13447  1D08  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13448  1D09  00C4               	movwf	(??_ldexp^(0+256)+1)
 13449  1D0A  0841               	movf	ldexp@newexp^(0+256),w
 13450  1D0B  00C3               	movwf	??_ldexp^(0+256)
 13451  1D0C  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13452  1D0D  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13453  1D0E  0CC3               	rrf	??_ldexp^(0+256),f
 13454  1D0F  0840               	movf	(ldexp@value^(0+256)+2),w
 13455  1D10  0643               	xorwf	??_ldexp^(0+256),w
 13456  1D11  3980               	andlw	-128
 13457  1D12  0643               	xorwf	??_ldexp^(0+256),w
 13458  1D13  00C0               	movwf	(ldexp@value^(0+256)+2)
 13459  1D14  0841               	movf	ldexp@newexp^(0+256),w
 13460  1D15  3901               	andlw	1
 13461  1D16  00C3               	movwf	??_ldexp^(0+256)
 13462  1D17  0CC3               	rrf	??_ldexp^(0+256),f
 13463  1D18  0CC3               	rrf	??_ldexp^(0+256),f
 13464  1D19  083F               	movf	(ldexp@value^(0+256)+1),w
 13465  1D1A  0643               	xorwf	??_ldexp^(0+256),w
 13466  1D1B  397F               	andlw	-129
 13467  1D1C  0643               	xorwf	??_ldexp^(0+256),w
 13468  1D1D  00BF               	movwf	(ldexp@value^(0+256)+1)
 13469  1D1E  0008               	return
 13470  1D1F                     __end_of_ldexp:	
 13471                           
 13472                           	psect	text31
 13473  2F4D                     __ptext31:	
 13474 ;; *************** function ___lltoft *****************
 13475 ;; Defined at:
 13476 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13477 ;; Parameters:    Size  Location     Type
 13478 ;;  c               4    8[BANK1 ] unsigned long 
 13479 ;; Auto vars:     Size  Location     Type
 13480 ;;  exp             1   13[BANK1 ] unsigned char 
 13481 ;; Return value:  Size  Location     Type
 13482 ;;                  3    8[BANK1 ] float 
 13483 ;; Registers used:
 13484 ;;		wreg, status,2, status,0, pclath, cstack
 13485 ;; Tracked objects:
 13486 ;;		On entry : 0/0
 13487 ;;		On exit  : 0/0
 13488 ;;		Unchanged: 0/0
 13489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13490 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13491 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13492 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13493 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13494 ;;Total ram usage:        6 bytes
 13495 ;; Hardware stack levels used:    1
 13496 ;; Hardware stack levels required when called:    4
 13497 ;; This function calls:
 13498 ;;		___ftpack
 13499 ;; This function is called by:
 13500 ;;		_pow
 13501 ;; This function uses a non-reentrant model
 13502 ;;
 13503                           
 13504                           
 13505                           ;psect for function ___lltoft
 13506  2F4D                     ___lltoft:	
 13507                           
 13508                           ;incstack = 0
 13509                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13510  2F4D  308E               	movlw	142
 13511  2F4E  0021               	movlb	1	; select bank1
 13512  2F4F  00AC               	movwf	??___lltoft^(0+128)
 13513  2F50  082C               	movf	??___lltoft^(0+128),w
 13514  2F51  00AD               	movwf	___lltoft@exp^(0+128)
 13515  2F52                     l8314:	
 13516  2F52  30FF               	movlw	255
 13517  2F53  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13518  2F54  1903               	btfsc	3,2
 13519  2F55  2F62               	goto	l8316
 13520  2F56  3001               	movlw	1
 13521  2F57                     u8725:	
 13522  2F57  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13523  2F58  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13524  2F59  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13525  2F5A  0CA8               	rrf	___lltoft@c^(0+128),f
 13526  2F5B  0B89               	decfsz	9,f
 13527  2F5C  2F57               	goto	u8725
 13528  2F5D  3001               	movlw	1
 13529  2F5E  00AC               	movwf	??___lltoft^(0+128)
 13530  2F5F  082C               	movf	??___lltoft^(0+128),w
 13531  2F60  07AD               	addwf	___lltoft@exp^(0+128),f
 13532  2F61  2F52               	goto	l8314
 13533  2F62                     l8316:	
 13534  2F62  0828               	movf	___lltoft@c^(0+128),w
 13535  2F63  00A0               	movwf	___ftpack@arg^(0+128)
 13536  2F64  0829               	movf	(___lltoft@c+1)^(0+128),w
 13537  2F65  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13538  2F66  082A               	movf	(___lltoft@c+2)^(0+128),w
 13539  2F67  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13540  2F68  082D               	movf	___lltoft@exp^(0+128),w
 13541  2F69  00AC               	movwf	??___lltoft^(0+128)
 13542  2F6A  082C               	movf	??___lltoft^(0+128),w
 13543  2F6B  00A3               	movwf	___ftpack@exp^(0+128)
 13544  2F6C  01A4               	clrf	___ftpack@sign^(0+128)
 13545  2F6D  31A6  2637         	fcall	___ftpack
 13546  2F6F  0021               	movlb	1	; select bank1
 13547  2F70  0820               	movf	?___ftpack^(0+128),w
 13548  2F71  00A8               	movwf	?___lltoft^(0+128)
 13549  2F72  0821               	movf	(?___ftpack+1)^(0+128),w
 13550  2F73  00A9               	movwf	(?___lltoft+1)^(0+128)
 13551  2F74  0822               	movf	(?___ftpack+2)^(0+128),w
 13552  2F75  00AA               	movwf	(?___lltoft+2)^(0+128)
 13553  2F76  0008               	return
 13554  2F77                     __end_of___lltoft:	
 13555                           
 13556                           	psect	text32
 13557  2446                     __ptext32:	
 13558 ;; *************** function _read_top_tactile *****************
 13559 ;; Defined at:
 13560 ;;		line 50 in file "tactiles.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;		None
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;		None
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      void 
 13567 ;; Registers used:
 13568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13576 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13577 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13578 ;;Total ram usage:        1 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    5
 13581 ;; This function calls:
 13582 ;;		_set_leds_top
 13583 ;;		_wait_ms
 13584 ;; This function is called by:
 13585 ;;		_main
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           
 13590                           ;psect for function _read_top_tactile
 13591  2446                     _read_top_tactile:	
 13592                           
 13593                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13594                           
 13595                           ;incstack = 0
 13596                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13597  2446  0020               	movlb	0	; select bank0
 13598  2447  1A8F               	btfsc	15,5	;volatile
 13599  2448  2C50               	goto	l9146
 13600                           
 13601                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13602  2449  0023               	movlb	3	; select bank3
 13603  244A  0846               	movf	_topTactile_pressed^(0+384),w
 13604  244B  1903               	btfsc	3,2
 13605  244C  2C5B               	goto	l976
 13606                           
 13607                           ;tactiles.c: 62: topTactile_pressed--;
 13608  244D  3001               	movlw	1
 13609  244E  02C6               	subwf	_topTactile_pressed^(0+384),f
 13610                           
 13611                           ;tactiles.c: 63: }
 13612                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13613  244F  2C5B               	goto	l976
 13614  2450                     l9146:	
 13615  2450  3019               	movlw	25
 13616  2451  0023               	movlb	3	; select bank3
 13617  2452  0246               	subwf	_topTactile_pressed^(0+384),w
 13618  2453  1803               	skipnc
 13619  2454  2C5B               	goto	l976
 13620                           
 13621                           ;tactiles.c: 65: topTactile_pressed++;
 13622  2455  3001               	movlw	1
 13623  2456  0021               	movlb	1	; select bank1
 13624  2457  00B2               	movwf	??_read_top_tactile^(0+128)
 13625  2458  0832               	movf	??_read_top_tactile^(0+128),w
 13626  2459  0023               	movlb	3	; select bank3
 13627  245A  07C6               	addwf	_topTactile_pressed^(0+384),f
 13628  245B                     l976:	
 13629                           
 13630                           ;tactiles.c: 66: }
 13631                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13632  245B  0846               	movf	_topTactile_pressed^(0+384),w
 13633  245C  1D03               	btfss	3,2
 13634  245D  0008               	return
 13635                           
 13636                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13637  245E  0020               	movlb	0	; select bank0
 13638  245F  085A               	movf	_top_push_state,w
 13639  2460  3E01               	addlw	1
 13640  2461  00DA               	movwf	_top_push_state
 13641  2462  3000               	movlw	0
 13642  2463  3D5B               	addwfc	_top_push_state+1,w
 13643  2464  00DB               	movwf	_top_push_state+1
 13644                           
 13645                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13646  2465  085B               	movf	_top_push_state+1,w
 13647  2466  3A80               	xorlw	128
 13648  2467  0021               	movlb	1	; select bank1
 13649  2468  00B2               	movwf	??_read_top_tactile^(0+128)
 13650  2469  3080               	movlw	128
 13651  246A  0232               	subwf	??_read_top_tactile^(0+128),w
 13652  246B  1D03               	skipz
 13653  246C  2C70               	goto	u10125
 13654  246D  3007               	movlw	7
 13655  246E  0020               	movlb	0	; select bank0
 13656  246F  025A               	subwf	_top_push_state,w
 13657  2470                     u10125:	
 13658  2470  1C03               	skipc
 13659  2471  2C77               	goto	l9156
 13660                           
 13661                           ;tactiles.c: 75: top_push_state = 1;
 13662  2472  3001               	movlw	1
 13663  2473  0020               	movlb	0	; select bank0
 13664  2474  00DA               	movwf	_top_push_state
 13665  2475  3000               	movlw	0
 13666  2476  00DB               	movwf	_top_push_state+1
 13667  2477                     l9156:	
 13668                           
 13669                           ;tactiles.c: 76: }
 13670                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13671  2477  0020               	movlb	0	; select bank0
 13672  2478  085B               	movf	_top_push_state+1,w
 13673  2479  0021               	movlb	1	; select bank1
 13674  247A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13675  247B  0020               	movlb	0	; select bank0
 13676  247C  085A               	movf	_top_push_state,w
 13677  247D  0021               	movlb	1	; select bank1
 13678  247E  00A0               	movwf	set_leds_top@x^(0+128)
 13679  247F  3001               	movlw	1
 13680  2480  00A2               	movwf	set_leds_top@ledState^(0+128)
 13681  2481  3000               	movlw	0
 13682  2482  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13683  2483  31A5  258A  31A4   	fcall	_set_leds_top
 13684                           
 13685                           ;tactiles.c: 78: mod_time_changed = 1;
 13686  2486  0023               	movlb	3	; select bank3
 13687  2487  01E4               	clrf	_mod_time_changed^(0+384)
 13688  2488  0AE4               	incf	_mod_time_changed^(0+384),f
 13689  2489                     l980:	
 13690                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13691                           
 13692  2489  0020               	movlb	0	; select bank0
 13693  248A  1E8F               	btfss	15,5	;volatile
 13694  248B  2C89               	goto	l980
 13695                           
 13696                           ;tactiles.c: 82: }
 13697                           ;tactiles.c: 83: wait_ms(20);
 13698  248C  3014               	movlw	20
 13699  248D  0021               	movlb	1	; select bank1
 13700  248E  00AC               	movwf	wait_ms@timeSec^(0+128)
 13701  248F  3000               	movlw	0
 13702  2490  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13703  2491  31A0  2066         	fcall	_wait_ms
 13704  2493  0008               	return
 13705  2494                     __end_of_read_top_tactile:	
 13706                           
 13707                           	psect	text33
 13708  23FC                     __ptext33:	
 13709 ;; *************** function _read_bottom_tactile *****************
 13710 ;; Defined at:
 13711 ;;		line 18 in file "tactiles.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;		None
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;		None
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      void 
 13718 ;; Registers used:
 13719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13727 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13728 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13729 ;;Total ram usage:        1 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    5
 13732 ;; This function calls:
 13733 ;;		_set_leds_bottom
 13734 ;;		_wait_ms
 13735 ;; This function is called by:
 13736 ;;		_main
 13737 ;; This function uses a non-reentrant model
 13738 ;;
 13739                           
 13740                           
 13741                           ;psect for function _read_bottom_tactile
 13742  23FC                     _read_bottom_tactile:	
 13743                           
 13744                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13745                           
 13746                           ;incstack = 0
 13747                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13748  23FC  0020               	movlb	0	; select bank0
 13749  23FD  1B0F               	btfsc	15,6	;volatile
 13750  23FE  2C06               	goto	l9124
 13751                           
 13752                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13753  23FF  0023               	movlb	3	; select bank3
 13754  2400  083B               	movf	_bottomTactile_pressed^(0+384),w
 13755  2401  1903               	btfsc	3,2
 13756  2402  2C11               	goto	l964
 13757                           
 13758                           ;tactiles.c: 29: bottomTactile_pressed--;
 13759  2403  3001               	movlw	1
 13760  2404  02BB               	subwf	_bottomTactile_pressed^(0+384),f
 13761                           
 13762                           ;tactiles.c: 30: }
 13763                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13764  2405  2C11               	goto	l964
 13765  2406                     l9124:	
 13766  2406  3019               	movlw	25
 13767  2407  0023               	movlb	3	; select bank3
 13768  2408  023B               	subwf	_bottomTactile_pressed^(0+384),w
 13769  2409  1803               	skipnc
 13770  240A  2C11               	goto	l964
 13771                           
 13772                           ;tactiles.c: 32: bottomTactile_pressed++;
 13773  240B  3001               	movlw	1
 13774  240C  0021               	movlb	1	; select bank1
 13775  240D  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13776  240E  0832               	movf	??_read_bottom_tactile^(0+128),w
 13777  240F  0023               	movlb	3	; select bank3
 13778  2410  07BB               	addwf	_bottomTactile_pressed^(0+384),f
 13779  2411                     l964:	
 13780                           
 13781                           ;tactiles.c: 33: }
 13782                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13783  2411  083B               	movf	_bottomTactile_pressed^(0+384),w
 13784  2412  1D03               	btfss	3,2
 13785  2413  0008               	return
 13786                           
 13787                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13788  2414  0020               	movlb	0	; select bank0
 13789  2415  0856               	movf	_bottom_push_state,w
 13790  2416  3E01               	addlw	1
 13791  2417  00D6               	movwf	_bottom_push_state
 13792  2418  3000               	movlw	0
 13793  2419  3D57               	addwfc	_bottom_push_state+1,w
 13794  241A  00D7               	movwf	_bottom_push_state+1
 13795                           
 13796                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13797  241B  0857               	movf	_bottom_push_state+1,w
 13798  241C  3A80               	xorlw	128
 13799  241D  0021               	movlb	1	; select bank1
 13800  241E  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13801  241F  3080               	movlw	128
 13802  2420  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13803  2421  1D03               	skipz
 13804  2422  2C26               	goto	u10065
 13805  2423  3006               	movlw	6
 13806  2424  0020               	movlb	0	; select bank0
 13807  2425  0256               	subwf	_bottom_push_state,w
 13808  2426                     u10065:	
 13809  2426  1C03               	skipc
 13810  2427  2C2D               	goto	l9134
 13811                           
 13812                           ;tactiles.c: 39: bottom_push_state = 1;
 13813  2428  3001               	movlw	1
 13814  2429  0020               	movlb	0	; select bank0
 13815  242A  00D6               	movwf	_bottom_push_state
 13816  242B  3000               	movlw	0
 13817  242C  00D7               	movwf	_bottom_push_state+1
 13818  242D                     l9134:	
 13819                           
 13820                           ;tactiles.c: 40: }
 13821                           ;tactiles.c: 41: modulation_changed = 1;
 13822  242D  0023               	movlb	3	; select bank3
 13823  242E  01C2               	clrf	_modulation_changed^(0+384)
 13824  242F  0AC2               	incf	_modulation_changed^(0+384),f
 13825                           
 13826                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13827  2430  0020               	movlb	0	; select bank0
 13828  2431  0857               	movf	_bottom_push_state+1,w
 13829  2432  0021               	movlb	1	; select bank1
 13830  2433  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13831  2434  0020               	movlb	0	; select bank0
 13832  2435  0856               	movf	_bottom_push_state,w
 13833  2436  0021               	movlb	1	; select bank1
 13834  2437  00A0               	movwf	set_leds_bottom@x^(0+128)
 13835  2438  31A1  2140  31A3   	fcall	_set_leds_bottom
 13836  243B                     l968:	
 13837                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13838                           
 13839  243B  0020               	movlb	0	; select bank0
 13840  243C  1F0F               	btfss	15,6	;volatile
 13841  243D  2C3B               	goto	l968
 13842                           
 13843                           ;tactiles.c: 45: }
 13844                           ;tactiles.c: 46: wait_ms(20);
 13845  243E  3014               	movlw	20
 13846  243F  0021               	movlb	1	; select bank1
 13847  2440  00AC               	movwf	wait_ms@timeSec^(0+128)
 13848  2441  3000               	movlw	0
 13849  2442  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13850  2443  31A0  2066         	fcall	_wait_ms
 13851  2445  0008               	return
 13852  2446                     __end_of_read_bottom_tactile:	
 13853                           
 13854                           	psect	text34
 13855  1AE1                     __ptext34:	
 13856 ;; *************** function _map *****************
 13857 ;; Defined at:
 13858 ;;		line 177 in file "user.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;  x               3   62[BANK1 ] float 
 13861 ;;  in_min          3   65[BANK1 ] float 
 13862 ;;  in_max          3   68[BANK1 ] float 
 13863 ;;  out_min         3   71[BANK1 ] float 
 13864 ;;  out_max         3   74[BANK1 ] float 
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;		None
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  3   62[BANK1 ] float 
 13869 ;; Registers used:
 13870 ;;		wreg, status,2, status,0, pclath, cstack
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13876 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13877 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13879 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13880 ;;Total ram usage:       18 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    5
 13883 ;; This function calls:
 13884 ;;		___ftadd
 13885 ;;		___ftdiv
 13886 ;;		___ftmul
 13887 ;;		___ftneg
 13888 ;; This function is called by:
 13889 ;;		_main
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           
 13894                           ;psect for function _map
 13895  1AE1                     _map:	
 13896                           
 13897                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13898                           
 13899                           ;incstack = 0
 13900                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13901  1AE1  0021               	movlb	1	; select bank1
 13902  1AE2  0864               	movf	map@in_max^(0+128),w
 13903  1AE3  00C1               	movwf	___ftadd@f1^(0+128)
 13904  1AE4  0865               	movf	(map@in_max+1)^(0+128),w
 13905  1AE5  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13906  1AE6  0866               	movf	(map@in_max+2)^(0+128),w
 13907  1AE7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13908  1AE8  0861               	movf	map@in_min^(0+128),w
 13909  1AE9  00BE               	movwf	___ftneg@f1^(0+128)
 13910  1AEA  0862               	movf	(map@in_min+1)^(0+128),w
 13911  1AEB  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13912  1AEC  0863               	movf	(map@in_min+2)^(0+128),w
 13913  1AED  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13914  1AEE  31AD  2593  319A   	fcall	___ftneg
 13915  1AF1  0021               	movlb	1	; select bank1
 13916  1AF2  083E               	movf	?___ftneg^(0+128),w
 13917  1AF3  00C4               	movwf	___ftadd@f2^(0+128)
 13918  1AF4  083F               	movf	(?___ftneg+1)^(0+128),w
 13919  1AF5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13920  1AF6  0840               	movf	(?___ftneg+2)^(0+128),w
 13921  1AF7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13922  1AF8  3190  2031  319A   	fcall	___ftadd
 13923  1AFB  0021               	movlb	1	; select bank1
 13924  1AFC  0841               	movf	?___ftadd^(0+128),w
 13925  1AFD  00CE               	movwf	___ftdiv@f2^(0+128)
 13926  1AFE  0842               	movf	(?___ftadd+1)^(0+128),w
 13927  1AFF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13928  1B00  0843               	movf	(?___ftadd+2)^(0+128),w
 13929  1B01  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13930  1B02  086A               	movf	map@out_max^(0+128),w
 13931  1B03  00C1               	movwf	___ftadd@f1^(0+128)
 13932  1B04  086B               	movf	(map@out_max+1)^(0+128),w
 13933  1B05  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13934  1B06  086C               	movf	(map@out_max+2)^(0+128),w
 13935  1B07  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13936  1B08  0867               	movf	map@out_min^(0+128),w
 13937  1B09  00BE               	movwf	___ftneg@f1^(0+128)
 13938  1B0A  0868               	movf	(map@out_min+1)^(0+128),w
 13939  1B0B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13940  1B0C  0869               	movf	(map@out_min+2)^(0+128),w
 13941  1B0D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13942  1B0E  31AD  2593  319A   	fcall	___ftneg
 13943  1B11  0021               	movlb	1	; select bank1
 13944  1B12  083E               	movf	?___ftneg^(0+128),w
 13945  1B13  00C4               	movwf	___ftadd@f2^(0+128)
 13946  1B14  083F               	movf	(?___ftneg+1)^(0+128),w
 13947  1B15  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13948  1B16  0840               	movf	(?___ftneg+2)^(0+128),w
 13949  1B17  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13950  1B18  3190  2031  319A   	fcall	___ftadd
 13951  1B1B  0021               	movlb	1	; select bank1
 13952  1B1C  0841               	movf	?___ftadd^(0+128),w
 13953  1B1D  00AE               	movwf	___ftmul@f1^(0+128)
 13954  1B1E  0842               	movf	(?___ftadd+1)^(0+128),w
 13955  1B1F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13956  1B20  0843               	movf	(?___ftadd+2)^(0+128),w
 13957  1B21  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13958  1B22  085E               	movf	map@x^(0+128),w
 13959  1B23  00C1               	movwf	___ftadd@f1^(0+128)
 13960  1B24  085F               	movf	(map@x+1)^(0+128),w
 13961  1B25  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13962  1B26  0860               	movf	(map@x+2)^(0+128),w
 13963  1B27  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13964  1B28  0861               	movf	map@in_min^(0+128),w
 13965  1B29  00BE               	movwf	___ftneg@f1^(0+128)
 13966  1B2A  0862               	movf	(map@in_min+1)^(0+128),w
 13967  1B2B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13968  1B2C  0863               	movf	(map@in_min+2)^(0+128),w
 13969  1B2D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13970  1B2E  31AD  2593  319A   	fcall	___ftneg
 13971  1B31  0021               	movlb	1	; select bank1
 13972  1B32  083E               	movf	?___ftneg^(0+128),w
 13973  1B33  00C4               	movwf	___ftadd@f2^(0+128)
 13974  1B34  083F               	movf	(?___ftneg+1)^(0+128),w
 13975  1B35  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13976  1B36  0840               	movf	(?___ftneg+2)^(0+128),w
 13977  1B37  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13978  1B38  3190  2031  319A   	fcall	___ftadd
 13979  1B3B  0021               	movlb	1	; select bank1
 13980  1B3C  0841               	movf	?___ftadd^(0+128),w
 13981  1B3D  00B1               	movwf	___ftmul@f2^(0+128)
 13982  1B3E  0842               	movf	(?___ftadd+1)^(0+128),w
 13983  1B3F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13984  1B40  0843               	movf	(?___ftadd+2)^(0+128),w
 13985  1B41  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13986  1B42  319E  267B  319A   	fcall	___ftmul
 13987  1B45  0021               	movlb	1	; select bank1
 13988  1B46  082E               	movf	?___ftmul^(0+128),w
 13989  1B47  00D1               	movwf	___ftdiv@f1^(0+128)
 13990  1B48  082F               	movf	(?___ftmul+1)^(0+128),w
 13991  1B49  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13992  1B4A  0830               	movf	(?___ftmul+2)^(0+128),w
 13993  1B4B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13994  1B4C  319D  251F  319A   	fcall	___ftdiv
 13995  1B4F  0021               	movlb	1	; select bank1
 13996  1B50  084E               	movf	?___ftdiv^(0+128),w
 13997  1B51  00ED               	movwf	_map$2845^(0+128)
 13998  1B52  084F               	movf	(?___ftdiv+1)^(0+128),w
 13999  1B53  00EE               	movwf	(_map$2845+1)^(0+128)
 14000  1B54  0850               	movf	(?___ftdiv+2)^(0+128),w
 14001  1B55  00EF               	movwf	(_map$2845+2)^(0+128)
 14002                           
 14003                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14004  1B56  0867               	movf	map@out_min^(0+128),w
 14005  1B57  00C1               	movwf	___ftadd@f1^(0+128)
 14006  1B58  0868               	movf	(map@out_min+1)^(0+128),w
 14007  1B59  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14008  1B5A  0869               	movf	(map@out_min+2)^(0+128),w
 14009  1B5B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14010  1B5C  086D               	movf	_map$2845^(0+128),w
 14011  1B5D  00C4               	movwf	___ftadd@f2^(0+128)
 14012  1B5E  086E               	movf	(_map$2845+1)^(0+128),w
 14013  1B5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14014  1B60  086F               	movf	(_map$2845+2)^(0+128),w
 14015  1B61  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14016  1B62  3190  2031         	fcall	___ftadd
 14017  1B64  0021               	movlb	1	; select bank1
 14018  1B65  0841               	movf	?___ftadd^(0+128),w
 14019  1B66  00DE               	movwf	?_map^(0+128)
 14020  1B67  0842               	movf	(?___ftadd+1)^(0+128),w
 14021  1B68  00DF               	movwf	(?_map+1)^(0+128)
 14022  1B69  0843               	movf	(?___ftadd+2)^(0+128),w
 14023  1B6A  00E0               	movwf	(?_map+2)^(0+128)
 14024  1B6B  0008               	return
 14025  1B6C                     __end_of_map:	
 14026                           
 14027                           	psect	text35
 14028  2DCC                     __ptext35:	
 14029 ;; *************** function _initSwitchBypass *****************
 14030 ;; Defined at:
 14031 ;;		line 29 in file "SwitchBypass.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;		None
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;  initState       2   26[BANK1 ] int 
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  1    wreg      void 
 14038 ;; Registers used:
 14039 ;;		wreg, status,2, status,0, pclath, cstack
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14046 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14048 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14049 ;;Total ram usage:        2 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    7
 14052 ;; This function calls:
 14053 ;;		_getSwitchBypassState
 14054 ;;		_setSwitchBypassState
 14055 ;; This function is called by:
 14056 ;;		_main
 14057 ;; This function uses a non-reentrant model
 14058 ;;
 14059                           
 14060                           
 14061                           ;psect for function _initSwitchBypass
 14062  2DCC                     _initSwitchBypass:	
 14063                           
 14064                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14065                           
 14066                           ;incstack = 0
 14067                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14068  2DCC  31A0  2002  31AD   	fcall	_getSwitchBypassState
 14069  2DCF  0021               	movlb	1	; select bank1
 14070  2DD0  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14071  2DD1  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14072  2DD2  0820               	movf	?_getSwitchBypassState^(0+128),w
 14073  2DD3  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14074                           
 14075                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14076  2DD4  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14077  2DD5  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14078  2DD6  083A               	movf	initSwitchBypass@initState^(0+128),w
 14079  2DD7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14080  2DD8  31AE  266A         	fcall	_setSwitchBypassState
 14081  2DDA  0008               	return
 14082  2DDB                     __end_of_initSwitchBypass:	
 14083                           
 14084                           	psect	text36
 14085  2E6A                     __ptext36:	
 14086 ;; *************** function _setSwitchBypassState *****************
 14087 ;; Defined at:
 14088 ;;		line 140 in file "SwitchBypass.c"
 14089 ;; Parameters:    Size  Location     Type
 14090 ;;  f_state         2   22[BANK1 ] int 
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;		None
 14093 ;; Return value:  Size  Location     Type
 14094 ;;                  1    wreg      void 
 14095 ;; Registers used:
 14096 ;;		wreg, status,2, status,0, pclath, cstack
 14097 ;; Tracked objects:
 14098 ;;		On entry : 0/0
 14099 ;;		On exit  : 0/0
 14100 ;;		Unchanged: 0/0
 14101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14102 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14104 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14105 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14106 ;;Total ram usage:        4 bytes
 14107 ;; Hardware stack levels used:    1
 14108 ;; Hardware stack levels required when called:    6
 14109 ;; This function calls:
 14110 ;;		_setSwitchBypassRelays
 14111 ;; This function is called by:
 14112 ;;		_initSwitchBypass
 14113 ;;		_updateSwitchBypass
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           
 14118                           ;psect for function _setSwitchBypassState
 14119  2E6A                     _setSwitchBypassState:	
 14120                           
 14121                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14122                           
 14123                           ;incstack = 0
 14124                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14125  2E6A  0020               	movlb	0	; select bank0
 14126  2E6B  085F               	movf	_switchBypass_state,w
 14127  2E6C  0021               	movlb	1	; select bank1
 14128  2E6D  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14129  2E6E  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14130  2E6F  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14131  2E70  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14132  2E71  1D03               	skipz
 14133  2E72  2E75               	goto	u8925
 14134  2E73  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14135  2E74  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14136  2E75                     u8925:	
 14137  2E75  1903               	btfsc	3,2
 14138  2E76  0008               	return
 14139                           
 14140                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14141  2E77  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14142  2E78  0022               	movlb	2	; select bank2
 14143  2E79  1C03               	skipc
 14144  2E7A  110D               	bcf	13,2	;volatile
 14145  2E7B  1803               	skipnc
 14146  2E7C  150D               	bsf	13,2	;volatile
 14147                           
 14148                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14149  2E7D  118D               	bcf	13,3	;volatile
 14150                           
 14151                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14152  2E7E  0021               	movlb	1	; select bank1
 14153  2E7F  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14154  2E80  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14155  2E81  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14156  2E82  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14157  2E83  31A0  2098         	fcall	_setSwitchBypassRelays
 14158  2E85  0008               	return
 14159  2E86                     __end_of_setSwitchBypassState:	
 14160                           
 14161                           	psect	text37
 14162  2098                     __ptext37:	
 14163 ;; *************** function _setSwitchBypassRelays *****************
 14164 ;; Defined at:
 14165 ;;		line 148 in file "SwitchBypass.c"
 14166 ;; Parameters:    Size  Location     Type
 14167 ;;  f_state         2   18[BANK1 ] int 
 14168 ;; Auto vars:     Size  Location     Type
 14169 ;;		None
 14170 ;; Return value:  Size  Location     Type
 14171 ;;                  1    wreg      void 
 14172 ;; Registers used:
 14173 ;;		wreg, status,2, status,0, pclath, cstack
 14174 ;; Tracked objects:
 14175 ;;		On entry : 0/0
 14176 ;;		On exit  : 0/0
 14177 ;;		Unchanged: 0/0
 14178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14179 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14181 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14182 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14183 ;;Total ram usage:        4 bytes
 14184 ;; Hardware stack levels used:    1
 14185 ;; Hardware stack levels required when called:    5
 14186 ;; This function calls:
 14187 ;;		_updateSwitchBypassState
 14188 ;;		_wait_ms
 14189 ;; This function is called by:
 14190 ;;		_updateSwitchBypass
 14191 ;;		_setSwitchBypassState
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195                           
 14196                           ;psect for function _setSwitchBypassRelays
 14197  2098                     _setSwitchBypassRelays:	
 14198                           
 14199                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14200                           
 14201                           ;incstack = 0
 14202                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14203  2098  0021               	movlb	1	; select bank1
 14204  2099  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14205  209A  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14206  209B  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14207  209C  0020               	movlb	0	; select bank0
 14208  209D  00DF               	movwf	_switchBypass_state
 14209                           
 14210                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14211  209E  0021               	movlb	1	; select bank1
 14212  209F  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14213  20A0  0027               	movlb	7	; select bank7
 14214  20A1  1C03               	skipc
 14215  20A2  110D               	bcf	13,2	;volatile
 14216  20A3  1803               	skipnc
 14217  20A4  150D               	bsf	13,2	;volatile
 14218                           
 14219                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14220  20A5  0021               	movlb	1	; select bank1
 14221  20A6  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14222  20A7  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14223  20A8  1D03               	btfss	3,2
 14224  20A9  28AD               	goto	u8620
 14225  20AA  0027               	movlb	7	; select bank7
 14226  20AB  148D               	bsf	13,1	;volatile
 14227  20AC  28AF               	goto	l8240
 14228  20AD                     u8620:	
 14229  20AD  0027               	movlb	7	; select bank7
 14230  20AE  108D               	bcf	13,1	;volatile
 14231  20AF                     l8240:	
 14232                           
 14233                           ;SwitchBypass.c: 153: wait_ms(20);
 14234  20AF  3014               	movlw	20
 14235  20B0  0021               	movlb	1	; select bank1
 14236  20B1  00AC               	movwf	wait_ms@timeSec^(0+128)
 14237  20B2  3000               	movlw	0
 14238  20B3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14239  20B4  31A0  2066  31A0   	fcall	_wait_ms
 14240                           
 14241                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14242  20B7  0027               	movlb	7	; select bank7
 14243  20B8  110D               	bcf	13,2	;volatile
 14244                           
 14245                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14246  20B9  108D               	bcf	13,1	;volatile
 14247                           
 14248                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14249  20BA  0020               	movlb	0	; select bank0
 14250  20BB  085F               	movf	_switchBypass_state,w
 14251  20BC  0021               	movlb	1	; select bank1
 14252  20BD  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14253  20BE  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14254  20BF  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14255  20C0  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14256  20C1  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14257  20C2  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14258  20C3  3180  2003  31A0   	fcall	_updateSwitchBypassState
 14259                           
 14260                           ;SwitchBypass.c: 159: wait_ms(20);
 14261  20C6  3014               	movlw	20
 14262  20C7  0021               	movlb	1	; select bank1
 14263  20C8  00AC               	movwf	wait_ms@timeSec^(0+128)
 14264  20C9  3000               	movlw	0
 14265  20CA  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14266  20CB  31A0  2066         	fcall	_wait_ms
 14267  20CD  0008               	return
 14268  20CE                     __end_of_setSwitchBypassRelays:	
 14269                           
 14270                           	psect	text38
 14271  2066                     __ptext38:	
 14272 ;; *************** function _wait_ms *****************
 14273 ;; Defined at:
 14274 ;;		line 23 in file "system.c"
 14275 ;; Parameters:    Size  Location     Type
 14276 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14277 ;; Auto vars:     Size  Location     Type
 14278 ;;  timemsl         4   14[BANK1 ] long 
 14279 ;; Return value:  Size  Location     Type
 14280 ;;                  1    wreg      void 
 14281 ;; Registers used:
 14282 ;;		wreg, status,2, status,0, pclath, cstack
 14283 ;; Tracked objects:
 14284 ;;		On entry : 0/0
 14285 ;;		On exit  : 0/0
 14286 ;;		Unchanged: 0/0
 14287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14288 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14289 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14291 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14292 ;;Total ram usage:        6 bytes
 14293 ;; Hardware stack levels used:    1
 14294 ;; Hardware stack levels required when called:    4
 14295 ;; This function calls:
 14296 ;;		___lmul
 14297 ;; This function is called by:
 14298 ;;		_ring_tactiles
 14299 ;;		_solidring_tactiles
 14300 ;;		_read_bottom_tactile
 14301 ;;		_read_top_tactile
 14302 ;;		_setSwitchBypassRelays
 14303 ;;		_setDoublePressState
 14304 ;;		_showError_Alternating
 14305 ;;		_show_error
 14306 ;;		_show_cancel
 14307 ;;		_star_tactiles
 14308 ;;		_initExpModeState
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           
 14313                           ;psect for function _wait_ms
 14314  2066                     _wait_ms:	
 14315                           
 14316                           ;system.c: 25: long timemsl = 0;
 14317                           
 14318                           ;incstack = 0
 14319                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14320  2066  3000               	movlw	0
 14321  2067  0021               	movlb	1	; select bank1
 14322  2068  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14323  2069  3000               	movlw	0
 14324  206A  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14325  206B  3000               	movlw	0
 14326  206C  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14327  206D  3000               	movlw	0
 14328  206E  00AE               	movwf	wait_ms@timemsl^(0+128)
 14329                           
 14330                           ;system.c: 26: timemsl = timeSec * 1000l;
 14331  206F  082C               	movf	wait_ms@timeSec^(0+128),w
 14332  2070  00A0               	movwf	___lmul@multiplier^(0+128)
 14333  2071  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14334  2072  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14335  2073  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14336  2074  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14337  2075  3000               	movlw	0
 14338  2076  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14339  2077  3000               	movlw	0
 14340  2078  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14341  2079  3003               	movlw	3
 14342  207A  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14343  207B  30E8               	movlw	232
 14344  207C  00A4               	movwf	___lmul@multiplicand^(0+128)
 14345  207D  3190  2001  31A0   	fcall	___lmul
 14346  2080  0021               	movlb	1	; select bank1
 14347  2081  0823               	movf	(?___lmul+3)^(0+128),w
 14348  2082  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14349  2083  0822               	movf	(?___lmul+2)^(0+128),w
 14350  2084  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14351  2085  0821               	movf	(?___lmul+1)^(0+128),w
 14352  2086  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14353  2087  0820               	movf	?___lmul^(0+128),w
 14354  2088  00AE               	movwf	wait_ms@timemsl^(0+128)
 14355  2089                     l386:	
 14356                           ;system.c: 27: for( ; timemsl; timemsl--);
 14357                           
 14358  2089  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14359  208A  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14360  208B  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14361  208C  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14362  208D  1903               	btfsc	3,2
 14363  208E  0008               	return
 14364  208F  30FF               	movlw	255
 14365  2090  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14366  2091  30FF               	movlw	255
 14367  2092  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14368  2093  30FF               	movlw	255
 14369  2094  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14370  2095  30FF               	movlw	255
 14371  2096  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14372  2097  2889               	goto	l386
 14373  2098                     __end_of_wait_ms:	
 14374                           
 14375                           	psect	text39
 14376  1001                     __ptext39:	
 14377 ;; *************** function ___lmul *****************
 14378 ;; Defined at:
 14379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14382 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  product         4    8[BANK1 ] unsigned long 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  4    0[BANK1 ] unsigned long 
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14394 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14395 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14397 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14398 ;;Total ram usage:       12 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    3
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		_wait_ms
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           
 14409                           ;psect for function ___lmul
 14410  1001                     ___lmul:	
 14411                           
 14412                           ;incstack = 0
 14413                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14414  1001  3000               	movlw	0
 14415  1002  0021               	movlb	1	; select bank1
 14416  1003  00AB               	movwf	(___lmul@product+3)^(0+128)
 14417  1004  3000               	movlw	0
 14418  1005  00AA               	movwf	(___lmul@product+2)^(0+128)
 14419  1006  3000               	movlw	0
 14420  1007  00A9               	movwf	(___lmul@product+1)^(0+128)
 14421  1008  3000               	movlw	0
 14422  1009  00A8               	movwf	___lmul@product^(0+128)
 14423  100A                     l7686:	
 14424  100A  1C20               	btfss	___lmul@multiplier^(0+128),0
 14425  100B  2814               	goto	l7690
 14426  100C  0824               	movf	___lmul@multiplicand^(0+128),w
 14427  100D  07A8               	addwf	___lmul@product^(0+128),f
 14428  100E  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14429  100F  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14430  1010  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14431  1011  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14432  1012  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14433  1013  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14434  1014                     l7690:	
 14435  1014  3001               	movlw	1
 14436  1015                     u7655:	
 14437  1015  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14438  1016  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14439  1017  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14440  1018  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14441  1019  0B89               	decfsz	9,f
 14442  101A  2815               	goto	u7655
 14443  101B  3001               	movlw	1
 14444  101C                     u7665:	
 14445  101C  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14446  101D  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14447  101E  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14448  101F  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14449  1020  0B89               	decfsz	9,f
 14450  1021  281C               	goto	u7665
 14451  1022  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14452  1023  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14453  1024  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14454  1025  0420               	iorwf	___lmul@multiplier^(0+128),w
 14455  1026  1D03               	skipz
 14456  1027  280A               	goto	l7686
 14457  1028  082B               	movf	(___lmul@product+3)^(0+128),w
 14458  1029  00A3               	movwf	(?___lmul+3)^(0+128)
 14459  102A  082A               	movf	(___lmul@product+2)^(0+128),w
 14460  102B  00A2               	movwf	(?___lmul+2)^(0+128)
 14461  102C  0829               	movf	(___lmul@product+1)^(0+128),w
 14462  102D  00A1               	movwf	(?___lmul+1)^(0+128)
 14463  102E  0828               	movf	___lmul@product^(0+128),w
 14464  102F  00A0               	movwf	?___lmul^(0+128)
 14465  1030  0008               	return
 14466  1031                     __end_of___lmul:	
 14467                           
 14468                           	psect	text40
 14469  0003                     __ptext40:	
 14470 ;; *************** function _updateSwitchBypassState *****************
 14471 ;; Defined at:
 14472 ;;		line 96 in file "state_manager.c"
 14473 ;; Parameters:    Size  Location     Type
 14474 ;;  state           2    0[BANK1 ] int 
 14475 ;; Auto vars:     Size  Location     Type
 14476 ;;		None
 14477 ;; Return value:  Size  Location     Type
 14478 ;;                  1    wreg      void 
 14479 ;; Registers used:
 14480 ;;		None
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14486 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14489 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14490 ;;Total ram usage:        2 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    3
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_setSwitchBypassRelays
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499                           
 14500                           
 14501                           ;psect for function _updateSwitchBypassState
 14502  0003                     _updateSwitchBypassState:	
 14503                           
 14504                           ;incstack = 0
 14505                           ; Regs used in _updateSwitchBypassState: []
 14506  0003  0008               	return
 14507  0004                     __end_of_updateSwitchBypassState:	
 14508                           
 14509                           	psect	text41
 14510  2002                     __ptext41:	
 14511 ;; *************** function _getSwitchBypassState *****************
 14512 ;; Defined at:
 14513 ;;		line 103 in file "state_manager.c"
 14514 ;; Parameters:    Size  Location     Type
 14515 ;;		None
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;		None
 14518 ;; Return value:  Size  Location     Type
 14519 ;;                  2    0[BANK1 ] int 
 14520 ;; Registers used:
 14521 ;;		status,2
 14522 ;; Tracked objects:
 14523 ;;		On entry : 0/0
 14524 ;;		On exit  : 0/0
 14525 ;;		Unchanged: 0/0
 14526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14527 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14530 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14531 ;;Total ram usage:        2 bytes
 14532 ;; Hardware stack levels used:    1
 14533 ;; Hardware stack levels required when called:    3
 14534 ;; This function calls:
 14535 ;;		Nothing
 14536 ;; This function is called by:
 14537 ;;		_initSwitchBypass
 14538 ;; This function uses a non-reentrant model
 14539 ;;
 14540                           
 14541                           
 14542                           ;psect for function _getSwitchBypassState
 14543  2002                     _getSwitchBypassState:	
 14544                           
 14545                           ;state_manager.c: 108: return 0;
 14546                           
 14547                           ;incstack = 0
 14548                           ; Regs used in _getSwitchBypassState: [status,2]
 14549  2002  0021               	movlb	1	; select bank1
 14550  2003  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14551  2004  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14552  2005  0008               	return
 14553  2006                     __end_of_getSwitchBypassState:	
 14554                           
 14555                           	psect	text42
 14556  2537                     __ptext42:	
 14557 ;; *************** function _getModulationDelayTime *****************
 14558 ;; Defined at:
 14559 ;;		line 35 in file "modulation.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;		None
 14562 ;; Auto vars:     Size  Location     Type
 14563 ;;  subDiv          2   14[BANK2 ] int 
 14564 ;; Return value:  Size  Location     Type
 14565 ;;                  1    wreg      void 
 14566 ;; Registers used:
 14567 ;;		wreg, status,2, status,0, pclath, cstack
 14568 ;; Tracked objects:
 14569 ;;		On entry : 0/0
 14570 ;;		On exit  : 0/0
 14571 ;;		Unchanged: 0/0
 14572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14574 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14576 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14577 ;;Total ram usage:        2 bytes
 14578 ;; Hardware stack levels used:    1
 14579 ;; Hardware stack levels required when called:    5
 14580 ;; This function calls:
 14581 ;;		___altoft
 14582 ;;		___awtoft
 14583 ;;		___ftdiv
 14584 ;;		___fttol
 14585 ;;		_getModulationSubdivision
 14586 ;; This function is called by:
 14587 ;;		_main
 14588 ;; This function uses a non-reentrant model
 14589 ;;
 14590                           
 14591                           
 14592                           ;psect for function _getModulationDelayTime
 14593  2537                     _getModulationDelayTime:	
 14594                           
 14595                           ;modulation.c: 36: adjust_mod_delay = 0;
 14596                           
 14597                           ;incstack = 0
 14598                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14599  2537  0023               	movlb	3	; select bank3
 14600  2538  01BA               	clrf	_adjust_mod_delay^(0+384)
 14601                           
 14602                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14603  2539  31A0  2036  31A5   	fcall	_getModulationSubdivision
 14604  253C  0021               	movlb	1	; select bank1
 14605  253D  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14606  253E  0022               	movlb	2	; select bank2
 14607  253F  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14608  2540  0021               	movlb	1	; select bank1
 14609  2541  0820               	movf	?_getModulationSubdivision^(0+128),w
 14610  2542  0022               	movlb	2	; select bank2
 14611  2543  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 14612                           
 14613                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14614  2544  0020               	movlb	0	; select bank0
 14615  2545  0855               	movf	_delay_time+3,w	;volatile
 14616  2546  0021               	movlb	1	; select bank1
 14617  2547  00AB               	movwf	(___altoft@c+3)^(0+128)
 14618  2548  0020               	movlb	0	; select bank0
 14619  2549  0854               	movf	_delay_time+2,w	;volatile
 14620  254A  0021               	movlb	1	; select bank1
 14621  254B  00AA               	movwf	(___altoft@c+2)^(0+128)
 14622  254C  0020               	movlb	0	; select bank0
 14623  254D  0853               	movf	_delay_time+1,w	;volatile
 14624  254E  0021               	movlb	1	; select bank1
 14625  254F  00A9               	movwf	(___altoft@c+1)^(0+128)
 14626  2550  0020               	movlb	0	; select bank0
 14627  2551  0852               	movf	_delay_time,w	;volatile
 14628  2552  0021               	movlb	1	; select bank1
 14629  2553  00A8               	movwf	___altoft@c^(0+128)
 14630  2554  31A1  21B7  31A5   	fcall	___altoft
 14631  2557  0021               	movlb	1	; select bank1
 14632  2558  0828               	movf	?___altoft^(0+128),w
 14633  2559  00D1               	movwf	___ftdiv@f1^(0+128)
 14634  255A  0829               	movf	(?___altoft+1)^(0+128),w
 14635  255B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14636  255C  082A               	movf	(?___altoft+2)^(0+128),w
 14637  255D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14638  255E  0022               	movlb	2	; select bank2
 14639  255F  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14640  2560  0021               	movlb	1	; select bank1
 14641  2561  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14642  2562  0022               	movlb	2	; select bank2
 14643  2563  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 14644  2564  0021               	movlb	1	; select bank1
 14645  2565  00A8               	movwf	___awtoft@c^(0+128)
 14646  2566  31AE  26E2  31A5   	fcall	___awtoft
 14647  2569  0021               	movlb	1	; select bank1
 14648  256A  0828               	movf	?___awtoft^(0+128),w
 14649  256B  00CE               	movwf	___ftdiv@f2^(0+128)
 14650  256C  0829               	movf	(?___awtoft+1)^(0+128),w
 14651  256D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14652  256E  082A               	movf	(?___awtoft+2)^(0+128),w
 14653  256F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14654  2570  319D  251F  31A5   	fcall	___ftdiv
 14655  2573  0021               	movlb	1	; select bank1
 14656  2574  084E               	movf	?___ftdiv^(0+128),w
 14657  2575  0022               	movlb	2	; select bank2
 14658  2576  00A0               	movwf	___fttol@f1^(0+256)
 14659  2577  0021               	movlb	1	; select bank1
 14660  2578  084F               	movf	(?___ftdiv+1)^(0+128),w
 14661  2579  0022               	movlb	2	; select bank2
 14662  257A  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14663  257B  0021               	movlb	1	; select bank1
 14664  257C  0850               	movf	(?___ftdiv+2)^(0+128),w
 14665  257D  0022               	movlb	2	; select bank2
 14666  257E  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14667  257F  319A  225A         	fcall	___fttol
 14668  2581  0022               	movlb	2	; select bank2
 14669  2582  0821               	movf	(?___fttol^(0+256)+1),w
 14670  2583  0023               	movlb	3	; select bank3
 14671  2584  00DA               	movwf	(_mod_delay_time+1)^(0+384)
 14672  2585  0022               	movlb	2	; select bank2
 14673  2586  0820               	movf	?___fttol^(0+256),w
 14674  2587  0023               	movlb	3	; select bank3
 14675  2588  00D9               	movwf	_mod_delay_time^(0+384)
 14676  2589  0008               	return
 14677  258A                     __end_of_getModulationDelayTime:	
 14678                           
 14679                           	psect	text43
 14680  2036                     __ptext43:	
 14681 ;; *************** function _getModulationSubdivision *****************
 14682 ;; Defined at:
 14683 ;;		line 26 in file "modulation.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;		None
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;		None
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  2    0[BANK1 ] int 
 14690 ;; Registers used:
 14691 ;;		wreg, status,2, status,0
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14697 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14700 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14701 ;;Total ram usage:        2 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:    3
 14704 ;; This function calls:
 14705 ;;		Nothing
 14706 ;; This function is called by:
 14707 ;;		_getModulationDelayTime
 14708 ;;		_updateModulationArray
 14709 ;; This function uses a non-reentrant model
 14710 ;;
 14711                           
 14712                           
 14713                           ;psect for function _getModulationSubdivision
 14714  2036                     _getModulationSubdivision:	
 14715                           
 14716                           ;modulation.c: 27: if (delay_time >= 2400) {
 14717                           
 14718                           ;incstack = 0
 14719                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14720  2036  0020               	movlb	0	; select bank0
 14721  2037  1BD5               	btfsc	_delay_time+3,7	;volatile
 14722  2038  284B               	goto	l8404
 14723  2039  0855               	movf	_delay_time+3,w	;volatile
 14724  203A  1D03               	btfss	3,2
 14725  203B  2845               	goto	l8398
 14726  203C  0854               	movf	_delay_time+2,w	;volatile
 14727  203D  1D03               	btfss	3,2
 14728  203E  2845               	goto	l8398
 14729  203F  3060               	movlw	96
 14730  2040  0252               	subwf	_delay_time,w	;volatile
 14731  2041  3009               	movlw	9
 14732  2042  3B53               	subwfb	_delay_time+1,w	;volatile
 14733  2043  1C03               	btfss	3,0
 14734  2044  284B               	goto	l8404
 14735  2045                     l8398:	
 14736                           
 14737                           ;modulation.c: 28: return 120;
 14738  2045  3078               	movlw	120
 14739  2046  0021               	movlb	1	; select bank1
 14740  2047  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14741  2048  3000               	movlw	0
 14742  2049  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14743                           
 14744                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14745  204A  0008               	return
 14746  204B                     l8404:	
 14747  204B  0020               	movlb	0	; select bank0
 14748  204C  1BD5               	btfsc	_delay_time+3,7	;volatile
 14749  204D  2860               	goto	l8412
 14750  204E  0855               	movf	_delay_time+3,w	;volatile
 14751  204F  1D03               	btfss	3,2
 14752  2050  285A               	goto	l8406
 14753  2051  0854               	movf	_delay_time+2,w	;volatile
 14754  2052  1D03               	btfss	3,2
 14755  2053  285A               	goto	l8406
 14756  2054  3058               	movlw	88
 14757  2055  0252               	subwf	_delay_time,w	;volatile
 14758  2056  3002               	movlw	2
 14759  2057  3B53               	subwfb	_delay_time+1,w	;volatile
 14760  2058  1C03               	btfss	3,0
 14761  2059  2860               	goto	l8412
 14762  205A                     l8406:	
 14763                           
 14764                           ;modulation.c: 30: return 60;
 14765  205A  303C               	movlw	60
 14766  205B  0021               	movlb	1	; select bank1
 14767  205C  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14768  205D  3000               	movlw	0
 14769  205E  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14770                           
 14771                           ;modulation.c: 31: } else {
 14772  205F  0008               	return
 14773  2060                     l8412:	
 14774                           
 14775                           ;modulation.c: 32: return 30;
 14776  2060  301E               	movlw	30
 14777  2061  0021               	movlb	1	; select bank1
 14778  2062  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14779  2063  3000               	movlw	0
 14780  2064  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14781  2065  0008               	return
 14782  2066                     __end_of_getModulationSubdivision:	
 14783                           
 14784                           	psect	text44
 14785  1850                     __ptext44:	
 14786 ;; *************** function _calcCosArray *****************
 14787 ;; Defined at:
 14788 ;;		line 18 in file "modulation.c"
 14789 ;; Parameters:    Size  Location     Type
 14790 ;;		None
 14791 ;; Auto vars:     Size  Location     Type
 14792 ;;  tmpVal          3   54[BANK2 ] int 
 14793 ;;  iAngle          1   57[BANK2 ] unsigned char 
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  1    wreg      void 
 14796 ;; Registers used:
 14797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14804 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14805 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14806 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14807 ;;Total ram usage:        8 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    8
 14810 ;; This function calls:
 14811 ;;		___awtoft
 14812 ;;		___ftdiv
 14813 ;;		___ftmul
 14814 ;;		___wmul
 14815 ;;		_cos
 14816 ;; This function is called by:
 14817 ;;		_main
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           
 14822                           ;psect for function _calcCosArray
 14823  1850                     _calcCosArray:	
 14824                           
 14825                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14826                           
 14827                           ;incstack = 0
 14828                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14829  1850  0022               	movlb	2	; select bank2
 14830  1851  01D9               	clrf	calcCosArray@iAngle^(0+256)
 14831  1852                     L17:	
 14832  1852  3078               	movlw	120
 14833  1853  0259               	subwf	calcCosArray@iAngle^(0+256),w
 14834  1854  1803               	btfsc	3,0
 14835  1855  0008               	return
 14836                           
 14837                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14838  1856  3000               	movlw	0
 14839  1857  0021               	movlb	1	; select bank1
 14840  1858  00CE               	movwf	___ftdiv@f2^(0+128)
 14841  1859  3034               	movlw	52
 14842  185A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14843  185B  3043               	movlw	67
 14844  185C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14845  185D  3010               	movlw	16
 14846  185E  00AE               	movwf	___ftmul@f1^(0+128)
 14847  185F  3049               	movlw	73
 14848  1860  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14849  1861  3040               	movlw	64
 14850  1862  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14851  1863  0022               	movlb	2	; select bank2
 14852  1864  0859               	movf	calcCosArray@iAngle^(0+256),w
 14853  1865  00D2               	movwf	??_calcCosArray^(0+256)
 14854  1866  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 14855  1867  0852               	movf	??_calcCosArray^(0+256),w
 14856  1868  00AE               	movwf	___wmul@multiplier^(0+256)
 14857  1869  0853               	movf	(??_calcCosArray+1)^(0+256),w
 14858  186A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14859  186B  3003               	movlw	3
 14860  186C  00B0               	movwf	___wmul@multiplicand^(0+256)
 14861  186D  3000               	movlw	0
 14862  186E  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14863  186F  31AE  264E  3198   	fcall	___wmul
 14864  1872  0022               	movlb	2	; select bank2
 14865  1873  082F               	movf	(?___wmul+1)^(0+256),w
 14866  1874  0021               	movlb	1	; select bank1
 14867  1875  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14868  1876  0022               	movlb	2	; select bank2
 14869  1877  082E               	movf	?___wmul^(0+256),w
 14870  1878  0021               	movlb	1	; select bank1
 14871  1879  00A8               	movwf	___awtoft@c^(0+128)
 14872  187A  31AE  26E2  3198   	fcall	___awtoft
 14873  187D  0021               	movlb	1	; select bank1
 14874  187E  0828               	movf	?___awtoft^(0+128),w
 14875  187F  00B1               	movwf	___ftmul@f2^(0+128)
 14876  1880  0829               	movf	(?___awtoft+1)^(0+128),w
 14877  1881  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14878  1882  082A               	movf	(?___awtoft+2)^(0+128),w
 14879  1883  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14880  1884  319E  267B  3198   	fcall	___ftmul
 14881  1887  0021               	movlb	1	; select bank1
 14882  1888  082E               	movf	?___ftmul^(0+128),w
 14883  1889  00D1               	movwf	___ftdiv@f1^(0+128)
 14884  188A  082F               	movf	(?___ftmul+1)^(0+128),w
 14885  188B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14886  188C  0830               	movf	(?___ftmul+2)^(0+128),w
 14887  188D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14888  188E  319D  251F  3198   	fcall	___ftdiv
 14889  1891  0021               	movlb	1	; select bank1
 14890  1892  084E               	movf	?___ftdiv^(0+128),w
 14891  1893  0022               	movlb	2	; select bank2
 14892  1894  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 14893  1895  0021               	movlb	1	; select bank1
 14894  1896  084F               	movf	(?___ftdiv+1)^(0+128),w
 14895  1897  0022               	movlb	2	; select bank2
 14896  1898  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 14897  1899  0021               	movlb	1	; select bank1
 14898  189A  0850               	movf	(?___ftdiv+2)^(0+128),w
 14899  189B  0022               	movlb	2	; select bank2
 14900  189C  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 14901                           
 14902                           ;modulation.c: 21: tmpVal = cos(tmpVal);
 14903  189D  0856               	movf	calcCosArray@tmpVal^(0+256),w
 14904  189E  00CC               	movwf	cos@f^(0+256)
 14905  189F  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 14906  18A0  00CD               	movwf	(cos@f+1)^(0+256)
 14907  18A1  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 14908  18A2  00CE               	movwf	(cos@f+2)^(0+256)
 14909  18A3  31A7  2784  3198   	fcall	_cos
 14910  18A6  0022               	movlb	2	; select bank2
 14911  18A7  084C               	movf	?_cos^(0+256),w
 14912  18A8  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 14913  18A9  084D               	movf	(?_cos+1)^(0+256),w
 14914  18AA  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 14915  18AB  084E               	movf	(?_cos+2)^(0+256),w
 14916  18AC  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 14917                           
 14918                           ;modulation.c: 22: cosArray[iAngle] = tmpVal;
 14919  18AD  0859               	movf	calcCosArray@iAngle^(0+256),w
 14920  18AE  00D2               	movwf	??_calcCosArray^(0+256)
 14921  18AF  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 14922  18B0  0852               	movf	??_calcCosArray^(0+256),w
 14923  18B1  00AE               	movwf	___wmul@multiplier^(0+256)
 14924  18B2  0853               	movf	(??_calcCosArray+1)^(0+256),w
 14925  18B3  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14926  18B4  3003               	movlw	3
 14927  18B5  00B0               	movwf	___wmul@multiplicand^(0+256)
 14928  18B6  3000               	movlw	0
 14929  18B7  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14930  18B8  31AE  264E  3198   	fcall	___wmul
 14931  18BB  3082               	movlw	130
 14932  18BC  0022               	movlb	2	; select bank2
 14933  18BD  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 14934  18BE  3024               	movlw	36
 14935  18BF  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 14936  18C0  082E               	movf	?___wmul^(0+256),w
 14937  18C1  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 14938  18C2  0086               	movwf	6
 14939  18C3  082F               	movf	(?___wmul+1)^(0+256),w
 14940  18C4  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 14941  18C5  0087               	movwf	7
 14942  18C6  0856               	movf	calcCosArray@tmpVal^(0+256),w
 14943  18C7  3FC0               	movwi [0]fsr1
 14944  18C8  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 14945  18C9  3FC1               	movwi [1]fsr1
 14946  18CA  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 14947  18CB  3FC2               	movwi [2]fsr1
 14948  18CC  3001               	movlw	1
 14949  18CD  00D2               	movwf	??_calcCosArray^(0+256)
 14950  18CE  0852               	movf	??_calcCosArray^(0+256),w
 14951  18CF  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 14952  18D0  2852               	goto	L17
 14953  18D1                     __end_of_calcCosArray:	
 14954                           
 14955                           	psect	text45
 14956  2784                     __ptext45:	
 14957 ;; *************** function _cos *****************
 14958 ;; Defined at:
 14959 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 14960 ;; Parameters:    Size  Location     Type
 14961 ;;  f               3   44[BANK2 ] void 
 14962 ;; Auto vars:     Size  Location     Type
 14963 ;;		None
 14964 ;; Return value:  Size  Location     Type
 14965 ;;                  3   44[BANK2 ] void 
 14966 ;; Registers used:
 14967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14973 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14974 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14976 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14977 ;;Total ram usage:        6 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    7
 14980 ;; This function calls:
 14981 ;;		___ftadd
 14982 ;;		___ftge
 14983 ;;		_sin
 14984 ;; This function is called by:
 14985 ;;		_calcCosArray
 14986 ;; This function uses a non-reentrant model
 14987 ;;
 14988                           
 14989                           
 14990                           ;psect for function _cos
 14991  2784                     _cos:	
 14992                           
 14993                           ;incstack = 0
 14994                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14995  2784  3010               	movlw	16
 14996  2785  0021               	movlb	1	; select bank1
 14997  2786  00A0               	movwf	___ftge@ff1^(0+128)
 14998  2787  3049               	movlw	73
 14999  2788  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15000  2789  3040               	movlw	64
 15001  278A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15002  278B  0022               	movlb	2	; select bank2
 15003  278C  084C               	movf	cos@f^(0+256),w
 15004  278D  0021               	movlb	1	; select bank1
 15005  278E  00A3               	movwf	___ftge@ff2^(0+128)
 15006  278F  0022               	movlb	2	; select bank2
 15007  2790  084D               	movf	(cos@f+1)^(0+256),w
 15008  2791  0021               	movlb	1	; select bank1
 15009  2792  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15010  2793  0022               	movlb	2	; select bank2
 15011  2794  084E               	movf	(cos@f+2)^(0+256),w
 15012  2795  0021               	movlb	1	; select bank1
 15013  2796  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15014  2797  31A1  217B  31A7   	fcall	___ftge
 15015  279A  1803               	btfsc	3,0
 15016  279B  2FCE               	goto	l8574
 15017  279C  30CC               	movlw	204
 15018  279D  0021               	movlb	1	; select bank1
 15019  279E  00C1               	movwf	___ftadd@f1^(0+128)
 15020  279F  3096               	movlw	150
 15021  27A0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15022  27A1  30C0               	movlw	192
 15023  27A2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15024  27A3  0022               	movlb	2	; select bank2
 15025  27A4  084C               	movf	cos@f^(0+256),w
 15026  27A5  0021               	movlb	1	; select bank1
 15027  27A6  00C4               	movwf	___ftadd@f2^(0+128)
 15028  27A7  0022               	movlb	2	; select bank2
 15029  27A8  084D               	movf	(cos@f+1)^(0+256),w
 15030  27A9  0021               	movlb	1	; select bank1
 15031  27AA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15032  27AB  0022               	movlb	2	; select bank2
 15033  27AC  084E               	movf	(cos@f+2)^(0+256),w
 15034  27AD  0021               	movlb	1	; select bank1
 15035  27AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15036  27AF  3190  2031  31A7   	fcall	___ftadd
 15037  27B2  0021               	movlb	1	; select bank1
 15038  27B3  0841               	movf	?___ftadd^(0+128),w
 15039  27B4  0022               	movlb	2	; select bank2
 15040  27B5  00CF               	movwf	_cos$2859^(0+256)
 15041  27B6  0021               	movlb	1	; select bank1
 15042  27B7  0842               	movf	(?___ftadd+1)^(0+128),w
 15043  27B8  0022               	movlb	2	; select bank2
 15044  27B9  00D0               	movwf	(_cos$2859+1)^(0+256)
 15045  27BA  0021               	movlb	1	; select bank1
 15046  27BB  0843               	movf	(?___ftadd+2)^(0+128),w
 15047  27BC  0022               	movlb	2	; select bank2
 15048  27BD  00D1               	movwf	(_cos$2859+2)^(0+256)
 15049  27BE  084F               	movf	_cos$2859^(0+256),w
 15050  27BF  00BE               	movwf	sin@f^(0+256)
 15051  27C0  0850               	movf	(_cos$2859+1)^(0+256),w
 15052  27C1  00BF               	movwf	(sin@f+1)^(0+256)
 15053  27C2  0851               	movf	(_cos$2859+2)^(0+256),w
 15054  27C3  00C0               	movwf	(sin@f+2)^(0+256)
 15055  27C4  3188  2021         	fcall	_sin
 15056  27C6  0022               	movlb	2	; select bank2
 15057  27C7  083E               	movf	?_sin^(0+256),w
 15058  27C8  00CC               	movwf	?_cos^(0+256)
 15059  27C9  083F               	movf	(?_sin+1)^(0+256),w
 15060  27CA  00CD               	movwf	(?_cos+1)^(0+256)
 15061  27CB  0840               	movf	(?_sin+2)^(0+256),w
 15062  27CC  00CE               	movwf	(?_cos+2)^(0+256)
 15063  27CD  0008               	return
 15064  27CE                     l8574:	
 15065  27CE  3010               	movlw	16
 15066  27CF  0021               	movlb	1	; select bank1
 15067  27D0  00C1               	movwf	___ftadd@f1^(0+128)
 15068  27D1  30C9               	movlw	201
 15069  27D2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15070  27D3  303F               	movlw	63
 15071  27D4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15072  27D5  0022               	movlb	2	; select bank2
 15073  27D6  084C               	movf	cos@f^(0+256),w
 15074  27D7  0021               	movlb	1	; select bank1
 15075  27D8  00C4               	movwf	___ftadd@f2^(0+128)
 15076  27D9  0022               	movlb	2	; select bank2
 15077  27DA  084D               	movf	(cos@f+1)^(0+256),w
 15078  27DB  0021               	movlb	1	; select bank1
 15079  27DC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15080  27DD  0022               	movlb	2	; select bank2
 15081  27DE  084E               	movf	(cos@f+2)^(0+256),w
 15082  27DF  0021               	movlb	1	; select bank1
 15083  27E0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15084  27E1  3190  2031  31A7   	fcall	___ftadd
 15085  27E4  0021               	movlb	1	; select bank1
 15086  27E5  0841               	movf	?___ftadd^(0+128),w
 15087  27E6  0022               	movlb	2	; select bank2
 15088  27E7  00CF               	movwf	_cos$2859^(0+256)
 15089  27E8  0021               	movlb	1	; select bank1
 15090  27E9  0842               	movf	(?___ftadd+1)^(0+128),w
 15091  27EA  0022               	movlb	2	; select bank2
 15092  27EB  00D0               	movwf	(_cos$2859+1)^(0+256)
 15093  27EC  0021               	movlb	1	; select bank1
 15094  27ED  0843               	movf	(?___ftadd+2)^(0+128),w
 15095  27EE  0022               	movlb	2	; select bank2
 15096  27EF  00D1               	movwf	(_cos$2859+2)^(0+256)
 15097  27F0  084F               	movf	_cos$2859^(0+256),w
 15098  27F1  00BE               	movwf	sin@f^(0+256)
 15099  27F2  0850               	movf	(_cos$2859+1)^(0+256),w
 15100  27F3  00BF               	movwf	(sin@f+1)^(0+256)
 15101  27F4  0851               	movf	(_cos$2859+2)^(0+256),w
 15102  27F5  00C0               	movwf	(sin@f+2)^(0+256)
 15103  27F6  3188  2021         	fcall	_sin
 15104  27F8  0022               	movlb	2	; select bank2
 15105  27F9  083E               	movf	?_sin^(0+256),w
 15106  27FA  00CC               	movwf	?_cos^(0+256)
 15107  27FB  083F               	movf	(?_sin+1)^(0+256),w
 15108  27FC  00CD               	movwf	(?_cos+1)^(0+256)
 15109  27FD  0840               	movf	(?_sin+2)^(0+256),w
 15110  27FE  00CE               	movwf	(?_cos+2)^(0+256)
 15111  27FF  0008               	return
 15112  2800                     __end_of_cos:	
 15113                           
 15114                           	psect	text46
 15115  0821                     __ptext46:	
 15116 ;; *************** function _sin *****************
 15117 ;; Defined at:
 15118 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15119 ;; Parameters:    Size  Location     Type
 15120 ;;  f               3   30[BANK2 ] void 
 15121 ;; Auto vars:     Size  Location     Type
 15122 ;;  x2              3   40[BANK2 ] void 
 15123 ;;  y               3   34[BANK2 ] void 
 15124 ;;  sgn             1   43[BANK2 ] unsigned char 
 15125 ;; Return value:  Size  Location     Type
 15126 ;;                  3   30[BANK2 ] unsigned char 
 15127 ;; Registers used:
 15128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15129 ;; Tracked objects:
 15130 ;;		On entry : 0/0
 15131 ;;		On exit  : 0/0
 15132 ;;		Unchanged: 0/0
 15133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15134 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15135 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15136 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15137 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15138 ;;Total ram usage:       14 bytes
 15139 ;; Hardware stack levels used:    1
 15140 ;; Hardware stack levels required when called:    6
 15141 ;; This function calls:
 15142 ;;		___ftadd
 15143 ;;		___ftdiv
 15144 ;;		___ftge
 15145 ;;		___ftmul
 15146 ;;		___ftneg
 15147 ;;		___ftsub
 15148 ;;		_eval_poly
 15149 ;;		_floor
 15150 ;; This function is called by:
 15151 ;;		_cos
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           
 15156                           ;psect for function _sin
 15157  0821                     _sin:	
 15158                           
 15159                           ;incstack = 0
 15160                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15161  0821  0022               	movlb	2	; select bank2
 15162  0822  01CB               	clrf	sin@sgn^(0+256)
 15163  0823  083E               	movf	sin@f^(0+256),w
 15164  0824  0021               	movlb	1	; select bank1
 15165  0825  00A0               	movwf	___ftge@ff1^(0+128)
 15166  0826  0022               	movlb	2	; select bank2
 15167  0827  083F               	movf	(sin@f+1)^(0+256),w
 15168  0828  0021               	movlb	1	; select bank1
 15169  0829  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15170  082A  0022               	movlb	2	; select bank2
 15171  082B  0840               	movf	(sin@f+2)^(0+256),w
 15172  082C  0021               	movlb	1	; select bank1
 15173  082D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15174  082E  3000               	movlw	0
 15175  082F  00A3               	movwf	___ftge@ff2^(0+128)
 15176  0830  3000               	movlw	0
 15177  0831  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15178  0832  3000               	movlw	0
 15179  0833  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15180  0834  31A1  217B  3188   	fcall	___ftge
 15181  0837  1803               	btfsc	3,0
 15182  0838  2856               	goto	l8284
 15183  0839  0022               	movlb	2	; select bank2
 15184  083A  083E               	movf	sin@f^(0+256),w
 15185  083B  0021               	movlb	1	; select bank1
 15186  083C  00BE               	movwf	___ftneg@f1^(0+128)
 15187  083D  0022               	movlb	2	; select bank2
 15188  083E  083F               	movf	(sin@f+1)^(0+256),w
 15189  083F  0021               	movlb	1	; select bank1
 15190  0840  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15191  0841  0022               	movlb	2	; select bank2
 15192  0842  0840               	movf	(sin@f+2)^(0+256),w
 15193  0843  0021               	movlb	1	; select bank1
 15194  0844  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15195  0845  31AD  2593  3188   	fcall	___ftneg
 15196  0848  0021               	movlb	1	; select bank1
 15197  0849  083E               	movf	?___ftneg^(0+128),w
 15198  084A  0022               	movlb	2	; select bank2
 15199  084B  00BE               	movwf	sin@f^(0+256)
 15200  084C  0021               	movlb	1	; select bank1
 15201  084D  083F               	movf	(?___ftneg+1)^(0+128),w
 15202  084E  0022               	movlb	2	; select bank2
 15203  084F  00BF               	movwf	(sin@f+1)^(0+256)
 15204  0850  0021               	movlb	1	; select bank1
 15205  0851  0840               	movf	(?___ftneg+2)^(0+128),w
 15206  0852  0022               	movlb	2	; select bank2
 15207  0853  00C0               	movwf	(sin@f+2)^(0+256)
 15208  0854  01CB               	clrf	sin@sgn^(0+256)
 15209  0855  0ACB               	incf	sin@sgn^(0+256),f
 15210  0856                     l8284:	
 15211  0856  30FA               	movlw	250
 15212  0857  0021               	movlb	1	; select bank1
 15213  0858  00AE               	movwf	___ftmul@f1^(0+128)
 15214  0859  3022               	movlw	34
 15215  085A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15216  085B  303E               	movlw	62
 15217  085C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15218  085D  0022               	movlb	2	; select bank2
 15219  085E  083E               	movf	sin@f^(0+256),w
 15220  085F  0021               	movlb	1	; select bank1
 15221  0860  00B1               	movwf	___ftmul@f2^(0+128)
 15222  0861  0022               	movlb	2	; select bank2
 15223  0862  083F               	movf	(sin@f+1)^(0+256),w
 15224  0863  0021               	movlb	1	; select bank1
 15225  0864  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15226  0865  0022               	movlb	2	; select bank2
 15227  0866  0840               	movf	(sin@f+2)^(0+256),w
 15228  0867  0021               	movlb	1	; select bank1
 15229  0868  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15230  0869  319E  267B  3188   	fcall	___ftmul
 15231  086C  0021               	movlb	1	; select bank1
 15232  086D  082E               	movf	?___ftmul^(0+128),w
 15233  086E  0022               	movlb	2	; select bank2
 15234  086F  00BE               	movwf	sin@f^(0+256)
 15235  0870  0021               	movlb	1	; select bank1
 15236  0871  082F               	movf	(?___ftmul+1)^(0+128),w
 15237  0872  0022               	movlb	2	; select bank2
 15238  0873  00BF               	movwf	(sin@f+1)^(0+256)
 15239  0874  0021               	movlb	1	; select bank1
 15240  0875  0830               	movf	(?___ftmul+2)^(0+128),w
 15241  0876  0022               	movlb	2	; select bank2
 15242  0877  00C0               	movwf	(sin@f+2)^(0+256)
 15243  0878  083E               	movf	sin@f^(0+256),w
 15244  0879  00AE               	movwf	floor@x^(0+256)
 15245  087A  083F               	movf	(sin@f+1)^(0+256),w
 15246  087B  00AF               	movwf	(floor@x+1)^(0+256)
 15247  087C  0840               	movf	(sin@f+2)^(0+256),w
 15248  087D  00B0               	movwf	(floor@x+2)^(0+256)
 15249  087E  319D  25C8  3188   	fcall	_floor
 15250  0881  0022               	movlb	2	; select bank2
 15251  0882  082E               	movf	?_floor^(0+256),w
 15252  0883  00B7               	movwf	___ftsub@f2^(0+256)
 15253  0884  082F               	movf	(?_floor+1)^(0+256),w
 15254  0885  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15255  0886  0830               	movf	(?_floor+2)^(0+256),w
 15256  0887  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15257  0888  083E               	movf	sin@f^(0+256),w
 15258  0889  00BA               	movwf	___ftsub@f1^(0+256)
 15259  088A  083F               	movf	(sin@f+1)^(0+256),w
 15260  088B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15261  088C  0840               	movf	(sin@f+2)^(0+256),w
 15262  088D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15263  088E  31AF  27A3  3188   	fcall	___ftsub
 15264  0891  0022               	movlb	2	; select bank2
 15265  0892  0837               	movf	?___ftsub^(0+256),w
 15266  0893  00BE               	movwf	sin@f^(0+256)
 15267  0894  0838               	movf	(?___ftsub+1)^(0+256),w
 15268  0895  00BF               	movwf	(sin@f+1)^(0+256)
 15269  0896  0839               	movf	(?___ftsub+2)^(0+256),w
 15270  0897  00C0               	movwf	(sin@f+2)^(0+256)
 15271  0898  3000               	movlw	0
 15272  0899  0021               	movlb	1	; select bank1
 15273  089A  00AE               	movwf	___ftmul@f1^(0+128)
 15274  089B  3080               	movlw	128
 15275  089C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15276  089D  3040               	movlw	64
 15277  089E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15278  089F  0022               	movlb	2	; select bank2
 15279  08A0  083E               	movf	sin@f^(0+256),w
 15280  08A1  0021               	movlb	1	; select bank1
 15281  08A2  00B1               	movwf	___ftmul@f2^(0+128)
 15282  08A3  0022               	movlb	2	; select bank2
 15283  08A4  083F               	movf	(sin@f+1)^(0+256),w
 15284  08A5  0021               	movlb	1	; select bank1
 15285  08A6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15286  08A7  0022               	movlb	2	; select bank2
 15287  08A8  0840               	movf	(sin@f+2)^(0+256),w
 15288  08A9  0021               	movlb	1	; select bank1
 15289  08AA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15290  08AB  319E  267B  3188   	fcall	___ftmul
 15291  08AE  0021               	movlb	1	; select bank1
 15292  08AF  082E               	movf	?___ftmul^(0+128),w
 15293  08B0  0022               	movlb	2	; select bank2
 15294  08B1  00BE               	movwf	sin@f^(0+256)
 15295  08B2  0021               	movlb	1	; select bank1
 15296  08B3  082F               	movf	(?___ftmul+1)^(0+128),w
 15297  08B4  0022               	movlb	2	; select bank2
 15298  08B5  00BF               	movwf	(sin@f+1)^(0+256)
 15299  08B6  0021               	movlb	1	; select bank1
 15300  08B7  0830               	movf	(?___ftmul+2)^(0+128),w
 15301  08B8  0022               	movlb	2	; select bank2
 15302  08B9  00C0               	movwf	(sin@f+2)^(0+256)
 15303  08BA  3000               	movlw	0
 15304  08BB  0021               	movlb	1	; select bank1
 15305  08BC  00A0               	movwf	___ftge@ff1^(0+128)
 15306  08BD  3000               	movlw	0
 15307  08BE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15308  08BF  3040               	movlw	64
 15309  08C0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15310  08C1  0022               	movlb	2	; select bank2
 15311  08C2  083E               	movf	sin@f^(0+256),w
 15312  08C3  0021               	movlb	1	; select bank1
 15313  08C4  00A3               	movwf	___ftge@ff2^(0+128)
 15314  08C5  0022               	movlb	2	; select bank2
 15315  08C6  083F               	movf	(sin@f+1)^(0+256),w
 15316  08C7  0021               	movlb	1	; select bank1
 15317  08C8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15318  08C9  0022               	movlb	2	; select bank2
 15319  08CA  0840               	movf	(sin@f+2)^(0+256),w
 15320  08CB  0021               	movlb	1	; select bank1
 15321  08CC  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15322  08CD  31A1  217B  3188   	fcall	___ftge
 15323  08D0  1803               	btfsc	3,0
 15324  08D1  28F2               	goto	l8296
 15325  08D2  3000               	movlw	0
 15326  08D3  0022               	movlb	2	; select bank2
 15327  08D4  00B7               	movwf	___ftsub@f2^(0+256)
 15328  08D5  3000               	movlw	0
 15329  08D6  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 15330  08D7  3040               	movlw	64
 15331  08D8  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 15332  08D9  083E               	movf	sin@f^(0+256),w
 15333  08DA  00BA               	movwf	___ftsub@f1^(0+256)
 15334  08DB  083F               	movf	(sin@f+1)^(0+256),w
 15335  08DC  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 15336  08DD  0840               	movf	(sin@f+2)^(0+256),w
 15337  08DE  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 15338  08DF  31AF  27A3  3188   	fcall	___ftsub
 15339  08E2  0022               	movlb	2	; select bank2
 15340  08E3  0837               	movf	?___ftsub^(0+256),w
 15341  08E4  00BE               	movwf	sin@f^(0+256)
 15342  08E5  0838               	movf	(?___ftsub+1)^(0+256),w
 15343  08E6  00BF               	movwf	(sin@f+1)^(0+256)
 15344  08E7  0839               	movf	(?___ftsub+2)^(0+256),w
 15345  08E8  00C0               	movwf	(sin@f+2)^(0+256)
 15346  08E9  084B               	movf	sin@sgn^(0+256),w
 15347  08EA  1D03               	btfss	3,2
 15348  08EB  28EE               	goto	u8680
 15349  08EC  3001               	movlw	1
 15350  08ED  28EF               	goto	u8690
 15351  08EE                     u8680:	
 15352  08EE  3000               	movlw	0
 15353  08EF                     u8690:	
 15354  08EF  00C1               	movwf	??_sin^(0+256)
 15355  08F0  0841               	movf	??_sin^(0+256),w
 15356  08F1  00CB               	movwf	sin@sgn^(0+256)
 15357  08F2                     l8296:	
 15358  08F2  3000               	movlw	0
 15359  08F3  0021               	movlb	1	; select bank1
 15360  08F4  00A0               	movwf	___ftge@ff1^(0+128)
 15361  08F5  3080               	movlw	128
 15362  08F6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15363  08F7  303F               	movlw	63
 15364  08F8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15365  08F9  0022               	movlb	2	; select bank2
 15366  08FA  083E               	movf	sin@f^(0+256),w
 15367  08FB  0021               	movlb	1	; select bank1
 15368  08FC  00A3               	movwf	___ftge@ff2^(0+128)
 15369  08FD  0022               	movlb	2	; select bank2
 15370  08FE  083F               	movf	(sin@f+1)^(0+256),w
 15371  08FF  0021               	movlb	1	; select bank1
 15372  0900  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15373  0901  0022               	movlb	2	; select bank2
 15374  0902  0840               	movf	(sin@f+2)^(0+256),w
 15375  0903  0021               	movlb	1	; select bank1
 15376  0904  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15377  0905  31A1  217B  3188   	fcall	___ftge
 15378  0908  1803               	btfsc	3,0
 15379  0909  2936               	goto	l2350
 15380  090A  3000               	movlw	0
 15381  090B  0021               	movlb	1	; select bank1
 15382  090C  00C1               	movwf	___ftadd@f1^(0+128)
 15383  090D  3000               	movlw	0
 15384  090E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15385  090F  3040               	movlw	64
 15386  0910  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15387  0911  0022               	movlb	2	; select bank2
 15388  0912  083E               	movf	sin@f^(0+256),w
 15389  0913  0021               	movlb	1	; select bank1
 15390  0914  00BE               	movwf	___ftneg@f1^(0+128)
 15391  0915  0022               	movlb	2	; select bank2
 15392  0916  083F               	movf	(sin@f+1)^(0+256),w
 15393  0917  0021               	movlb	1	; select bank1
 15394  0918  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15395  0919  0022               	movlb	2	; select bank2
 15396  091A  0840               	movf	(sin@f+2)^(0+256),w
 15397  091B  0021               	movlb	1	; select bank1
 15398  091C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15399  091D  31AD  2593  3188   	fcall	___ftneg
 15400  0920  0021               	movlb	1	; select bank1
 15401  0921  083E               	movf	?___ftneg^(0+128),w
 15402  0922  00C4               	movwf	___ftadd@f2^(0+128)
 15403  0923  083F               	movf	(?___ftneg+1)^(0+128),w
 15404  0924  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15405  0925  0840               	movf	(?___ftneg+2)^(0+128),w
 15406  0926  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15407  0927  3190  2031  3188   	fcall	___ftadd
 15408  092A  0021               	movlb	1	; select bank1
 15409  092B  0841               	movf	?___ftadd^(0+128),w
 15410  092C  0022               	movlb	2	; select bank2
 15411  092D  00BE               	movwf	sin@f^(0+256)
 15412  092E  0021               	movlb	1	; select bank1
 15413  092F  0842               	movf	(?___ftadd+1)^(0+128),w
 15414  0930  0022               	movlb	2	; select bank2
 15415  0931  00BF               	movwf	(sin@f+1)^(0+256)
 15416  0932  0021               	movlb	1	; select bank1
 15417  0933  0843               	movf	(?___ftadd+2)^(0+128),w
 15418  0934  0022               	movlb	2	; select bank2
 15419  0935  00C0               	movwf	(sin@f+2)^(0+256)
 15420  0936                     l2350:	
 15421  0936  0022               	movlb	2	; select bank2
 15422  0937  083E               	movf	sin@f^(0+256),w
 15423  0938  0021               	movlb	1	; select bank1
 15424  0939  00AE               	movwf	___ftmul@f1^(0+128)
 15425  093A  0022               	movlb	2	; select bank2
 15426  093B  083F               	movf	(sin@f+1)^(0+256),w
 15427  093C  0021               	movlb	1	; select bank1
 15428  093D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15429  093E  0022               	movlb	2	; select bank2
 15430  093F  0840               	movf	(sin@f+2)^(0+256),w
 15431  0940  0021               	movlb	1	; select bank1
 15432  0941  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15433  0942  0022               	movlb	2	; select bank2
 15434  0943  083E               	movf	sin@f^(0+256),w
 15435  0944  0021               	movlb	1	; select bank1
 15436  0945  00B1               	movwf	___ftmul@f2^(0+128)
 15437  0946  0022               	movlb	2	; select bank2
 15438  0947  083F               	movf	(sin@f+1)^(0+256),w
 15439  0948  0021               	movlb	1	; select bank1
 15440  0949  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15441  094A  0022               	movlb	2	; select bank2
 15442  094B  0840               	movf	(sin@f+2)^(0+256),w
 15443  094C  0021               	movlb	1	; select bank1
 15444  094D  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15445  094E  319E  267B  3188   	fcall	___ftmul
 15446  0951  0021               	movlb	1	; select bank1
 15447  0952  082E               	movf	?___ftmul^(0+128),w
 15448  0953  0022               	movlb	2	; select bank2
 15449  0954  00C8               	movwf	sin@x2^(0+256)
 15450  0955  0021               	movlb	1	; select bank1
 15451  0956  082F               	movf	(?___ftmul+1)^(0+128),w
 15452  0957  0022               	movlb	2	; select bank2
 15453  0958  00C9               	movwf	(sin@x2+1)^(0+256)
 15454  0959  0021               	movlb	1	; select bank1
 15455  095A  0830               	movf	(?___ftmul+2)^(0+128),w
 15456  095B  0022               	movlb	2	; select bank2
 15457  095C  00CA               	movwf	(sin@x2+2)^(0+256)
 15458  095D  0848               	movf	sin@x2^(0+256),w
 15459  095E  00B4               	movwf	eval_poly@x^(0+256)
 15460  095F  0849               	movf	(sin@x2+1)^(0+256),w
 15461  0960  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15462  0961  084A               	movf	(sin@x2+2)^(0+256),w
 15463  0962  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15464  0963  3048               	movlw	low (sin@coeff_b| (0+32768))
 15465  0964  00B7               	movwf	eval_poly@d^(0+256)
 15466  0965  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15467  0966  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15468  0967  3003               	movlw	3
 15469  0968  00B9               	movwf	eval_poly@n^(0+256)
 15470  0969  3000               	movlw	0
 15471  096A  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15472  096B  31A6  269C  3188   	fcall	_eval_poly
 15473  096E  0022               	movlb	2	; select bank2
 15474  096F  0834               	movf	?_eval_poly^(0+256),w
 15475  0970  00C2               	movwf	sin@y^(0+256)
 15476  0971  0835               	movf	(?_eval_poly+1)^(0+256),w
 15477  0972  00C3               	movwf	(sin@y+1)^(0+256)
 15478  0973  0836               	movf	(?_eval_poly+2)^(0+256),w
 15479  0974  00C4               	movwf	(sin@y+2)^(0+256)
 15480  0975  3004               	movlw	4
 15481  0976  00B9               	movwf	eval_poly@n^(0+256)
 15482  0977  3000               	movlw	0
 15483  0978  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15484  0979  3039               	movlw	low (sin@coeff_a| (0+32768))
 15485  097A  00B7               	movwf	eval_poly@d^(0+256)
 15486  097B  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15487  097C  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15488  097D  0848               	movf	sin@x2^(0+256),w
 15489  097E  00B4               	movwf	eval_poly@x^(0+256)
 15490  097F  0849               	movf	(sin@x2+1)^(0+256),w
 15491  0980  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15492  0981  084A               	movf	(sin@x2+2)^(0+256),w
 15493  0982  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15494  0983  31A6  269C  3188   	fcall	_eval_poly
 15495  0986  0022               	movlb	2	; select bank2
 15496  0987  0834               	movf	?_eval_poly^(0+256),w
 15497  0988  0021               	movlb	1	; select bank1
 15498  0989  00D1               	movwf	___ftdiv@f1^(0+128)
 15499  098A  0022               	movlb	2	; select bank2
 15500  098B  0835               	movf	(?_eval_poly+1)^(0+256),w
 15501  098C  0021               	movlb	1	; select bank1
 15502  098D  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15503  098E  0022               	movlb	2	; select bank2
 15504  098F  0836               	movf	(?_eval_poly+2)^(0+256),w
 15505  0990  0021               	movlb	1	; select bank1
 15506  0991  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15507  0992  0022               	movlb	2	; select bank2
 15508  0993  0842               	movf	sin@y^(0+256),w
 15509  0994  0021               	movlb	1	; select bank1
 15510  0995  00CE               	movwf	___ftdiv@f2^(0+128)
 15511  0996  0022               	movlb	2	; select bank2
 15512  0997  0843               	movf	(sin@y+1)^(0+256),w
 15513  0998  0021               	movlb	1	; select bank1
 15514  0999  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15515  099A  0022               	movlb	2	; select bank2
 15516  099B  0844               	movf	(sin@y+2)^(0+256),w
 15517  099C  0021               	movlb	1	; select bank1
 15518  099D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15519  099E  319D  251F  3188   	fcall	___ftdiv
 15520  09A1  0021               	movlb	1	; select bank1
 15521  09A2  084E               	movf	?___ftdiv^(0+128),w
 15522  09A3  0022               	movlb	2	; select bank2
 15523  09A4  00C5               	movwf	_sin$2862^(0+256)
 15524  09A5  0021               	movlb	1	; select bank1
 15525  09A6  084F               	movf	(?___ftdiv+1)^(0+128),w
 15526  09A7  0022               	movlb	2	; select bank2
 15527  09A8  00C6               	movwf	(_sin$2862+1)^(0+256)
 15528  09A9  0021               	movlb	1	; select bank1
 15529  09AA  0850               	movf	(?___ftdiv+2)^(0+128),w
 15530  09AB  0022               	movlb	2	; select bank2
 15531  09AC  00C7               	movwf	(_sin$2862+2)^(0+256)
 15532  09AD  0845               	movf	_sin$2862^(0+256),w
 15533  09AE  0021               	movlb	1	; select bank1
 15534  09AF  00AE               	movwf	___ftmul@f1^(0+128)
 15535  09B0  0022               	movlb	2	; select bank2
 15536  09B1  0846               	movf	(_sin$2862+1)^(0+256),w
 15537  09B2  0021               	movlb	1	; select bank1
 15538  09B3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15539  09B4  0022               	movlb	2	; select bank2
 15540  09B5  0847               	movf	(_sin$2862+2)^(0+256),w
 15541  09B6  0021               	movlb	1	; select bank1
 15542  09B7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15543  09B8  0022               	movlb	2	; select bank2
 15544  09B9  083E               	movf	sin@f^(0+256),w
 15545  09BA  0021               	movlb	1	; select bank1
 15546  09BB  00B1               	movwf	___ftmul@f2^(0+128)
 15547  09BC  0022               	movlb	2	; select bank2
 15548  09BD  083F               	movf	(sin@f+1)^(0+256),w
 15549  09BE  0021               	movlb	1	; select bank1
 15550  09BF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15551  09C0  0022               	movlb	2	; select bank2
 15552  09C1  0840               	movf	(sin@f+2)^(0+256),w
 15553  09C2  0021               	movlb	1	; select bank1
 15554  09C3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15555  09C4  319E  267B  3188   	fcall	___ftmul
 15556  09C7  0021               	movlb	1	; select bank1
 15557  09C8  082E               	movf	?___ftmul^(0+128),w
 15558  09C9  0022               	movlb	2	; select bank2
 15559  09CA  00BE               	movwf	sin@f^(0+256)
 15560  09CB  0021               	movlb	1	; select bank1
 15561  09CC  082F               	movf	(?___ftmul+1)^(0+128),w
 15562  09CD  0022               	movlb	2	; select bank2
 15563  09CE  00BF               	movwf	(sin@f+1)^(0+256)
 15564  09CF  0021               	movlb	1	; select bank1
 15565  09D0  0830               	movf	(?___ftmul+2)^(0+128),w
 15566  09D1  0022               	movlb	2	; select bank2
 15567  09D2  00C0               	movwf	(sin@f+2)^(0+256)
 15568  09D3  084B               	movf	sin@sgn^(0+256),w
 15569  09D4  1903               	btfsc	3,2
 15570  09D5  0008               	return
 15571  09D6  083E               	movf	sin@f^(0+256),w
 15572  09D7  0021               	movlb	1	; select bank1
 15573  09D8  00BE               	movwf	___ftneg@f1^(0+128)
 15574  09D9  0022               	movlb	2	; select bank2
 15575  09DA  083F               	movf	(sin@f+1)^(0+256),w
 15576  09DB  0021               	movlb	1	; select bank1
 15577  09DC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15578  09DD  0022               	movlb	2	; select bank2
 15579  09DE  0840               	movf	(sin@f+2)^(0+256),w
 15580  09DF  0021               	movlb	1	; select bank1
 15581  09E0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15582  09E1  31AD  2593         	fcall	___ftneg
 15583  09E3  0021               	movlb	1	; select bank1
 15584  09E4  083E               	movf	?___ftneg^(0+128),w
 15585  09E5  0022               	movlb	2	; select bank2
 15586  09E6  00BE               	movwf	?_sin^(0+256)
 15587  09E7  0021               	movlb	1	; select bank1
 15588  09E8  083F               	movf	(?___ftneg+1)^(0+128),w
 15589  09E9  0022               	movlb	2	; select bank2
 15590  09EA  00BF               	movwf	(?_sin+1)^(0+256)
 15591  09EB  0021               	movlb	1	; select bank1
 15592  09EC  0840               	movf	(?___ftneg+2)^(0+128),w
 15593  09ED  0022               	movlb	2	; select bank2
 15594  09EE  00C0               	movwf	(?_sin+2)^(0+256)
 15595  09EF  0008               	return
 15596  09F0                     __end_of_sin:	
 15597                           
 15598                           	psect	text47
 15599  1DC8                     __ptext47:	
 15600 ;; *************** function _floor *****************
 15601 ;; Defined at:
 15602 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15603 ;; Parameters:    Size  Location     Type
 15604 ;;  x               3   14[BANK2 ] unsigned char 
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;  i               3   18[BANK2 ] unsigned char 
 15607 ;;  expon           2   21[BANK2 ] int 
 15608 ;; Return value:  Size  Location     Type
 15609 ;;                  3   14[BANK2 ] int 
 15610 ;; Registers used:
 15611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15612 ;; Tracked objects:
 15613 ;;		On entry : 0/0
 15614 ;;		On exit  : 0/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15617 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15618 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15619 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15620 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15621 ;;Total ram usage:        9 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    5
 15624 ;; This function calls:
 15625 ;;		___altoft
 15626 ;;		___ftadd
 15627 ;;		___ftge
 15628 ;;		___fttol
 15629 ;;		_frexp
 15630 ;; This function is called by:
 15631 ;;		_sin
 15632 ;;		_exp
 15633 ;; This function uses a non-reentrant model
 15634 ;;
 15635                           
 15636                           
 15637                           ;psect for function _floor
 15638  1DC8                     _floor:	
 15639                           
 15640                           ;incstack = 0
 15641                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15642  1DC8  0022               	movlb	2	; select bank2
 15643  1DC9  082E               	movf	floor@x^(0+256),w
 15644  1DCA  0021               	movlb	1	; select bank1
 15645  1DCB  00A0               	movwf	frexp@value^(0+128)
 15646  1DCC  0022               	movlb	2	; select bank2
 15647  1DCD  082F               	movf	(floor@x+1)^(0+256),w
 15648  1DCE  0021               	movlb	1	; select bank1
 15649  1DCF  00A1               	movwf	(frexp@value+1)^(0+128)
 15650  1DD0  0022               	movlb	2	; select bank2
 15651  1DD1  0830               	movf	(floor@x+2)^(0+256),w
 15652  1DD2  0021               	movlb	1	; select bank1
 15653  1DD3  00A2               	movwf	(frexp@value+2)^(0+128)
 15654  1DD4  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15655  1DD5  0022               	movlb	2	; select bank2
 15656  1DD6  00B1               	movwf	??_floor^(0+256)
 15657  1DD7  0831               	movf	??_floor^(0+256),w
 15658  1DD8  0021               	movlb	1	; select bank1
 15659  1DD9  00A3               	movwf	frexp@eptr^(0+128)
 15660  1DDA  31A2  226E  319D   	fcall	_frexp
 15661  1DDD  0022               	movlb	2	; select bank2
 15662  1DDE  1FB6               	btfss	(floor@expon+1)^(0+256),7
 15663  1DDF  2E06               	goto	l8132
 15664  1DE0  082E               	movf	floor@x^(0+256),w
 15665  1DE1  0021               	movlb	1	; select bank1
 15666  1DE2  00A0               	movwf	___ftge@ff1^(0+128)
 15667  1DE3  0022               	movlb	2	; select bank2
 15668  1DE4  082F               	movf	(floor@x+1)^(0+256),w
 15669  1DE5  0021               	movlb	1	; select bank1
 15670  1DE6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15671  1DE7  0022               	movlb	2	; select bank2
 15672  1DE8  0830               	movf	(floor@x+2)^(0+256),w
 15673  1DE9  0021               	movlb	1	; select bank1
 15674  1DEA  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15675  1DEB  3000               	movlw	0
 15676  1DEC  00A3               	movwf	___ftge@ff2^(0+128)
 15677  1DED  3000               	movlw	0
 15678  1DEE  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15679  1DEF  3000               	movlw	0
 15680  1DF0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15681  1DF1  31A1  217B  319D   	fcall	___ftge
 15682  1DF4  1803               	btfsc	3,0
 15683  1DF5  2DFE               	goto	l8128
 15684  1DF6  3000               	movlw	0
 15685  1DF7  0022               	movlb	2	; select bank2
 15686  1DF8  00AE               	movwf	?_floor^(0+256)
 15687  1DF9  3080               	movlw	128
 15688  1DFA  00AF               	movwf	(?_floor+1)^(0+256)
 15689  1DFB  30BF               	movlw	191
 15690  1DFC  00B0               	movwf	(?_floor+2)^(0+256)
 15691  1DFD  0008               	return
 15692  1DFE                     l8128:	
 15693  1DFE  3000               	movlw	0
 15694  1DFF  0022               	movlb	2	; select bank2
 15695  1E00  00AE               	movwf	?_floor^(0+256)
 15696  1E01  3000               	movlw	0
 15697  1E02  00AF               	movwf	(?_floor+1)^(0+256)
 15698  1E03  3000               	movlw	0
 15699  1E04  00B0               	movwf	(?_floor+2)^(0+256)
 15700  1E05  0008               	return
 15701  1E06                     l8132:	
 15702  1E06  3000               	movlw	0
 15703  1E07  0236               	subwf	(floor@expon+1)^(0+256),w
 15704  1E08  3015               	movlw	21
 15705  1E09  1903               	skipnz
 15706  1E0A  0235               	subwf	floor@expon^(0+256),w
 15707  1E0B  1803               	btfsc	3,0
 15708  1E0C  0008               	return
 15709  1E0D  082E               	movf	floor@x^(0+256),w
 15710  1E0E  00A0               	movwf	___fttol@f1^(0+256)
 15711  1E0F  082F               	movf	(floor@x+1)^(0+256),w
 15712  1E10  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15713  1E11  0830               	movf	(floor@x+2)^(0+256),w
 15714  1E12  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15715  1E13  319A  225A  319D   	fcall	___fttol
 15716  1E16  0022               	movlb	2	; select bank2
 15717  1E17  0823               	movf	(?___fttol+3)^(0+256),w
 15718  1E18  0021               	movlb	1	; select bank1
 15719  1E19  00AB               	movwf	(___altoft@c+3)^(0+128)
 15720  1E1A  0022               	movlb	2	; select bank2
 15721  1E1B  0822               	movf	(?___fttol+2)^(0+256),w
 15722  1E1C  0021               	movlb	1	; select bank1
 15723  1E1D  00AA               	movwf	(___altoft@c+2)^(0+128)
 15724  1E1E  0022               	movlb	2	; select bank2
 15725  1E1F  0821               	movf	(?___fttol+1)^(0+256),w
 15726  1E20  0021               	movlb	1	; select bank1
 15727  1E21  00A9               	movwf	(___altoft@c+1)^(0+128)
 15728  1E22  0022               	movlb	2	; select bank2
 15729  1E23  0820               	movf	?___fttol^(0+256),w
 15730  1E24  0021               	movlb	1	; select bank1
 15731  1E25  00A8               	movwf	___altoft@c^(0+128)
 15732  1E26  31A1  21B7  319D   	fcall	___altoft
 15733  1E29  0021               	movlb	1	; select bank1
 15734  1E2A  0828               	movf	?___altoft^(0+128),w
 15735  1E2B  0022               	movlb	2	; select bank2
 15736  1E2C  00B2               	movwf	floor@i^(0+256)
 15737  1E2D  0021               	movlb	1	; select bank1
 15738  1E2E  0829               	movf	(?___altoft+1)^(0+128),w
 15739  1E2F  0022               	movlb	2	; select bank2
 15740  1E30  00B3               	movwf	(floor@i+1)^(0+256)
 15741  1E31  0021               	movlb	1	; select bank1
 15742  1E32  082A               	movf	(?___altoft+2)^(0+128),w
 15743  1E33  0022               	movlb	2	; select bank2
 15744  1E34  00B4               	movwf	(floor@i+2)^(0+256)
 15745  1E35  082E               	movf	floor@x^(0+256),w
 15746  1E36  0021               	movlb	1	; select bank1
 15747  1E37  00A0               	movwf	___ftge@ff1^(0+128)
 15748  1E38  0022               	movlb	2	; select bank2
 15749  1E39  082F               	movf	(floor@x+1)^(0+256),w
 15750  1E3A  0021               	movlb	1	; select bank1
 15751  1E3B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15752  1E3C  0022               	movlb	2	; select bank2
 15753  1E3D  0830               	movf	(floor@x+2)^(0+256),w
 15754  1E3E  0021               	movlb	1	; select bank1
 15755  1E3F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15756  1E40  0022               	movlb	2	; select bank2
 15757  1E41  0832               	movf	floor@i^(0+256),w
 15758  1E42  0021               	movlb	1	; select bank1
 15759  1E43  00A3               	movwf	___ftge@ff2^(0+128)
 15760  1E44  0022               	movlb	2	; select bank2
 15761  1E45  0833               	movf	(floor@i+1)^(0+256),w
 15762  1E46  0021               	movlb	1	; select bank1
 15763  1E47  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15764  1E48  0022               	movlb	2	; select bank2
 15765  1E49  0834               	movf	(floor@i+2)^(0+256),w
 15766  1E4A  0021               	movlb	1	; select bank1
 15767  1E4B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15768  1E4C  31A1  217B  319D   	fcall	___ftge
 15769  1E4F  1803               	btfsc	3,0
 15770  1E50  2E73               	goto	l8142
 15771  1E51  3000               	movlw	0
 15772  1E52  0021               	movlb	1	; select bank1
 15773  1E53  00C1               	movwf	___ftadd@f1^(0+128)
 15774  1E54  3080               	movlw	128
 15775  1E55  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15776  1E56  30BF               	movlw	191
 15777  1E57  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15778  1E58  0022               	movlb	2	; select bank2
 15779  1E59  0832               	movf	floor@i^(0+256),w
 15780  1E5A  0021               	movlb	1	; select bank1
 15781  1E5B  00C4               	movwf	___ftadd@f2^(0+128)
 15782  1E5C  0022               	movlb	2	; select bank2
 15783  1E5D  0833               	movf	(floor@i+1)^(0+256),w
 15784  1E5E  0021               	movlb	1	; select bank1
 15785  1E5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15786  1E60  0022               	movlb	2	; select bank2
 15787  1E61  0834               	movf	(floor@i+2)^(0+256),w
 15788  1E62  0021               	movlb	1	; select bank1
 15789  1E63  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15790  1E64  3190  2031         	fcall	___ftadd
 15791  1E66  0021               	movlb	1	; select bank1
 15792  1E67  0841               	movf	?___ftadd^(0+128),w
 15793  1E68  0022               	movlb	2	; select bank2
 15794  1E69  00AE               	movwf	?_floor^(0+256)
 15795  1E6A  0021               	movlb	1	; select bank1
 15796  1E6B  0842               	movf	(?___ftadd+1)^(0+128),w
 15797  1E6C  0022               	movlb	2	; select bank2
 15798  1E6D  00AF               	movwf	(?_floor+1)^(0+256)
 15799  1E6E  0021               	movlb	1	; select bank1
 15800  1E6F  0843               	movf	(?___ftadd+2)^(0+128),w
 15801  1E70  0022               	movlb	2	; select bank2
 15802  1E71  00B0               	movwf	(?_floor+2)^(0+256)
 15803  1E72  0008               	return
 15804  1E73                     l8142:	
 15805  1E73  0022               	movlb	2	; select bank2
 15806  1E74  0832               	movf	floor@i^(0+256),w
 15807  1E75  00AE               	movwf	?_floor^(0+256)
 15808  1E76  0833               	movf	(floor@i+1)^(0+256),w
 15809  1E77  00AF               	movwf	(?_floor+1)^(0+256)
 15810  1E78  0834               	movf	(floor@i+2)^(0+256),w
 15811  1E79  00B0               	movwf	(?_floor+2)^(0+256)
 15812  1E7A  0008               	return
 15813  1E7B                     __end_of_floor:	
 15814                           
 15815                           	psect	text48
 15816  226E                     __ptext48:	
 15817 ;; *************** function _frexp *****************
 15818 ;; Defined at:
 15819 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;  value           3    0[BANK1 ] int 
 15822 ;;  eptr            1    3[BANK1 ] PTR int 
 15823 ;;		 -> log@exponent(2), floor@expon(2), 
 15824 ;; Auto vars:     Size  Location     Type
 15825 ;;		None
 15826 ;; Return value:  Size  Location     Type
 15827 ;;                  3    0[BANK1 ] PTR int 
 15828 ;; Registers used:
 15829 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15830 ;; Tracked objects:
 15831 ;;		On entry : 0/0
 15832 ;;		On exit  : 0/0
 15833 ;;		Unchanged: 0/0
 15834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15835 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15837 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15838 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15839 ;;Total ram usage:        6 bytes
 15840 ;; Hardware stack levels used:    1
 15841 ;; Hardware stack levels required when called:    3
 15842 ;; This function calls:
 15843 ;;		Nothing
 15844 ;; This function is called by:
 15845 ;;		_floor
 15846 ;;		_log
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           
 15851                           ;psect for function _frexp
 15852  226E                     _frexp:	
 15853                           
 15854                           ;incstack = 0
 15855                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15856  226E  0021               	movlb	1	; select bank1
 15857  226F  0822               	movf	(frexp@value+2)^(0+128),w
 15858  2270  0421               	iorwf	(frexp@value+1)^(0+128),w
 15859  2271  0420               	iorwf	frexp@value^(0+128),w
 15860  2272  1D03               	skipz
 15861  2273  2A82               	goto	l7994
 15862  2274  0823               	movf	frexp@eptr^(0+128),w
 15863  2275  0086               	movwf	6
 15864  2276  3001               	movlw	1	; select bank2/3
 15865  2277  0087               	movwf	7
 15866  2278  3000               	movlw	0
 15867  2279  3FC0               	movwi [0]fsr1
 15868  227A  3FC1               	movwi [1]fsr1
 15869  227B  3000               	movlw	0
 15870  227C  00A0               	movwf	?_frexp^(0+128)
 15871  227D  3000               	movlw	0
 15872  227E  00A1               	movwf	(?_frexp+1)^(0+128)
 15873  227F  3000               	movlw	0
 15874  2280  00A2               	movwf	(?_frexp+2)^(0+128)
 15875  2281  0008               	return
 15876  2282                     l7994:	
 15877  2282  0822               	movf	(frexp@value^(0+128)+2),w
 15878  2283  397F               	andlw	127
 15879  2284  00A4               	movwf	??_frexp^(0+128)
 15880  2285  01A5               	clrf	(??_frexp^(0+128)+1)
 15881  2286  35A4               	lslf	??_frexp^(0+128),f
 15882  2287  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15883  2288  0823               	movf	frexp@eptr^(0+128),w
 15884  2289  0086               	movwf	6
 15885  228A  3001               	movlw	1	; select bank2/3
 15886  228B  0087               	movwf	7
 15887  228C  0824               	movf	??_frexp^(0+128),w
 15888  228D  3FC0               	movwi [0]fsr1
 15889  228E  0825               	movf	(??_frexp+1)^(0+128),w
 15890  228F  3FC1               	movwi [1]fsr1
 15891  2290  0D21               	rlf	(frexp@value^(0+128)+1),w
 15892  2291  0D21               	rlf	(frexp@value^(0+128)+1),w
 15893  2292  3901               	andlw	1
 15894  2293  00A4               	movwf	??_frexp^(0+128)
 15895  2294  01A5               	clrf	(??_frexp^(0+128)+1)
 15896  2295  0823               	movf	frexp@eptr^(0+128),w
 15897  2296  0086               	movwf	6
 15898  2297  3001               	movlw	1	; select bank2/3
 15899  2298  0087               	movwf	7
 15900  2299  0824               	movf	??_frexp^(0+128),w
 15901  229A  0481               	iorwf	1,f
 15902  229B  3141               	addfsr 1,1
 15903  229C  0825               	movf	(??_frexp+1)^(0+128),w
 15904  229D  0481               	iorwf	1,f
 15905  229E  0823               	movf	frexp@eptr^(0+128),w
 15906  229F  0086               	movwf	6
 15907  22A0  3001               	movlw	1	; select bank2/3
 15908  22A1  0087               	movwf	7
 15909  22A2  3082               	movlw	130
 15910  22A3  0781               	addwf	1,f
 15911  22A4  3141               	addfsr 1,1
 15912  22A5  30FF               	movlw	255
 15913  22A6  3D81               	addwfc	1,f
 15914  22A7  317F               	addfsr 1,-1
 15915  22A8  0822               	movf	(frexp@value^(0+128)+2),w
 15916  22A9  3980               	andlw	-128
 15917  22AA  383F               	iorlw	63
 15918  22AB  00A2               	movwf	(frexp@value^(0+128)+2)
 15919  22AC  13A1               	bcf	(frexp@value^(0+128)+1),7
 15920  22AD  0008               	return
 15921  22AE                     __end_of_frexp:	
 15922                           
 15923                           	psect	text49
 15924  1A5A                     __ptext49:	
 15925 ;; *************** function ___fttol *****************
 15926 ;; Defined at:
 15927 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15928 ;; Parameters:    Size  Location     Type
 15929 ;;  f1              3    0[BANK2 ] float 
 15930 ;; Auto vars:     Size  Location     Type
 15931 ;;  lval            4    9[BANK2 ] unsigned long 
 15932 ;;  exp1            1   13[BANK2 ] unsigned char 
 15933 ;;  sign1           1    8[BANK2 ] unsigned char 
 15934 ;; Return value:  Size  Location     Type
 15935 ;;                  4    0[BANK2 ] long 
 15936 ;; Registers used:
 15937 ;;		wreg, status,2, status,0
 15938 ;; Tracked objects:
 15939 ;;		On entry : 0/0
 15940 ;;		On exit  : 0/0
 15941 ;;		Unchanged: 0/0
 15942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15943 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15944 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15945 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15946 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15947 ;;Total ram usage:       14 bytes
 15948 ;; Hardware stack levels used:    1
 15949 ;; Hardware stack levels required when called:    3
 15950 ;; This function calls:
 15951 ;;		Nothing
 15952 ;; This function is called by:
 15953 ;;		_main
 15954 ;;		_set_subdivision
 15955 ;;		_scaleA100kPot
 15956 ;;		_scaleA10kPot
 15957 ;;		_scaleiA10kPot
 15958 ;;		_getModulationDelayTime
 15959 ;;		_modCos
 15960 ;;		_modTri
 15961 ;;		_modSaw
 15962 ;;		_pow
 15963 ;;		_exp
 15964 ;;		_floor
 15965 ;;		_scaleiA100kPot
 15966 ;; This function uses a non-reentrant model
 15967 ;;
 15968                           
 15969                           
 15970                           ;psect for function ___fttol
 15971  1A5A                     ___fttol:	
 15972                           
 15973                           ;incstack = 0
 15974                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15975  1A5A  0022               	movlb	2	; select bank2
 15976  1A5B  0820               	movf	___fttol@f1^(0+256),w
 15977  1A5C  00A4               	movwf	??___fttol^(0+256)
 15978  1A5D  0821               	movf	(___fttol@f1+1)^(0+256),w
 15979  1A5E  00A5               	movwf	(??___fttol^(0+256)+1)
 15980  1A5F  0822               	movf	(___fttol@f1+2)^(0+256),w
 15981  1A60  00A6               	movwf	(??___fttol^(0+256)+2)
 15982  1A61  1003               	clrc
 15983  1A62  0D25               	rlf	(??___fttol^(0+256)+1),w
 15984  1A63  0D26               	rlf	(??___fttol^(0+256)+2),w
 15985  1A64  00A7               	movwf	(??___fttol+3)^(0+256)
 15986  1A65  0827               	movf	(??___fttol+3)^(0+256),w
 15987  1A66  00AD               	movwf	___fttol@exp1^(0+256)
 15988  1A67  082D               	movf	___fttol@exp1^(0+256),w
 15989  1A68  1D03               	btfss	3,2
 15990  1A69  2A73               	goto	l7950
 15991  1A6A  3000               	movlw	0
 15992  1A6B  00A3               	movwf	(?___fttol+3)^(0+256)
 15993  1A6C  3000               	movlw	0
 15994  1A6D  00A2               	movwf	(?___fttol+2)^(0+256)
 15995  1A6E  3000               	movlw	0
 15996  1A6F  00A1               	movwf	(?___fttol+1)^(0+256)
 15997  1A70  3000               	movlw	0
 15998  1A71  00A0               	movwf	?___fttol^(0+256)
 15999  1A72  0008               	return
 16000  1A73                     l7950:	
 16001  1A73  0820               	movf	___fttol@f1^(0+256),w
 16002  1A74  00A4               	movwf	??___fttol^(0+256)
 16003  1A75  0821               	movf	(___fttol@f1+1)^(0+256),w
 16004  1A76  00A5               	movwf	(??___fttol^(0+256)+1)
 16005  1A77  0822               	movf	(___fttol@f1+2)^(0+256),w
 16006  1A78  00A6               	movwf	(??___fttol^(0+256)+2)
 16007  1A79  3017               	movlw	23
 16008  1A7A                     u8285:	
 16009  1A7A  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16010  1A7B  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16011  1A7C  0CA4               	rrf	??___fttol^(0+256),f
 16012  1A7D  0B89               	decfsz	9,f
 16013  1A7E  2A7A               	goto	u8285
 16014  1A7F  0824               	movf	??___fttol^(0+256),w
 16015  1A80  00A7               	movwf	(??___fttol+3)^(0+256)
 16016  1A81  0827               	movf	(??___fttol+3)^(0+256),w
 16017  1A82  00A8               	movwf	___fttol@sign1^(0+256)
 16018  1A83  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16019  1A84  30FF               	movlw	255
 16020  1A85  05A0               	andwf	___fttol@f1^(0+256),f
 16021  1A86  30FF               	movlw	255
 16022  1A87  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16023  1A88  3000               	movlw	0
 16024  1A89  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16025  1A8A  0820               	movf	___fttol@f1^(0+256),w
 16026  1A8B  00A9               	movwf	___fttol@lval^(0+256)
 16027  1A8C  0821               	movf	(___fttol@f1+1)^(0+256),w
 16028  1A8D  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16029  1A8E  0822               	movf	(___fttol@f1+2)^(0+256),w
 16030  1A8F  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16031  1A90  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16032  1A91  308E               	movlw	142
 16033  1A92  02AD               	subwf	___fttol@exp1^(0+256),f
 16034  1A93  1FAD               	btfss	___fttol@exp1^(0+256),7
 16035  1A94  2AB1               	goto	l7970
 16036  1A95  082D               	movf	___fttol@exp1^(0+256),w
 16037  1A96  3A80               	xorlw	128
 16038  1A97  3E8F               	addlw	143
 16039  1A98  1803               	skipnc
 16040  1A99  2AA3               	goto	l7968
 16041  1A9A  3000               	movlw	0
 16042  1A9B  00A3               	movwf	(?___fttol+3)^(0+256)
 16043  1A9C  3000               	movlw	0
 16044  1A9D  00A2               	movwf	(?___fttol+2)^(0+256)
 16045  1A9E  3000               	movlw	0
 16046  1A9F  00A1               	movwf	(?___fttol+1)^(0+256)
 16047  1AA0  3000               	movlw	0
 16048  1AA1  00A0               	movwf	?___fttol^(0+256)
 16049  1AA2  0008               	return
 16050  1AA3                     l7968:	
 16051  1AA3  3001               	movlw	1
 16052  1AA4                     u8315:	
 16053  1AA4  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16054  1AA5  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16055  1AA6  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16056  1AA7  0CA9               	rrf	___fttol@lval^(0+256),f
 16057  1AA8  0B89               	decfsz	9,f
 16058  1AA9  2AA4               	goto	u8315
 16059  1AAA  3001               	movlw	1
 16060  1AAB  00A4               	movwf	??___fttol^(0+256)
 16061  1AAC  0824               	movf	??___fttol^(0+256),w
 16062  1AAD  07AD               	addwf	___fttol@exp1^(0+256),f
 16063  1AAE  1903               	btfsc	3,2
 16064  1AAF  2ACA               	goto	l7978
 16065  1AB0  2AA3               	goto	l7968
 16066  1AB1                     l7970:	
 16067  1AB1  3018               	movlw	24
 16068  1AB2  022D               	subwf	___fttol@exp1^(0+256),w
 16069  1AB3  1C03               	skipc
 16070  1AB4  2AC7               	goto	l2220
 16071  1AB5  3000               	movlw	0
 16072  1AB6  00A3               	movwf	(?___fttol+3)^(0+256)
 16073  1AB7  3000               	movlw	0
 16074  1AB8  00A2               	movwf	(?___fttol+2)^(0+256)
 16075  1AB9  3000               	movlw	0
 16076  1ABA  00A1               	movwf	(?___fttol+1)^(0+256)
 16077  1ABB  3000               	movlw	0
 16078  1ABC  00A0               	movwf	?___fttol^(0+256)
 16079  1ABD  0008               	return
 16080  1ABE                     l7976:	
 16081  1ABE  3001               	movlw	1
 16082  1ABF                     u8345:	
 16083  1ABF  35A9               	lslf	___fttol@lval^(0+256),f
 16084  1AC0  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16085  1AC1  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16086  1AC2  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16087  1AC3  0B89               	decfsz	9,f
 16088  1AC4  2ABF               	goto	u8345
 16089  1AC5  3001               	movlw	1
 16090  1AC6  02AD               	subwf	___fttol@exp1^(0+256),f
 16091  1AC7                     l2220:	
 16092  1AC7  082D               	movf	___fttol@exp1^(0+256),w
 16093  1AC8  1D03               	btfss	3,2
 16094  1AC9  2ABE               	goto	l7976
 16095  1ACA                     l7978:	
 16096  1ACA  0828               	movf	___fttol@sign1^(0+256),w
 16097  1ACB  1903               	btfsc	3,2
 16098  1ACC  2AD8               	goto	l7982
 16099  1ACD  09A9               	comf	___fttol@lval^(0+256),f
 16100  1ACE  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16101  1ACF  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16102  1AD0  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16103  1AD1  0AA9               	incf	___fttol@lval^(0+256),f
 16104  1AD2  1903               	skipnz
 16105  1AD3  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16106  1AD4  1903               	skipnz
 16107  1AD5  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16108  1AD6  1903               	skipnz
 16109  1AD7  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16110  1AD8                     l7982:	
 16111  1AD8  082C               	movf	(___fttol@lval+3)^(0+256),w
 16112  1AD9  00A3               	movwf	(?___fttol+3)^(0+256)
 16113  1ADA  082B               	movf	(___fttol@lval+2)^(0+256),w
 16114  1ADB  00A2               	movwf	(?___fttol+2)^(0+256)
 16115  1ADC  082A               	movf	(___fttol@lval+1)^(0+256),w
 16116  1ADD  00A1               	movwf	(?___fttol+1)^(0+256)
 16117  1ADE  0829               	movf	___fttol@lval^(0+256),w
 16118  1ADF  00A0               	movwf	?___fttol^(0+256)
 16119  1AE0  0008               	return
 16120  1AE1                     __end_of___fttol:	
 16121                           
 16122                           	psect	text50
 16123  217B                     __ptext50:	
 16124 ;; *************** function ___ftge *****************
 16125 ;; Defined at:
 16126 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16127 ;; Parameters:    Size  Location     Type
 16128 ;;  ff1             3    0[BANK1 ] float 
 16129 ;;  ff2             3    3[BANK1 ] float 
 16130 ;; Auto vars:     Size  Location     Type
 16131 ;;		None
 16132 ;; Return value:  Size  Location     Type
 16133 ;;		None               void
 16134 ;; Registers used:
 16135 ;;		wreg, status,2, status,0
 16136 ;; Tracked objects:
 16137 ;;		On entry : 0/0
 16138 ;;		On exit  : 0/0
 16139 ;;		Unchanged: 0/0
 16140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16141 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16143 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16144 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16145 ;;Total ram usage:        9 bytes
 16146 ;; Hardware stack levels used:    1
 16147 ;; Hardware stack levels required when called:    3
 16148 ;; This function calls:
 16149 ;;		Nothing
 16150 ;; This function is called by:
 16151 ;;		_modCos
 16152 ;;		_modTri
 16153 ;;		_modSaw
 16154 ;;		_modSquare
 16155 ;;		_cos
 16156 ;;		_pow
 16157 ;;		_sin
 16158 ;;		_exp
 16159 ;;		_floor
 16160 ;;		_ldexp
 16161 ;;		_log
 16162 ;; This function uses a non-reentrant model
 16163 ;;
 16164                           
 16165                           
 16166                           ;psect for function ___ftge
 16167  217B                     ___ftge:	
 16168                           
 16169                           ;incstack = 0
 16170                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16171  217B  0021               	movlb	1	; select bank1
 16172  217C  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16173  217D  2992               	goto	l7870
 16174  217E  0920               	comf	___ftge@ff1^(0+128),w
 16175  217F  00A6               	movwf	??___ftge^(0+128)
 16176  2180  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16177  2181  00A7               	movwf	(??___ftge^(0+128)+1)
 16178  2182  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16179  2183  00A8               	movwf	(??___ftge^(0+128)+2)
 16180  2184  0AA6               	incf	??___ftge^(0+128),f
 16181  2185  1903               	skipnz
 16182  2186  0AA7               	incf	(??___ftge^(0+128)+1),f
 16183  2187  1903               	skipnz
 16184  2188  0AA8               	incf	(??___ftge^(0+128)+2),f
 16185  2189  3000               	movlw	0
 16186  218A  0726               	addwf	??___ftge^(0+128),w
 16187  218B  00A0               	movwf	___ftge@ff1^(0+128)
 16188  218C  3000               	movlw	0
 16189  218D  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16190  218E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16191  218F  3080               	movlw	128
 16192  2190  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16193  2191  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16194  2192                     l7870:	
 16195  2192  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16196  2193  29A8               	goto	l7874
 16197  2194  0923               	comf	___ftge@ff2^(0+128),w
 16198  2195  00A6               	movwf	??___ftge^(0+128)
 16199  2196  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16200  2197  00A7               	movwf	(??___ftge^(0+128)+1)
 16201  2198  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16202  2199  00A8               	movwf	(??___ftge^(0+128)+2)
 16203  219A  0AA6               	incf	??___ftge^(0+128),f
 16204  219B  1903               	skipnz
 16205  219C  0AA7               	incf	(??___ftge^(0+128)+1),f
 16206  219D  1903               	skipnz
 16207  219E  0AA8               	incf	(??___ftge^(0+128)+2),f
 16208  219F  3000               	movlw	0
 16209  21A0  0726               	addwf	??___ftge^(0+128),w
 16210  21A1  00A3               	movwf	___ftge@ff2^(0+128)
 16211  21A2  3000               	movlw	0
 16212  21A3  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16213  21A4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16214  21A5  3080               	movlw	128
 16215  21A6  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16216  21A7  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16217  21A8                     l7874:	
 16218  21A8  3080               	movlw	128
 16219  21A9  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16220  21AA  3080               	movlw	128
 16221  21AB  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16222  21AC  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16223  21AD  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16224  21AE  1D03               	skipz
 16225  21AF  0008               	return
 16226  21B0  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16227  21B1  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16228  21B2  1D03               	skipz
 16229  21B3  0008               	return
 16230  21B4  0823               	movf	___ftge@ff2^(0+128),w
 16231  21B5  0220               	subwf	___ftge@ff1^(0+128),w
 16232  21B6  0008               	return
 16233  21B7                     __end_of___ftge:	
 16234                           
 16235                           	psect	text51
 16236  21B7                     __ptext51:	
 16237 ;; *************** function ___altoft *****************
 16238 ;; Defined at:
 16239 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16240 ;; Parameters:    Size  Location     Type
 16241 ;;  c               4    8[BANK1 ] long 
 16242 ;; Auto vars:     Size  Location     Type
 16243 ;;  sign            1   15[BANK1 ] unsigned char 
 16244 ;;  exp             1   14[BANK1 ] unsigned char 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;                  3    8[BANK1 ] float 
 16247 ;; Registers used:
 16248 ;;		wreg, status,2, status,0, pclath, cstack
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16254 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16255 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16256 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16257 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16258 ;;Total ram usage:        8 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    4
 16261 ;; This function calls:
 16262 ;;		___ftpack
 16263 ;; This function is called by:
 16264 ;;		_getModulationDelayTime
 16265 ;;		_floor
 16266 ;; This function uses a non-reentrant model
 16267 ;;
 16268                           
 16269                           
 16270                           ;psect for function ___altoft
 16271  21B7                     ___altoft:	
 16272                           
 16273                           ;incstack = 0
 16274                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16275  21B7  0021               	movlb	1	; select bank1
 16276  21B8  01AF               	clrf	___altoft@sign^(0+128)
 16277  21B9  308E               	movlw	142
 16278  21BA  00AC               	movwf	??___altoft^(0+128)
 16279  21BB  082C               	movf	??___altoft^(0+128),w
 16280  21BC  00AE               	movwf	___altoft@exp^(0+128)
 16281  21BD  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 16282  21BE  29CC               	goto	l7790
 16283  21BF  09A8               	comf	___altoft@c^(0+128),f
 16284  21C0  09A9               	comf	(___altoft@c+1)^(0+128),f
 16285  21C1  09AA               	comf	(___altoft@c+2)^(0+128),f
 16286  21C2  09AB               	comf	(___altoft@c+3)^(0+128),f
 16287  21C3  0AA8               	incf	___altoft@c^(0+128),f
 16288  21C4  1903               	skipnz
 16289  21C5  0AA9               	incf	(___altoft@c+1)^(0+128),f
 16290  21C6  1903               	skipnz
 16291  21C7  0AAA               	incf	(___altoft@c+2)^(0+128),f
 16292  21C8  1903               	skipnz
 16293  21C9  0AAB               	incf	(___altoft@c+3)^(0+128),f
 16294  21CA  01AF               	clrf	___altoft@sign^(0+128)
 16295  21CB  0AAF               	incf	___altoft@sign^(0+128),f
 16296  21CC                     l7790:	
 16297  21CC  30FF               	movlw	255
 16298  21CD  052B               	andwf	(___altoft@c+3)^(0+128),w
 16299  21CE  1903               	btfsc	3,2
 16300  21CF  29DC               	goto	l7792
 16301  21D0  3001               	movlw	1
 16302  21D1                     u7865:	
 16303  21D1  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 16304  21D2  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 16305  21D3  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 16306  21D4  0CA8               	rrf	___altoft@c^(0+128),f
 16307  21D5  0B89               	decfsz	9,f
 16308  21D6  29D1               	goto	u7865
 16309  21D7  3001               	movlw	1
 16310  21D8  00AC               	movwf	??___altoft^(0+128)
 16311  21D9  082C               	movf	??___altoft^(0+128),w
 16312  21DA  07AE               	addwf	___altoft@exp^(0+128),f
 16313  21DB  29CC               	goto	l7790
 16314  21DC                     l7792:	
 16315  21DC  0828               	movf	___altoft@c^(0+128),w
 16316  21DD  00A0               	movwf	___ftpack@arg^(0+128)
 16317  21DE  0829               	movf	(___altoft@c+1)^(0+128),w
 16318  21DF  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16319  21E0  082A               	movf	(___altoft@c+2)^(0+128),w
 16320  21E1  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16321  21E2  082E               	movf	___altoft@exp^(0+128),w
 16322  21E3  00AC               	movwf	??___altoft^(0+128)
 16323  21E4  082C               	movf	??___altoft^(0+128),w
 16324  21E5  00A3               	movwf	___ftpack@exp^(0+128)
 16325  21E6  082F               	movf	___altoft@sign^(0+128),w
 16326  21E7  00AD               	movwf	(??___altoft+1)^(0+128)
 16327  21E8  082D               	movf	(??___altoft+1)^(0+128),w
 16328  21E9  00A4               	movwf	___ftpack@sign^(0+128)
 16329  21EA  31A6  2637         	fcall	___ftpack
 16330  21EC  0021               	movlb	1	; select bank1
 16331  21ED  0820               	movf	?___ftpack^(0+128),w
 16332  21EE  00A8               	movwf	?___altoft^(0+128)
 16333  21EF  0821               	movf	(?___ftpack+1)^(0+128),w
 16334  21F0  00A9               	movwf	(?___altoft+1)^(0+128)
 16335  21F1  0822               	movf	(?___ftpack+2)^(0+128),w
 16336  21F2  00AA               	movwf	(?___altoft+2)^(0+128)
 16337  21F3  0008               	return
 16338  21F4                     __end_of___altoft:	
 16339                           
 16340                           	psect	text52
 16341  269C                     __ptext52:	
 16342 ;; *************** function _eval_poly *****************
 16343 ;; Defined at:
 16344 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16345 ;; Parameters:    Size  Location     Type
 16346 ;;  x               3   20[BANK2 ] float 
 16347 ;;  d               2   23[BANK2 ] PTR const 
 16348 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16349 ;;  n               2   25[BANK2 ] int 
 16350 ;; Auto vars:     Size  Location     Type
 16351 ;;  res             3   27[BANK2 ] int 
 16352 ;; Return value:  Size  Location     Type
 16353 ;;                  3   20[BANK2 ] int 
 16354 ;; Registers used:
 16355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16356 ;; Tracked objects:
 16357 ;;		On entry : 0/0
 16358 ;;		On exit  : 0/0
 16359 ;;		Unchanged: 0/0
 16360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16361 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16362 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16364 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16365 ;;Total ram usage:       10 bytes
 16366 ;; Hardware stack levels used:    1
 16367 ;; Hardware stack levels required when called:    5
 16368 ;; This function calls:
 16369 ;;		___ftadd
 16370 ;;		___ftmul
 16371 ;;		___wmul
 16372 ;; This function is called by:
 16373 ;;		_sin
 16374 ;;		_exp
 16375 ;;		_log
 16376 ;; This function uses a non-reentrant model
 16377 ;;
 16378                           
 16379                           
 16380                           ;psect for function _eval_poly
 16381  269C                     _eval_poly:	
 16382                           
 16383                           ;incstack = 0
 16384                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16385  269C  0022               	movlb	2	; select bank2
 16386  269D  083A               	movf	(eval_poly@n+1)^(0+256),w
 16387  269E  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16388  269F  0839               	movf	eval_poly@n^(0+256),w
 16389  26A0  00AE               	movwf	___wmul@multiplier^(0+256)
 16390  26A1  3003               	movlw	3
 16391  26A2  00B0               	movwf	___wmul@multiplicand^(0+256)
 16392  26A3  3000               	movlw	0
 16393  26A4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16394  26A5  31AE  264E  31A6   	fcall	___wmul
 16395  26A8  0022               	movlb	2	; select bank2
 16396  26A9  0837               	movf	eval_poly@d^(0+256),w
 16397  26AA  072E               	addwf	?___wmul^(0+256),w
 16398  26AB  0084               	movwf	4
 16399  26AC  0838               	movf	(eval_poly@d+1)^(0+256),w
 16400  26AD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16401  26AE  0085               	movwf	5
 16402  26AF  3F00               	moviw [0]fsr0
 16403  26B0  00BB               	movwf	eval_poly@res^(0+256)
 16404  26B1  3F01               	moviw [1]fsr0
 16405  26B2  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16406  26B3  3F02               	moviw [2]fsr0
 16407  26B4                     L19:	
 16408  26B4  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16409  26B5  0839               	movf	eval_poly@n^(0+256),w
 16410  26B6  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16411  26B7  1903               	btfsc	3,2
 16412  26B8  2F07               	goto	l8152
 16413  26B9  30FF               	movlw	255
 16414  26BA  07B9               	addwf	eval_poly@n^(0+256),f
 16415  26BB  30FF               	movlw	255
 16416  26BC  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16417  26BD  083A               	movf	(eval_poly@n+1)^(0+256),w
 16418  26BE  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16419  26BF  0839               	movf	eval_poly@n^(0+256),w
 16420  26C0  00AE               	movwf	___wmul@multiplier^(0+256)
 16421  26C1  3003               	movlw	3
 16422  26C2  00B0               	movwf	___wmul@multiplicand^(0+256)
 16423  26C3  3000               	movlw	0
 16424  26C4  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16425  26C5  31AE  264E  31A6   	fcall	___wmul
 16426  26C8  0022               	movlb	2	; select bank2
 16427  26C9  0837               	movf	eval_poly@d^(0+256),w
 16428  26CA  072E               	addwf	?___wmul^(0+256),w
 16429  26CB  0084               	movwf	4
 16430  26CC  0838               	movf	(eval_poly@d+1)^(0+256),w
 16431  26CD  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16432  26CE  0085               	movwf	5
 16433  26CF  3F00               	moviw [0]fsr0
 16434  26D0  0021               	movlb	1	; select bank1
 16435  26D1  00C1               	movwf	___ftadd@f1^(0+128)
 16436  26D2  3F01               	moviw [1]fsr0
 16437  26D3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16438  26D4  3F02               	moviw [2]fsr0
 16439  26D5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16440  26D6  0022               	movlb	2	; select bank2
 16441  26D7  083B               	movf	eval_poly@res^(0+256),w
 16442  26D8  0021               	movlb	1	; select bank1
 16443  26D9  00AE               	movwf	___ftmul@f1^(0+128)
 16444  26DA  0022               	movlb	2	; select bank2
 16445  26DB  083C               	movf	(eval_poly@res+1)^(0+256),w
 16446  26DC  0021               	movlb	1	; select bank1
 16447  26DD  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16448  26DE  0022               	movlb	2	; select bank2
 16449  26DF  083D               	movf	(eval_poly@res+2)^(0+256),w
 16450  26E0  0021               	movlb	1	; select bank1
 16451  26E1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16452  26E2  0022               	movlb	2	; select bank2
 16453  26E3  0834               	movf	eval_poly@x^(0+256),w
 16454  26E4  0021               	movlb	1	; select bank1
 16455  26E5  00B1               	movwf	___ftmul@f2^(0+128)
 16456  26E6  0022               	movlb	2	; select bank2
 16457  26E7  0835               	movf	(eval_poly@x+1)^(0+256),w
 16458  26E8  0021               	movlb	1	; select bank1
 16459  26E9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16460  26EA  0022               	movlb	2	; select bank2
 16461  26EB  0836               	movf	(eval_poly@x+2)^(0+256),w
 16462  26EC  0021               	movlb	1	; select bank1
 16463  26ED  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16464  26EE  319E  267B  31A6   	fcall	___ftmul
 16465  26F1  0021               	movlb	1	; select bank1
 16466  26F2  082E               	movf	?___ftmul^(0+128),w
 16467  26F3  00C4               	movwf	___ftadd@f2^(0+128)
 16468  26F4  082F               	movf	(?___ftmul+1)^(0+128),w
 16469  26F5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16470  26F6  0830               	movf	(?___ftmul+2)^(0+128),w
 16471  26F7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16472  26F8  3190  2031  31A6   	fcall	___ftadd
 16473  26FB  0021               	movlb	1	; select bank1
 16474  26FC  0841               	movf	?___ftadd^(0+128),w
 16475  26FD  0022               	movlb	2	; select bank2
 16476  26FE  00BB               	movwf	eval_poly@res^(0+256)
 16477  26FF  0021               	movlb	1	; select bank1
 16478  2700  0842               	movf	(?___ftadd+1)^(0+128),w
 16479  2701  0022               	movlb	2	; select bank2
 16480  2702  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16481  2703  0021               	movlb	1	; select bank1
 16482  2704  0843               	movf	(?___ftadd+2)^(0+128),w
 16483  2705  0022               	movlb	2	; select bank2
 16484  2706  2EB4               	goto	L19
 16485  2707                     l8152:	
 16486  2707  083B               	movf	eval_poly@res^(0+256),w
 16487  2708  00B4               	movwf	?_eval_poly^(0+256)
 16488  2709  083C               	movf	(eval_poly@res+1)^(0+256),w
 16489  270A  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16490  270B  083D               	movf	(eval_poly@res+2)^(0+256),w
 16491  270C  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16492  270D  0008               	return
 16493  270E                     __end_of_eval_poly:	
 16494                           
 16495                           	psect	text53
 16496  2E4E                     __ptext53:	
 16497 ;; *************** function ___wmul *****************
 16498 ;; Defined at:
 16499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16502 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16503 ;; Auto vars:     Size  Location     Type
 16504 ;;  product         2   18[BANK2 ] unsigned int 
 16505 ;; Return value:  Size  Location     Type
 16506 ;;                  2   14[BANK2 ] unsigned int 
 16507 ;; Registers used:
 16508 ;;		wreg, status,2, status,0
 16509 ;; Tracked objects:
 16510 ;;		On entry : 0/0
 16511 ;;		On exit  : 0/0
 16512 ;;		Unchanged: 0/0
 16513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16514 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16515 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16517 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16518 ;;Total ram usage:        6 bytes
 16519 ;; Hardware stack levels used:    1
 16520 ;; Hardware stack levels required when called:    3
 16521 ;; This function calls:
 16522 ;;		Nothing
 16523 ;; This function is called by:
 16524 ;;		_calcCosArray
 16525 ;;		_updateModulationArray
 16526 ;;		_modCos
 16527 ;;		_eval_poly
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           
 16532                           ;psect for function ___wmul
 16533  2E4E                     ___wmul:	
 16534                           
 16535                           ;incstack = 0
 16536                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16537  2E4E  0022               	movlb	2	; select bank2
 16538  2E4F  01B2               	clrf	___wmul@product^(0+256)
 16539  2E50  01B3               	clrf	(___wmul@product+1)^(0+256)
 16540  2E51                     l7768:	
 16541  2E51  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16542  2E52  2E57               	goto	l1962
 16543  2E53  0830               	movf	___wmul@multiplicand^(0+256),w
 16544  2E54  07B2               	addwf	___wmul@product^(0+256),f
 16545  2E55  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16546  2E56  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16547  2E57                     l1962:	
 16548  2E57  3001               	movlw	1
 16549  2E58                     u7825:	
 16550  2E58  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16551  2E59  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16552  2E5A  0B89               	decfsz	9,f
 16553  2E5B  2E58               	goto	u7825
 16554  2E5C  3001               	movlw	1
 16555  2E5D                     u7835:	
 16556  2E5D  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16557  2E5E  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16558  2E5F  0B89               	decfsz	9,f
 16559  2E60  2E5D               	goto	u7835
 16560  2E61  082E               	movf	___wmul@multiplier^(0+256),w
 16561  2E62  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16562  2E63  1D03               	btfss	3,2
 16563  2E64  2E51               	goto	l7768
 16564  2E65  0833               	movf	(___wmul@product+1)^(0+256),w
 16565  2E66  00AF               	movwf	(?___wmul+1)^(0+256)
 16566  2E67  0832               	movf	___wmul@product^(0+256),w
 16567  2E68  00AE               	movwf	?___wmul^(0+256)
 16568  2E69  0008               	return
 16569  2E6A                     __end_of___wmul:	
 16570                           
 16571                           	psect	text54
 16572  1E7B                     __ptext54:	
 16573 ;; *************** function ___ftmul *****************
 16574 ;; Defined at:
 16575 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;  f1              3   14[BANK1 ] float 
 16578 ;;  f2              3   17[BANK1 ] float 
 16579 ;; Auto vars:     Size  Location     Type
 16580 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16581 ;;  sign            1   29[BANK1 ] unsigned char 
 16582 ;;  cntr            1   28[BANK1 ] unsigned char 
 16583 ;;  exp             1   24[BANK1 ] unsigned char 
 16584 ;; Return value:  Size  Location     Type
 16585 ;;                  3   14[BANK1 ] float 
 16586 ;; Registers used:
 16587 ;;		wreg, status,2, status,0, pclath, cstack
 16588 ;; Tracked objects:
 16589 ;;		On entry : 0/0
 16590 ;;		On exit  : 0/0
 16591 ;;		Unchanged: 0/0
 16592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16593 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16594 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16595 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16596 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16597 ;;Total ram usage:       16 bytes
 16598 ;; Hardware stack levels used:    1
 16599 ;; Hardware stack levels required when called:    4
 16600 ;; This function calls:
 16601 ;;		___ftpack
 16602 ;; This function is called by:
 16603 ;;		_set_subdivision
 16604 ;;		_map
 16605 ;;		_scaleA100kPot
 16606 ;;		_scaleA10kPot
 16607 ;;		_scaleiA10kPot
 16608 ;;		_calcCosArray
 16609 ;;		_modCos
 16610 ;;		_modTri
 16611 ;;		_modSaw
 16612 ;;		_pow
 16613 ;;		_sin
 16614 ;;		_eval_poly
 16615 ;;		_exp
 16616 ;;		_log
 16617 ;;		_scalePotValue
 16618 ;;		_scaleiA100kPot
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function ___ftmul
 16624  1E7B                     ___ftmul:	
 16625                           
 16626                           ;incstack = 0
 16627                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16628  1E7B  0021               	movlb	1	; select bank1
 16629  1E7C  082E               	movf	___ftmul@f1^(0+128),w
 16630  1E7D  00B4               	movwf	??___ftmul^(0+128)
 16631  1E7E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16632  1E7F  00B5               	movwf	(??___ftmul^(0+128)+1)
 16633  1E80  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16634  1E81  00B6               	movwf	(??___ftmul^(0+128)+2)
 16635  1E82  1003               	clrc
 16636  1E83  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16637  1E84  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16638  1E85  00B7               	movwf	(??___ftmul+3)^(0+128)
 16639  1E86  0837               	movf	(??___ftmul+3)^(0+128),w
 16640  1E87  00B8               	movwf	___ftmul@exp^(0+128)
 16641  1E88  0838               	movf	___ftmul@exp^(0+128),w
 16642  1E89  1D03               	btfss	3,2
 16643  1E8A  2E92               	goto	l7892
 16644  1E8B  3000               	movlw	0
 16645  1E8C  00AE               	movwf	?___ftmul^(0+128)
 16646  1E8D  3000               	movlw	0
 16647  1E8E  00AF               	movwf	(?___ftmul+1)^(0+128)
 16648  1E8F  3000               	movlw	0
 16649  1E90  00B0               	movwf	(?___ftmul+2)^(0+128)
 16650  1E91  0008               	return
 16651  1E92                     l7892:	
 16652  1E92  0831               	movf	___ftmul@f2^(0+128),w
 16653  1E93  00B4               	movwf	??___ftmul^(0+128)
 16654  1E94  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16655  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 16656  1E96  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16657  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 16658  1E98  1003               	clrc
 16659  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16660  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16661  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16662  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 16663  1E9D  00BD               	movwf	___ftmul@sign^(0+128)
 16664  1E9E  083D               	movf	___ftmul@sign^(0+128),w
 16665  1E9F  1D03               	btfss	3,2
 16666  1EA0  2EA8               	goto	l7898
 16667  1EA1  3000               	movlw	0
 16668  1EA2  00AE               	movwf	?___ftmul^(0+128)
 16669  1EA3  3000               	movlw	0
 16670  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 16671  1EA5  3000               	movlw	0
 16672  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 16673  1EA7  0008               	return
 16674  1EA8                     l7898:	
 16675  1EA8  083D               	movf	___ftmul@sign^(0+128),w
 16676  1EA9  3E7B               	addlw	123
 16677  1EAA  00B4               	movwf	??___ftmul^(0+128)
 16678  1EAB  0834               	movf	??___ftmul^(0+128),w
 16679  1EAC  07B8               	addwf	___ftmul@exp^(0+128),f
 16680  1EAD  082E               	movf	___ftmul@f1^(0+128),w
 16681  1EAE  00B4               	movwf	??___ftmul^(0+128)
 16682  1EAF  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16683  1EB0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16684  1EB1  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16685  1EB2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16686  1EB3  3010               	movlw	16
 16687  1EB4                     u8165:	
 16688  1EB4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16689  1EB5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16690  1EB6  0CB4               	rrf	??___ftmul^(0+128),f
 16691  1EB7  0B89               	decfsz	9,f
 16692  1EB8  2EB4               	goto	u8165
 16693  1EB9  0834               	movf	??___ftmul^(0+128),w
 16694  1EBA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16695  1EBB  0837               	movf	(??___ftmul+3)^(0+128),w
 16696  1EBC  00BD               	movwf	___ftmul@sign^(0+128)
 16697  1EBD  0831               	movf	___ftmul@f2^(0+128),w
 16698  1EBE  00B4               	movwf	??___ftmul^(0+128)
 16699  1EBF  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16700  1EC0  00B5               	movwf	(??___ftmul^(0+128)+1)
 16701  1EC1  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16702  1EC2  00B6               	movwf	(??___ftmul^(0+128)+2)
 16703  1EC3  3010               	movlw	16
 16704  1EC4                     u8175:	
 16705  1EC4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16706  1EC5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16707  1EC6  0CB4               	rrf	??___ftmul^(0+128),f
 16708  1EC7  0B89               	decfsz	9,f
 16709  1EC8  2EC4               	goto	u8175
 16710  1EC9  0834               	movf	??___ftmul^(0+128),w
 16711  1ECA  00B7               	movwf	(??___ftmul+3)^(0+128)
 16712  1ECB  0837               	movf	(??___ftmul+3)^(0+128),w
 16713  1ECC  06BD               	xorwf	___ftmul@sign^(0+128),f
 16714  1ECD  3080               	movlw	128
 16715  1ECE  00B4               	movwf	??___ftmul^(0+128)
 16716  1ECF  0834               	movf	??___ftmul^(0+128),w
 16717  1ED0  05BD               	andwf	___ftmul@sign^(0+128),f
 16718  1ED1  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16719  1ED2  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16720  1ED3  30FF               	movlw	255
 16721  1ED4  05B1               	andwf	___ftmul@f2^(0+128),f
 16722  1ED5  30FF               	movlw	255
 16723  1ED6  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16724  1ED7  3000               	movlw	0
 16725  1ED8  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16726  1ED9  3000               	movlw	0
 16727  1EDA  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16728  1EDB  3000               	movlw	0
 16729  1EDC  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16730  1EDD  3000               	movlw	0
 16731  1EDE  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16732  1EDF  3007               	movlw	7
 16733  1EE0  00B4               	movwf	??___ftmul^(0+128)
 16734  1EE1  0834               	movf	??___ftmul^(0+128),w
 16735  1EE2  00BC               	movwf	___ftmul@cntr^(0+128)
 16736  1EE3                     l7910:	
 16737  1EE3  1C2E               	btfss	___ftmul@f1^(0+128),0
 16738  1EE4  2EEB               	goto	l7914
 16739  1EE5  0831               	movf	___ftmul@f2^(0+128),w
 16740  1EE6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16741  1EE7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16742  1EE8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16743  1EE9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16744  1EEA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16745  1EEB                     l7914:	
 16746  1EEB  3001               	movlw	1
 16747  1EEC                     u8195:	
 16748  1EEC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16749  1EED  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16750  1EEE  0CAE               	rrf	___ftmul@f1^(0+128),f
 16751  1EEF  0B89               	decfsz	9,f
 16752  1EF0  2EEC               	goto	u8195
 16753  1EF1  3001               	movlw	1
 16754  1EF2                     u8205:	
 16755  1EF2  35B1               	lslf	___ftmul@f2^(0+128),f
 16756  1EF3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16757  1EF4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16758  1EF5  0B89               	decfsz	9,f
 16759  1EF6  2EF2               	goto	u8205
 16760  1EF7  3001               	movlw	1
 16761  1EF8  02BC               	subwf	___ftmul@cntr^(0+128),f
 16762  1EF9  1D03               	btfss	3,2
 16763  1EFA  2EE3               	goto	l7910
 16764  1EFB  3009               	movlw	9
 16765  1EFC  00B4               	movwf	??___ftmul^(0+128)
 16766  1EFD  0834               	movf	??___ftmul^(0+128),w
 16767  1EFE  00BC               	movwf	___ftmul@cntr^(0+128)
 16768  1EFF                     l7922:	
 16769  1EFF  1C2E               	btfss	___ftmul@f1^(0+128),0
 16770  1F00  2F07               	goto	l7926
 16771  1F01  0831               	movf	___ftmul@f2^(0+128),w
 16772  1F02  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16773  1F03  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16774  1F04  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16775  1F05  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16776  1F06  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16777  1F07                     l7926:	
 16778  1F07  3001               	movlw	1
 16779  1F08                     u8235:	
 16780  1F08  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16781  1F09  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16782  1F0A  0CAE               	rrf	___ftmul@f1^(0+128),f
 16783  1F0B  0B89               	decfsz	9,f
 16784  1F0C  2F08               	goto	u8235
 16785  1F0D  3001               	movlw	1
 16786  1F0E                     u8245:	
 16787  1F0E  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16788  1F0F  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16789  1F10  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16790  1F11  0B89               	decfsz	9,f
 16791  1F12  2F0E               	goto	u8245
 16792  1F13  3001               	movlw	1
 16793  1F14  02BC               	subwf	___ftmul@cntr^(0+128),f
 16794  1F15  1D03               	btfss	3,2
 16795  1F16  2EFF               	goto	l7922
 16796  1F17  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16797  1F18  00A0               	movwf	___ftpack@arg^(0+128)
 16798  1F19  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16799  1F1A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16800  1F1B  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16801  1F1C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16802  1F1D  0838               	movf	___ftmul@exp^(0+128),w
 16803  1F1E  00B4               	movwf	??___ftmul^(0+128)
 16804  1F1F  0834               	movf	??___ftmul^(0+128),w
 16805  1F20  00A3               	movwf	___ftpack@exp^(0+128)
 16806  1F21  083D               	movf	___ftmul@sign^(0+128),w
 16807  1F22  00B5               	movwf	(??___ftmul+1)^(0+128)
 16808  1F23  0835               	movf	(??___ftmul+1)^(0+128),w
 16809  1F24  00A4               	movwf	___ftpack@sign^(0+128)
 16810  1F25  31A6  2637         	fcall	___ftpack
 16811  1F27  0021               	movlb	1	; select bank1
 16812  1F28  0820               	movf	?___ftpack^(0+128),w
 16813  1F29  00AE               	movwf	?___ftmul^(0+128)
 16814  1F2A  0821               	movf	(?___ftpack+1)^(0+128),w
 16815  1F2B  00AF               	movwf	(?___ftmul+1)^(0+128)
 16816  1F2C  0822               	movf	(?___ftpack+2)^(0+128),w
 16817  1F2D  00B0               	movwf	(?___ftmul+2)^(0+128)
 16818  1F2E  0008               	return
 16819  1F2F                     __end_of___ftmul:	
 16820                           
 16821                           	psect	text55
 16822  2FA3                     __ptext55:	
 16823 ;; *************** function ___ftsub *****************
 16824 ;; Defined at:
 16825 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16826 ;; Parameters:    Size  Location     Type
 16827 ;;  f2              3   23[BANK2 ] float 
 16828 ;;  f1              3   26[BANK2 ] float 
 16829 ;; Auto vars:     Size  Location     Type
 16830 ;;		None
 16831 ;; Return value:  Size  Location     Type
 16832 ;;                  3   23[BANK2 ] float 
 16833 ;; Registers used:
 16834 ;;		wreg, status,2, status,0, pclath, cstack
 16835 ;; Tracked objects:
 16836 ;;		On entry : 0/0
 16837 ;;		On exit  : 0/0
 16838 ;;		Unchanged: 0/0
 16839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16840 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16843 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16844 ;;Total ram usage:        6 bytes
 16845 ;; Hardware stack levels used:    1
 16846 ;; Hardware stack levels required when called:    5
 16847 ;; This function calls:
 16848 ;;		___ftadd
 16849 ;; This function is called by:
 16850 ;;		_sin
 16851 ;;		_exp
 16852 ;; This function uses a non-reentrant model
 16853 ;;
 16854                           
 16855                           
 16856                           ;psect for function ___ftsub
 16857  2FA3                     ___ftsub:	
 16858                           
 16859                           ;incstack = 0
 16860                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16861  2FA3  0022               	movlb	2	; select bank2
 16862  2FA4  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16863  2FA5  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 16864  2FA6  0437               	iorwf	___ftsub@f2^(0+256),w
 16865  2FA7  1903               	skipnz
 16866  2FA8  2FAB               	goto	l8114
 16867  2FA9  3080               	movlw	128
 16868  2FAA  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 16869  2FAB                     l8114:	
 16870  2FAB  083A               	movf	___ftsub@f1^(0+256),w
 16871  2FAC  0021               	movlb	1	; select bank1
 16872  2FAD  00C1               	movwf	___ftadd@f1^(0+128)
 16873  2FAE  0022               	movlb	2	; select bank2
 16874  2FAF  083B               	movf	(___ftsub@f1+1)^(0+256),w
 16875  2FB0  0021               	movlb	1	; select bank1
 16876  2FB1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16877  2FB2  0022               	movlb	2	; select bank2
 16878  2FB3  083C               	movf	(___ftsub@f1+2)^(0+256),w
 16879  2FB4  0021               	movlb	1	; select bank1
 16880  2FB5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16881  2FB6  0022               	movlb	2	; select bank2
 16882  2FB7  0837               	movf	___ftsub@f2^(0+256),w
 16883  2FB8  0021               	movlb	1	; select bank1
 16884  2FB9  00C4               	movwf	___ftadd@f2^(0+128)
 16885  2FBA  0022               	movlb	2	; select bank2
 16886  2FBB  0838               	movf	(___ftsub@f2+1)^(0+256),w
 16887  2FBC  0021               	movlb	1	; select bank1
 16888  2FBD  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16889  2FBE  0022               	movlb	2	; select bank2
 16890  2FBF  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16891  2FC0  0021               	movlb	1	; select bank1
 16892  2FC1  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16893  2FC2  3190  2031         	fcall	___ftadd
 16894  2FC4  0021               	movlb	1	; select bank1
 16895  2FC5  0841               	movf	?___ftadd^(0+128),w
 16896  2FC6  0022               	movlb	2	; select bank2
 16897  2FC7  00B7               	movwf	?___ftsub^(0+256)
 16898  2FC8  0021               	movlb	1	; select bank1
 16899  2FC9  0842               	movf	(?___ftadd+1)^(0+128),w
 16900  2FCA  0022               	movlb	2	; select bank2
 16901  2FCB  00B8               	movwf	(?___ftsub+1)^(0+256)
 16902  2FCC  0021               	movlb	1	; select bank1
 16903  2FCD  0843               	movf	(?___ftadd+2)^(0+128),w
 16904  2FCE  0022               	movlb	2	; select bank2
 16905  2FCF  00B9               	movwf	(?___ftsub+2)^(0+256)
 16906  2FD0  0008               	return
 16907  2FD1                     __end_of___ftsub:	
 16908                           
 16909                           	psect	text56
 16910  1031                     __ptext56:	
 16911 ;; *************** function ___ftadd *****************
 16912 ;; Defined at:
 16913 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;  f1              3   33[BANK1 ] float 
 16916 ;;  f2              3   36[BANK1 ] float 
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  exp1            1   45[BANK1 ] unsigned char 
 16919 ;;  exp2            1   44[BANK1 ] unsigned char 
 16920 ;;  sign            1   43[BANK1 ] unsigned char 
 16921 ;; Return value:  Size  Location     Type
 16922 ;;                  3   33[BANK1 ] float 
 16923 ;; Registers used:
 16924 ;;		wreg, status,2, status,0, pclath, cstack
 16925 ;; Tracked objects:
 16926 ;;		On entry : 0/0
 16927 ;;		On exit  : 0/0
 16928 ;;		Unchanged: 0/0
 16929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16930 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16931 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16932 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16933 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16934 ;;Total ram usage:       13 bytes
 16935 ;; Hardware stack levels used:    1
 16936 ;; Hardware stack levels required when called:    4
 16937 ;; This function calls:
 16938 ;;		___ftpack
 16939 ;; This function is called by:
 16940 ;;		_map
 16941 ;;		_scaleiA10kPot
 16942 ;;		_modCos
 16943 ;;		_modTri
 16944 ;;		_modSaw
 16945 ;;		_cos
 16946 ;;		___ftsub
 16947 ;;		_sin
 16948 ;;		_eval_poly
 16949 ;;		_floor
 16950 ;;		_log
 16951 ;;		_scalePotValue
 16952 ;; This function uses a non-reentrant model
 16953 ;;
 16954                           
 16955                           
 16956                           ;psect for function ___ftadd
 16957  1031                     ___ftadd:	
 16958                           
 16959                           ;incstack = 0
 16960                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16961  1031  0021               	movlb	1	; select bank1
 16962  1032  0841               	movf	___ftadd@f1^(0+128),w
 16963  1033  00C7               	movwf	??___ftadd^(0+128)
 16964  1034  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16965  1035  00C8               	movwf	(??___ftadd^(0+128)+1)
 16966  1036  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16967  1037  00C9               	movwf	(??___ftadd^(0+128)+2)
 16968  1038  1003               	clrc
 16969  1039  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16970  103A  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16971  103B  00CA               	movwf	(??___ftadd+3)^(0+128)
 16972  103C  084A               	movf	(??___ftadd+3)^(0+128),w
 16973  103D  00CD               	movwf	___ftadd@exp1^(0+128)
 16974  103E  0844               	movf	___ftadd@f2^(0+128),w
 16975  103F  00C7               	movwf	??___ftadd^(0+128)
 16976  1040  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16977  1041  00C8               	movwf	(??___ftadd^(0+128)+1)
 16978  1042  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16979  1043  00C9               	movwf	(??___ftadd^(0+128)+2)
 16980  1044  1003               	clrc
 16981  1045  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16982  1046  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16983  1047  00CA               	movwf	(??___ftadd+3)^(0+128)
 16984  1048  084A               	movf	(??___ftadd+3)^(0+128),w
 16985  1049  00CC               	movwf	___ftadd@exp2^(0+128)
 16986  104A  084D               	movf	___ftadd@exp1^(0+128),w
 16987  104B  1903               	btfsc	3,2
 16988  104C  2859               	goto	l7802
 16989  104D  084C               	movf	___ftadd@exp2^(0+128),w
 16990  104E  024D               	subwf	___ftadd@exp1^(0+128),w
 16991  104F  1803               	skipnc
 16992  1050  2860               	goto	l7806
 16993  1051  034D               	decf	___ftadd@exp1^(0+128),w
 16994  1052  3AFF               	xorlw	255
 16995  1053  074C               	addwf	___ftadd@exp2^(0+128),w
 16996  1054  00C7               	movwf	??___ftadd^(0+128)
 16997  1055  3019               	movlw	25
 16998  1056  0247               	subwf	??___ftadd^(0+128),w
 16999  1057  1C03               	skipc
 17000  1058  2860               	goto	l7806
 17001  1059                     l7802:	
 17002  1059  0844               	movf	___ftadd@f2^(0+128),w
 17003  105A  00C1               	movwf	?___ftadd^(0+128)
 17004  105B  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17005  105C  00C2               	movwf	(?___ftadd+1)^(0+128)
 17006  105D  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17007  105E  00C3               	movwf	(?___ftadd+2)^(0+128)
 17008  105F  0008               	return
 17009  1060                     l7806:	
 17010  1060  084C               	movf	___ftadd@exp2^(0+128),w
 17011  1061  1903               	btfsc	3,2
 17012  1062  0008               	return
 17013  1063  084D               	movf	___ftadd@exp1^(0+128),w
 17014  1064  024C               	subwf	___ftadd@exp2^(0+128),w
 17015  1065  1803               	skipnc
 17016  1066  286F               	goto	l7812
 17017  1067  034C               	decf	___ftadd@exp2^(0+128),w
 17018  1068  3AFF               	xorlw	255
 17019  1069  074D               	addwf	___ftadd@exp1^(0+128),w
 17020  106A  00C7               	movwf	??___ftadd^(0+128)
 17021  106B  3019               	movlw	25
 17022  106C  0247               	subwf	??___ftadd^(0+128),w
 17023  106D  1803               	btfsc	3,0
 17024  106E  0008               	return
 17025  106F                     l7812:	
 17026  106F  3006               	movlw	6
 17027  1070  00C7               	movwf	??___ftadd^(0+128)
 17028  1071  0847               	movf	??___ftadd^(0+128),w
 17029  1072  00CB               	movwf	___ftadd@sign^(0+128)
 17030  1073  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17031  1074  17CB               	bsf	___ftadd@sign^(0+128),7
 17032  1075  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17033  1076  174B               	bsf	___ftadd@sign^(0+128),6
 17034  1077  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17035  1078  30FF               	movlw	255
 17036  1079  05C1               	andwf	___ftadd@f1^(0+128),f
 17037  107A  30FF               	movlw	255
 17038  107B  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17039  107C  3000               	movlw	0
 17040  107D  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17041  107E  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17042  107F  30FF               	movlw	255
 17043  1080  05C4               	andwf	___ftadd@f2^(0+128),f
 17044  1081  30FF               	movlw	255
 17045  1082  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17046  1083  3000               	movlw	0
 17047  1084  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17048  1085  084C               	movf	___ftadd@exp2^(0+128),w
 17049  1086  024D               	subwf	___ftadd@exp1^(0+128),w
 17050  1087  1803               	skipnc
 17051  1088  28AB               	goto	l7834
 17052  1089                     l7824:	
 17053  1089  3001               	movlw	1
 17054  108A                     u7975:	
 17055  108A  35C4               	lslf	___ftadd@f2^(0+128),f
 17056  108B  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17057  108C  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17058  108D  0B89               	decfsz	9,f
 17059  108E  288A               	goto	u7975
 17060  108F  3001               	movlw	1
 17061  1090  02CC               	subwf	___ftadd@exp2^(0+128),f
 17062  1091  084C               	movf	___ftadd@exp2^(0+128),w
 17063  1092  064D               	xorwf	___ftadd@exp1^(0+128),w
 17064  1093  1903               	skipnz
 17065  1094  28A6               	goto	l7832
 17066  1095  3001               	movlw	1
 17067  1096  02CB               	subwf	___ftadd@sign^(0+128),f
 17068  1097  084B               	movf	___ftadd@sign^(0+128),w
 17069  1098  3907               	andlw	7
 17070  1099  1903               	btfsc	3,2
 17071  109A  28A6               	goto	l7832
 17072  109B  2889               	goto	l7824
 17073  109C                     l7830:	
 17074  109C  3001               	movlw	1
 17075  109D                     u8005:	
 17076  109D  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17077  109E  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17078  109F  0CC1               	rrf	___ftadd@f1^(0+128),f
 17079  10A0  0B89               	decfsz	9,f
 17080  10A1  289D               	goto	u8005
 17081  10A2  3001               	movlw	1
 17082  10A3  00C7               	movwf	??___ftadd^(0+128)
 17083  10A4  0847               	movf	??___ftadd^(0+128),w
 17084  10A5  07CD               	addwf	___ftadd@exp1^(0+128),f
 17085  10A6                     l7832:	
 17086  10A6  084D               	movf	___ftadd@exp1^(0+128),w
 17087  10A7  064C               	xorwf	___ftadd@exp2^(0+128),w
 17088  10A8  1903               	btfsc	3,2
 17089  10A9  28D0               	goto	l2160
 17090  10AA  289C               	goto	l7830
 17091  10AB                     l7834:	
 17092  10AB  084D               	movf	___ftadd@exp1^(0+128),w
 17093  10AC  024C               	subwf	___ftadd@exp2^(0+128),w
 17094  10AD  1803               	skipnc
 17095  10AE  28D0               	goto	l2160
 17096  10AF                     l7836:	
 17097  10AF  3001               	movlw	1
 17098  10B0                     u8035:	
 17099  10B0  35C1               	lslf	___ftadd@f1^(0+128),f
 17100  10B1  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17101  10B2  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17102  10B3  0B89               	decfsz	9,f
 17103  10B4  28B0               	goto	u8035
 17104  10B5  3001               	movlw	1
 17105  10B6  02CD               	subwf	___ftadd@exp1^(0+128),f
 17106  10B7  084C               	movf	___ftadd@exp2^(0+128),w
 17107  10B8  064D               	xorwf	___ftadd@exp1^(0+128),w
 17108  10B9  1903               	skipnz
 17109  10BA  28CC               	goto	l7844
 17110  10BB  3001               	movlw	1
 17111  10BC  02CB               	subwf	___ftadd@sign^(0+128),f
 17112  10BD  084B               	movf	___ftadd@sign^(0+128),w
 17113  10BE  3907               	andlw	7
 17114  10BF  1903               	btfsc	3,2
 17115  10C0  28CC               	goto	l7844
 17116  10C1  28AF               	goto	l7836
 17117  10C2                     l7842:	
 17118  10C2  3001               	movlw	1
 17119  10C3                     u8065:	
 17120  10C3  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17121  10C4  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17122  10C5  0CC4               	rrf	___ftadd@f2^(0+128),f
 17123  10C6  0B89               	decfsz	9,f
 17124  10C7  28C3               	goto	u8065
 17125  10C8  3001               	movlw	1
 17126  10C9  00C7               	movwf	??___ftadd^(0+128)
 17127  10CA  0847               	movf	??___ftadd^(0+128),w
 17128  10CB  07CC               	addwf	___ftadd@exp2^(0+128),f
 17129  10CC                     l7844:	
 17130  10CC  084D               	movf	___ftadd@exp1^(0+128),w
 17131  10CD  064C               	xorwf	___ftadd@exp2^(0+128),w
 17132  10CE  1D03               	skipz
 17133  10CF  28C2               	goto	l7842
 17134  10D0                     l2160:	
 17135  10D0  1FCB               	btfss	___ftadd@sign^(0+128),7
 17136  10D1  28E2               	goto	l7848
 17137  10D2  30FF               	movlw	255
 17138  10D3  06C1               	xorwf	___ftadd@f1^(0+128),f
 17139  10D4  30FF               	movlw	255
 17140  10D5  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17141  10D6  30FF               	movlw	255
 17142  10D7  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17143  10D8  3001               	movlw	1
 17144  10D9  07C1               	addwf	___ftadd@f1^(0+128),f
 17145  10DA  3000               	movlw	0
 17146  10DB  1803               	skipnc
 17147  10DC  3001               	movlw	1
 17148  10DD  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17149  10DE  3000               	movlw	0
 17150  10DF  1803               	skipnc
 17151  10E0  3001               	movlw	1
 17152  10E1  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17153  10E2                     l7848:	
 17154  10E2  1F4B               	btfss	___ftadd@sign^(0+128),6
 17155  10E3  28F4               	goto	l7852
 17156  10E4  30FF               	movlw	255
 17157  10E5  06C4               	xorwf	___ftadd@f2^(0+128),f
 17158  10E6  30FF               	movlw	255
 17159  10E7  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17160  10E8  30FF               	movlw	255
 17161  10E9  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17162  10EA  3001               	movlw	1
 17163  10EB  07C4               	addwf	___ftadd@f2^(0+128),f
 17164  10EC  3000               	movlw	0
 17165  10ED  1803               	skipnc
 17166  10EE  3001               	movlw	1
 17167  10EF  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17168  10F0  3000               	movlw	0
 17169  10F1  1803               	skipnc
 17170  10F2  3001               	movlw	1
 17171  10F3  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17172  10F4                     l7852:	
 17173  10F4  01CB               	clrf	___ftadd@sign^(0+128)
 17174  10F5  0841               	movf	___ftadd@f1^(0+128),w
 17175  10F6  07C4               	addwf	___ftadd@f2^(0+128),f
 17176  10F7  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17177  10F8  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17178  10F9  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17179  10FA  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17180  10FB  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17181  10FC  290F               	goto	l7862
 17182  10FD  30FF               	movlw	255
 17183  10FE  06C4               	xorwf	___ftadd@f2^(0+128),f
 17184  10FF  30FF               	movlw	255
 17185  1100  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17186  1101  30FF               	movlw	255
 17187  1102  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17188  1103  3001               	movlw	1
 17189  1104  07C4               	addwf	___ftadd@f2^(0+128),f
 17190  1105  3000               	movlw	0
 17191  1106  1803               	skipnc
 17192  1107  3001               	movlw	1
 17193  1108  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17194  1109  3000               	movlw	0
 17195  110A  1803               	skipnc
 17196  110B  3001               	movlw	1
 17197  110C  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17198  110D  01CB               	clrf	___ftadd@sign^(0+128)
 17199  110E  0ACB               	incf	___ftadd@sign^(0+128),f
 17200  110F                     l7862:	
 17201  110F  0844               	movf	___ftadd@f2^(0+128),w
 17202  1110  00A0               	movwf	___ftpack@arg^(0+128)
 17203  1111  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17204  1112  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17205  1113  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17206  1114  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17207  1115  084D               	movf	___ftadd@exp1^(0+128),w
 17208  1116  00C7               	movwf	??___ftadd^(0+128)
 17209  1117  0847               	movf	??___ftadd^(0+128),w
 17210  1118  00A3               	movwf	___ftpack@exp^(0+128)
 17211  1119  084B               	movf	___ftadd@sign^(0+128),w
 17212  111A  00C8               	movwf	(??___ftadd+1)^(0+128)
 17213  111B  0848               	movf	(??___ftadd+1)^(0+128),w
 17214  111C  00A4               	movwf	___ftpack@sign^(0+128)
 17215  111D  31A6  2637         	fcall	___ftpack
 17216  111F  0021               	movlb	1	; select bank1
 17217  1120  0820               	movf	?___ftpack^(0+128),w
 17218  1121  00C1               	movwf	?___ftadd^(0+128)
 17219  1122  0821               	movf	(?___ftpack+1)^(0+128),w
 17220  1123  00C2               	movwf	(?___ftadd+1)^(0+128)
 17221  1124  0822               	movf	(?___ftpack+2)^(0+128),w
 17222  1125  00C3               	movwf	(?___ftadd+2)^(0+128)
 17223  1126  0008               	return
 17224  1127                     __end_of___ftadd:	
 17225                           
 17226                           	psect	text57
 17227  2D93                     __ptext57:	
 17228 ;; *************** function ___ftneg *****************
 17229 ;; Defined at:
 17230 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;  f1              3   30[BANK1 ] float 
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;		None
 17235 ;; Return value:  Size  Location     Type
 17236 ;;                  3   30[BANK1 ] float 
 17237 ;; Registers used:
 17238 ;;		wreg
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17244 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17247 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17248 ;;Total ram usage:        3 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    3
 17251 ;; This function calls:
 17252 ;;		Nothing
 17253 ;; This function is called by:
 17254 ;;		_map
 17255 ;;		_scaleiA10kPot
 17256 ;;		_modCos
 17257 ;;		_modTri
 17258 ;;		_modSaw
 17259 ;;		_pow
 17260 ;;		_sin
 17261 ;;		_exp
 17262 ;;		_ldexp
 17263 ;;		_scalePotValue
 17264 ;; This function uses a non-reentrant model
 17265 ;;
 17266                           
 17267                           
 17268                           ;psect for function ___ftneg
 17269  2D93                     ___ftneg:	
 17270                           
 17271                           ;incstack = 0
 17272                           ; Regs used in ___ftneg: [wreg]
 17273  2D93  0021               	movlb	1	; select bank1
 17274  2D94  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17275  2D95  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17276  2D96  043E               	iorwf	___ftneg@f1^(0+128),w
 17277  2D97  1903               	skipnz
 17278  2D98  0008               	return
 17279  2D99  3080               	movlw	128
 17280  2D9A  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17281  2D9B  0008               	return
 17282  2D9C                     __end_of___ftneg:	
 17283                           
 17284                           	psect	text58
 17285  1D1F                     __ptext58:	
 17286 ;; *************** function ___ftdiv *****************
 17287 ;; Defined at:
 17288 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17289 ;; Parameters:    Size  Location     Type
 17290 ;;  f2              3   46[BANK1 ] float 
 17291 ;;  f1              3   49[BANK1 ] float 
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;  f3              3   57[BANK1 ] float 
 17294 ;;  sign            1   61[BANK1 ] unsigned char 
 17295 ;;  exp             1   60[BANK1 ] unsigned char 
 17296 ;;  cntr            1   56[BANK1 ] unsigned char 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;                  3   46[BANK1 ] float 
 17299 ;; Registers used:
 17300 ;;		wreg, status,2, status,0, pclath, cstack
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17306 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17307 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17308 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17309 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17310 ;;Total ram usage:       16 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    4
 17313 ;; This function calls:
 17314 ;;		___ftpack
 17315 ;; This function is called by:
 17316 ;;		_map
 17317 ;;		_scaleA100kPot
 17318 ;;		_scaleA10kPot
 17319 ;;		_scaleiA10kPot
 17320 ;;		_calcCosArray
 17321 ;;		_getModulationDelayTime
 17322 ;;		_modCos
 17323 ;;		_modTri
 17324 ;;		_modSaw
 17325 ;;		_sin
 17326 ;;		_exp
 17327 ;;		_scalePotValue
 17328 ;;		_scaleiA100kPot
 17329 ;; This function uses a non-reentrant model
 17330 ;;
 17331                           
 17332                           
 17333                           ;psect for function ___ftdiv
 17334  1D1F                     ___ftdiv:	
 17335                           
 17336                           ;incstack = 0
 17337                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17338  1D1F  0021               	movlb	1	; select bank1
 17339  1D20  0851               	movf	___ftdiv@f1^(0+128),w
 17340  1D21  00D4               	movwf	??___ftdiv^(0+128)
 17341  1D22  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17342  1D23  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17343  1D24  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17344  1D25  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17345  1D26  1003               	clrc
 17346  1D27  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17347  1D28  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17348  1D29  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17349  1D2A  0857               	movf	(??___ftdiv+3)^(0+128),w
 17350  1D2B  00DC               	movwf	___ftdiv@exp^(0+128)
 17351  1D2C  085C               	movf	___ftdiv@exp^(0+128),w
 17352  1D2D  1D03               	btfss	3,2
 17353  1D2E  2D36               	goto	l8074
 17354  1D2F  3000               	movlw	0
 17355  1D30  00CE               	movwf	?___ftdiv^(0+128)
 17356  1D31  3000               	movlw	0
 17357  1D32  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17358  1D33  3000               	movlw	0
 17359  1D34  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17360  1D35  0008               	return
 17361  1D36                     l8074:	
 17362  1D36  084E               	movf	___ftdiv@f2^(0+128),w
 17363  1D37  00D4               	movwf	??___ftdiv^(0+128)
 17364  1D38  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17365  1D39  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17366  1D3A  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17367  1D3B  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17368  1D3C  1003               	clrc
 17369  1D3D  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17370  1D3E  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17371  1D3F  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17372  1D40  0857               	movf	(??___ftdiv+3)^(0+128),w
 17373  1D41  00DD               	movwf	___ftdiv@sign^(0+128)
 17374  1D42  085D               	movf	___ftdiv@sign^(0+128),w
 17375  1D43  1D03               	btfss	3,2
 17376  1D44  2D4C               	goto	l8080
 17377  1D45  3000               	movlw	0
 17378  1D46  00CE               	movwf	?___ftdiv^(0+128)
 17379  1D47  3000               	movlw	0
 17380  1D48  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17381  1D49  3000               	movlw	0
 17382  1D4A  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17383  1D4B  0008               	return
 17384  1D4C                     l8080:	
 17385  1D4C  3000               	movlw	0
 17386  1D4D  00D9               	movwf	___ftdiv@f3^(0+128)
 17387  1D4E  3000               	movlw	0
 17388  1D4F  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17389  1D50  3000               	movlw	0
 17390  1D51  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17391  1D52  3089               	movlw	137
 17392  1D53  075D               	addwf	___ftdiv@sign^(0+128),w
 17393  1D54  00D4               	movwf	??___ftdiv^(0+128)
 17394  1D55  0854               	movf	??___ftdiv^(0+128),w
 17395  1D56  02DC               	subwf	___ftdiv@exp^(0+128),f
 17396  1D57  0851               	movf	___ftdiv@f1^(0+128),w
 17397  1D58  00D4               	movwf	??___ftdiv^(0+128)
 17398  1D59  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17399  1D5A  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17400  1D5B  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17401  1D5C  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17402  1D5D  3010               	movlw	16
 17403  1D5E                     u8465:	
 17404  1D5E  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17405  1D5F  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17406  1D60  0CD4               	rrf	??___ftdiv^(0+128),f
 17407  1D61  0B89               	decfsz	9,f
 17408  1D62  2D5E               	goto	u8465
 17409  1D63  0854               	movf	??___ftdiv^(0+128),w
 17410  1D64  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17411  1D65  0857               	movf	(??___ftdiv+3)^(0+128),w
 17412  1D66  00DD               	movwf	___ftdiv@sign^(0+128)
 17413  1D67  084E               	movf	___ftdiv@f2^(0+128),w
 17414  1D68  00D4               	movwf	??___ftdiv^(0+128)
 17415  1D69  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17416  1D6A  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17417  1D6B  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17418  1D6C  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17419  1D6D  3010               	movlw	16
 17420  1D6E                     u8475:	
 17421  1D6E  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17422  1D6F  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17423  1D70  0CD4               	rrf	??___ftdiv^(0+128),f
 17424  1D71  0B89               	decfsz	9,f
 17425  1D72  2D6E               	goto	u8475
 17426  1D73  0854               	movf	??___ftdiv^(0+128),w
 17427  1D74  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17428  1D75  0857               	movf	(??___ftdiv+3)^(0+128),w
 17429  1D76  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17430  1D77  3080               	movlw	128
 17431  1D78  00D4               	movwf	??___ftdiv^(0+128)
 17432  1D79  0854               	movf	??___ftdiv^(0+128),w
 17433  1D7A  05DD               	andwf	___ftdiv@sign^(0+128),f
 17434  1D7B  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17435  1D7C  30FF               	movlw	255
 17436  1D7D  05D1               	andwf	___ftdiv@f1^(0+128),f
 17437  1D7E  30FF               	movlw	255
 17438  1D7F  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17439  1D80  3000               	movlw	0
 17440  1D81  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17441  1D82  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17442  1D83  30FF               	movlw	255
 17443  1D84  05CE               	andwf	___ftdiv@f2^(0+128),f
 17444  1D85  30FF               	movlw	255
 17445  1D86  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17446  1D87  3000               	movlw	0
 17447  1D88  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17448  1D89  3018               	movlw	24
 17449  1D8A  00D4               	movwf	??___ftdiv^(0+128)
 17450  1D8B  0854               	movf	??___ftdiv^(0+128),w
 17451  1D8C  00D8               	movwf	___ftdiv@cntr^(0+128)
 17452  1D8D                     l8094:	
 17453  1D8D  3001               	movlw	1
 17454  1D8E                     u8485:	
 17455  1D8E  35D9               	lslf	___ftdiv@f3^(0+128),f
 17456  1D8F  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17457  1D90  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17458  1D91  0B89               	decfsz	9,f
 17459  1D92  2D8E               	goto	u8485
 17460  1D93  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17461  1D94  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17462  1D95  1D03               	skipz
 17463  1D96  2D9D               	goto	u8495
 17464  1D97  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17465  1D98  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17466  1D99  1D03               	skipz
 17467  1D9A  2D9D               	goto	u8495
 17468  1D9B  084E               	movf	___ftdiv@f2^(0+128),w
 17469  1D9C  0251               	subwf	___ftdiv@f1^(0+128),w
 17470  1D9D                     u8495:	
 17471  1D9D  1C03               	skipc
 17472  1D9E  2DA6               	goto	l8102
 17473  1D9F  084E               	movf	___ftdiv@f2^(0+128),w
 17474  1DA0  02D1               	subwf	___ftdiv@f1^(0+128),f
 17475  1DA1  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17476  1DA2  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17477  1DA3  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17478  1DA4  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17479  1DA5  1459               	bsf	___ftdiv@f3^(0+128),0
 17480  1DA6                     l8102:	
 17481  1DA6  3001               	movlw	1
 17482  1DA7                     u8505:	
 17483  1DA7  35D1               	lslf	___ftdiv@f1^(0+128),f
 17484  1DA8  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17485  1DA9  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17486  1DAA  0B89               	decfsz	9,f
 17487  1DAB  2DA7               	goto	u8505
 17488  1DAC  3001               	movlw	1
 17489  1DAD  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17490  1DAE  1D03               	btfss	3,2
 17491  1DAF  2D8D               	goto	l8094
 17492  1DB0  0859               	movf	___ftdiv@f3^(0+128),w
 17493  1DB1  00A0               	movwf	___ftpack@arg^(0+128)
 17494  1DB2  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17495  1DB3  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17496  1DB4  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17497  1DB5  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17498  1DB6  085C               	movf	___ftdiv@exp^(0+128),w
 17499  1DB7  00D4               	movwf	??___ftdiv^(0+128)
 17500  1DB8  0854               	movf	??___ftdiv^(0+128),w
 17501  1DB9  00A3               	movwf	___ftpack@exp^(0+128)
 17502  1DBA  085D               	movf	___ftdiv@sign^(0+128),w
 17503  1DBB  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17504  1DBC  0855               	movf	(??___ftdiv+1)^(0+128),w
 17505  1DBD  00A4               	movwf	___ftpack@sign^(0+128)
 17506  1DBE  31A6  2637         	fcall	___ftpack
 17507  1DC0  0021               	movlb	1	; select bank1
 17508  1DC1  0820               	movf	?___ftpack^(0+128),w
 17509  1DC2  00CE               	movwf	?___ftdiv^(0+128)
 17510  1DC3  0821               	movf	(?___ftpack+1)^(0+128),w
 17511  1DC4  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17512  1DC5  0822               	movf	(?___ftpack+2)^(0+128),w
 17513  1DC6  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17514  1DC7  0008               	return
 17515  1DC8                     __end_of___ftdiv:	
 17516                           
 17517                           	psect	text59
 17518  2EE2                     __ptext59:	
 17519 ;; *************** function ___awtoft *****************
 17520 ;; Defined at:
 17521 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17522 ;; Parameters:    Size  Location     Type
 17523 ;;  c               2    8[BANK1 ] int 
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;  sign            1   13[BANK1 ] unsigned char 
 17526 ;; Return value:  Size  Location     Type
 17527 ;;                  3    8[BANK1 ] float 
 17528 ;; Registers used:
 17529 ;;		wreg, status,2, status,0, pclath, cstack
 17530 ;; Tracked objects:
 17531 ;;		On entry : 0/0
 17532 ;;		On exit  : 0/0
 17533 ;;		Unchanged: 0/0
 17534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17535 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17536 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17537 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17538 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17539 ;;Total ram usage:        6 bytes
 17540 ;; Hardware stack levels used:    1
 17541 ;; Hardware stack levels required when called:    4
 17542 ;; This function calls:
 17543 ;;		___ftpack
 17544 ;; This function is called by:
 17545 ;;		_main
 17546 ;;		_set_subdivision
 17547 ;;		_calcCosArray
 17548 ;;		_getModulationDelayTime
 17549 ;;		_updateModulationArray
 17550 ;;		_exp
 17551 ;;		_log
 17552 ;; This function uses a non-reentrant model
 17553 ;;
 17554                           
 17555                           
 17556                           ;psect for function ___awtoft
 17557  2EE2                     ___awtoft:	
 17558                           
 17559                           ;incstack = 0
 17560                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17561  2EE2  0021               	movlb	1	; select bank1
 17562  2EE3  01AD               	clrf	___awtoft@sign^(0+128)
 17563  2EE4  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17564  2EE5  2EED               	goto	l8064
 17565  2EE6  09A8               	comf	___awtoft@c^(0+128),f
 17566  2EE7  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17567  2EE8  0AA8               	incf	___awtoft@c^(0+128),f
 17568  2EE9  1903               	skipnz
 17569  2EEA  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17570  2EEB  01AD               	clrf	___awtoft@sign^(0+128)
 17571  2EEC  0AAD               	incf	___awtoft@sign^(0+128),f
 17572  2EED                     l8064:	
 17573  2EED  0828               	movf	___awtoft@c^(0+128),w
 17574  2EEE  00A0               	movwf	___ftpack@arg^(0+128)
 17575  2EEF  0829               	movf	(___awtoft@c+1)^(0+128),w
 17576  2EF0  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17577  2EF1  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17578  2EF2  308E               	movlw	142
 17579  2EF3  00AB               	movwf	??___awtoft^(0+128)
 17580  2EF4  082B               	movf	??___awtoft^(0+128),w
 17581  2EF5  00A3               	movwf	___ftpack@exp^(0+128)
 17582  2EF6  082D               	movf	___awtoft@sign^(0+128),w
 17583  2EF7  00AC               	movwf	(??___awtoft+1)^(0+128)
 17584  2EF8  082C               	movf	(??___awtoft+1)^(0+128),w
 17585  2EF9  00A4               	movwf	___ftpack@sign^(0+128)
 17586  2EFA  31A6  2637         	fcall	___ftpack
 17587  2EFC  0021               	movlb	1	; select bank1
 17588  2EFD  0820               	movf	?___ftpack^(0+128),w
 17589  2EFE  00A8               	movwf	?___awtoft^(0+128)
 17590  2EFF  0821               	movf	(?___ftpack+1)^(0+128),w
 17591  2F00  00A9               	movwf	(?___awtoft+1)^(0+128)
 17592  2F01  0822               	movf	(?___ftpack+2)^(0+128),w
 17593  2F02  00AA               	movwf	(?___awtoft+2)^(0+128)
 17594  2F03  0008               	return
 17595  2F04                     __end_of___awtoft:	
 17596                           
 17597                           	psect	text60
 17598  2637                     __ptext60:	
 17599 ;; *************** function ___ftpack *****************
 17600 ;; Defined at:
 17601 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;  arg             3    0[BANK1 ] unsigned um
 17604 ;;  exp             1    3[BANK1 ] unsigned char 
 17605 ;;  sign            1    4[BANK1 ] unsigned char 
 17606 ;; Auto vars:     Size  Location     Type
 17607 ;;		None
 17608 ;; Return value:  Size  Location     Type
 17609 ;;                  3    0[BANK1 ] float 
 17610 ;; Registers used:
 17611 ;;		wreg, status,2, status,0
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17617 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17619 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17620 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17621 ;;Total ram usage:        8 bytes
 17622 ;; Hardware stack levels used:    1
 17623 ;; Hardware stack levels required when called:    3
 17624 ;; This function calls:
 17625 ;;		Nothing
 17626 ;; This function is called by:
 17627 ;;		___altoft
 17628 ;;		___awtoft
 17629 ;;		___ftadd
 17630 ;;		___ftdiv
 17631 ;;		___ftmul
 17632 ;;		___lltoft
 17633 ;; This function uses a non-reentrant model
 17634 ;;
 17635                           
 17636                           
 17637                           ;psect for function ___ftpack
 17638  2637                     ___ftpack:	
 17639                           
 17640                           ;incstack = 0
 17641                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17642  2637  0021               	movlb	1	; select bank1
 17643  2638  0823               	movf	___ftpack@exp^(0+128),w
 17644  2639  1903               	btfsc	3,2
 17645  263A  2E40               	goto	l7702
 17646  263B  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17647  263C  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17648  263D  0420               	iorwf	___ftpack@arg^(0+128),w
 17649  263E  1D03               	skipz
 17650  263F  2E51               	goto	l7708
 17651  2640                     l7702:	
 17652  2640  3000               	movlw	0
 17653  2641  00A0               	movwf	?___ftpack^(0+128)
 17654  2642  3000               	movlw	0
 17655  2643  00A1               	movwf	(?___ftpack+1)^(0+128)
 17656  2644  3000               	movlw	0
 17657  2645  00A2               	movwf	(?___ftpack+2)^(0+128)
 17658  2646  0008               	return
 17659  2647                     l7706:	
 17660  2647  3001               	movlw	1
 17661  2648  00A5               	movwf	??___ftpack^(0+128)
 17662  2649  0825               	movf	??___ftpack^(0+128),w
 17663  264A  07A3               	addwf	___ftpack@exp^(0+128),f
 17664  264B  3001               	movlw	1
 17665  264C                     u7705:	
 17666  264C  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17667  264D  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17668  264E  0CA0               	rrf	___ftpack@arg^(0+128),f
 17669  264F  0B89               	decfsz	9,f
 17670  2650  2E4C               	goto	u7705
 17671  2651                     l7708:	
 17672  2651  30FE               	movlw	254
 17673  2652  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17674  2653  1903               	btfsc	3,2
 17675  2654  2E6A               	goto	l2129
 17676  2655  2E47               	goto	l7706
 17677  2656                     l7710:	
 17678  2656  3001               	movlw	1
 17679  2657  00A5               	movwf	??___ftpack^(0+128)
 17680  2658  0825               	movf	??___ftpack^(0+128),w
 17681  2659  07A3               	addwf	___ftpack@exp^(0+128),f
 17682  265A  3001               	movlw	1
 17683  265B  07A0               	addwf	___ftpack@arg^(0+128),f
 17684  265C  3000               	movlw	0
 17685  265D  1803               	skipnc
 17686  265E  3001               	movlw	1
 17687  265F  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17688  2660  3000               	movlw	0
 17689  2661  1803               	skipnc
 17690  2662  3001               	movlw	1
 17691  2663  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17692  2664  3001               	movlw	1
 17693  2665                     u7725:	
 17694  2665  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17695  2666  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17696  2667  0CA0               	rrf	___ftpack@arg^(0+128),f
 17697  2668  0B89               	decfsz	9,f
 17698  2669  2E65               	goto	u7725
 17699  266A                     l2129:	
 17700  266A  30FF               	movlw	255
 17701  266B  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17702  266C  1903               	btfsc	3,2
 17703  266D  2E77               	goto	l7718
 17704  266E  2E56               	goto	l7710
 17705  266F                     l7716:	
 17706  266F  3001               	movlw	1
 17707  2670  02A3               	subwf	___ftpack@exp^(0+128),f
 17708  2671  3001               	movlw	1
 17709  2672                     u7745:	
 17710  2672  35A0               	lslf	___ftpack@arg^(0+128),f
 17711  2673  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17712  2674  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17713  2675  0B89               	decfsz	9,f
 17714  2676  2E72               	goto	u7745
 17715  2677                     l7718:	
 17716  2677  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17717  2678  2E7D               	goto	l2136
 17718  2679  3002               	movlw	2
 17719  267A  0223               	subwf	___ftpack@exp^(0+128),w
 17720  267B  1803               	skipnc
 17721  267C  2E6F               	goto	l7716
 17722  267D                     l2136:	
 17723  267D  1823               	btfsc	___ftpack@exp^(0+128),0
 17724  267E  2E85               	goto	l2137
 17725  267F  30FF               	movlw	255
 17726  2680  05A0               	andwf	___ftpack@arg^(0+128),f
 17727  2681  307F               	movlw	127
 17728  2682  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17729  2683  30FF               	movlw	255
 17730  2684  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17731  2685                     l2137:	
 17732  2685  1003               	clrc
 17733  2686  0CA3               	rrf	___ftpack@exp^(0+128),f
 17734  2687  0823               	movf	___ftpack@exp^(0+128),w
 17735  2688  00A5               	movwf	??___ftpack^(0+128)
 17736  2689  01A6               	clrf	(??___ftpack^(0+128)+1)
 17737  268A  01A7               	clrf	(??___ftpack^(0+128)+2)
 17738  268B  3010               	movlw	16
 17739  268C                     u7785:	
 17740  268C  35A5               	lslf	??___ftpack^(0+128),f
 17741  268D  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17742  268E  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17743  268F  0B89               	decfsz	9,f
 17744  2690  2E8C               	goto	u7785
 17745  2691  0825               	movf	??___ftpack^(0+128),w
 17746  2692  04A0               	iorwf	___ftpack@arg^(0+128),f
 17747  2693  0826               	movf	(??___ftpack+1)^(0+128),w
 17748  2694  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17749  2695  0827               	movf	(??___ftpack+2)^(0+128),w
 17750  2696  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17751  2697  0824               	movf	___ftpack@sign^(0+128),w
 17752  2698  1903               	btfsc	3,2
 17753  2699  0008               	return
 17754  269A  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17755  269B  0008               	return
 17756  269C                     __end_of___ftpack:	
 17757                           
 17758                           	psect	text61
 17759  2DDB                     __ptext61:	
 17760 ;; *************** function _adc_convert *****************
 17761 ;; Defined at:
 17762 ;;		line 122 in file "user.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;  channel         1    wreg     unsigned char 
 17765 ;; Auto vars:     Size  Location     Type
 17766 ;;  channel         1    3[BANK1 ] unsigned char 
 17767 ;; Return value:  Size  Location     Type
 17768 ;;                  2    0[BANK1 ] unsigned int 
 17769 ;; Registers used:
 17770 ;;		wreg, status,2, status,0
 17771 ;; Tracked objects:
 17772 ;;		On entry : 0/0
 17773 ;;		On exit  : 0/0
 17774 ;;		Unchanged: 0/0
 17775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17776 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17777 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17778 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17779 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17780 ;;Total ram usage:        4 bytes
 17781 ;; Hardware stack levels used:    1
 17782 ;; Hardware stack levels required when called:    3
 17783 ;; This function calls:
 17784 ;;		Nothing
 17785 ;; This function is called by:
 17786 ;;		_main
 17787 ;; This function uses a non-reentrant model
 17788 ;;
 17789                           
 17790                           
 17791                           ;psect for function _adc_convert
 17792  2DDB                     _adc_convert:	
 17793                           
 17794                           ;incstack = 0
 17795                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17796                           ;adc_convert@channel stored from wreg
 17797  2DDB  0021               	movlb	1	; select bank1
 17798  2DDC  00A3               	movwf	adc_convert@channel^(0+128)
 17799                           
 17800                           ;user.c: 123: ADCON0bits.CHS = channel;
 17801  2DDD  0823               	movf	adc_convert@channel^(0+128),w
 17802  2DDE  00A2               	movwf	??_adc_convert^(0+128)
 17803  2DDF  0DA2               	rlf	??_adc_convert^(0+128),f
 17804  2DE0  0DA2               	rlf	??_adc_convert^(0+128),f
 17805  2DE1  081D               	movf	29,w	;volatile
 17806  2DE2  0622               	xorwf	??_adc_convert^(0+128),w
 17807  2DE3  3983               	andlw	-125
 17808  2DE4  0622               	xorwf	??_adc_convert^(0+128),w
 17809  2DE5  009D               	movwf	29	;volatile
 17810                           
 17811                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17812  2DE6  149D               	bsf	29,1	;volatile
 17813  2DE7                     l588:	
 17814                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17815                           
 17816  2DE7  189D               	btfsc	29,1	;volatile
 17817  2DE8  2DE7               	goto	l588
 17818                           
 17819                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17820  2DE9  081C               	movf	28,w	;volatile
 17821  2DEA  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17822  2DEB  081B               	movf	27,w	;volatile
 17823  2DEC  00A0               	movwf	?_adc_convert^(0+128)
 17824  2DED  0008               	return
 17825  2DEE                     __end_of_adc_convert:	
 17826                           
 17827                           	psect	text62
 17828  2370                     __ptext62:	
 17829 ;; *************** function _USARTInit *****************
 17830 ;; Defined at:
 17831 ;;		line 31 in file "usart_pic16.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;		None
 17836 ;; Return value:  Size  Location     Type
 17837 ;;                  1    wreg      void 
 17838 ;; Registers used:
 17839 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17845 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17847 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17848 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17849 ;;Total ram usage:        3 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    3
 17852 ;; This function calls:
 17853 ;;		Nothing
 17854 ;; This function is called by:
 17855 ;;		_main
 17856 ;; This function uses a non-reentrant model
 17857 ;;
 17858                           
 17859                           
 17860                           ;psect for function _USARTInit
 17861  2370                     _USARTInit:	
 17862                           
 17863                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17864                           
 17865                           ;incstack = 0
 17866                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17867  2370  30FF               	movlw	255
 17868  2371  0020               	movlb	0	; select bank0
 17869  2372  00CC               	movwf	_UQEnd	;volatile
 17870  2373  0021               	movlb	1	; select bank1
 17871  2374  00A2               	movwf	??_USARTInit^(0+128)
 17872  2375  0822               	movf	??_USARTInit^(0+128),w
 17873  2376  0020               	movlb	0	; select bank0
 17874  2377  00CD               	movwf	_UQFront	;volatile
 17875                           
 17876                           ;usart_pic16.c: 37: switch(baud_rate)
 17877  2378  2B83               	goto	l8772
 17878  2379                     l8762:	
 17879                           ;usart_pic16.c: 38: {
 17880                           ;usart_pic16.c: 39: case 9600:
 17881                           
 17882                           
 17883                           ;usart_pic16.c: 40: SPBRG=103;
 17884  2379  3067               	movlw	103
 17885  237A  2B80               	goto	L22
 17886  237B                     l8764:	
 17887                           ;usart_pic16.c: 42: case 19200:
 17888                           
 17889                           ;usart_pic16.c: 41: break;
 17890                           
 17891                           
 17892                           ;usart_pic16.c: 43: SPBRG=51;
 17893  237B  3033               	movlw	51
 17894  237C  2B80               	goto	L22
 17895  237D                     l8766:	
 17896                           ;usart_pic16.c: 45: case 31250:
 17897                           
 17898                           ;usart_pic16.c: 44: break;
 17899                           
 17900                           
 17901                           ;usart_pic16.c: 46: SPBRG = 31;
 17902  237D  301F               	movlw	31
 17903  237E  2B80               	goto	L22
 17904  237F                     l8768:	
 17905                           ;usart_pic16.c: 48: case 38400:
 17906                           
 17907                           ;usart_pic16.c: 47: break;
 17908                           
 17909                           
 17910                           ;usart_pic16.c: 49: SPBRG=25;
 17911  237F  3019               	movlw	25
 17912  2380                     L22:	
 17913  2380  0023               	movlb	3	; select bank3
 17914  2381  009B               	movwf	27	;volatile
 17915                           
 17916                           ;usart_pic16.c: 51: }
 17917                           
 17918                           ;usart_pic16.c: 50: break;
 17919  2382  2BA6               	goto	l1714
 17920  2383                     l8772:	
 17921                           
 17922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17923                           ; Switch size 1, requested type "space"
 17924                           ; Number of cases is 4, Range of values is 37 to 150
 17925                           ; switch strategies available:
 17926                           ; Name         Instructions Cycles
 17927                           ; simple_byte           13     7 (average)
 17928                           ; direct_byte          237     9 (fixed)
 17929                           ; jumptable            263     9 (fixed)
 17930                           ;	Chosen strategy is simple_byte
 17931  2383  0021               	movlb	1	; select bank1
 17932  2384  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17933  2385  3A25               	xorlw	37	; case 37
 17934  2386  1903               	skipnz
 17935  2387  2B92               	goto	l9846
 17936  2388  3A6E               	xorlw	110	; case 75
 17937  2389  1903               	skipnz
 17938  238A  2B97               	goto	l9848
 17939  238B  3A31               	xorlw	49	; case 122
 17940  238C  1903               	skipnz
 17941  238D  2B9C               	goto	l9850
 17942  238E  3AEC               	xorlw	236	; case 150
 17943  238F  1903               	skipnz
 17944  2390  2BA1               	goto	l9852
 17945  2391  2BA6               	goto	l1714
 17946  2392                     l9846:	
 17947                           
 17948                           ; Switch size 1, requested type "space"
 17949                           ; Number of cases is 1, Range of values is 128 to 128
 17950                           ; switch strategies available:
 17951                           ; Name         Instructions Cycles
 17952                           ; simple_byte            4     3 (average)
 17953                           ; direct_byte           11     9 (fixed)
 17954                           ; jumptable            263     9 (fixed)
 17955                           ;	Chosen strategy is simple_byte
 17956  2392  0820               	movf	USARTInit@baud_rate^(0+128),w
 17957  2393  3A80               	xorlw	128	; case 128
 17958  2394  1903               	skipnz
 17959  2395  2B79               	goto	l8762
 17960  2396  2BA6               	goto	l1714
 17961  2397                     l9848:	
 17962                           
 17963                           ; Switch size 1, requested type "space"
 17964                           ; Number of cases is 1, Range of values is 0 to 0
 17965                           ; switch strategies available:
 17966                           ; Name         Instructions Cycles
 17967                           ; simple_byte            4     3 (average)
 17968                           ; direct_byte            8     6 (fixed)
 17969                           ; jumptable            260     6 (fixed)
 17970                           ;	Chosen strategy is simple_byte
 17971  2397  0820               	movf	USARTInit@baud_rate^(0+128),w
 17972  2398  3A00               	xorlw	0	; case 0
 17973  2399  1903               	skipnz
 17974  239A  2B7B               	goto	l8764
 17975  239B  2BA6               	goto	l1714
 17976  239C                     l9850:	
 17977                           
 17978                           ; Switch size 1, requested type "space"
 17979                           ; Number of cases is 1, Range of values is 18 to 18
 17980                           ; switch strategies available:
 17981                           ; Name         Instructions Cycles
 17982                           ; simple_byte            4     3 (average)
 17983                           ; direct_byte           11     9 (fixed)
 17984                           ; jumptable            263     9 (fixed)
 17985                           ;	Chosen strategy is simple_byte
 17986  239C  0820               	movf	USARTInit@baud_rate^(0+128),w
 17987  239D  3A12               	xorlw	18	; case 18
 17988  239E  1903               	skipnz
 17989  239F  2B7D               	goto	l8766
 17990  23A0  2BA6               	goto	l1714
 17991  23A1                     l9852:	
 17992                           
 17993                           ; Switch size 1, requested type "space"
 17994                           ; Number of cases is 1, Range of values is 0 to 0
 17995                           ; switch strategies available:
 17996                           ; Name         Instructions Cycles
 17997                           ; simple_byte            4     3 (average)
 17998                           ; direct_byte            8     6 (fixed)
 17999                           ; jumptable            260     6 (fixed)
 18000                           ;	Chosen strategy is simple_byte
 18001  23A1  0820               	movf	USARTInit@baud_rate^(0+128),w
 18002  23A2  3A00               	xorlw	0	; case 0
 18003  23A3  1903               	skipnz
 18004  23A4  2B7F               	goto	l8768
 18005  23A5  2BA6               	goto	l1714
 18006  23A6                     l1714:	
 18007                           
 18008                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18009  23A6  0023               	movlb	3	; select bank3
 18010  23A7  131E               	bcf	30,6	;volatile
 18011                           
 18012                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18013  23A8  169E               	bsf	30,5	;volatile
 18014                           
 18015                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18016  23A9  121E               	bcf	30,4	;volatile
 18017                           
 18018                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18019  23AA  151E               	bsf	30,2	;volatile
 18020                           
 18021                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18022  23AB  179D               	bsf	29,7	;volatile
 18023                           
 18024                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18025  23AC  131D               	bcf	29,6	;volatile
 18026                           
 18027                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18028  23AD  161D               	bsf	29,4	;volatile
 18029                           
 18030                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18031  23AE  119D               	bcf	29,3	;volatile
 18032                           
 18033                           ;usart_pic16.c: 65: RCIE=1;
 18034  23AF  0021               	movlb	1	; select bank1
 18035  23B0  1691               	bsf	17,5	;volatile
 18036                           
 18037                           ;usart_pic16.c: 66: PEIE=1;
 18038  23B1  170B               	bsf	11,6	;volatile
 18039                           
 18040                           ;usart_pic16.c: 68: (GIE = 1);
 18041  23B2  178B               	bsf	11,7	;volatile
 18042  23B3  0008               	return
 18043  23B4                     __end_of_USARTInit:	
 18044                           
 18045                           	psect	text63
 18046  270E                     __ptext63:	
 18047 ;; *************** function _ReadSavedSettings *****************
 18048 ;; Defined at:
 18049 ;;		line 234 in file "user.c"
 18050 ;; Parameters:    Size  Location     Type
 18051 ;;		None
 18052 ;; Auto vars:     Size  Location     Type
 18053 ;;		None
 18054 ;; Return value:  Size  Location     Type
 18055 ;;                  1    wreg      void 
 18056 ;; Registers used:
 18057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18058 ;; Tracked objects:
 18059 ;;		On entry : 0/0
 18060 ;;		On exit  : 0/0
 18061 ;;		Unchanged: 0/0
 18062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18065 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18066 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18067 ;;Total ram usage:        1 bytes
 18068 ;; Hardware stack levels used:    1
 18069 ;; Hardware stack levels required when called:    4
 18070 ;; This function calls:
 18071 ;;		_FLASH_ReadWord
 18072 ;;		_set_leds_bottom
 18073 ;;		_set_leds_top
 18074 ;; This function is called by:
 18075 ;;		_main
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           
 18080                           ;psect for function _ReadSavedSettings
 18081  270E                     _ReadSavedSettings:	
 18082                           
 18083                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18084                           
 18085                           ;incstack = 0
 18086                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18087  270E  3081               	movlw	129
 18088  270F  0021               	movlb	1	; select bank1
 18089  2710  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18090  2711  301F               	movlw	31
 18091  2712  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18092  2713  31AE  26A2  31A7   	fcall	_FLASH_ReadWord
 18093  2716  0021               	movlb	1	; select bank1
 18094  2717  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18095  2718  0020               	movlb	0	; select bank0
 18096  2719  00DB               	movwf	_top_push_state+1
 18097  271A  0021               	movlb	1	; select bank1
 18098  271B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18099  271C  0020               	movlb	0	; select bank0
 18100  271D  00DA               	movwf	_top_push_state
 18101                           
 18102                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18103  271E  3082               	movlw	130
 18104  271F  0021               	movlb	1	; select bank1
 18105  2720  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18106  2721  301F               	movlw	31
 18107  2722  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18108  2723  31AE  26A2  31A7   	fcall	_FLASH_ReadWord
 18109  2726  0021               	movlb	1	; select bank1
 18110  2727  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18111  2728  0020               	movlb	0	; select bank0
 18112  2729  00D7               	movwf	_bottom_push_state+1
 18113  272A  0021               	movlb	1	; select bank1
 18114  272B  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18115  272C  0020               	movlb	0	; select bank0
 18116  272D  00D6               	movwf	_bottom_push_state
 18117                           
 18118                           ;user.c: 239: if (top_push_state > 6) {
 18119  272E  085B               	movf	_top_push_state+1,w
 18120  272F  3A80               	xorlw	128
 18121  2730  0021               	movlb	1	; select bank1
 18122  2731  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18123  2732  3080               	movlw	128
 18124  2733  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18125  2734  1D03               	skipz
 18126  2735  2F39               	goto	u9345
 18127  2736  3007               	movlw	7
 18128  2737  0020               	movlb	0	; select bank0
 18129  2738  025A               	subwf	_top_push_state,w
 18130  2739                     u9345:	
 18131  2739  1C03               	skipc
 18132  273A  2F40               	goto	l635
 18133                           
 18134                           ;user.c: 241: top_push_state = 6;
 18135  273B  3006               	movlw	6
 18136  273C  0020               	movlb	0	; select bank0
 18137  273D  00DA               	movwf	_top_push_state
 18138  273E  3000               	movlw	0
 18139  273F  00DB               	movwf	_top_push_state+1
 18140  2740                     l635:	
 18141                           
 18142                           ;user.c: 242: }
 18143                           ;user.c: 243: if (bottom_push_state > 5) {
 18144  2740  0020               	movlb	0	; select bank0
 18145  2741  0857               	movf	_bottom_push_state+1,w
 18146  2742  3A80               	xorlw	128
 18147  2743  0021               	movlb	1	; select bank1
 18148  2744  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18149  2745  3080               	movlw	128
 18150  2746  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18151  2747  1D03               	skipz
 18152  2748  2F4C               	goto	u9355
 18153  2749  3006               	movlw	6
 18154  274A  0020               	movlb	0	; select bank0
 18155  274B  0256               	subwf	_bottom_push_state,w
 18156  274C                     u9355:	
 18157  274C  1C03               	skipc
 18158  274D  2F53               	goto	l8826
 18159                           
 18160                           ;user.c: 245: bottom_push_state = 1;
 18161  274E  3001               	movlw	1
 18162  274F  0020               	movlb	0	; select bank0
 18163  2750  00D6               	movwf	_bottom_push_state
 18164  2751  3000               	movlw	0
 18165  2752  00D7               	movwf	_bottom_push_state+1
 18166  2753                     l8826:	
 18167                           
 18168                           ;user.c: 246: }
 18169                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18170  2753  0020               	movlb	0	; select bank0
 18171  2754  085F               	movf	_switchBypass_state,w
 18172  2755  1D03               	btfss	3,2
 18173  2756  2F5A               	goto	u9360
 18174  2757  0027               	movlb	7	; select bank7
 18175  2758  148D               	bsf	13,1	;volatile
 18176  2759  2F5C               	goto	l8828
 18177  275A                     u9360:	
 18178  275A  0027               	movlb	7	; select bank7
 18179  275B  108D               	bcf	13,1	;volatile
 18180  275C                     l8828:	
 18181                           
 18182                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18183  275C  0020               	movlb	0	; select bank0
 18184  275D  0C5F               	rrf	_switchBypass_state,w
 18185  275E  0027               	movlb	7	; select bank7
 18186  275F  1C03               	skipc
 18187  2760  110D               	bcf	13,2	;volatile
 18188  2761  1803               	skipnc
 18189  2762  150D               	bsf	13,2	;volatile
 18190                           
 18191                           ;user.c: 251: LATBbits.LATB2 = 0;
 18192  2763  0022               	movlb	2	; select bank2
 18193  2764  110D               	bcf	13,2	;volatile
 18194                           
 18195                           ;user.c: 252: LATBbits.LATB3 = 0;
 18196  2765  118D               	bcf	13,3	;volatile
 18197                           
 18198                           ;user.c: 254: LATBbits.LATB4 = 0;
 18199  2766  120D               	bcf	13,4	;volatile
 18200                           
 18201                           ;user.c: 255: LATBbits.LATB5 = 0;
 18202  2767  128D               	bcf	13,5	;volatile
 18203                           
 18204                           ;user.c: 257: LATBbits.LATB1 = 0;
 18205  2768  108D               	bcf	13,1	;volatile
 18206                           
 18207                           ;user.c: 258: LATBbits.LATB0 = 0;
 18208  2769  100D               	bcf	13,0	;volatile
 18209                           
 18210                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18211  276A  0020               	movlb	0	; select bank0
 18212  276B  085B               	movf	_top_push_state+1,w
 18213  276C  0021               	movlb	1	; select bank1
 18214  276D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18215  276E  0020               	movlb	0	; select bank0
 18216  276F  085A               	movf	_top_push_state,w
 18217  2770  0021               	movlb	1	; select bank1
 18218  2771  00A0               	movwf	set_leds_top@x^(0+128)
 18219  2772  3001               	movlw	1
 18220  2773  00A2               	movwf	set_leds_top@ledState^(0+128)
 18221  2774  3000               	movlw	0
 18222  2775  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18223  2776  31A5  258A  31A7   	fcall	_set_leds_top
 18224                           
 18225                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18226  2779  0020               	movlb	0	; select bank0
 18227  277A  0857               	movf	_bottom_push_state+1,w
 18228  277B  0021               	movlb	1	; select bank1
 18229  277C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18230  277D  0020               	movlb	0	; select bank0
 18231  277E  0856               	movf	_bottom_push_state,w
 18232  277F  0021               	movlb	1	; select bank1
 18233  2780  00A0               	movwf	set_leds_bottom@x^(0+128)
 18234  2781  31A1  2140         	fcall	_set_leds_bottom
 18235  2783  0008               	return
 18236  2784                     __end_of_ReadSavedSettings:	
 18237                           
 18238                           	psect	text64
 18239  258A                     __ptext64:	
 18240 ;; *************** function _set_leds_top *****************
 18241 ;; Defined at:
 18242 ;;		line 16 in file "LEDs.c"
 18243 ;; Parameters:    Size  Location     Type
 18244 ;;  x               2    0[BANK1 ] int 
 18245 ;;  ledState        2    2[BANK1 ] int 
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;		None
 18248 ;; Return value:  Size  Location     Type
 18249 ;;                  1    wreg      void 
 18250 ;; Registers used:
 18251 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18252 ;; Tracked objects:
 18253 ;;		On entry : 0/0
 18254 ;;		On exit  : 0/0
 18255 ;;		Unchanged: 0/0
 18256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18257 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18260 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18261 ;;Total ram usage:        4 bytes
 18262 ;; Hardware stack levels used:    1
 18263 ;; Hardware stack levels required when called:    3
 18264 ;; This function calls:
 18265 ;;		Nothing
 18266 ;; This function is called by:
 18267 ;;		_ReadSavedSettings
 18268 ;;		_ring_tactiles
 18269 ;;		_solidring_tactiles
 18270 ;;		_read_top_tactile
 18271 ;;		_setPresetDisplay
 18272 ;;		_resetRingLEDs
 18273 ;;		_setExpressionDisplay
 18274 ;;		_star_tactiles
 18275 ;; This function uses a non-reentrant model
 18276 ;;
 18277                           
 18278                           
 18279                           ;psect for function _set_leds_top
 18280  258A                     _set_leds_top:	
 18281                           
 18282                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18283                           
 18284                           ;incstack = 0
 18285                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18286  258A  0027               	movlb	7	; select bank7
 18287  258B  100C               	bcf	12,0	;volatile
 18288                           
 18289                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18290  258C  108C               	bcf	12,1	;volatile
 18291                           
 18292                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18293  258D  110C               	bcf	12,2	;volatile
 18294                           
 18295                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18296  258E  118C               	bcf	12,3	;volatile
 18297                           
 18298                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18299  258F  120C               	bcf	12,4	;volatile
 18300                           
 18301                           ;LEDs.c: 22: switch (x) {
 18302  2590  2DC0               	goto	l7744
 18303  2591                     l7732:	
 18304                           ;LEDs.c: 23: case 1:
 18305                           
 18306                           
 18307                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18308  2591  0021               	movlb	1	; select bank1
 18309  2592  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18310  2593  0027               	movlb	7	; select bank7
 18311  2594  1C03               	skipc
 18312  2595  100C               	bcf	12,0	;volatile
 18313  2596  1803               	skipnc
 18314  2597  140C               	bsf	12,0	;volatile
 18315                           
 18316                           ;LEDs.c: 25: break;
 18317  2598  0008               	return
 18318  2599                     l7734:	
 18319                           ;LEDs.c: 26: case 2:
 18320                           
 18321                           
 18322                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18323  2599  0021               	movlb	1	; select bank1
 18324  259A  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18325  259B  0027               	movlb	7	; select bank7
 18326  259C  1C03               	skipc
 18327  259D  108C               	bcf	12,1	;volatile
 18328  259E  1803               	skipnc
 18329  259F  148C               	bsf	12,1	;volatile
 18330                           
 18331                           ;LEDs.c: 28: break;
 18332  25A0  0008               	return
 18333  25A1                     l7736:	
 18334                           ;LEDs.c: 29: case 3:
 18335                           
 18336                           
 18337                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18338  25A1  0021               	movlb	1	; select bank1
 18339  25A2  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18340  25A3  0027               	movlb	7	; select bank7
 18341  25A4  1C03               	skipc
 18342  25A5  110C               	bcf	12,2	;volatile
 18343  25A6  1803               	skipnc
 18344  25A7  150C               	bsf	12,2	;volatile
 18345                           
 18346                           ;LEDs.c: 31: break;
 18347  25A8  0008               	return
 18348  25A9                     l7738:	
 18349                           ;LEDs.c: 32: case 4:
 18350                           
 18351                           
 18352                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18353  25A9  0021               	movlb	1	; select bank1
 18354  25AA  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18355  25AB  0027               	movlb	7	; select bank7
 18356  25AC  1C03               	skipc
 18357  25AD  118C               	bcf	12,3	;volatile
 18358  25AE  1803               	skipnc
 18359  25AF  158C               	bsf	12,3	;volatile
 18360                           
 18361                           ;LEDs.c: 34: break;
 18362  25B0  0008               	return
 18363  25B1                     l7740:	
 18364                           ;LEDs.c: 35: case 5:
 18365                           
 18366                           
 18367                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18368  25B1  0021               	movlb	1	; select bank1
 18369  25B2  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18370  25B3  0027               	movlb	7	; select bank7
 18371  25B4  1C03               	skipc
 18372  25B5  120C               	bcf	12,4	;volatile
 18373  25B6  1803               	skipnc
 18374  25B7  160C               	bsf	12,4	;volatile
 18375                           
 18376                           ;LEDs.c: 39: break;
 18377                           
 18378                           ;LEDs.c: 38: case 6:
 18379                           
 18380                           ;LEDs.c: 37: break;
 18381  25B8  0008               	return
 18382  25B9                     l794:	
 18383                           ;LEDs.c: 40: case 100:
 18384                           
 18385                           
 18386                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18387  25B9  0027               	movlb	7	; select bank7
 18388  25BA  140C               	bsf	12,0	;volatile
 18389                           
 18390                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18391  25BB  148C               	bsf	12,1	;volatile
 18392                           
 18393                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18394  25BC  150C               	bsf	12,2	;volatile
 18395                           
 18396                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18397  25BD  158C               	bsf	12,3	;volatile
 18398                           
 18399                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18400  25BE  160C               	bsf	12,4	;volatile
 18401                           
 18402                           ;LEDs.c: 47: }
 18403                           
 18404                           ;LEDs.c: 46: break;
 18405  25BF  0008               	return
 18406  25C0                     l7744:	
 18407                           
 18408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18409                           ; Switch size 1, requested type "space"
 18410                           ; Number of cases is 1, Range of values is 0 to 0
 18411                           ; switch strategies available:
 18412                           ; Name         Instructions Cycles
 18413                           ; simple_byte            4     3 (average)
 18414                           ; direct_byte            8     6 (fixed)
 18415                           ; jumptable            260     6 (fixed)
 18416                           ;	Chosen strategy is simple_byte
 18417  25C0  0021               	movlb	1	; select bank1
 18418  25C1  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18419  25C2  3A00               	xorlw	0	; case 0
 18420  25C3  1903               	skipnz
 18421  25C4  2DC6               	goto	l9854
 18422  25C5  2DDD               	goto	l795
 18423  25C6                     l9854:	
 18424                           
 18425                           ; Switch size 1, requested type "space"
 18426                           ; Number of cases is 7, Range of values is 1 to 100
 18427                           ; switch strategies available:
 18428                           ; Name         Instructions Cycles
 18429                           ; simple_byte           22    12 (average)
 18430                           ; direct_byte          209     9 (fixed)
 18431                           ; jumptable            263     9 (fixed)
 18432                           ;	Chosen strategy is simple_byte
 18433  25C6  0820               	movf	set_leds_top@x^(0+128),w
 18434  25C7  3A01               	xorlw	1	; case 1
 18435  25C8  1903               	skipnz
 18436  25C9  2D91               	goto	l7732
 18437  25CA  3A03               	xorlw	3	; case 2
 18438  25CB  1903               	skipnz
 18439  25CC  2D99               	goto	l7734
 18440  25CD  3A01               	xorlw	1	; case 3
 18441  25CE  1903               	skipnz
 18442  25CF  2DA1               	goto	l7736
 18443  25D0  3A07               	xorlw	7	; case 4
 18444  25D1  1903               	skipnz
 18445  25D2  2DA9               	goto	l7738
 18446  25D3  3A01               	xorlw	1	; case 5
 18447  25D4  1903               	skipnz
 18448  25D5  2DB1               	goto	l7740
 18449  25D6  3A03               	xorlw	3	; case 6
 18450  25D7  1903               	skipnz
 18451  25D8  2DDD               	goto	l795
 18452  25D9  3A62               	xorlw	98	; case 100
 18453  25DA  1903               	skipnz
 18454  25DB  2DB9               	goto	l794
 18455  25DC  2DDD               	goto	l795
 18456  25DD                     l795:	
 18457  25DD  0008               	return
 18458  25DE                     __end_of_set_leds_top:	
 18459                           
 18460                           	psect	text65
 18461  2140                     __ptext65:	
 18462 ;; *************** function _set_leds_bottom *****************
 18463 ;; Defined at:
 18464 ;;		line 51 in file "LEDs.c"
 18465 ;; Parameters:    Size  Location     Type
 18466 ;;  x               2    0[BANK1 ] int 
 18467 ;; Auto vars:     Size  Location     Type
 18468 ;;		None
 18469 ;; Return value:  Size  Location     Type
 18470 ;;                  1    wreg      void 
 18471 ;; Registers used:
 18472 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18473 ;; Tracked objects:
 18474 ;;		On entry : 0/0
 18475 ;;		On exit  : 0/0
 18476 ;;		Unchanged: 0/0
 18477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18478 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18481 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18482 ;;Total ram usage:        2 bytes
 18483 ;; Hardware stack levels used:    1
 18484 ;; Hardware stack levels required when called:    3
 18485 ;; This function calls:
 18486 ;;		Nothing
 18487 ;; This function is called by:
 18488 ;;		_ReadSavedSettings
 18489 ;;		_ring_tactiles
 18490 ;;		_solidring_tactiles
 18491 ;;		_read_bottom_tactile
 18492 ;;		_setPresetDisplay
 18493 ;;		_resetRingLEDs
 18494 ;;		_setExpressionDisplay
 18495 ;;		_star_tactiles
 18496 ;; This function uses a non-reentrant model
 18497 ;;
 18498                           
 18499                           
 18500                           ;psect for function _set_leds_bottom
 18501  2140                     _set_leds_bottom:	
 18502                           
 18503                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18504                           
 18505                           ;incstack = 0
 18506                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18507  2140  0022               	movlb	2	; select bank2
 18508  2141  100F               	bcf	15,0	;volatile
 18509                           
 18510                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18511  2142  108F               	bcf	15,1	;volatile
 18512                           
 18513                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18514  2143  110F               	bcf	15,2	;volatile
 18515                           
 18516                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18517  2144  118F               	bcf	15,3	;volatile
 18518                           
 18519                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18520  2145  120F               	bcf	15,4	;volatile
 18521                           
 18522                           ;LEDs.c: 57: switch (x) {
 18523  2146  295D               	goto	l7760
 18524  2147                     l799:	
 18525                           ;LEDs.c: 58: case 1:
 18526                           
 18527                           
 18528                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18529  2147  0022               	movlb	2	; select bank2
 18530  2148  140F               	bsf	15,0	;volatile
 18531                           
 18532                           ;LEDs.c: 60: break;
 18533  2149  0008               	return
 18534  214A                     l801:	
 18535                           ;LEDs.c: 61: case 2:
 18536                           
 18537                           
 18538                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18539  214A  0022               	movlb	2	; select bank2
 18540  214B  148F               	bsf	15,1	;volatile
 18541                           
 18542                           ;LEDs.c: 63: break;
 18543  214C  0008               	return
 18544  214D                     l802:	
 18545                           ;LEDs.c: 64: case 3:
 18546                           
 18547                           
 18548                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18549  214D  0022               	movlb	2	; select bank2
 18550  214E  150F               	bsf	15,2	;volatile
 18551                           
 18552                           ;LEDs.c: 66: break;
 18553  214F  0008               	return
 18554  2150                     l803:	
 18555                           ;LEDs.c: 67: case 4:
 18556                           
 18557                           
 18558                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18559  2150  0022               	movlb	2	; select bank2
 18560  2151  158F               	bsf	15,3	;volatile
 18561                           
 18562                           ;LEDs.c: 69: break;
 18563  2152  0008               	return
 18564  2153                     l804:	
 18565                           ;LEDs.c: 70: case 5:
 18566                           
 18567                           
 18568                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18569  2153  0022               	movlb	2	; select bank2
 18570  2154  160F               	bsf	15,4	;volatile
 18571                           
 18572                           ;LEDs.c: 74: break;
 18573                           
 18574                           ;LEDs.c: 73: case 6:
 18575                           
 18576                           ;LEDs.c: 72: break;
 18577  2155  0008               	return
 18578  2156                     l806:	
 18579                           ;LEDs.c: 75: case 100:
 18580                           
 18581                           
 18582                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18583  2156  0022               	movlb	2	; select bank2
 18584  2157  140F               	bsf	15,0	;volatile
 18585                           
 18586                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18587  2158  148F               	bsf	15,1	;volatile
 18588                           
 18589                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18590  2159  150F               	bsf	15,2	;volatile
 18591                           
 18592                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18593  215A  158F               	bsf	15,3	;volatile
 18594                           
 18595                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18596  215B  160F               	bsf	15,4	;volatile
 18597                           
 18598                           ;LEDs.c: 82: }
 18599                           
 18600                           ;LEDs.c: 81: break;
 18601  215C  0008               	return
 18602  215D                     l7760:	
 18603                           
 18604                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18605                           ; Switch size 1, requested type "space"
 18606                           ; Number of cases is 1, Range of values is 0 to 0
 18607                           ; switch strategies available:
 18608                           ; Name         Instructions Cycles
 18609                           ; simple_byte            4     3 (average)
 18610                           ; direct_byte            8     6 (fixed)
 18611                           ; jumptable            260     6 (fixed)
 18612                           ;	Chosen strategy is simple_byte
 18613  215D  0021               	movlb	1	; select bank1
 18614  215E  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18615  215F  3A00               	xorlw	0	; case 0
 18616  2160  1903               	skipnz
 18617  2161  2963               	goto	l9856
 18618  2162  297A               	goto	l807
 18619  2163                     l9856:	
 18620                           
 18621                           ; Switch size 1, requested type "space"
 18622                           ; Number of cases is 7, Range of values is 1 to 100
 18623                           ; switch strategies available:
 18624                           ; Name         Instructions Cycles
 18625                           ; simple_byte           22    12 (average)
 18626                           ; direct_byte          209     9 (fixed)
 18627                           ; jumptable            263     9 (fixed)
 18628                           ;	Chosen strategy is simple_byte
 18629  2163  0820               	movf	set_leds_bottom@x^(0+128),w
 18630  2164  3A01               	xorlw	1	; case 1
 18631  2165  1903               	skipnz
 18632  2166  2947               	goto	l799
 18633  2167  3A03               	xorlw	3	; case 2
 18634  2168  1903               	skipnz
 18635  2169  294A               	goto	l801
 18636  216A  3A01               	xorlw	1	; case 3
 18637  216B  1903               	skipnz
 18638  216C  294D               	goto	l802
 18639  216D  3A07               	xorlw	7	; case 4
 18640  216E  1903               	skipnz
 18641  216F  2950               	goto	l803
 18642  2170  3A01               	xorlw	1	; case 5
 18643  2171  1903               	skipnz
 18644  2172  2953               	goto	l804
 18645  2173  3A03               	xorlw	3	; case 6
 18646  2174  1903               	skipnz
 18647  2175  297A               	goto	l807
 18648  2176  3A62               	xorlw	98	; case 100
 18649  2177  1903               	skipnz
 18650  2178  2956               	goto	l806
 18651  2179  297A               	goto	l807
 18652  217A                     l807:	
 18653  217A  0008               	return
 18654  217B                     __end_of_set_leds_bottom:	
 18655                           
 18656                           	psect	text66
 18657  2EA2                     __ptext66:	
 18658 ;; *************** function _FLASH_ReadWord *****************
 18659 ;; Defined at:
 18660 ;;		line 58 in file "memory.c"
 18661 ;; Parameters:    Size  Location     Type
 18662 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18663 ;; Auto vars:     Size  Location     Type
 18664 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18665 ;; Return value:  Size  Location     Type
 18666 ;;                  2    0[BANK1 ] unsigned int 
 18667 ;; Registers used:
 18668 ;;		wreg, status,2, status,0
 18669 ;; Tracked objects:
 18670 ;;		On entry : 0/0
 18671 ;;		On exit  : 0/0
 18672 ;;		Unchanged: 0/0
 18673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18674 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18675 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18677 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18678 ;;Total ram usage:        3 bytes
 18679 ;; Hardware stack levels used:    1
 18680 ;; Hardware stack levels required when called:    3
 18681 ;; This function calls:
 18682 ;;		Nothing
 18683 ;; This function is called by:
 18684 ;;		_ReadSavedSettings
 18685 ;;		_FLASH_WriteWord
 18686 ;; This function uses a non-reentrant model
 18687 ;;
 18688                           
 18689                           
 18690                           ;psect for function _FLASH_ReadWord
 18691  2EA2                     _FLASH_ReadWord:	
 18692                           
 18693                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18694                           
 18695                           ;incstack = 0
 18696                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18697  2EA2  3000               	movlw	0
 18698  2EA3  1B8B               	btfsc	11,7	;volatile
 18699  2EA4  3001               	movlw	1
 18700  2EA5  0021               	movlb	1	; select bank1
 18701  2EA6  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18702                           
 18703                           ;memory.c: 61: INTCONbits.GIE = 0;
 18704  2EA7  138B               	bcf	11,7	;volatile
 18705                           
 18706                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18707  2EA8  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18708  2EA9  0023               	movlb	3	; select bank3
 18709  2EAA  0091               	movwf	17	;volatile
 18710                           
 18711                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18712  2EAB  0021               	movlb	1	; select bank1
 18713  2EAC  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18714  2EAD  0023               	movlb	3	; select bank3
 18715  2EAE  0092               	movwf	18	;volatile
 18716                           
 18717                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18718  2EAF  1315               	bcf	21,6	;volatile
 18719                           
 18720                           ;memory.c: 66: PMCON1bits.RD = 1;
 18721  2EB0  1415               	bsf	21,0	;volatile
 18722                           
 18723                           ;memory.c: 67: __nop();
 18724  2EB1  0000               	nop
 18725                           
 18726                           ;memory.c: 68: __nop();
 18727  2EB2  0000               	nop
 18728                           
 18729                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18730  2EB3  0021               	movlb	1	; select bank1
 18731  2EB4  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18732  2EB5  1C03               	skipc
 18733  2EB6  138B               	bcf	11,7	;volatile
 18734  2EB7  1803               	skipnc
 18735  2EB8  178B               	bsf	11,7	;volatile
 18736                           
 18737                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18738  2EB9  0023               	movlb	3	; select bank3
 18739  2EBA  0814               	movf	20,w	;volatile
 18740  2EBB  0021               	movlb	1	; select bank1
 18741  2EBC  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18742  2EBD  0023               	movlb	3	; select bank3
 18743  2EBE  0813               	movf	19,w	;volatile
 18744  2EBF  0021               	movlb	1	; select bank1
 18745  2EC0  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18746  2EC1  0008               	return
 18747  2EC2                     __end_of_FLASH_ReadWord:	
 18748                           
 18749                           	psect	text67
 18750  2F27                     __ptext67:	
 18751 ;; *************** function _InitializeTaps *****************
 18752 ;; Defined at:
 18753 ;;		line 228 in file "user.c"
 18754 ;; Parameters:    Size  Location     Type
 18755 ;;		None
 18756 ;; Auto vars:     Size  Location     Type
 18757 ;;  itap            2    1[BANK1 ] int 
 18758 ;; Return value:  Size  Location     Type
 18759 ;;                  1    wreg      void 
 18760 ;; Registers used:
 18761 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18762 ;; Tracked objects:
 18763 ;;		On entry : 0/0
 18764 ;;		On exit  : 0/0
 18765 ;;		Unchanged: 0/0
 18766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18768 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18769 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18770 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18771 ;;Total ram usage:        3 bytes
 18772 ;; Hardware stack levels used:    1
 18773 ;; Hardware stack levels required when called:    3
 18774 ;; This function calls:
 18775 ;;		Nothing
 18776 ;; This function is called by:
 18777 ;;		_main
 18778 ;; This function uses a non-reentrant model
 18779 ;;
 18780                           
 18781                           
 18782                           ;psect for function _InitializeTaps
 18783  2F27                     _InitializeTaps:	
 18784                           
 18785                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18786                           
 18787                           ;incstack = 0
 18788                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18789  2F27  0021               	movlb	1	; select bank1
 18790  2F28  01A1               	clrf	InitializeTaps@itap^(0+128)
 18791  2F29  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18792  2F2A                     L23:	
 18793  2F2A  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18794  2F2B  3A80               	xorlw	128
 18795  2F2C  00A0               	movwf	??_InitializeTaps^(0+128)
 18796  2F2D  3080               	movlw	128
 18797  2F2E  0220               	subwf	??_InitializeTaps^(0+128),w
 18798  2F2F  1D03               	skipz
 18799  2F30  2F33               	goto	u9315
 18800  2F31  300C               	movlw	12
 18801  2F32  0221               	subwf	InitializeTaps@itap^(0+128),w
 18802  2F33                     u9315:	
 18803  2F33  1803               	btfsc	3,0
 18804  2F34  0008               	return
 18805                           
 18806                           ;user.c: 230: tap[itap] = 0;
 18807  2F35  0021               	movlb	1	; select bank1
 18808  2F36  0821               	movf	InitializeTaps@itap^(0+128),w
 18809  2F37  00A0               	movwf	??_InitializeTaps^(0+128)
 18810  2F38  3001               	movlw	1
 18811  2F39                     u9325:	
 18812  2F39  35A0               	lslf	??_InitializeTaps^(0+128),f
 18813  2F3A  3EFF               	addlw	-1
 18814  2F3B  1D03               	skipz
 18815  2F3C  2F39               	goto	u9325
 18816  2F3D  3520               	lslf	??_InitializeTaps^(0+128),w
 18817  2F3E  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18818  2F3F  0086               	movwf	6
 18819  2F40  3002               	movlw	2	; select bank5/6
 18820  2F41  0087               	movwf	7
 18821  2F42  3000               	movlw	0
 18822  2F43  3FC0               	movwi [0]fsr1
 18823  2F44  3000               	movlw	0
 18824  2F45  3FC1               	movwi [1]fsr1
 18825  2F46  3FC2               	movwi [2]fsr1
 18826  2F47  3FC3               	movwi [3]fsr1
 18827  2F48  3001               	movlw	1
 18828  2F49  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18829  2F4A  3000               	movlw	0
 18830  2F4B  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18831  2F4C  2F2A               	goto	L23
 18832  2F4D                     __end_of_InitializeTaps:	
 18833                           
 18834                           	psect	text68
 18835  2006                     __ptext68:	
 18836 ;; *************** function _InitApp *****************
 18837 ;; Defined at:
 18838 ;;		line 23 in file "user.c"
 18839 ;; Parameters:    Size  Location     Type
 18840 ;;		None
 18841 ;; Auto vars:     Size  Location     Type
 18842 ;;		None
 18843 ;; Return value:  Size  Location     Type
 18844 ;;                  1    wreg      void 
 18845 ;; Registers used:
 18846 ;;		wreg, status,2, status,0, pclath, cstack
 18847 ;; Tracked objects:
 18848 ;;		On entry : 0/0
 18849 ;;		On exit  : 0/0
 18850 ;;		Unchanged: 0/0
 18851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18856 ;;Total ram usage:        0 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:    5
 18859 ;; This function calls:
 18860 ;;		_init_adc
 18861 ;;		_init_pwm
 18862 ;; This function is called by:
 18863 ;;		_main
 18864 ;; This function uses a non-reentrant model
 18865 ;;
 18866                           
 18867                           
 18868                           ;psect for function _InitApp
 18869  2006                     _InitApp:	
 18870                           
 18871                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18872                           
 18873                           ;incstack = 0
 18874                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18875  2006  0021               	movlb	1	; select bank1
 18876  2007  100D               	bcf	13,0	;volatile
 18877                           
 18878                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18879  2008  108D               	bcf	13,1	;volatile
 18880                           
 18881                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18882  2009  110D               	bcf	13,2	;volatile
 18883                           
 18884                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18885  200A  118D               	bcf	13,3	;volatile
 18886                           
 18887                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18888  200B  120D               	bcf	13,4	;volatile
 18889                           
 18890                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18891  200C  128D               	bcf	13,5	;volatile
 18892                           
 18893                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18894  200D  140E               	bsf	14,0	;volatile
 18895                           
 18896                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18897  200E  120E               	bcf	14,4	;volatile
 18898                           
 18899                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18900  200F  128E               	bcf	14,5	;volatile
 18901                           
 18902                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18903  2010  100F               	bcf	15,0	;volatile
 18904                           
 18905                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18906  2011  108F               	bcf	15,1	;volatile
 18907                           
 18908                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18909  2012  110F               	bcf	15,2	;volatile
 18910                           
 18911                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18912  2013  118F               	bcf	15,3	;volatile
 18913                           
 18914                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18915  2014  120F               	bcf	15,4	;volatile
 18916                           
 18917                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18918  2015  168F               	bsf	15,5	;volatile
 18919                           
 18920                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18921  2016  170F               	bsf	15,6	;volatile
 18922                           
 18923                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18924  2017  178F               	bsf	15,7	;volatile
 18925                           
 18926                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18927  2018  1410               	bsf	16,0	;volatile
 18928                           
 18929                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18930  2019  1490               	bsf	16,1	;volatile
 18931                           
 18932                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18933  201A  0023               	movlb	3	; select bank3
 18934  201B  1010               	bcf	16,0	;volatile
 18935                           
 18936                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18937  201C  1090               	bcf	16,1	;volatile
 18938                           
 18939                           ;user.c: 53: PORTEbits.RE0 = 0;
 18940  201D  0020               	movlb	0	; select bank0
 18941  201E  1010               	bcf	16,0	;volatile
 18942                           
 18943                           ;user.c: 54: PORTEbits.RE1 = 0;
 18944  201F  1090               	bcf	16,1	;volatile
 18945                           
 18946                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18947  2020  0026               	movlb	6	; select bank6
 18948  2021  100C               	bcf	12,0	;volatile
 18949                           
 18950                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18951  2022  108C               	bcf	12,1	;volatile
 18952                           
 18953                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18954  2023  110C               	bcf	12,2	;volatile
 18955                           
 18956                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18957  2024  118C               	bcf	12,3	;volatile
 18958                           
 18959                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18960  2025  120C               	bcf	12,4	;volatile
 18961                           
 18962                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18963  2026  128C               	bcf	12,5	;volatile
 18964                           
 18965                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18966  2027  170C               	bsf	12,6	;volatile
 18967                           
 18968                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18969  2028  0028               	movlb	8	; select bank8
 18970  2029  130C               	bcf	12,6	;volatile
 18971                           
 18972                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18973  202A  0026               	movlb	6	; select bank6
 18974  202B  108D               	bcf	13,1	;volatile
 18975                           
 18976                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18977  202C  110D               	bcf	13,2	;volatile
 18978                           
 18979                           ;user.c: 68: init_adc();
 18980  202D  31AD  259C  31A0   	fcall	_init_adc
 18981                           
 18982                           ;user.c: 69: init_pwm();
 18983  2030  31A3  232F         	fcall	_init_pwm
 18984                           
 18985                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18986  2032  178B               	bsf	11,7	;volatile
 18987                           
 18988                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18989  2033  168B               	bsf	11,5	;volatile
 18990                           
 18991                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18992  2034  110B               	bcf	11,2	;volatile
 18993  2035  0008               	return
 18994  2036                     __end_of_InitApp:	
 18995                           
 18996                           	psect	text69
 18997  232F                     __ptext69:	
 18998 ;; *************** function _init_pwm *****************
 18999 ;; Defined at:
 19000 ;;		line 129 in file "user.c"
 19001 ;; Parameters:    Size  Location     Type
 19002 ;;		None
 19003 ;; Auto vars:     Size  Location     Type
 19004 ;;		None
 19005 ;; Return value:  Size  Location     Type
 19006 ;;                  1    wreg      void 
 19007 ;; Registers used:
 19008 ;;		wreg, status,2, status,0, pclath, cstack
 19009 ;; Tracked objects:
 19010 ;;		On entry : 0/0
 19011 ;;		On exit  : 0/0
 19012 ;;		Unchanged: 0/0
 19013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19018 ;;Total ram usage:        0 bytes
 19019 ;; Hardware stack levels used:    1
 19020 ;; Hardware stack levels required when called:    4
 19021 ;; This function calls:
 19022 ;;		_init_timer0
 19023 ;;		_init_timer2
 19024 ;; This function is called by:
 19025 ;;		_InitApp
 19026 ;; This function uses a non-reentrant model
 19027 ;;
 19028                           
 19029                           
 19030                           ;psect for function _init_pwm
 19031  232F                     _init_pwm:	
 19032                           
 19033                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19034                           
 19035                           ;incstack = 0
 19036                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19037  232F  0022               	movlb	2	; select bank2
 19038  2330  101D               	bcf	29,0	;volatile
 19039                           
 19040                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19041  2331  0021               	movlb	1	; select bank1
 19042  2332  110E               	bcf	14,2	;volatile
 19043                           
 19044                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19045  2333  108E               	bcf	14,1	;volatile
 19046                           
 19047                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19048  2334  0026               	movlb	6	; select bank6
 19049  2335  100D               	bcf	13,0	;volatile
 19050                           
 19051                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19052  2336  118D               	bcf	13,3	;volatile
 19053                           
 19054                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19055  2337  120D               	bcf	13,4	;volatile
 19056                           
 19057                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19058  2338  0021               	movlb	1	; select bank1
 19059  2339  1310               	bcf	16,6	;volatile
 19060                           
 19061                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19062  233A  1290               	bcf	16,5	;volatile
 19063                           
 19064                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19065  233B  1210               	bcf	16,4	;volatile
 19066                           
 19067                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19068  233C  1190               	bcf	16,3	;volatile
 19069                           
 19070                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19071  233D  1110               	bcf	16,2	;volatile
 19072                           
 19073                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19074  233E  300F               	movlw	15
 19075  233F  0025               	movlb	5	; select bank5
 19076  2340  0493               	iorwf	19,f	;volatile
 19077                           
 19078                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19079  2341  300F               	movlw	15
 19080  2342  049A               	iorwf	26,f	;volatile
 19081                           
 19082                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19083  2343  300F               	movlw	15
 19084  2344  0026               	movlb	6	; select bank6
 19085  2345  0493               	iorwf	19,f	;volatile
 19086                           
 19087                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19088  2346  300F               	movlw	15
 19089  2347  049A               	iorwf	26,f	;volatile
 19090                           
 19091                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19092  2348  300F               	movlw	15
 19093  2349  049E               	iorwf	30,f	;volatile
 19094                           
 19095                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19096  234A  300F               	movlw	15
 19097  234B  002C               	movlb	12	; select bank12
 19098  234C  0493               	iorwf	19,f	;volatile
 19099                           
 19100                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19101  234D  300F               	movlw	15
 19102  234E  0496               	iorwf	22,f	;volatile
 19103                           
 19104                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19105  234F  300F               	movlw	15
 19106  2350  0499               	iorwf	25,f	;volatile
 19107                           
 19108                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19109  2351  300F               	movlw	15
 19110  2352  049C               	iorwf	28,f	;volatile
 19111                           
 19112                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19113  2353  300F               	movlw	15
 19114  2354  049F               	iorwf	31,f	;volatile
 19115                           
 19116                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19117  2355  0025               	movlb	5	; select bank5
 19118  2356  019D               	clrf	29	;volatile
 19119                           
 19120                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19121  2357  019E               	clrf	30	;volatile
 19122                           
 19123                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19124  2358  019F               	clrf	31	;volatile
 19125                           
 19126                           ;user.c: 154: CCPR1 = 50;
 19127  2359  3000               	movlw	0
 19128  235A  0092               	movwf	18	;volatile
 19129  235B  3032               	movlw	50
 19130  235C  0091               	movwf	17	;volatile
 19131                           
 19132                           ;user.c: 155: CCPR2 = 100;
 19133  235D  3000               	movlw	0
 19134  235E  0099               	movwf	25	;volatile
 19135  235F  3064               	movlw	100
 19136  2360  0098               	movwf	24	;volatile
 19137                           
 19138                           ;user.c: 156: CCPR3 = 150;
 19139  2361  3000               	movlw	0
 19140  2362  0026               	movlb	6	; select bank6
 19141  2363  0092               	movwf	18	;volatile
 19142  2364  3096               	movlw	150
 19143  2365  0091               	movwf	17	;volatile
 19144                           
 19145                           ;user.c: 157: CCPR4 = 200;
 19146  2366  3000               	movlw	0
 19147  2367  0099               	movwf	25	;volatile
 19148  2368  30C8               	movlw	200
 19149  2369  0098               	movwf	24	;volatile
 19150                           
 19151                           ;user.c: 158: init_timer2();
 19152  236A  31AD  258A  31A3   	fcall	_init_timer2
 19153                           
 19154                           ;user.c: 159: init_timer0();
 19155  236D  31AD  2583         	fcall	_init_timer0
 19156  236F  0008               	return
 19157  2370                     __end_of_init_pwm:	
 19158                           
 19159                           	psect	text70
 19160  2D8A                     __ptext70:	
 19161 ;; *************** function _init_timer2 *****************
 19162 ;; Defined at:
 19163 ;;		line 162 in file "user.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;		None
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;		None
 19168 ;; Return value:  Size  Location     Type
 19169 ;;                  1    wreg      void 
 19170 ;; Registers used:
 19171 ;;		wreg, status,2, status,0
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19181 ;;Total ram usage:        0 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; Hardware stack levels required when called:    3
 19184 ;; This function calls:
 19185 ;;		Nothing
 19186 ;; This function is called by:
 19187 ;;		_init_pwm
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           
 19192                           ;psect for function _init_timer2
 19193  2D8A                     _init_timer2:	
 19194                           
 19195                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19196                           
 19197                           ;incstack = 0
 19198                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19199  2D8A  3087               	movlw	-121
 19200  2D8B  0020               	movlb	0	; select bank0
 19201  2D8C  059C               	andwf	28,f	;volatile
 19202                           
 19203                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19204  2D8D  30FC               	movlw	-4
 19205  2D8E  059C               	andwf	28,f	;volatile
 19206                           
 19207                           ;user.c: 165: PR2 = 0xFF;
 19208  2D8F  30FF               	movlw	255
 19209  2D90  009B               	movwf	27	;volatile
 19210                           
 19211                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19212  2D91  151C               	bsf	28,2	;volatile
 19213  2D92  0008               	return
 19214  2D93                     __end_of_init_timer2:	
 19215                           
 19216                           	psect	text71
 19217  2D83                     __ptext71:	
 19218 ;; *************** function _init_timer0 *****************
 19219 ;; Defined at:
 19220 ;;		line 169 in file "user.c"
 19221 ;; Parameters:    Size  Location     Type
 19222 ;;		None
 19223 ;; Auto vars:     Size  Location     Type
 19224 ;;		None
 19225 ;; Return value:  Size  Location     Type
 19226 ;;                  1    wreg      void 
 19227 ;; Registers used:
 19228 ;;		None
 19229 ;; Tracked objects:
 19230 ;;		On entry : 0/0
 19231 ;;		On exit  : 0/0
 19232 ;;		Unchanged: 0/0
 19233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19238 ;;Total ram usage:        0 bytes
 19239 ;; Hardware stack levels used:    1
 19240 ;; Hardware stack levels required when called:    3
 19241 ;; This function calls:
 19242 ;;		Nothing
 19243 ;; This function is called by:
 19244 ;;		_init_pwm
 19245 ;; This function uses a non-reentrant model
 19246 ;;
 19247                           
 19248                           
 19249                           ;psect for function _init_timer0
 19250  2D83                     _init_timer0:	
 19251                           
 19252                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19253                           
 19254                           ;incstack = 0
 19255                           ; Regs used in _init_timer0: []
 19256  2D83  0021               	movlb	1	; select bank1
 19257  2D84  1295               	bcf	21,5	;volatile
 19258                           
 19259                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19260  2D85  1195               	bcf	21,3	;volatile
 19261                           
 19262                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19263  2D86  1015               	bcf	21,0	;volatile
 19264                           
 19265                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19266  2D87  1495               	bsf	21,1	;volatile
 19267                           
 19268                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19269  2D88  1115               	bcf	21,2	;volatile
 19270  2D89  0008               	return
 19271  2D8A                     __end_of_init_timer0:	
 19272                           
 19273                           	psect	text72
 19274  2D9C                     __ptext72:	
 19275 ;; *************** function _init_adc *****************
 19276 ;; Defined at:
 19277 ;;		line 115 in file "user.c"
 19278 ;; Parameters:    Size  Location     Type
 19279 ;;		None
 19280 ;; Auto vars:     Size  Location     Type
 19281 ;;		None
 19282 ;; Return value:  Size  Location     Type
 19283 ;;                  1    wreg      void 
 19284 ;; Registers used:
 19285 ;;		wreg, status,2, status,0
 19286 ;; Tracked objects:
 19287 ;;		On entry : 0/0
 19288 ;;		On exit  : 0/0
 19289 ;;		Unchanged: 0/0
 19290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19295 ;;Total ram usage:        0 bytes
 19296 ;; Hardware stack levels used:    1
 19297 ;; Hardware stack levels required when called:    3
 19298 ;; This function calls:
 19299 ;;		Nothing
 19300 ;; This function is called by:
 19301 ;;		_InitApp
 19302 ;; This function uses a non-reentrant model
 19303 ;;
 19304                           
 19305                           
 19306                           ;psect for function _init_adc
 19307  2D9C                     _init_adc:	
 19308                           
 19309                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19310                           
 19311                           ;incstack = 0
 19312                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19313  2D9C  0021               	movlb	1	; select bank1
 19314  2D9D  179E               	bsf	30,7	;volatile
 19315                           
 19316                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19317  2D9E  081E               	movf	30,w	;volatile
 19318  2D9F  398F               	andlw	-113
 19319  2DA0  3860               	iorlw	96
 19320  2DA1  009E               	movwf	30	;volatile
 19321                           
 19322                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19323  2DA2  30FC               	movlw	-4
 19324  2DA3  059E               	andwf	30,f	;volatile
 19325                           
 19326                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19327  2DA4  141D               	bsf	29,0	;volatile
 19328  2DA5  0008               	return
 19329  2DA6                     __end_of_init_adc:	
 19330                           
 19331                           	psect	text73
 19332  2D7F                     __ptext73:	
 19333 ;; *************** function _ConfigureOscillator *****************
 19334 ;; Defined at:
 19335 ;;		line 18 in file "system.c"
 19336 ;; Parameters:    Size  Location     Type
 19337 ;;		None
 19338 ;; Auto vars:     Size  Location     Type
 19339 ;;		None
 19340 ;; Return value:  Size  Location     Type
 19341 ;;                  1    wreg      void 
 19342 ;; Registers used:
 19343 ;;		wreg, status,2, status,0
 19344 ;; Tracked objects:
 19345 ;;		On entry : 0/0
 19346 ;;		On exit  : 0/0
 19347 ;;		Unchanged: 0/0
 19348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19353 ;;Total ram usage:        0 bytes
 19354 ;; Hardware stack levels used:    1
 19355 ;; Hardware stack levels required when called:    3
 19356 ;; This function calls:
 19357 ;;		Nothing
 19358 ;; This function is called by:
 19359 ;;		_main
 19360 ;; This function uses a non-reentrant model
 19361 ;;
 19362                           
 19363                           
 19364                           ;psect for function _ConfigureOscillator
 19365  2D7F                     _ConfigureOscillator:	
 19366                           
 19367                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19368                           
 19369                           ;incstack = 0
 19370                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19371  2D7F  30FC               	movlw	-4
 19372  2D80  0021               	movlb	1	; select bank1
 19373  2D81  0599               	andwf	25,f	;volatile
 19374  2D82  0008               	return
 19375  2D83                     __end_of_ConfigureOscillator:	
 19376                           
 19377                           	psect	intentry
 19378  0004                     __pintentry:	
 19379 ;; *************** function _isr *****************
 19380 ;; Defined at:
 19381 ;;		line 28 in file "interrupts.c"
 19382 ;; Parameters:    Size  Location     Type
 19383 ;;		None
 19384 ;; Auto vars:     Size  Location     Type
 19385 ;;  subDiv          1   13[COMMON] unsigned char 
 19386 ;; Return value:  Size  Location     Type
 19387 ;;                  1    wreg      void 
 19388 ;; Registers used:
 19389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19390 ;; Tracked objects:
 19391 ;;		On entry : 0/0
 19392 ;;		On exit  : 0/0
 19393 ;;		Unchanged: 0/0
 19394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19397 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19398 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19399 ;;Total ram usage:        7 bytes
 19400 ;; Hardware stack levels used:    1
 19401 ;; Hardware stack levels required when called:    2
 19402 ;; This function calls:
 19403 ;;		_modulation
 19404 ;;		i1___awdiv
 19405 ;;		i1_getModulationSubdivision
 19406 ;;		i1_set_leds_top
 19407 ;; This function is called by:
 19408 ;;		Interrupt level 1
 19409 ;; This function uses a non-reentrant model
 19410 ;;
 19411                           
 19412  0004                     _isr:	
 19413                           
 19414                           ;incstack = 0
 19415                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19416  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19417  0005  3180               	pagesel	$
 19418  0006  0020               	movlb	0	; select bank0
 19419  0007  087F               	movf	127,w
 19420  0008  00BF               	movwf	??_isr+5
 19421                           
 19422                           ;interrupts.c: 31: extern char isInitialized;
 19423                           ;interrupts.c: 32: extern volatile long timer;
 19424                           ;interrupts.c: 33: extern volatile long sub_timer;
 19425                           ;interrupts.c: 34: extern volatile long tap_timer;
 19426                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19427                           ;interrupts.c: 36: extern int mod_delay_time;
 19428                           ;interrupts.c: 40: extern int top_push_state;
 19429                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19430                           ;interrupts.c: 42: extern volatile long mod_timer;
 19431                           ;interrupts.c: 43: extern volatile long delay_time;
 19432                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 19433  0009  1D0B               	btfss	11,2	;volatile
 19434  000A  2AD8               	goto	i1l135
 19435                           
 19436                           ;interrupts.c: 47: if (isInitialized == 0) {
 19437  000B  0023               	movlb	3	; select bank3
 19438  000C  083E               	movf	_isInitialized^(0+384),w
 19439  000D  1903               	btfsc	3,2
 19440  000E  2AD7               	goto	i1l7010
 19441                           
 19442                           ;interrupts.c: 52: }
 19443                           ;interrupts.c: 63: if (timer == 0) {
 19444                           
 19445                           ;interrupts.c: 51: return;
 19446                           
 19447                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 19448  000F  0020               	movlb	0	; select bank0
 19449  0010  084B               	movf	_timer+3,w	;volatile
 19450  0011  044A               	iorwf	_timer+2,w	;volatile
 19451  0012  0449               	iorwf	_timer+1,w	;volatile
 19452  0013  0448               	iorwf	_timer,w	;volatile
 19453  0014  1D03               	skipz
 19454  0015  281B               	goto	i1l136
 19455                           
 19456                           ;interrupts.c: 64: tmpModDelay = mod_delay_time;
 19457  0016  0023               	movlb	3	; select bank3
 19458  0017  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19459  0018  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19460  0019  0859               	movf	_mod_delay_time^(0+384),w
 19461  001A  00B8               	movwf	_tmpModDelay^(0+384)
 19462  001B                     i1l136:	
 19463                           
 19464                           ;interrupts.c: 65: }
 19465                           ;interrupts.c: 66: timer = timer + 1;
 19466  001B  3001               	movlw	1
 19467  001C  0020               	movlb	0	; select bank0
 19468  001D  00BA               	movwf	??_isr
 19469  001E  3000               	movlw	0
 19470  001F  00BB               	movwf	??_isr+1
 19471  0020  3000               	movlw	0
 19472  0021  00BC               	movwf	??_isr+2
 19473  0022  3000               	movlw	0
 19474  0023  00BD               	movwf	??_isr+3
 19475  0024  0848               	movf	_timer,w	;volatile
 19476  0025  07BA               	addwf	??_isr,f
 19477  0026  0849               	movf	_timer+1,w	;volatile
 19478  0027  3DBB               	addwfc	??_isr+1,f
 19479  0028  084A               	movf	_timer+2,w	;volatile
 19480  0029  3DBC               	addwfc	??_isr+2,f
 19481  002A  084B               	movf	_timer+3,w	;volatile
 19482  002B  3DBD               	addwfc	??_isr+3,f
 19483  002C  083D               	movf	??_isr+3,w
 19484  002D  00CB               	movwf	_timer+3	;volatile
 19485  002E  083C               	movf	??_isr+2,w
 19486  002F  00CA               	movwf	_timer+2	;volatile
 19487  0030  083B               	movf	??_isr+1,w
 19488  0031  00C9               	movwf	_timer+1	;volatile
 19489  0032  083A               	movf	??_isr,w
 19490  0033  00C8               	movwf	_timer	;volatile
 19491                           
 19492                           ;interrupts.c: 67: sub_timer = sub_timer + 1;
 19493  0034  3001               	movlw	1
 19494  0035  00BA               	movwf	??_isr
 19495  0036  3000               	movlw	0
 19496  0037  00BB               	movwf	??_isr+1
 19497  0038  3000               	movlw	0
 19498  0039  00BC               	movwf	??_isr+2
 19499  003A  3000               	movlw	0
 19500  003B  00BD               	movwf	??_isr+3
 19501  003C  0840               	movf	_sub_timer,w	;volatile
 19502  003D  07BA               	addwf	??_isr,f
 19503  003E  0841               	movf	_sub_timer+1,w	;volatile
 19504  003F  3DBB               	addwfc	??_isr+1,f
 19505  0040  0842               	movf	_sub_timer+2,w	;volatile
 19506  0041  3DBC               	addwfc	??_isr+2,f
 19507  0042  0843               	movf	_sub_timer+3,w	;volatile
 19508  0043  3DBD               	addwfc	??_isr+3,f
 19509  0044  083D               	movf	??_isr+3,w
 19510  0045  00C3               	movwf	_sub_timer+3	;volatile
 19511  0046  083C               	movf	??_isr+2,w
 19512  0047  00C2               	movwf	_sub_timer+2	;volatile
 19513  0048  083B               	movf	??_isr+1,w
 19514  0049  00C1               	movwf	_sub_timer+1	;volatile
 19515  004A  083A               	movf	??_isr,w
 19516  004B  00C0               	movwf	_sub_timer	;volatile
 19517                           
 19518                           ;interrupts.c: 68: tap_timer = tap_timer + 1;
 19519  004C  3001               	movlw	1
 19520  004D  00BA               	movwf	??_isr
 19521  004E  3000               	movlw	0
 19522  004F  00BB               	movwf	??_isr+1
 19523  0050  3000               	movlw	0
 19524  0051  00BC               	movwf	??_isr+2
 19525  0052  3000               	movlw	0
 19526  0053  00BD               	movwf	??_isr+3
 19527  0054  0844               	movf	_tap_timer,w	;volatile
 19528  0055  07BA               	addwf	??_isr,f
 19529  0056  0845               	movf	_tap_timer+1,w	;volatile
 19530  0057  3DBB               	addwfc	??_isr+1,f
 19531  0058  0846               	movf	_tap_timer+2,w	;volatile
 19532  0059  3DBC               	addwfc	??_isr+2,f
 19533  005A  0847               	movf	_tap_timer+3,w	;volatile
 19534  005B  3DBD               	addwfc	??_isr+3,f
 19535  005C  083D               	movf	??_isr+3,w
 19536  005D  00C7               	movwf	_tap_timer+3	;volatile
 19537  005E  083C               	movf	??_isr+2,w
 19538  005F  00C6               	movwf	_tap_timer+2	;volatile
 19539  0060  083B               	movf	??_isr+1,w
 19540  0061  00C5               	movwf	_tap_timer+1	;volatile
 19541  0062  083A               	movf	??_isr,w
 19542  0063  00C4               	movwf	_tap_timer	;volatile
 19543                           
 19544                           ;interrupts.c: 69: mod_timer = mod_timer + 1;
 19545  0064  3001               	movlw	1
 19546  0065  00BA               	movwf	??_isr
 19547  0066  3000               	movlw	0
 19548  0067  00BB               	movwf	??_isr+1
 19549  0068  3000               	movlw	0
 19550  0069  00BC               	movwf	??_isr+2
 19551  006A  3000               	movlw	0
 19552  006B  00BD               	movwf	??_isr+3
 19553  006C  0023               	movlb	3	; select bank3
 19554  006D  0824               	movf	_mod_timer^(0+384),w	;volatile
 19555  006E  0020               	movlb	0	; select bank0
 19556  006F  07BA               	addwf	??_isr,f
 19557  0070  0023               	movlb	3	; select bank3
 19558  0071  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19559  0072  0020               	movlb	0	; select bank0
 19560  0073  3DBB               	addwfc	??_isr+1,f
 19561  0074  0023               	movlb	3	; select bank3
 19562  0075  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19563  0076  0020               	movlb	0	; select bank0
 19564  0077  3DBC               	addwfc	??_isr+2,f
 19565  0078  0023               	movlb	3	; select bank3
 19566  0079  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19567  007A  0020               	movlb	0	; select bank0
 19568  007B  3DBD               	addwfc	??_isr+3,f
 19569  007C  083D               	movf	??_isr+3,w
 19570  007D  0023               	movlb	3	; select bank3
 19571  007E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19572  007F  0020               	movlb	0	; select bank0
 19573  0080  083C               	movf	??_isr+2,w
 19574  0081  0023               	movlb	3	; select bank3
 19575  0082  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19576  0083  0020               	movlb	0	; select bank0
 19577  0084  083B               	movf	??_isr+1,w
 19578  0085  0023               	movlb	3	; select bank3
 19579  0086  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19580  0087  0020               	movlb	0	; select bank0
 19581  0088  083A               	movf	??_isr,w
 19582  0089  0023               	movlb	3	; select bank3
 19583  008A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19584                           
 19585                           ;interrupts.c: 70: double_timer++;
 19586  008B  3001               	movlw	1
 19587  008C  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19588  008D  3000               	movlw	0
 19589  008E  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19590  008F  3000               	movlw	0
 19591  0090  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19592  0091  3000               	movlw	0
 19593  0092  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19594                           
 19595                           ;interrupts.c: 72: char subDiv = getModulationSubdivision();
 19596  0093  31AF  2777  3180   	fcall	i1_getModulationSubdivision
 19597  0096  0870               	movf	?i1_getModulationSubdivision,w
 19598  0097  0020               	movlb	0	; select bank0
 19599  0098  00BA               	movwf	??_isr
 19600  0099  083A               	movf	??_isr,w
 19601  009A  00FD               	movwf	isr@subDiv
 19602                           
 19603                           ;interrupts.c: 77: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 19604  009B  0023               	movlb	3	; select bank3
 19605  009C  0838               	movf	_tmpModDelay^(0+384),w
 19606  009D  0020               	movlb	0	; select bank0
 19607  009E  00BA               	movwf	??_isr
 19608  009F  0023               	movlb	3	; select bank3
 19609  00A0  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19610  00A1  0020               	movlb	0	; select bank0
 19611  00A2  00BB               	movwf	??_isr+1
 19612  00A3  3000               	movlw	0
 19613  00A4  1BBB               	btfsc	??_isr+1,7
 19614  00A5  30FF               	movlw	255
 19615  00A6  00BC               	movwf	??_isr+2
 19616  00A7  00BD               	movwf	??_isr+3
 19617  00A8  0023               	movlb	3	; select bank3
 19618  00A9  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19619  00AA  3A80               	xorlw	128
 19620  00AB  0020               	movlb	0	; select bank0
 19621  00AC  00BE               	movwf	??_isr+4
 19622  00AD  083D               	movf	??_isr+3,w
 19623  00AE  3A80               	xorlw	128
 19624  00AF  023E               	subwf	??_isr+4,w
 19625  00B0  0023               	movlb	3	; select bank3
 19626  00B1  1D03               	skipz
 19627  00B2  28C3               	goto	u674_23
 19628  00B3  0020               	movlb	0	; select bank0
 19629  00B4  083C               	movf	??_isr+2,w
 19630  00B5  0023               	movlb	3	; select bank3
 19631  00B6  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19632  00B7  1D03               	skipz
 19633  00B8  28C3               	goto	u674_23
 19634  00B9  0020               	movlb	0	; select bank0
 19635  00BA  083B               	movf	??_isr+1,w
 19636  00BB  0023               	movlb	3	; select bank3
 19637  00BC  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19638  00BD  1D03               	skipz
 19639  00BE  28C3               	goto	u674_23
 19640  00BF  0020               	movlb	0	; select bank0
 19641  00C0  083A               	movf	??_isr,w
 19642  00C1  0023               	movlb	3	; select bank3
 19643  00C2  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19644  00C3                     u674_23:	
 19645  00C3  1C03               	skipc
 19646  00C4  28EF               	goto	i1l137
 19647  00C5  087D               	movf	isr@subDiv,w
 19648  00C6  0020               	movlb	0	; select bank0
 19649  00C7  00BA               	movwf	??_isr
 19650  00C8  01BB               	clrf	??_isr+1
 19651  00C9  0023               	movlb	3	; select bank3
 19652  00CA  0858               	movf	(_mod_counter+1)^(0+384),w
 19653  00CB  0020               	movlb	0	; select bank0
 19654  00CC  063B               	xorwf	??_isr+1,w
 19655  00CD  1D03               	skipz
 19656  00CE  28D3               	goto	u675_25
 19657  00CF  0023               	movlb	3	; select bank3
 19658  00D0  0857               	movf	_mod_counter^(0+384),w
 19659  00D1  0020               	movlb	0	; select bank0
 19660  00D2  063A               	xorwf	??_isr,w
 19661  00D3                     u675_25:	
 19662  00D3  1D03               	skipz
 19663  00D4  28EF               	goto	i1l137
 19664  00D5  0023               	movlb	3	; select bank3
 19665  00D6  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19666  00D7  0639               	xorwf	(_tmpModDelay+1)^(0+384),w
 19667  00D8  1D03               	skipz
 19668  00D9  28DC               	goto	u676_25
 19669  00DA  0859               	movf	_mod_delay_time^(0+384),w
 19670  00DB  0638               	xorwf	_tmpModDelay^(0+384),w
 19671  00DC                     u676_25:	
 19672  00DC  1D03               	skipz
 19673  00DD  28EF               	goto	i1l137
 19674                           
 19675                           ;interrupts.c: 78: tmpModDelay = (delay_time - sub_timer);
 19676  00DE  0020               	movlb	0	; select bank0
 19677  00DF  0940               	comf	_sub_timer,w	;volatile
 19678  00E0  00BA               	movwf	??_isr
 19679  00E1  0941               	comf	_sub_timer+1,w	;volatile
 19680  00E2  00BB               	movwf	??_isr+1
 19681  00E3  0ABA               	incf	??_isr,f
 19682  00E4  1903               	skipnz
 19683  00E5  0ABB               	incf	??_isr+1,f
 19684  00E6  0852               	movf	_delay_time,w	;volatile
 19685  00E7  073A               	addwf	??_isr,w
 19686  00E8  0023               	movlb	3	; select bank3
 19687  00E9  00B8               	movwf	_tmpModDelay^(0+384)
 19688  00EA  0020               	movlb	0	; select bank0
 19689  00EB  0853               	movf	_delay_time+1,w	;volatile
 19690  00EC  3D3B               	addwfc	??_isr+1,w
 19691  00ED  0023               	movlb	3	; select bank3
 19692  00EE  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19693  00EF                     i1l137:	
 19694                           
 19695                           ;interrupts.c: 79: }
 19696                           ;interrupts.c: 81: if (longBypass_start == 1) {
 19697  00EF  0022               	movlb	2	; select bank2
 19698  00F0  036A               	decf	_longBypass_start^(0+256),w
 19699  00F1  1D03               	btfss	3,2
 19700  00F2  290A               	goto	i1l6914
 19701                           
 19702                           ;interrupts.c: 82: longBypass_timer++;
 19703  00F3  3001               	movlw	1
 19704  00F4  0023               	movlb	3	; select bank3
 19705  00F5  07B2               	addwf	_longBypass_timer^(0+384),f	;volatile
 19706  00F6  3000               	movlw	0
 19707  00F7  3DB3               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19708                           
 19709                           ;interrupts.c: 83: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19710  00F8  0833               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19711  00F9  0020               	movlb	0	; select bank0
 19712  00FA  0259               	subwf	_long_press_limit+1,w
 19713  00FB  1D03               	skipz
 19714  00FC  2901               	goto	u678_25
 19715  00FD  0023               	movlb	3	; select bank3
 19716  00FE  0832               	movf	_longBypass_timer^(0+384),w	;volatile
 19717  00FF  0020               	movlb	0	; select bank0
 19718  0100  0258               	subwf	_long_press_limit,w
 19719  0101                     u678_25:	
 19720  0101  1803               	skipnc
 19721  0102  290A               	goto	i1l6914
 19722  0103  0859               	movf	_long_press_limit+1,w
 19723  0104  0023               	movlb	3	; select bank3
 19724  0105  00B3               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19725  0106  0020               	movlb	0	; select bank0
 19726  0107  0858               	movf	_long_press_limit,w
 19727  0108  0023               	movlb	3	; select bank3
 19728  0109  00B2               	movwf	_longBypass_timer^(0+384)	;volatile
 19729  010A                     i1l6914:	
 19730                           
 19731                           ;interrupts.c: 84: }
 19732                           ;interrupts.c: 85: if (longTap_start == 1) {
 19733  010A  0022               	movlb	2	; select bank2
 19734  010B  036B               	decf	_longTap_start^(0+256),w
 19735  010C  1D03               	btfss	3,2
 19736  010D  2925               	goto	i1l6920
 19737                           
 19738                           ;interrupts.c: 86: longTap_timer++;
 19739  010E  3001               	movlw	1
 19740  010F  0023               	movlb	3	; select bank3
 19741  0110  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 19742  0111  3000               	movlw	0
 19743  0112  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19744                           
 19745                           ;interrupts.c: 87: if (longTap_timer > long_press_limit) {
 19746  0113  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19747  0114  0020               	movlb	0	; select bank0
 19748  0115  0259               	subwf	_long_press_limit+1,w
 19749  0116  1D03               	skipz
 19750  0117  291C               	goto	u680_25
 19751  0118  0023               	movlb	3	; select bank3
 19752  0119  0834               	movf	_longTap_timer^(0+384),w	;volatile
 19753  011A  0020               	movlb	0	; select bank0
 19754  011B  0258               	subwf	_long_press_limit,w
 19755  011C                     u680_25:	
 19756  011C  1803               	skipnc
 19757  011D  2925               	goto	i1l6920
 19758                           
 19759                           ;interrupts.c: 88: longTap_timer = long_press_limit;
 19760  011E  0859               	movf	_long_press_limit+1,w
 19761  011F  0023               	movlb	3	; select bank3
 19762  0120  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19763  0121  0020               	movlb	0	; select bank0
 19764  0122  0858               	movf	_long_press_limit,w
 19765  0123  0023               	movlb	3	; select bank3
 19766  0124  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 19767  0125                     i1l6920:	
 19768                           
 19769                           ;interrupts.c: 89: }
 19770                           ;interrupts.c: 90: }
 19771                           ;interrupts.c: 92: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19772  0125  0020               	movlb	0	; select bank0
 19773  0126  085D               	movf	_longTap_state,w	;volatile
 19774  0127  1D03               	btfss	3,2
 19775  0128  2985               	goto	i1l6946
 19776  0129  084E               	movf	_doubleTap_state,w	;volatile
 19777  012A  1D03               	btfss	3,2
 19778  012B  2985               	goto	i1l6946
 19779  012C  0851               	movf	_presetSaveMode,w
 19780  012D  1D03               	btfss	3,2
 19781  012E  2985               	goto	i1l6946
 19782                           
 19783                           ;interrupts.c: 94: if (timer >= baseline_mod_time) {
 19784  012F  084B               	movf	_timer+3,w	;volatile
 19785  0130  3A80               	xorlw	128
 19786  0131  00BA               	movwf	??_isr
 19787  0132  0023               	movlb	3	; select bank3
 19788  0133  084A               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19789  0134  3A80               	xorlw	128
 19790  0135  0020               	movlb	0	; select bank0
 19791  0136  023A               	subwf	??_isr,w
 19792  0137  1D03               	skipz
 19793  0138  2949               	goto	u684_23
 19794  0139  0023               	movlb	3	; select bank3
 19795  013A  0849               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19796  013B  0020               	movlb	0	; select bank0
 19797  013C  024A               	subwf	_timer+2,w	;volatile
 19798  013D  1D03               	skipz
 19799  013E  2949               	goto	u684_23
 19800  013F  0023               	movlb	3	; select bank3
 19801  0140  0848               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19802  0141  0020               	movlb	0	; select bank0
 19803  0142  0249               	subwf	_timer+1,w	;volatile
 19804  0143  1D03               	skipz
 19805  0144  2949               	goto	u684_23
 19806  0145  0023               	movlb	3	; select bank3
 19807  0146  0847               	movf	_baseline_mod_time^(0+384),w	;volatile
 19808  0147  0020               	movlb	0	; select bank0
 19809  0148  0248               	subwf	_timer,w	;volatile
 19810  0149                     u684_23:	
 19811  0149  1C03               	skipc
 19812  014A  2973               	goto	i1l6942
 19813                           
 19814                           ;interrupts.c: 97: LATBbits.LATB4 = 1;
 19815  014B  0022               	movlb	2	; select bank2
 19816  014C  160D               	bsf	13,4	;volatile
 19817                           
 19818                           ;interrupts.c: 99: timer = 0;
 19819  014D  3000               	movlw	0
 19820  014E  0020               	movlb	0	; select bank0
 19821  014F  00CB               	movwf	_timer+3	;volatile
 19822  0150  3000               	movlw	0
 19823  0151  00CA               	movwf	_timer+2	;volatile
 19824  0152  3000               	movlw	0
 19825  0153  00C9               	movwf	_timer+1	;volatile
 19826  0154  3000               	movlw	0
 19827  0155  00C8               	movwf	_timer	;volatile
 19828                           
 19829                           ;interrupts.c: 101: if (modulation_changed == 1) {
 19830  0156  0023               	movlb	3	; select bank3
 19831  0157  0342               	decf	_modulation_changed^(0+384),w
 19832  0158  1D03               	btfss	3,2
 19833  0159  2973               	goto	i1l6942
 19834                           
 19835                           ;interrupts.c: 104: modulation_changed = 0;
 19836  015A  01C2               	clrf	_modulation_changed^(0+384)
 19837                           
 19838                           ;interrupts.c: 105: mod_time_changed = 0;
 19839  015B  01E4               	clrf	_mod_time_changed^(0+384)
 19840                           
 19841                           ;interrupts.c: 106: sub_timer = delay_time;
 19842  015C  0020               	movlb	0	; select bank0
 19843  015D  0855               	movf	_delay_time+3,w	;volatile
 19844  015E  00C3               	movwf	_sub_timer+3	;volatile
 19845  015F  0854               	movf	_delay_time+2,w	;volatile
 19846  0160  00C2               	movwf	_sub_timer+2	;volatile
 19847  0161  0853               	movf	_delay_time+1,w	;volatile
 19848  0162  00C1               	movwf	_sub_timer+1	;volatile
 19849  0163  0852               	movf	_delay_time,w	;volatile
 19850  0164  00C0               	movwf	_sub_timer	;volatile
 19851                           
 19852                           ;interrupts.c: 107: tmpModDelay = mod_delay_time;
 19853  0165  0023               	movlb	3	; select bank3
 19854  0166  085A               	movf	(_mod_delay_time+1)^(0+384),w
 19855  0167  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 19856  0168  0859               	movf	_mod_delay_time^(0+384),w
 19857  0169  00B8               	movwf	_tmpModDelay^(0+384)
 19858                           
 19859                           ;interrupts.c: 108: mod_timer = tmpModDelay;
 19860  016A  0838               	movf	_tmpModDelay^(0+384),w
 19861  016B  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19862  016C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 19863  016D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19864  016E  0D89               	rlf	9,f
 19865  016F  3B89               	subwfb	9,f
 19866  0170  0989               	comf	9,f
 19867  0171  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19868  0172  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19869  0173                     i1l6942:	
 19870                           
 19871                           ;interrupts.c: 116: }
 19872                           ;interrupts.c: 117: }
 19873                           ;interrupts.c: 119: if (timer >= 30) {
 19874  0173  0020               	movlb	0	; select bank0
 19875  0174  1BCB               	btfsc	_timer+3,7	;volatile
 19876  0175  2985               	goto	i1l6946
 19877  0176  084B               	movf	_timer+3,w	;volatile
 19878  0177  1D03               	btfss	3,2
 19879  0178  2983               	goto	i1l6944
 19880  0179  084A               	movf	_timer+2,w	;volatile
 19881  017A  1D03               	btfss	3,2
 19882  017B  2983               	goto	i1l6944
 19883  017C  0849               	movf	_timer+1,w	;volatile
 19884  017D  1D03               	btfss	3,2
 19885  017E  2983               	goto	i1l6944
 19886  017F  301E               	movlw	30
 19887  0180  0248               	subwf	_timer,w	;volatile
 19888  0181  1C03               	btfss	3,0
 19889  0182  2985               	goto	i1l6946
 19890  0183                     i1l6944:	
 19891                           
 19892                           ;interrupts.c: 121: LATBbits.LATB4 = 0;
 19893  0183  0022               	movlb	2	; select bank2
 19894  0184  120D               	bcf	13,4	;volatile
 19895  0185                     i1l6946:	
 19896                           
 19897                           ;interrupts.c: 123: }
 19898                           ;interrupts.c: 124: }
 19899                           ;interrupts.c: 133: if (presetSaveMode < 1 && mode2_state == 0) {
 19900  0185  0020               	movlb	0	; select bank0
 19901  0186  0851               	movf	_presetSaveMode,w
 19902  0187  1D03               	btfss	3,2
 19903  0188  29D7               	goto	i1l6964
 19904  0189  0850               	movf	_mode2_state,w
 19905  018A  1D03               	btfss	3,2
 19906  018B  29D7               	goto	i1l6964
 19907                           
 19908                           ;interrupts.c: 134: if (sub_timer >= delay_time ) {
 19909  018C  0843               	movf	_sub_timer+3,w	;volatile
 19910  018D  3A80               	xorlw	128
 19911  018E  00BA               	movwf	??_isr
 19912  018F  0855               	movf	_delay_time+3,w	;volatile
 19913  0190  3A80               	xorlw	128
 19914  0191  023A               	subwf	??_isr,w
 19915  0192  1D03               	skipz
 19916  0193  299E               	goto	u689_23
 19917  0194  0854               	movf	_delay_time+2,w	;volatile
 19918  0195  0242               	subwf	_sub_timer+2,w	;volatile
 19919  0196  1D03               	skipz
 19920  0197  299E               	goto	u689_23
 19921  0198  0853               	movf	_delay_time+1,w	;volatile
 19922  0199  0241               	subwf	_sub_timer+1,w	;volatile
 19923  019A  1D03               	skipz
 19924  019B  299E               	goto	u689_23
 19925  019C  0852               	movf	_delay_time,w	;volatile
 19926  019D  0240               	subwf	_sub_timer,w	;volatile
 19927  019E                     u689_23:	
 19928  019E  1C03               	skipc
 19929  019F  29B9               	goto	i1l6958
 19930                           
 19931                           ;interrupts.c: 135: if (suspend_blink == 0) {
 19932  01A0  0022               	movlb	2	; select bank2
 19933  01A1  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19934  01A2  1D03               	btfss	3,2
 19935  01A3  29B0               	goto	i1l6956
 19936                           
 19937                           ;interrupts.c: 136: set_leds_top(top_push_state, 1);
 19938  01A4  0020               	movlb	0	; select bank0
 19939  01A5  085B               	movf	_top_push_state+1,w
 19940  01A6  00F1               	movwf	i1set_leds_top@x+1
 19941  01A7  085A               	movf	_top_push_state,w
 19942  01A8  00F0               	movwf	i1set_leds_top@x
 19943  01A9  3001               	movlw	1
 19944  01AA  00F2               	movwf	i1set_leds_top@ledState
 19945  01AB  3000               	movlw	0
 19946  01AC  00F3               	movwf	i1set_leds_top@ledState+1
 19947  01AD  31A3  23B4  3180   	fcall	i1_set_leds_top
 19948  01B0                     i1l6956:	
 19949                           
 19950                           ;interrupts.c: 137: }
 19951                           ;interrupts.c: 139: sub_timer = 0;
 19952  01B0  3000               	movlw	0
 19953  01B1  0020               	movlb	0	; select bank0
 19954  01B2  00C3               	movwf	_sub_timer+3	;volatile
 19955  01B3  3000               	movlw	0
 19956  01B4  00C2               	movwf	_sub_timer+2	;volatile
 19957  01B5  3000               	movlw	0
 19958  01B6  00C1               	movwf	_sub_timer+1	;volatile
 19959  01B7  3000               	movlw	0
 19960  01B8  00C0               	movwf	_sub_timer	;volatile
 19961  01B9                     i1l6958:	
 19962                           
 19963                           ;interrupts.c: 140: }
 19964                           ;interrupts.c: 142: if (sub_timer >= 20) {
 19965  01B9  1BC3               	btfsc	_sub_timer+3,7	;volatile
 19966  01BA  29D7               	goto	i1l6964
 19967  01BB  0843               	movf	_sub_timer+3,w	;volatile
 19968  01BC  1D03               	btfss	3,2
 19969  01BD  29C8               	goto	i1l6960
 19970  01BE  0842               	movf	_sub_timer+2,w	;volatile
 19971  01BF  1D03               	btfss	3,2
 19972  01C0  29C8               	goto	i1l6960
 19973  01C1  0841               	movf	_sub_timer+1,w	;volatile
 19974  01C2  1D03               	btfss	3,2
 19975  01C3  29C8               	goto	i1l6960
 19976  01C4  3014               	movlw	20
 19977  01C5  0240               	subwf	_sub_timer,w	;volatile
 19978  01C6  1C03               	btfss	3,0
 19979  01C7  29D7               	goto	i1l6964
 19980  01C8                     i1l6960:	
 19981                           
 19982                           ;interrupts.c: 143: if (suspend_blink == 0) {
 19983  01C8  0022               	movlb	2	; select bank2
 19984  01C9  086D               	movf	_suspend_blink^(0+256),w	;volatile
 19985  01CA  1D03               	btfss	3,2
 19986  01CB  29D7               	goto	i1l6964
 19987                           
 19988                           ;interrupts.c: 144: set_leds_top(top_push_state, 0);
 19989  01CC  0020               	movlb	0	; select bank0
 19990  01CD  085B               	movf	_top_push_state+1,w
 19991  01CE  00F1               	movwf	i1set_leds_top@x+1
 19992  01CF  085A               	movf	_top_push_state,w
 19993  01D0  00F0               	movwf	i1set_leds_top@x
 19994  01D1  3000               	movlw	0
 19995  01D2  00F2               	movwf	i1set_leds_top@ledState
 19996  01D3  00F3               	movwf	i1set_leds_top@ledState+1
 19997  01D4  31A3  23B4  3180   	fcall	i1_set_leds_top
 19998  01D7                     i1l6964:	
 19999                           
 20000                           ;interrupts.c: 145: }
 20001                           ;interrupts.c: 146: }
 20002                           ;interrupts.c: 147: }
 20003                           ;interrupts.c: 152: if (presetSaveMode == 1) {
 20004  01D7  0020               	movlb	0	; select bank0
 20005  01D8  0351               	decf	_presetSaveMode,w
 20006  01D9  1D03               	btfss	3,2
 20007  01DA  2A07               	goto	i1l6976
 20008                           
 20009                           ;interrupts.c: 153: if (double_timer >= 250) {
 20010  01DB  0023               	movlb	3	; select bank3
 20011  01DC  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20012  01DD  29F6               	goto	i1l6972
 20013  01DE  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20014  01DF  1D03               	btfss	3,2
 20015  01E0  29EB               	goto	i1l6968
 20016  01E1  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20017  01E2  1D03               	btfss	3,2
 20018  01E3  29EB               	goto	i1l6968
 20019  01E4  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20020  01E5  1D03               	btfss	3,2
 20021  01E6  29EB               	goto	i1l6968
 20022  01E7  30FA               	movlw	250
 20023  01E8  0220               	subwf	_double_timer^(0+384),w	;volatile
 20024  01E9  1C03               	btfss	3,0
 20025  01EA  29F6               	goto	i1l6972
 20026  01EB                     i1l6968:	
 20027                           
 20028                           ;interrupts.c: 154: LATBbits.LATB0 = 1;
 20029  01EB  0022               	movlb	2	; select bank2
 20030  01EC  140D               	bsf	13,0	;volatile
 20031                           
 20032                           ;interrupts.c: 155: double_timer = 0;
 20033  01ED  3000               	movlw	0
 20034  01EE  0023               	movlb	3	; select bank3
 20035  01EF  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 20036  01F0  3000               	movlw	0
 20037  01F1  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 20038  01F2  3000               	movlw	0
 20039  01F3  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 20040  01F4  3000               	movlw	0
 20041  01F5  00A0               	movwf	_double_timer^(0+384)	;volatile
 20042  01F6                     i1l6972:	
 20043                           
 20044                           ;interrupts.c: 156: }
 20045                           ;interrupts.c: 157: if (double_timer >= 30) {
 20046  01F6  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 20047  01F7  2A07               	goto	i1l6976
 20048  01F8  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 20049  01F9  1D03               	btfss	3,2
 20050  01FA  2A05               	goto	i1l6974
 20051  01FB  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 20052  01FC  1D03               	btfss	3,2
 20053  01FD  2A05               	goto	i1l6974
 20054  01FE  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 20055  01FF  1D03               	btfss	3,2
 20056  0200  2A05               	goto	i1l6974
 20057  0201  301E               	movlw	30
 20058  0202  0220               	subwf	_double_timer^(0+384),w	;volatile
 20059  0203  1C03               	btfss	3,0
 20060  0204  2A07               	goto	i1l6976
 20061  0205                     i1l6974:	
 20062                           
 20063                           ;interrupts.c: 158: LATBbits.LATB0 = 0;
 20064  0205  0022               	movlb	2	; select bank2
 20065  0206  100D               	bcf	13,0	;volatile
 20066  0207                     i1l6976:	
 20067                           
 20068                           ;interrupts.c: 159: }
 20069                           ;interrupts.c: 160: }
 20070                           ;interrupts.c: 179: if (mod_timer >= tmpModDelay) {
 20071  0207  0023               	movlb	3	; select bank3
 20072  0208  0838               	movf	_tmpModDelay^(0+384),w
 20073  0209  0020               	movlb	0	; select bank0
 20074  020A  00BA               	movwf	??_isr
 20075  020B  0023               	movlb	3	; select bank3
 20076  020C  0839               	movf	(_tmpModDelay+1)^(0+384),w
 20077  020D  0020               	movlb	0	; select bank0
 20078  020E  00BB               	movwf	??_isr+1
 20079  020F  3000               	movlw	0
 20080  0210  1BBB               	btfsc	??_isr+1,7
 20081  0211  30FF               	movlw	255
 20082  0212  00BC               	movwf	??_isr+2
 20083  0213  00BD               	movwf	??_isr+3
 20084  0214  0023               	movlb	3	; select bank3
 20085  0215  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20086  0216  3A80               	xorlw	128
 20087  0217  0020               	movlb	0	; select bank0
 20088  0218  00BE               	movwf	??_isr+4
 20089  0219  083D               	movf	??_isr+3,w
 20090  021A  3A80               	xorlw	128
 20091  021B  023E               	subwf	??_isr+4,w
 20092  021C  0023               	movlb	3	; select bank3
 20093  021D  1D03               	skipz
 20094  021E  2A2F               	goto	u696_23
 20095  021F  0020               	movlb	0	; select bank0
 20096  0220  083C               	movf	??_isr+2,w
 20097  0221  0023               	movlb	3	; select bank3
 20098  0222  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20099  0223  1D03               	skipz
 20100  0224  2A2F               	goto	u696_23
 20101  0225  0020               	movlb	0	; select bank0
 20102  0226  083B               	movf	??_isr+1,w
 20103  0227  0023               	movlb	3	; select bank3
 20104  0228  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20105  0229  1D03               	skipz
 20106  022A  2A2F               	goto	u696_23
 20107  022B  0020               	movlb	0	; select bank0
 20108  022C  083A               	movf	??_isr,w
 20109  022D  0023               	movlb	3	; select bank3
 20110  022E  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20111  022F                     u696_23:	
 20112  022F  1C03               	skipc
 20113  0230  2A9F               	goto	i1l6992
 20114                           
 20115                           ;interrupts.c: 180: mod_timer = 0;
 20116  0231  3000               	movlw	0
 20117  0232  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20118  0233  3000               	movlw	0
 20119  0234  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20120  0235  3000               	movlw	0
 20121  0236  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20122  0237  3000               	movlw	0
 20123  0238  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20124                           
 20125                           ;interrupts.c: 182: if (mod_counter >= subDiv) {
 20126  0239  0858               	movf	(_mod_counter+1)^(0+384),w
 20127  023A  3A80               	xorlw	128
 20128  023B  0020               	movlb	0	; select bank0
 20129  023C  00BA               	movwf	??_isr
 20130  023D  3080               	movlw	128
 20131  023E  023A               	subwf	??_isr,w
 20132  023F  1D03               	skipz
 20133  0240  2A44               	goto	u697_25
 20134  0241  087D               	movf	isr@subDiv,w
 20135  0242  0023               	movlb	3	; select bank3
 20136  0243  0257               	subwf	_mod_counter^(0+384),w
 20137  0244                     u697_25:	
 20138  0244  1C03               	skipc
 20139  0245  2A4D               	goto	i1l6984
 20140                           
 20141                           ;interrupts.c: 183: mod_counter = 0;
 20142  0246  0023               	movlb	3	; select bank3
 20143  0247  01D7               	clrf	_mod_counter^(0+384)
 20144  0248  01D8               	clrf	(_mod_counter+1)^(0+384)
 20145                           
 20146                           ;interrupts.c: 184: tmpModDelay = mod_delay_time;
 20147  0249  085A               	movf	(_mod_delay_time+1)^(0+384),w
 20148  024A  00B9               	movwf	(_tmpModDelay+1)^(0+384)
 20149  024B  0859               	movf	_mod_delay_time^(0+384),w
 20150  024C  00B8               	movwf	_tmpModDelay^(0+384)
 20151  024D                     i1l6984:	
 20152                           
 20153                           ;interrupts.c: 188: }
 20154                           ;interrupts.c: 192: mod_value = modArray[mod_counter];
 20155  024D  0023               	movlb	3	; select bank3
 20156  024E  0858               	movf	(_mod_counter+1)^(0+384),w
 20157  024F  0020               	movlb	0	; select bank0
 20158  0250  00BB               	movwf	??_isr+1
 20159  0251  0023               	movlb	3	; select bank3
 20160  0252  0857               	movf	_mod_counter^(0+384),w
 20161  0253  0020               	movlb	0	; select bank0
 20162  0254  00BA               	movwf	??_isr
 20163  0255  35BA               	lslf	??_isr,f
 20164  0256  0DBB               	rlf	??_isr+1,f
 20165  0257  308A               	movlw	138
 20166  0258  00BC               	movwf	??_isr+2
 20167  0259  3023               	movlw	35
 20168  025A  00BD               	movwf	??_isr+3
 20169  025B  083A               	movf	??_isr,w
 20170  025C  073C               	addwf	??_isr+2,w
 20171  025D  0086               	movwf	6
 20172  025E  083B               	movf	??_isr+1,w
 20173  025F  3D3D               	addwfc	??_isr+3,w
 20174  0260  0087               	movwf	7
 20175  0261  3F40               	moviw [0]fsr1
 20176  0262  0024               	movlb	4	; select bank4
 20177  0263  00CF               	movwf	_mod_value^(0+512)
 20178  0264  3F41               	moviw [1]fsr1
 20179  0265  00D0               	movwf	(_mod_value+1)^(0+512)
 20180                           
 20181                           ;interrupts.c: 199: mod_value = modulation(mod_value, adjusted_pot_value);
 20182  0266  084F               	movf	_mod_value^(0+512),w
 20183  0267  0020               	movlb	0	; select bank0
 20184  0268  00AE               	movwf	modulation@x
 20185  0269  0024               	movlb	4	; select bank4
 20186  026A  0850               	movf	(_mod_value+1)^(0+512),w
 20187  026B  0020               	movlb	0	; select bank0
 20188  026C  00AF               	movwf	modulation@x+1
 20189  026D  0D89               	rlf	9,f
 20190  026E  3B89               	subwfb	9,f
 20191  026F  0989               	comf	9,f
 20192  0270  00B0               	movwf	modulation@x+2
 20193  0271  00B1               	movwf	modulation@x+3
 20194  0272  0024               	movlb	4	; select bank4
 20195  0273  0841               	movf	_adjusted_pot_value^(0+512),w
 20196  0274  0020               	movlb	0	; select bank0
 20197  0275  00B2               	movwf	modulation@y
 20198  0276  0024               	movlb	4	; select bank4
 20199  0277  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20200  0278  0020               	movlb	0	; select bank0
 20201  0279  00B3               	movwf	modulation@y+1
 20202  027A  0D89               	rlf	9,f
 20203  027B  3B89               	subwfb	9,f
 20204  027C  0989               	comf	9,f
 20205  027D  00B4               	movwf	modulation@y+2
 20206  027E  00B5               	movwf	modulation@y+3
 20207  027F  31A2  22EE  3180   	fcall	_modulation
 20208  0282  0020               	movlb	0	; select bank0
 20209  0283  082F               	movf	?_modulation+1,w
 20210  0284  0024               	movlb	4	; select bank4
 20211  0285  00D0               	movwf	(_mod_value+1)^(0+512)
 20212  0286  0020               	movlb	0	; select bank0
 20213  0287  082E               	movf	?_modulation,w
 20214  0288  0024               	movlb	4	; select bank4
 20215  0289  00CF               	movwf	_mod_value^(0+512)
 20216                           
 20217                           ;interrupts.c: 200: CCPR3 = mod_value / 2;
 20218  028A  3002               	movlw	2
 20219  028B  00F0               	movwf	i1___awdiv@divisor
 20220  028C  3000               	movlw	0
 20221  028D  00F1               	movwf	i1___awdiv@divisor+1
 20222  028E  0850               	movf	(_mod_value+1)^(0+512),w
 20223  028F  00F3               	movwf	i1___awdiv@dividend+1
 20224  0290  084F               	movf	_mod_value^(0+512),w
 20225  0291  00F2               	movwf	i1___awdiv@dividend
 20226  0292  31A4  2494  3180   	fcall	i1___awdiv
 20227  0295  0871               	movf	?i1___awdiv+1,w
 20228  0296  0026               	movlb	6	; select bank6
 20229  0297  0092               	movwf	18	;volatile
 20230  0298  0870               	movf	?i1___awdiv,w
 20231  0299  0091               	movwf	17	;volatile
 20232                           
 20233                           ;interrupts.c: 201: mod_counter++;
 20234  029A  3001               	movlw	1
 20235  029B  0023               	movlb	3	; select bank3
 20236  029C  07D7               	addwf	_mod_counter^(0+384),f
 20237  029D  3000               	movlw	0
 20238  029E  3DD8               	addwfc	(_mod_counter+1)^(0+384),f
 20239  029F                     i1l6992:	
 20240                           
 20241                           ;interrupts.c: 203: }
 20242                           ;interrupts.c: 205: if (preset_programmning_on == 1) {
 20243  029F  0343               	decf	_preset_programmning_on^(0+384),w
 20244  02A0  1D03               	btfss	3,2
 20245  02A1  2AD1               	goto	i1l7004
 20246                           
 20247                           ;interrupts.c: 206: preset_blink++;
 20248  02A2  3001               	movlw	1
 20249  02A3  0020               	movlb	0	; select bank0
 20250  02A4  00BA               	movwf	??_isr
 20251  02A5  083A               	movf	??_isr,w
 20252  02A6  0022               	movlb	2	; select bank2
 20253  02A7  07EC               	addwf	_preset_blink^(0+256),f
 20254                           
 20255                           ;interrupts.c: 208: if (preset_blink >= blink_delay) {
 20256  02A8  0023               	movlb	3	; select bank3
 20257  02A9  084C               	movf	(_blink_delay+1)^(0+384),w
 20258  02AA  3A80               	xorlw	128
 20259  02AB  3C80               	sublw	128
 20260  02AC  1D03               	skipz
 20261  02AD  2AB1               	goto	u699_25
 20262  02AE  084B               	movf	_blink_delay^(0+384),w
 20263  02AF  0022               	movlb	2	; select bank2
 20264  02B0  026C               	subwf	_preset_blink^(0+256),w
 20265  02B1                     u699_25:	
 20266  02B1  1C03               	skipc
 20267  02B2  2ACF               	goto	i1l157
 20268                           
 20269                           ;interrupts.c: 209: LATBbits.LATB1 = 1;
 20270  02B3  0022               	movlb	2	; select bank2
 20271  02B4  148D               	bsf	13,1	;volatile
 20272                           
 20273                           ;interrupts.c: 210: if (preset_blink > blink_delay*2) {
 20274  02B5  0023               	movlb	3	; select bank3
 20275  02B6  084C               	movf	(_blink_delay+1)^(0+384),w
 20276  02B7  0020               	movlb	0	; select bank0
 20277  02B8  00BB               	movwf	??_isr+1
 20278  02B9  0023               	movlb	3	; select bank3
 20279  02BA  084B               	movf	_blink_delay^(0+384),w
 20280  02BB  0020               	movlb	0	; select bank0
 20281  02BC  00BA               	movwf	??_isr
 20282  02BD  35BA               	lslf	??_isr,f
 20283  02BE  0DBB               	rlf	??_isr+1,f
 20284  02BF  083B               	movf	??_isr+1,w
 20285  02C0  3A80               	xorlw	128
 20286  02C1  00BC               	movwf	??_isr+2
 20287  02C2  3080               	movlw	128
 20288  02C3  023C               	subwf	??_isr+2,w
 20289  02C4  1D03               	skipz
 20290  02C5  2ACA               	goto	u700_25
 20291  02C6  0022               	movlb	2	; select bank2
 20292  02C7  086C               	movf	_preset_blink^(0+256),w
 20293  02C8  0020               	movlb	0	; select bank0
 20294  02C9  023A               	subwf	??_isr,w
 20295  02CA                     u700_25:	
 20296  02CA  1803               	skipnc
 20297  02CB  2AD7               	goto	i1l7010
 20298                           
 20299                           ;interrupts.c: 211: preset_blink = 0;
 20300  02CC  0022               	movlb	2	; select bank2
 20301  02CD  01EC               	clrf	_preset_blink^(0+256)
 20302                           
 20303                           ;interrupts.c: 212: }
 20304                           ;interrupts.c: 214: } else {
 20305  02CE  2AD7               	goto	i1l7010
 20306  02CF                     i1l157:	
 20307                           
 20308                           ;interrupts.c: 215: LATBbits.LATB1 = 0;
 20309  02CF  0022               	movlb	2	; select bank2
 20310  02D0  2AD6               	goto	i1l7008
 20311  02D1                     i1l7004:	
 20312                           ;interrupts.c: 216: }
 20313                           ;interrupts.c: 218: } else {
 20314                           
 20315                           
 20316                           ;interrupts.c: 219: if (preset_blink > 0) {
 20317  02D1  0022               	movlb	2	; select bank2
 20318  02D2  086C               	movf	_preset_blink^(0+256),w
 20319  02D3  1903               	btfsc	3,2
 20320  02D4  2AD7               	goto	i1l7010
 20321                           
 20322                           ;interrupts.c: 220: preset_blink = 0;
 20323  02D5  01EC               	clrf	_preset_blink^(0+256)
 20324  02D6                     i1l7008:	
 20325                           
 20326                           ;interrupts.c: 221: LATBbits.LATB1 = 0;
 20327  02D6  108D               	bcf	13,1	;volatile
 20328  02D7                     i1l7010:	
 20329                           
 20330                           ;interrupts.c: 222: }
 20331                           ;interrupts.c: 223: }
 20332                           ;interrupts.c: 227: INTCONbits.TMR0IF = 0;
 20333  02D7  110B               	bcf	11,2	;volatile
 20334  02D8                     i1l135:	
 20335  02D8  0020               	movlb	0	; select bank0
 20336  02D9  083F               	movf	??_isr+5,w
 20337  02DA  00FF               	movwf	127
 20338  02DB  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20339  02DC  0009               	retfie
 20340  02DD                     __end_of_isr:	
 20341                           
 20342                           	psect	text75
 20343  23B4                     __ptext75:	
 20344 ;; *************** function i1_set_leds_top *****************
 20345 ;; Defined at:
 20346 ;;		line 16 in file "LEDs.c"
 20347 ;; Parameters:    Size  Location     Type
 20348 ;;  x               2    0[COMMON] int 
 20349 ;;  ledState        2    2[COMMON] int 
 20350 ;; Auto vars:     Size  Location     Type
 20351 ;;		None
 20352 ;; Return value:  Size  Location     Type
 20353 ;;                  1    wreg      void 
 20354 ;; Registers used:
 20355 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20356 ;; Tracked objects:
 20357 ;;		On entry : 0/0
 20358 ;;		On exit  : 0/0
 20359 ;;		Unchanged: 0/0
 20360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20364 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20365 ;;Total ram usage:        4 bytes
 20366 ;; Hardware stack levels used:    1
 20367 ;; This function calls:
 20368 ;;		Nothing
 20369 ;; This function is called by:
 20370 ;;		_isr
 20371 ;; This function uses a non-reentrant model
 20372 ;;
 20373                           
 20374                           
 20375                           ;psect for function i1_set_leds_top
 20376  23B4                     i1_set_leds_top:	
 20377                           
 20378                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20379                           
 20380                           ;incstack = 0
 20381                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20382  23B4  0027               	movlb	7	; select bank7
 20383  23B5  100C               	bcf	12,0	;volatile
 20384                           
 20385                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20386  23B6  108C               	bcf	12,1	;volatile
 20387                           
 20388                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20389  23B7  110C               	bcf	12,2	;volatile
 20390                           
 20391                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20392  23B8  118C               	bcf	12,3	;volatile
 20393                           
 20394                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20395  23B9  120C               	bcf	12,4	;volatile
 20396                           
 20397                           ;LEDs.c: 22: switch (x) {
 20398  23BA  2BDF               	goto	i1l6820
 20399  23BB                     i1l6808:	
 20400                           ;LEDs.c: 23: case 1:
 20401                           
 20402                           
 20403                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20404  23BB  0C72               	rrf	i1set_leds_top@ledState,w
 20405  23BC  1C03               	skipc
 20406  23BD  100C               	bcf	12,0	;volatile
 20407  23BE  1803               	skipnc
 20408  23BF  140C               	bsf	12,0	;volatile
 20409                           
 20410                           ;LEDs.c: 25: break;
 20411  23C0  0008               	return
 20412  23C1                     i1l6810:	
 20413                           ;LEDs.c: 26: case 2:
 20414                           
 20415                           
 20416                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20417  23C1  0C72               	rrf	i1set_leds_top@ledState,w
 20418  23C2  1C03               	skipc
 20419  23C3  108C               	bcf	12,1	;volatile
 20420  23C4  1803               	skipnc
 20421  23C5  148C               	bsf	12,1	;volatile
 20422                           
 20423                           ;LEDs.c: 28: break;
 20424  23C6  0008               	return
 20425  23C7                     i1l6812:	
 20426                           ;LEDs.c: 29: case 3:
 20427                           
 20428                           
 20429                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20430  23C7  0C72               	rrf	i1set_leds_top@ledState,w
 20431  23C8  1C03               	skipc
 20432  23C9  110C               	bcf	12,2	;volatile
 20433  23CA  1803               	skipnc
 20434  23CB  150C               	bsf	12,2	;volatile
 20435                           
 20436                           ;LEDs.c: 31: break;
 20437  23CC  0008               	return
 20438  23CD                     i1l6814:	
 20439                           ;LEDs.c: 32: case 4:
 20440                           
 20441                           
 20442                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20443  23CD  0C72               	rrf	i1set_leds_top@ledState,w
 20444  23CE  1C03               	skipc
 20445  23CF  118C               	bcf	12,3	;volatile
 20446  23D0  1803               	skipnc
 20447  23D1  158C               	bsf	12,3	;volatile
 20448                           
 20449                           ;LEDs.c: 34: break;
 20450  23D2  0008               	return
 20451  23D3                     i1l6816:	
 20452                           ;LEDs.c: 35: case 5:
 20453                           
 20454                           
 20455                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20456  23D3  0C72               	rrf	i1set_leds_top@ledState,w
 20457  23D4  1C03               	skipc
 20458  23D5  120C               	bcf	12,4	;volatile
 20459  23D6  1803               	skipnc
 20460  23D7  160C               	bsf	12,4	;volatile
 20461                           
 20462                           ;LEDs.c: 39: break;
 20463                           
 20464                           ;LEDs.c: 38: case 6:
 20465                           
 20466                           ;LEDs.c: 37: break;
 20467  23D8  0008               	return
 20468  23D9                     i1l794:	
 20469                           ;LEDs.c: 40: case 100:
 20470                           
 20471                           
 20472                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20473  23D9  140C               	bsf	12,0	;volatile
 20474                           
 20475                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20476  23DA  148C               	bsf	12,1	;volatile
 20477                           
 20478                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20479  23DB  150C               	bsf	12,2	;volatile
 20480                           
 20481                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20482  23DC  158C               	bsf	12,3	;volatile
 20483                           
 20484                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20485  23DD  160C               	bsf	12,4	;volatile
 20486                           
 20487                           ;LEDs.c: 47: }
 20488                           
 20489                           ;LEDs.c: 46: break;
 20490  23DE  0008               	return
 20491  23DF                     i1l6820:	
 20492                           
 20493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20494                           ; Switch size 1, requested type "space"
 20495                           ; Number of cases is 1, Range of values is 0 to 0
 20496                           ; switch strategies available:
 20497                           ; Name         Instructions Cycles
 20498                           ; simple_byte            4     3 (average)
 20499                           ; direct_byte            8     6 (fixed)
 20500                           ; jumptable            260     6 (fixed)
 20501                           ;	Chosen strategy is simple_byte
 20502  23DF  0871               	movf	i1set_leds_top@x+1,w
 20503  23E0  3A00               	xorlw	0	; case 0
 20504  23E1  1903               	skipnz
 20505  23E2  2BE4               	goto	i1l9858
 20506  23E3  2BFB               	goto	i1l795
 20507  23E4                     i1l9858:	
 20508                           
 20509                           ; Switch size 1, requested type "space"
 20510                           ; Number of cases is 7, Range of values is 1 to 100
 20511                           ; switch strategies available:
 20512                           ; Name         Instructions Cycles
 20513                           ; simple_byte           22    12 (average)
 20514                           ; direct_byte          209     9 (fixed)
 20515                           ; jumptable            263     9 (fixed)
 20516                           ;	Chosen strategy is simple_byte
 20517  23E4  0870               	movf	i1set_leds_top@x,w
 20518  23E5  3A01               	xorlw	1	; case 1
 20519  23E6  1903               	skipnz
 20520  23E7  2BBB               	goto	i1l6808
 20521  23E8  3A03               	xorlw	3	; case 2
 20522  23E9  1903               	skipnz
 20523  23EA  2BC1               	goto	i1l6810
 20524  23EB  3A01               	xorlw	1	; case 3
 20525  23EC  1903               	skipnz
 20526  23ED  2BC7               	goto	i1l6812
 20527  23EE  3A07               	xorlw	7	; case 4
 20528  23EF  1903               	skipnz
 20529  23F0  2BCD               	goto	i1l6814
 20530  23F1  3A01               	xorlw	1	; case 5
 20531  23F2  1903               	skipnz
 20532  23F3  2BD3               	goto	i1l6816
 20533  23F4  3A03               	xorlw	3	; case 6
 20534  23F5  1903               	skipnz
 20535  23F6  2BFB               	goto	i1l795
 20536  23F7  3A62               	xorlw	98	; case 100
 20537  23F8  1903               	skipnz
 20538  23F9  2BD9               	goto	i1l794
 20539  23FA  2BFB               	goto	i1l795
 20540  23FB                     i1l795:	
 20541  23FB  0008               	return
 20542  23FC                     __end_ofi1_set_leds_top:	
 20543                           
 20544                           	psect	text76
 20545  2F77                     __ptext76:	
 20546 ;; *************** function i1_getModulationSubdivision *****************
 20547 ;; Defined at:
 20548 ;;		line 26 in file "modulation.c"
 20549 ;; Parameters:    Size  Location     Type
 20550 ;;		None
 20551 ;; Auto vars:     Size  Location     Type
 20552 ;;		None
 20553 ;; Return value:  Size  Location     Type
 20554 ;;                  2    0[COMMON] int 
 20555 ;; Registers used:
 20556 ;;		wreg, status,2, status,0
 20557 ;; Tracked objects:
 20558 ;;		On entry : 0/0
 20559 ;;		On exit  : 0/0
 20560 ;;		Unchanged: 0/0
 20561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20562 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20565 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20566 ;;Total ram usage:        2 bytes
 20567 ;; Hardware stack levels used:    1
 20568 ;; This function calls:
 20569 ;;		Nothing
 20570 ;; This function is called by:
 20571 ;;		_isr
 20572 ;; This function uses a non-reentrant model
 20573 ;;
 20574                           
 20575                           
 20576                           ;psect for function i1_getModulationSubdivision
 20577  2F77                     i1_getModulationSubdivision:	
 20578                           
 20579                           ;modulation.c: 27: if (delay_time >= 2400) {
 20580                           
 20581                           ;incstack = 0
 20582                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20583  2F77  0020               	movlb	0	; select bank0
 20584  2F78  1BD5               	btfsc	_delay_time+3,7	;volatile
 20585  2F79  2F8B               	goto	i1l6834
 20586  2F7A  0855               	movf	_delay_time+3,w	;volatile
 20587  2F7B  1D03               	btfss	3,2
 20588  2F7C  2F86               	goto	i1l6828
 20589  2F7D  0854               	movf	_delay_time+2,w	;volatile
 20590  2F7E  1D03               	btfss	3,2
 20591  2F7F  2F86               	goto	i1l6828
 20592  2F80  3060               	movlw	96
 20593  2F81  0252               	subwf	_delay_time,w	;volatile
 20594  2F82  3009               	movlw	9
 20595  2F83  3B53               	subwfb	_delay_time+1,w	;volatile
 20596  2F84  1C03               	btfss	3,0
 20597  2F85  2F8B               	goto	i1l6834
 20598  2F86                     i1l6828:	
 20599                           
 20600                           ;modulation.c: 28: return 120;
 20601  2F86  3078               	movlw	120
 20602  2F87  00F0               	movwf	?i1_getModulationSubdivision
 20603  2F88  3000               	movlw	0
 20604  2F89  00F1               	movwf	?i1_getModulationSubdivision+1
 20605                           
 20606                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20607  2F8A  0008               	return
 20608  2F8B                     i1l6834:	
 20609  2F8B  1BD5               	btfsc	_delay_time+3,7	;volatile
 20610  2F8C  2F9E               	goto	i1l6842
 20611  2F8D  0855               	movf	_delay_time+3,w	;volatile
 20612  2F8E  1D03               	btfss	3,2
 20613  2F8F  2F99               	goto	i1l6836
 20614  2F90  0854               	movf	_delay_time+2,w	;volatile
 20615  2F91  1D03               	btfss	3,2
 20616  2F92  2F99               	goto	i1l6836
 20617  2F93  3058               	movlw	88
 20618  2F94  0252               	subwf	_delay_time,w	;volatile
 20619  2F95  3002               	movlw	2
 20620  2F96  3B53               	subwfb	_delay_time+1,w	;volatile
 20621  2F97  1C03               	btfss	3,0
 20622  2F98  2F9E               	goto	i1l6842
 20623  2F99                     i1l6836:	
 20624                           
 20625                           ;modulation.c: 30: return 60;
 20626  2F99  303C               	movlw	60
 20627  2F9A  00F0               	movwf	?i1_getModulationSubdivision
 20628  2F9B  3000               	movlw	0
 20629  2F9C  00F1               	movwf	?i1_getModulationSubdivision+1
 20630                           
 20631                           ;modulation.c: 31: } else {
 20632  2F9D  0008               	return
 20633  2F9E                     i1l6842:	
 20634                           
 20635                           ;modulation.c: 32: return 30;
 20636  2F9E  301E               	movlw	30
 20637  2F9F  00F0               	movwf	?i1_getModulationSubdivision
 20638  2FA0  3000               	movlw	0
 20639  2FA1  00F1               	movwf	?i1_getModulationSubdivision+1
 20640  2FA2  0008               	return
 20641  2FA3                     __end_ofi1_getModulationSubdivision:	
 20642                           
 20643                           	psect	text77
 20644  2494                     __ptext77:	
 20645 ;; *************** function i1___awdiv *****************
 20646 ;; Defined at:
 20647 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20648 ;; Parameters:    Size  Location     Type
 20649 ;;  divisor         2    0[COMMON] int 
 20650 ;;  dividend        2    2[COMMON] int 
 20651 ;; Auto vars:     Size  Location     Type
 20652 ;;  __awdiv         2    7[COMMON] int 
 20653 ;;  __awdiv         1    6[COMMON] unsigned char 
 20654 ;;  __awdiv         1    5[COMMON] unsigned char 
 20655 ;; Return value:  Size  Location     Type
 20656 ;;                  2    0[COMMON] int 
 20657 ;; Registers used:
 20658 ;;		wreg, status,2, status,0
 20659 ;; Tracked objects:
 20660 ;;		On entry : 0/0
 20661 ;;		On exit  : 0/0
 20662 ;;		Unchanged: 0/0
 20663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20664 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20665 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20667 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20668 ;;Total ram usage:        9 bytes
 20669 ;; Hardware stack levels used:    1
 20670 ;; This function calls:
 20671 ;;		Nothing
 20672 ;; This function is called by:
 20673 ;;		_isr
 20674 ;; This function uses a non-reentrant model
 20675 ;;
 20676                           
 20677                           
 20678                           ;psect for function i1___awdiv
 20679  2494                     i1___awdiv:	
 20680                           
 20681                           ;incstack = 0
 20682                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20683  2494  01F6               	clrf	i1___awdiv@sign
 20684  2495  1FF1               	btfss	i1___awdiv@divisor+1,7
 20685  2496  2C9E               	goto	i1l6854
 20686  2497  09F0               	comf	i1___awdiv@divisor,f
 20687  2498  09F1               	comf	i1___awdiv@divisor+1,f
 20688  2499  0AF0               	incf	i1___awdiv@divisor,f
 20689  249A  1903               	skipnz
 20690  249B  0AF1               	incf	i1___awdiv@divisor+1,f
 20691  249C  01F6               	clrf	i1___awdiv@sign
 20692  249D  0AF6               	incf	i1___awdiv@sign,f
 20693  249E                     i1l6854:	
 20694  249E  1FF3               	btfss	i1___awdiv@dividend+1,7
 20695  249F  2CA9               	goto	i1l6860
 20696  24A0  09F2               	comf	i1___awdiv@dividend,f
 20697  24A1  09F3               	comf	i1___awdiv@dividend+1,f
 20698  24A2  0AF2               	incf	i1___awdiv@dividend,f
 20699  24A3  1903               	skipnz
 20700  24A4  0AF3               	incf	i1___awdiv@dividend+1,f
 20701  24A5  3001               	movlw	1
 20702  24A6  00F4               	movwf	??i1___awdiv
 20703  24A7  0874               	movf	??i1___awdiv,w
 20704  24A8  06F6               	xorwf	i1___awdiv@sign,f
 20705  24A9                     i1l6860:	
 20706  24A9  01F7               	clrf	i1___awdiv@quotient
 20707  24AA  01F8               	clrf	i1___awdiv@quotient+1
 20708  24AB  0870               	movf	i1___awdiv@divisor,w
 20709  24AC  0471               	iorwf	i1___awdiv@divisor+1,w
 20710  24AD  1903               	btfsc	3,2
 20711  24AE  2CD8               	goto	i1l6882
 20712  24AF  01F5               	clrf	i1___awdiv@counter
 20713  24B0  0AF5               	incf	i1___awdiv@counter,f
 20714  24B1                     i1l6870:	
 20715  24B1  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20716  24B2  2CBD               	goto	i1l6872
 20717  24B3  3001               	movlw	1
 20718  24B4                     u664_25:	
 20719  24B4  35F0               	lslf	i1___awdiv@divisor,f
 20720  24B5  0DF1               	rlf	i1___awdiv@divisor+1,f
 20721  24B6  0B89               	decfsz	9,f
 20722  24B7  2CB4               	goto	u664_25
 20723  24B8  3001               	movlw	1
 20724  24B9  00F4               	movwf	??i1___awdiv
 20725  24BA  0874               	movf	??i1___awdiv,w
 20726  24BB  07F5               	addwf	i1___awdiv@counter,f
 20727  24BC  2CB1               	goto	i1l6870
 20728  24BD                     i1l6872:	
 20729  24BD  3001               	movlw	1
 20730  24BE                     u666_25:	
 20731  24BE  35F7               	lslf	i1___awdiv@quotient,f
 20732  24BF  0DF8               	rlf	i1___awdiv@quotient+1,f
 20733  24C0  0B89               	decfsz	9,f
 20734  24C1  2CBE               	goto	u666_25
 20735  24C2  0871               	movf	i1___awdiv@divisor+1,w
 20736  24C3  0273               	subwf	i1___awdiv@dividend+1,w
 20737  24C4  1D03               	skipz
 20738  24C5  2CC8               	goto	u667_25
 20739  24C6  0870               	movf	i1___awdiv@divisor,w
 20740  24C7  0272               	subwf	i1___awdiv@dividend,w
 20741  24C8                     u667_25:	
 20742  24C8  1C03               	skipc
 20743  24C9  2CCF               	goto	i1l6878
 20744  24CA  0870               	movf	i1___awdiv@divisor,w
 20745  24CB  02F2               	subwf	i1___awdiv@dividend,f
 20746  24CC  0871               	movf	i1___awdiv@divisor+1,w
 20747  24CD  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20748  24CE  1477               	bsf	i1___awdiv@quotient,0
 20749  24CF                     i1l6878:	
 20750  24CF  3001               	movlw	1
 20751  24D0                     u668_25:	
 20752  24D0  36F1               	lsrf	i1___awdiv@divisor+1,f
 20753  24D1  0CF0               	rrf	i1___awdiv@divisor,f
 20754  24D2  0B89               	decfsz	9,f
 20755  24D3  2CD0               	goto	u668_25
 20756  24D4  3001               	movlw	1
 20757  24D5  02F5               	subwf	i1___awdiv@counter,f
 20758  24D6  1D03               	btfss	3,2
 20759  24D7  2CBD               	goto	i1l6872
 20760  24D8                     i1l6882:	
 20761  24D8  0876               	movf	i1___awdiv@sign,w
 20762  24D9  1903               	btfsc	3,2
 20763  24DA  2CE0               	goto	i1l6886
 20764  24DB  09F7               	comf	i1___awdiv@quotient,f
 20765  24DC  09F8               	comf	i1___awdiv@quotient+1,f
 20766  24DD  0AF7               	incf	i1___awdiv@quotient,f
 20767  24DE  1903               	skipnz
 20768  24DF  0AF8               	incf	i1___awdiv@quotient+1,f
 20769  24E0                     i1l6886:	
 20770  24E0  0878               	movf	i1___awdiv@quotient+1,w
 20771  24E1  00F1               	movwf	?i1___awdiv+1
 20772  24E2  0877               	movf	i1___awdiv@quotient,w
 20773  24E3  00F0               	movwf	?i1___awdiv
 20774  24E4  0008               	return
 20775  24E5                     __end_ofi1___awdiv:	
 20776                           
 20777                           	psect	text78
 20778  22EE                     __ptext78:	
 20779 ;; *************** function _modulation *****************
 20780 ;; Defined at:
 20781 ;;		line 222 in file "user.c"
 20782 ;; Parameters:    Size  Location     Type
 20783 ;;  x               4   14[BANK0 ] long 
 20784 ;;  y               4   18[BANK0 ] long 
 20785 ;; Auto vars:     Size  Location     Type
 20786 ;;		None
 20787 ;; Return value:  Size  Location     Type
 20788 ;;                  4   14[BANK0 ] long 
 20789 ;; Registers used:
 20790 ;;		wreg, status,2, status,0, pclath, cstack
 20791 ;; Tracked objects:
 20792 ;;		On entry : 0/0
 20793 ;;		On exit  : 0/0
 20794 ;;		Unchanged: 0/0
 20795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20796 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20798 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20799 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20800 ;;Total ram usage:       12 bytes
 20801 ;; Hardware stack levels used:    1
 20802 ;; Hardware stack levels required when called:    1
 20803 ;; This function calls:
 20804 ;;		i1___aldiv
 20805 ;;		i1___lmul
 20806 ;; This function is called by:
 20807 ;;		_isr
 20808 ;; This function uses a non-reentrant model
 20809 ;;
 20810                           
 20811                           
 20812                           ;psect for function _modulation
 20813  22EE                     _modulation:	
 20814                           
 20815                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20816                           
 20817                           ;incstack = 0
 20818                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20819  22EE  3000               	movlw	0
 20820  22EF  0020               	movlb	0	; select bank0
 20821  22F0  00A3               	movwf	i1___aldiv@divisor+3
 20822  22F1  3000               	movlw	0
 20823  22F2  00A2               	movwf	i1___aldiv@divisor+2
 20824  22F3  3003               	movlw	3
 20825  22F4  00A1               	movwf	i1___aldiv@divisor+1
 20826  22F5  30E8               	movlw	232
 20827  22F6  00A0               	movwf	i1___aldiv@divisor
 20828  22F7  300C               	movlw	12
 20829  22F8  00B6               	movwf	??_modulation
 20830  22F9  30F2               	movlw	242
 20831  22FA  00B7               	movwf	??_modulation+1
 20832  22FB  3001               	movlw	1
 20833  22FC  00B8               	movwf	??_modulation+2
 20834  22FD  3000               	movlw	0
 20835  22FE  00B9               	movwf	??_modulation+3
 20836  22FF  0835               	movf	modulation@y+3,w
 20837  2300  00F3               	movwf	i1___lmul@multiplier+3
 20838  2301  0834               	movf	modulation@y+2,w
 20839  2302  00F2               	movwf	i1___lmul@multiplier+2
 20840  2303  0833               	movf	modulation@y+1,w
 20841  2304  00F1               	movwf	i1___lmul@multiplier+1
 20842  2305  0832               	movf	modulation@y,w
 20843  2306  00F0               	movwf	i1___lmul@multiplier
 20844  2307  0831               	movf	modulation@x+3,w
 20845  2308  00F7               	movwf	i1___lmul@multiplicand+3
 20846  2309  0830               	movf	modulation@x+2,w
 20847  230A  00F6               	movwf	i1___lmul@multiplicand+2
 20848  230B  082F               	movf	modulation@x+1,w
 20849  230C  00F5               	movwf	i1___lmul@multiplicand+1
 20850  230D  082E               	movf	modulation@x,w
 20851  230E  00F4               	movwf	i1___lmul@multiplicand
 20852  230F  31AF  27D1  31A2   	fcall	i1___lmul
 20853  2312  0870               	movf	?i1___lmul,w
 20854  2313  0020               	movlb	0	; select bank0
 20855  2314  07B6               	addwf	??_modulation,f
 20856  2315  0871               	movf	?i1___lmul+1,w
 20857  2316  3DB7               	addwfc	??_modulation+1,f
 20858  2317  0872               	movf	?i1___lmul+2,w
 20859  2318  3DB8               	addwfc	??_modulation+2,f
 20860  2319  0873               	movf	?i1___lmul+3,w
 20861  231A  3DB9               	addwfc	??_modulation+3,f
 20862  231B  0839               	movf	??_modulation+3,w
 20863  231C  00A7               	movwf	i1___aldiv@dividend+3
 20864  231D  0838               	movf	??_modulation+2,w
 20865  231E  00A6               	movwf	i1___aldiv@dividend+2
 20866  231F  0837               	movf	??_modulation+1,w
 20867  2320  00A5               	movwf	i1___aldiv@dividend+1
 20868  2321  0836               	movf	??_modulation,w
 20869  2322  00A4               	movwf	i1___aldiv@dividend
 20870  2323  3198  20D1         	fcall	i1___aldiv
 20871  2325  0020               	movlb	0	; select bank0
 20872  2326  0823               	movf	?i1___aldiv+3,w
 20873  2327  00B1               	movwf	?_modulation+3
 20874  2328  0822               	movf	?i1___aldiv+2,w
 20875  2329  00B0               	movwf	?_modulation+2
 20876  232A  0821               	movf	?i1___aldiv+1,w
 20877  232B  00AF               	movwf	?_modulation+1
 20878  232C  0820               	movf	?i1___aldiv,w
 20879  232D  00AE               	movwf	?_modulation
 20880  232E  0008               	return
 20881  232F                     __end_of_modulation:	
 20882                           
 20883                           	psect	text79
 20884  2FD1                     __ptext79:	
 20885 ;; *************** function i1___lmul *****************
 20886 ;; Defined at:
 20887 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20888 ;; Parameters:    Size  Location     Type
 20889 ;;  multiplier      4    0[COMMON] unsigned long 
 20890 ;;  multiplicand    4    4[COMMON] unsigned long 
 20891 ;; Auto vars:     Size  Location     Type
 20892 ;;  __lmul          4    8[COMMON] unsigned long 
 20893 ;; Return value:  Size  Location     Type
 20894 ;;                  4    0[COMMON] unsigned long 
 20895 ;; Registers used:
 20896 ;;		wreg, status,2, status,0
 20897 ;; Tracked objects:
 20898 ;;		On entry : 0/0
 20899 ;;		On exit  : 0/0
 20900 ;;		Unchanged: 0/0
 20901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20902 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20905 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20906 ;;Total ram usage:       12 bytes
 20907 ;; Hardware stack levels used:    1
 20908 ;; This function calls:
 20909 ;;		Nothing
 20910 ;; This function is called by:
 20911 ;;		_modulation
 20912 ;; This function uses a non-reentrant model
 20913 ;;
 20914                           
 20915                           
 20916                           ;psect for function i1___lmul
 20917  2FD1                     i1___lmul:	
 20918                           
 20919                           ;incstack = 0
 20920                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20921  2FD1  3000               	movlw	0
 20922  2FD2  00FB               	movwf	i1___lmul@product+3
 20923  2FD3  3000               	movlw	0
 20924  2FD4  00FA               	movwf	i1___lmul@product+2
 20925  2FD5  3000               	movlw	0
 20926  2FD6  00F9               	movwf	i1___lmul@product+1
 20927  2FD7  3000               	movlw	0
 20928  2FD8  00F8               	movwf	i1___lmul@product
 20929  2FD9                     i1l6110:	
 20930  2FD9  1C70               	btfss	i1___lmul@multiplier,0
 20931  2FDA  2FE3               	goto	i1l6114
 20932  2FDB  0874               	movf	i1___lmul@multiplicand,w
 20933  2FDC  07F8               	addwf	i1___lmul@product,f
 20934  2FDD  0875               	movf	i1___lmul@multiplicand+1,w
 20935  2FDE  3DF9               	addwfc	i1___lmul@product+1,f
 20936  2FDF  0876               	movf	i1___lmul@multiplicand+2,w
 20937  2FE0  3DFA               	addwfc	i1___lmul@product+2,f
 20938  2FE1  0877               	movf	i1___lmul@multiplicand+3,w
 20939  2FE2  3DFB               	addwfc	i1___lmul@product+3,f
 20940  2FE3                     i1l6114:	
 20941  2FE3  3001               	movlw	1
 20942  2FE4                     u540_25:	
 20943  2FE4  35F4               	lslf	i1___lmul@multiplicand,f
 20944  2FE5  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20945  2FE6  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20946  2FE7  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20947  2FE8  0B89               	decfsz	9,f
 20948  2FE9  2FE4               	goto	u540_25
 20949  2FEA  3001               	movlw	1
 20950  2FEB                     u541_25:	
 20951  2FEB  36F3               	lsrf	i1___lmul@multiplier+3,f
 20952  2FEC  0CF2               	rrf	i1___lmul@multiplier+2,f
 20953  2FED  0CF1               	rrf	i1___lmul@multiplier+1,f
 20954  2FEE  0CF0               	rrf	i1___lmul@multiplier,f
 20955  2FEF  0B89               	decfsz	9,f
 20956  2FF0  2FEB               	goto	u541_25
 20957  2FF1  0873               	movf	i1___lmul@multiplier+3,w
 20958  2FF2  0472               	iorwf	i1___lmul@multiplier+2,w
 20959  2FF3  0471               	iorwf	i1___lmul@multiplier+1,w
 20960  2FF4  0470               	iorwf	i1___lmul@multiplier,w
 20961  2FF5  1D03               	skipz
 20962  2FF6  2FD9               	goto	i1l6110
 20963  2FF7  087B               	movf	i1___lmul@product+3,w
 20964  2FF8  00F3               	movwf	?i1___lmul+3
 20965  2FF9  087A               	movf	i1___lmul@product+2,w
 20966  2FFA  00F2               	movwf	?i1___lmul+2
 20967  2FFB  0879               	movf	i1___lmul@product+1,w
 20968  2FFC  00F1               	movwf	?i1___lmul+1
 20969  2FFD  0878               	movf	i1___lmul@product,w
 20970  2FFE  00F0               	movwf	?i1___lmul
 20971  2FFF  0008               	return
 20972  3000                     __end_ofi1___lmul:	
 20973                           
 20974                           	psect	text80
 20975  18D1                     __ptext80:	
 20976 ;; *************** function i1___aldiv *****************
 20977 ;; Defined at:
 20978 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20979 ;; Parameters:    Size  Location     Type
 20980 ;;  divisor         4    0[BANK0 ] long 
 20981 ;;  dividend        4    4[BANK0 ] long 
 20982 ;; Auto vars:     Size  Location     Type
 20983 ;;  __aldiv         4   10[BANK0 ] long 
 20984 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20985 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20986 ;; Return value:  Size  Location     Type
 20987 ;;                  4    0[BANK0 ] long 
 20988 ;; Registers used:
 20989 ;;		wreg, status,2, status,0
 20990 ;; Tracked objects:
 20991 ;;		On entry : 0/0
 20992 ;;		On exit  : 0/0
 20993 ;;		Unchanged: 0/0
 20994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20995 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20996 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20998 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20999 ;;Total ram usage:       15 bytes
 21000 ;; Hardware stack levels used:    1
 21001 ;; This function calls:
 21002 ;;		Nothing
 21003 ;; This function is called by:
 21004 ;;		_modulation
 21005 ;; This function uses a non-reentrant model
 21006 ;;
 21007                           
 21008                           
 21009                           ;psect for function i1___aldiv
 21010  18D1                     i1___aldiv:	
 21011                           
 21012                           ;incstack = 0
 21013                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21014  18D1  0020               	movlb	0	; select bank0
 21015  18D2  01A9               	clrf	i1___aldiv@sign
 21016  18D3  1FA3               	btfss	i1___aldiv@divisor+3,7
 21017  18D4  28E2               	goto	i1l2017
 21018  18D5  09A0               	comf	i1___aldiv@divisor,f
 21019  18D6  09A1               	comf	i1___aldiv@divisor+1,f
 21020  18D7  09A2               	comf	i1___aldiv@divisor+2,f
 21021  18D8  09A3               	comf	i1___aldiv@divisor+3,f
 21022  18D9  0AA0               	incf	i1___aldiv@divisor,f
 21023  18DA  1903               	skipnz
 21024  18DB  0AA1               	incf	i1___aldiv@divisor+1,f
 21025  18DC  1903               	skipnz
 21026  18DD  0AA2               	incf	i1___aldiv@divisor+2,f
 21027  18DE  1903               	skipnz
 21028  18DF  0AA3               	incf	i1___aldiv@divisor+3,f
 21029  18E0  01A9               	clrf	i1___aldiv@sign
 21030  18E1  0AA9               	incf	i1___aldiv@sign,f
 21031  18E2                     i1l2017:	
 21032  18E2  1FA7               	btfss	i1___aldiv@dividend+3,7
 21033  18E3  28F3               	goto	i1l6132
 21034  18E4  09A4               	comf	i1___aldiv@dividend,f
 21035  18E5  09A5               	comf	i1___aldiv@dividend+1,f
 21036  18E6  09A6               	comf	i1___aldiv@dividend+2,f
 21037  18E7  09A7               	comf	i1___aldiv@dividend+3,f
 21038  18E8  0AA4               	incf	i1___aldiv@dividend,f
 21039  18E9  1903               	skipnz
 21040  18EA  0AA5               	incf	i1___aldiv@dividend+1,f
 21041  18EB  1903               	skipnz
 21042  18EC  0AA6               	incf	i1___aldiv@dividend+2,f
 21043  18ED  1903               	skipnz
 21044  18EE  0AA7               	incf	i1___aldiv@dividend+3,f
 21045  18EF  3001               	movlw	1
 21046  18F0  00FC               	movwf	??i1___aldiv
 21047  18F1  087C               	movf	??i1___aldiv,w
 21048  18F2  06A9               	xorwf	i1___aldiv@sign,f
 21049  18F3                     i1l6132:	
 21050  18F3  3000               	movlw	0
 21051  18F4  00AD               	movwf	i1___aldiv@quotient+3
 21052  18F5  3000               	movlw	0
 21053  18F6  00AC               	movwf	i1___aldiv@quotient+2
 21054  18F7  3000               	movlw	0
 21055  18F8  00AB               	movwf	i1___aldiv@quotient+1
 21056  18F9  3000               	movlw	0
 21057  18FA  00AA               	movwf	i1___aldiv@quotient
 21058  18FB  0823               	movf	i1___aldiv@divisor+3,w
 21059  18FC  0422               	iorwf	i1___aldiv@divisor+2,w
 21060  18FD  0421               	iorwf	i1___aldiv@divisor+1,w
 21061  18FE  0420               	iorwf	i1___aldiv@divisor,w
 21062  18FF  1903               	skipnz
 21063  1900  293C               	goto	i1l6154
 21064  1901  01A8               	clrf	i1___aldiv@counter
 21065  1902  0AA8               	incf	i1___aldiv@counter,f
 21066  1903                     i1l6140:	
 21067  1903  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21068  1904  2911               	goto	i1l6142
 21069  1905  3001               	movlw	1
 21070  1906                     u546_25:	
 21071  1906  35A0               	lslf	i1___aldiv@divisor,f
 21072  1907  0DA1               	rlf	i1___aldiv@divisor+1,f
 21073  1908  0DA2               	rlf	i1___aldiv@divisor+2,f
 21074  1909  0DA3               	rlf	i1___aldiv@divisor+3,f
 21075  190A  0B89               	decfsz	9,f
 21076  190B  2906               	goto	u546_25
 21077  190C  3001               	movlw	1
 21078  190D  00FC               	movwf	??i1___aldiv
 21079  190E  087C               	movf	??i1___aldiv,w
 21080  190F  07A8               	addwf	i1___aldiv@counter,f
 21081  1910  2903               	goto	i1l6140
 21082  1911                     i1l6142:	
 21083  1911  3001               	movlw	1
 21084  1912                     u548_25:	
 21085  1912  35AA               	lslf	i1___aldiv@quotient,f
 21086  1913  0DAB               	rlf	i1___aldiv@quotient+1,f
 21087  1914  0DAC               	rlf	i1___aldiv@quotient+2,f
 21088  1915  0DAD               	rlf	i1___aldiv@quotient+3,f
 21089  1916  0B89               	decfsz	9,f
 21090  1917  2912               	goto	u548_25
 21091  1918  0823               	movf	i1___aldiv@divisor+3,w
 21092  1919  0227               	subwf	i1___aldiv@dividend+3,w
 21093  191A  1D03               	skipz
 21094  191B  2926               	goto	u549_25
 21095  191C  0822               	movf	i1___aldiv@divisor+2,w
 21096  191D  0226               	subwf	i1___aldiv@dividend+2,w
 21097  191E  1D03               	skipz
 21098  191F  2926               	goto	u549_25
 21099  1920  0821               	movf	i1___aldiv@divisor+1,w
 21100  1921  0225               	subwf	i1___aldiv@dividend+1,w
 21101  1922  1D03               	skipz
 21102  1923  2926               	goto	u549_25
 21103  1924  0820               	movf	i1___aldiv@divisor,w
 21104  1925  0224               	subwf	i1___aldiv@dividend,w
 21105  1926                     u549_25:	
 21106  1926  1C03               	skipc
 21107  1927  2931               	goto	i1l6150
 21108  1928  0820               	movf	i1___aldiv@divisor,w
 21109  1929  02A4               	subwf	i1___aldiv@dividend,f
 21110  192A  0821               	movf	i1___aldiv@divisor+1,w
 21111  192B  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21112  192C  0822               	movf	i1___aldiv@divisor+2,w
 21113  192D  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21114  192E  0823               	movf	i1___aldiv@divisor+3,w
 21115  192F  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21116  1930  142A               	bsf	i1___aldiv@quotient,0
 21117  1931                     i1l6150:	
 21118  1931  3001               	movlw	1
 21119  1932                     u550_25:	
 21120  1932  36A3               	lsrf	i1___aldiv@divisor+3,f
 21121  1933  0CA2               	rrf	i1___aldiv@divisor+2,f
 21122  1934  0CA1               	rrf	i1___aldiv@divisor+1,f
 21123  1935  0CA0               	rrf	i1___aldiv@divisor,f
 21124  1936  0B89               	decfsz	9,f
 21125  1937  2932               	goto	u550_25
 21126  1938  3001               	movlw	1
 21127  1939  02A8               	subwf	i1___aldiv@counter,f
 21128  193A  1D03               	btfss	3,2
 21129  193B  2911               	goto	i1l6142
 21130  193C                     i1l6154:	
 21131  193C  0829               	movf	i1___aldiv@sign,w
 21132  193D  1903               	btfsc	3,2
 21133  193E  294A               	goto	i1l6158
 21134  193F  09AA               	comf	i1___aldiv@quotient,f
 21135  1940  09AB               	comf	i1___aldiv@quotient+1,f
 21136  1941  09AC               	comf	i1___aldiv@quotient+2,f
 21137  1942  09AD               	comf	i1___aldiv@quotient+3,f
 21138  1943  0AAA               	incf	i1___aldiv@quotient,f
 21139  1944  1903               	skipnz
 21140  1945  0AAB               	incf	i1___aldiv@quotient+1,f
 21141  1946  1903               	skipnz
 21142  1947  0AAC               	incf	i1___aldiv@quotient+2,f
 21143  1948  1903               	skipnz
 21144  1949  0AAD               	incf	i1___aldiv@quotient+3,f
 21145  194A                     i1l6158:	
 21146  194A  082D               	movf	i1___aldiv@quotient+3,w
 21147  194B  00A3               	movwf	?i1___aldiv+3
 21148  194C  082C               	movf	i1___aldiv@quotient+2,w
 21149  194D  00A2               	movwf	?i1___aldiv+2
 21150  194E  082B               	movf	i1___aldiv@quotient+1,w
 21151  194F  00A1               	movwf	?i1___aldiv+1
 21152  1950  082A               	movf	i1___aldiv@quotient,w
 21153  1951  00A0               	movwf	?i1___aldiv
 21154  1952  0008               	return
 21155  1953                     __end_ofi1___aldiv:	
 21156  007E                     btemp	set	126	;btemp
 21157  007E                     int$flags	set	126
 21158  007E                     wtemp	set	126
 21159  007E                     wtemp0	set	126
 21160  0080                     wtemp1	set	128
 21161  0082                     wtemp2	set	130
 21162  0084                     wtemp3	set	132
 21163  0086                     wtemp4	set	134
 21164  0088                     wtemp5	set	136
 21165  007F                     wtemp6	set	127
 21166  007E                     ttemp	set	126
 21167  007E                     ttemp0	set	126
 21168  0081                     ttemp1	set	129
 21169  0084                     ttemp2	set	132
 21170  0087                     ttemp3	set	135
 21171  007F                     ttemp4	set	127
 21172  007E                     ltemp	set	126
 21173  007E                     ltemp0	set	126
 21174  0082                     ltemp1	set	130
 21175  0086                     ltemp2	set	134
 21176  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         287
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      80
    BANK3            80      9      80
    BANK4            80     14      69
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  888938
                                              0 BANK4     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcCosArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  162398
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29916
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34282
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   31031
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   30187
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   29971
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163760
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  153110
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  153159
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  137191
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42795
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   76054
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   26100
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0  104328
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   84615
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   72910
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18319
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8987
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8429
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      E      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     22F      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     22F      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jan 15 18:27:25 2017

                        _update_mode 20CE                         ___altoft@exp 00AE  
                        __CFG_CP$OFF 0000                        ___altoft@sign 00AF  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E7  
                       ___awdiv@sign 00A6                   _topTactile_pressed 01C6  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 0BD3  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l366 05F1  
                                l801 214A                                  l802 214D  
                                l386 2089                                  l803 2150  
                                l635 2740                 __size_of_adc_convert 0013  
                                l804 2153                                  l806 2156  
                                l807 217A                                  l588 2DE7  
                                l794 25B9                                  l795 25DD  
                                l964 2411                                  l980 2489  
                                l799 2147                                  l991 20FE  
                                l968 243B                                  l976 245B  
                                _GIE 005F                                  l999 2F05  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _cos 2784  
                                _map 1AE1                                  _exp 1363  
                                _log 1F2F                                  _isr 0004  
                                _tap 02A0                                  _sin 0821  
                                _pow 1127                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 217B                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l1001 2F0B  
                               l1002 2F12                                 l1003 2F26  
                               l1006 25E5                                 l1017 262F  
                               l2017 1964                                 l2220 1AC7  
                               l1420 0BEA                                 l2136 267D  
                               l2160 10D0                                 l2137 2685  
                               l2129 266A                                 l1434 0CA4  
                               l2332 114B                                 l2350 0936  
                               l1714 23A6                                 ?_cos 014C  
                               l1962 2E57                                 ?_map 00DE  
                               l8102 1DA6                                 l8032 1834  
                               l8024 1810                                 l8114 2FAB  
                               l9002 134C                                 l8132 1E06  
                               l8052 2122                                 ?_exp 0148  
                               ?_log 013E                                 l8142 1E73  
                               l9022 0BDF                                 l8064 2EED  
                               l8080 1D4C                                 l8152 2707  
                               l8128 1DFE                                 l8240 20AF  
                               l8232 2F1A                                 l8074 1D36  
                               l8314 2F52                                 l8162 1C95  
                               l9050 0C46                                 l9042 0C1E  
                               l9106 0DA0                                 l8412 2060  
                               l8404 204B                                 l9124 2406  
                               l8316 2F62                                 l8172 1CB7  
                               l8332 1F66                                 l9204 076A  
                               l9044 0C3B                                 l9028 0BFC  
                               ?_isr 0070                                 l7710 2656  
                               l7702 2640                                 l8094 1D8D  
                               l8406 205A                                 l9134 242D  
                               l8326 1F53                                 l8270 14F1  
                               l8192 1CFF                                 l9240 1B80  
                               l8256 1689                                 l8600 222B  
                               l9064 0C6D                                 l9400 070E  
                               l9312 0399                                 l7706 2647  
                               l7802 1059                                 l9146 2450  
                               l8370 13F4                                 l9218 19E1  
                               l9242 1B84                                 l9066 0C75  
                               l9322 03A9                                 l7740 25B1  
                               l7732 2591                                 l7716 266F  
                               l7708 2651                                 l7812 106F  
                               l8284 0856                                 l9156 2477  
                               l8196 1D07                                 l8364 13B9  
                               l8348 1370                                 l8460 115F  
                               l9260 1BF1                                 l9244 1B88  
                               l9252 1B99                                 l8540 224B  
                               l9092 0CF3                                 l9084 0CE7  
                               l9076 0C9C                                 l9068 0C84  
                               l9412 0748                                 l7734 2599  
                               l7718 2677                                 l7830 109C  
                               l7806 1060                                 l7910 1EE3  
                               l8358 1395                                 l8454 1153  
                               l9182 1C0F                                 l9246 1B8C  
                               l9254 1BB2                                 l9238 1B7A  
                               l9094 0D3D                                 l9342 0433  
                               l7760 215D                                 l7736 25A1  
                               l7744 25C0                                 l7832 10A6  
                               l7824 1089                                 l8296 08F2  
                               l8392 149C                                 l8472 11D9  
                               l9176 1C02                                 l9248 1B92  
                               l8640 19BE                                 l9352 0491  
                               l9328 03B8                                 l7738 25A9  
                               l7842 10C2                                 l7834 10AB  
                               l7922 1EFF                                 l7914 1EEB  
                               l7690 1014                                 l8730 0F04  
                               l8626 1985                                 l8618 1975  
                               l9098 0D63                                 l9370 0587  
                               l7852 10F4                                 l7844 10CC  
                               l7836 10AF                                 l8468 11B9  
                               l8732 0F4A                                 l8740 0FBB  
                               l8724 0E32                                 l8548 225B  
                               l8556 2266                                 l8644 19CC  
                               l8636 19B3                                 l8628 1993  
                               l9356 04D1                                 ?_sin 013E  
                               l7862 110F                                 l7926 1F07  
                               l7790 21CC                                 l7870 2192  
                               l7950 1A73                                 l8574 27CE  
                               l8398 2045                                 l7686 100A  
                               l9198 075B                                 l8662 24FB  
                               l8590 0B67                                 l8734 0F90  
                               l8726 0E78                                 l8742 0E14  
                               l8718 0DFD                                 l8910 1266  
                               l9382 05F3                                 l9366 0547  
                               l7848 10E2                                 l7768 2E51  
                               l7792 21DC                                 l8680 2521  
                               l8672 2503                                 l8656 24F0  
                               l8744 0FC1                                 l8728 0EBE  
                               l9392 0684                                 l8826 2753  
                               l8762 2379                                 l7874 21A8  
                               l7970 1AB1                                 l8674 250F  
                               l8586 0A25                                 l8754 0FE4  
                               l8738 0FA4                                 l8906 1253  
                               l9386 0633                                 l8828 275C  
                               l8764 237B                                 l8772 2383  
                               l7892 1E92                                 l8684 252A  
                               l8748 0FCA                                 l9396 06C4  
                               ?_pow 0155                                 l8766 237D  
                               l7982 1AD8                                 l8942 12B4  
                               l8918 1274                                 l8768 237F  
                               l7976 1ABE                                 l7968 1AA3  
                               l8688 2532                                 l8944 12BC  
                               l8864 20FB                                 l8880 2608  
                               l9850 239C                                 l7898 1EA8  
                               l7978 1ACA                                 l7994 2282  
                               l9842 0FAA                                 l8970 12ED  
                               l8938 12A2                                 l8858 20F1  
                               l8866 2102                                 l9852 23A1  
                               l9844 1B9E                                 l8972 12F1  
                               l9854 25C6                                 l9846 2392  
                               l8958 12D8                                 l8886 2614  
                               l9856 2163                                 l9848 2397  
                               l8896 262B                                 l8888 2619  
                               l8986 1326                                 l8978 130C  
                               l8898 2633                                 l8988 132C  
                               l8996 1340                                 _PEIE 005E  
                               _RCIE 048D                                 u8005 109D  
                               u8035 10B0                                 u8205 1EF2  
                               u8065 10C3                                 u9105 19B4  
                               u8235 1F08                                 u8315 1AA4  
                               u8245 1F0E                                 u8165 1EB4  
                               u9205 2522                                 u8175 1EC4  
                               u7705 264C                                 u8505 1DA7  
                               u8345 1ABF                                 u9065 1988  
                               u9315 2F33                                 u8195 1EEC  
                               u8620 20AD                                 u9325 2F39  
                               u7725 2665                                 u8285 1A7A  
                               u8605 1CC0                                 u9165 2506  
                               u9085 1994                                 u7655 1015  
                               u9255 0DD7                                 u9095 19A8  
                               u9360 275A                                 u8800 13D3  
                               u9345 2739                                 u7745 2672  
                               u8465 1D5E                                 u7825 2E58  
                               u7665 101C                                 u9185 2510  
                               u9265 0DEB                                 u8385 180E  
                               u9355 274C                                 u8475 1D6E  
                               u7835 2E5D                                 u9195 251A  
                               u9275 0DFB                                 u8395 1832  
                               u8485 1D8E                                 u8725 2F57  
                               u9285 0E1B                                 u8495 1D9D  
                               u8680 08EE                                 u7785 268C  
                               u7865 21D1                                 u8905 11AA  
                               u9545 124C                                 u9465 25F7  
                               u8690 08EF                                 u8835 1493  
                               u9555 125F                                 u9395 20E1  
                               u8925 2E75                                 u8790 13D2  
                               u7975 108A                                 u8935 080B  
                               u8945 223C                                 u9585 127E  
                               u9835 0C27                                 u9695 12FD  
                               u8985 2E3F                                 u9945 0CB5  
                               u9865 0C50                                 u9955 0CCC  
                               u9965 0CFC                                 u9975 0D11  
                               u9985 0D25                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                  _scaleA10kPot$2851 01EA                    _scaleA10kPot$2852 01ED  
                               _iCnt 01BD                                 _main 035E  
                       ___ftpack@arg 00A0                                 cos@f 014C  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02DD  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2006                      _expressModeCnst 01E2  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2E86  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2036                         ___fttol@exp1 012D  
                              ??_cos 00F0                                ??_map 00ED  
              __size_of_calcCosArray 0081                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 0263  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 19D5  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 012E                      __end_of___awdiv 2537  
                    __end_of___ftadd 1127                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1DC8  
                    __end_of___ftneg 2D9C                                u10005 0D42  
                              u10125 2470                                u10205 1BEC  
                              u10065 2426                                u10305 05DE  
                              u10315 05EC                      __end_of___ftmul 1F2F  
                              u10325 0611                                u10245 0411  
                              u10335 0631                                u10255 0431  
                              u10345 06A2                                u10265 04AF  
                              u10355 06C2                                u10275 04CF  
                    ___awdiv@divisor 00A0                                u10285 0565  
                              u10295 0585                      __end_of___ftsub 2FD1  
                    __end_of___fttol 1AE1                                i1l135 02D8  
                              i1l136 001B                                i1l137 00EF  
                              i1l157 02CF                                i1l794 23D9  
                              i1l795 23FB                      ___awdiv@counter 00A5  
                              _RCREG 0199                                _SPBRG 019B  
                 __end_ofsin@coeff_a 2848                   __end_ofsin@coeff_b 2854  
                              _TXREG 019A                                _UQEnd 004C  
                _ConfigureOscillator 2D7F          __size_of_setLongBypassState 0021  
                   _setPresetDisplay 2106                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                       ___lltoft@exp 00AD                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1DC8                                _ldexp 1C88  
                              _frexp 226E                                _myBuf 03A0  
                              _errno 024D             _getModulationSubdivision 2036  
                      ___ftpack@sign 00A4                                _timer 0048  
                   __end_ofi1___lmul 3000                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 2098                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
        __end_of_read_bottom_tactile 2446                   __size_ofi1___aldiv 0082  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 0036  
      __end_of_setSwitchBypassRelays 20CE                         _calcCosArray 1850  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 123D                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0DBA                      __initialization 02DF  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 0003                         __end_of_main 0752  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                          modCos@angle 0134  
                ?_updateSwitchBypass 0070                       __CFG_LPBOR$OFF 0000  
             ring_tactiles@iLed_1533 00B5                          modCos@shift 013F  
                    _set_subdivision 1B6C          updateModulationArray@subDiv 0157  
                             ??_main 0255                        ___fttol@sign1 0128  
 __end_ofi1_getModulationSubdivision 2FA3           i1_getModulationSubdivision 2F77  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0           __end_of_solidring_tactiles 22EE  
                   ?_set_leds_bottom 00A0                               ?_floor 012E  
                             ?_ldexp 013E                               ?_frexp 00A0  
                   __end_of___altoft 21F4                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
                   __end_of___awtoft 2F04                     __end_of___ftpack 269C  
               ??_updateSwitchBypass 00BC                     __end_of___lltoft 2F77  
                             i1l2017 18E2                               i1l6110 2FD9  
                             i1l6114 2FE3                               i1l7010 02D7  
                             i1l6140 1903                               i1l6132 18F3  
                             i1l7004 02D1                               i1l6150 1931  
                             i1l6142 1911                               i1l7008 02D6  
                             i1l6154 193C                               i1l6158 194A  
                             i1l6810 23C1                               i1l6812 23C7  
                             i1l6820 23DF                               i1l6814 23CD  
                             i1l6816 23D3                               i1l6808 23BB  
                             i1l6920 0125                               i1l6842 2F9E  
                             i1l6834 2F8B                               i1l6914 010A  
                             i1l6860 24A9                               i1l6836 2F99  
                             i1l6828 2F86                               i1l6870 24B1  
                             i1l6854 249E                               i1l6942 0173  
                             i1l6872 24BD                               i1l6960 01C8  
                             i1l6944 0183                               i1l6882 24D8  
                             i1l6946 0185                               i1l6972 01F6  
                             i1l6956 01B0                               i1l6964 01D7  
                             i1l6886 24E0                               i1l6878 24CF  
                             i1l6974 0205                               i1l6958 01B9  
                             i1l6984 024D                               i1l6992 029F  
                             i1l6968 01EB                               i1l6976 0207  
                             i1l9858 23E4                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u540_25 2FE4                               u700_25 02CA  
                             u541_25 2FEB                               u550_25 1932  
                             u546_25 1906                               u548_25 1912  
                             u549_25 1926                               u664_25 24B4  
                             u680_25 011C                               u674_23 00C3  
                             u666_25 24BE                               u667_25 24C8  
                             u675_25 00D3                               u684_23 0149  
                             u668_25 24D0                               u676_25 00DC  
                             u678_25 0101                               u696_23 022F  
                             u689_23 019E                               u697_25 0244  
                             u699_25 02B1                       _debounce_count 0245  
                        modSaw@angle 012E                       _debounce_mode1 0247  
                     _debounce_mode2 0249                          modSaw@shift 013C  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 2494  
            ?_getModulationDelayTime 0070                       __CFG_PWRTE$OFF 0000  
                             ___ftge 217B                               ___lmul 1001  
                          ??___aldiv 00A8                               ___wmul 2E4E  
                  _update_selectMode 25DE                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                             _modCos 1654                     __end_of_init_adc 2DA6  
                             _modSaw 14BC                               _modTri 09F0  
                   __end_of_init_pwm 2370                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2E34                               _tmpVal 0253  
                  __end_of_USARTInit 23B4                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 1953                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 24E5              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2E02  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2002  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2E6A  
                      _scaleA100kPot 19D5         __end_of_setExpressionDisplay 2E1A  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 035A                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 258A                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01BC  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 005A            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0251  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 1850  
          __end_of_update_selectMode 2637              __end_of_set_subdivision 1BF7  
                         ___ftmul@f1 00AE                           ___ftmul@f2 00B1  
                         ___ftsub@f1 013A                           ___ftsub@f2 0137  
                         ___fttol@f1 0120                     ?_updateSwitchTap 0070  
                       ?_update_mode 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2DBE                         __pidataBANK2 07FF  
                       __pidataBANK3 2EC2                         __pidataBANK4 07FD  
                         ___lltoft@c 00A8                        __end_of_floor 1E7B  
                      __end_of_ldexp 1D1F                        __end_of_frexp 22AE  
                   _initSwitchBypass 2DCC                            ?i1___lmul 0070  
              _updateModulationArray 0DBA                      _doubleTap_state 004E  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0040                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 2140                           _delay_time 0052  
                   _long_press_limit 0058         __size_of_setDoublePressState 003D  
                         _delayfound 024B                           __pmaintext 035E  
                     _InitializeTaps 2F27                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0159                           __pintentry 0004  
                      _scaleiA10kPot 0752                           _blink_rate 005C  
                      ??_adc_convert 00A2                              ?_modCos 0134  
                          ?___altoft 00A8                              ?_modSaw 012E  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2E34                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 2EA2  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 0004  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2651 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 016D         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 004D  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BA                              _InitApp 2006  
               __end_of_scaleA10kPot 1C88               __end_of_InitializeTaps 2F4D  
                      ?_set_leds_top 00A0                           _knob1_prev 01CD  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CF                           _knob3_prev 01D1  
                         _knob4_prev 01D3                           _knob5_prev 01D5  
                   ?_set_subdivision 012E                            ?_showSave 0070  
                            ___aldiv 1953                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 24E5  
                    __size_of___lmul 0030                              ___ftadd 1031  
                            ___ftdiv 1D1F                              ___ftneg 2D93  
                         _knob_1_pos 01A8                           _knob_2_pos 01AA  
                    __size_of___wmul 001C                              ___ftmul 1E7B  
                         _knob_3_pos 01AC                              ___ftsub 2FA3  
                            ___fttol 1A5A                           _knob_4_pos 01AE  
                         _knob_5_pos 01B0                    _switchTap_pressed 016E  
                         ??___altoft 00AC                 _setExpressionDisplay 2E02  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 2EC2                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                    __end_of_eval_poly 270E  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 25DE                              __ptext2 20CE  
                            __ptext3 0BD3                              __ptext4 2E34  
                            __ptext5 1953                              __ptext6 123D  
                            __ptext7 0800                              __ptext8 2231  
                            __ptext9 2DEE           __end_of_setLongBypassState 0821  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2EA2                            _T2CONbits 001C  
                       __size_of_cos 007C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 02D9               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2DEE                         modTri@period 013A  
                  __end_of_modSquare 2231                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 2066                              clrloop0 2DB3  
               end_of_initialization 035A                              exp@sign 0154  
                         _modulation 22EE                              init_ram 2DA6  
                         ??_init_adc 00A0                              initloop 2DA7  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 22AE                        _longTap_timer 01B4  
                      _longTap_state 005D                        _longTap_start 016B  
                     ??_set_leds_top 00A4                    ?_read_top_tactile 0070  
                    ?_InitializeTaps 0070                              pow@sign 0162  
                  scaleA10kPot@input 0167              __end_of_setLongTapState 2E4E  
              _setSwitchBypassRelays 2098               i1set_leds_top@ledState 0072  
                 ??_read_top_tactile 00B2                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B2                     ___aldiv@quotient 00AB  
                   _longBypass_state 004F                     _longBypass_start 016A  
       __size_of_read_bottom_tactile 004A                  ?_solidring_tactiles 0070  
                       __pstringtext 2800            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 01E3  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                          _USARTInit 2370                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 18D1  
                          i1___awdiv 2494                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2D83                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 0126  
           __end_of_initSwitchBypass 2DDB                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01B6                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 21B7                 __end_of_setPedalMode 2F27  
                     __end_of___lmul 1031                       __end_of___wmul 2E6A  
                       _double_timer 01A0                          _adc_convert 2DDB  
   __end_of_getModulationSubdivision 2066                       _switchTap_down 01C5  
                     __end_of_modCos 1800                       __end_of_modSaw 1654  
                     __end_of_modTri 0BD3                       modSawRev@angle 0142  
                         floor@expon 0135                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 02DF  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 01BB                  _setDoublePressState 2231  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_cos 2800                          __end_of_map 1B6C  
                        __end_of_exp 14BC                          __end_of_log 2000  
                        __end_of_isr 02DD                           ?i1___awdiv 0070  
                        __end_of_sin 09F0                          __end_of_pow 123D  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0241  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0052                          __pdataBANK2 016F  
                        __pdataBANK3 01C7                          __pdataBANK4 0263  
                           ??_modCos 013A                             ??_modSaw 00F0  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DD             __size_of_updateSwitchTap 01E7  
                  __size_of___altoft 003D                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1BF7                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 25DE                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 005F  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01E7  
                      __pcstackBANK4 0255               __size_of_ring_tactiles 0050  
                     _expSwitchState 01E1     updateModulationArray@iAngle_2350 0156  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E7  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                   modCos@inflection 0137                        ?_calcCosArray 0070  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2842 025A                            _main$2843 025D  
                          _main$2844 0260              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01E0                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C2  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2847 01EA  
                 _scaleA100kPot$2848 01ED                    i1___awdiv@counter 0075  
                        _blink_delay 01CB                  __size_of_modulation 0041  
                      _resetRingLEDs 2E1A                          _blink_state 01DF  
                          _eval_poly 269C                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 2E86             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 23FC                       __size_of_floor 00B3  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 21F4                   calcCosArray@iAngle 0159  
                     _presetModeCnst 01E5                   _setLongBypassState 0800  
                __end_of_init_timer0 2D8A                  __end_of_init_timer2 2D93  
                          _mod_value 024F                            _mod_timer 01A4  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 0030                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 0051  
                     ___wmul@product 0132                       ??_calcCosArray 0152  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01D9                            clear_ram0 2DB2  
                 calcCosArray@tmpVal 0156                            _tap_timer 0044  
                ?_setLongBypassState 00A0                            _tap_total 023D  
              __size_of_setPedalMode 0023                        set_leds_top@x 00A0  
                           _PIR1bits 0011                        _ring_tactiles 1800  
                    _longBypass_down 01BF                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 01C0                 ?_read_bottom_tactile 0070  
            __size_ofi1_set_leds_top 0048            initSwitchBypass@initState 00BA  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 0040  
                         _ADCON0bits 009D                             i1___lmul 2FD1  
                         _ADCON1bits 009E             __size_of_set_subdivision 008B  
                  ___wmul@multiplier 012E                     set_subdivision@x 012E  
                   set_subdivision@y 0130            __size_of_read_top_tactile 004E  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004                          _modCos$2855 013C  
      __size_of_setSwitchBypassState 001C                           ?_modSawRev 0142  
              __end_of_scaleA100kPot 1A5A                    ??_updateSwitchTap 00BC  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 2F04  
                  _ReadSavedSettings 270E                    ?_initSwitchBypass 0070  
                  ring_tactiles@iLed 00B3                       wait_ms@timeSec 00AC  
                 ?_ReadSavedSettings 0070                          _modSaw$2857 0134  
                        _modSaw$2858 0137                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                        _mode1_state 01C1                        ??_update_mode 00A7  
                        _mode2_state 0050                            isr@subDiv 007D  
              ??_read_bottom_tactile 00B2                          _modTri$2856 0134  
                updateSwitchTap@iCnt 00C4                  ??_ReadSavedSettings 00A4  
                         _APFCONbits 011D                     __size_of___aldiv 0082  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                         ?_adc_convert 00A0  
                   __size_of___ftneg 0009                             ___altoft 21B7  
                   __size_of___ftmul 00B4                     __size_of___ftsub 002E  
                   __size_of___fttol 0087                             _cos$2859 014F  
                           ___awtoft 2EE2                __size_of_set_leds_top 0054  
                           ___ftpack 2637                    _baseline_mod_time 01C7  
                           _map$2845 00ED                             ___lltoft 2F4D  
             _preset_programmning_on 01C3                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2614 014F  
                           _exp$2863 014C                          _init_timer0 2D83  
                        _init_timer2 2D8A                             _cosArray 2482  
         __end_of_updateSwitchBypass 1363                             __ptext10 22AE  
                           __ptext11 1800                             __ptext20 2E86  
                           __ptext12 2F04                             __ptext21 14BC  
                           __ptext13 2106                             __ptext30 1C88  
                           __ptext22 24E5                             __ptext14 2E02  
                           __ptext31 2F4D                             __ptext23 1B6C  
                           __ptext15 2E1A                             __ptext40 0003  
                           __ptext32 2446                             __ptext24 0752  
                           __ptext16 0DBA                             __ptext41 2002  
                           __ptext33 23FC                             __ptext25 1BF7  
                           __ptext17 09F0                             __ptext50 217B  
                           __ptext42 2537                             __ptext34 1AE1  
                           __ptext26 19D5                             __ptext18 21F4  
                           __ptext51 21B7                             __ptext43 2036  
                           __ptext35 2DCC                             __ptext27 1127  
                           __ptext19 1654                             __ptext60 2637  
                           __ptext52 269C                             __ptext44 1850  
                           __ptext36 2E6A                             __ptext28 1F2F  
                           __ptext61 2DDB                             __ptext53 2E4E  
                           __ptext45 2784                             __ptext37 2098  
                           __ptext29 1363                             __ptext70 2D8A  
                           __ptext62 2370                             __ptext54 1E7B  
                           __ptext46 0821                             __ptext38 2066  
                           __ptext71 2D83                             __ptext63 270E  
                           __ptext55 2FA3                             __ptext47 1DC8  
                           __ptext39 1001                             __ptext80 18D1  
                           __ptext72 2D9C                             __ptext64 258A  
                           __ptext56 1031                             __ptext48 226E  
                           __ptext73 2D7F                             __ptext65 2140  
                           __ptext57 2D93                             __ptext49 1A5A  
                           __ptext66 2EA2                             __ptext58 1D1F  
                           __ptext75 23B4                             __ptext67 2F27  
                           __ptext59 2EE2                             __ptext76 2F77  
                           __ptext68 2006                             __ptext77 2494  
                           __ptext69 232F                             __ptext78 22EE  
                           __ptext79 2FD1                             _sin$2862 0145  
          __end_of_ReadSavedSettings 2784                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2860 015C  
                           _pow$2861 015F                        _presetChannel 016F  
                       ??_modulation 0036                          _mod_counter 01D7  
                           _modArray 238A              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2D9C                        __size_of_main 03F4  
                           _init_pwm 232F     updateModulationArray@angleFactor 0154  
       __size_of_ConfigureOscillator 0004                         _set_leds_top 258A  
                           _showSave 2DEE                             _num_taps 005E  
              __end_of_scaleiA10kPot 07FD                             int$flags 007E  
                    ??_resetRingLEDs 00A4                      i1set_leds_top@x 0070  
                     modSquare@angle 0148                  __end_of_update_mode 2106  
                           exp@coeff 2800                             _symmetry 01DB  
                modSawRev@inflection 0145                             log@coeff 281E  
                 __end_of_modulation 232F                 __end_of_calcCosArray 18D1  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 0148                    ??_set_subdivision 00F0  
                        ??_modSquare 00F0                             intlevel1 0000  
                    _set_leds_bottom 2140                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01C4                           _OSCCONbits 0099  
                       _preset_blink 016C               _getModulationDelayTime 2537  
                     i1_set_leds_top 23B4       __size_of_updateModulationArray 0246  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
                      _isInitialized 01BE        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2853 01EA                   _scaleiA10kPot$2854 01ED  
           __size_of_setLongTapState 001A                          _tmpModDelay 01B8  
                   _read_top_tactile 2446         ??i1_getModulationSubdivision 0072  
                       ___aldiv@sign 00AA           __size_of_ReadSavedSettings 0076  
        __end_of_setDoublePressState 226E                         _CCP10CONbits 061F  
                  _bottom_push_state 0056           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 23FC  
